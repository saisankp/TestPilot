{"test_class": {"identifier": "ServletRequestWrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "servlet/api/src/test/java/javax/servlet/ServletRequestWrapperTest.java"}, "test_case": {"identifier": "testGetParameter", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testGetParameter() {\n        ServletRequestWrapper wrapper = new ServletRequestWrapper(new TestServletRequest(null));\n        assertNull(wrapper.getParameter(\"null\"));\n    }", "signature": "void testGetParameter()", "full_signature": "@Test void testGetParameter()", "class_method_signature": "ServletRequestWrapperTest.testGetParameter()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getParameter"]}, "focal_class": {"identifier": "ServletRequestWrapper", "superclass": "", "interfaces": "implements ServletRequest", "fields": [{"original_string": "private ServletRequest wrapped;", "modifier": "private", "type": "ServletRequest", "declarator": "wrapped", "var_name": "wrapped"}], "methods": [{"identifier": "ServletRequestWrapper", "parameters": "(ServletRequest wrapped)", "modifiers": "public", "return": "", "signature": " ServletRequestWrapper(ServletRequest wrapped)", "full_signature": "public  ServletRequestWrapper(ServletRequest wrapped)", "class_method_signature": "ServletRequestWrapper.ServletRequestWrapper(ServletRequest wrapped)", "testcase": false, "constructor": true}, {"identifier": "getAsyncContext", "parameters": "()", "modifiers": "@Override public", "return": "AsyncContext", "signature": "AsyncContext getAsyncContext()", "full_signature": "@Override public AsyncContext getAsyncContext()", "class_method_signature": "ServletRequestWrapper.getAsyncContext()", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getAttribute(String name)", "full_signature": "@Override public Object getAttribute(String name)", "class_method_signature": "ServletRequestWrapper.getAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeNames", "parameters": "()", "modifiers": "@Override public", "return": "Enumeration<String>", "signature": "Enumeration<String> getAttributeNames()", "full_signature": "@Override public Enumeration<String> getAttributeNames()", "class_method_signature": "ServletRequestWrapper.getAttributeNames()", "testcase": false, "constructor": false}, {"identifier": "getCharacterEncoding", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCharacterEncoding()", "full_signature": "@Override public String getCharacterEncoding()", "class_method_signature": "ServletRequestWrapper.getCharacterEncoding()", "testcase": false, "constructor": false}, {"identifier": "getContentLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getContentLength()", "full_signature": "@Override public int getContentLength()", "class_method_signature": "ServletRequestWrapper.getContentLength()", "testcase": false, "constructor": false}, {"identifier": "getContentLengthLong", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getContentLengthLong()", "full_signature": "@Override public long getContentLengthLong()", "class_method_signature": "ServletRequestWrapper.getContentLengthLong()", "testcase": false, "constructor": false}, {"identifier": "getContentType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getContentType()", "full_signature": "@Override public String getContentType()", "class_method_signature": "ServletRequestWrapper.getContentType()", "testcase": false, "constructor": false}, {"identifier": "getDispatcherType", "parameters": "()", "modifiers": "@Override public", "return": "DispatcherType", "signature": "DispatcherType getDispatcherType()", "full_signature": "@Override public DispatcherType getDispatcherType()", "class_method_signature": "ServletRequestWrapper.getDispatcherType()", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "()", "modifiers": "@Override public", "return": "ServletInputStream", "signature": "ServletInputStream getInputStream()", "full_signature": "@Override public ServletInputStream getInputStream()", "class_method_signature": "ServletRequestWrapper.getInputStream()", "testcase": false, "constructor": false}, {"identifier": "getLocalAddr", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLocalAddr()", "full_signature": "@Override public String getLocalAddr()", "class_method_signature": "ServletRequestWrapper.getLocalAddr()", "testcase": false, "constructor": false}, {"identifier": "getLocalName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLocalName()", "full_signature": "@Override public String getLocalName()", "class_method_signature": "ServletRequestWrapper.getLocalName()", "testcase": false, "constructor": false}, {"identifier": "getLocalPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLocalPort()", "full_signature": "@Override public int getLocalPort()", "class_method_signature": "ServletRequestWrapper.getLocalPort()", "testcase": false, "constructor": false}, {"identifier": "getLocale", "parameters": "()", "modifiers": "@Override public", "return": "Locale", "signature": "Locale getLocale()", "full_signature": "@Override public Locale getLocale()", "class_method_signature": "ServletRequestWrapper.getLocale()", "testcase": false, "constructor": false}, {"identifier": "getLocales", "parameters": "()", "modifiers": "@Override public", "return": "Enumeration<Locale>", "signature": "Enumeration<Locale> getLocales()", "full_signature": "@Override public Enumeration<Locale> getLocales()", "class_method_signature": "ServletRequestWrapper.getLocales()", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "signature": "String getParameter(String name)", "full_signature": "@Override public String getParameter(String name)", "class_method_signature": "ServletRequestWrapper.getParameter(String name)", "testcase": false, "constructor": false}, {"identifier": "getParameterMap", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String[]>", "signature": "Map<String, String[]> getParameterMap()", "full_signature": "@Override public Map<String, String[]> getParameterMap()", "class_method_signature": "ServletRequestWrapper.getParameterMap()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "Enumeration<String>", "signature": "Enumeration<String> getParameterNames()", "full_signature": "@Override public Enumeration<String> getParameterNames()", "class_method_signature": "ServletRequestWrapper.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterValues", "parameters": "(String name)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterValues(String name)", "full_signature": "@Override public String[] getParameterValues(String name)", "class_method_signature": "ServletRequestWrapper.getParameterValues(String name)", "testcase": false, "constructor": false}, {"identifier": "getProtocol", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getProtocol()", "full_signature": "@Override public String getProtocol()", "class_method_signature": "ServletRequestWrapper.getProtocol()", "testcase": false, "constructor": false}, {"identifier": "getReader", "parameters": "()", "modifiers": "@Override public", "return": "BufferedReader", "signature": "BufferedReader getReader()", "full_signature": "@Override public BufferedReader getReader()", "class_method_signature": "ServletRequestWrapper.getReader()", "testcase": false, "constructor": false}, {"identifier": "getRealPath", "parameters": "(String path)", "modifiers": "@Deprecated @Override public", "return": "String", "signature": "String getRealPath(String path)", "full_signature": "@Deprecated @Override public String getRealPath(String path)", "class_method_signature": "ServletRequestWrapper.getRealPath(String path)", "testcase": false, "constructor": false}, {"identifier": "getRemoteAddr", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRemoteAddr()", "full_signature": "@Override public String getRemoteAddr()", "class_method_signature": "ServletRequestWrapper.getRemoteAddr()", "testcase": false, "constructor": false}, {"identifier": "getRemoteHost", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRemoteHost()", "full_signature": "@Override public String getRemoteHost()", "class_method_signature": "ServletRequestWrapper.getRemoteHost()", "testcase": false, "constructor": false}, {"identifier": "getRemotePort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRemotePort()", "full_signature": "@Override public int getRemotePort()", "class_method_signature": "ServletRequestWrapper.getRemotePort()", "testcase": false, "constructor": false}, {"identifier": "getRequest", "parameters": "()", "modifiers": "public", "return": "ServletRequest", "signature": "ServletRequest getRequest()", "full_signature": "public ServletRequest getRequest()", "class_method_signature": "ServletRequestWrapper.getRequest()", "testcase": false, "constructor": false}, {"identifier": "getRequestDispatcher", "parameters": "(String path)", "modifiers": "@Override public", "return": "RequestDispatcher", "signature": "RequestDispatcher getRequestDispatcher(String path)", "full_signature": "@Override public RequestDispatcher getRequestDispatcher(String path)", "class_method_signature": "ServletRequestWrapper.getRequestDispatcher(String path)", "testcase": false, "constructor": false}, {"identifier": "getScheme", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getScheme()", "full_signature": "@Override public String getScheme()", "class_method_signature": "ServletRequestWrapper.getScheme()", "testcase": false, "constructor": false}, {"identifier": "getServerName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getServerName()", "full_signature": "@Override public String getServerName()", "class_method_signature": "ServletRequestWrapper.getServerName()", "testcase": false, "constructor": false}, {"identifier": "getServerPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getServerPort()", "full_signature": "@Override public int getServerPort()", "class_method_signature": "ServletRequestWrapper.getServerPort()", "testcase": false, "constructor": false}, {"identifier": "getServletContext", "parameters": "()", "modifiers": "@Override public", "return": "ServletContext", "signature": "ServletContext getServletContext()", "full_signature": "@Override public ServletContext getServletContext()", "class_method_signature": "ServletRequestWrapper.getServletContext()", "testcase": false, "constructor": false}, {"identifier": "isAsyncStarted", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAsyncStarted()", "full_signature": "@Override public boolean isAsyncStarted()", "class_method_signature": "ServletRequestWrapper.isAsyncStarted()", "testcase": false, "constructor": false}, {"identifier": "isAsyncSupported", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAsyncSupported()", "full_signature": "@Override public boolean isAsyncSupported()", "class_method_signature": "ServletRequestWrapper.isAsyncSupported()", "testcase": false, "constructor": false}, {"identifier": "isSecure", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSecure()", "full_signature": "@Override public boolean isSecure()", "class_method_signature": "ServletRequestWrapper.isSecure()", "testcase": false, "constructor": false}, {"identifier": "isWrapperFor", "parameters": "(ServletRequest wrapped)", "modifiers": "public", "return": "boolean", "signature": "boolean isWrapperFor(ServletRequest wrapped)", "full_signature": "public boolean isWrapperFor(ServletRequest wrapped)", "class_method_signature": "ServletRequestWrapper.isWrapperFor(ServletRequest wrapped)", "testcase": false, "constructor": false}, {"identifier": "isWrapperFor", "parameters": "(Class<?> wrappedType)", "modifiers": "public", "return": "boolean", "signature": "boolean isWrapperFor(Class<?> wrappedType)", "full_signature": "public boolean isWrapperFor(Class<?> wrappedType)", "class_method_signature": "ServletRequestWrapper.isWrapperFor(Class<?> wrappedType)", "testcase": false, "constructor": false}, {"identifier": "removeAttribute", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void removeAttribute(String name)", "full_signature": "@Override public void removeAttribute(String name)", "class_method_signature": "ServletRequestWrapper.removeAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, Object object)", "modifiers": "@Override public", "return": "void", "signature": "void setAttribute(String name, Object object)", "full_signature": "@Override public void setAttribute(String name, Object object)", "class_method_signature": "ServletRequestWrapper.setAttribute(String name, Object object)", "testcase": false, "constructor": false}, {"identifier": "setCharacterEncoding", "parameters": "(String characterEncoding)", "modifiers": "@Override public", "return": "void", "signature": "void setCharacterEncoding(String characterEncoding)", "full_signature": "@Override public void setCharacterEncoding(String characterEncoding)", "class_method_signature": "ServletRequestWrapper.setCharacterEncoding(String characterEncoding)", "testcase": false, "constructor": false}, {"identifier": "setRequest", "parameters": "(ServletRequest wrapped)", "modifiers": "public", "return": "void", "signature": "void setRequest(ServletRequest wrapped)", "full_signature": "public void setRequest(ServletRequest wrapped)", "class_method_signature": "ServletRequestWrapper.setRequest(ServletRequest wrapped)", "testcase": false, "constructor": false}, {"identifier": "startAsync", "parameters": "()", "modifiers": "@Override public", "return": "AsyncContext", "signature": "AsyncContext startAsync()", "full_signature": "@Override public AsyncContext startAsync()", "class_method_signature": "ServletRequestWrapper.startAsync()", "testcase": false, "constructor": false}, {"identifier": "startAsync", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse)", "modifiers": "@Override public", "return": "AsyncContext", "signature": "AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse)", "full_signature": "@Override public AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse)", "class_method_signature": "ServletRequestWrapper.startAsync(ServletRequest servletRequest, ServletResponse servletResponse)", "testcase": false, "constructor": false}], "file": "servlet/api/src/main/java/javax/servlet/ServletRequestWrapper.java"}, "focal_method": {"identifier": "getParameter", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getParameter(String name) {\n        return wrapped.getParameter(name);\n    }", "signature": "String getParameter(String name)", "full_signature": "@Override public String getParameter(String name)", "class_method_signature": "ServletRequestWrapper.getParameter(String name)", "testcase": false, "constructor": false, "invocations": ["getParameter"]}, "repository": {"repo_id": 114777829, "url": "https://github.com/piranhacloud/piranha", "stars": 27, "created": "12/19/2017 2:55:23 PM +00:00", "updates": "2020-01-27T11:57:41+00:00", "fork": "False", "license": "licensed"}}