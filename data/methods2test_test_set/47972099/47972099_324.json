{"test_class": {"identifier": "SeekableFileChannelInputViewTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/io/disk/SeekableFileChannelInputViewTest.java"}, "test_case": {"identifier": "testSeek", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSeek() {\n\t\tfinal IOManager ioManager = new IOManagerAsync();\n\t\tfinal int PAGE_SIZE = 16 * 1024;\n\t\tfinal int NUM_RECORDS = 120000;\n\t\t// integers across 7.x pages (7 pages = 114.688 bytes, 8 pages = 131.072 bytes)\n\t\t\n\t\ttry {\n\t\t\tMemoryManager memMan = new MemoryManager(4 * PAGE_SIZE, 1, PAGE_SIZE, MemoryType.HEAP, true);\n\t\t\tList<MemorySegment> memory = new ArrayList<MemorySegment>();\n\t\t\tmemMan.allocatePages(new DummyInvokable(), memory, 4);\n\t\t\t\n\t\t\tFileIOChannel.ID channel = ioManager.createChannel();\n\t\t\tBlockChannelWriter<MemorySegment> writer = ioManager.createBlockChannelWriter(channel);\n\t\t\tFileChannelOutputView out = new FileChannelOutputView(writer, memMan, memory, memMan.getPageSize());\n\t\t\t\n\t\t\t// write some integers across 7.5 pages (7 pages = 114.688 bytes, 8 pages = 131.072 bytes)\n\t\t\tfor (int i = 0; i < NUM_RECORDS; i += 4) {\n\t\t\t\tout.writeInt(i);\n\t\t\t}\n\t\t\t// close for the first time, make sure all memory returns\n\t\t\tout.close();\n\t\t\tassertTrue(memMan.verifyEmpty());\n\t\t\t\n\t\t\tmemMan.allocatePages(new DummyInvokable(), memory, 4);\n\t\t\tSeekableFileChannelInputView in = new SeekableFileChannelInputView(ioManager, channel, memMan, memory, out.getBytesInLatestSegment());\n\t\t\t\n\t\t\t// read first, complete\n\t\t\tfor (int i = 0; i < NUM_RECORDS; i += 4) {\n\t\t\t\tassertEquals(i, in.readInt());\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tin.readInt();\n\t\t\t\tfail(\"should throw EOF exception\");\n\t\t\t} catch (EOFException ignored) {}\n\t\t\t\n\t\t\t// seek to the middle of the 3rd page\n\t\t\tint i = 2 * PAGE_SIZE + PAGE_SIZE / 4;\n\t\t\tin.seek(i);\n\t\t\tfor (; i < NUM_RECORDS; i += 4) {\n\t\t\t\tassertEquals(i, in.readInt());\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tin.readInt();\n\t\t\t\tfail(\"should throw EOF exception\");\n\t\t\t} catch (EOFException ignored) {}\n\t\t\t\n\t\t\t// seek to the end\n\t\t\ti = 120000 - 4;\n\t\t\tin.seek(i);\n\t\t\tfor (; i < NUM_RECORDS; i += 4) {\n\t\t\t\tassertEquals(i, in.readInt());\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tin.readInt();\n\t\t\t\tfail(\"should throw EOF exception\");\n\t\t\t} catch (EOFException ignored) {}\n\t\t\t\n\t\t\t// seek to the beginning\n\t\t\ti = 0;\n\t\t\tin.seek(i);\n\t\t\tfor (; i < NUM_RECORDS; i += 4) {\n\t\t\t\tassertEquals(i, in.readInt());\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tin.readInt();\n\t\t\t\tfail(\"should throw EOF exception\");\n\t\t\t} catch (EOFException ignored) {}\n\t\t\t\n\t\t\t// seek to after a page\n\t\t\ti = PAGE_SIZE;\n\t\t\tin.seek(i);\n\t\t\tfor (; i < NUM_RECORDS; i += 4) {\n\t\t\t\tassertEquals(i, in.readInt());\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tin.readInt();\n\t\t\t\tfail(\"should throw EOF exception\");\n\t\t\t} catch (EOFException ignored) {}\n\t\t\t\n\t\t\t// seek to after a page\n\t\t\ti = 3 * PAGE_SIZE;\n\t\t\tin.seek(i);\n\t\t\tfor (; i < NUM_RECORDS; i += 4) {\n\t\t\t\tassertEquals(i, in.readInt());\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tin.readInt();\n\t\t\t\tfail(\"should throw EOF exception\");\n\t\t\t} catch (EOFException ignored) {}\n\t\t\t\n\t\t\t// seek to the end\n\t\t\ti = NUM_RECORDS;\n\t\t\tin.seek(i);\n\t\t\ttry {\n\t\t\t\tin.readInt();\n\t\t\t\tfail(\"should throw EOF exception\");\n\t\t\t} catch (EOFException ignored) {}\n\t\t\t\n\t\t\t// seek out of bounds\n\t\t\ttry {\n\t\t\t\tin.seek(-10);\n\t\t\t\tfail(\"should throw an exception\");\n\t\t\t} catch (IllegalArgumentException ignored) {}\n\t\t\ttry {\n\t\t\t\tin.seek(NUM_RECORDS + 1);\n\t\t\t\tfail(\"should throw an exception\");\n\t\t\t} catch (IllegalArgumentException ignored) {}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t\tfinally {\n\t\t\tioManager.shutdown();\n\t\t}\n\t}", "signature": "void testSeek()", "full_signature": "@Test public void testSeek()", "class_method_signature": "SeekableFileChannelInputViewTest.testSeek()", "testcase": true, "constructor": false, "invocations": ["allocatePages", "createChannel", "createBlockChannelWriter", "getPageSize", "writeInt", "close", "assertTrue", "verifyEmpty", "allocatePages", "getBytesInLatestSegment", "assertEquals", "readInt", "readInt", "fail", "seek", "assertEquals", "readInt", "readInt", "fail", "seek", "assertEquals", "readInt", "readInt", "fail", "seek", "assertEquals", "readInt", "readInt", "fail", "seek", "assertEquals", "readInt", "readInt", "fail", "seek", "assertEquals", "readInt", "readInt", "fail", "seek", "readInt", "fail", "seek", "fail", "seek", "fail", "printStackTrace", "fail", "getMessage", "shutdown"]}, "focal_class": {"identifier": "SeekableFileChannelInputView", "superclass": "extends AbstractPagedInputView", "interfaces": "", "fields": [{"original_string": "private BlockChannelReader<MemorySegment> reader;", "modifier": "private", "type": "BlockChannelReader<MemorySegment>", "declarator": "reader", "var_name": "reader"}, {"original_string": "private final IOManager ioManager;", "modifier": "private final", "type": "IOManager", "declarator": "ioManager", "var_name": "ioManager"}, {"original_string": "private final FileIOChannel.ID channelId;", "modifier": "private final", "type": "FileIOChannel.ID", "declarator": "channelId", "var_name": "channelId"}, {"original_string": "private final MemoryManager memManager;", "modifier": "private final", "type": "MemoryManager", "declarator": "memManager", "var_name": "memManager"}, {"original_string": "private final List<MemorySegment> memory;", "modifier": "private final", "type": "List<MemorySegment>", "declarator": "memory", "var_name": "memory"}, {"original_string": "private final int sizeOfLastBlock;", "modifier": "private final", "type": "int", "declarator": "sizeOfLastBlock", "var_name": "sizeOfLastBlock"}, {"original_string": "private final int numBlocksTotal;", "modifier": "private final", "type": "int", "declarator": "numBlocksTotal", "var_name": "numBlocksTotal"}, {"original_string": "private final int segmentSize;", "modifier": "private final", "type": "int", "declarator": "segmentSize", "var_name": "segmentSize"}, {"original_string": "private int numRequestsRemaining;", "modifier": "private", "type": "int", "declarator": "numRequestsRemaining", "var_name": "numRequestsRemaining"}, {"original_string": "private int numBlocksRemaining;", "modifier": "private", "type": "int", "declarator": "numBlocksRemaining", "var_name": "numBlocksRemaining"}], "methods": [{"identifier": "SeekableFileChannelInputView", "parameters": "(IOManager ioManager, FileIOChannel.ID channelId, MemoryManager memManager, List<MemorySegment> memory, int sizeOfLastBlock)", "modifiers": "public", "return": "", "signature": " SeekableFileChannelInputView(IOManager ioManager, FileIOChannel.ID channelId, MemoryManager memManager, List<MemorySegment> memory, int sizeOfLastBlock)", "full_signature": "public  SeekableFileChannelInputView(IOManager ioManager, FileIOChannel.ID channelId, MemoryManager memManager, List<MemorySegment> memory, int sizeOfLastBlock)", "class_method_signature": "SeekableFileChannelInputView.SeekableFileChannelInputView(IOManager ioManager, FileIOChannel.ID channelId, MemoryManager memManager, List<MemorySegment> memory, int sizeOfLastBlock)", "testcase": false, "constructor": true}, {"identifier": "seek", "parameters": "(long position)", "modifiers": "public", "return": "void", "signature": "void seek(long position)", "full_signature": "public void seek(long position)", "class_method_signature": "SeekableFileChannelInputView.seek(long position)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "SeekableFileChannelInputView.close()", "testcase": false, "constructor": false}, {"identifier": "closeAndDelete", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void closeAndDelete()", "full_signature": "public void closeAndDelete()", "class_method_signature": "SeekableFileChannelInputView.closeAndDelete()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(boolean deleteFile)", "modifiers": "private", "return": "void", "signature": "void close(boolean deleteFile)", "full_signature": "private void close(boolean deleteFile)", "class_method_signature": "SeekableFileChannelInputView.close(boolean deleteFile)", "testcase": false, "constructor": false}, {"identifier": "nextSegment", "parameters": "(MemorySegment current)", "modifiers": "@Override protected", "return": "MemorySegment", "signature": "MemorySegment nextSegment(MemorySegment current)", "full_signature": "@Override protected MemorySegment nextSegment(MemorySegment current)", "class_method_signature": "SeekableFileChannelInputView.nextSegment(MemorySegment current)", "testcase": false, "constructor": false}, {"identifier": "getLimitForSegment", "parameters": "(MemorySegment segment)", "modifiers": "@Override protected", "return": "int", "signature": "int getLimitForSegment(MemorySegment segment)", "full_signature": "@Override protected int getLimitForSegment(MemorySegment segment)", "class_method_signature": "SeekableFileChannelInputView.getLimitForSegment(MemorySegment segment)", "testcase": false, "constructor": false}, {"identifier": "sendReadRequest", "parameters": "(MemorySegment seg)", "modifiers": "private", "return": "void", "signature": "void sendReadRequest(MemorySegment seg)", "full_signature": "private void sendReadRequest(MemorySegment seg)", "class_method_signature": "SeekableFileChannelInputView.sendReadRequest(MemorySegment seg)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/io/disk/SeekableFileChannelInputView.java"}, "focal_method": {"identifier": "seek", "parameters": "(long position)", "modifiers": "public", "return": "void", "body": "public void seek(long position) throws IOException {\n\t\tfinal int block = MathUtils.checkedDownCast(position / segmentSize);\n\t\tfinal int positionInBlock = (int) (position % segmentSize);\n\t\t\n\t\tif (position < 0 || block >= numBlocksTotal || (block == numBlocksTotal - 1 && positionInBlock > sizeOfLastBlock)) {\n\t\t\tthrow new IllegalArgumentException(\"Position is out of range\");\n\t\t}\n\t\t\n\t\tclear();\n\t\tif (reader != null) {\n\t\t\treader.close();\n\t\t}\n\t\t\n\t\treader = ioManager.createBlockChannelReader(channelId);\n\t\t\n\t\tif (block > 0) {\n\t\t\treader.seekToPosition(((long) block) * segmentSize);\n\t\t}\n\t\t\n\t\tthis.numBlocksRemaining = this.numBlocksTotal - block;\n\t\tthis.numRequestsRemaining = numBlocksRemaining;\n\t\t\n\t\tfor (int i = 0; i < memory.size(); i++) {\n\t\t\tsendReadRequest(memory.get(i));\n\t\t}\n\t\t\n\t\tnumBlocksRemaining--;\n\t\tseekInput(reader.getNextReturnedBlock(), positionInBlock, numBlocksRemaining == 0 ? sizeOfLastBlock : segmentSize);\n\t}", "signature": "void seek(long position)", "full_signature": "public void seek(long position)", "class_method_signature": "SeekableFileChannelInputView.seek(long position)", "testcase": false, "constructor": false, "invocations": ["checkedDownCast", "clear", "close", "createBlockChannelReader", "seekToPosition", "size", "sendReadRequest", "get", "seekInput", "getNextReturnedBlock"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}