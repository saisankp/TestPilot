{"test_class": {"identifier": "AnswerAnalyzerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final SimpleTokenizer tokenizer = new SimpleTokenizer();", "modifier": "private static final", "type": "SimpleTokenizer", "declarator": "tokenizer = new SimpleTokenizer()", "var_name": "tokenizer"}, {"original_string": "private static final OpenNLPPPOSTagger pos = new OpenNLPPPOSTagger();", "modifier": "private static final", "type": "OpenNLPPPOSTagger", "declarator": "pos = new OpenNLPPPOSTagger()", "var_name": "pos"}, {"original_string": "private static final OpenNLPParser parser = new OpenNLPParser();", "modifier": "private static final", "type": "OpenNLPParser", "declarator": "parser = new OpenNLPParser()", "var_name": "parser"}, {"original_string": "private static final AnswerAnalyzer answer = new AnswerAnalyzer();", "modifier": "private static final", "type": "AnswerAnalyzer", "declarator": "answer = new AnswerAnalyzer()", "var_name": "answer"}], "file": "dialog/src/test/java/roboy/linguistics/sentenceanalysis/AnswerAnalyzerTest.java"}, "test_case": {"identifier": "testName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testName() {\n\t\tassertEquals(\"frank\", analyze(\"Frank\"));\n\t\tassertEquals(\"carl\", analyze(\"I am carl\"));\n\t\tassertEquals(\"horst\", analyze(\"My name is Horst\"));\n\t\tassertEquals(\"bill gates\", analyze(\"I am Bill Gates\"));\n\t\tassertEquals(\"jack\", analyze(\"My friends call me Jack\"));\n\t\tassertEquals(\"bill\", analyze(\"You can call me Bill\"));\n//\t\tassertEquals(\"bob\", analyze(\"Call me Bob\")); // Doesn't work due to POS tagger error\n\t}", "signature": "void testName()", "full_signature": "@Test public void testName()", "class_method_signature": "AnswerAnalyzerTest.testName()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "analyze", "assertEquals", "analyze", "assertEquals", "analyze", "assertEquals", "analyze", "assertEquals", "analyze", "assertEquals", "analyze"]}, "focal_class": {"identifier": "AnswerAnalyzer", "superclass": "", "interfaces": "implements Analyzer", "fields": [{"original_string": "private final static Logger logger = LogManager.getLogger();", "modifier": "private final static", "type": "Logger", "declarator": "logger = LogManager.getLogger()", "var_name": "logger"}], "methods": [{"identifier": "analyze", "parameters": "(Interpretation interpretation)", "modifiers": "@Override public", "return": "Interpretation", "signature": "Interpretation analyze(Interpretation interpretation)", "full_signature": "@Override public Interpretation analyze(Interpretation interpretation)", "class_method_signature": "AnswerAnalyzer.analyze(Interpretation interpretation)", "testcase": false, "constructor": false}], "file": "dialog/src/main/java/roboy/linguistics/sentenceanalysis/AnswerAnalyzer.java"}, "focal_method": {"identifier": "analyze", "parameters": "(Interpretation interpretation)", "modifiers": "@Override public", "return": "Interpretation", "body": "@Override\n\tpublic Interpretation analyze(Interpretation interpretation) {\n\t\t\n\t\t// case pas object answer\n\t\tMap<SemanticRole, String> pas = interpretation.getPas();\n\t\tif(pas.containsKey(SemanticRole.PREDICATE)\n\t\t\t\t&& pas.containsKey(SemanticRole.LOCATION)){\n\t\t\tString pp = pas.get(SemanticRole.LOCATION);\n\t\t\tString pred = pas.get(SemanticRole.PREDICATE);\n\t\t\tif(Linguistics.tobe.contains(pred)){\n\t\t\t\tpred = \"\";\n\t\t\t} else {\n\t\t\t\tpred = pred + \" \";\n\t\t\t}\n\t\t\tif(pp.contains(\" \")){\n\t\t\t\tpp = pp.substring(pp.indexOf(\" \") + 1);\n\t\t\t}\n\t\t\tinterpretation.setObjAnswer(pp.toLowerCase());\n\t\t\tinterpretation.setPredAnswer(pred + pp.toLowerCase());\n\t\t\treturn interpretation;\n\n\t\t} else if(pas.containsKey(SemanticRole.PREDICATE)\n\t\t\t\t&& pas.containsKey(SemanticRole.PATIENT)){\n\t\t\tString pred = pas.get(SemanticRole.PREDICATE).toLowerCase();\n\t\t\tif(Linguistics.tobe.contains(pred)){\n\t\t\t\tpred = \"\";\n\t\t\t} else {\n\t\t\t\tpred = pred + \" \";\n\t\t\t}\n\t\t\tString pat = pas.get(SemanticRole.PATIENT).toLowerCase();\n\t\t\tinterpretation.setObjAnswer(pat);\n\t\t\tinterpretation.setPredAnswer(pred + pat);\n\t\t\treturn interpretation;\n\t\t}\n\t\t\n\t\t// check for last verb\n\t\tint verbIndex = -1;\n\t\tList<String> tokens = interpretation.getTokens();\n\t\tString[] pos = interpretation.getPosTags();\n\n\t\tif (pos != null) {\n\t\t\tfor(int i=0; i < pos.length; i++) {\n\t\t\t\tif(pos[i] != null && pos[i].startsWith(\"V\")) {\n\t\t\t\t\tverbIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.warn(\"POSTAGS missing but AnswerAnalyzer is used!\");\n\t\t}\n\n//\t\tSystem.out.println(\"Verbindex=\"+verbIndex);\n\t\t\n\t\t// case one term answer\n        if (tokens != null && !tokens.isEmpty()) {\n            if(verbIndex == -1){\n                if (tokens.size() == 1) {\n                    interpretation.setObjAnswer(tokens.get(0));\n                    interpretation.setPredAnswer(tokens.get(0));\n                    return interpretation;\n                }\n            }\n\t\t\n            // case pas failed object answer\n            StringBuilder answer = new StringBuilder(\"\");\n            StringBuilder answerPred = new StringBuilder(\"\");\n            for(int i = verbIndex; i < tokens.size(); i++){\n                if(i != verbIndex){\n                    if(tokens.get(i) != null && !\"me\".equals(tokens.get(i).toLowerCase())){\n                        if(answer.length() > 0) answer.append(' ');\n                        if(Character.isLetterOrDigit(tokens.get(i).charAt(0))) answer.append(tokens.get(i).toLowerCase());\n                        if(answerPred.length()>0) answerPred.append(' ');\n                        if(Character.isLetterOrDigit(tokens.get(i).charAt(0))) answerPred.append(tokens.get(i).toLowerCase());\n                    }\n                } else if(verbIndex != -1 && !Linguistics.tobe.contains(tokens.get(i))){\n                    answerPred.append(tokens.get(i).toLowerCase());\n                }\n            }\n            interpretation.setObjAnswer(answer.toString());\n            interpretation.setPredAnswer(answerPred.toString());\n        } else {\n\t\t    logger.warn(\"TOKENS missing but AnswerAnalyzer is used!\");\n\t\t}\n\n\t\treturn interpretation;\n\t}", "signature": "Interpretation analyze(Interpretation interpretation)", "full_signature": "@Override public Interpretation analyze(Interpretation interpretation)", "class_method_signature": "AnswerAnalyzer.analyze(Interpretation interpretation)", "testcase": false, "constructor": false, "invocations": ["getPas", "containsKey", "containsKey", "get", "get", "contains", "contains", "substring", "indexOf", "setObjAnswer", "toLowerCase", "setPredAnswer", "toLowerCase", "containsKey", "containsKey", "toLowerCase", "get", "contains", "toLowerCase", "get", "setObjAnswer", "setPredAnswer", "getTokens", "getPosTags", "startsWith", "warn", "isEmpty", "size", "setObjAnswer", "get", "setPredAnswer", "get", "size", "get", "equals", "toLowerCase", "get", "length", "append", "isLetterOrDigit", "charAt", "get", "append", "toLowerCase", "get", "length", "append", "isLetterOrDigit", "charAt", "get", "append", "toLowerCase", "get", "contains", "get", "append", "toLowerCase", "get", "setObjAnswer", "toString", "setPredAnswer", "toString", "warn"]}, "repository": {"repo_id": 61996222, "url": "https://github.com/Roboy/roboy_dialog", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 96226, "license": "licensed"}}