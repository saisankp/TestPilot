{"test_class": {"identifier": "TestReliableSpoolingFileEventReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TestReliableSpoolingFileEventReader.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TestReliableSpoolingFileEventReader.class)", "var_name": "logger"}, {"original_string": "private static final File WORK_DIR = new File(\n      \"target/test/work/\" + TestReliableSpoolingFileEventReader.class.getSimpleName());", "modifier": "private static final", "type": "File", "declarator": "WORK_DIR = new File(\n      \"target/test/work/\" + TestReliableSpoolingFileEventReader.class.getSimpleName())", "var_name": "WORK_DIR"}, {"original_string": "private static final File TRACKER_DIR = new File(WORK_DIR,\n      SpoolDirectorySourceConfigurationConstants.DEFAULT_TRACKER_DIR);", "modifier": "private static final", "type": "File", "declarator": "TRACKER_DIR = new File(WORK_DIR,\n      SpoolDirectorySourceConfigurationConstants.DEFAULT_TRACKER_DIR)", "var_name": "TRACKER_DIR"}], "file": "flume-ng-core/src/test/java/org/apache/flume/client/avro/TestReliableSpoolingFileEventReader.java"}, "test_case": {"identifier": "testConsumeFileRandomlyNewFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConsumeFileRandomlyNewFile() throws Exception {\n    // Atomic moves are not supported in Windows.\n    if (SystemUtils.IS_OS_WINDOWS) {\n      return;\n    }\n    final ReliableEventReader reader =\n        new ReliableSpoolingFileEventReader.Builder().spoolDirectory(WORK_DIR)\n                                                     .consumeOrder(ConsumeOrder.RANDOM)\n                                                     .sourceCounter(new SourceCounter(\"test\"))\n                                                     .build();\n    File fileName = new File(WORK_DIR, \"new-file\");\n    FileUtils.write(fileName, \"New file created in the end. Shoud be read randomly.\\n\");\n    Set<String> expected = Sets.newHashSet();\n    int totalFiles = WORK_DIR.listFiles().length;\n    final Set<String> actual = Sets.newHashSet();\n    ExecutorService executor = Executors.newSingleThreadExecutor();\n    final Semaphore semaphore1 = new Semaphore(0);\n    final Semaphore semaphore2 = new Semaphore(0);\n    Future<Void> wait = executor.submit(new Callable<Void>() {\n      @Override\n      public Void call() throws Exception {\n        readEventsForFilesInDir(WORK_DIR, reader, actual, semaphore1, semaphore2);\n        return null;\n      }\n    });\n    semaphore1.acquire();\n    File finalFile = new File(WORK_DIR, \"t-file\");\n    FileUtils.write(finalFile, \"Last file\");\n    semaphore2.release();\n    wait.get();\n    int listFilesCount = ((ReliableSpoolingFileEventReader)reader).getListFilesCount();\n    finalFile.delete();\n    createExpectedFromFilesInSetup(expected);\n    expected.add(\"\");\n    expected.add(\"New file created in the end. Shoud be read randomly.\");\n    expected.add(\"Last file\");\n    Assert.assertTrue(listFilesCount < (totalFiles + 2));\n    Assert.assertEquals(expected, actual);\n  }", "signature": "void testConsumeFileRandomlyNewFile()", "full_signature": "@Test public void testConsumeFileRandomlyNewFile()", "class_method_signature": "TestReliableSpoolingFileEventReader.testConsumeFileRandomlyNewFile()", "testcase": true, "constructor": false, "invocations": ["build", "sourceCounter", "consumeOrder", "spoolDirectory", "write", "newHashSet", "listFiles", "newHashSet", "newSingleThreadExecutor", "submit", "readEventsForFilesInDir", "acquire", "write", "release", "get", "getListFilesCount", "delete", "createExpectedFromFilesInSetup", "add", "add", "add", "assertTrue", "assertEquals"]}, "focal_class": {"identifier": "ReliableSpoolingFileEventReader", "superclass": "", "interfaces": "implements ReliableEventReader", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n      .getLogger(ReliableSpoolingFileEventReader.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n      .getLogger(ReliableSpoolingFileEventReader.class)", "var_name": "logger"}, {"original_string": "static final String metaFileName = \".flumespool-main.meta\";", "modifier": "static final", "type": "String", "declarator": "metaFileName = \".flumespool-main.meta\"", "var_name": "metaFileName"}, {"original_string": "private final File spoolDirectory;", "modifier": "private final", "type": "File", "declarator": "spoolDirectory", "var_name": "spoolDirectory"}, {"original_string": "private final Path spoolDirPath;", "modifier": "private final", "type": "Path", "declarator": "spoolDirPath", "var_name": "spoolDirPath"}, {"original_string": "private final String completedSuffix;", "modifier": "private final", "type": "String", "declarator": "completedSuffix", "var_name": "completedSuffix"}, {"original_string": "private final String deserializerType;", "modifier": "private final", "type": "String", "declarator": "deserializerType", "var_name": "deserializerType"}, {"original_string": "private final Context deserializerContext;", "modifier": "private final", "type": "Context", "declarator": "deserializerContext", "var_name": "deserializerContext"}, {"original_string": "private final Pattern includePattern;", "modifier": "private final", "type": "Pattern", "declarator": "includePattern", "var_name": "includePattern"}, {"original_string": "private final Pattern ignorePattern;", "modifier": "private final", "type": "Pattern", "declarator": "ignorePattern", "var_name": "ignorePattern"}, {"original_string": "private final File metaFile;", "modifier": "private final", "type": "File", "declarator": "metaFile", "var_name": "metaFile"}, {"original_string": "private File trackerDirectory;", "modifier": "private", "type": "File", "declarator": "trackerDirectory", "var_name": "trackerDirectory"}, {"original_string": "private final boolean annotateFileName;", "modifier": "private final", "type": "boolean", "declarator": "annotateFileName", "var_name": "annotateFileName"}, {"original_string": "private final boolean annotateBaseName;", "modifier": "private final", "type": "boolean", "declarator": "annotateBaseName", "var_name": "annotateBaseName"}, {"original_string": "private final String fileNameHeader;", "modifier": "private final", "type": "String", "declarator": "fileNameHeader", "var_name": "fileNameHeader"}, {"original_string": "private final String baseNameHeader;", "modifier": "private final", "type": "String", "declarator": "baseNameHeader", "var_name": "baseNameHeader"}, {"original_string": "private final String deletePolicy;", "modifier": "private final", "type": "String", "declarator": "deletePolicy", "var_name": "deletePolicy"}, {"original_string": "private final TrackingPolicy trackingPolicy;", "modifier": "private final", "type": "TrackingPolicy", "declarator": "trackingPolicy", "var_name": "trackingPolicy"}, {"original_string": "private final Charset inputCharset;", "modifier": "private final", "type": "Charset", "declarator": "inputCharset", "var_name": "inputCharset"}, {"original_string": "private final DecodeErrorPolicy decodeErrorPolicy;", "modifier": "private final", "type": "DecodeErrorPolicy", "declarator": "decodeErrorPolicy", "var_name": "decodeErrorPolicy"}, {"original_string": "private final ConsumeOrder consumeOrder;", "modifier": "private final", "type": "ConsumeOrder", "declarator": "consumeOrder", "var_name": "consumeOrder"}, {"original_string": "private final boolean recursiveDirectorySearch;", "modifier": "private final", "type": "boolean", "declarator": "recursiveDirectorySearch", "var_name": "recursiveDirectorySearch"}, {"original_string": "private final SourceCounter sourceCounter;", "modifier": "private final", "type": "SourceCounter", "declarator": "sourceCounter", "var_name": "sourceCounter"}, {"original_string": "private Optional<FileInfo> currentFile = Optional.absent();", "modifier": "private", "type": "Optional<FileInfo>", "declarator": "currentFile = Optional.absent()", "var_name": "currentFile"}, {"original_string": "private Optional<FileInfo> lastFileRead = Optional.absent();", "modifier": "private", "type": "Optional<FileInfo>", "declarator": "lastFileRead = Optional.absent()", "var_name": "lastFileRead"}, {"original_string": "private boolean committed = true;", "modifier": "private", "type": "boolean", "declarator": "committed = true", "var_name": "committed"}, {"original_string": "private boolean firstTimeRead = true;", "modifier": "private", "type": "boolean", "declarator": "firstTimeRead = true", "var_name": "firstTimeRead"}, {"original_string": "private Iterator<File> candidateFileIter = null;", "modifier": "private", "type": "Iterator<File>", "declarator": "candidateFileIter = null", "var_name": "candidateFileIter"}, {"original_string": "private int listFilesCount = 0;", "modifier": "private", "type": "int", "declarator": "listFilesCount = 0", "var_name": "listFilesCount"}, {"original_string": "private String trackerDirectoryAbsolutePath;", "modifier": "private", "type": "String", "declarator": "trackerDirectoryAbsolutePath", "var_name": "trackerDirectoryAbsolutePath"}], "methods": [{"identifier": "ReliableSpoolingFileEventReader", "parameters": "(File spoolDirectory,\n      String completedSuffix, String includePattern, String ignorePattern, String trackerDirPath,\n      boolean annotateFileName, String fileNameHeader,\n      boolean annotateBaseName, String baseNameHeader,\n      String deserializerType, Context deserializerContext,\n      String deletePolicy, String trackingPolicy, String inputCharset,\n      DecodeErrorPolicy decodeErrorPolicy,\n      ConsumeOrder consumeOrder, boolean recursiveDirectorySearch,\n                                          SourceCounter sourceCounter)", "modifiers": "private", "return": "", "signature": " ReliableSpoolingFileEventReader(File spoolDirectory,\n      String completedSuffix, String includePattern, String ignorePattern, String trackerDirPath,\n      boolean annotateFileName, String fileNameHeader,\n      boolean annotateBaseName, String baseNameHeader,\n      String deserializerType, Context deserializerContext,\n      String deletePolicy, String trackingPolicy, String inputCharset,\n      DecodeErrorPolicy decodeErrorPolicy,\n      ConsumeOrder consumeOrder, boolean recursiveDirectorySearch,\n                                          SourceCounter sourceCounter)", "full_signature": "private  ReliableSpoolingFileEventReader(File spoolDirectory,\n      String completedSuffix, String includePattern, String ignorePattern, String trackerDirPath,\n      boolean annotateFileName, String fileNameHeader,\n      boolean annotateBaseName, String baseNameHeader,\n      String deserializerType, Context deserializerContext,\n      String deletePolicy, String trackingPolicy, String inputCharset,\n      DecodeErrorPolicy decodeErrorPolicy,\n      ConsumeOrder consumeOrder, boolean recursiveDirectorySearch,\n                                          SourceCounter sourceCounter)", "class_method_signature": "ReliableSpoolingFileEventReader.ReliableSpoolingFileEventReader(File spoolDirectory,\n      String completedSuffix, String includePattern, String ignorePattern, String trackerDirPath,\n      boolean annotateFileName, String fileNameHeader,\n      boolean annotateBaseName, String baseNameHeader,\n      String deserializerType, Context deserializerContext,\n      String deletePolicy, String trackingPolicy, String inputCharset,\n      DecodeErrorPolicy decodeErrorPolicy,\n      ConsumeOrder consumeOrder, boolean recursiveDirectorySearch,\n                                          SourceCounter sourceCounter)", "testcase": false, "constructor": true}, {"identifier": "getCandidateFiles", "parameters": "(final Path directory)", "modifiers": "private", "return": "List<File>", "signature": "List<File> getCandidateFiles(final Path directory)", "full_signature": "private List<File> getCandidateFiles(final Path directory)", "class_method_signature": "ReliableSpoolingFileEventReader.getCandidateFiles(final Path directory)", "testcase": false, "constructor": false}, {"identifier": "getTrackerDirCompletedFiles", "parameters": "()", "modifiers": "private", "return": "Set<Path>", "signature": "Set<Path> getTrackerDirCompletedFiles()", "full_signature": "private Set<Path> getTrackerDirCompletedFiles()", "class_method_signature": "ReliableSpoolingFileEventReader.getTrackerDirCompletedFiles()", "testcase": false, "constructor": false}, {"identifier": "isFileInTrackerDir", "parameters": "(Set<Path> completedFiles, Path path)", "modifiers": "private", "return": "boolean", "signature": "boolean isFileInTrackerDir(Set<Path> completedFiles, Path path)", "full_signature": "private boolean isFileInTrackerDir(Set<Path> completedFiles, Path path)", "class_method_signature": "ReliableSpoolingFileEventReader.isFileInTrackerDir(Set<Path> completedFiles, Path path)", "testcase": false, "constructor": false}, {"identifier": "getRelPathToSpoolDir", "parameters": "(Path path)", "modifiers": "private", "return": "Path", "signature": "Path getRelPathToSpoolDir(Path path)", "full_signature": "private Path getRelPathToSpoolDir(Path path)", "class_method_signature": "ReliableSpoolingFileEventReader.getRelPathToSpoolDir(Path path)", "testcase": false, "constructor": false}, {"identifier": "getListFilesCount", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "int", "signature": "int getListFilesCount()", "full_signature": "@VisibleForTesting int getListFilesCount()", "class_method_signature": "ReliableSpoolingFileEventReader.getListFilesCount()", "testcase": false, "constructor": false}, {"identifier": "getLastFileRead", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLastFileRead()", "full_signature": "public String getLastFileRead()", "class_method_signature": "ReliableSpoolingFileEventReader.getLastFileRead()", "testcase": false, "constructor": false}, {"identifier": "readEvent", "parameters": "()", "modifiers": "public", "return": "Event", "signature": "Event readEvent()", "full_signature": "public Event readEvent()", "class_method_signature": "ReliableSpoolingFileEventReader.readEvent()", "testcase": false, "constructor": false}, {"identifier": "readEvents", "parameters": "(int numEvents)", "modifiers": "public", "return": "List<Event>", "signature": "List<Event> readEvents(int numEvents)", "full_signature": "public List<Event> readEvents(int numEvents)", "class_method_signature": "ReliableSpoolingFileEventReader.readEvents(int numEvents)", "testcase": false, "constructor": false}, {"identifier": "readDeserializerEvents", "parameters": "(int numEvents)", "modifiers": "private", "return": "List<Event>", "signature": "List<Event> readDeserializerEvents(int numEvents)", "full_signature": "private List<Event> readDeserializerEvents(int numEvents)", "class_method_signature": "ReliableSpoolingFileEventReader.readDeserializerEvents(int numEvents)", "testcase": false, "constructor": false}, {"identifier": "fillHeader", "parameters": "(List<Event> events)", "modifiers": "private", "return": "void", "signature": "void fillHeader(List<Event> events)", "full_signature": "private void fillHeader(List<Event> events)", "class_method_signature": "ReliableSpoolingFileEventReader.fillHeader(List<Event> events)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ReliableSpoolingFileEventReader.close()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void commit()", "full_signature": "@Override public void commit()", "class_method_signature": "ReliableSpoolingFileEventReader.commit()", "testcase": false, "constructor": false}, {"identifier": "retireCurrentFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void retireCurrentFile()", "full_signature": "private void retireCurrentFile()", "class_method_signature": "ReliableSpoolingFileEventReader.retireCurrentFile()", "testcase": false, "constructor": false}, {"identifier": "rollCurrentFile", "parameters": "(File fileToRoll)", "modifiers": "private", "return": "void", "signature": "void rollCurrentFile(File fileToRoll)", "full_signature": "private void rollCurrentFile(File fileToRoll)", "class_method_signature": "ReliableSpoolingFileEventReader.rollCurrentFile(File fileToRoll)", "testcase": false, "constructor": false}, {"identifier": "rollCurrentFileInTrackerDir", "parameters": "(File fileToRoll)", "modifiers": "private", "return": "void", "signature": "void rollCurrentFileInTrackerDir(File fileToRoll)", "full_signature": "private void rollCurrentFileInTrackerDir(File fileToRoll)", "class_method_signature": "ReliableSpoolingFileEventReader.rollCurrentFileInTrackerDir(File fileToRoll)", "testcase": false, "constructor": false}, {"identifier": "deleteCurrentFile", "parameters": "(File fileToDelete)", "modifiers": "private", "return": "void", "signature": "void deleteCurrentFile(File fileToDelete)", "full_signature": "private void deleteCurrentFile(File fileToDelete)", "class_method_signature": "ReliableSpoolingFileEventReader.deleteCurrentFile(File fileToDelete)", "testcase": false, "constructor": false}, {"identifier": "getNextFile", "parameters": "()", "modifiers": "private", "return": "Optional<FileInfo>", "signature": "Optional<FileInfo> getNextFile()", "full_signature": "private Optional<FileInfo> getNextFile()", "class_method_signature": "ReliableSpoolingFileEventReader.getNextFile()", "testcase": false, "constructor": false}, {"identifier": "smallerLexicographical", "parameters": "(File f1, File f2)", "modifiers": "private", "return": "File", "signature": "File smallerLexicographical(File f1, File f2)", "full_signature": "private File smallerLexicographical(File f1, File f2)", "class_method_signature": "ReliableSpoolingFileEventReader.smallerLexicographical(File f1, File f2)", "testcase": false, "constructor": false}, {"identifier": "openFile", "parameters": "(File file)", "modifiers": "private", "return": "Optional<FileInfo>", "signature": "Optional<FileInfo> openFile(File file)", "full_signature": "private Optional<FileInfo> openFile(File file)", "class_method_signature": "ReliableSpoolingFileEventReader.openFile(File file)", "testcase": false, "constructor": false}, {"identifier": "deleteMetaFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deleteMetaFile()", "full_signature": "private void deleteMetaFile()", "class_method_signature": "ReliableSpoolingFileEventReader.deleteMetaFile()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/client/avro/ReliableSpoolingFileEventReader.java"}, "focal_method": {"identifier": "getListFilesCount", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "int", "body": "@VisibleForTesting\n  int getListFilesCount() {\n    return listFilesCount;\n  }", "signature": "int getListFilesCount()", "full_signature": "@VisibleForTesting int getListFilesCount()", "class_method_signature": "ReliableSpoolingFileEventReader.getListFilesCount()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}