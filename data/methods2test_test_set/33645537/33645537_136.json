{"test_class": {"identifier": "CombinationsOfChangeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CombinationsOfChange combinationsOfChange;", "modifier": "private", "type": "CombinationsOfChange", "declarator": "combinationsOfChange", "var_name": "combinationsOfChange"}], "file": "algs/src/test/java/com/github/pedrovgs/problem49/CombinationsOfChangeTest.java"}, "test_case": {"identifier": "shouldReturnEveryCombinationOfChange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnEveryCombinationOfChange() {\n    int[] moneys = { 5, 10, 15, 50 };\n\n    List<List<Integer>> combinations = combinationsOfChange.get(moneys, 60);\n\n    assertContainsChange(combinations, new Integer[] { 50, 10 }, new Integer[] { 15, 15, 15, 15 },\n        new Integer[] { 10, 10, 10, 10, 10, 10 },\n        new Integer[] { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 });\n  }", "signature": "void shouldReturnEveryCombinationOfChange()", "full_signature": "@Test public void shouldReturnEveryCombinationOfChange()", "class_method_signature": "CombinationsOfChangeTest.shouldReturnEveryCombinationOfChange()", "testcase": true, "constructor": false, "invocations": ["get", "assertContainsChange"]}, "focal_class": {"identifier": "CombinationsOfChange", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ReturnChange returnChange;", "modifier": "private final", "type": "ReturnChange", "declarator": "returnChange", "var_name": "returnChange"}], "methods": [{"identifier": "CombinationsOfChange", "parameters": "()", "modifiers": "public", "return": "", "signature": " CombinationsOfChange()", "full_signature": "public  CombinationsOfChange()", "class_method_signature": "CombinationsOfChange.CombinationsOfChange()", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(int[] availableChange, int value)", "modifiers": "public", "return": "List<List<Integer>>", "signature": "List<List<Integer>> get(int[] availableChange, int value)", "full_signature": "public List<List<Integer>> get(int[] availableChange, int value)", "class_method_signature": "CombinationsOfChange.get(int[] availableChange, int value)", "testcase": false, "constructor": false}, {"identifier": "getChange", "parameters": "(int[] availableMoneys, int value)", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> getChange(int[] availableMoneys, int value)", "full_signature": "private List<Integer> getChange(int[] availableMoneys, int value)", "class_method_signature": "CombinationsOfChange.getChange(int[] availableMoneys, int value)", "testcase": false, "constructor": false}, {"identifier": "validateInputData", "parameters": "(int[] availableChange, int value)", "modifiers": "private", "return": "void", "signature": "void validateInputData(int[] availableChange, int value)", "full_signature": "private void validateInputData(int[] availableChange, int value)", "class_method_signature": "CombinationsOfChange.validateInputData(int[] availableChange, int value)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem49/CombinationsOfChange.java"}, "focal_method": {"identifier": "get", "parameters": "(int[] availableChange, int value)", "modifiers": "public", "return": "List<List<Integer>>", "body": "public List<List<Integer>> get(int[] availableChange, int value) {\n    validateInputData(availableChange, value);\n\n    List<List<Integer>> changeCombinations = new LinkedList<List<Integer>>();\n    for (int i = 0; i < availableChange.length; i++) {\n      int[] availableMoneys = Arrays.copyOfRange(availableChange, 0, availableChange.length - i);\n      List<Integer> change = getChange(availableMoneys, value);\n      changeCombinations.add(change);\n    }\n    return changeCombinations;\n  }", "signature": "List<List<Integer>> get(int[] availableChange, int value)", "full_signature": "public List<List<Integer>> get(int[] availableChange, int value)", "class_method_signature": "CombinationsOfChange.get(int[] availableChange, int value)", "testcase": false, "constructor": false, "invocations": ["validateInputData", "copyOfRange", "getChange", "add"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}