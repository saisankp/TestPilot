{"test_class": {"identifier": "JXPanelTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"unused\")\n    private static final Logger LOG = Logger.getLogger(JXPanelTest.class\n            .getName());", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(JXPanelTest.class\n            .getName())", "var_name": "LOG"}], "file": "swingx-core/src/test/java/org/jdesktop/swingx/JXPanelTest.java"}, "test_case": {"identifier": "testPainterChangeListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPainterChangeListener() {\n        JXPanel panel = new JXPanel();\n        final MattePainter painter = new MattePainter(Color.RED);\n        int listenerCount = painter.getPropertyChangeListeners().length;\n        panel.setBackgroundPainter(painter);\n        assertEquals(listenerCount +1, painter.getPropertyChangeListeners().length);\n        panel.setBackgroundPainter(null);\n        assertEquals(listenerCount, painter.getPropertyChangeListeners().length);\n    }", "signature": "void testPainterChangeListener()", "full_signature": "@Test public void testPainterChangeListener()", "class_method_signature": "JXPanelTest.testPainterChangeListener()", "testcase": true, "constructor": false, "invocations": ["getPropertyChangeListeners", "setBackgroundPainter", "assertEquals", "getPropertyChangeListeners", "setBackgroundPainter", "assertEquals", "getPropertyChangeListeners"]}, "focal_class": {"identifier": "JXPanel", "superclass": "extends JPanel", "interfaces": "implements AlphaPaintable, BackgroundPaintable, Scrollable", "fields": [{"original_string": "private ScrollableSizeHint scrollableWidthHint = ScrollableSizeHint.FIT;", "modifier": "private", "type": "ScrollableSizeHint", "declarator": "scrollableWidthHint = ScrollableSizeHint.FIT", "var_name": "scrollableWidthHint"}, {"original_string": "private ScrollableSizeHint scrollableHeightHint = ScrollableSizeHint.FIT;", "modifier": "private", "type": "ScrollableSizeHint", "declarator": "scrollableHeightHint = ScrollableSizeHint.FIT", "var_name": "scrollableHeightHint"}, {"original_string": "private volatile float alpha = 1.0f;", "modifier": "private volatile", "type": "float", "declarator": "alpha = 1.0f", "var_name": "alpha"}, {"original_string": "private boolean oldOpaque;", "modifier": "private", "type": "boolean", "declarator": "oldOpaque", "var_name": "oldOpaque"}, {"original_string": "private float oldAlpha = 1f;", "modifier": "private", "type": "float", "declarator": "oldAlpha = 1f", "var_name": "oldAlpha"}, {"original_string": "private boolean inheritAlpha = true;", "modifier": "private", "type": "boolean", "declarator": "inheritAlpha = true", "var_name": "inheritAlpha"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    private Painter backgroundPainter;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    private", "type": "Painter", "declarator": "backgroundPainter", "var_name": "backgroundPainter"}, {"original_string": "private boolean paintBorderInsets = true;", "modifier": "private", "type": "boolean", "declarator": "paintBorderInsets = true", "var_name": "paintBorderInsets"}, {"original_string": "private PropertyChangeListener painterChangeListener;", "modifier": "private", "type": "PropertyChangeListener", "declarator": "painterChangeListener", "var_name": "painterChangeListener"}, {"original_string": "boolean fakeTransparent;", "modifier": "", "type": "boolean", "declarator": "fakeTransparent", "var_name": "fakeTransparent"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private static final Logger LOG = Logger.getLogger(JXPanel.class.getName());", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(JXPanel.class.getName())", "var_name": "LOG"}], "methods": [{"identifier": "JXPanel", "parameters": "()", "modifiers": "public", "return": "", "signature": " JXPanel()", "full_signature": "public  JXPanel()", "class_method_signature": "JXPanel.JXPanel()", "testcase": false, "constructor": true}, {"identifier": "JXPanel", "parameters": "(boolean isDoubleBuffered)", "modifiers": "public", "return": "", "signature": " JXPanel(boolean isDoubleBuffered)", "full_signature": "public  JXPanel(boolean isDoubleBuffered)", "class_method_signature": "JXPanel.JXPanel(boolean isDoubleBuffered)", "testcase": false, "constructor": true}, {"identifier": "JXPanel", "parameters": "(LayoutManager layout)", "modifiers": "public", "return": "", "signature": " JXPanel(LayoutManager layout)", "full_signature": "public  JXPanel(LayoutManager layout)", "class_method_signature": "JXPanel.JXPanel(LayoutManager layout)", "testcase": false, "constructor": true}, {"identifier": "JXPanel", "parameters": "(LayoutManager layout, boolean isDoubleBuffered)", "modifiers": "public", "return": "", "signature": " JXPanel(LayoutManager layout, boolean isDoubleBuffered)", "full_signature": "public  JXPanel(LayoutManager layout, boolean isDoubleBuffered)", "class_method_signature": "JXPanel.JXPanel(LayoutManager layout, boolean isDoubleBuffered)", "testcase": false, "constructor": true}, {"identifier": "setOpaque", "parameters": "(boolean opaque)", "modifiers": "@Override public", "return": "void", "signature": "void setOpaque(boolean opaque)", "full_signature": "@Override public void setOpaque(boolean opaque)", "class_method_signature": "JXPanel.setOpaque(boolean opaque)", "testcase": false, "constructor": false}, {"identifier": "isOpaque", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isOpaque()", "full_signature": "@Override public boolean isOpaque()", "class_method_signature": "JXPanel.isOpaque()", "testcase": false, "constructor": false}, {"identifier": "getAlpha", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getAlpha()", "full_signature": "@Override public float getAlpha()", "class_method_signature": "JXPanel.getAlpha()", "testcase": false, "constructor": false}, {"identifier": "setAlpha", "parameters": "(float alpha)", "modifiers": "@Override public", "return": "void", "signature": "void setAlpha(float alpha)", "full_signature": "@Override public void setAlpha(float alpha)", "class_method_signature": "JXPanel.setAlpha(float alpha)", "testcase": false, "constructor": false}, {"identifier": "setAlphaPatch", "parameters": "(float alpha)", "modifiers": "private", "return": "void", "signature": "void setAlphaPatch(float alpha)", "full_signature": "private void setAlphaPatch(float alpha)", "class_method_signature": "JXPanel.setAlphaPatch(float alpha)", "testcase": false, "constructor": false}, {"identifier": "installRepaintManager", "parameters": "()", "modifiers": "", "return": "void", "signature": "void installRepaintManager()", "full_signature": " void installRepaintManager()", "class_method_signature": "JXPanel.installRepaintManager()", "testcase": false, "constructor": false}, {"identifier": "uninstallRepaintManager", "parameters": "()", "modifiers": "", "return": "void", "signature": "void uninstallRepaintManager()", "full_signature": " void uninstallRepaintManager()", "class_method_signature": "JXPanel.uninstallRepaintManager()", "testcase": false, "constructor": false}, {"identifier": "getEffectiveAlpha", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getEffectiveAlpha()", "full_signature": "@Override public float getEffectiveAlpha()", "class_method_signature": "JXPanel.getEffectiveAlpha()", "testcase": false, "constructor": false}, {"identifier": "isInheritAlpha", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInheritAlpha()", "full_signature": "@Override public boolean isInheritAlpha()", "class_method_signature": "JXPanel.isInheritAlpha()", "testcase": false, "constructor": false}, {"identifier": "setInheritAlpha", "parameters": "(boolean val)", "modifiers": "@Override public", "return": "void", "signature": "void setInheritAlpha(boolean val)", "full_signature": "@Override public void setInheritAlpha(boolean val)", "class_method_signature": "JXPanel.setInheritAlpha(boolean val)", "testcase": false, "constructor": false}, {"identifier": "setScrollableWidthHint", "parameters": "(ScrollableSizeHint hint)", "modifiers": "public final", "return": "void", "signature": "void setScrollableWidthHint(ScrollableSizeHint hint)", "full_signature": "public final void setScrollableWidthHint(ScrollableSizeHint hint)", "class_method_signature": "JXPanel.setScrollableWidthHint(ScrollableSizeHint hint)", "testcase": false, "constructor": false}, {"identifier": "setScrollableHeightHint", "parameters": "(ScrollableSizeHint hint)", "modifiers": "public final", "return": "void", "signature": "void setScrollableHeightHint(ScrollableSizeHint hint)", "full_signature": "public final void setScrollableHeightHint(ScrollableSizeHint hint)", "class_method_signature": "JXPanel.setScrollableHeightHint(ScrollableSizeHint hint)", "testcase": false, "constructor": false}, {"identifier": "getScrollableWidthHint", "parameters": "()", "modifiers": "protected", "return": "ScrollableSizeHint", "signature": "ScrollableSizeHint getScrollableWidthHint()", "full_signature": "protected ScrollableSizeHint getScrollableWidthHint()", "class_method_signature": "JXPanel.getScrollableWidthHint()", "testcase": false, "constructor": false}, {"identifier": "getScrollableHeightHint", "parameters": "()", "modifiers": "protected", "return": "ScrollableSizeHint", "signature": "ScrollableSizeHint getScrollableHeightHint()", "full_signature": "protected ScrollableSizeHint getScrollableHeightHint()", "class_method_signature": "JXPanel.getScrollableHeightHint()", "testcase": false, "constructor": false}, {"identifier": "getScrollableTracksViewportHeight", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getScrollableTracksViewportHeight()", "full_signature": "@Override public boolean getScrollableTracksViewportHeight()", "class_method_signature": "JXPanel.getScrollableTracksViewportHeight()", "testcase": false, "constructor": false}, {"identifier": "getScrollableTracksViewportWidth", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getScrollableTracksViewportWidth()", "full_signature": "@Override public boolean getScrollableTracksViewportWidth()", "class_method_signature": "JXPanel.getScrollableTracksViewportWidth()", "testcase": false, "constructor": false}, {"identifier": "getPreferredScrollableViewportSize", "parameters": "()", "modifiers": "@Override public", "return": "Dimension", "signature": "Dimension getPreferredScrollableViewportSize()", "full_signature": "@Override public Dimension getPreferredScrollableViewportSize()", "class_method_signature": "JXPanel.getPreferredScrollableViewportSize()", "testcase": false, "constructor": false}, {"identifier": "getScrollableBlockIncrement", "parameters": "(Rectangle visibleRect, int orientation, int direction)", "modifiers": "@Override public", "return": "int", "signature": "int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)", "full_signature": "@Override public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)", "class_method_signature": "JXPanel.getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)", "testcase": false, "constructor": false}, {"identifier": "getScrollableUnitIncrement", "parameters": "(Rectangle visibleRect, int orientation, int direction)", "modifiers": "@Override public", "return": "int", "signature": "int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)", "full_signature": "@Override public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)", "class_method_signature": "JXPanel.getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)", "testcase": false, "constructor": false}, {"identifier": "setScrollableTracksViewportHeight", "parameters": "(boolean scrollableTracksViewportHeight)", "modifiers": "public", "return": "void", "signature": "void setScrollableTracksViewportHeight(boolean scrollableTracksViewportHeight)", "full_signature": "public void setScrollableTracksViewportHeight(boolean scrollableTracksViewportHeight)", "class_method_signature": "JXPanel.setScrollableTracksViewportHeight(boolean scrollableTracksViewportHeight)", "testcase": false, "constructor": false}, {"identifier": "setScrollableTracksViewportWidth", "parameters": "(boolean scrollableTracksViewportWidth)", "modifiers": "public", "return": "void", "signature": "void setScrollableTracksViewportWidth(boolean scrollableTracksViewportWidth)", "full_signature": "public void setScrollableTracksViewportWidth(boolean scrollableTracksViewportWidth)", "class_method_signature": "JXPanel.setScrollableTracksViewportWidth(boolean scrollableTracksViewportWidth)", "testcase": false, "constructor": false}, {"identifier": "setBackgroundPainter", "parameters": "(Painter p)", "modifiers": "@Override public", "return": "void", "signature": "void setBackgroundPainter(Painter p)", "full_signature": "@Override public void setBackgroundPainter(Painter p)", "class_method_signature": "JXPanel.setBackgroundPainter(Painter p)", "testcase": false, "constructor": false}, {"identifier": "getPainterChangeListener", "parameters": "()", "modifiers": "protected", "return": "PropertyChangeListener", "signature": "PropertyChangeListener getPainterChangeListener()", "full_signature": "protected PropertyChangeListener getPainterChangeListener()", "class_method_signature": "JXPanel.getPainterChangeListener()", "testcase": false, "constructor": false}, {"identifier": "getBackgroundPainter", "parameters": "()", "modifiers": "@Override public", "return": "Painter", "signature": "Painter getBackgroundPainter()", "full_signature": "@Override public Painter getBackgroundPainter()", "class_method_signature": "JXPanel.getBackgroundPainter()", "testcase": false, "constructor": false}, {"identifier": "isPaintBorderInsets", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPaintBorderInsets()", "full_signature": "@Override public boolean isPaintBorderInsets()", "class_method_signature": "JXPanel.isPaintBorderInsets()", "testcase": false, "constructor": false}, {"identifier": "setPaintBorderInsets", "parameters": "(boolean paintBorderInsets)", "modifiers": "@Override public", "return": "void", "signature": "void setPaintBorderInsets(boolean paintBorderInsets)", "full_signature": "@Override public void setPaintBorderInsets(boolean paintBorderInsets)", "class_method_signature": "JXPanel.setPaintBorderInsets(boolean paintBorderInsets)", "testcase": false, "constructor": false}, {"identifier": "isPaintingOrigin", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isPaintingOrigin()", "full_signature": "protected boolean isPaintingOrigin()", "class_method_signature": "JXPanel.isPaintingOrigin()", "testcase": false, "constructor": false}, {"identifier": "paint", "parameters": "(Graphics g)", "modifiers": "@Override public", "return": "void", "signature": "void paint(Graphics g)", "full_signature": "@Override public void paint(Graphics g)", "class_method_signature": "JXPanel.paint(Graphics g)", "testcase": false, "constructor": false}, {"identifier": "paintComponent", "parameters": "(Graphics g)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") protected", "return": "void", "signature": "void paintComponent(Graphics g)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") protected void paintComponent(Graphics g)", "class_method_signature": "JXPanel.paintComponent(Graphics g)", "testcase": false, "constructor": false}, {"identifier": "isPatch", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isPatch()", "full_signature": "protected boolean isPatch()", "class_method_signature": "JXPanel.isPatch()", "testcase": false, "constructor": false}, {"identifier": "paintComponentPatch", "parameters": "(Graphics g)", "modifiers": "protected", "return": "void", "signature": "void paintComponentPatch(Graphics g)", "full_signature": "protected void paintComponentPatch(Graphics g)", "class_method_signature": "JXPanel.paintComponentPatch(Graphics g)", "testcase": false, "constructor": false}, {"identifier": "isOpaquePatch", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isOpaquePatch()", "full_signature": "protected boolean isOpaquePatch()", "class_method_signature": "JXPanel.isOpaquePatch()", "testcase": false, "constructor": false}, {"identifier": "setOpaquePatch", "parameters": "(boolean opaque)", "modifiers": "protected", "return": "void", "signature": "void setOpaquePatch(boolean opaque)", "full_signature": "protected void setOpaquePatch(boolean opaque)", "class_method_signature": "JXPanel.setOpaquePatch(boolean opaque)", "testcase": false, "constructor": false}, {"identifier": "isAlpha", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isAlpha()", "full_signature": "protected boolean isAlpha()", "class_method_signature": "JXPanel.isAlpha()", "testcase": false, "constructor": false}, {"identifier": "isTransparentBackground", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isTransparentBackground()", "full_signature": "protected boolean isTransparentBackground()", "class_method_signature": "JXPanel.isTransparentBackground()", "testcase": false, "constructor": false}, {"identifier": "isPaintingBackground", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isPaintingBackground()", "full_signature": "protected boolean isPaintingBackground()", "class_method_signature": "JXPanel.isPaintingBackground()", "testcase": false, "constructor": false}], "file": "swingx-core/src/main/java/org/jdesktop/swingx/JXPanel.java"}, "focal_method": {"identifier": "setBackgroundPainter", "parameters": "(Painter p)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setBackgroundPainter(Painter p) {\n        Painter old = getBackgroundPainter();\n        if (old instanceof AbstractPainter) {\n            ((AbstractPainter<?>) old).removePropertyChangeListener(painterChangeListener);\n        }\n        backgroundPainter = p;\n        if (backgroundPainter instanceof AbstractPainter) {\n            ((AbstractPainter<?>) backgroundPainter).addPropertyChangeListener(getPainterChangeListener());\n        }\n        firePropertyChange(\"backgroundPainter\", old, getBackgroundPainter());\n        repaint();\n    }", "signature": "void setBackgroundPainter(Painter p)", "full_signature": "@Override public void setBackgroundPainter(Painter p)", "class_method_signature": "JXPanel.setBackgroundPainter(Painter p)", "testcase": false, "constructor": false, "invocations": ["getBackgroundPainter", "removePropertyChangeListener", "addPropertyChangeListener", "getPainterChangeListener", "firePropertyChange", "getBackgroundPainter", "repaint"]}, "repository": {"repo_id": 34861263, "url": "https://github.com/RockManJoe64/swingx", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 7, "size": 37476, "license": "licensed"}}