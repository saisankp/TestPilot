{"test_class": {"identifier": "DBTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Engine engine = new StorageDirect(Volume.memoryFactory(false));", "modifier": "", "type": "Engine", "declarator": "engine = new StorageDirect(Volume.memoryFactory(false))", "var_name": "engine"}, {"original_string": "DB db = new DB(engine);", "modifier": "", "type": "DB", "declarator": "db = new DB(engine)", "var_name": "db"}], "file": "migration/third-party/org.mapdb/src/test/java/org/mapdb/DBTest.java"}, "test_case": {"identifier": "testGetTreeMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTreeMap() throws Exception {\n        Map m1 = db.getTreeMap(\"test\");\n        m1.put(1,2);\n        m1.put(3,4);\n        assertTrue(m1 == db.getTreeMap(\"test\"));\n        assertEquals(m1, new DB(engine).getTreeMap(\"test\"));\n    }", "signature": "void testGetTreeMap()", "full_signature": "@Test public void testGetTreeMap()", "class_method_signature": "DBTest.testGetTreeMap()", "testcase": true, "constructor": false, "invocations": ["getTreeMap", "put", "put", "assertTrue", "getTreeMap", "assertEquals", "getTreeMap"]}, "focal_class": {"identifier": "DB", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Engine engine;", "modifier": "protected", "type": "Engine", "declarator": "engine", "var_name": "engine"}, {"original_string": "protected Map<String, WeakReference<?>> collections = new HashMap<String, WeakReference<?>>();", "modifier": "protected", "type": "Map<String, WeakReference<?>>", "declarator": "collections = new HashMap<String, WeakReference<?>>()", "var_name": "collections"}, {"original_string": "protected Map<String, Long> nameDir;", "modifier": "protected", "type": "Map<String, Long>", "declarator": "nameDir", "var_name": "nameDir"}, {"original_string": "protected Serializer<?> defaultSerializer;", "modifier": "protected", "type": "Serializer<?>", "declarator": "defaultSerializer", "var_name": "defaultSerializer"}], "methods": [{"identifier": "DB", "parameters": "(final Engine engine)", "modifiers": "public", "return": "", "signature": " DB(final Engine engine)", "full_signature": "public  DB(final Engine engine)", "class_method_signature": "DB.DB(final Engine engine)", "testcase": false, "constructor": true}, {"identifier": "getHashMap", "parameters": "(String name)", "modifiers": "synchronized public", "return": "HTreeMap<K,V>", "signature": "HTreeMap<K,V> getHashMap(String name)", "full_signature": "synchronized public HTreeMap<K,V> getHashMap(String name)", "class_method_signature": "DB.getHashMap(String name)", "testcase": false, "constructor": false}, {"identifier": "createHashMap", "parameters": "(\n            String name, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "modifiers": "synchronized public", "return": "HTreeMap<K,V>", "signature": "HTreeMap<K,V> createHashMap(\n            String name, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "full_signature": "synchronized public HTreeMap<K,V> createHashMap(\n            String name, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "class_method_signature": "DB.createHashMap(\n            String name, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "testcase": false, "constructor": false}, {"identifier": "getHashSet", "parameters": "(String name)", "modifiers": "synchronized public", "return": "Set<K>", "signature": "Set<K> getHashSet(String name)", "full_signature": "synchronized public Set<K> getHashSet(String name)", "class_method_signature": "DB.getHashSet(String name)", "testcase": false, "constructor": false}, {"identifier": "createHashSet", "parameters": "(String name, Serializer<K> serializer)", "modifiers": "synchronized public", "return": "Set<K>", "signature": "Set<K> createHashSet(String name, Serializer<K> serializer)", "full_signature": "synchronized public Set<K> createHashSet(String name, Serializer<K> serializer)", "class_method_signature": "DB.createHashSet(String name, Serializer<K> serializer)", "testcase": false, "constructor": false}, {"identifier": "getTreeMap", "parameters": "(String name)", "modifiers": "synchronized public", "return": "BTreeMap<K,V>", "signature": "BTreeMap<K,V> getTreeMap(String name)", "full_signature": "synchronized public BTreeMap<K,V> getTreeMap(String name)", "class_method_signature": "DB.getTreeMap(String name)", "testcase": false, "constructor": false}, {"identifier": "createTreeMap", "parameters": "(\n            String name, int nodeSize, boolean valuesStoredOutsideNodes,\n            BTreeKeySerializer<K> keySerializer, Serializer<V> valueSerializer, Comparator<K> comparator)", "modifiers": "synchronized public", "return": "BTreeMap<K,V>", "signature": "BTreeMap<K,V> createTreeMap(\n            String name, int nodeSize, boolean valuesStoredOutsideNodes,\n            BTreeKeySerializer<K> keySerializer, Serializer<V> valueSerializer, Comparator<K> comparator)", "full_signature": "synchronized public BTreeMap<K,V> createTreeMap(\n            String name, int nodeSize, boolean valuesStoredOutsideNodes,\n            BTreeKeySerializer<K> keySerializer, Serializer<V> valueSerializer, Comparator<K> comparator)", "class_method_signature": "DB.createTreeMap(\n            String name, int nodeSize, boolean valuesStoredOutsideNodes,\n            BTreeKeySerializer<K> keySerializer, Serializer<V> valueSerializer, Comparator<K> comparator)", "testcase": false, "constructor": false}, {"identifier": "getNameDir", "parameters": "()", "modifiers": "public", "return": "Map<String, Long>", "signature": "Map<String, Long> getNameDir()", "full_signature": "public Map<String, Long> getNameDir()", "class_method_signature": "DB.getNameDir()", "testcase": false, "constructor": false}, {"identifier": "getTreeSet", "parameters": "(String name)", "modifiers": "synchronized public", "return": "NavigableSet<K>", "signature": "NavigableSet<K> getTreeSet(String name)", "full_signature": "synchronized public NavigableSet<K> getTreeSet(String name)", "class_method_signature": "DB.getTreeSet(String name)", "testcase": false, "constructor": false}, {"identifier": "createTreeSet", "parameters": "(String name, int nodeSize, BTreeKeySerializer<K> serializer, Comparator<K> comparator)", "modifiers": "synchronized public", "return": "NavigableSet<K>", "signature": "NavigableSet<K> createTreeSet(String name, int nodeSize, BTreeKeySerializer<K> serializer, Comparator<K> comparator)", "full_signature": "synchronized public NavigableSet<K> createTreeSet(String name, int nodeSize, BTreeKeySerializer<K> serializer, Comparator<K> comparator)", "class_method_signature": "DB.createTreeSet(String name, int nodeSize, BTreeKeySerializer<K> serializer, Comparator<K> comparator)", "testcase": false, "constructor": false}, {"identifier": "getQueue", "parameters": "(String name)", "modifiers": "synchronized public", "return": "Queue<E>", "signature": "Queue<E> getQueue(String name)", "full_signature": "synchronized public Queue<E> getQueue(String name)", "class_method_signature": "DB.getQueue(String name)", "testcase": false, "constructor": false}, {"identifier": "getStack", "parameters": "(String name)", "modifiers": "synchronized public", "return": "Queue<E>", "signature": "Queue<E> getStack(String name)", "full_signature": "synchronized public Queue<E> getStack(String name)", "class_method_signature": "DB.getStack(String name)", "testcase": false, "constructor": false}, {"identifier": "getCircularQueue", "parameters": "(String name)", "modifiers": "synchronized public", "return": "Queue<E>", "signature": "Queue<E> getCircularQueue(String name)", "full_signature": "synchronized public Queue<E> getCircularQueue(String name)", "class_method_signature": "DB.getCircularQueue(String name)", "testcase": false, "constructor": false}, {"identifier": "createQueue", "parameters": "(String name, Serializer<E> serializer)", "modifiers": "synchronized public", "return": "Queue<E>", "signature": "Queue<E> createQueue(String name, Serializer<E> serializer)", "full_signature": "synchronized public Queue<E> createQueue(String name, Serializer<E> serializer)", "class_method_signature": "DB.createQueue(String name, Serializer<E> serializer)", "testcase": false, "constructor": false}, {"identifier": "createStack", "parameters": "(String name, Serializer<E> serializer, boolean useLocks)", "modifiers": "synchronized public", "return": "Queue<E>", "signature": "Queue<E> createStack(String name, Serializer<E> serializer, boolean useLocks)", "full_signature": "synchronized public Queue<E> createStack(String name, Serializer<E> serializer, boolean useLocks)", "class_method_signature": "DB.createStack(String name, Serializer<E> serializer, boolean useLocks)", "testcase": false, "constructor": false}, {"identifier": "createCircularQueue", "parameters": "(String name, Serializer<E> serializer, long size)", "modifiers": "synchronized public", "return": "Queue<E>", "signature": "Queue<E> createCircularQueue(String name, Serializer<E> serializer, long size)", "full_signature": "synchronized public Queue<E> createCircularQueue(String name, Serializer<E> serializer, long size)", "class_method_signature": "DB.createCircularQueue(String name, Serializer<E> serializer, long size)", "testcase": false, "constructor": false}, {"identifier": "checkNameNotExists", "parameters": "(String name)", "modifiers": "protected", "return": "void", "signature": "void checkNameNotExists(String name)", "full_signature": "protected void checkNameNotExists(String name)", "class_method_signature": "DB.checkNameNotExists(String name)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "synchronized public", "return": "void", "signature": "void close()", "full_signature": "synchronized public void close()", "class_method_signature": "DB.close()", "testcase": false, "constructor": false}, {"identifier": "getFromWeakCollection", "parameters": "(String name)", "modifiers": "protected", "return": "Object", "signature": "Object getFromWeakCollection(String name)", "full_signature": "protected Object getFromWeakCollection(String name)", "class_method_signature": "DB.getFromWeakCollection(String name)", "testcase": false, "constructor": false}, {"identifier": "checkNotClosed", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkNotClosed()", "full_signature": "protected void checkNotClosed()", "class_method_signature": "DB.checkNotClosed()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public synchronized boolean isClosed()", "class_method_signature": "DB.isClosed()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "synchronized public", "return": "void", "signature": "void commit()", "full_signature": "synchronized public void commit()", "class_method_signature": "DB.commit()", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "()", "modifiers": "synchronized public", "return": "void", "signature": "void rollback()", "full_signature": "synchronized public void rollback()", "class_method_signature": "DB.rollback()", "testcase": false, "constructor": false}, {"identifier": "compact", "parameters": "()", "modifiers": "synchronized public", "return": "void", "signature": "void compact()", "full_signature": "synchronized public void compact()", "class_method_signature": "DB.compact()", "testcase": false, "constructor": false}, {"identifier": "snapshot", "parameters": "()", "modifiers": "synchronized public", "return": "DB", "signature": "DB snapshot()", "full_signature": "synchronized public DB snapshot()", "class_method_signature": "DB.snapshot()", "testcase": false, "constructor": false}, {"identifier": "getDefaultSerializer", "parameters": "()", "modifiers": "public", "return": "Serializer", "signature": "Serializer getDefaultSerializer()", "full_signature": "public Serializer getDefaultSerializer()", "class_method_signature": "DB.getDefaultSerializer()", "testcase": false, "constructor": false}, {"identifier": "getEngine", "parameters": "()", "modifiers": "public", "return": "Engine", "signature": "Engine getEngine()", "full_signature": "public Engine getEngine()", "class_method_signature": "DB.getEngine()", "testcase": false, "constructor": false}], "file": "migration/third-party/org.mapdb/src/main/java/org/mapdb/DB.java"}, "focal_method": {"identifier": "getTreeMap", "parameters": "(String name)", "modifiers": "synchronized public", "return": "BTreeMap<K,V>", "body": "synchronized public <K,V> BTreeMap<K,V> getTreeMap(String name){\n        checkNotClosed();\n        BTreeMap<K,V> ret = (BTreeMap<K,V>) getFromWeakCollection(name);\n        if(ret!=null) return ret;\n        Long recid = nameDir.get(name);\n        if(recid!=null){\n            //open existing map\n            ret = new BTreeMap<K,V>(engine, recid,defaultSerializer);\n            if(!ret.hasValues) throw new ClassCastException(\"Collection is Set, not Map\");\n        }else{\n            //create new map\n            ret = new BTreeMap<K,V>(engine,BTreeMap.DEFAULT_MAX_NODE_SIZE, true, false, defaultSerializer, null, null, null);\n            nameDir.put(name, ret.treeRecid);\n        }\n        collections.put(name, new WeakReference<Object>(ret));\n        return ret;\n    }", "signature": "BTreeMap<K,V> getTreeMap(String name)", "full_signature": "synchronized public BTreeMap<K,V> getTreeMap(String name)", "class_method_signature": "DB.getTreeMap(String name)", "testcase": false, "constructor": false, "invocations": ["checkNotClosed", "getFromWeakCollection", "get", "put", "put"]}, "repository": {"repo_id": 113878762, "url": "https://github.com/crossminer/scava", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 16, "size": 1903904, "license": "licensed"}}