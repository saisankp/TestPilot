{"test_class": {"identifier": "ExampleErrorForwardHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExampleErrorForwardHandler sut = new ExampleErrorForwardHandler();", "modifier": "private", "type": "ExampleErrorForwardHandler", "declarator": "sut = new ExampleErrorForwardHandler()", "var_name": "sut"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "examples/nablarch/src/test/java/com/nablarch/example/app/web/handler/ExampleErrorForwardHandlerTest.java"}, "test_case": {"identifier": "success_shouldReturnHttpResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void success_shouldReturnHttpResponse() throws Exception {\n        ExecutionContext context = new ExecutionContext();\n        context.addHandler((o, context1) -> new HttpResponse(\"success.jsp\"));\n\n        final HttpResponse actual = (HttpResponse) sut.handle(null, context);\n        assertThat(actual.getContentPath().getPath(), is(\"success.jsp\"));\n    }", "signature": "void success_shouldReturnHttpResponse()", "full_signature": "@Test public void success_shouldReturnHttpResponse()", "class_method_signature": "ExampleErrorForwardHandlerTest.success_shouldReturnHttpResponse()", "testcase": true, "constructor": false, "invocations": ["addHandler", "handle", "assertThat", "getPath", "getContentPath", "is"]}, "focal_class": {"identifier": "ExampleErrorForwardHandler", "superclass": "", "interfaces": "implements Handler<Object, Object>", "fields": [], "methods": [{"identifier": "handle", "parameters": "(Object data, ExecutionContext context)", "modifiers": "@Override public", "return": "Object", "signature": "Object handle(Object data, ExecutionContext context)", "full_signature": "@Override public Object handle(Object data, ExecutionContext context)", "class_method_signature": "ExampleErrorForwardHandler.handle(Object data, ExecutionContext context)", "testcase": false, "constructor": false}], "file": "examples/nablarch/src/main/java/com/nablarch/example/app/web/handler/ExampleErrorForwardHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "(Object data, ExecutionContext context)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object handle(Object data, ExecutionContext context) {\n\n        try {\n            // \u5f8c\u7d9a\u306e\u696d\u52d9\u30a2\u30af\u30b7\u30e7\u30f3\u30cf\u30f3\u30c9\u30e9\u304c\u9001\u51fa\u3057\u305f\u4f8b\u5916\u3092try-catch\u6587\u3067\u6355\u6349\u3059\u308b\n            return context.handleNext(data);\n        } catch (SessionKeyNotFoundException e) {\n            throw new HttpErrorResponse(HttpResponse.Status.BAD_REQUEST.getStatusCode(),\n                    \"/WEB-INF/view/common/errorPages/doubleSubmissionError.jsp\", e);\n        } catch (NoDataException e) {\n            throw new HttpErrorResponse(HttpResponse.Status.NOT_FOUND.getStatusCode(),\n                    \"/WEB-INF/view/common/errorPages/pageNotFoundError.jsp\", e);\n        } catch (OptimisticLockException e) {\n            throw new HttpErrorResponse(HttpResponse.Status.BAD_REQUEST.getStatusCode(),\n                    \"/WEB-INF/view/common/errorPages/optimisticLockError.jsp\", e);\n        } catch (TemporaryFileFailedException e) {\n            FailureLogUtil.logFatal(e, context.getDataProcessedWhenThrown(e), null);\n            throw new HttpErrorResponse(HttpResponse.Status.INTERNAL_SERVER_ERROR.getStatusCode(), e);\n        }\n    }", "signature": "Object handle(Object data, ExecutionContext context)", "full_signature": "@Override public Object handle(Object data, ExecutionContext context)", "class_method_signature": "ExampleErrorForwardHandler.handle(Object data, ExecutionContext context)", "testcase": false, "constructor": false, "invocations": ["handleNext", "getStatusCode", "getStatusCode", "getStatusCode", "logFatal", "getDataProcessedWhenThrown", "getStatusCode"]}, "repository": {"repo_id": 8771890, "url": "https://github.com/kawasima/waitt", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 15, "size": 1108, "license": "licensed"}}