{"test_class": {"identifier": "RepositoryManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Path localGitPath = Paths.get(\"target/git_test/local\");", "modifier": "", "type": "Path", "declarator": "localGitPath = Paths.get(\"target/git_test/local\")", "var_name": "localGitPath"}, {"original_string": "Path remoteGitPath = Paths.get(\"target/git_test/remote\");", "modifier": "", "type": "Path", "declarator": "remoteGitPath = Paths.get(\"target/git_test/remote\")", "var_name": "remoteGitPath"}], "file": "alien4cloud-common/src/test/java/alien4cloud/git/RepositoryManagerTest.java"}, "test_case": {"identifier": "isOnBranch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isOnBranch() throws Exception {\n        RepositoryManager.cloneOrCheckout(remoteGitPath, \"https://github.com/thockin/test.git\", \"newbr\", \"\");\n\n        assertThat(RepositoryManager.isOnBranch(remoteGitPath, \"newbr\")).isTrue();\n        assertThat(RepositoryManager.isOnBranch(remoteGitPath, \"incorrect\")).isFalse();\n    }", "signature": "void isOnBranch()", "full_signature": "@Test public void isOnBranch()", "class_method_signature": "RepositoryManagerTest.isOnBranch()", "testcase": true, "constructor": false, "invocations": ["cloneOrCheckout", "isTrue", "assertThat", "isOnBranch", "isFalse", "assertThat", "isOnBranch"]}, "focal_class": {"identifier": "RepositoryManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String REMOTE_ALIEN_CONFLICTS_PREFIX_BRANCH_NAME = \"alien-conflicts-\";", "modifier": "private static final", "type": "String", "declarator": "REMOTE_ALIEN_CONFLICTS_PREFIX_BRANCH_NAME = \"alien-conflicts-\"", "var_name": "REMOTE_ALIEN_CONFLICTS_PREFIX_BRANCH_NAME"}, {"original_string": "private static final String DEFAULT_EMAIL = \"not.provided@alien4cloud.org\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_EMAIL = \"not.provided@alien4cloud.org\"", "var_name": "DEFAULT_EMAIL"}], "methods": [{"identifier": "close", "parameters": "(Git repository)", "modifiers": "public static", "return": "void", "signature": "void close(Git repository)", "full_signature": "public static void close(Git repository)", "class_method_signature": "RepositoryManager.close(Git repository)", "testcase": false, "constructor": false}, {"identifier": "isGitRepository", "parameters": "(Path targetDirectory)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGitRepository(Path targetDirectory)", "full_signature": "public static boolean isGitRepository(Path targetDirectory)", "class_method_signature": "RepositoryManager.isGitRepository(Path targetDirectory)", "testcase": false, "constructor": false}, {"identifier": "isGitRepository", "parameters": "(Path targetDirectory, String remoteGitUrl)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGitRepository(Path targetDirectory, String remoteGitUrl)", "full_signature": "public static boolean isGitRepository(Path targetDirectory, String remoteGitUrl)", "class_method_signature": "RepositoryManager.isGitRepository(Path targetDirectory, String remoteGitUrl)", "testcase": false, "constructor": false}, {"identifier": "deleteBranch", "parameters": "(Path targetDirectory, String branch, boolean deleteRemoteBranch)", "modifiers": "public static", "return": "void", "signature": "void deleteBranch(Path targetDirectory, String branch, boolean deleteRemoteBranch)", "full_signature": "public static void deleteBranch(Path targetDirectory, String branch, boolean deleteRemoteBranch)", "class_method_signature": "RepositoryManager.deleteBranch(Path targetDirectory, String branch, boolean deleteRemoteBranch)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Path targetDirectory, String readmeContentIfEmpty)", "modifiers": "public static", "return": "void", "signature": "void create(Path targetDirectory, String readmeContentIfEmpty)", "full_signature": "public static void create(Path targetDirectory, String readmeContentIfEmpty)", "class_method_signature": "RepositoryManager.create(Path targetDirectory, String readmeContentIfEmpty)", "testcase": false, "constructor": false}, {"identifier": "commitAll", "parameters": "(Path targetDirectory, String userName, String userEmail, String commitMessage)", "modifiers": "public static", "return": "void", "signature": "void commitAll(Path targetDirectory, String userName, String userEmail, String commitMessage)", "full_signature": "public static void commitAll(Path targetDirectory, String userName, String userEmail, String commitMessage)", "class_method_signature": "RepositoryManager.commitAll(Path targetDirectory, String userName, String userEmail, String commitMessage)", "testcase": false, "constructor": false}, {"identifier": "cloneOrCheckout", "parameters": "(Path targetDirectory, String repositoryUrl, String branch, String localDirectory)", "modifiers": "public static", "return": "void", "signature": "void cloneOrCheckout(Path targetDirectory, String repositoryUrl, String branch, String localDirectory)", "full_signature": "public static void cloneOrCheckout(Path targetDirectory, String repositoryUrl, String branch, String localDirectory)", "class_method_signature": "RepositoryManager.cloneOrCheckout(Path targetDirectory, String repositoryUrl, String branch, String localDirectory)", "testcase": false, "constructor": false}, {"identifier": "cloneOrCheckout", "parameters": "(Path targetDirectory, String repositoryUrl, String username, String password, String branch, String localDirectory)", "modifiers": "public static", "return": "Git", "signature": "Git cloneOrCheckout(Path targetDirectory, String repositoryUrl, String username, String password, String branch, String localDirectory)", "full_signature": "public static Git cloneOrCheckout(Path targetDirectory, String repositoryUrl, String username, String password, String branch, String localDirectory)", "class_method_signature": "RepositoryManager.cloneOrCheckout(Path targetDirectory, String repositoryUrl, String username, String password, String branch, String localDirectory)", "testcase": false, "constructor": false}, {"identifier": "isTag", "parameters": "(Git repository, String branch)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTag(Git repository, String branch)", "full_signature": "public static boolean isTag(Git repository, String branch)", "class_method_signature": "RepositoryManager.isTag(Git repository, String branch)", "testcase": false, "constructor": false}, {"identifier": "isBranch", "parameters": "(Git repository, String branch)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBranch(Git repository, String branch)", "full_signature": "public static boolean isBranch(Git repository, String branch)", "class_method_signature": "RepositoryManager.isBranch(Git repository, String branch)", "testcase": false, "constructor": false}, {"identifier": "addPrefix", "parameters": "(Git repository, String branch)", "modifiers": "private static", "return": "String", "signature": "String addPrefix(Git repository, String branch)", "full_signature": "private static String addPrefix(Git repository, String branch)", "class_method_signature": "RepositoryManager.addPrefix(Git repository, String branch)", "testcase": false, "constructor": false}, {"identifier": "branchExistsLocally", "parameters": "(Git git, String branch)", "modifiers": "private static", "return": "boolean", "signature": "boolean branchExistsLocally(Git git, String branch)", "full_signature": "private static boolean branchExistsLocally(Git git, String branch)", "class_method_signature": "RepositoryManager.branchExistsLocally(Git git, String branch)", "testcase": false, "constructor": false}, {"identifier": "stash", "parameters": "(Path repositoryDirectory, String stashId)", "modifiers": "public static", "return": "void", "signature": "void stash(Path repositoryDirectory, String stashId)", "full_signature": "public static void stash(Path repositoryDirectory, String stashId)", "class_method_signature": "RepositoryManager.stash(Path repositoryDirectory, String stashId)", "testcase": false, "constructor": false}, {"identifier": "dropStash", "parameters": "(Path repositoryDirectory, String stashId)", "modifiers": "public static", "return": "void", "signature": "void dropStash(Path repositoryDirectory, String stashId)", "full_signature": "public static void dropStash(Path repositoryDirectory, String stashId)", "class_method_signature": "RepositoryManager.dropStash(Path repositoryDirectory, String stashId)", "testcase": false, "constructor": false}, {"identifier": "applyStashThenDrop", "parameters": "(Path repositoryDirectory, String stashId)", "modifiers": "public static", "return": "void", "signature": "void applyStashThenDrop(Path repositoryDirectory, String stashId)", "full_signature": "public static void applyStashThenDrop(Path repositoryDirectory, String stashId)", "class_method_signature": "RepositoryManager.applyStashThenDrop(Path repositoryDirectory, String stashId)", "testcase": false, "constructor": false}, {"identifier": "checkoutExistingBranchOrCreateOrphan", "parameters": "(Git git, boolean isLocalOnly, String username, String password, String branch)", "modifiers": "private static", "return": "void", "signature": "void checkoutExistingBranchOrCreateOrphan(Git git, boolean isLocalOnly, String username, String password, String branch)", "full_signature": "private static void checkoutExistingBranchOrCreateOrphan(Git git, boolean isLocalOnly, String username, String password, String branch)", "class_method_signature": "RepositoryManager.checkoutExistingBranchOrCreateOrphan(Git git, boolean isLocalOnly, String username, String password, String branch)", "testcase": false, "constructor": false}, {"identifier": "checkoutExistingBranchOrCreateOrphan", "parameters": "(Path repositoryDirectory, boolean isLocalOnly, String username, String password, String branch)", "modifiers": "public static", "return": "void", "signature": "void checkoutExistingBranchOrCreateOrphan(Path repositoryDirectory, boolean isLocalOnly, String username, String password, String branch)", "full_signature": "public static void checkoutExistingBranchOrCreateOrphan(Path repositoryDirectory, boolean isLocalOnly, String username, String password, String branch)", "class_method_signature": "RepositoryManager.checkoutExistingBranchOrCreateOrphan(Path repositoryDirectory, boolean isLocalOnly, String username, String password, String branch)", "testcase": false, "constructor": false}, {"identifier": "getFullTagReference", "parameters": "(Git repository, String branch)", "modifiers": "private static", "return": "String", "signature": "String getFullTagReference(Git repository, String branch)", "full_signature": "private static String getFullTagReference(Git repository, String branch)", "class_method_signature": "RepositoryManager.getFullTagReference(Git repository, String branch)", "testcase": false, "constructor": false}, {"identifier": "getFullBranchReference", "parameters": "(Git repository, String branch)", "modifiers": "private static", "return": "String", "signature": "String getFullBranchReference(Git repository, String branch)", "full_signature": "private static String getFullBranchReference(Git repository, String branch)", "class_method_signature": "RepositoryManager.getFullBranchReference(Git repository, String branch)", "testcase": false, "constructor": false}, {"identifier": "checkoutRepository", "parameters": "(Git repository, String branch)", "modifiers": "private static", "return": "void", "signature": "void checkoutRepository(Git repository, String branch)", "full_signature": "private static void checkoutRepository(Git repository, String branch)", "class_method_signature": "RepositoryManager.checkoutRepository(Git repository, String branch)", "testcase": false, "constructor": false}, {"identifier": "cloneRepository", "parameters": "(String url, String username, String password, String branch, Path targetPath)", "modifiers": "private static", "return": "Git", "signature": "Git cloneRepository(String url, String username, String password, String branch, Path targetPath)", "full_signature": "private static Git cloneRepository(String url, String username, String password, String branch, Path targetPath)", "class_method_signature": "RepositoryManager.cloneRepository(String url, String username, String password, String branch, Path targetPath)", "testcase": false, "constructor": false}, {"identifier": "pull", "parameters": "(Git repository, String username, String password)", "modifiers": "public static", "return": "boolean", "signature": "boolean pull(Git repository, String username, String password)", "full_signature": "public static boolean pull(Git repository, String username, String password)", "class_method_signature": "RepositoryManager.pull(Git repository, String username, String password)", "testcase": false, "constructor": false}, {"identifier": "getLastHash", "parameters": "(Git git)", "modifiers": "public static", "return": "String", "signature": "String getLastHash(Git git)", "full_signature": "public static String getLastHash(Git git)", "class_method_signature": "RepositoryManager.getLastHash(Git git)", "testcase": false, "constructor": false}, {"identifier": "setCredentials", "parameters": "(TransportCommand<?, ?> command, String username, String password)", "modifiers": "private static", "return": "void", "signature": "void setCredentials(TransportCommand<?, ?> command, String username, String password)", "full_signature": "private static void setCredentials(TransportCommand<?, ?> command, String username, String password)", "class_method_signature": "RepositoryManager.setCredentials(TransportCommand<?, ?> command, String username, String password)", "testcase": false, "constructor": false}, {"identifier": "getHistory", "parameters": "(Path repositoryDirectory, int from, int count)", "modifiers": "public static", "return": "List<SimpleGitHistoryEntry>", "signature": "List<SimpleGitHistoryEntry> getHistory(Path repositoryDirectory, int from, int count)", "full_signature": "public static List<SimpleGitHistoryEntry> getHistory(Path repositoryDirectory, int from, int count)", "class_method_signature": "RepositoryManager.getHistory(Path repositoryDirectory, int from, int count)", "testcase": false, "constructor": false}, {"identifier": "setRemote", "parameters": "(Path repositoryDirectory, String remoteName, String remoteUrl)", "modifiers": "public static", "return": "void", "signature": "void setRemote(Path repositoryDirectory, String remoteName, String remoteUrl)", "full_signature": "public static void setRemote(Path repositoryDirectory, String remoteName, String remoteUrl)", "class_method_signature": "RepositoryManager.setRemote(Path repositoryDirectory, String remoteName, String remoteUrl)", "testcase": false, "constructor": false}, {"identifier": "getRemoteUrl", "parameters": "(Path repositoryDirectory, String remoteName)", "modifiers": "public static", "return": "String", "signature": "String getRemoteUrl(Path repositoryDirectory, String remoteName)", "full_signature": "public static String getRemoteUrl(Path repositoryDirectory, String remoteName)", "class_method_signature": "RepositoryManager.getRemoteUrl(Path repositoryDirectory, String remoteName)", "testcase": false, "constructor": false}, {"identifier": "getCurrentBranchName", "parameters": "(Path repositoryDirectory)", "modifiers": "public static", "return": "String", "signature": "String getCurrentBranchName(Path repositoryDirectory)", "full_signature": "public static String getCurrentBranchName(Path repositoryDirectory)", "class_method_signature": "RepositoryManager.getCurrentBranchName(Path repositoryDirectory)", "testcase": false, "constructor": false}, {"identifier": "isOnBranch", "parameters": "(Path repositoryDirectory, String branchName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOnBranch(Path repositoryDirectory, String branchName)", "full_signature": "public static boolean isOnBranch(Path repositoryDirectory, String branchName)", "class_method_signature": "RepositoryManager.isOnBranch(Path repositoryDirectory, String branchName)", "testcase": false, "constructor": false}, {"identifier": "renameBranches", "parameters": "(Path repositoryDirectory, Map<String, String> branchOldNameToNewName)", "modifiers": "public static", "return": "void", "signature": "void renameBranches(Path repositoryDirectory, Map<String, String> branchOldNameToNewName)", "full_signature": "public static void renameBranches(Path repositoryDirectory, Map<String, String> branchOldNameToNewName)", "class_method_signature": "RepositoryManager.renameBranches(Path repositoryDirectory, Map<String, String> branchOldNameToNewName)", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(Path repositoryDirectory, String username, String password)", "modifiers": "public static", "return": "boolean", "signature": "boolean push(Path repositoryDirectory, String username, String password)", "full_signature": "public static boolean push(Path repositoryDirectory, String username, String password)", "class_method_signature": "RepositoryManager.push(Path repositoryDirectory, String username, String password)", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(Path repositoryDirectory, String username, String password, String remoteBranch)", "modifiers": "public static", "return": "boolean", "signature": "boolean push(Path repositoryDirectory, String username, String password, String remoteBranch)", "full_signature": "public static boolean push(Path repositoryDirectory, String username, String password, String remoteBranch)", "class_method_signature": "RepositoryManager.push(Path repositoryDirectory, String username, String password, String remoteBranch)", "testcase": false, "constructor": false}, {"identifier": "generateConflictBranchName", "parameters": "(Repository repository, String remoteName)", "modifiers": "private static", "return": "String", "signature": "String generateConflictBranchName(Repository repository, String remoteName)", "full_signature": "private static String generateConflictBranchName(Repository repository, String remoteName)", "class_method_signature": "RepositoryManager.generateConflictBranchName(Repository repository, String remoteName)", "testcase": false, "constructor": false}, {"identifier": "rebranch", "parameters": "(Git git, String localBranch, String remoteBranch)", "modifiers": "public static", "return": "void", "signature": "void rebranch(Git git, String localBranch, String remoteBranch)", "full_signature": "public static void rebranch(Git git, String localBranch, String remoteBranch)", "class_method_signature": "RepositoryManager.rebranch(Git git, String localBranch, String remoteBranch)", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(Git git, String username, String password, String localBranch, String remoteBranch)", "modifiers": "public static", "return": "boolean", "signature": "boolean push(Git git, String username, String password, String localBranch, String remoteBranch)", "full_signature": "public static boolean push(Git git, String username, String password, String localBranch, String remoteBranch)", "class_method_signature": "RepositoryManager.push(Git git, String username, String password, String localBranch, String remoteBranch)", "testcase": false, "constructor": false}, {"identifier": "isPushed", "parameters": "(Iterable<PushResult> call)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPushed(Iterable<PushResult> call)", "full_signature": "private static boolean isPushed(Iterable<PushResult> call)", "class_method_signature": "RepositoryManager.isPushed(Iterable<PushResult> call)", "testcase": false, "constructor": false}, {"identifier": "fetch", "parameters": "(Git git, String username, String password)", "modifiers": "public static", "return": "void", "signature": "void fetch(Git git, String username, String password)", "full_signature": "public static void fetch(Git git, String username, String password)", "class_method_signature": "RepositoryManager.fetch(Git git, String username, String password)", "testcase": false, "constructor": false}, {"identifier": "pull", "parameters": "(Path repositoryDirectory, String username, String password)", "modifiers": "public static", "return": "void", "signature": "void pull(Path repositoryDirectory, String username, String password)", "full_signature": "public static void pull(Path repositoryDirectory, String username, String password)", "class_method_signature": "RepositoryManager.pull(Path repositoryDirectory, String username, String password)", "testcase": false, "constructor": false}, {"identifier": "pull", "parameters": "(Path repositoryDirectory, String username, String password, String remoteBranch)", "modifiers": "public static", "return": "void", "signature": "void pull(Path repositoryDirectory, String username, String password, String remoteBranch)", "full_signature": "public static void pull(Path repositoryDirectory, String username, String password, String remoteBranch)", "class_method_signature": "RepositoryManager.pull(Path repositoryDirectory, String username, String password, String remoteBranch)", "testcase": false, "constructor": false}, {"identifier": "clean", "parameters": "(Path repositoryDirectory)", "modifiers": "public static", "return": "void", "signature": "void clean(Path repositoryDirectory)", "full_signature": "public static void clean(Path repositoryDirectory)", "class_method_signature": "RepositoryManager.clean(Path repositoryDirectory)", "testcase": false, "constructor": false}, {"identifier": "checkRepositoryState", "parameters": "(RepositoryState repositoryState, String errorMessage)", "modifiers": "private static", "return": "void", "signature": "void checkRepositoryState(RepositoryState repositoryState, String errorMessage)", "full_signature": "private static void checkRepositoryState(RepositoryState repositoryState, String errorMessage)", "class_method_signature": "RepositoryManager.checkRepositoryState(RepositoryState repositoryState, String errorMessage)", "testcase": false, "constructor": false}, {"identifier": "defaultEmailIfNull", "parameters": "(String username, String email)", "modifiers": "private static", "return": "String", "signature": "String defaultEmailIfNull(String username, String email)", "full_signature": "private static String defaultEmailIfNull(String username, String email)", "class_method_signature": "RepositoryManager.defaultEmailIfNull(String username, String email)", "testcase": false, "constructor": false}, {"identifier": "defaultUsernameIfNull", "parameters": "(String username)", "modifiers": "private static", "return": "String", "signature": "String defaultUsernameIfNull(String username)", "full_signature": "private static String defaultUsernameIfNull(String username)", "class_method_signature": "RepositoryManager.defaultUsernameIfNull(String username)", "testcase": false, "constructor": false}], "file": "alien4cloud-common/src/main/java/alien4cloud/git/RepositoryManager.java"}, "focal_method": {"identifier": "isOnBranch", "parameters": "(Path repositoryDirectory, String branchName)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isOnBranch(Path repositoryDirectory, String branchName) {\n        Git git = null;\n        try {\n            git = Git.open(repositoryDirectory.toFile());\n            return branchName.equals(git.getRepository().getBranch());\n        } catch (IOException e) {\n            throw new GitException(\"Unable to open the git repository\", e);\n        } finally {\n            close(git);\n        }\n    }", "signature": "boolean isOnBranch(Path repositoryDirectory, String branchName)", "full_signature": "public static boolean isOnBranch(Path repositoryDirectory, String branchName)", "class_method_signature": "RepositoryManager.isOnBranch(Path repositoryDirectory, String branchName)", "testcase": false, "constructor": false, "invocations": ["open", "toFile", "equals", "getBranch", "getRepository", "close"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}