{"test_class": {"identifier": "ExternalJarUploadServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILE_NAME = \"resource file\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = \"resource file\"", "var_name": "FILE_NAME"}, {"original_string": "private static final String EXCEPTION_MESSAGE = \"Could not upload external jar: \";", "modifier": "private static final", "type": "String", "declarator": "EXCEPTION_MESSAGE = \"Could not upload external jar: \"", "var_name": "EXCEPTION_MESSAGE"}, {"original_string": "private static final String PATH = \"path\";", "modifier": "private static final", "type": "String", "declarator": "PATH = \"path\"", "var_name": "PATH"}, {"original_string": "@Mock\n    private StubResourcePathProvider stubResourcePathProvider;", "modifier": "@Mock\n    private", "type": "StubResourcePathProvider", "declarator": "stubResourcePathProvider", "var_name": "stubResourcePathProvider"}, {"original_string": "@Mock\n    private HttpServletRequest request;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private HttpServletResponse response;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private ServletInputStream inputStream;", "modifier": "@Mock\n    private", "type": "ServletInputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "@Mock\n    private FileWriter fileWriter;", "modifier": "@Mock\n    private", "type": "FileWriter", "declarator": "fileWriter", "var_name": "fileWriter"}, {"original_string": "@Mock\n    private PrintWriter printWriter;", "modifier": "@Mock\n    private", "type": "PrintWriter", "declarator": "printWriter", "var_name": "printWriter"}, {"original_string": "@Mock\n    private UrlAccessLogMessageAssembler urlAccessLogMessageAssembler;", "modifier": "@Mock\n    private", "type": "UrlAccessLogMessageAssembler", "declarator": "urlAccessLogMessageAssembler", "var_name": "urlAccessLogMessageAssembler"}, {"original_string": "@InjectMocks\n    private ExternalJarUploadServlet underTest;", "modifier": "@InjectMocks\n    private", "type": "ExternalJarUploadServlet", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/stub/upload/ExternalJarUploadServletTest.java"}, "test_case": {"identifier": "testDoGetWhenFileNameIsNullShouldWriteErrorToResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoGetWhenFileNameIsNullShouldWriteErrorToResponse() throws ServletException, IOException {\n        //GIVEN\n        given(request.getParameter(\"fileName\")).willReturn(null);\n        given(response.getWriter()).willReturn(printWriter);\n        //WHEN\n        underTest.doGet(request, response);\n        //THEN\n        verify(printWriter).write(underTest.returnHintMessage());\n    }", "signature": "void testDoGetWhenFileNameIsNullShouldWriteErrorToResponse()", "full_signature": "@Test public void testDoGetWhenFileNameIsNullShouldWriteErrorToResponse()", "class_method_signature": "ExternalJarUploadServletTest.testDoGetWhenFileNameIsNullShouldWriteErrorToResponse()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getParameter", "willReturn", "given", "getWriter", "doGet", "write", "verify", "returnHintMessage"]}, "focal_class": {"identifier": "ExternalJarUploadServlet", "superclass": "extends CommonExternalUploadServlet", "interfaces": "", "fields": [{"original_string": "private static final String EXCEPTION_MESSAGE = \"Could not upload external jar: \";", "modifier": "private static final", "type": "String", "declarator": "EXCEPTION_MESSAGE = \"Could not upload external jar: \"", "var_name": "EXCEPTION_MESSAGE"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ExternalJarUploadServlet.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ExternalJarUploadServlet.class)", "var_name": "LOGGER"}, {"original_string": "private final UrlAccessLogMessageAssembler urlAccessLogMessageAssembler;", "modifier": "private final", "type": "UrlAccessLogMessageAssembler", "declarator": "urlAccessLogMessageAssembler", "var_name": "urlAccessLogMessageAssembler"}, {"original_string": "private final StubResourcePathProvider stubResourcePathProvider;", "modifier": "private final", "type": "StubResourcePathProvider", "declarator": "stubResourcePathProvider", "var_name": "stubResourcePathProvider"}, {"original_string": "private final FileWriter fileWriter;", "modifier": "private final", "type": "FileWriter", "declarator": "fileWriter", "var_name": "fileWriter"}], "methods": [{"identifier": "ExternalJarUploadServlet", "parameters": "(UrlAccessLogMessageAssembler urlAccessLogMessageAssembler, StubResourcePathProvider stubResourcePathProvider, FileWriter fileWriter)", "modifiers": "@Autowired public", "return": "", "signature": " ExternalJarUploadServlet(UrlAccessLogMessageAssembler urlAccessLogMessageAssembler, StubResourcePathProvider stubResourcePathProvider, FileWriter fileWriter)", "full_signature": "@Autowired public  ExternalJarUploadServlet(UrlAccessLogMessageAssembler urlAccessLogMessageAssembler, StubResourcePathProvider stubResourcePathProvider, FileWriter fileWriter)", "class_method_signature": "ExternalJarUploadServlet.ExternalJarUploadServlet(UrlAccessLogMessageAssembler urlAccessLogMessageAssembler, StubResourcePathProvider stubResourcePathProvider, FileWriter fileWriter)", "testcase": false, "constructor": true}, {"identifier": "returnHintMessage", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String returnHintMessage()", "full_signature": "@Override protected String returnHintMessage()", "class_method_signature": "ExternalJarUploadServlet.returnHintMessage()", "testcase": false, "constructor": false}, {"identifier": "writeFile", "parameters": "(InputStream inputStream, String fileName, HttpServletRequest request)", "modifiers": "@Override protected", "return": "void", "signature": "void writeFile(InputStream inputStream, String fileName, HttpServletRequest request)", "full_signature": "@Override protected void writeFile(InputStream inputStream, String fileName, HttpServletRequest request)", "class_method_signature": "ExternalJarUploadServlet.writeFile(InputStream inputStream, String fileName, HttpServletRequest request)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/stub/upload/ExternalJarUploadServlet.java"}, "focal_method": {"identifier": "returnHintMessage", "parameters": "()", "modifiers": "@Override protected", "return": "String", "body": "@Override\n    protected String returnHintMessage() {\n        return \"Please give a name to the jar file! e.g.:.../jar?fileName=external.jar\";\n    }", "signature": "String returnHintMessage()", "full_signature": "@Override protected String returnHintMessage()", "class_method_signature": "ExternalJarUploadServlet.returnHintMessage()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}