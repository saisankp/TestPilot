{"test_class": {"identifier": "ResultSetsTest", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "Object[] uuids = {\n        UUID.fromString(\"e6af74a8-4711-4609-a94f-2cbfab9695e5\"),\n        UUID.fromString(\"281336f4-2a52-4535-847c-11a4d3682ec1\"),\n        UUID.fromString(\"c32b8d37-89bd-4dfe-a7d5-5f0258692d05\"),\n        UUID.fromString(\"973fe99f-5715-4dfd-a28d-5b3751b26ab5\"),\n        UUID.fromString(\"0aabb840-bab6-474b-9f08-c18527a2b47f\") };", "modifier": "", "type": "Object[]", "declarator": "uuids = {\n        UUID.fromString(\"e6af74a8-4711-4609-a94f-2cbfab9695e5\"),\n        UUID.fromString(\"281336f4-2a52-4535-847c-11a4d3682ec1\"),\n        UUID.fromString(\"c32b8d37-89bd-4dfe-a7d5-5f0258692d05\"),\n        UUID.fromString(\"973fe99f-5715-4dfd-a28d-5b3751b26ab5\"),\n        UUID.fromString(\"0aabb840-bab6-474b-9f08-c18527a2b47f\") }", "var_name": "uuids"}], "file": "db/cassandra-intro/src/main/java/com/async/ResultSetsTest.java"}, "test_case": {"identifier": "should_query_partitions_as_observable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_query_partitions_as_observable() throws Exception {\n        Observable<ResultSet> results = ResultSets.queryAllAsObservable(session,\n            \"SELECT * FROM users WHERE id = ?\",\n            uuids);\n\n        Observable<String> names = results.map((ResultSet rs) -> rs.one().getString(\"name\"));\n\n        CountDownLatch latch = new CountDownLatch(1);\n        CollectingObserver<String> collector = new CollectingObserver<>(latch);\n        names.subscribe(collector);\n\n        boolean completed = latch.await(100, MILLISECONDS);\n        Assertions.assertThat(completed).isTrue()\n            .as(\"Expected observable to complete in less than 100 milliseconds\");\n        Assertions.assertThat(collector.values).containsOnly(\"user1\", \"user2\", \"user3\", \"user4\", \"user5\");\n\n    }", "signature": "void should_query_partitions_as_observable()", "full_signature": "@Test public void should_query_partitions_as_observable()", "class_method_signature": "ResultSetsTest.should_query_partitions_as_observable()", "testcase": true, "constructor": false, "invocations": ["queryAllAsObservable", "map", "getString", "one", "subscribe", "await", "as", "isTrue", "assertThat", "containsOnly", "assertThat"]}, "focal_class": {"identifier": "ResultSets", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "queryAllAsList", "parameters": "(Session session, String query, Object... partitionKeys)", "modifiers": "public static", "return": "Future<List<ResultSet>>", "signature": "Future<List<ResultSet>> queryAllAsList(Session session, String query, Object... partitionKeys)", "full_signature": "public static Future<List<ResultSet>> queryAllAsList(Session session, String query, Object... partitionKeys)", "class_method_signature": "ResultSets.queryAllAsList(Session session, String query, Object... partitionKeys)", "testcase": false, "constructor": false}, {"identifier": "queryAll", "parameters": "(Session session, String query, Object... partitionKeys)", "modifiers": "public static", "return": "List<ListenableFuture<ResultSet>>", "signature": "List<ListenableFuture<ResultSet>> queryAll(Session session, String query, Object... partitionKeys)", "full_signature": "public static List<ListenableFuture<ResultSet>> queryAll(Session session, String query, Object... partitionKeys)", "class_method_signature": "ResultSets.queryAll(Session session, String query, Object... partitionKeys)", "testcase": false, "constructor": false}, {"identifier": "queryAllAsObservable", "parameters": "(Session session, String query, Object... partitionKeys)", "modifiers": "public static", "return": "Observable<ResultSet>", "signature": "Observable<ResultSet> queryAllAsObservable(Session session, String query, Object... partitionKeys)", "full_signature": "public static Observable<ResultSet> queryAllAsObservable(Session session, String query, Object... partitionKeys)", "class_method_signature": "ResultSets.queryAllAsObservable(Session session, String query, Object... partitionKeys)", "testcase": false, "constructor": false}, {"identifier": "sendQueries", "parameters": "(Session session, String query, Object[] partitionKeys)", "modifiers": "private static", "return": "List<ResultSetFuture>", "signature": "List<ResultSetFuture> sendQueries(Session session, String query, Object[] partitionKeys)", "full_signature": "private static List<ResultSetFuture> sendQueries(Session session, String query, Object[] partitionKeys)", "class_method_signature": "ResultSets.sendQueries(Session session, String query, Object[] partitionKeys)", "testcase": false, "constructor": false}], "file": "db/cassandra-intro/src/main/java/com/async/ResultSets.java"}, "focal_method": {"identifier": "queryAllAsObservable", "parameters": "(Session session, String query, Object... partitionKeys)", "modifiers": "public static", "return": "Observable<ResultSet>", "body": "public static Observable<ResultSet> queryAllAsObservable(Session session, String query, Object... partitionKeys) {\n        List<ResultSetFuture> futures = sendQueries(session, query, partitionKeys);\n        //\u8f6c\u6362\u4e3aRx\u7684\u6a21\u5f0f, \u5c06ListenableFuture\u8f6c\u6362\u4e3a\u89c2\u5bdf\u8005\u7c7b\u578bObservable, \u6700\u540e\u5408\u5e76\u4e3a\u4e00\u4e2aObservable<ResultSet>\n        Scheduler scheduler = Schedulers.io();\n        List<Observable<ResultSet>> observables = Lists.transform(futures, (ResultSetFuture future) -> Observable.from(future, scheduler));\n        return Observable.merge(observables);\n    }", "signature": "Observable<ResultSet> queryAllAsObservable(Session session, String query, Object... partitionKeys)", "full_signature": "public static Observable<ResultSet> queryAllAsObservable(Session session, String query, Object... partitionKeys)", "class_method_signature": "ResultSets.queryAllAsObservable(Session session, String query, Object... partitionKeys)", "testcase": false, "constructor": false, "invocations": ["sendQueries", "io", "transform", "from", "merge"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}