{"test_class": {"identifier": "ForecastingDetectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ForecastingDetector detectorUnderTest;", "modifier": "private", "type": "ForecastingDetector", "declarator": "detectorUnderTest", "var_name": "detectorUnderTest"}, {"original_string": "@Mock\n    private PointForecaster pointForecaster;", "modifier": "@Mock\n    private", "type": "PointForecaster", "declarator": "pointForecaster", "var_name": "pointForecaster"}, {"original_string": "@Mock\n    private IntervalForecaster intervalForecaster;", "modifier": "@Mock\n    private", "type": "IntervalForecaster", "declarator": "intervalForecaster", "var_name": "intervalForecaster"}, {"original_string": "private UUID detectorUuid;", "modifier": "private", "type": "UUID", "declarator": "detectorUuid", "var_name": "detectorUuid"}, {"original_string": "private AnomalyType anomalyType;", "modifier": "private", "type": "AnomalyType", "declarator": "anomalyType", "var_name": "anomalyType"}, {"original_string": "private boolean trusted;", "modifier": "private", "type": "boolean", "declarator": "trusted", "var_name": "trusted"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/forecasting/ForecastingDetectorTest.java"}, "test_case": {"identifier": "testAccessors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccessors() {\n        initDependencies(false);\n        assertEquals(detectorUuid, detectorUnderTest.getUuid());\n        assertEquals(pointForecaster, detectorUnderTest.getPointForecaster());\n        assertEquals(intervalForecaster, detectorUnderTest.getIntervalForecaster());\n        assertEquals(anomalyType, detectorUnderTest.getAnomalyType());\n        assertEquals(trusted, detectorUnderTest.isTrusted());\n\n        assertNotNull(detectorUnderTest.getName());\n        assertEquals(\"test\", detectorUnderTest.getName());\n    }", "signature": "void testAccessors()", "full_signature": "@Test public void testAccessors()", "class_method_signature": "ForecastingDetectorTest.testAccessors()", "testcase": true, "constructor": false, "invocations": ["initDependencies", "assertEquals", "getUuid", "assertEquals", "getPointForecaster", "assertEquals", "getIntervalForecaster", "assertEquals", "getAnomalyType", "assertEquals", "isTrusted", "assertNotNull", "getName", "assertEquals", "getName"]}, "focal_class": {"identifier": "ForecastingDetector", "superclass": "extends AbstractOutlierDetector", "interfaces": "", "fields": [{"original_string": "private final String NAME;", "modifier": "private final", "type": "String", "declarator": "NAME", "var_name": "NAME"}, {"original_string": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private PointForecaster pointForecaster;", "modifier": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private", "type": "PointForecaster", "declarator": "pointForecaster", "var_name": "pointForecaster"}, {"original_string": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private IntervalForecaster intervalForecaster;", "modifier": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private", "type": "IntervalForecaster", "declarator": "intervalForecaster", "var_name": "intervalForecaster"}, {"original_string": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private AnomalyType anomalyType;", "modifier": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private", "type": "AnomalyType", "declarator": "anomalyType", "var_name": "anomalyType"}, {"original_string": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private boolean trusted;", "modifier": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private", "type": "boolean", "declarator": "trusted", "var_name": "trusted"}, {"original_string": "private final AnomalyClassifier classifier;", "modifier": "private final", "type": "AnomalyClassifier", "declarator": "classifier", "var_name": "classifier"}], "methods": [{"identifier": "ForecastingDetector", "parameters": "(\n            UUID uuid,\n            PointForecaster pointForecaster,\n            IntervalForecaster intervalForecaster,\n            AnomalyType anomalyType,\n            boolean trusted,\n            String name)", "modifiers": "public", "return": "", "signature": " ForecastingDetector(\n            UUID uuid,\n            PointForecaster pointForecaster,\n            IntervalForecaster intervalForecaster,\n            AnomalyType anomalyType,\n            boolean trusted,\n            String name)", "full_signature": "public  ForecastingDetector(\n            UUID uuid,\n            PointForecaster pointForecaster,\n            IntervalForecaster intervalForecaster,\n            AnomalyType anomalyType,\n            boolean trusted,\n            String name)", "class_method_signature": "ForecastingDetector.ForecastingDetector(\n            UUID uuid,\n            PointForecaster pointForecaster,\n            IntervalForecaster intervalForecaster,\n            AnomalyType anomalyType,\n            boolean trusted,\n            String name)", "testcase": false, "constructor": true}, {"identifier": "detect", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "DetectorResult", "signature": "DetectorResult detect(MetricData metricData)", "full_signature": "@Override public DetectorResult detect(MetricData metricData)", "class_method_signature": "ForecastingDetector.detect(MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ForecastingDetector.getName()", "testcase": false, "constructor": false}, {"identifier": "toAnomalyThresholds", "parameters": "(IntervalForecast intervalForecast)", "modifiers": "private", "return": "AnomalyThresholds", "signature": "AnomalyThresholds toAnomalyThresholds(IntervalForecast intervalForecast)", "full_signature": "private AnomalyThresholds toAnomalyThresholds(IntervalForecast intervalForecast)", "class_method_signature": "ForecastingDetector.toAnomalyThresholds(IntervalForecast intervalForecast)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/forecasting/ForecastingDetector.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getName() {\n        return NAME;\n    }", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ForecastingDetector.getName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}