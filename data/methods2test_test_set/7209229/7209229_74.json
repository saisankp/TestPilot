{"test_class": {"identifier": "TestDbusLogAccumulator", "superclass": "", "interfaces": "", "fields": [], "file": "databus-core/databus-core-impl/src/test/java/com/linkedin/databus/core/TestDbusLogAccumulator.java"}, "test_case": {"identifier": "testDbusLogAccumulator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDbusLogAccumulator()\n  {\n    DbusLogAccumulator acc = new DbusLogAccumulator(3);\n    Logger log = Logger.getLogger(TestDbusLogAccumulator.class);\n    MyLogger mlog = new MyLogger(TestDbusLogAccumulator.class.getName());\n    mlog.setLogger(log);\n\n    acc.addMessage(new DebugMessage(\"MSG %d\", 1));\n    acc.addMessage(new DebugMessage(\"MSG %s\", \"TWO\"));\n    acc.addMessage(new DebugMessage(\"MSG 3\"));\n    acc.addMessage(new DebugMessage(\"MSG %d\", 4));\n    acc.addMessage(new DebugMessage(\"MSG %s\", \"FIVE\"));\n    acc.addMessage(new DebugMessage(\"MSG 6\"));\n    acc.addMessage(\"MSG 7\");\n\n    Assert.assertEquals(7, acc.getTotalNumberOfMessages());\n    Assert.assertEquals(3, acc.getNumberOfMessages());\n\n    acc.prettyLog(mlog, Level.ERROR);\n    Assert.assertFalse(mlog.verifyError(\"MSG 1\"));\n    Assert.assertFalse(mlog.verifyError(\"MSG TWO\"));\n    Assert.assertFalse(mlog.verifyError(\"MSG 3\"));\n    Assert.assertFalse(mlog.verifyError(\"MSG 4\"));\n    Assert.assertTrue(mlog.verifyError(\"MSG FIVE\"));\n    Assert.assertTrue(mlog.verifyError(\"MSG 6\"));\n    Assert.assertTrue(mlog.verifyError(\"MSG 7\"));\n\n    acc.reset();\n\n    mlog.setLevel(Level.DEBUG);\n    acc.addMessage(new DebugMessage(\"MSG1 %d\", 1));\n    acc.addMessage(new DebugMessage(\"MSG1 %s\", \"TWO\"));\n    acc.addMessage(new DebugMessage(\"MSG1 3\"));\n    acc.addMessage(new DebugMessage(\"MSG1 %d\", 4));\n    acc.addMessage(new DebugMessage(\"MSG1 %s\", \"FIVE\"));\n    acc.addMessage(new DebugMessage(\"MSG1 6\"));\n    acc.addMessage(\"MSG1 7\");\n\n    Exception e = new Exception(\"Exception 1\");\n    acc.addMessage(new DebugMessage(\"MSG1 %d\", 8).setException(e));\n\n    Assert.assertEquals(8, acc.getTotalNumberOfMessages());\n    Assert.assertEquals(3, acc.getNumberOfMessages());\n\n\n\n    acc.prettyLog(mlog, Level.INFO);\n\n    Assert.assertFalse(mlog.verifyInfo(\"MSG1 1\"));\n    Assert.assertFalse(mlog.verifyInfo(\"MSG1 TWO\"));\n    Assert.assertFalse(mlog.verifyInfo(\"MSG1 3\"));\n    Assert.assertFalse(mlog.verifyInfo(\"MSG1 4\"));\n    Assert.assertFalse(mlog.verifyInfo(\"MSG1 FIVE\"));\n    Assert.assertTrue(mlog.verifyInfo(\"MSG1 6\"));\n    Assert.assertTrue(mlog.verifyInfo(\"MSG1 7\"));\n    Assert.assertTrue(mlog.verifyInfo(\"MSG1 8. Exception message = java.lang.Exception: Exception 1. Exception cause = null\"));\n  }", "signature": "void testDbusLogAccumulator()", "full_signature": "@Test public void testDbusLogAccumulator()", "class_method_signature": "TestDbusLogAccumulator.testDbusLogAccumulator()", "testcase": true, "constructor": false, "invocations": ["getLogger", "getName", "setLogger", "addMessage", "addMessage", "addMessage", "addMessage", "addMessage", "addMessage", "addMessage", "assertEquals", "getTotalNumberOfMessages", "assertEquals", "getNumberOfMessages", "prettyLog", "assertFalse", "verifyError", "assertFalse", "verifyError", "assertFalse", "verifyError", "assertFalse", "verifyError", "assertTrue", "verifyError", "assertTrue", "verifyError", "assertTrue", "verifyError", "reset", "setLevel", "addMessage", "addMessage", "addMessage", "addMessage", "addMessage", "addMessage", "addMessage", "addMessage", "setException", "assertEquals", "getTotalNumberOfMessages", "assertEquals", "getNumberOfMessages", "prettyLog", "assertFalse", "verifyInfo", "assertFalse", "verifyInfo", "assertFalse", "verifyInfo", "assertFalse", "verifyInfo", "assertFalse", "verifyInfo", "assertTrue", "verifyInfo", "assertTrue", "verifyInfo", "assertTrue", "verifyInfo"]}, "focal_class": {"identifier": "DbusLogAccumulator", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MAX_NUMBER_OF_LOG_MSGS = 256;", "modifier": "public static final", "type": "int", "declarator": "MAX_NUMBER_OF_LOG_MSGS = 256", "var_name": "MAX_NUMBER_OF_LOG_MSGS"}, {"original_string": "private int _totalNumberOfMsgs;", "modifier": "private", "type": "int", "declarator": "_totalNumberOfMsgs", "var_name": "_totalNumberOfMsgs"}, {"original_string": "private final CircularFifoBuffer _msgs;", "modifier": "private final", "type": "CircularFifoBuffer", "declarator": "_msgs", "var_name": "_msgs"}], "methods": [{"identifier": "addLog", "parameters": "(String s, Logger log)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void addLog(String s, Logger log)", "full_signature": "@Deprecated public static void addLog(String s, Logger log)", "class_method_signature": "DbusLogAccumulator.addLog(String s, Logger log)", "testcase": false, "constructor": false}, {"identifier": "DbusLogAccumulator", "parameters": "()", "modifiers": "public", "return": "", "signature": " DbusLogAccumulator()", "full_signature": "public  DbusLogAccumulator()", "class_method_signature": "DbusLogAccumulator.DbusLogAccumulator()", "testcase": false, "constructor": true}, {"identifier": "DbusLogAccumulator", "parameters": "(int maxNumberMsgs)", "modifiers": "public", "return": "", "signature": " DbusLogAccumulator(int maxNumberMsgs)", "full_signature": "public  DbusLogAccumulator(int maxNumberMsgs)", "class_method_signature": "DbusLogAccumulator.DbusLogAccumulator(int maxNumberMsgs)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "DbusLogAccumulator.reset()", "testcase": false, "constructor": false}, {"identifier": "addMessage", "parameters": "(String msg)", "modifiers": "public", "return": "void", "signature": "void addMessage(String msg)", "full_signature": "public void addMessage(String msg)", "class_method_signature": "DbusLogAccumulator.addMessage(String msg)", "testcase": false, "constructor": false}, {"identifier": "addMessage", "parameters": "(String format, Object val)", "modifiers": "public", "return": "void", "signature": "void addMessage(String format, Object val)", "full_signature": "public void addMessage(String format, Object val)", "class_method_signature": "DbusLogAccumulator.addMessage(String format, Object val)", "testcase": false, "constructor": false}, {"identifier": "addMessage", "parameters": "(DebugMessage msg)", "modifiers": "public", "return": "void", "signature": "void addMessage(DebugMessage msg)", "full_signature": "public void addMessage(DebugMessage msg)", "class_method_signature": "DbusLogAccumulator.addMessage(DebugMessage msg)", "testcase": false, "constructor": false}, {"identifier": "getTotalNumberOfMessages", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalNumberOfMessages()", "full_signature": "public int getTotalNumberOfMessages()", "class_method_signature": "DbusLogAccumulator.getTotalNumberOfMessages()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfMessages", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumberOfMessages()", "full_signature": "public int getNumberOfMessages()", "class_method_signature": "DbusLogAccumulator.getNumberOfMessages()", "testcase": false, "constructor": false}, {"identifier": "prettyLog", "parameters": "(Logger log, Level level)", "modifiers": "public", "return": "void", "signature": "void prettyLog(Logger log, Level level)", "full_signature": "public void prettyLog(Logger log, Level level)", "class_method_signature": "DbusLogAccumulator.prettyLog(Logger log, Level level)", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-impl/src/main/java/com/linkedin/databus/core/DbusLogAccumulator.java"}, "focal_method": {"identifier": "DbusLogAccumulator", "parameters": "()", "modifiers": "public", "return": "", "body": "public DbusLogAccumulator() {\n    this(MAX_NUMBER_OF_LOG_MSGS);\n  }", "signature": " DbusLogAccumulator()", "full_signature": "public  DbusLogAccumulator()", "class_method_signature": "DbusLogAccumulator.DbusLogAccumulator()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}