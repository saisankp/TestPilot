{"test_class": {"identifier": "ArithmeticNodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "preon-el/src/test/java/org/codehaus/preon/el/ast/ArithmeticNodeTest.java"}, "test_case": {"identifier": "testAddNonIntegers2", "parameters": "()", "modifiers": "@Test(expected = BindingException.class) public", "return": "void", "body": "@Test(expected = BindingException.class)\n    public void testAddNonIntegers2() {\n        Node<String, Object> node1 = new StringNode<Object>(\"Whatever\");\n        Node<Integer, Object> node2 = new IntegerNode<Object>(5);\n        Node<Integer, Object> sum = ArithmeticNode.create(Operator.plus, node2, node1);\n    }", "signature": "void testAddNonIntegers2()", "full_signature": "@Test(expected = BindingException.class) public void testAddNonIntegers2()", "class_method_signature": "ArithmeticNodeTest.testAddNonIntegers2()", "testcase": true, "constructor": false, "invocations": ["create"]}, "focal_class": {"identifier": "ArithmeticNode", "superclass": "extends AbstractNode<Integer, E>", "interfaces": "", "fields": [{"original_string": "private Node<Integer, E> lhs;", "modifier": "private", "type": "Node<Integer, E>", "declarator": "lhs", "var_name": "lhs"}, {"original_string": "private Node<Integer, E> rhs;", "modifier": "private", "type": "Node<Integer, E>", "declarator": "rhs", "var_name": "rhs"}, {"original_string": "private Operator operator;", "modifier": "private", "type": "Operator", "declarator": "operator", "var_name": "operator"}], "methods": [{"identifier": "ArithmeticNode", "parameters": "(Operator operator, Node<Integer, E> lhs, Node<Integer, E> rhs)", "modifiers": "public", "return": "", "signature": " ArithmeticNode(Operator operator, Node<Integer, E> lhs, Node<Integer, E> rhs)", "full_signature": "public  ArithmeticNode(Operator operator, Node<Integer, E> lhs, Node<Integer, E> rhs)", "class_method_signature": "ArithmeticNode.ArithmeticNode(Operator operator, Node<Integer, E> lhs, Node<Integer, E> rhs)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(Operator operator, Node<?, E> lhs, Node<?, E> rhs)", "modifiers": "public static", "return": "ArithmeticNode<E>", "signature": "ArithmeticNode<E> create(Operator operator, Node<?, E> lhs, Node<?, E> rhs)", "full_signature": "public static ArithmeticNode<E> create(Operator operator, Node<?, E> lhs, Node<?, E> rhs)", "class_method_signature": "ArithmeticNode.create(Operator operator, Node<?, E> lhs, Node<?, E> rhs)", "testcase": false, "constructor": false}, {"identifier": "createIntegerNode", "parameters": "(Operator operator, Node<?, E> node)", "modifiers": "private static", "return": "Node<Integer, E>", "signature": "Node<Integer, E> createIntegerNode(Operator operator, Node<?, E> node)", "full_signature": "private static Node<Integer, E> createIntegerNode(Operator operator, Node<?, E> node)", "class_method_signature": "ArithmeticNode.createIntegerNode(Operator operator, Node<?, E> node)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class<Integer>", "signature": "Class<Integer> getType()", "full_signature": "public Class<Integer> getType()", "class_method_signature": "ArithmeticNode.getType()", "testcase": false, "constructor": false}, {"identifier": "simplify", "parameters": "()", "modifiers": "public", "return": "Node<Integer, E>", "signature": "Node<Integer, E> simplify()", "full_signature": "public Node<Integer, E> simplify()", "class_method_signature": "ArithmeticNode.simplify()", "testcase": false, "constructor": false}, {"identifier": "rescope", "parameters": "(ReferenceContext<E> context)", "modifiers": "public", "return": "Node<Integer, E>", "signature": "Node<Integer, E> rescope(ReferenceContext<E> context)", "full_signature": "public Node<Integer, E> rescope(ReferenceContext<E> context)", "class_method_signature": "ArithmeticNode.rescope(ReferenceContext<E> context)", "testcase": false, "constructor": false}, {"identifier": "getLhs", "parameters": "()", "modifiers": "public", "return": "Node<Integer, E>", "signature": "Node<Integer, E> getLhs()", "full_signature": "public Node<Integer, E> getLhs()", "class_method_signature": "ArithmeticNode.getLhs()", "testcase": false, "constructor": false}, {"identifier": "getRhs", "parameters": "()", "modifiers": "public", "return": "Node<Integer, E>", "signature": "Node<Integer, E> getRhs()", "full_signature": "public Node<Integer, E> getRhs()", "class_method_signature": "ArithmeticNode.getRhs()", "testcase": false, "constructor": false}, {"identifier": "eval", "parameters": "(E context)", "modifiers": "public", "return": "Integer", "signature": "Integer eval(E context)", "full_signature": "public Integer eval(E context)", "class_method_signature": "ArithmeticNode.eval(E context)", "testcase": false, "constructor": false}, {"identifier": "document", "parameters": "(Document target)", "modifiers": "public", "return": "void", "signature": "void document(Document target)", "full_signature": "public void document(Document target)", "class_method_signature": "ArithmeticNode.document(Document target)", "testcase": false, "constructor": false}, {"identifier": "gather", "parameters": "(Set<Reference<E>> references)", "modifiers": "public", "return": "void", "signature": "void gather(Set<Reference<E>> references)", "full_signature": "public void gather(Set<Reference<E>> references)", "class_method_signature": "ArithmeticNode.gather(Set<Reference<E>> references)", "testcase": false, "constructor": false}, {"identifier": "isParameterized", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isParameterized()", "full_signature": "public boolean isParameterized()", "class_method_signature": "ArithmeticNode.isParameterized()", "testcase": false, "constructor": false}, {"identifier": "isConstantFor", "parameters": "(ReferenceContext<E> context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConstantFor(ReferenceContext<E> context)", "full_signature": "@Override public boolean isConstantFor(ReferenceContext<E> context)", "class_method_signature": "ArithmeticNode.isConstantFor(ReferenceContext<E> context)", "testcase": false, "constructor": false}], "file": "preon-el/src/main/java/org/codehaus/preon/el/ast/ArithmeticNode.java"}, "focal_method": {"identifier": "create", "parameters": "(Operator operator, Node<?, E> lhs, Node<?, E> rhs)", "modifiers": "public static", "return": "ArithmeticNode<E>", "body": "public static <E> ArithmeticNode<E> create(Operator operator, Node<?, E> lhs, Node<?, E> rhs)\n            throws BindingException {\n        Node<Integer, E> lhsInteger = createIntegerNode(operator, lhs);\n        Node<Integer, E> rhsInteger = createIntegerNode(operator, rhs);\n        return new ArithmeticNode<E>(operator, lhsInteger, rhsInteger);\n    }", "signature": "ArithmeticNode<E> create(Operator operator, Node<?, E> lhs, Node<?, E> rhs)", "full_signature": "public static ArithmeticNode<E> create(Operator operator, Node<?, E> lhs, Node<?, E> rhs)", "class_method_signature": "ArithmeticNode.create(Operator operator, Node<?, E> lhs, Node<?, E> rhs)", "testcase": false, "constructor": false, "invocations": ["createIntegerNode", "createIntegerNode"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}