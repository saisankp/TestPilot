{"test_class": {"identifier": "AsciToStringHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/de/koelle/christian/common/ascii/AsciToStringHelperTest.java"}, "test_case": {"identifier": "testNumberMatchingForAlignment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNumberMatchingForAlignment() {\n        Assert.assertEquals(false, AsciToStringHelper.isNumeric2(\"\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"0\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"10\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"100\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"1,100\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"1.100\"));\n\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"100,99\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"100.99\"));\n\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"1.100,99\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"1,100.99\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"12.100,99\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"12,100.99\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"123.100,99\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"123,100.99\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"1.123.100,99\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"1,123,100.99\"));\n\n        Assert.assertEquals(false, AsciToStringHelper.isNumeric2(\",\"));\n        Assert.assertEquals(false, AsciToStringHelper.isNumeric2(\".\"));\n        Assert.assertEquals(false, AsciToStringHelper.isNumeric2(\"1,\"));\n        Assert.assertEquals(false, AsciToStringHelper.isNumeric2(\"1.\"));\n        Assert.assertEquals(false, AsciToStringHelper.isNumeric2(\",1\"));\n        Assert.assertEquals(false, AsciToStringHelper.isNumeric2(\".1\"));\n\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"100,9\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"100.9\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"100,999\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"100.999\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"100,999999\"));\n        Assert.assertEquals(true, AsciToStringHelper.isNumeric2(\"100.999999\"));\n    }", "signature": "void testNumberMatchingForAlignment()", "full_signature": "@Test public void testNumberMatchingForAlignment()", "class_method_signature": "AsciToStringHelperTest.testNumberMatchingForAlignment()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2", "assertEquals", "isNumeric2"]}, "focal_class": {"identifier": "AsciToStringHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern numberPattern;", "modifier": "private static final", "type": "Pattern", "declarator": "numberPattern", "var_name": "numberPattern"}], "methods": [{"identifier": "asciToString", "parameters": "( // --\n            final AsciTableLayoutTableInterface[] pObjArr)", "modifiers": "public static", "return": "String", "signature": "String asciToString( // --\n            final AsciTableLayoutTableInterface[] pObjArr)", "full_signature": "public static String asciToString( // --\n            final AsciTableLayoutTableInterface[] pObjArr)", "class_method_signature": "AsciToStringHelper.asciToString( // --\n            final AsciTableLayoutTableInterface[] pObjArr)", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "(final Object value)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNumeric(final Object value)", "full_signature": "private static boolean isNumeric(final Object value)", "class_method_signature": "AsciToStringHelper.isNumeric(final Object value)", "testcase": false, "constructor": false}, {"identifier": "isNumeric2", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumeric2(String value)", "full_signature": "public static boolean isNumeric2(String value)", "class_method_signature": "AsciToStringHelper.isNumeric2(String value)", "testcase": false, "constructor": false}, {"identifier": "cutRight", "parameters": "(\n            final String srcStr,\n            final String cutStr)", "modifiers": "public static", "return": "String", "signature": "String cutRight(\n            final String srcStr,\n            final String cutStr)", "full_signature": "public static String cutRight(\n            final String srcStr,\n            final String cutStr)", "class_method_signature": "AsciToStringHelper.cutRight(\n            final String srcStr,\n            final String cutStr)", "testcase": false, "constructor": false}], "file": "app/src/main/java/de/koelle/christian/common/ascii/AsciToStringHelper.java"}, "focal_method": {"identifier": "isNumeric2", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isNumeric2(String value) {\n        return value != null && numberPattern.matcher(value).matches();\n    }", "signature": "boolean isNumeric2(String value)", "full_signature": "public static boolean isNumeric2(String value)", "class_method_signature": "AsciToStringHelper.isNumeric2(String value)", "testcase": false, "constructor": false, "invocations": ["matches", "matcher"]}, "repository": {"repo_id": 3173086, "url": "https://github.com/koelleChristian/trickytripper", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 41, "size": 30533, "license": "licensed"}}