{"test_class": {"identifier": "ConnectionMigrationUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ConnectionId ID = ConnectionId.generateRandom();", "modifier": "private static final", "type": "ConnectionId", "declarator": "ID = ConnectionId.generateRandom()", "var_name": "ID"}, {"original_string": "private static final String NAME = \"my-connection\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"my-connection\"", "var_name": "NAME"}, {"original_string": "private static final ConnectionType TYPE = ConnectionType.AMQP_10;", "modifier": "private static final", "type": "ConnectionType", "declarator": "TYPE = ConnectionType.AMQP_10", "var_name": "TYPE"}, {"original_string": "private static final ConnectivityStatus STATUS = ConnectivityStatus.OPEN;", "modifier": "private static final", "type": "ConnectivityStatus", "declarator": "STATUS = ConnectivityStatus.OPEN", "var_name": "STATUS"}, {"original_string": "private static final String URI = \"amqps://foo:bar@example.com:443\";", "modifier": "private static final", "type": "String", "declarator": "URI = \"amqps://foo:bar@example.com:443\"", "var_name": "URI"}, {"original_string": "private static final String LEGACY_FIELD_FILTERS = \"filters\";", "modifier": "private static final", "type": "String", "declarator": "LEGACY_FIELD_FILTERS = \"filters\"", "var_name": "LEGACY_FIELD_FILTERS"}, {"original_string": "private static final AuthorizationContext AUTHORIZATION_CONTEXT = AuthorizationContext.newInstance(\n            DittoAuthorizationContextType.PRE_AUTHENTICATED_CONNECTION, AuthorizationSubject.newInstance(\"myIssuer:mySubject\"));", "modifier": "private static final", "type": "AuthorizationContext", "declarator": "AUTHORIZATION_CONTEXT = AuthorizationContext.newInstance(\n            DittoAuthorizationContextType.PRE_AUTHENTICATED_CONNECTION, AuthorizationSubject.newInstance(\"myIssuer:mySubject\"))", "var_name": "AUTHORIZATION_CONTEXT"}, {"original_string": "private static final AuthorizationContext ALT_AUTHORIZATION_CONTEXT = AuthorizationContext.newInstance(\n            DittoAuthorizationContextType.PRE_AUTHENTICATED_CONNECTION, AuthorizationSubject.newInstance(\"myAltIssuer:customSubject\"));", "modifier": "private static final", "type": "AuthorizationContext", "declarator": "ALT_AUTHORIZATION_CONTEXT = AuthorizationContext.newInstance(\n            DittoAuthorizationContextType.PRE_AUTHENTICATED_CONNECTION, AuthorizationSubject.newInstance(\"myAltIssuer:customSubject\"))", "var_name": "ALT_AUTHORIZATION_CONTEXT"}, {"original_string": "private static final JsonArray FILTERS =\n            JsonFactory.newArrayBuilder().add(\"{{thing:id}}\").add(\"{{thing:name}}\").build();", "modifier": "private static final", "type": "JsonArray", "declarator": "FILTERS =\n            JsonFactory.newArrayBuilder().add(\"{{thing:id}}\").add(\"{{thing:name}}\").build()", "var_name": "FILTERS"}, {"original_string": "private static final JsonObject SOURCE1_JSON = JsonObject\n            .newBuilder()\n            .set(Source.JsonFields.ADDRESSES, JsonFactory.newArrayBuilder().add(\"amqp/source1\").build())\n            .set(Source.JsonFields.CONSUMER_COUNT, 2)\n            .set(LEGACY_FIELD_FILTERS, FILTERS)\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "SOURCE1_JSON = JsonObject\n            .newBuilder()\n            .set(Source.JsonFields.ADDRESSES, JsonFactory.newArrayBuilder().add(\"amqp/source1\").build())\n            .set(Source.JsonFields.CONSUMER_COUNT, 2)\n            .set(LEGACY_FIELD_FILTERS, FILTERS)\n            .build()", "var_name": "SOURCE1_JSON"}, {"original_string": "private static final JsonObject SOURCE2_JSON = JsonObject\n            .newBuilder()\n            .set(Source.JsonFields.ADDRESSES, JsonFactory.newArrayBuilder().add(\"amqp/source2\").build())\n            .set(Source.JsonFields.CONSUMER_COUNT, 1)\n            .set(Source.JsonFields.HEADER_MAPPING, JsonObject.newBuilder()\n                    .set(\"source-action\", JsonValue.of(\"source/{{ topic:action }}\"))\n                    .set(\"source-subject\", JsonValue.of(\"source/{{topic:action|subject }}\"))\n                    .set(\"source-subject-next-gen\", JsonValue.of(\"source/{{    topic:action-subject }}\"))\n                    .set(\"source-some-header\", JsonValue.of(\"source/{{ topic:full | fn:substring-before('/') }}\"))\n                    .build()\n            )\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "SOURCE2_JSON = JsonObject\n            .newBuilder()\n            .set(Source.JsonFields.ADDRESSES, JsonFactory.newArrayBuilder().add(\"amqp/source2\").build())\n            .set(Source.JsonFields.CONSUMER_COUNT, 1)\n            .set(Source.JsonFields.HEADER_MAPPING, JsonObject.newBuilder()\n                    .set(\"source-action\", JsonValue.of(\"source/{{ topic:action }}\"))\n                    .set(\"source-subject\", JsonValue.of(\"source/{{topic:action|subject }}\"))\n                    .set(\"source-subject-next-gen\", JsonValue.of(\"source/{{    topic:action-subject }}\"))\n                    .set(\"source-some-header\", JsonValue.of(\"source/{{ topic:full | fn:substring-before('/') }}\"))\n                    .build()\n            )\n            .build()", "var_name": "SOURCE2_JSON"}, {"original_string": "private static final JsonArray OLD_SOURCES_JSON = JsonArray.newBuilder().add(SOURCE1_JSON, SOURCE2_JSON).build();", "modifier": "private static final", "type": "JsonArray", "declarator": "OLD_SOURCES_JSON = JsonArray.newBuilder().add(SOURCE1_JSON, SOURCE2_JSON).build()", "var_name": "OLD_SOURCES_JSON"}, {"original_string": "private static final JsonObject TARGET1_JSON = JsonObject\n            .newBuilder()\n            .set(Target.JsonFields.TOPICS, JsonFactory.newArrayBuilder()\n                    .add(TWIN_EVENTS.getName())\n                    .add(LIVE_EVENTS.getName())\n                    .build()\n            )\n            .set(Target.JsonFields.ADDRESS, \"amqp/target1\")\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "TARGET1_JSON = JsonObject\n            .newBuilder()\n            .set(Target.JsonFields.TOPICS, JsonFactory.newArrayBuilder()\n                    .add(TWIN_EVENTS.getName())\n                    .add(LIVE_EVENTS.getName())\n                    .build()\n            )\n            .set(Target.JsonFields.ADDRESS, \"amqp/target1\")\n            .build()", "var_name": "TARGET1_JSON"}, {"original_string": "private static final JsonObject TARGET2_JSON = JsonObject\n            .newBuilder()\n            .set(Target.JsonFields.TOPICS, JsonFactory.newArrayBuilder()\n                    .add(LIVE_MESSAGES.getName())\n                    .add(LIVE_MESSAGES.getName())\n                    .add(LIVE_EVENTS.getName())\n                    .build()\n            )\n            .set(Target.JsonFields.ADDRESS, \"amqp/target2\")\n            .set(Target.JsonFields.HEADER_MAPPING, JsonObject.newBuilder()\n                    .set(\"target-action\", JsonValue.of(\"target/{{ topic:action }}\"))\n                    .set(\"target-subject\", JsonValue.of(\"target/{{topic:action|subject }}\"))\n                    .set(\"target-subject-next-gen\", JsonValue.of(\"target/{{    topic:action-subject }}\"))\n                    .set(\"target-some-header\", JsonValue.of(\"target/{{ topic:full | fn:substring-before('/') }}\"))\n                    .build()\n            )\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "TARGET2_JSON = JsonObject\n            .newBuilder()\n            .set(Target.JsonFields.TOPICS, JsonFactory.newArrayBuilder()\n                    .add(LIVE_MESSAGES.getName())\n                    .add(LIVE_MESSAGES.getName())\n                    .add(LIVE_EVENTS.getName())\n                    .build()\n            )\n            .set(Target.JsonFields.ADDRESS, \"amqp/target2\")\n            .set(Target.JsonFields.HEADER_MAPPING, JsonObject.newBuilder()\n                    .set(\"target-action\", JsonValue.of(\"target/{{ topic:action }}\"))\n                    .set(\"target-subject\", JsonValue.of(\"target/{{topic:action|subject }}\"))\n                    .set(\"target-subject-next-gen\", JsonValue.of(\"target/{{    topic:action-subject }}\"))\n                    .set(\"target-some-header\", JsonValue.of(\"target/{{ topic:full | fn:substring-before('/') }}\"))\n                    .build()\n            )\n            .build()", "var_name": "TARGET2_JSON"}, {"original_string": "private static final JsonObject TARGET3_JSON = JsonObject\n            .newBuilder()\n            .set(Target.JsonFields.TOPICS, JsonFactory.newArrayBuilder()\n                    .add(LIVE_MESSAGES.getName())\n                    .add(LIVE_MESSAGES.getName())\n                    .add(LIVE_COMMANDS.getName())\n                    .build()\n            )\n            .set(Target.JsonFields.ADDRESS, \"amqp/target3/{{topic:action|subject}}\")\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "TARGET3_JSON = JsonObject\n            .newBuilder()\n            .set(Target.JsonFields.TOPICS, JsonFactory.newArrayBuilder()\n                    .add(LIVE_MESSAGES.getName())\n                    .add(LIVE_MESSAGES.getName())\n                    .add(LIVE_COMMANDS.getName())\n                    .build()\n            )\n            .set(Target.JsonFields.ADDRESS, \"amqp/target3/{{topic:action|subject}}\")\n            .build()", "var_name": "TARGET3_JSON"}, {"original_string": "private static final JsonArray OLD_TARGETS_JSON =\n            JsonArray.newBuilder().add(TARGET1_JSON, TARGET2_JSON, TARGET3_JSON).build();", "modifier": "private static final", "type": "JsonArray", "declarator": "OLD_TARGETS_JSON =\n            JsonArray.newBuilder().add(TARGET1_JSON, TARGET2_JSON, TARGET3_JSON).build()", "var_name": "OLD_TARGETS_JSON"}, {"original_string": "private static final Set<String> KNOWN_TAGS = Collections.singleton(\"HONO\");", "modifier": "private static final", "type": "Set<String>", "declarator": "KNOWN_TAGS = Collections.singleton(\"HONO\")", "var_name": "KNOWN_TAGS"}, {"original_string": "private static final JsonObject KNOWN_CONNECTION_JSON = JsonObject.newBuilder()\n            .set(Connection.JsonFields.ID, ID.toString())\n            .set(Connection.JsonFields.NAME, NAME)\n            .set(ConnectionMigrationUtil.AUTHORIZATION_CONTEXT, AUTHORIZATION_CONTEXT.getAuthorizationSubjects()\n                    .stream()\n                    .map(AuthorizationSubject::getId)\n                    .map(JsonValue::of)\n                    .collect(JsonCollectors.valuesToArray())\n            )\n            .set(Connection.JsonFields.CONNECTION_TYPE, TYPE.getName())\n            .set(Connection.JsonFields.CONNECTION_STATUS, STATUS.getName())\n            .set(Connection.JsonFields.URI, URI)\n            .set(Connection.JsonFields.SOURCES, OLD_SOURCES_JSON)\n            .set(Connection.JsonFields.TARGETS, OLD_TARGETS_JSON)\n            .set(Connection.JsonFields.CLIENT_COUNT, 2)\n            .set(Connection.JsonFields.FAILOVER_ENABLED, true)\n            .set(Connection.JsonFields.VALIDATE_CERTIFICATES, true)\n            .set(Connection.JsonFields.PROCESSOR_POOL_SIZE, 5)\n            .set(Connection.JsonFields.TAGS, KNOWN_TAGS.stream()\n                    .map(JsonFactory::newValue)\n                    .collect(JsonCollectors.valuesToArray()))\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "KNOWN_CONNECTION_JSON = JsonObject.newBuilder()\n            .set(Connection.JsonFields.ID, ID.toString())\n            .set(Connection.JsonFields.NAME, NAME)\n            .set(ConnectionMigrationUtil.AUTHORIZATION_CONTEXT, AUTHORIZATION_CONTEXT.getAuthorizationSubjects()\n                    .stream()\n                    .map(AuthorizationSubject::getId)\n                    .map(JsonValue::of)\n                    .collect(JsonCollectors.valuesToArray())\n            )\n            .set(Connection.JsonFields.CONNECTION_TYPE, TYPE.getName())\n            .set(Connection.JsonFields.CONNECTION_STATUS, STATUS.getName())\n            .set(Connection.JsonFields.URI, URI)\n            .set(Connection.JsonFields.SOURCES, OLD_SOURCES_JSON)\n            .set(Connection.JsonFields.TARGETS, OLD_TARGETS_JSON)\n            .set(Connection.JsonFields.CLIENT_COUNT, 2)\n            .set(Connection.JsonFields.FAILOVER_ENABLED, true)\n            .set(Connection.JsonFields.VALIDATE_CERTIFICATES, true)\n            .set(Connection.JsonFields.PROCESSOR_POOL_SIZE, 5)\n            .set(Connection.JsonFields.TAGS, KNOWN_TAGS.stream()\n                    .map(JsonFactory::newValue)\n                    .collect(JsonCollectors.valuesToArray()))\n            .build()", "var_name": "KNOWN_CONNECTION_JSON"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/persistence/ConnectionMigrationUtilTest.java"}, "test_case": {"identifier": "migratePlaceholderTopicActionSubject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void migratePlaceholderTopicActionSubject() {\n        final Connection migratedConnection =\n                ConnectionMigrationUtil.connectionFromJsonWithMigration(KNOWN_CONNECTION_JSON);\n\n        assertThat(migratedConnection.getSources().get(1).getHeaderMapping()).isPresent();\n        final HeaderMapping sourceHeaderMapping = migratedConnection.getSources().get(1).getHeaderMapping().get();\n        assertThat(sourceHeaderMapping.getMapping().get(\"source-action\"))\n                .isEqualTo(\"source/{{ topic:action }}\");\n        assertThat(sourceHeaderMapping.getMapping().get(\"source-subject\"))\n                .isEqualTo(\"source/{{topic:action-subject }}\");\n        assertThat(sourceHeaderMapping.getMapping().get(\"source-subject-next-gen\"))\n                .isEqualTo(\"source/{{    topic:action-subject }}\");\n        assertThat(sourceHeaderMapping.getMapping().get(\"source-some-header\"))\n                .isEqualTo(\"source/{{ topic:full | fn:substring-before('/') }}\");\n\n        assertThat(migratedConnection.getTargets().get(1).getHeaderMapping()).isPresent();\n        final HeaderMapping targetHeaderMapping = migratedConnection.getTargets().get(1).getHeaderMapping().get();\n        assertThat(targetHeaderMapping.getMapping().get(\"target-action\"))\n                .isEqualTo(\"target/{{ topic:action }}\");\n        assertThat(targetHeaderMapping.getMapping().get(\"target-subject\"))\n                .isEqualTo(\"target/{{topic:action-subject }}\");\n        assertThat(targetHeaderMapping.getMapping().get(\"target-subject-next-gen\"))\n                .isEqualTo(\"target/{{    topic:action-subject }}\");\n        assertThat(targetHeaderMapping.getMapping().get(\"target-some-header\"))\n                .isEqualTo(\"target/{{ topic:full | fn:substring-before('/') }}\");\n\n        assertThat(migratedConnection.getTargets().get(2).getAddress())\n                .isEqualTo(\"amqp/target3/{{topic:action-subject}}\");\n    }", "signature": "void migratePlaceholderTopicActionSubject()", "full_signature": "@Test public void migratePlaceholderTopicActionSubject()", "class_method_signature": "ConnectionMigrationUtilTest.migratePlaceholderTopicActionSubject()", "testcase": true, "constructor": false, "invocations": ["connectionFromJsonWithMigration", "isPresent", "assertThat", "getHeaderMapping", "get", "getSources", "get", "getHeaderMapping", "get", "getSources", "isEqualTo", "assertThat", "get", "getMapping", "isEqualTo", "assertThat", "get", "getMapping", "isEqualTo", "assertThat", "get", "getMapping", "isEqualTo", "assertThat", "get", "getMapping", "isPresent", "assertThat", "getHeaderMapping", "get", "getTargets", "get", "getHeaderMapping", "get", "getTargets", "isEqualTo", "assertThat", "get", "getMapping", "isEqualTo", "assertThat", "get", "getMapping", "isEqualTo", "assertThat", "get", "getMapping", "isEqualTo", "assertThat", "get", "getMapping", "isEqualTo", "assertThat", "getAddress", "get", "getTargets"]}, "focal_class": {"identifier": "ConnectionMigrationUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final JsonFieldDefinition<JsonArray> AUTHORIZATION_CONTEXT =\n            JsonFactory.newJsonArrayFieldDefinition(\"authorizationContext\", FieldType.REGULAR,\n                    JsonSchemaVersion.V_1, JsonSchemaVersion.V_2);", "modifier": "static final", "type": "JsonFieldDefinition<JsonArray>", "declarator": "AUTHORIZATION_CONTEXT =\n            JsonFactory.newJsonArrayFieldDefinition(\"authorizationContext\", FieldType.REGULAR,\n                    JsonSchemaVersion.V_1, JsonSchemaVersion.V_2)", "var_name": "AUTHORIZATION_CONTEXT"}], "methods": [{"identifier": "ConnectionMigrationUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConnectionMigrationUtil()", "full_signature": "private  ConnectionMigrationUtil()", "class_method_signature": "ConnectionMigrationUtil.ConnectionMigrationUtil()", "testcase": false, "constructor": true}, {"identifier": "connectionFromJsonWithMigration", "parameters": "(@Nonnull final JsonObject connectionJsonObject)", "modifiers": "static", "return": "Connection", "signature": "Connection connectionFromJsonWithMigration(@Nonnull final JsonObject connectionJsonObject)", "full_signature": "static Connection connectionFromJsonWithMigration(@Nonnull final JsonObject connectionJsonObject)", "class_method_signature": "ConnectionMigrationUtil.connectionFromJsonWithMigration(@Nonnull final JsonObject connectionJsonObject)", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/persistence/ConnectionMigrationUtil.java"}, "focal_method": {"identifier": "connectionFromJsonWithMigration", "parameters": "(@Nonnull final JsonObject connectionJsonObject)", "modifiers": "static", "return": "Connection", "body": "static Connection connectionFromJsonWithMigration(@Nonnull final JsonObject connectionJsonObject) {\n        final UnaryOperator<JsonObject> migrateSourceFilters = new MigrateSourceFilters();\n        final UnaryOperator<JsonObject> migrateTopicActionSubjectFilters = new MigrateTopicActionSubjectFilters();\n        final UnaryOperator<JsonObject> migrateAuthorizationContexts = new MigrateAuthorizationContexts();\n\n        return ConnectivityModelFactory.connectionFromJson(\n                migrateAuthorizationContexts\n                        .andThen(migrateSourceFilters)\n                        .andThen(migrateTopicActionSubjectFilters)\n                        .apply(connectionJsonObject));\n    }", "signature": "Connection connectionFromJsonWithMigration(@Nonnull final JsonObject connectionJsonObject)", "full_signature": "static Connection connectionFromJsonWithMigration(@Nonnull final JsonObject connectionJsonObject)", "class_method_signature": "ConnectionMigrationUtil.connectionFromJsonWithMigration(@Nonnull final JsonObject connectionJsonObject)", "testcase": false, "constructor": false, "invocations": ["connectionFromJson", "apply", "andThen", "andThen"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}