{"test_class": {"identifier": "ProtocolFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/protocol/ProtocolFactoryTest.java"}, "test_case": {"identifier": "getCodeByAlias", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCodeByAlias() throws Exception {\n        Assert.assertTrue(ProtocolFactory.getCodeByAlias(\"xx\") == 121);\n    }", "signature": "void getCodeByAlias()", "full_signature": "@Test public void getCodeByAlias()", "class_method_signature": "ProtocolFactoryTest.getCodeByAlias()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getCodeByAlias"]}, "focal_class": {"identifier": "ProtocolFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static ConcurrentMap<Byte, Protocol> TYPE_PROTOCOL_MAP = new ConcurrentHashMap<Byte, Protocol>();", "modifier": "private final static", "type": "ConcurrentMap<Byte, Protocol>", "declarator": "TYPE_PROTOCOL_MAP = new ConcurrentHashMap<Byte, Protocol>()", "var_name": "TYPE_PROTOCOL_MAP"}, {"original_string": "private final static ConcurrentMap<String, Byte>   TYPE_CODE_MAP     = new ConcurrentHashMap<String, Byte>();", "modifier": "private final static", "type": "ConcurrentMap<String, Byte>", "declarator": "TYPE_CODE_MAP     = new ConcurrentHashMap<String, Byte>()", "var_name": "TYPE_CODE_MAP"}, {"original_string": "private final static ExtensionLoader<Protocol>     EXTENSION_LOADER  = buildLoader();", "modifier": "private final static", "type": "ExtensionLoader<Protocol>", "declarator": "EXTENSION_LOADER  = buildLoader()", "var_name": "EXTENSION_LOADER"}, {"original_string": "private static int maxMagicOffset;", "modifier": "private static", "type": "int", "declarator": "maxMagicOffset", "var_name": "maxMagicOffset"}], "methods": [{"identifier": "buildLoader", "parameters": "()", "modifiers": "private static", "return": "ExtensionLoader<Protocol>", "signature": "ExtensionLoader<Protocol> buildLoader()", "full_signature": "private static ExtensionLoader<Protocol> buildLoader()", "class_method_signature": "ProtocolFactory.buildLoader()", "testcase": false, "constructor": false}, {"identifier": "getProtocol", "parameters": "(String alias)", "modifiers": "public static", "return": "Protocol", "signature": "Protocol getProtocol(String alias)", "full_signature": "public static Protocol getProtocol(String alias)", "class_method_signature": "ProtocolFactory.getProtocol(String alias)", "testcase": false, "constructor": false}, {"identifier": "getProtocol", "parameters": "(byte code)", "modifiers": "public static", "return": "Protocol", "signature": "Protocol getProtocol(byte code)", "full_signature": "public static Protocol getProtocol(byte code)", "class_method_signature": "ProtocolFactory.getProtocol(byte code)", "testcase": false, "constructor": false}, {"identifier": "getCodeByAlias", "parameters": "(String protocol)", "modifiers": "public static", "return": "Byte", "signature": "Byte getCodeByAlias(String protocol)", "full_signature": "public static Byte getCodeByAlias(String protocol)", "class_method_signature": "ProtocolFactory.getCodeByAlias(String protocol)", "testcase": false, "constructor": false}, {"identifier": "adaptiveProtocol", "parameters": "(byte[] magicHeadBytes)", "modifiers": "public static", "return": "Protocol", "signature": "Protocol adaptiveProtocol(byte[] magicHeadBytes)", "full_signature": "public static Protocol adaptiveProtocol(byte[] magicHeadBytes)", "class_method_signature": "ProtocolFactory.adaptiveProtocol(byte[] magicHeadBytes)", "testcase": false, "constructor": false}, {"identifier": "registerAdaptiveProtocol", "parameters": "(ProtocolInfo protocolInfo)", "modifiers": "protected static synchronized", "return": "void", "signature": "void registerAdaptiveProtocol(ProtocolInfo protocolInfo)", "full_signature": "protected static synchronized void registerAdaptiveProtocol(ProtocolInfo protocolInfo)", "class_method_signature": "ProtocolFactory.registerAdaptiveProtocol(ProtocolInfo protocolInfo)", "testcase": false, "constructor": false}, {"identifier": "getMaxMagicOffset", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getMaxMagicOffset()", "full_signature": "public static int getMaxMagicOffset()", "class_method_signature": "ProtocolFactory.getMaxMagicOffset()", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/protocol/ProtocolFactory.java"}, "focal_method": {"identifier": "getCodeByAlias", "parameters": "(String protocol)", "modifiers": "public static", "return": "Byte", "body": "public static Byte getCodeByAlias(String protocol) {\n        return TYPE_CODE_MAP.get(protocol);\n    }", "signature": "Byte getCodeByAlias(String protocol)", "full_signature": "public static Byte getCodeByAlias(String protocol)", "class_method_signature": "ProtocolFactory.getCodeByAlias(String protocol)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}