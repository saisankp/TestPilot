{"test_class": {"identifier": "AtomTetrahedralLigandPlacer3DTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "tool/builder3d/src/test/java/org/openscience/cdk/modeling/builder3d/AtomTetrahedralLigandPlacer3DTest.java"}, "test_case": {"identifier": "rescaleBondLength_IAtom_IAtom_Point3d", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rescaleBondLength_IAtom_IAtom_Point3d() {\n        IAtom atom1 = new Atom(\"C\");\n        atom1.setPoint3d(new Point3d(1, 1, 1));\n        atom1.setCovalentRadius(0.2);\n        IAtom atom2 = new Atom(\"C\");\n        atom2.setPoint3d(new Point3d(2, 2, 2));\n        atom2.setCovalentRadius(0.2);\n        Point3d newpoint = new AtomTetrahedralLigandPlacer3D().rescaleBondLength(atom1, atom2, atom2.getPoint3d());\n        Assert.assertEquals(0.4, newpoint.distance(atom1.getPoint3d()), 0.001);\n    }", "signature": "void rescaleBondLength_IAtom_IAtom_Point3d()", "full_signature": "@Test public void rescaleBondLength_IAtom_IAtom_Point3d()", "class_method_signature": "AtomTetrahedralLigandPlacer3DTest.rescaleBondLength_IAtom_IAtom_Point3d()", "testcase": true, "constructor": false, "invocations": ["setPoint3d", "setCovalentRadius", "setPoint3d", "setCovalentRadius", "rescaleBondLength", "getPoint3d", "assertEquals", "distance", "getPoint3d"]}, "focal_class": {"identifier": "AtomTetrahedralLigandPlacer3D", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map                 pSet                  = null;", "modifier": "private", "type": "Map", "declarator": "pSet                  = null", "var_name": "pSet"}, {"original_string": "public final static double  DEFAULT_BOND_LENGTH_H = 1.0;", "modifier": "public final static", "type": "double", "declarator": "DEFAULT_BOND_LENGTH_H = 1.0", "var_name": "DEFAULT_BOND_LENGTH_H"}, {"original_string": "public final static double  TETRAHEDRAL_ANGLE     = 2.0 * Math.acos(1.0 / Math.sqrt(3.0));", "modifier": "public final static", "type": "double", "declarator": "TETRAHEDRAL_ANGLE     = 2.0 * Math.acos(1.0 / Math.sqrt(3.0))", "var_name": "TETRAHEDRAL_ANGLE"}, {"original_string": "private final static double SP2_ANGLE             = 120 * Math.PI / 180;", "modifier": "private final static", "type": "double", "declarator": "SP2_ANGLE             = 120 * Math.PI / 180", "var_name": "SP2_ANGLE"}, {"original_string": "private final static double SP_ANGLE              = Math.PI;", "modifier": "private final static", "type": "double", "declarator": "SP_ANGLE              = Math.PI", "var_name": "SP_ANGLE"}, {"original_string": "final static Vector3d       XV                    = new Vector3d(1.0, 0.0, 0.0);", "modifier": "final static", "type": "Vector3d", "declarator": "XV                    = new Vector3d(1.0, 0.0, 0.0)", "var_name": "XV"}, {"original_string": "final static Vector3d       YV                    = new Vector3d(0.0, 1.0, 0.0);", "modifier": "final static", "type": "Vector3d", "declarator": "YV                    = new Vector3d(0.0, 1.0, 0.0)", "var_name": "YV"}], "methods": [{"identifier": "AtomTetrahedralLigandPlacer3D", "parameters": "()", "modifiers": "", "return": "", "signature": " AtomTetrahedralLigandPlacer3D()", "full_signature": "  AtomTetrahedralLigandPlacer3D()", "class_method_signature": "AtomTetrahedralLigandPlacer3D.AtomTetrahedralLigandPlacer3D()", "testcase": false, "constructor": true}, {"identifier": "setParameterSet", "parameters": "(Map moleculeParameter)", "modifiers": "public", "return": "void", "signature": "void setParameterSet(Map moleculeParameter)", "full_signature": "public void setParameterSet(Map moleculeParameter)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.setParameterSet(Map moleculeParameter)", "testcase": false, "constructor": false}, {"identifier": "add3DCoordinatesForSinglyBondedLigands", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public", "return": "void", "signature": "void add3DCoordinatesForSinglyBondedLigands(IAtomContainer atomContainer)", "full_signature": "public void add3DCoordinatesForSinglyBondedLigands(IAtomContainer atomContainer)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.add3DCoordinatesForSinglyBondedLigands(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "rescaleBondLength", "parameters": "(IAtom atom1, IAtom atom2, Point3d point2)", "modifiers": "public", "return": "Point3d", "signature": "Point3d rescaleBondLength(IAtom atom1, IAtom atom2, Point3d point2)", "full_signature": "public Point3d rescaleBondLength(IAtom atom1, IAtom atom2, Point3d point2)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.rescaleBondLength(IAtom atom1, IAtom atom2, Point3d point2)", "testcase": false, "constructor": false}, {"identifier": "get3DCoordinatesForLigands", "parameters": "(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, int nwanted, double length, double angle)", "modifiers": "public", "return": "Point3d[]", "signature": "Point3d[] get3DCoordinatesForLigands(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, int nwanted, double length, double angle)", "full_signature": "public Point3d[] get3DCoordinatesForLigands(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, int nwanted, double length, double angle)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.get3DCoordinatesForLigands(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, int nwanted, double length, double angle)", "testcase": false, "constructor": false}, {"identifier": "get3DCoordinatesForSPLigands", "parameters": "(IAtom refAtom, IAtomContainer withCoords, double length, double angle)", "modifiers": "public", "return": "Point3d", "signature": "Point3d get3DCoordinatesForSPLigands(IAtom refAtom, IAtomContainer withCoords, double length, double angle)", "full_signature": "public Point3d get3DCoordinatesForSPLigands(IAtom refAtom, IAtomContainer withCoords, double length, double angle)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.get3DCoordinatesForSPLigands(IAtom refAtom, IAtomContainer withCoords, double length, double angle)", "testcase": false, "constructor": false}, {"identifier": "get3DCoordinatesForSP2Ligands", "parameters": "(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, double length, double angle)", "modifiers": "public", "return": "Point3d[]", "signature": "Point3d[] get3DCoordinatesForSP2Ligands(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, double length, double angle)", "full_signature": "public Point3d[] get3DCoordinatesForSP2Ligands(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, double length, double angle)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.get3DCoordinatesForSP2Ligands(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, double length, double angle)", "testcase": false, "constructor": false}, {"identifier": "get3DCoordinatesForSP3Ligands", "parameters": "(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, int nwanted, double length, double angle)", "modifiers": "public", "return": "Point3d[]", "signature": "Point3d[] get3DCoordinatesForSP3Ligands(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, int nwanted, double length, double angle)", "full_signature": "public Point3d[] get3DCoordinatesForSP3Ligands(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, int nwanted, double length, double angle)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.get3DCoordinatesForSP3Ligands(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, int nwanted, double length, double angle)", "testcase": false, "constructor": false}, {"identifier": "calculate3DCoordinates0", "parameters": "(Point3d aPoint, int nwanted, double length)", "modifiers": "public", "return": "Point3d[]", "signature": "Point3d[] calculate3DCoordinates0(Point3d aPoint, int nwanted, double length)", "full_signature": "public Point3d[] calculate3DCoordinates0(Point3d aPoint, int nwanted, double length)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.calculate3DCoordinates0(Point3d aPoint, int nwanted, double length)", "testcase": false, "constructor": false}, {"identifier": "calculate3DCoordinates1", "parameters": "(Point3d aPoint, Point3d bPoint, Point3d cPoint, int nwanted,\n            double length, double angle)", "modifiers": "public", "return": "Point3d[]", "signature": "Point3d[] calculate3DCoordinates1(Point3d aPoint, Point3d bPoint, Point3d cPoint, int nwanted,\n            double length, double angle)", "full_signature": "public Point3d[] calculate3DCoordinates1(Point3d aPoint, Point3d bPoint, Point3d cPoint, int nwanted,\n            double length, double angle)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.calculate3DCoordinates1(Point3d aPoint, Point3d bPoint, Point3d cPoint, int nwanted,\n            double length, double angle)", "testcase": false, "constructor": false}, {"identifier": "calculate3DCoordinates2", "parameters": "(Point3d aPoint, Point3d bPoint, Point3d cPoint, int nwanted,\n            double length, double angle)", "modifiers": "public", "return": "Point3d[]", "signature": "Point3d[] calculate3DCoordinates2(Point3d aPoint, Point3d bPoint, Point3d cPoint, int nwanted,\n            double length, double angle)", "full_signature": "public Point3d[] calculate3DCoordinates2(Point3d aPoint, Point3d bPoint, Point3d cPoint, int nwanted,\n            double length, double angle)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.calculate3DCoordinates2(Point3d aPoint, Point3d bPoint, Point3d cPoint, int nwanted,\n            double length, double angle)", "testcase": false, "constructor": false}, {"identifier": "calculate3DCoordinates3", "parameters": "(Point3d aPoint, Point3d bPoint, Point3d cPoint, Point3d dPoint, double length)", "modifiers": "public", "return": "Point3d", "signature": "Point3d calculate3DCoordinates3(Point3d aPoint, Point3d bPoint, Point3d cPoint, Point3d dPoint, double length)", "full_signature": "public Point3d calculate3DCoordinates3(Point3d aPoint, Point3d bPoint, Point3d cPoint, Point3d dPoint, double length)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.calculate3DCoordinates3(Point3d aPoint, Point3d bPoint, Point3d cPoint, Point3d dPoint, double length)", "testcase": false, "constructor": false}, {"identifier": "calculate3DCoordinatesSP2_1", "parameters": "(Point3d aPoint, Point3d bPoint, Point3d cPoint, double length,\n            double angle)", "modifiers": "public", "return": "Point3d", "signature": "Point3d calculate3DCoordinatesSP2_1(Point3d aPoint, Point3d bPoint, Point3d cPoint, double length,\n            double angle)", "full_signature": "public Point3d calculate3DCoordinatesSP2_1(Point3d aPoint, Point3d bPoint, Point3d cPoint, double length,\n            double angle)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.calculate3DCoordinatesSP2_1(Point3d aPoint, Point3d bPoint, Point3d cPoint, double length,\n            double angle)", "testcase": false, "constructor": false}, {"identifier": "calculate3DCoordinatesSP2_2", "parameters": "(Point3d aPoint, Point3d bPoint, Point3d cPoint, double length,\n            double angle)", "modifiers": "public", "return": "Point3d[]", "signature": "Point3d[] calculate3DCoordinatesSP2_2(Point3d aPoint, Point3d bPoint, Point3d cPoint, double length,\n            double angle)", "full_signature": "public Point3d[] calculate3DCoordinatesSP2_2(Point3d aPoint, Point3d bPoint, Point3d cPoint, double length,\n            double angle)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.calculate3DCoordinatesSP2_2(Point3d aPoint, Point3d bPoint, Point3d cPoint, double length,\n            double angle)", "testcase": false, "constructor": false}, {"identifier": "getNonColinearVector", "parameters": "(Vector3d ab)", "modifiers": "private", "return": "Vector3d", "signature": "Vector3d getNonColinearVector(Vector3d ab)", "full_signature": "private Vector3d getNonColinearVector(Vector3d ab)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.getNonColinearVector(Vector3d ab)", "testcase": false, "constructor": false}, {"identifier": "rotate", "parameters": "(Vector3d vector, Vector3d axis, double angle)", "modifiers": "public static", "return": "Vector3d", "signature": "Vector3d rotate(Vector3d vector, Vector3d axis, double angle)", "full_signature": "public static Vector3d rotate(Vector3d vector, Vector3d axis, double angle)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.rotate(Vector3d vector, Vector3d axis, double angle)", "testcase": false, "constructor": false}, {"identifier": "getDistanceValue", "parameters": "(String id1, String id2)", "modifiers": "private", "return": "double", "signature": "double getDistanceValue(String id1, String id2)", "full_signature": "private double getDistanceValue(String id1, String id2)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.getDistanceValue(String id1, String id2)", "testcase": false, "constructor": false}, {"identifier": "getAngleValue", "parameters": "(String id1, String id2, String id3)", "modifiers": "public", "return": "double", "signature": "double getAngleValue(String id1, String id2, String id3)", "full_signature": "public double getAngleValue(String id1, String id2, String id3)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.getAngleValue(String id1, String id2, String id3)", "testcase": false, "constructor": false}, {"identifier": "makeStereocenter", "parameters": "(Point3d atomA, IBond ax, Point3d atomB, Point3d atomC, Point3d[] branchPoints)", "modifiers": "public", "return": "int", "signature": "int makeStereocenter(Point3d atomA, IBond ax, Point3d atomB, Point3d atomC, Point3d[] branchPoints)", "full_signature": "public int makeStereocenter(Point3d atomA, IBond ax, Point3d atomB, Point3d atomC, Point3d[] branchPoints)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.makeStereocenter(Point3d atomA, IBond ax, Point3d atomB, Point3d atomC, Point3d[] branchPoints)", "testcase": false, "constructor": false}, {"identifier": "getSpatproduct", "parameters": "(Vector3d a, Vector3d b, Vector3d c)", "modifiers": "public", "return": "double", "signature": "double getSpatproduct(Vector3d a, Vector3d b, Vector3d c)", "full_signature": "public double getSpatproduct(Vector3d a, Vector3d b, Vector3d c)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.getSpatproduct(Vector3d a, Vector3d b, Vector3d c)", "testcase": false, "constructor": false}, {"identifier": "getTorsionAngle", "parameters": "(Point3d a, Point3d b, Point3d c, Point3d d)", "modifiers": "public", "return": "double", "signature": "double getTorsionAngle(Point3d a, Point3d b, Point3d c, Point3d d)", "full_signature": "public double getTorsionAngle(Point3d a, Point3d b, Point3d c, Point3d d)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.getTorsionAngle(Point3d a, Point3d b, Point3d c, Point3d d)", "testcase": false, "constructor": false}, {"identifier": "getPlacedAtomsInAtomContainer", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getPlacedAtomsInAtomContainer(IAtom atom, IAtomContainer ac)", "full_signature": "public IAtomContainer getPlacedAtomsInAtomContainer(IAtom atom, IAtomContainer ac)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.getPlacedAtomsInAtomContainer(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "getUnsetAtomsInAtomContainer", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getUnsetAtomsInAtomContainer(IAtom atom, IAtomContainer ac)", "full_signature": "public IAtomContainer getUnsetAtomsInAtomContainer(IAtom atom, IAtomContainer ac)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.getUnsetAtomsInAtomContainer(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "hasUnsetNeighbour", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "public", "return": "boolean", "signature": "boolean hasUnsetNeighbour(IAtom atom, IAtomContainer ac)", "full_signature": "public boolean hasUnsetNeighbour(IAtom atom, IAtomContainer ac)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.hasUnsetNeighbour(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "getPlacedHeavyAtomInAtomContainer", "parameters": "(IAtom atomA, IAtom atomB, IAtomContainer ac)", "modifiers": "public", "return": "IAtom", "signature": "IAtom getPlacedHeavyAtomInAtomContainer(IAtom atomA, IAtom atomB, IAtomContainer ac)", "full_signature": "public IAtom getPlacedHeavyAtomInAtomContainer(IAtom atomA, IAtom atomB, IAtomContainer ac)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.getPlacedHeavyAtomInAtomContainer(IAtom atomA, IAtom atomB, IAtomContainer ac)", "testcase": false, "constructor": false}], "file": "tool/builder3d/src/main/java/org/openscience/cdk/modeling/builder3d/AtomTetrahedralLigandPlacer3D.java"}, "focal_method": {"identifier": "rescaleBondLength", "parameters": "(IAtom atom1, IAtom atom2, Point3d point2)", "modifiers": "public", "return": "Point3d", "body": "public Point3d rescaleBondLength(IAtom atom1, IAtom atom2, Point3d point2) {\n        Point3d point1 = atom1.getPoint3d();\n        Double d1 = atom1.getCovalentRadius();\n        Double d2 = atom2.getCovalentRadius();\n        // in case we have no covalent radii, set to 1.0\n        double distance = (d1 == null || d2 == null) ? 1.0 : d1 + d2;\n        if (pSet != null) {\n            distance = getDistanceValue(atom1.getAtomTypeName(), atom2.getAtomTypeName());\n        }\n        Vector3d vect = new Vector3d(point2);\n        vect.sub(point1);\n        vect.normalize();\n        vect.scale(distance);\n        Point3d newPoint = new Point3d(point1);\n        newPoint.add(vect);\n        return newPoint;\n    }", "signature": "Point3d rescaleBondLength(IAtom atom1, IAtom atom2, Point3d point2)", "full_signature": "public Point3d rescaleBondLength(IAtom atom1, IAtom atom2, Point3d point2)", "class_method_signature": "AtomTetrahedralLigandPlacer3D.rescaleBondLength(IAtom atom1, IAtom atom2, Point3d point2)", "testcase": false, "constructor": false, "invocations": ["getPoint3d", "getCovalentRadius", "getCovalentRadius", "getDistanceValue", "getAtomTypeName", "getAtomTypeName", "sub", "normalize", "scale", "add"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}