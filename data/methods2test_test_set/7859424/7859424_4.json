{"test_class": {"identifier": "PatternFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Board board;", "modifier": "", "type": "Board", "declarator": "board", "var_name": "board"}], "file": "src/edu/lclark/orego/patterns/PatternFinderTest.java"}, "test_case": {"identifier": "testAtariDetection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAtariDetection() {\n\t\tString[] diagram = {\n\t\t\t\t\".O#..\",\n\t\t\t\t\"O#O#.\",\n\t\t\t\t\"...#.\",\n\t\t\t\t\".O.#.\",\n\t\t\t\t\".....\",\n\t\t};\n\t\tboard.setUpProblem(diagram, BLACK);\n\t\tlong correctHash = 0;\n\t\tcorrectHash ^= POINT_HASHES[ENEMY_IN_ATARI][0];\n\t\tcorrectHash ^= POINT_HASHES[FRIENDLY_3_OR_MORE_LIBERTIES][2];\n\t\tassertEquals(correctHash, getHash(board, board.getCoordinateSystem().at(\"c3\"), 2, NO_POINT));\n\t\tcorrectHash ^= POINT_HASHES[FRIENDLY_IN_ATARI][4];\n\t\tcorrectHash ^= POINT_HASHES[FRIENDLY_3_OR_MORE_LIBERTIES][5];\n\t\tcorrectHash ^= POINT_HASHES[ENEMY_3_OR_MORE_LIBERTIES][6];\n\t\tcorrectHash ^= POINT_HASHES[FRIENDLY_3_OR_MORE_LIBERTIES][7];\n\t\tassertEquals(correctHash, getHash(board, board.getCoordinateSystem().at(\"c3\"), 5, NO_POINT));\n\t\tassertEquals(correctHash, getHash(board, board.getCoordinateSystem().at(\"c3\"), 6, NO_POINT));\n\t\tcorrectHash=0;\n\t\tcorrectHash ^= POINT_HASHES[OFF_BOARD][0];\n\t\tcorrectHash ^= POINT_HASHES[OFF_BOARD][1];\n\t\tcorrectHash ^= POINT_HASHES[ENEMY_IN_ATARI][2];\n\t\tcorrectHash ^= POINT_HASHES[ENEMY_2_LIBERTIES][3];\n\t\tassertEquals(correctHash, getHash(board, board.getCoordinateSystem().at(\"a5\"), 2, NO_POINT));\n\t\tcorrectHash ^= POINT_HASHES[OFF_BOARD][4];\n\t\tcorrectHash ^= POINT_HASHES[OFF_BOARD][5];\n\t\tcorrectHash ^= POINT_HASHES[OFF_BOARD][6];\n\t\tcorrectHash ^= POINT_HASHES[FRIENDLY_IN_ATARI][7];\n\t\tassertEquals(correctHash, getHash(board, board.getCoordinateSystem().at(\"a5\"), 3, NO_POINT));\n\t}", "signature": "void testAtariDetection()", "full_signature": "@Test public void testAtariDetection()", "class_method_signature": "PatternFinderTest.testAtariDetection()", "testcase": true, "constructor": false, "invocations": ["setUpProblem", "assertEquals", "getHash", "at", "getCoordinateSystem", "assertEquals", "getHash", "at", "getCoordinateSystem", "assertEquals", "getHash", "at", "getCoordinateSystem", "assertEquals", "getHash", "at", "getCoordinateSystem", "assertEquals", "getHash", "at", "getCoordinateSystem"]}, "focal_class": {"identifier": "PatternFinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int ENEMY_2_LIBERTIES = 1;", "modifier": "public static final", "type": "int", "declarator": "ENEMY_2_LIBERTIES = 1", "var_name": "ENEMY_2_LIBERTIES"}, {"original_string": "public static final int ENEMY_3_OR_MORE_LIBERTIES = 2;", "modifier": "public static final", "type": "int", "declarator": "ENEMY_3_OR_MORE_LIBERTIES = 2", "var_name": "ENEMY_3_OR_MORE_LIBERTIES"}, {"original_string": "public static final int ENEMY_IN_ATARI = 0;", "modifier": "public static final", "type": "int", "declarator": "ENEMY_IN_ATARI = 0", "var_name": "ENEMY_IN_ATARI"}, {"original_string": "public static final int FRIENDLY_2_LIBERTIES = 1;", "modifier": "public static final", "type": "int", "declarator": "FRIENDLY_2_LIBERTIES = 1", "var_name": "FRIENDLY_2_LIBERTIES"}, {"original_string": "public static final int FRIENDLY_3_OR_MORE_LIBERTIES = 2;", "modifier": "public static final", "type": "int", "declarator": "FRIENDLY_3_OR_MORE_LIBERTIES = 2", "var_name": "FRIENDLY_3_OR_MORE_LIBERTIES"}, {"original_string": "public static final int FRIENDLY_IN_ATARI = 0;", "modifier": "public static final", "type": "int", "declarator": "FRIENDLY_IN_ATARI = 0", "var_name": "FRIENDLY_IN_ATARI"}, {"original_string": "public static final int LAST_MOVE_INCREASE = 3;", "modifier": "public static final", "type": "int", "declarator": "LAST_MOVE_INCREASE = 3", "var_name": "LAST_MOVE_INCREASE"}, {"original_string": "public static final int OFF_BOARD = 9;", "modifier": "public static final", "type": "int", "declarator": "OFF_BOARD = 9", "var_name": "OFF_BOARD"}, {"original_string": "private static short[][] offsets;", "modifier": "private static", "type": "short[][]", "declarator": "offsets", "var_name": "offsets"}, {"original_string": "private static int[] patternSizes;", "modifier": "private static", "type": "int[]", "declarator": "patternSizes", "var_name": "patternSizes"}, {"original_string": "public static final long[][] POINT_HASHES = new long[10][39 * 39 - 1];", "modifier": "public static final", "type": "long[][]", "declarator": "POINT_HASHES = new long[10][39 * 39 - 1]", "var_name": "POINT_HASHES"}], "methods": [{"identifier": "distanceTo", "parameters": "(short[] offset)", "modifiers": "static", "return": "double", "signature": "double distanceTo(short[] offset)", "full_signature": "static double distanceTo(short[] offset)", "class_method_signature": "PatternFinder.distanceTo(short[] offset)", "testcase": false, "constructor": false}, {"identifier": "generatePatternMap", "parameters": "(Board board, HashMap<String, Float> map,\n\t\t\tHashMap<String, Long> hashMap, ShapeTable table,\n\t\t\tArrayList<Short> stones, int minStoneCount, int maxStoneCount,\n\t\t\tint centerRow, int centerColumn, int patternRadius)", "modifiers": "@SuppressWarnings(\"boxing\") static", "return": "void", "signature": "void generatePatternMap(Board board, HashMap<String, Float> map,\n\t\t\tHashMap<String, Long> hashMap, ShapeTable table,\n\t\t\tArrayList<Short> stones, int minStoneCount, int maxStoneCount,\n\t\t\tint centerRow, int centerColumn, int patternRadius)", "full_signature": "@SuppressWarnings(\"boxing\") static void generatePatternMap(Board board, HashMap<String, Float> map,\n\t\t\tHashMap<String, Long> hashMap, ShapeTable table,\n\t\t\tArrayList<Short> stones, int minStoneCount, int maxStoneCount,\n\t\t\tint centerRow, int centerColumn, int patternRadius)", "class_method_signature": "PatternFinder.generatePatternMap(Board board, HashMap<String, Float> map,\n\t\t\tHashMap<String, Long> hashMap, ShapeTable table,\n\t\t\tArrayList<Short> stones, int minStoneCount, int maxStoneCount,\n\t\t\tint centerRow, int centerColumn, int patternRadius)", "testcase": false, "constructor": false}, {"identifier": "getHash", "parameters": "(Board board, short p, int minStones,\n\t\t\tshort lastMove)", "modifiers": "public static", "return": "long", "signature": "long getHash(Board board, short p, int minStones,\n\t\t\tshort lastMove)", "full_signature": "public static long getHash(Board board, short p, int minStones,\n\t\t\tshort lastMove)", "class_method_signature": "PatternFinder.getHash(Board board, short p, int minStones,\n\t\t\tshort lastMove)", "testcase": false, "constructor": false}, {"identifier": "getOffsets", "parameters": "()", "modifiers": "static", "return": "short[][]", "signature": "short[][] getOffsets()", "full_signature": "static short[][] getOffsets()", "class_method_signature": "PatternFinder.getOffsets()", "testcase": false, "constructor": false}, {"identifier": "getPatternSizes", "parameters": "()", "modifiers": "static", "return": "int[]", "signature": "int[] getPatternSizes()", "full_signature": "static int[] getPatternSizes()", "class_method_signature": "PatternFinder.getPatternSizes()", "testcase": false, "constructor": false}, {"identifier": "getPatternString", "parameters": "(Board board, int topRow,\n\t\t\tint bottomRow, int leftColumn, int rightColumn)", "modifiers": "private static", "return": "String", "signature": "String getPatternString(Board board, int topRow,\n\t\t\tint bottomRow, int leftColumn, int rightColumn)", "full_signature": "private static String getPatternString(Board board, int topRow,\n\t\t\tint bottomRow, int leftColumn, int rightColumn)", "class_method_signature": "PatternFinder.getPatternString(Board board, int topRow,\n\t\t\tint bottomRow, int leftColumn, int rightColumn)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "@SuppressWarnings(\"boxing\") public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "@SuppressWarnings(\"boxing\") public static void main(String[] args)", "class_method_signature": "PatternFinder.main(String[] args)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/patterns/PatternFinder.java"}, "focal_method": {"identifier": "getHash", "parameters": "(Board board, short p, int minStones,\n\t\t\tshort lastMove)", "modifiers": "public static", "return": "long", "body": "public static long getHash(Board board, short p, int minStones,\n\t\t\tshort lastMove) {\n\t\tCoordinateSystem coords = board.getCoordinateSystem();\n\t\tlong result = 0L;\n\t\tint row = coords.row(p);\n\t\tint column = coords.column(p);\n\t\tint stonesSeen = 0;\n\t\t// TODO Verify (in a test) that this finds distant patterns\n\t\tfor (int i = 0; i < patternSizes.length - 1; i++) {\n\t\t\tfor (int j = patternSizes[i]; j < patternSizes[i + 1]; j++) {\n\t\t\t\tint newRow = row + offsets[j][0];\n\t\t\t\tint newColumn = column + offsets[j][1];\n\t\t\t\tif (coords.isValidOneDimensionalCoordinate(newRow)\n\t\t\t\t\t\t&& coords.isValidOneDimensionalCoordinate(newColumn)) {\n\t\t\t\t\tshort point = coords.at(newRow, newColumn);\n\t\t\t\t\tColor color = board.getColorAt(point);\n\t\t\t\t\tif (color == board.getColorToPlay()) {\n\t\t\t\t\t\tif (board.getLiberties(point).size() == 1) {\n\t\t\t\t\t\t\tresult ^= POINT_HASHES[FRIENDLY_IN_ATARI][j];\n\t\t\t\t\t\t} else if (board.getLiberties(point).size() == 2) {\n\t\t\t\t\t\t\tresult ^= POINT_HASHES[FRIENDLY_2_LIBERTIES][j];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult ^= POINT_HASHES[FRIENDLY_3_OR_MORE_LIBERTIES][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstonesSeen++;\n\t\t\t\t\t} else if (color == board.getColorToPlay().opposite()) {\n\t\t\t\t\t\tint lastMoveIncrease = lastMove == point ? LAST_MOVE_INCREASE : 0;\n\t\t\t\t\t\tif (board.getLiberties(point).size() == 1) {\n\t\t\t\t\t\t\tresult ^= POINT_HASHES[ENEMY_IN_ATARI + lastMoveIncrease][j];\n\t\t\t\t\t\t} else if (board.getLiberties(point).size() == 2) {\n\t\t\t\t\t\t\tresult ^= POINT_HASHES[ENEMY_2_LIBERTIES + lastMoveIncrease][j];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult ^= POINT_HASHES[ENEMY_3_OR_MORE_LIBERTIES + lastMoveIncrease][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstonesSeen++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult ^= POINT_HASHES[OFF_BOARD][j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (stonesSeen >= minStones) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "signature": "long getHash(Board board, short p, int minStones,\n\t\t\tshort lastMove)", "full_signature": "public static long getHash(Board board, short p, int minStones,\n\t\t\tshort lastMove)", "class_method_signature": "PatternFinder.getHash(Board board, short p, int minStones,\n\t\t\tshort lastMove)", "testcase": false, "constructor": false, "invocations": ["getCoordinateSystem", "row", "column", "isValidOneDimensionalCoordinate", "isValidOneDimensionalCoordinate", "at", "getColorAt", "getColorToPlay", "size", "getLiberties", "size", "getLiberties", "opposite", "getColorToPlay", "size", "getLiberties", "size", "getLiberties"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}