{"test_class": {"identifier": "XmlXPathReplaceTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/operations/xml/XmlXPathReplaceTest.java"}, "test_case": {"identifier": "reportsFailureOnBadXml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reportsFailureOnBadXml() {\n        XmlXPathReplace xmlElement = new XmlXPathReplace(\"blah\", \"test\")\n                .relative(\"src/main/resources/couchdb.properties\");\n        TOExecutionResult executionResult = xmlElement.execution(transformedAppFolder, transformationContext);\n        Assert.assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR);\n        Assert.assertNotNull(executionResult.getException());\n        Assert.assertEquals(executionResult.getException().getClass(), TransformationOperationException.class);\n        Assert.assertEquals(executionResult.getException().getMessage(),\n                \"File content could not be parsed properly in XML format\");\n    }", "signature": "void reportsFailureOnBadXml()", "full_signature": "@Test public void reportsFailureOnBadXml()", "class_method_signature": "XmlXPathReplaceTest.reportsFailureOnBadXml()", "testcase": true, "constructor": false, "invocations": ["relative", "execution", "assertEquals", "getType", "assertNotNull", "getException", "assertEquals", "getClass", "getException", "assertEquals", "getMessage", "getException"]}, "focal_class": {"identifier": "XmlXPathReplace", "superclass": "extends TransformationOperation<XmlXPathReplace>", "interfaces": "", "fields": [{"original_string": "private static final String DESCRIPTION = \"Replace %s of XPath %s in XML file %s with %s\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Replace %s of XPath %s in XML file %s with %s\"", "var_name": "DESCRIPTION"}, {"original_string": "private String xpathExpressionString;", "modifier": "private", "type": "String", "declarator": "xpathExpressionString", "var_name": "xpathExpressionString"}, {"original_string": "private XPathExpression xpathExpression;", "modifier": "private", "type": "XPathExpression", "declarator": "xpathExpression", "var_name": "xpathExpression"}, {"original_string": "private Object replacementObject;", "modifier": "private", "type": "Object", "declarator": "replacementObject", "var_name": "replacementObject"}, {"original_string": "private Mode mode;", "modifier": "private", "type": "Mode", "declarator": "mode", "var_name": "mode"}], "methods": [{"identifier": "XmlXPathReplace", "parameters": "(String xpathExpressionString)", "modifiers": "public", "return": "", "signature": " XmlXPathReplace(String xpathExpressionString)", "full_signature": "public  XmlXPathReplace(String xpathExpressionString)", "class_method_signature": "XmlXPathReplace.XmlXPathReplace(String xpathExpressionString)", "testcase": false, "constructor": true}, {"identifier": "XmlXPathReplace", "parameters": "(String xpathExpressionString, Element replacementElement)", "modifiers": "public", "return": "", "signature": " XmlXPathReplace(String xpathExpressionString, Element replacementElement)", "full_signature": "public  XmlXPathReplace(String xpathExpressionString, Element replacementElement)", "class_method_signature": "XmlXPathReplace.XmlXPathReplace(String xpathExpressionString, Element replacementElement)", "testcase": false, "constructor": true}, {"identifier": "XmlXPathReplace", "parameters": "(String xpathExpressionString, String replacementString)", "modifiers": "public", "return": "", "signature": " XmlXPathReplace(String xpathExpressionString, String replacementString)", "full_signature": "public  XmlXPathReplace(String xpathExpressionString, String replacementString)", "class_method_signature": "XmlXPathReplace.XmlXPathReplace(String xpathExpressionString, String replacementString)", "testcase": false, "constructor": true}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "XmlXPathReplace.getDescription()", "testcase": false, "constructor": false}, {"identifier": "setReplacementString", "parameters": "(String replacementString)", "modifiers": "public", "return": "XmlXPathReplace", "signature": "XmlXPathReplace setReplacementString(String replacementString)", "full_signature": "public XmlXPathReplace setReplacementString(String replacementString)", "class_method_signature": "XmlXPathReplace.setReplacementString(String replacementString)", "testcase": false, "constructor": false}, {"identifier": "setReplacementElement", "parameters": "(Element replacementElement)", "modifiers": "public", "return": "XmlXPathReplace", "signature": "XmlXPathReplace setReplacementElement(Element replacementElement)", "full_signature": "public XmlXPathReplace setReplacementElement(Element replacementElement)", "class_method_signature": "XmlXPathReplace.setReplacementElement(Element replacementElement)", "testcase": false, "constructor": false}, {"identifier": "setXPathExpression", "parameters": "(String xpathExpressionString)", "modifiers": "public", "return": "XmlXPathReplace", "signature": "XmlXPathReplace setXPathExpression(String xpathExpressionString)", "full_signature": "public XmlXPathReplace setXPathExpression(String xpathExpressionString)", "class_method_signature": "XmlXPathReplace.setXPathExpression(String xpathExpressionString)", "testcase": false, "constructor": false}, {"identifier": "checkXPathCompile", "parameters": "(String expression)", "modifiers": "private", "return": "XPathExpression", "signature": "XPathExpression checkXPathCompile(String expression)", "full_signature": "private XPathExpression checkXPathCompile(String expression)", "class_method_signature": "XmlXPathReplace.checkXPathCompile(String expression)", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TOExecutionResult", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "XmlXPathReplace.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/operations/xml/XmlXPathReplace.java"}, "focal_method": {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TOExecutionResult", "body": "@Override\n    protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext) {\n        File fileToBeChanged = getAbsoluteFile(transformedAppFolder, transformationContext);\n        TOExecutionResult result = null;\n        NodeList nodes = null;\n\n        try {\n            File readFile = getOrCreateReadFile(transformedAppFolder, transformationContext);\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder;\n            builder = factory.newDocumentBuilder();\n            Document doc = builder.parse(readFile);\n            nodes = (NodeList) xpathExpression.evaluate(doc, XPathConstants.NODESET);\n\n            if (nodes.getLength() > 0) {\n                for (int idx = 0; idx < nodes.getLength(); idx++) {\n                    Node node = nodes.item(idx);\n                    switch (mode) {\n                        case TextReplace:\n                            node.setTextContent((String) replacementObject);\n                            break;\n                        case ElementReplace:\n                            Node newNode = doc.importNode((Element) replacementObject, true);\n                            node.getParentNode().replaceChild(newNode, node);\n                            break;\n                        case Removal:\n                            node.getParentNode().removeChild(node);\n                            break;\n                    }\n                }\n                Transformer xformer = TransformerFactory.newInstance().newTransformer();\n                xformer.transform(new DOMSource(doc), new StreamResult(fileToBeChanged));\n            }\n        } catch (ParserConfigurationException | SAXException | IOException e) {\n            result = TOExecutionResult.error(this,\n                    new TransformationOperationException(\"File content could not be parsed properly in XML format\", e));\n        } catch (TransformerException e) {\n            result = TOExecutionResult.error(this, e);\n        } catch (XPathExpressionException e) {\n            result = TOExecutionResult.error(this,\n                    new TransformationOperationException(\"XPathExpression could not be evaluated correctly\", e));\n        }\n\n        if (result == null) {\n            if (nodes != null) {\n                String details = String.format(\n                        \"File %s has had %d node(s) where modification was applied based on xml xpath expression '%s'\",\n                        getRelativePath(), nodes.getLength(), xpathExpressionString);\n                if (nodes.getLength() > 0) {\n                    result = TOExecutionResult.success(this, details);\n                } else {\n                    result = TOExecutionResult.noOp(this, details);\n                }\n            } else {\n                result = TOExecutionResult.error(this,\n                        new TransformationOperationException(\"XPathExpression could not be evaluated correctly\"));\n            }\n        }\n        return result;\n    }", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "XmlXPathReplace.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false, "invocations": ["getAbsoluteFile", "getOrCreateReadFile", "newInstance", "newDocumentBuilder", "parse", "evaluate", "getLength", "getLength", "item", "setTextContent", "importNode", "replaceChild", "getParentNode", "removeChild", "getParentNode", "newTransformer", "newInstance", "transform", "error", "error", "error", "format", "getRelativePath", "getLength", "getLength", "success", "noOp", "error"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}