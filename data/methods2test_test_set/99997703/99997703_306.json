{"test_class": {"identifier": "NonExecutingEventSchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AdjustableTimeProvider timeProvider;", "modifier": "private", "type": "AdjustableTimeProvider", "declarator": "timeProvider", "var_name": "timeProvider"}, {"original_string": "private NonExecutingEventScheduler eventScheduler;", "modifier": "private", "type": "NonExecutingEventScheduler", "declarator": "eventScheduler", "var_name": "eventScheduler"}, {"original_string": "private ExecutionTrackingRunnable runnable;", "modifier": "private", "type": "ExecutionTrackingRunnable", "declarator": "runnable", "var_name": "runnable"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/event/scheduling/NonExecutingEventSchedulerTest.java"}, "test_case": {"identifier": "scheduledRunnablesNotExecutedAutomaticallyWhenTimeAdvances", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void scheduledRunnablesNotExecutedAutomaticallyWhenTimeAdvances() {\n        double delay = 20;\n        eventScheduler.doAt(delay, runnable);\n\n        timeProvider.advanceTime(delay + 1);\n        Assertions.assertEquals(0, runnable.runCount());\n    }", "signature": "void scheduledRunnablesNotExecutedAutomaticallyWhenTimeAdvances()", "full_signature": "@Test public void scheduledRunnablesNotExecutedAutomaticallyWhenTimeAdvances()", "class_method_signature": "NonExecutingEventSchedulerTest.scheduledRunnablesNotExecutedAutomaticallyWhenTimeAdvances()", "testcase": true, "constructor": false, "invocations": ["doAt", "advanceTime", "assertEquals", "runCount"]}, "focal_class": {"identifier": "NonExecutingEventScheduler", "superclass": "extends TypedEventScheduler", "interfaces": "", "fields": [{"original_string": "private final TimeProvider timeProvider;", "modifier": "private final", "type": "TimeProvider", "declarator": "timeProvider", "var_name": "timeProvider"}, {"original_string": "private final TreeSet<Event> events;", "modifier": "private final", "type": "TreeSet<Event>", "declarator": "events", "var_name": "events"}], "methods": [{"identifier": "NonExecutingEventScheduler", "parameters": "(EventSchedulerType schedulerType, TimeProvider timeProvider)", "modifiers": "public", "return": "", "signature": " NonExecutingEventScheduler(EventSchedulerType schedulerType, TimeProvider timeProvider)", "full_signature": "public  NonExecutingEventScheduler(EventSchedulerType schedulerType, TimeProvider timeProvider)", "class_method_signature": "NonExecutingEventScheduler.NonExecutingEventScheduler(EventSchedulerType schedulerType, TimeProvider timeProvider)", "testcase": false, "constructor": true}, {"identifier": "getTimeProvider", "parameters": "()", "modifiers": "@Override public", "return": "TimeProvider", "signature": "TimeProvider getTimeProvider()", "full_signature": "@Override public TimeProvider getTimeProvider()", "class_method_signature": "NonExecutingEventScheduler.getTimeProvider()", "testcase": false, "constructor": false}, {"identifier": "doNow", "parameters": "(Runnable r, String description)", "modifiers": "@Override public", "return": "Cancelable", "signature": "Cancelable doNow(Runnable r, String description)", "full_signature": "@Override public Cancelable doNow(Runnable r, String description)", "class_method_signature": "NonExecutingEventScheduler.doNow(Runnable r, String description)", "testcase": false, "constructor": false}, {"identifier": "doAt", "parameters": "(double time, Runnable r, String description, boolean isDaemon)", "modifiers": "@Override public", "return": "Cancelable", "signature": "Cancelable doAt(double time, Runnable r, String description, boolean isDaemon)", "full_signature": "@Override public Cancelable doAt(double time, Runnable r, String description, boolean isDaemon)", "class_method_signature": "NonExecutingEventScheduler.doAt(double time, Runnable r, String description, boolean isDaemon)", "testcase": false, "constructor": false}, {"identifier": "getThreadId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getThreadId()", "full_signature": "@Override public long getThreadId()", "class_method_signature": "NonExecutingEventScheduler.getThreadId()", "testcase": false, "constructor": false}, {"identifier": "hasOnlyDaemonEvents", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasOnlyDaemonEvents()", "full_signature": "@Override public boolean hasOnlyDaemonEvents()", "class_method_signature": "NonExecutingEventScheduler.hasOnlyDaemonEvents()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(Event e)", "modifiers": "@Override public", "return": "void", "signature": "void cancel(Event e)", "full_signature": "@Override public void cancel(Event e)", "class_method_signature": "NonExecutingEventScheduler.cancel(Event e)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "NonExecutingEventScheduler.stop()", "testcase": false, "constructor": false}, {"identifier": "executeAllEvents", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void executeAllEvents()", "full_signature": "public void executeAllEvents()", "class_method_signature": "NonExecutingEventScheduler.executeAllEvents()", "testcase": false, "constructor": false}, {"identifier": "executeOverdueEvents", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void executeOverdueEvents()", "full_signature": "public void executeOverdueEvents()", "class_method_signature": "NonExecutingEventScheduler.executeOverdueEvents()", "testcase": false, "constructor": false}, {"identifier": "executeEvents", "parameters": "(Predicate<Event> selector)", "modifiers": "private", "return": "void", "signature": "void executeEvents(Predicate<Event> selector)", "full_signature": "private void executeEvents(Predicate<Event> selector)", "class_method_signature": "NonExecutingEventScheduler.executeEvents(Predicate<Event> selector)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "NonExecutingEventScheduler.reset()", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/event/scheduling/NonExecutingEventScheduler.java"}, "focal_method": {"identifier": "doAt", "parameters": "(double time, Runnable r, String description, boolean isDaemon)", "modifiers": "@Override public", "return": "Cancelable", "body": "@Override\n    public Cancelable doAt(double time, Runnable r, String description, boolean isDaemon) {\n        Event event = new Event(time, description, r, this, isDaemon);\n        events.add(event);\n        return event;\n    }", "signature": "Cancelable doAt(double time, Runnable r, String description, boolean isDaemon)", "full_signature": "@Override public Cancelable doAt(double time, Runnable r, String description, boolean isDaemon)", "class_method_signature": "NonExecutingEventScheduler.doAt(double time, Runnable r, String description, boolean isDaemon)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}