{"test_class": {"identifier": "FeatureTableValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/feast/core/validators/FeatureTableValidatorTest.java"}, "test_case": {"identifier": "shouldErrorIfLabelsHasEmptyKey", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void shouldErrorIfLabelsHasEmptyKey() {\n    Map<String, String> badLabels = Map.of(\"\", \"empty\");\n    FeatureTableSpec badSpec = getTestSpec().toBuilder().putAllLabels(badLabels).build();\n    FeatureTableValidator.validateSpec(badSpec);\n  }", "signature": "void shouldErrorIfLabelsHasEmptyKey()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldErrorIfLabelsHasEmptyKey()", "class_method_signature": "FeatureTableValidatorTest.shouldErrorIfLabelsHasEmptyKey()", "testcase": true, "constructor": false, "invocations": ["of", "build", "putAllLabels", "toBuilder", "getTestSpec", "validateSpec"]}, "focal_class": {"identifier": "FeatureTableValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Set<String> RESERVED_NAMES =\n      Set.of(\"created_timestamp\", \"event_timestamp\");", "modifier": "protected static final", "type": "Set<String>", "declarator": "RESERVED_NAMES =\n      Set.of(\"created_timestamp\", \"event_timestamp\")", "var_name": "RESERVED_NAMES"}], "methods": [{"identifier": "validateSpec", "parameters": "(FeatureTableSpec spec)", "modifiers": "public static", "return": "void", "signature": "void validateSpec(FeatureTableSpec spec)", "full_signature": "public static void validateSpec(FeatureTableSpec spec)", "class_method_signature": "FeatureTableValidator.validateSpec(FeatureTableSpec spec)", "testcase": false, "constructor": false}, {"identifier": "validateFeatureSpec", "parameters": "(FeatureSpecV2 spec)", "modifiers": "private static", "return": "void", "signature": "void validateFeatureSpec(FeatureSpecV2 spec)", "full_signature": "private static void validateFeatureSpec(FeatureSpecV2 spec)", "class_method_signature": "FeatureTableValidator.validateFeatureSpec(FeatureSpecV2 spec)", "testcase": false, "constructor": false}], "file": "core/src/main/java/feast/core/validators/FeatureTableValidator.java"}, "focal_method": {"identifier": "validateSpec", "parameters": "(FeatureTableSpec spec)", "modifiers": "public static", "return": "void", "body": "public static void validateSpec(FeatureTableSpec spec) {\n    if (spec.getName().isEmpty()) {\n      throw new IllegalArgumentException(\"FeatureTable name must be provided\");\n    }\n    if (spec.getLabelsMap().containsKey(\"\")) {\n      throw new IllegalArgumentException(\"FeatureTable cannot have labels with empty key.\");\n    }\n    if (spec.getEntitiesCount() == 0) {\n      throw new IllegalArgumentException(\"FeatureTable entities list cannot be empty.\");\n    }\n    if (spec.getFeaturesCount() == 0) {\n      throw new IllegalArgumentException(\"FeatureTable features list cannot be empty.\");\n    }\n    if (!spec.hasBatchSource()) {\n      throw new IllegalArgumentException(\"FeatureTable batch source cannot be empty.\");\n    }\n\n    checkValidCharacters(spec.getName(), \"FeatureTable\");\n    spec.getFeaturesList().forEach(FeatureTableValidator::validateFeatureSpec);\n\n    // Check that BigQuery reference defined for BigQuery source is valid\n    if (!spec.getBatchSource().getBigqueryOptions().getTableRef().isEmpty()) {\n      checkValidBigQueryTableRef(\n          spec.getBatchSource().getBigqueryOptions().getTableRef(), \"FeatureTable\");\n    }\n\n    // Check that features and entities defined in FeatureTable do not use reserved names\n    ArrayList<String> fieldNames = new ArrayList<>(spec.getEntitiesList());\n    fieldNames.addAll(\n        spec.getFeaturesList().stream().map(FeatureSpecV2::getName).collect(Collectors.toList()));\n    if (!Collections.disjoint(fieldNames, RESERVED_NAMES)) {\n      throw new IllegalArgumentException(\n          String.format(\n              \"Reserved names has been used as Feature(s) names. Reserved: %s\", RESERVED_NAMES));\n    }\n\n    // Check that Feature and Entity names in FeatureTable do not collide with each other\n    if (hasDuplicates(fieldNames)) {\n      throw new IllegalArgumentException(\n          String.format(\"Entity and Feature names within a Feature Table should be unique.\"));\n    }\n  }", "signature": "void validateSpec(FeatureTableSpec spec)", "full_signature": "public static void validateSpec(FeatureTableSpec spec)", "class_method_signature": "FeatureTableValidator.validateSpec(FeatureTableSpec spec)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getName", "containsKey", "getLabelsMap", "getEntitiesCount", "getFeaturesCount", "hasBatchSource", "checkValidCharacters", "getName", "forEach", "getFeaturesList", "isEmpty", "getTableRef", "getBigqueryOptions", "getBatchSource", "checkValidBigQueryTableRef", "getTableRef", "getBigqueryOptions", "getBatchSource", "getEntitiesList", "addAll", "collect", "map", "stream", "getFeaturesList", "toList", "disjoint", "format", "hasDuplicates", "format"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}