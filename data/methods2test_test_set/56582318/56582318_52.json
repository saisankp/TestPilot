{"test_class": {"identifier": "CarteTopoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static Logger logger = Logger\n\t\t      .getLogger(SwingingArmNonConvexHull.class.getName());", "modifier": "public final static", "type": "Logger", "declarator": "logger = Logger\n\t\t      .getLogger(SwingingArmNonConvexHull.class.getName())", "var_name": "logger"}, {"original_string": "CarteTopo carte;", "modifier": "", "type": "CarteTopo", "declarator": "carte", "var_name": "carte"}, {"original_string": "Noeud n1;", "modifier": "", "type": "Noeud", "declarator": "n1", "var_name": "n1"}, {"original_string": "Noeud n2;", "modifier": "", "type": "Noeud", "declarator": "n2", "var_name": "n2"}, {"original_string": "Noeud n3;", "modifier": "", "type": "Noeud", "declarator": "n3", "var_name": "n3"}, {"original_string": "Noeud n4;", "modifier": "", "type": "Noeud", "declarator": "n4", "var_name": "n4"}, {"original_string": "Noeud n5;", "modifier": "", "type": "Noeud", "declarator": "n5", "var_name": "n5"}, {"original_string": "Noeud n6;", "modifier": "", "type": "Noeud", "declarator": "n6", "var_name": "n6"}, {"original_string": "Noeud n7;", "modifier": "", "type": "Noeud", "declarator": "n7", "var_name": "n7"}, {"original_string": "Arc a12;", "modifier": "", "type": "Arc", "declarator": "a12", "var_name": "a12"}, {"original_string": "Arc a23;", "modifier": "", "type": "Arc", "declarator": "a23", "var_name": "a23"}, {"original_string": "Arc a14;", "modifier": "", "type": "Arc", "declarator": "a14", "var_name": "a14"}, {"original_string": "Arc a45;", "modifier": "", "type": "Arc", "declarator": "a45", "var_name": "a45"}, {"original_string": "Arc a16;", "modifier": "", "type": "Arc", "declarator": "a16", "var_name": "a16"}, {"original_string": "Arc a67;", "modifier": "", "type": "Arc", "declarator": "a67", "var_name": "a67"}], "file": "geoxygene-contrib/src/test/java/fr/ign/cogit/geoxygene/contrib/cartetopo/CarteTopoTest.java"}, "test_case": {"identifier": "testFiltreNoeudsSimples", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFiltreNoeudsSimples() {\n    carte.filtreNoeudsSimples();\n    for (Arc a : carte.getPopArcs()) {\n      // node between nodes 1 and 7\n      if (a.getNoeudIni() == n7) {\n        Assert.assertEquals(n1, a.getNoeudFin());\n        Assert.assertEquals(-1, a.getOrientation());\n      }\n      if (a.getNoeudFin() == n7) {\n        Assert.assertEquals(n1, a.getNoeudIni());\n        Assert.assertEquals(1, a.getOrientation());\n      }\n      // node between nodes 1 and 5\n      if (a.getNoeudIni() == n5) {\n        Assert.assertEquals(n1, a.getNoeudFin());\n        Assert.assertEquals(-1, a.getOrientation());\n      }\n      if (a.getNoeudFin() == n5) {\n        Assert.assertEquals(n1, a.getNoeudIni());\n        Assert.assertEquals(1, a.getOrientation());\n      }\n      // node between nodes 1 and 3\n      if (a.getNoeudIni() == n3) {\n        Assert.assertEquals(n1, a.getNoeudFin());\n        Assert.assertEquals(1, a.getOrientation());\n      }\n      if (a.getNoeudFin() == n3) {\n        Assert.assertEquals(n1, a.getNoeudIni());\n        Assert.assertEquals(-1, a.getOrientation());\n      }\n    }\n    for (Noeud n : carte.getPopNoeuds()) {\n    \tlogger.debug(n);\n      for (Arc a : n.getEntrants()) {\n        logger.debug(\"entrant \" + a);\n      }\n      for (Arc a : n.getSortants()) {\n        logger.debug(\"sortant \" + a);\n      }\n    }\n    for (Arc a : carte.getPopArcs()) {\n      logger.debug(a);\n    }\n  }", "signature": "void testFiltreNoeudsSimples()", "full_signature": "@Test public void testFiltreNoeudsSimples()", "class_method_signature": "CarteTopoTest.testFiltreNoeudsSimples()", "testcase": true, "constructor": false, "invocations": ["filtreNoeudsSimples", "getPopArcs", "getNoeudIni", "assertEquals", "getNoeudFin", "assertEquals", "getOrientation", "getNoeudFin", "assertEquals", "getNoeudIni", "assertEquals", "getOrientation", "getNoeudIni", "assertEquals", "getNoeudFin", "assertEquals", "getOrientation", "getNoeudFin", "assertEquals", "getNoeudIni", "assertEquals", "getOrientation", "getNoeudIni", "assertEquals", "getNoeudFin", "assertEquals", "getOrientation", "getNoeudFin", "assertEquals", "getNoeudIni", "assertEquals", "getOrientation", "getPopNoeuds", "debug", "getEntrants", "debug", "getSortants", "debug", "getPopArcs", "debug"]}, "focal_class": {"identifier": "CarteTopo", "superclass": "extends DataSet", "interfaces": "", "fields": [{"original_string": "protected final static Logger logger = Logger\n      .getLogger(CarteTopo.class.getName());", "modifier": "protected final static", "type": "Logger", "declarator": "logger = Logger\n      .getLogger(CarteTopo.class.getName())", "var_name": "logger"}, {"original_string": "protected EventListenerList listenerList = new EventListenerList();", "modifier": "protected", "type": "EventListenerList", "declarator": "listenerList = new EventListenerList()", "var_name": "listenerList"}, {"original_string": "private boolean buildInfiniteFace = true;", "modifier": "private", "type": "boolean", "declarator": "buildInfiniteFace = true", "var_name": "buildInfiniteFace"}, {"original_string": "public static final int SPAGHETTI = 0;", "modifier": "public static final", "type": "int", "declarator": "SPAGHETTI = 0", "var_name": "SPAGHETTI"}, {"original_string": "public static final int NETWORK = 1;", "modifier": "public static final", "type": "int", "declarator": "NETWORK = 1", "var_name": "NETWORK"}, {"original_string": "public static final int MAP = 2;", "modifier": "public static final", "type": "int", "declarator": "MAP = 2", "var_name": "MAP"}, {"original_string": "private int type = CarteTopo.MAP;", "modifier": "private", "type": "int", "declarator": "type = CarteTopo.MAP", "var_name": "type"}], "methods": [{"identifier": "addActionListener", "parameters": "(ActionListener l)", "modifiers": "public", "return": "void", "signature": "void addActionListener(ActionListener l)", "full_signature": "public void addActionListener(ActionListener l)", "class_method_signature": "CarteTopo.addActionListener(ActionListener l)", "testcase": false, "constructor": false}, {"identifier": "setActionListeners", "parameters": "(EventListenerList listenerList)", "modifiers": "public", "return": "void", "signature": "void setActionListeners(EventListenerList listenerList)", "full_signature": "public void setActionListeners(EventListenerList listenerList)", "class_method_signature": "CarteTopo.setActionListeners(EventListenerList listenerList)", "testcase": false, "constructor": false}, {"identifier": "fireActionPerformed", "parameters": "(ActionEvent event)", "modifiers": "protected", "return": "void", "signature": "void fireActionPerformed(ActionEvent event)", "full_signature": "protected void fireActionPerformed(ActionEvent event)", "class_method_signature": "CarteTopo.fireActionPerformed(ActionEvent event)", "testcase": false, "constructor": false}, {"identifier": "getPopArcs", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "IPopulation<Arc>", "signature": "IPopulation<Arc> getPopArcs()", "full_signature": "@SuppressWarnings(\"unchecked\") public IPopulation<Arc> getPopArcs()", "class_method_signature": "CarteTopo.getPopArcs()", "testcase": false, "constructor": false}, {"identifier": "getPopNoeuds", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "IPopulation<Noeud>", "signature": "IPopulation<Noeud> getPopNoeuds()", "full_signature": "@SuppressWarnings(\"unchecked\") public IPopulation<Noeud> getPopNoeuds()", "class_method_signature": "CarteTopo.getPopNoeuds()", "testcase": false, "constructor": false}, {"identifier": "getPopFaces", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "IPopulation<Face>", "signature": "IPopulation<Face> getPopFaces()", "full_signature": "@SuppressWarnings(\"unchecked\") public IPopulation<Face> getPopFaces()", "class_method_signature": "CarteTopo.getPopFaces()", "testcase": false, "constructor": false}, {"identifier": "getPopGroupes", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "IPopulation<Groupe>", "signature": "IPopulation<Groupe> getPopGroupes()", "full_signature": "@SuppressWarnings(\"unchecked\") public IPopulation<Groupe> getPopGroupes()", "class_method_signature": "CarteTopo.getPopGroupes()", "testcase": false, "constructor": false}, {"identifier": "getListeNoeuds", "parameters": "()", "modifiers": "public", "return": "List<Noeud>", "signature": "List<Noeud> getListeNoeuds()", "full_signature": "public List<Noeud> getListeNoeuds()", "class_method_signature": "CarteTopo.getListeNoeuds()", "testcase": false, "constructor": false}, {"identifier": "getListeArcs", "parameters": "()", "modifiers": "public", "return": "List<Arc>", "signature": "List<Arc> getListeArcs()", "full_signature": "public List<Arc> getListeArcs()", "class_method_signature": "CarteTopo.getListeArcs()", "testcase": false, "constructor": false}, {"identifier": "getListeFaces", "parameters": "()", "modifiers": "public", "return": "List<Face>", "signature": "List<Face> getListeFaces()", "full_signature": "public List<Face> getListeFaces()", "class_method_signature": "CarteTopo.getListeFaces()", "testcase": false, "constructor": false}, {"identifier": "getListeGroupes", "parameters": "()", "modifiers": "public", "return": "List<Groupe>", "signature": "List<Groupe> getListeGroupes()", "full_signature": "public List<Groupe> getListeGroupes()", "class_method_signature": "CarteTopo.getListeGroupes()", "testcase": false, "constructor": false}, {"identifier": "addNoeud", "parameters": "(Noeud noeud)", "modifiers": "public", "return": "void", "signature": "void addNoeud(Noeud noeud)", "full_signature": "public void addNoeud(Noeud noeud)", "class_method_signature": "CarteTopo.addNoeud(Noeud noeud)", "testcase": false, "constructor": false}, {"identifier": "addArc", "parameters": "(Arc arc)", "modifiers": "public", "return": "void", "signature": "void addArc(Arc arc)", "full_signature": "public void addArc(Arc arc)", "class_method_signature": "CarteTopo.addArc(Arc arc)", "testcase": false, "constructor": false}, {"identifier": "addFace", "parameters": "(Face face)", "modifiers": "public", "return": "void", "signature": "void addFace(Face face)", "full_signature": "public void addFace(Face face)", "class_method_signature": "CarteTopo.addFace(Face face)", "testcase": false, "constructor": false}, {"identifier": "addGroupe", "parameters": "(Groupe groupe)", "modifiers": "public", "return": "void", "signature": "void addGroupe(Groupe groupe)", "full_signature": "public void addGroupe(Groupe groupe)", "class_method_signature": "CarteTopo.addGroupe(Groupe groupe)", "testcase": false, "constructor": false}, {"identifier": "isBuildInfiniteFace", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBuildInfiniteFace()", "full_signature": "public boolean isBuildInfiniteFace()", "class_method_signature": "CarteTopo.isBuildInfiniteFace()", "testcase": false, "constructor": false}, {"identifier": "setBuildInfiniteFace", "parameters": "(boolean buildInfiniteFace)", "modifiers": "public", "return": "void", "signature": "void setBuildInfiniteFace(boolean buildInfiniteFace)", "full_signature": "public void setBuildInfiniteFace(boolean buildInfiniteFace)", "class_method_signature": "CarteTopo.setBuildInfiniteFace(boolean buildInfiniteFace)", "testcase": false, "constructor": false}, {"identifier": "CarteTopo", "parameters": "()", "modifiers": "public", "return": "", "signature": " CarteTopo()", "full_signature": "public  CarteTopo()", "class_method_signature": "CarteTopo.CarteTopo()", "testcase": false, "constructor": true}, {"identifier": "CarteTopo", "parameters": "(String nomLogique)", "modifiers": "public", "return": "", "signature": " CarteTopo(String nomLogique)", "full_signature": "public  CarteTopo(String nomLogique)", "class_method_signature": "CarteTopo.CarteTopo(String nomLogique)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getType()", "full_signature": "public int getType()", "class_method_signature": "CarteTopo.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(int i)", "modifiers": "public", "return": "void", "signature": "void setType(int i)", "full_signature": "public void setType(int i)", "class_method_signature": "CarteTopo.setType(int i)", "testcase": false, "constructor": false}, {"identifier": "copie", "parameters": "(String nomLogique)", "modifiers": "public", "return": "CarteTopo", "signature": "CarteTopo copie(String nomLogique)", "full_signature": "public CarteTopo copie(String nomLogique)", "class_method_signature": "CarteTopo.copie(String nomLogique)", "testcase": false, "constructor": false}, {"identifier": "enleveArcs", "parameters": "(Collection<Arc> arcsAEnlever)", "modifiers": "public", "return": "void", "signature": "void enleveArcs(Collection<Arc> arcsAEnlever)", "full_signature": "public void enleveArcs(Collection<Arc> arcsAEnlever)", "class_method_signature": "CarteTopo.enleveArcs(Collection<Arc> arcsAEnlever)", "testcase": false, "constructor": false}, {"identifier": "enleveArc", "parameters": "(Arc arcAEnlever)", "modifiers": "public", "return": "void", "signature": "void enleveArc(Arc arcAEnlever)", "full_signature": "public void enleveArc(Arc arcAEnlever)", "class_method_signature": "CarteTopo.enleveArc(Arc arcAEnlever)", "testcase": false, "constructor": false}, {"identifier": "enleveArcsBoucles", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enleveArcsBoucles()", "full_signature": "public void enleveArcsBoucles()", "class_method_signature": "CarteTopo.enleveArcsBoucles()", "testcase": false, "constructor": false}, {"identifier": "enleveNoeuds", "parameters": "(Collection<Noeud> noeudsAEnlever)", "modifiers": "public", "return": "void", "signature": "void enleveNoeuds(Collection<Noeud> noeudsAEnlever)", "full_signature": "public void enleveNoeuds(Collection<Noeud> noeudsAEnlever)", "class_method_signature": "CarteTopo.enleveNoeuds(Collection<Noeud> noeudsAEnlever)", "testcase": false, "constructor": false}, {"identifier": "enleveFaces", "parameters": "(Collection<Face> facesAEnlever)", "modifiers": "public", "return": "void", "signature": "void enleveFaces(Collection<Face> facesAEnlever)", "full_signature": "public void enleveFaces(Collection<Face> facesAEnlever)", "class_method_signature": "CarteTopo.enleveFaces(Collection<Face> facesAEnlever)", "testcase": false, "constructor": false}, {"identifier": "creeTopologieArcsNoeuds", "parameters": "(double tolerance)", "modifiers": "public", "return": "void", "signature": "void creeTopologieArcsNoeuds(double tolerance)", "full_signature": "public void creeTopologieArcsNoeuds(double tolerance)", "class_method_signature": "CarteTopo.creeTopologieArcsNoeuds(double tolerance)", "testcase": false, "constructor": false}, {"identifier": "creeNoeudsManquants", "parameters": "(double tolerance)", "modifiers": "public", "return": "void", "signature": "void creeNoeudsManquants(double tolerance)", "full_signature": "public void creeNoeudsManquants(double tolerance)", "class_method_signature": "CarteTopo.creeNoeudsManquants(double tolerance)", "testcase": false, "constructor": false}, {"identifier": "filtreNoeudsIsoles", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void filtreNoeudsIsoles()", "full_signature": "public void filtreNoeudsIsoles()", "class_method_signature": "CarteTopo.filtreNoeudsIsoles()", "testcase": false, "constructor": false}, {"identifier": "filtreArcsNull", "parameters": "(double tolerance)", "modifiers": "public", "return": "void", "signature": "void filtreArcsNull(double tolerance)", "full_signature": "public void filtreArcsNull(double tolerance)", "class_method_signature": "CarteTopo.filtreArcsNull(double tolerance)", "testcase": false, "constructor": false}, {"identifier": "filtreDoublons", "parameters": "(double tolerance)", "modifiers": "public", "return": "void", "signature": "void filtreDoublons(double tolerance)", "full_signature": "public void filtreDoublons(double tolerance)", "class_method_signature": "CarteTopo.filtreDoublons(double tolerance)", "testcase": false, "constructor": false}, {"identifier": "filtreNoeudsSimples", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void filtreNoeudsSimples()", "full_signature": "public void filtreNoeudsSimples()", "class_method_signature": "CarteTopo.filtreNoeudsSimples()", "testcase": false, "constructor": false}, {"identifier": "filtreNoeudsSimples", "parameters": "(boolean useWeight, IGeometry filteredArea)", "modifiers": "public", "return": "void", "signature": "void filtreNoeudsSimples(boolean useWeight, IGeometry filteredArea)", "full_signature": "public void filtreNoeudsSimples(boolean useWeight, IGeometry filteredArea)", "class_method_signature": "CarteTopo.filtreNoeudsSimples(boolean useWeight, IGeometry filteredArea)", "testcase": false, "constructor": false}, {"identifier": "filtreNoeudsSimples", "parameters": "(boolean useWeight, IGeometry filteredArea,\n      boolean checkEqualCorrespondants)", "modifiers": "public", "return": "void", "signature": "void filtreNoeudsSimples(boolean useWeight, IGeometry filteredArea,\n      boolean checkEqualCorrespondants)", "full_signature": "public void filtreNoeudsSimples(boolean useWeight, IGeometry filteredArea,\n      boolean checkEqualCorrespondants)", "class_method_signature": "CarteTopo.filtreNoeudsSimples(boolean useWeight, IGeometry filteredArea,\n      boolean checkEqualCorrespondants)", "testcase": false, "constructor": false}, {"identifier": "filtreArcsDoublons", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void filtreArcsDoublons()", "full_signature": "public void filtreArcsDoublons()", "class_method_signature": "CarteTopo.filtreArcsDoublons()", "testcase": false, "constructor": false}, {"identifier": "filtreArcsDoublons", "parameters": "(double toleranceHaussdorf)", "modifiers": "public", "return": "void", "signature": "void filtreArcsDoublons(double toleranceHaussdorf)", "full_signature": "public void filtreArcsDoublons(double toleranceHaussdorf)", "class_method_signature": "CarteTopo.filtreArcsDoublons(double toleranceHaussdorf)", "testcase": false, "constructor": false}, {"identifier": "cleanEdges", "parameters": "(double tolerance)", "modifiers": "public", "return": "void", "signature": "void cleanEdges(double tolerance)", "full_signature": "public void cleanEdges(double tolerance)", "class_method_signature": "CarteTopo.cleanEdges(double tolerance)", "testcase": false, "constructor": false}, {"identifier": "cleanLineString", "parameters": "(ILineString line, double tolerance)", "modifiers": "public static", "return": "void", "signature": "void cleanLineString(ILineString line, double tolerance)", "full_signature": "public static void cleanLineString(ILineString line, double tolerance)", "class_method_signature": "CarteTopo.cleanLineString(ILineString line, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "rendPlanaire", "parameters": "(double tolerance)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void rendPlanaire(double tolerance)", "full_signature": "@SuppressWarnings(\"unchecked\") public void rendPlanaire(double tolerance)", "class_method_signature": "CarteTopo.rendPlanaire(double tolerance)", "testcase": false, "constructor": false}, {"identifier": "fusionNoeuds", "parameters": "(double tolerance)", "modifiers": "public", "return": "void", "signature": "void fusionNoeuds(double tolerance)", "full_signature": "public void fusionNoeuds(double tolerance)", "class_method_signature": "CarteTopo.fusionNoeuds(double tolerance)", "testcase": false, "constructor": false}, {"identifier": "fusionNoeuds", "parameters": "(IPopulation<? extends IFeature> popSurfaces)", "modifiers": "public", "return": "void", "signature": "void fusionNoeuds(IPopulation<? extends IFeature> popSurfaces)", "full_signature": "public void fusionNoeuds(IPopulation<? extends IFeature> popSurfaces)", "class_method_signature": "CarteTopo.fusionNoeuds(IPopulation<? extends IFeature> popSurfaces)", "testcase": false, "constructor": false}, {"identifier": "projete", "parameters": "(CarteTopo ct, double distanceMaxNoeudArc,\n      double distanceMaxProjectionNoeud, boolean impassesSeulement)", "modifiers": "public", "return": "void", "signature": "void projete(CarteTopo ct, double distanceMaxNoeudArc,\n      double distanceMaxProjectionNoeud, boolean impassesSeulement)", "full_signature": "public void projete(CarteTopo ct, double distanceMaxNoeudArc,\n      double distanceMaxProjectionNoeud, boolean impassesSeulement)", "class_method_signature": "CarteTopo.projete(CarteTopo ct, double distanceMaxNoeudArc,\n      double distanceMaxProjectionNoeud, boolean impassesSeulement)", "testcase": false, "constructor": false}, {"identifier": "projeteTousLesPoints", "parameters": "(CarteTopo ct, double distanceMaxNoeudArc,\n      double distanceMaxProjectionNoeud)", "modifiers": "public", "return": "void", "signature": "void projeteTousLesPoints(CarteTopo ct, double distanceMaxNoeudArc,\n      double distanceMaxProjectionNoeud)", "full_signature": "public void projeteTousLesPoints(CarteTopo ct, double distanceMaxNoeudArc,\n      double distanceMaxProjectionNoeud)", "class_method_signature": "CarteTopo.projeteTousLesPoints(CarteTopo ct, double distanceMaxNoeudArc,\n      double distanceMaxProjectionNoeud)", "testcase": false, "constructor": false}, {"identifier": "projete", "parameters": "(List<IPoint> pts, double distanceMaxNoeudArc,\n      double distanceMaxProjectionNoeud)", "modifiers": "public", "return": "void", "signature": "void projete(List<IPoint> pts, double distanceMaxNoeudArc,\n      double distanceMaxProjectionNoeud)", "full_signature": "public void projete(List<IPoint> pts, double distanceMaxNoeudArc,\n      double distanceMaxProjectionNoeud)", "class_method_signature": "CarteTopo.projete(List<IPoint> pts, double distanceMaxNoeudArc,\n      double distanceMaxProjectionNoeud)", "testcase": false, "constructor": false}, {"identifier": "creeTopologieFaces", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void creeTopologieFaces()", "full_signature": "@SuppressWarnings(\"unchecked\") public void creeTopologieFaces()", "class_method_signature": "CarteTopo.creeTopologieFaces()", "testcase": false, "constructor": false}, {"identifier": "construireGeometrieCycleExterieur", "parameters": "(Arc arcInitial,\n      boolean aGauche)", "modifiers": "public static", "return": "List<Cycle>", "signature": "List<Cycle> construireGeometrieCycleExterieur(Arc arcInitial,\n      boolean aGauche)", "full_signature": "public static List<Cycle> construireGeometrieCycleExterieur(Arc arcInitial,\n      boolean aGauche)", "class_method_signature": "CarteTopo.construireGeometrieCycleExterieur(Arc arcInitial,\n      boolean aGauche)", "testcase": false, "constructor": false}, {"identifier": "videTopologieFace", "parameters": "(Face face)", "modifiers": "public", "return": "void", "signature": "void videTopologieFace(Face face)", "full_signature": "public void videTopologieFace(Face face)", "class_method_signature": "CarteTopo.videTopologieFace(Face face)", "testcase": false, "constructor": false}, {"identifier": "ajouteArcsEtNoeudsAuxFaces", "parameters": "(boolean filtrageNoeudsSimples)", "modifiers": "public", "return": "void", "signature": "void ajouteArcsEtNoeudsAuxFaces(boolean filtrageNoeudsSimples)", "full_signature": "public void ajouteArcsEtNoeudsAuxFaces(boolean filtrageNoeudsSimples)", "class_method_signature": "CarteTopo.ajouteArcsEtNoeudsAuxFaces(boolean filtrageNoeudsSimples)", "testcase": false, "constructor": false}, {"identifier": "addMissingEdges", "parameters": "(double threshold)", "modifiers": "public", "return": "void", "signature": "void addMissingEdges(double threshold)", "full_signature": "public void addMissingEdges(double threshold)", "class_method_signature": "CarteTopo.addMissingEdges(double threshold)", "testcase": false, "constructor": false}, {"identifier": "insertOrSelectNode", "parameters": "(IDirectPosition p, double threshold)", "modifiers": "private", "return": "Noeud", "signature": "Noeud insertOrSelectNode(IDirectPosition p, double threshold)", "full_signature": "private Noeud insertOrSelectNode(IDirectPosition p, double threshold)", "class_method_signature": "CarteTopo.insertOrSelectNode(IDirectPosition p, double threshold)", "testcase": false, "constructor": false}, {"identifier": "initialisePoids", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initialisePoids()", "full_signature": "public void initialisePoids()", "class_method_signature": "CarteTopo.initialisePoids()", "testcase": false, "constructor": false}, {"identifier": "importClasseGeo", "parameters": "(String nomClasseGeo)", "modifiers": "public", "return": "void", "signature": "void importClasseGeo(String nomClasseGeo)", "full_signature": "public void importClasseGeo(String nomClasseGeo)", "class_method_signature": "CarteTopo.importClasseGeo(String nomClasseGeo)", "testcase": false, "constructor": false}, {"identifier": "importClasseGeo", "parameters": "(IFeatureCollection<?> listeFeatures)", "modifiers": "public", "return": "void", "signature": "void importClasseGeo(IFeatureCollection<?> listeFeatures)", "full_signature": "public void importClasseGeo(IFeatureCollection<?> listeFeatures)", "class_method_signature": "CarteTopo.importClasseGeo(IFeatureCollection<?> listeFeatures)", "testcase": false, "constructor": false}, {"identifier": "importClasseGeo", "parameters": "(IFeatureCollection<?> listeFeatures,\n      boolean is2d)", "modifiers": "public", "return": "void", "signature": "void importClasseGeo(IFeatureCollection<?> listeFeatures,\n      boolean is2d)", "full_signature": "public void importClasseGeo(IFeatureCollection<?> listeFeatures,\n      boolean is2d)", "class_method_signature": "CarteTopo.importClasseGeo(IFeatureCollection<?> listeFeatures,\n      boolean is2d)", "testcase": false, "constructor": false}, {"identifier": "importAsNodes", "parameters": "(Collection<? extends IFeature> listeFeatures)", "modifiers": "public", "return": "void", "signature": "void importAsNodes(Collection<? extends IFeature> listeFeatures)", "full_signature": "public void importAsNodes(Collection<? extends IFeature> listeFeatures)", "class_method_signature": "CarteTopo.importAsNodes(Collection<? extends IFeature> listeFeatures)", "testcase": false, "constructor": false}, {"identifier": "importAsNodes", "parameters": "(IFeatureCollection<?> listeFeatures)", "modifiers": "public", "return": "void", "signature": "void importAsNodes(IFeatureCollection<?> listeFeatures)", "full_signature": "public void importAsNodes(IFeatureCollection<?> listeFeatures)", "class_method_signature": "CarteTopo.importAsNodes(IFeatureCollection<?> listeFeatures)", "testcase": false, "constructor": false}, {"identifier": "marquerCycle", "parameters": "(Cycle cycle, Face face)", "modifiers": "public", "return": "void", "signature": "void marquerCycle(Cycle cycle, Face face)", "full_signature": "public void marquerCycle(Cycle cycle, Face face)", "class_method_signature": "CarteTopo.marquerCycle(Cycle cycle, Face face)", "testcase": false, "constructor": false}, {"identifier": "marquerCycle", "parameters": "(List<Arc> arcs, List<Boolean> orientations,\n      boolean aGauche, Face face, List<Arc> arcsDejaTraitesAGauche,\n      List<Arc> arcsDejaTraitesADroite)", "modifiers": "public", "return": "void", "signature": "void marquerCycle(List<Arc> arcs, List<Boolean> orientations,\n      boolean aGauche, Face face, List<Arc> arcsDejaTraitesAGauche,\n      List<Arc> arcsDejaTraitesADroite)", "full_signature": "public void marquerCycle(List<Arc> arcs, List<Boolean> orientations,\n      boolean aGauche, Face face, List<Arc> arcsDejaTraitesAGauche,\n      List<Arc> arcsDejaTraitesADroite)", "class_method_signature": "CarteTopo.marquerCycle(List<Arc> arcs, List<Boolean> orientations,\n      boolean aGauche, Face face, List<Arc> arcsDejaTraitesAGauche,\n      List<Arc> arcsDejaTraitesADroite)", "testcase": false, "constructor": false}, {"identifier": "nettoyer", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void nettoyer()", "full_signature": "public void nettoyer()", "class_method_signature": "CarteTopo.nettoyer()", "testcase": false, "constructor": false}, {"identifier": "enleveNoeud", "parameters": "(Noeud n)", "modifiers": "public", "return": "void", "signature": "void enleveNoeud(Noeud n)", "full_signature": "public void enleveNoeud(Noeud n)", "class_method_signature": "CarteTopo.enleveNoeud(Noeud n)", "testcase": false, "constructor": false}, {"identifier": "decoupeArcs", "parameters": "(double distance)", "modifiers": "public", "return": "void", "signature": "void decoupeArcs(double distance)", "full_signature": "public void decoupeArcs(double distance)", "class_method_signature": "CarteTopo.decoupeArcs(double distance)", "testcase": false, "constructor": false}, {"identifier": "splitEdgesWithPoints", "parameters": "(double distance)", "modifiers": "public", "return": "void", "signature": "void splitEdgesWithPoints(double distance)", "full_signature": "public void splitEdgesWithPoints(double distance)", "class_method_signature": "CarteTopo.splitEdgesWithPoints(double distance)", "testcase": false, "constructor": false}, {"identifier": "mergeNode", "parameters": "(Arc a1, Arc a2, Arc a, Noeud n)", "modifiers": "private", "return": "Arc", "signature": "Arc mergeNode(Arc a1, Arc a2, Arc a, Noeud n)", "full_signature": "private Arc mergeNode(Arc a1, Arc a2, Arc a, Noeud n)", "class_method_signature": "CarteTopo.mergeNode(Arc a1, Arc a2, Arc a, Noeud n)", "testcase": false, "constructor": false}, {"identifier": "splitEdge", "parameters": "(Arc a, IDirectPosition p)", "modifiers": "public", "return": "Noeud", "signature": "Noeud splitEdge(Arc a, IDirectPosition p)", "full_signature": "public Noeud splitEdge(Arc a, IDirectPosition p)", "class_method_signature": "CarteTopo.splitEdge(Arc a, IDirectPosition p)", "testcase": false, "constructor": false}, {"identifier": "splitEdge", "parameters": "(Arc a, List<Integer> indices)", "modifiers": "private", "return": "void", "signature": "void splitEdge(Arc a, List<Integer> indices)", "full_signature": "private void splitEdge(Arc a, List<Integer> indices)", "class_method_signature": "CarteTopo.splitEdge(Arc a, List<Integer> indices)", "testcase": false, "constructor": false}, {"identifier": "shortestPath", "parameters": "(IDirectPosition x1, IDirectPosition x2, Arc a1,\n      Arc a2, double max)", "modifiers": "public", "return": "Groupe", "signature": "Groupe shortestPath(IDirectPosition x1, IDirectPosition x2, Arc a1,\n      Arc a2, double max)", "full_signature": "public Groupe shortestPath(IDirectPosition x1, IDirectPosition x2, Arc a1,\n      Arc a2, double max)", "class_method_signature": "CarteTopo.shortestPath(IDirectPosition x1, IDirectPosition x2, Arc a1,\n      Arc a2, double max)", "testcase": false, "constructor": false}], "file": "geoxygene-contrib/src/main/java/fr/ign/cogit/geoxygene/contrib/cartetopo/CarteTopo.java"}, "focal_method": {"identifier": "filtreNoeudsSimples", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void filtreNoeudsSimples() {\n    this.filtreNoeudsSimples(false, null);\n  }", "signature": "void filtreNoeudsSimples()", "full_signature": "public void filtreNoeudsSimples()", "class_method_signature": "CarteTopo.filtreNoeudsSimples()", "testcase": false, "constructor": false, "invocations": ["filtreNoeudsSimples"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}