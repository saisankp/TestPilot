{"test_class": {"identifier": "ScreenTemplateManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "step-controller/step-controller-server/src/test/java/step/plugins/screentemplating/ScreenTemplateManagerTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() {\n\t\t\n\t\tScreenInputAccessor a = new ScreenInputAccessor() {\n\n\t\t\t@Override\n\t\t\tpublic List<ScreenInput> getScreenInputsByScreenId(String screenId) {\n\t\t\t\tif(screenId.equals(\"testScreen1\")) {\n\t\t\t\t\tList<ScreenInput> result = new ArrayList<>();\n\t\t\t\t\tresult.add(new ScreenInput(\"testScreen1\", new Input(\"Param1\")));\n\t\t\t\t\tresult.add(new ScreenInput(\"testScreen1\", new Input(\"Param2\", Arrays.asList(new Option[] {new Option(\"Option1\"), new Option(\"Option2\")}))));\n\t\t\t\t\tresult.add(new ScreenInput(\"testScreen1\", new Input(InputType.TEXT,\"Param3\",\"LabelParam3\", Arrays.asList(new Option[] {new Option(\"Option1\"), new Option(\"Option2\"), new Option(\"Option3\",\"user=='user1'\")}))));\n\t\t\t\t\tScreenInput i = new ScreenInput(\"testScreen1\", new Input(InputType.TEXT,\"Param4\",\"LabelParam4\", Arrays.asList(new Option[] {new Option(\"Option1\"), new Option(\"Option2\")})));\n\t\t\t\t\ti.getInput().setActivationExpression(new Expression(\"user=='user1'\"));\n\t\t\t\t\tresult.add(i);\n\t\t\t\t\ti = new ScreenInput(\"testScreen1\", new Input(\"Param5\", Arrays.asList(new Option[] {new Option(\"Option1\"), new Option(\"Option2\")})));\n\t\t\t\t\ti.getInput().setActivationExpression(new Expression(\"user=='user1'\"));\n\t\t\t\t\tresult.add(i);\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\tthrow new RuntimeException(\"Unknown screen \"+screenId);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void remove(ObjectId id) {\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ScreenInput save(ScreenInput entity) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void save(Collection<? extends ScreenInput> entities) {\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ScreenInput get(ObjectId id) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ScreenInput findByAttributes(Map<String, String> attributes) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Iterator<ScreenInput> getAll() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Spliterator<ScreenInput> findManyByAttributes(Map<String, String> attributes) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ScreenInput findByAttributes(Map<String, String> attributes, String attributesMapKey) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Spliterator<ScreenInput> findManyByAttributes(Map<String, String> attributes,\n\t\t\t\t\tString attributesMapKey) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ScreenInput get(String id) {\n\t\t\t\treturn get(new ObjectId(id));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic List<ScreenInput> getRange(int skip, int limit) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\n\t\tScreenTemplateManager s = new ScreenTemplateManager(a, new Configuration());\n\t\t\n\t\tList<Input> inputs = s.getInputsForScreen(\"testScreen1\", new HashMap<String, Object>(), newPredicate());\n\t\tAssert.assertEquals(3, inputs.size());\n\t\tAssert.assertEquals(inputs.get(0), new Input(InputType.TEXT, \"Param1\", \"Param1\",null));\n\t\t\n\t\tList<Option> options = getDefaultOptionList();\n\t\tAssert.assertEquals(inputs.get(1), new Input(InputType.DROPDOWN, \"Param2\", \"Param2\",options));\n\t\t\n\t\tAssert.assertEquals(inputs.get(2), new Input(InputType.TEXT, \"Param3\", \"LabelParam3\",options));\n\t\t\n\t\tHashMap<String, Object> ctx = new HashMap<String, Object>();\n\t\tctx.put(\"user\", \"user1\");\n\t\tinputs = s.getInputsForScreen(\"testScreen1\", ctx, newPredicate());\n\t\tAssert.assertEquals(5, inputs.size());\n\t\tAssert.assertEquals(inputs.get(2), new Input(InputType.TEXT, \"Param3\", \"LabelParam3\",getOptionListForUser1()));\n\t\tAssert.assertEquals(inputs.get(3), new Input(InputType.TEXT, \"Param4\", \"LabelParam4\",options));\n\t\tAssert.assertEquals(inputs.get(4), new Input(InputType.DROPDOWN, \"Param5\", \"Param5\",options));\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "ScreenTemplateManagerTest.test()", "testcase": true, "constructor": false, "invocations": ["equals", "add", "add", "asList", "add", "asList", "asList", "setActivationExpression", "getInput", "add", "asList", "setActivationExpression", "getInput", "add", "get", "getInputsForScreen", "newPredicate", "assertEquals", "size", "assertEquals", "get", "getDefaultOptionList", "assertEquals", "get", "assertEquals", "get", "put", "getInputsForScreen", "newPredicate", "assertEquals", "size", "assertEquals", "get", "getOptionListForUser1", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "ScreenTemplateManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final List<ScreenTemplateChangeListener> listeners = new ArrayList<>();", "modifier": "protected final", "type": "List<ScreenTemplateChangeListener>", "declarator": "listeners = new ArrayList<>()", "var_name": "listeners"}, {"original_string": "protected ScreenInputAccessor screenInputAccessor;", "modifier": "protected", "type": "ScreenInputAccessor", "declarator": "screenInputAccessor", "var_name": "screenInputAccessor"}, {"original_string": "protected String defaultScriptEngine;", "modifier": "protected", "type": "String", "declarator": "defaultScriptEngine", "var_name": "defaultScriptEngine"}], "methods": [{"identifier": "ScreenTemplateManager", "parameters": "(ScreenInputAccessor screenInputAccessor, Configuration configuration)", "modifiers": "public", "return": "", "signature": " ScreenTemplateManager(ScreenInputAccessor screenInputAccessor, Configuration configuration)", "full_signature": "public  ScreenTemplateManager(ScreenInputAccessor screenInputAccessor, Configuration configuration)", "class_method_signature": "ScreenTemplateManager.ScreenTemplateManager(ScreenInputAccessor screenInputAccessor, Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "getInputsForScreen", "parameters": "(String screenId, Map<String,Object> contextBindings, ObjectPredicate objectPredicate)", "modifiers": "public", "return": "List<Input>", "signature": "List<Input> getInputsForScreen(String screenId, Map<String,Object> contextBindings, ObjectPredicate objectPredicate)", "full_signature": "public List<Input> getInputsForScreen(String screenId, Map<String,Object> contextBindings, ObjectPredicate objectPredicate)", "class_method_signature": "ScreenTemplateManager.getInputsForScreen(String screenId, Map<String,Object> contextBindings, ObjectPredicate objectPredicate)", "testcase": false, "constructor": false}, {"identifier": "moveInput", "parameters": "(String inputId, int offset)", "modifiers": "public", "return": "void", "signature": "void moveInput(String inputId, int offset)", "full_signature": "public void moveInput(String inputId, int offset)", "class_method_signature": "ScreenTemplateManager.moveInput(String inputId, int offset)", "testcase": false, "constructor": false}, {"identifier": "registerListener", "parameters": "(ScreenTemplateChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void registerListener(ScreenTemplateChangeListener listener)", "full_signature": "public void registerListener(ScreenTemplateChangeListener listener)", "class_method_signature": "ScreenTemplateManager.registerListener(ScreenTemplateChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "notifyChange", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void notifyChange()", "full_signature": "public void notifyChange()", "class_method_signature": "ScreenTemplateManager.notifyChange()", "testcase": false, "constructor": false}], "file": "step-controller/step-controller-server/src/main/java/step/plugins/screentemplating/ScreenTemplateManager.java"}, "focal_method": {"identifier": "getInputsForScreen", "parameters": "(String screenId, Map<String,Object> contextBindings, ObjectPredicate objectPredicate)", "modifiers": "public", "return": "List<Input>", "body": "public List<Input> getInputsForScreen(String screenId, Map<String,Object> contextBindings, ObjectPredicate objectPredicate) {\n\t\tStream<ScreenInput> stream = screenInputAccessor.getScreenInputsByScreenId(screenId).stream();\n\t\tif(objectPredicate != null) {\n\t\t\tstream = stream.filter(objectPredicate);\n\t\t}\n\t\tList<Input> screenInputs = stream.map(i->i.getInput()).collect(Collectors.toList());\n\t\t\n\t\tList<Input> result = new ArrayList<>();\n\t\tList<Input> inputs =  Activator.findAllMatches(contextBindings, screenInputs, defaultScriptEngine);\n\t\tfor(Input input:inputs) {\n\t\t\tList<Option> options = input.getOptions();\n\t\t\tList<Option> activeOptions = null;\n\t\t\tif(options!=null) {\n\t\t\t\tactiveOptions = Activator.findAllMatches(contextBindings, options, defaultScriptEngine);\n\t\t\t}\n\t\t\tInput clone = new Input(input.getType(), input.getId(), input.getLabel(), input.getDescription(), activeOptions);\n\t\t\tclone.setValueHtmlTemplate(input.getValueHtmlTemplate());\n\t\t\tclone.setSearchMapperService(input.getSearchMapperService());\n\t\t\tresult.add(clone);\n\t\t}\n\t\t\n\t\treturn result;\n\t}", "signature": "List<Input> getInputsForScreen(String screenId, Map<String,Object> contextBindings, ObjectPredicate objectPredicate)", "full_signature": "public List<Input> getInputsForScreen(String screenId, Map<String,Object> contextBindings, ObjectPredicate objectPredicate)", "class_method_signature": "ScreenTemplateManager.getInputsForScreen(String screenId, Map<String,Object> contextBindings, ObjectPredicate objectPredicate)", "testcase": false, "constructor": false, "invocations": ["stream", "getScreenInputsByScreenId", "filter", "collect", "map", "getInput", "toList", "findAllMatches", "getOptions", "findAllMatches", "getType", "getId", "getLabel", "getDescription", "setValueHtmlTemplate", "getValueHtmlTemplate", "setSearchMapperService", "getSearchMapperService", "add"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}