{"test_class": {"identifier": "EuclideanDistanceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EuclideanDistance distance = new EuclideanDistance();", "modifier": "private", "type": "EuclideanDistance", "declarator": "distance = new EuclideanDistance()", "var_name": "distance"}, {"original_string": "private DenseVector denseVector1 = new DenseVector(new double[] {1, 2, 4, 1, 3});", "modifier": "private", "type": "DenseVector", "declarator": "denseVector1 = new DenseVector(new double[] {1, 2, 4, 1, 3})", "var_name": "denseVector1"}, {"original_string": "private DenseVector denseVector2 = new DenseVector(new double[] {4, 6, 1, 2, 4});", "modifier": "private", "type": "DenseVector", "declarator": "denseVector2 = new DenseVector(new double[] {4, 6, 1, 2, 4})", "var_name": "denseVector2"}, {"original_string": "private SparseVector sparseVector1 = new SparseVector(5, new int[] {1, 3}, new double[] {0.1, 0.4});", "modifier": "private", "type": "SparseVector", "declarator": "sparseVector1 = new SparseVector(5, new int[] {1, 3}, new double[] {0.1, 0.4})", "var_name": "sparseVector1"}, {"original_string": "private SparseVector sparseVector2 = new SparseVector(5, new int[] {2, 3}, new double[] {0.4, 0.1});", "modifier": "private", "type": "SparseVector", "declarator": "sparseVector2 = new SparseVector(5, new int[] {2, 3}, new double[] {0.4, 0.1})", "var_name": "sparseVector2"}], "file": "core/src/test/java/com/alibaba/alink/operator/common/distance/EuclideanDistanceTest.java"}, "test_case": {"identifier": "testUpdateLabel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdateLabel(){\n        DenseVector label = distance.prepareVectorData(Tuple2.of(denseVector1, null)).getLabel();\n        Assert.assertEquals(label.size(), 1);\n        Assert.assertEquals(label.get(0), denseVector1.normL2Square(), 0.001);\n\n        FastDistanceMatrixData matrixData = initMatrixData();\n\n        Assert.assertEquals(matrixData.label.numCols(), 2);\n        Assert.assertEquals(matrixData.label.numRows(), 1);\n        for(int i = 0; i< matrixData.getVectors().numCols(); i++){\n            double[] data = matrixData.getVectors().getColumn(i);\n            Assert.assertEquals(matrixData.label.getData()[i], BLAS.dot(data, data), 0.01);\n        }\n    }", "signature": "void testUpdateLabel()", "full_signature": "@Test public void testUpdateLabel()", "class_method_signature": "EuclideanDistanceTest.testUpdateLabel()", "testcase": true, "constructor": false, "invocations": ["getLabel", "prepareVectorData", "of", "assertEquals", "size", "assertEquals", "get", "normL2Square", "initMatrixData", "assertEquals", "numCols", "assertEquals", "numRows", "numCols", "getVectors", "getColumn", "getVectors", "assertEquals", "getData", "dot"]}, "focal_class": {"identifier": "EuclideanDistance", "superclass": "extends FastDistance", "interfaces": "", "fields": [{"original_string": "private static int LABEL_SIZE = 1;", "modifier": "private static", "type": "int", "declarator": "LABEL_SIZE = 1", "var_name": "LABEL_SIZE"}], "methods": [{"identifier": "calc", "parameters": "(double[] array1, double[] array2)", "modifiers": "@Override public", "return": "double", "signature": "double calc(double[] array1, double[] array2)", "full_signature": "@Override public double calc(double[] array1, double[] array2)", "class_method_signature": "EuclideanDistance.calc(double[] array1, double[] array2)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(Vector vec1, Vector vec2)", "modifiers": "@Override public", "return": "double", "signature": "double calc(Vector vec1, Vector vec2)", "full_signature": "@Override public double calc(Vector vec1, Vector vec2)", "class_method_signature": "EuclideanDistance.calc(Vector vec1, Vector vec2)", "testcase": false, "constructor": false}, {"identifier": "updateLabel", "parameters": "(FastDistanceData data)", "modifiers": "@Override public", "return": "void", "signature": "void updateLabel(FastDistanceData data)", "full_signature": "@Override public void updateLabel(FastDistanceData data)", "class_method_signature": "EuclideanDistance.updateLabel(FastDistanceData data)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceVectorData left, FastDistanceVectorData right)", "modifiers": "@Override", "return": "double", "signature": "double calc(FastDistanceVectorData left, FastDistanceVectorData right)", "full_signature": "@Override double calc(FastDistanceVectorData left, FastDistanceVectorData right)", "class_method_signature": "EuclideanDistance.calc(FastDistanceVectorData left, FastDistanceVectorData right)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceVectorData leftVector, FastDistanceMatrixData rightVectors, double[] res)", "modifiers": "@Override", "return": "void", "signature": "void calc(FastDistanceVectorData leftVector, FastDistanceMatrixData rightVectors, double[] res)", "full_signature": "@Override void calc(FastDistanceVectorData leftVector, FastDistanceMatrixData rightVectors, double[] res)", "class_method_signature": "EuclideanDistance.calc(FastDistanceVectorData leftVector, FastDistanceMatrixData rightVectors, double[] res)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "modifiers": "@Override", "return": "void", "signature": "void calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "full_signature": "@Override void calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "class_method_signature": "EuclideanDistance.calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/distance/EuclideanDistance.java"}, "focal_method": {"identifier": "updateLabel", "parameters": "(FastDistanceData data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void updateLabel(FastDistanceData data) {\n        if (data instanceof FastDistanceVectorData) {\n            FastDistanceVectorData vectorData = (FastDistanceVectorData)data;\n            double d = MatVecOp.dot(vectorData.vector, vectorData.vector);\n            if (vectorData.label == null || vectorData.label.size() != LABEL_SIZE) {\n                vectorData.label = new DenseVector(LABEL_SIZE);\n            }\n            vectorData.label.set(0, d);\n        } else {\n            FastDistanceMatrixData matrix = (FastDistanceMatrixData)data;\n            int vectorSize = matrix.vectors.numRows();\n            int numVectors = matrix.vectors.numCols();\n            if (matrix.label == null || matrix.label.numCols() != numVectors || matrix.label.numRows() != LABEL_SIZE) {\n                matrix.label = new DenseMatrix(LABEL_SIZE, numVectors);\n            }\n            double[] label = matrix.label.getData();\n            double[] matrixData = matrix.vectors.getData();\n            Arrays.fill(label, 0.0);\n            int labelCnt = 0;\n            int cnt = 0;\n            while(cnt < matrixData.length){\n                int endIndex = cnt + vectorSize;\n                while(cnt < endIndex){\n                    label[labelCnt] += matrixData[cnt] * matrixData[cnt];\n                    cnt++;\n                }\n                labelCnt++;\n            }\n        }\n    }", "signature": "void updateLabel(FastDistanceData data)", "full_signature": "@Override public void updateLabel(FastDistanceData data)", "class_method_signature": "EuclideanDistance.updateLabel(FastDistanceData data)", "testcase": false, "constructor": false, "invocations": ["dot", "size", "set", "numRows", "numCols", "numCols", "numRows", "getData", "getData", "fill"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}