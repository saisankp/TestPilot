{"test_class": {"identifier": "AListTest", "superclass": "extends AbstractCollectionTest<AList<String>, AList<Integer>, AList<Iterable<String>>>", "interfaces": "", "fields": [], "file": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListTest.java"}, "test_case": {"identifier": "testCons", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCons() {\n        AList<String> l0 = AList.nil();\n        final AList<String> l1 = l0.cons(\"a\");\n        final AList<String> l2 = l0.cons(\"x\").cons(\"y\");\n\n        assertEquals(1, l1.size());\n        assertEquals(2, l2.size());\n\n        assertEquals(Arrays.<String>asList(), l0.asJavaUtilList());\n        assertEquals(Arrays.asList(\"a\"),      l1.asJavaUtilList());\n        assertEquals(Arrays.asList(\"y\", \"x\"),  l2.asJavaUtilList());\n    }", "signature": "void testCons()", "full_signature": "@Test public void testCons()", "class_method_signature": "AListTest.testCons()", "testcase": true, "constructor": false, "invocations": ["nil", "cons", "cons", "cons", "assertEquals", "size", "assertEquals", "size", "assertEquals", "asList", "asJavaUtilList", "assertEquals", "asList", "asJavaUtilList", "assertEquals", "asList", "asJavaUtilList"]}, "focal_class": {"identifier": "AList", "superclass": "extends AbstractACollection<T, AList<T>>", "interfaces": "implements Serializable", "fields": [{"original_string": "private final int size;", "modifier": "private final", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "public static final AList nil = Nil.INSTANCE;", "modifier": "public static final", "type": "AList", "declarator": "nil = Nil.INSTANCE", "var_name": "nil"}], "methods": [{"identifier": "AList", "parameters": "(int size)", "modifiers": "protected", "return": "", "signature": " AList(int size)", "full_signature": "protected  AList(int size)", "class_method_signature": "AList.AList(int size)", "testcase": false, "constructor": true}, {"identifier": "nil", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "AList<T>", "signature": "AList<T> nil()", "full_signature": "@SuppressWarnings(\"unchecked\") public static AList<T> nil()", "class_method_signature": "AList.nil()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Iterable<T> elements)", "modifiers": "public static", "return": "AList<T>", "signature": "AList<T> create(Iterable<T> elements)", "full_signature": "public static AList<T> create(Iterable<T> elements)", "class_method_signature": "AList.create(Iterable<T> elements)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(List<T> elements)", "modifiers": "public static", "return": "AList<T>", "signature": "AList<T> create(List<T> elements)", "full_signature": "public static AList<T> create(List<T> elements)", "class_method_signature": "AList.create(List<T> elements)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(T... elements)", "modifiers": "@SafeVarargs public static", "return": "AList<T>", "signature": "AList<T> create(T... elements)", "full_signature": "@SafeVarargs public static AList<T> create(T... elements)", "class_method_signature": "AList.create(T... elements)", "testcase": false, "constructor": false}, {"identifier": "asJavaUtilList", "parameters": "()", "modifiers": "public", "return": "java.util.List<T>", "signature": "java.util.List<T> asJavaUtilList()", "full_signature": "public java.util.List<T> asJavaUtilList()", "class_method_signature": "AList.asJavaUtilList()", "testcase": false, "constructor": false}, {"identifier": "asJavaUtilCollection", "parameters": "()", "modifiers": "@Override public", "return": "Collection<T>", "signature": "Collection<T> asJavaUtilCollection()", "full_signature": "@Override public Collection<T> asJavaUtilCollection()", "class_method_signature": "AList.asJavaUtilCollection()", "testcase": false, "constructor": false}, {"identifier": "createInternal", "parameters": "(Collection<T> elements)", "modifiers": "@Override protected", "return": "AList<T>", "signature": "AList<T> createInternal(Collection<T> elements)", "full_signature": "@Override protected AList<T> createInternal(Collection<T> elements)", "class_method_signature": "AList.createInternal(Collection<T> elements)", "testcase": false, "constructor": false}, {"identifier": "equalityForEquals", "parameters": "()", "modifiers": "@Override protected", "return": "AEquality", "signature": "AEquality equalityForEquals()", "full_signature": "@Override protected AEquality equalityForEquals()", "class_method_signature": "AList.equalityForEquals()", "testcase": false, "constructor": false}, {"identifier": "optHead", "parameters": "()", "modifiers": "public abstract", "return": "AOption<T>", "signature": "AOption<T> optHead()", "full_signature": "public abstract AOption<T> optHead()", "class_method_signature": "AList.optHead()", "testcase": false, "constructor": false}, {"identifier": "head", "parameters": "()", "modifiers": "public abstract", "return": "T", "signature": "T head()", "full_signature": "public abstract T head()", "class_method_signature": "AList.head()", "testcase": false, "constructor": false}, {"identifier": "tail", "parameters": "()", "modifiers": "public abstract", "return": "AList<T>", "signature": "AList<T> tail()", "full_signature": "public abstract AList<T> tail()", "class_method_signature": "AList.tail()", "testcase": false, "constructor": false}, {"identifier": "cons", "parameters": "(T el)", "modifiers": "public", "return": "AList<T>", "signature": "AList<T> cons(T el)", "full_signature": "public AList<T> cons(T el)", "class_method_signature": "AList.cons(T el)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "()", "modifiers": "public", "return": "AList<T>", "signature": "AList<T> reverse()", "full_signature": "public AList<T> reverse()", "class_method_signature": "AList.reverse()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "AList.size()", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "()", "modifiers": "@Override public", "return": "AList<T>", "signature": "AList<T> toList()", "full_signature": "@Override public AList<T> toList()", "class_method_signature": "AList.toList()", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(AFunction1<? super T, ? extends X, E> f)", "modifiers": "@Override public", "return": "AList<X>", "signature": "AList<X> map(AFunction1<? super T, ? extends X, E> f)", "full_signature": "@Override public AList<X> map(AFunction1<? super T, ? extends X, E> f)", "class_method_signature": "AList.map(AFunction1<? super T, ? extends X, E> f)", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(AFunction1<? super T, ? extends Iterable<X>, E> f)", "modifiers": "@Override public", "return": "AList<X>", "signature": "AList<X> flatMap(AFunction1<? super T, ? extends Iterable<X>, E> f)", "full_signature": "@Override public AList<X> flatMap(AFunction1<? super T, ? extends Iterable<X>, E> f)", "class_method_signature": "AList.flatMap(AFunction1<? super T, ? extends Iterable<X>, E> f)", "testcase": false, "constructor": false}, {"identifier": "flatten", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "AList<X>", "signature": "AList<X> flatten()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public AList<X> flatten()", "class_method_signature": "AList.flatten()", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(APartialFunction<? super T, ? extends X, E> pf)", "modifiers": "@Override public", "return": "AList<X>", "signature": "AList<X> collect(APartialFunction<? super T, ? extends X, E> pf)", "full_signature": "@Override public AList<X> collect(APartialFunction<? super T, ? extends X, E> pf)", "class_method_signature": "AList.collect(APartialFunction<? super T, ? extends X, E> pf)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<T>", "signature": "Iterator<T> iterator()", "full_signature": "@Override public Iterator<T> iterator()", "class_method_signature": "AList.iterator()", "testcase": false, "constructor": false}], "file": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AList.java"}, "focal_method": {"identifier": "cons", "parameters": "(T el)", "modifiers": "public", "return": "AList<T>", "body": "public AList<T> cons(T el) {\n        return new AHead<>(el, this);\n    }", "signature": "AList<T> cons(T el)", "full_signature": "public AList<T> cons(T el)", "class_method_signature": "AList.cons(T el)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 17586846, "url": "https://github.com/arnohaase/a-foundation", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 30, "size": 2940, "license": "licensed"}}