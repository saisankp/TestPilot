{"test_class": {"identifier": "DiskPersistenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/persistence/disk/DiskPersistenceTest.java"}, "test_case": {"identifier": "testGetBytesUsed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetBytesUsed() {\n        DiskPersistence<Car, Integer> persistence = DiskPersistence.onPrimaryKey(Car.CAR_ID);\n        @SuppressWarnings(\"MismatchedQueryAndUpdateOfCollection\")\n        IndexedCollection<Car> cars = new ConcurrentIndexedCollection<Car>(persistence);\n        cars.addAll(CarFactory.createCollectionOfCars(50));\n        long bytesUsed = persistence.getBytesUsed();\n        Assert.assertTrue(\"Bytes used should be greater than zero: \" + bytesUsed, bytesUsed > 0);\n        Assert.assertTrue(\"Failed to delete temp file:\" + persistence.getFile(), persistence.getFile().delete());\n    }", "signature": "void testGetBytesUsed()", "full_signature": "@Test public void testGetBytesUsed()", "class_method_signature": "DiskPersistenceTest.testGetBytesUsed()", "testcase": true, "constructor": false, "invocations": ["onPrimaryKey", "addAll", "createCollectionOfCars", "getBytesUsed", "assertTrue", "assertTrue", "getFile", "delete", "getFile"]}, "focal_class": {"identifier": "DiskPersistence", "superclass": "", "interfaces": "implements SQLitePersistence<O, A>, Closeable", "fields": [{"original_string": "final SimpleAttribute<O, A> primaryKeyAttribute;", "modifier": "final", "type": "SimpleAttribute<O, A>", "declarator": "primaryKeyAttribute", "var_name": "primaryKeyAttribute"}, {"original_string": "final File file;", "modifier": "final", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "final SQLiteDataSource sqLiteDataSource;", "modifier": "final", "type": "SQLiteDataSource", "declarator": "sqLiteDataSource", "var_name": "sqLiteDataSource"}, {"original_string": "final boolean useReadWriteLock;", "modifier": "final", "type": "boolean", "declarator": "useReadWriteLock", "var_name": "useReadWriteLock"}, {"original_string": "final ReadWriteLock readWriteLock = new ReentrantReadWriteLock(true);", "modifier": "final", "type": "ReadWriteLock", "declarator": "readWriteLock = new ReentrantReadWriteLock(true)", "var_name": "readWriteLock"}, {"original_string": "static final Properties DEFAULT_PROPERTIES = new Properties();", "modifier": "static final", "type": "Properties", "declarator": "DEFAULT_PROPERTIES = new Properties()", "var_name": "DEFAULT_PROPERTIES"}, {"original_string": "volatile Connection persistentConnection;", "modifier": "volatile", "type": "Connection", "declarator": "persistentConnection", "var_name": "persistentConnection"}, {"original_string": "volatile boolean closed = false;", "modifier": "volatile", "type": "boolean", "declarator": "closed = false", "var_name": "closed"}], "methods": [{"identifier": "DiskPersistence", "parameters": "(SimpleAttribute<O, A> primaryKeyAttribute, File file, Properties overrideProperties)", "modifiers": "protected", "return": "", "signature": " DiskPersistence(SimpleAttribute<O, A> primaryKeyAttribute, File file, Properties overrideProperties)", "full_signature": "protected  DiskPersistence(SimpleAttribute<O, A> primaryKeyAttribute, File file, Properties overrideProperties)", "class_method_signature": "DiskPersistence.DiskPersistence(SimpleAttribute<O, A> primaryKeyAttribute, File file, Properties overrideProperties)", "testcase": false, "constructor": true}, {"identifier": "getPrimaryKeyAttribute", "parameters": "()", "modifiers": "@Override public", "return": "SimpleAttribute<O, A>", "signature": "SimpleAttribute<O, A> getPrimaryKeyAttribute()", "full_signature": "@Override public SimpleAttribute<O, A> getPrimaryKeyAttribute()", "class_method_signature": "DiskPersistence.getPrimaryKeyAttribute()", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getFile()", "full_signature": "public File getFile()", "class_method_signature": "DiskPersistence.getFile()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(Index<?> index, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "Connection", "signature": "Connection getConnection(Index<?> index, QueryOptions queryOptions)", "full_signature": "@Override public Connection getConnection(Index<?> index, QueryOptions queryOptions)", "class_method_signature": "DiskPersistence.getConnection(Index<?> index, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getConnectionWithRWLock", "parameters": "(Index<?> index, QueryOptions queryOptions)", "modifiers": "protected", "return": "Connection", "signature": "Connection getConnectionWithRWLock(Index<?> index, QueryOptions queryOptions)", "full_signature": "protected Connection getConnectionWithRWLock(Index<?> index, QueryOptions queryOptions)", "class_method_signature": "DiskPersistence.getConnectionWithRWLock(Index<?> index, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getConnectionWithoutRWLock", "parameters": "(Index<?> index, QueryOptions queryOptions)", "modifiers": "protected", "return": "Connection", "signature": "Connection getConnectionWithoutRWLock(Index<?> index, QueryOptions queryOptions)", "full_signature": "protected Connection getConnectionWithoutRWLock(Index<?> index, QueryOptions queryOptions)", "class_method_signature": "DiskPersistence.getConnectionWithoutRWLock(Index<?> index, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "supportsIndex", "parameters": "(Index<O> index)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsIndex(Index<O> index)", "full_signature": "@Override public boolean supportsIndex(Index<O> index)", "class_method_signature": "DiskPersistence.supportsIndex(Index<O> index)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DiskPersistence.close()", "testcase": false, "constructor": false}, {"identifier": "finalize", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void finalize()", "full_signature": "@Override protected void finalize()", "class_method_signature": "DiskPersistence.finalize()", "testcase": false, "constructor": false}, {"identifier": "getBytesUsed", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getBytesUsed()", "full_signature": "@Override public long getBytesUsed()", "class_method_signature": "DiskPersistence.getBytesUsed()", "testcase": false, "constructor": false}, {"identifier": "compact", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void compact()", "full_signature": "@Override public void compact()", "class_method_signature": "DiskPersistence.compact()", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(long numBytes)", "modifiers": "@Override public", "return": "void", "signature": "void expand(long numBytes)", "full_signature": "@Override public void expand(long numBytes)", "class_method_signature": "DiskPersistence.expand(long numBytes)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "DiskPersistence.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DiskPersistence.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DiskPersistence.toString()", "testcase": false, "constructor": false}, {"identifier": "createObjectStore", "parameters": "()", "modifiers": "@Override public", "return": "ObjectStore<O>", "signature": "ObjectStore<O> createObjectStore()", "full_signature": "@Override public ObjectStore<O> createObjectStore()", "class_method_signature": "DiskPersistence.createObjectStore()", "testcase": false, "constructor": false}, {"identifier": "createIdentityIndex", "parameters": "()", "modifiers": "@Override public", "return": "SQLiteDiskIdentityIndex<A, O>", "signature": "SQLiteDiskIdentityIndex<A, O> createIdentityIndex()", "full_signature": "@Override public SQLiteDiskIdentityIndex<A, O> createIdentityIndex()", "class_method_signature": "DiskPersistence.createIdentityIndex()", "testcase": false, "constructor": false}, {"identifier": "openRequestScopeResources", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void openRequestScopeResources(QueryOptions queryOptions)", "full_signature": "@Override public void openRequestScopeResources(QueryOptions queryOptions)", "class_method_signature": "DiskPersistence.openRequestScopeResources(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "closeRequestScopeResources", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void closeRequestScopeResources(QueryOptions queryOptions)", "full_signature": "@Override public void closeRequestScopeResources(QueryOptions queryOptions)", "class_method_signature": "DiskPersistence.closeRequestScopeResources(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "createTempFile", "parameters": "()", "modifiers": "public static", "return": "File", "signature": "File createTempFile()", "full_signature": "public static File createTempFile()", "class_method_signature": "DiskPersistence.createTempFile()", "testcase": false, "constructor": false}, {"identifier": "onPrimaryKey", "parameters": "(SimpleAttribute<O, A> primaryKeyAttribute)", "modifiers": "public static", "return": "DiskPersistence<O, A>", "signature": "DiskPersistence<O, A> onPrimaryKey(SimpleAttribute<O, A> primaryKeyAttribute)", "full_signature": "public static DiskPersistence<O, A> onPrimaryKey(SimpleAttribute<O, A> primaryKeyAttribute)", "class_method_signature": "DiskPersistence.onPrimaryKey(SimpleAttribute<O, A> primaryKeyAttribute)", "testcase": false, "constructor": false}, {"identifier": "onPrimaryKeyInFile", "parameters": "(SimpleAttribute<O, A> primaryKeyAttribute, File file)", "modifiers": "public static", "return": "DiskPersistence<O, A>", "signature": "DiskPersistence<O, A> onPrimaryKeyInFile(SimpleAttribute<O, A> primaryKeyAttribute, File file)", "full_signature": "public static DiskPersistence<O, A> onPrimaryKeyInFile(SimpleAttribute<O, A> primaryKeyAttribute, File file)", "class_method_signature": "DiskPersistence.onPrimaryKeyInFile(SimpleAttribute<O, A> primaryKeyAttribute, File file)", "testcase": false, "constructor": false}, {"identifier": "onPrimaryKeyInFileWithProperties", "parameters": "(SimpleAttribute<O, A> primaryKeyAttribute, File file, Properties overrideProperties)", "modifiers": "public static", "return": "DiskPersistence<O, A>", "signature": "DiskPersistence<O, A> onPrimaryKeyInFileWithProperties(SimpleAttribute<O, A> primaryKeyAttribute, File file, Properties overrideProperties)", "full_signature": "public static DiskPersistence<O, A> onPrimaryKeyInFileWithProperties(SimpleAttribute<O, A> primaryKeyAttribute, File file, Properties overrideProperties)", "class_method_signature": "DiskPersistence.onPrimaryKeyInFileWithProperties(SimpleAttribute<O, A> primaryKeyAttribute, File file, Properties overrideProperties)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/persistence/disk/DiskPersistence.java"}, "focal_method": {"identifier": "getBytesUsed", "parameters": "()", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long getBytesUsed() {\n        Connection connection = null;\n        try {\n            connection = getConnection(null, noQueryOptions());\n            return DBQueries.getDatabaseSize(connection);\n        }\n        finally {\n            DBUtils.closeQuietly(connection);\n        }\n    }", "signature": "long getBytesUsed()", "full_signature": "@Override public long getBytesUsed()", "class_method_signature": "DiskPersistence.getBytesUsed()", "testcase": false, "constructor": false, "invocations": ["getConnection", "noQueryOptions", "getDatabaseSize", "closeQuietly"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}