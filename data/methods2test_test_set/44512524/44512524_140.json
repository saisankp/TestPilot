{"test_class": {"identifier": "AnalyticsResourceTest", "superclass": "extends ResourceTest", "interfaces": "", "fields": [{"original_string": "private TableMetadataManager tableMetadataManager;", "modifier": "private", "type": "TableMetadataManager", "declarator": "tableMetadataManager", "var_name": "tableMetadataManager"}, {"original_string": "private MockElasticsearchServer elasticsearchServer;", "modifier": "private", "type": "MockElasticsearchServer", "declarator": "elasticsearchServer", "var_name": "elasticsearchServer"}, {"original_string": "private HazelcastInstance hazelcastInstance;", "modifier": "private", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}, {"original_string": "private QueryExecutor queryExecutor;", "modifier": "private", "type": "QueryExecutor", "declarator": "queryExecutor", "var_name": "queryExecutor"}], "file": "real-time/foxtrot/foxtrot-server/src/test/java/com/flipkart/foxtrot/server/resources/AnalyticsResourceTest.java"}, "test_case": {"identifier": "testRunSyncAsync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRunSyncAsync() throws Exception {\n        GroupRequest groupRequest = new GroupRequest();\n        groupRequest.setTable(TestUtils.TEST_TABLE_NAME);\n        groupRequest.setNesting(Arrays.asList(\"os\", \"device\", \"version\"));\n\n        Map<String, Object> expectedResponse = new LinkedHashMap<String, Object>();\n\n        final Map<String, Object> nexusResponse = new LinkedHashMap<String, Object>(){{ put(\"1\", 2); put(\"2\", 2); put(\"3\", 1); }};\n        final Map<String, Object> galaxyResponse = new LinkedHashMap<String, Object>(){{ put(\"2\", 1); put(\"3\", 1); }};\n        expectedResponse.put(\"android\", new LinkedHashMap<String, Object>() {{\n            put(\"nexus\", nexusResponse);\n            put(\"galaxy\", galaxyResponse);\n        }});\n\n        final Map<String, Object> nexusResponse2 = new LinkedHashMap<String, Object>(){{ put(\"2\", 1);}};\n        final Map<String, Object> iPadResponse = new LinkedHashMap<String, Object>(){{ put(\"2\", 2); }};\n        final Map<String, Object> iPhoneResponse = new LinkedHashMap<String, Object>(){{ put(\"1\", 1); }};\n        expectedResponse.put(\"ios\", new LinkedHashMap<String, Object>() {{\n            put(\"nexus\", nexusResponse2);\n            put(\"ipad\", iPadResponse);\n            put(\"iphone\", iPhoneResponse);\n        }});\n\n        WebResource webResource = client().resource(\"/v1/analytics/async\");\n        AsyncDataToken response = webResource.type(MediaType.APPLICATION_JSON_TYPE).post(AsyncDataToken.class, groupRequest);\n        Thread.sleep(2000);\n        GroupResponse actualResponse = GroupResponse.class.cast(CacheUtils.getCacheFor(response.getAction()).get(response.getKey()));\n\n        assertEquals(expectedResponse, actualResponse.getResult());\n    }", "signature": "void testRunSyncAsync()", "full_signature": "@Test public void testRunSyncAsync()", "class_method_signature": "AnalyticsResourceTest.testRunSyncAsync()", "testcase": true, "constructor": false, "invocations": ["setTable", "setNesting", "asList", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "resource", "client", "post", "type", "sleep", "cast", "get", "getCacheFor", "getAction", "getKey", "assertEquals", "getResult"]}, "focal_class": {"identifier": "AnalyticsResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AnalyticsResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AnalyticsResource.class)", "var_name": "logger"}, {"original_string": "private final QueryExecutor queryExecutor;", "modifier": "private final", "type": "QueryExecutor", "declarator": "queryExecutor", "var_name": "queryExecutor"}], "methods": [{"identifier": "AnalyticsResource", "parameters": "(QueryExecutor queryExecutor)", "modifiers": "public", "return": "", "signature": " AnalyticsResource(QueryExecutor queryExecutor)", "full_signature": "public  AnalyticsResource(QueryExecutor queryExecutor)", "class_method_signature": "AnalyticsResource.AnalyticsResource(QueryExecutor queryExecutor)", "testcase": false, "constructor": true}, {"identifier": "runSync", "parameters": "(final ActionRequest request)", "modifiers": "@POST public", "return": "ActionResponse", "signature": "ActionResponse runSync(final ActionRequest request)", "full_signature": "@POST public ActionResponse runSync(final ActionRequest request)", "class_method_signature": "AnalyticsResource.runSync(final ActionRequest request)", "testcase": false, "constructor": false}, {"identifier": "runSyncAsync", "parameters": "(final ActionRequest request)", "modifiers": "@POST @Path(\"/async\") public", "return": "AsyncDataToken", "signature": "AsyncDataToken runSyncAsync(final ActionRequest request)", "full_signature": "@POST @Path(\"/async\") public AsyncDataToken runSyncAsync(final ActionRequest request)", "class_method_signature": "AnalyticsResource.runSyncAsync(final ActionRequest request)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-server/src/main/java/com/flipkart/foxtrot/server/resources/AnalyticsResource.java"}, "focal_method": {"identifier": "runSyncAsync", "parameters": "(final ActionRequest request)", "modifiers": "@POST @Path(\"/async\") public", "return": "AsyncDataToken", "body": "@POST\n    @Path(\"/async\")\n    public AsyncDataToken runSyncAsync(final ActionRequest request) {\n        try {\n            return queryExecutor.executeAsync(request);\n        } catch (QueryStoreException e) {\n            logger.error(String.format(\"Error running async request %s\", request), e);\n            throw new WebApplicationException(\n                    Response.serverError().entity(Collections.singletonMap(\"error\", e.getMessage())).build());\n        }\n    }", "signature": "AsyncDataToken runSyncAsync(final ActionRequest request)", "full_signature": "@POST @Path(\"/async\") public AsyncDataToken runSyncAsync(final ActionRequest request)", "class_method_signature": "AnalyticsResource.runSyncAsync(final ActionRequest request)", "testcase": false, "constructor": false, "invocations": ["executeAsync", "error", "format", "build", "entity", "serverError", "singletonMap", "getMessage"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}