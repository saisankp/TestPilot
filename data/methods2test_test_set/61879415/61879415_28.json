{"test_class": {"identifier": "IdentityEmailGeneratorTest", "superclass": "extends AbstractGeneratorTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate IdmIdentityService identityService;", "modifier": "@Autowired\n\tprivate", "type": "IdmIdentityService", "declarator": "identityService", "var_name": "identityService"}], "file": "Realization/backend/core/core-impl/src/test/java/eu/bcvsolutions/idm/core/generator/identity/IdentityEmailGeneratorTest.java"}, "test_case": {"identifier": "testGreenLineWithoutAt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGreenLineWithoutAt() {\n\t\tString emailSuffix = \"example.tld\";\n\t\tString username = this.getHelper().createName();\n\n\t\tIdmIdentityDto identityDto = new IdmIdentityDto();\n\t\tidentityDto.setFirstName(this.getHelper().createName());\n\t\tidentityDto.setLastName(this.getHelper().createName());\n\t\tidentityDto.setUsername(username);\n\t\t\n\t\tValueGeneratorDto generator = getGenerator();\n\n\t\tthis.createGenerator(getDtoType(), getGeneratorType(),\n\t\t\t\tthis.createConfiguration(generator.getFormDefinition(), ImmutableMap.of(\n\t\t\t\t\t\tIdentityEmailGenerator.EMAIL_SUFFIX, emailSuffix,\n\t\t\t\t\t\tIdentityEmailGenerator.GENERATE_FROM_USERNAME, Boolean.TRUE.toString())), 1, null);\n\n\t\tIdmIdentityDto generatedDto = valueGeneratorManager.generate(identityDto);\n\t\tassertNotNull(generatedDto.getEmail());\n\t\tassertEquals(username + \"@\" + emailSuffix, generatedDto.getEmail());\n\t}", "signature": "void testGreenLineWithoutAt()", "full_signature": "@Test public void testGreenLineWithoutAt()", "class_method_signature": "IdentityEmailGeneratorTest.testGreenLineWithoutAt()", "testcase": true, "constructor": false, "invocations": ["createName", "getHelper", "setFirstName", "createName", "getHelper", "setLastName", "createName", "getHelper", "setUsername", "getGenerator", "createGenerator", "getDtoType", "getGeneratorType", "createConfiguration", "getFormDefinition", "of", "toString", "generate", "assertNotNull", "getEmail", "assertEquals", "getEmail"]}, "focal_class": {"identifier": "IdentityEmailGenerator", "superclass": "extends AbstractIdentityValueGenerator", "interfaces": "", "fields": [{"original_string": "public static final String GENERATOR_NAME = \"core-identity-email-value-generator\";", "modifier": "public static final", "type": "String", "declarator": "GENERATOR_NAME = \"core-identity-email-value-generator\"", "var_name": "GENERATOR_NAME"}, {"original_string": "public static String EMAIL_SUFFIX = \"emailSuffix\";", "modifier": "public static", "type": "String", "declarator": "EMAIL_SUFFIX = \"emailSuffix\"", "var_name": "EMAIL_SUFFIX"}, {"original_string": "public static String GENERATE_FROM_USERNAME = \"generateFromUsername\";", "modifier": "public static", "type": "String", "declarator": "GENERATE_FROM_USERNAME = \"generateFromUsername\"", "var_name": "GENERATE_FROM_USERNAME"}, {"original_string": "private static Character AT_CONSTANT = '@';", "modifier": "private static", "type": "Character", "declarator": "AT_CONSTANT = '@'", "var_name": "AT_CONSTANT"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "IdentityEmailGenerator.getName()", "testcase": false, "constructor": false}, {"identifier": "getPropertyNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getPropertyNames()", "full_signature": "@Override public List<String> getPropertyNames()", "class_method_signature": "IdentityEmailGenerator.getPropertyNames()", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(IdmIdentityDto dto, IdmGenerateValueDto valueGenerator)", "modifiers": "@Override public", "return": "IdmIdentityDto", "signature": "IdmIdentityDto generate(IdmIdentityDto dto, IdmGenerateValueDto valueGenerator)", "full_signature": "@Override public IdmIdentityDto generate(IdmIdentityDto dto, IdmGenerateValueDto valueGenerator)", "class_method_signature": "IdentityEmailGenerator.generate(IdmIdentityDto dto, IdmGenerateValueDto valueGenerator)", "testcase": false, "constructor": false}, {"identifier": "getTransformedSuffix", "parameters": "(IdmGenerateValueDto valueGenerator, String emailSuffix)", "modifiers": "private", "return": "String", "signature": "String getTransformedSuffix(IdmGenerateValueDto valueGenerator, String emailSuffix)", "full_signature": "private String getTransformedSuffix(IdmGenerateValueDto valueGenerator, String emailSuffix)", "class_method_signature": "IdentityEmailGenerator.getTransformedSuffix(IdmGenerateValueDto valueGenerator, String emailSuffix)", "testcase": false, "constructor": false}, {"identifier": "getEmailSuffix", "parameters": "(IdmGenerateValueDto valueGenerator)", "modifiers": "private", "return": "String", "signature": "String getEmailSuffix(IdmGenerateValueDto valueGenerator)", "full_signature": "private String getEmailSuffix(IdmGenerateValueDto valueGenerator)", "class_method_signature": "IdentityEmailGenerator.getEmailSuffix(IdmGenerateValueDto valueGenerator)", "testcase": false, "constructor": false}, {"identifier": "isGenerateFromUsername", "parameters": "(IdmGenerateValueDto valueGenerator)", "modifiers": "private", "return": "boolean", "signature": "boolean isGenerateFromUsername(IdmGenerateValueDto valueGenerator)", "full_signature": "private boolean isGenerateFromUsername(IdmGenerateValueDto valueGenerator)", "class_method_signature": "IdentityEmailGenerator.isGenerateFromUsername(IdmGenerateValueDto valueGenerator)", "testcase": false, "constructor": false}, {"identifier": "getFormAttributes", "parameters": "()", "modifiers": "@Override public", "return": "List<IdmFormAttributeDto>", "signature": "List<IdmFormAttributeDto> getFormAttributes()", "full_signature": "@Override public List<IdmFormAttributeDto> getFormAttributes()", "class_method_signature": "IdentityEmailGenerator.getFormAttributes()", "testcase": false, "constructor": false}], "file": "Realization/backend/core/core-impl/src/main/java/eu/bcvsolutions/idm/core/generator/identity/IdentityEmailGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IdmIdentityDto dto, IdmGenerateValueDto valueGenerator)", "modifiers": "@Override public", "return": "IdmIdentityDto", "body": "@Override\n\tpublic IdmIdentityDto generate(IdmIdentityDto dto, IdmGenerateValueDto valueGenerator) {\n\t\tAssert.notNull(dto, \"DTO is required.\");\n\t\tAssert.notNull(valueGenerator, \"Value generator is required.\");\n\t\t//\t\t\n\t\t// if exists email and configuration doesn't allow regenerate return dto\n\t\tif (!valueGenerator.isRegenerateValue() && StringUtils.isNotEmpty(dto.getEmail())) {\n\t\t\treturn dto;\n\t\t}\n\t\t\n\t\tString transformedUsername = null;\n\t\tif (isGenerateFromUsername(valueGenerator)) {\n\t\t\ttransformedUsername = StringUtils.stripAccents(dto.getUsername());\n\t\t\ttransformedUsername = replaceAllWhiteSpaces(valueGenerator, transformedUsername);\n\t\t} else {\n\t\t\ttransformedUsername = super.generateUsername(dto, valueGenerator);\n\t\t}\n\t\t//\n\t\tif (StringUtils.isEmpty(transformedUsername) ) {\n\t\t\t// transformed username is required\n\t\t\treturn dto;\n\t\t}\n\t\t//\n\t\tif (StringUtils.contains(transformedUsername, AT_CONSTANT)) {\n\t\t\t// username contains @ invalid mail return whole dto\n\t\t\treturn dto;\n\t\t}\n\t\tString emailSuffix = getEmailSuffix(valueGenerator);\n\t\tif (StringUtils.isEmpty(emailSuffix)) {\n\t\t\t// email suffix is empty\n\t\t\treturn dto;\n\t\t}\n\t\t//\n\t\tStringBuilder result = new StringBuilder();\n\t\tresult.append(transformedUsername);\n\t\tresult.append(getTransformedSuffix(valueGenerator, emailSuffix));\n\t\t\n\t\tdto.setEmail(result.toString());\n\t\t//\n\t\treturn dto;\n\t}", "signature": "IdmIdentityDto generate(IdmIdentityDto dto, IdmGenerateValueDto valueGenerator)", "full_signature": "@Override public IdmIdentityDto generate(IdmIdentityDto dto, IdmGenerateValueDto valueGenerator)", "class_method_signature": "IdentityEmailGenerator.generate(IdmIdentityDto dto, IdmGenerateValueDto valueGenerator)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "isRegenerateValue", "isNotEmpty", "getEmail", "isGenerateFromUsername", "stripAccents", "getUsername", "replaceAllWhiteSpaces", "generateUsername", "isEmpty", "contains", "getEmailSuffix", "isEmpty", "append", "append", "getTransformedSuffix", "setEmail", "toString"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}