{"test_class": {"identifier": "AuditParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NS_FACILITY_ATTR_DEF= \"urn:perun:facility:attribute-def:def\";", "modifier": "private static final", "type": "String", "declarator": "NS_FACILITY_ATTR_DEF= \"urn:perun:facility:attribute-def:def\"", "var_name": "NS_FACILITY_ATTR_DEF"}, {"original_string": "private static final String NS_GROUP_RESOURCE_ATTR_DEF = \"urn:perun:group_resource:attribute-def:def\";", "modifier": "private static final", "type": "String", "declarator": "NS_GROUP_RESOURCE_ATTR_DEF = \"urn:perun:group_resource:attribute-def:def\"", "var_name": "NS_GROUP_RESOURCE_ATTR_DEF"}, {"original_string": "private final String textMismatch = \"!@#$%^<<&*()_+<\\\\><:{[}][]{>} sd\";", "modifier": "private final", "type": "String", "declarator": "textMismatch = \"!@#$%^<<&*()_+<\\\\><:{[}][]{>} sd\"", "var_name": "textMismatch"}, {"original_string": "private final String CLASS_NAME = \"AuditMessagesManagerEntry\";", "modifier": "private final", "type": "String", "declarator": "CLASS_NAME = \"AuditMessagesManagerEntry\"", "var_name": "CLASS_NAME"}, {"original_string": "private AuditMessage createdAuditMessage = new AuditMessage();", "modifier": "private", "type": "AuditMessage", "declarator": "createdAuditMessage = new AuditMessage()", "var_name": "createdAuditMessage"}, {"original_string": "private final User user = new User(5, textMismatch,textMismatch, textMismatch, textMismatch, textMismatch, false, false);", "modifier": "private final", "type": "User", "declarator": "user = new User(5, textMismatch,textMismatch, textMismatch, textMismatch, textMismatch, false, false)", "var_name": "user"}, {"original_string": "private final ExtSource extSource = new ExtSource(9, textMismatch, textMismatch);", "modifier": "private final", "type": "ExtSource", "declarator": "extSource = new ExtSource(9, textMismatch, textMismatch)", "var_name": "extSource"}, {"original_string": "private final UserExtSource userExtSource1 = new UserExtSource(12, extSource, textMismatch, user.getId(), 133);", "modifier": "private final", "type": "UserExtSource", "declarator": "userExtSource1 = new UserExtSource(12, extSource, textMismatch, user.getId(), 133)", "var_name": "userExtSource1"}, {"original_string": "private final UserExtSource userExtSource2 = new UserExtSource(15, extSource, textMismatch, -1, 156);", "modifier": "private final", "type": "UserExtSource", "declarator": "userExtSource2 = new UserExtSource(15, extSource, textMismatch, -1, 156)", "var_name": "userExtSource2"}, {"original_string": "private final Vo vo = new Vo(15, textMismatch, textMismatch);", "modifier": "private final", "type": "Vo", "declarator": "vo = new Vo(15, textMismatch, textMismatch)", "var_name": "vo"}, {"original_string": "private final Facility facility = new Facility(13, textMismatch);", "modifier": "private final", "type": "Facility", "declarator": "facility = new Facility(13, textMismatch)", "var_name": "facility"}, {"original_string": "private final Resource resource = new Resource(19, textMismatch, textMismatch, facility.getId(), vo.getId());", "modifier": "private final", "type": "Resource", "declarator": "resource = new Resource(19, textMismatch, textMismatch, facility.getId(), vo.getId())", "var_name": "resource"}, {"original_string": "private final Group group = new Group(35, textMismatch, textMismatch);", "modifier": "private final", "type": "Group", "declarator": "group = new Group(35, textMismatch, textMismatch)", "var_name": "group"}, {"original_string": "private Member member = new Member(13, user.getId(), vo.getId(), Status.VALID);", "modifier": "private", "type": "Member", "declarator": "member = new Member(13, user.getId(), vo.getId(), Status.VALID)", "var_name": "member"}, {"original_string": "private Candidate candidate;", "modifier": "private", "type": "Candidate", "declarator": "candidate", "var_name": "candidate"}, {"original_string": "private final Destination destination = new Destination(32, textMismatch, textMismatch);", "modifier": "private final", "type": "Destination", "declarator": "destination = new Destination(32, textMismatch, textMismatch)", "var_name": "destination"}, {"original_string": "private final Host host = new Host(32, textMismatch);", "modifier": "private final", "type": "Host", "declarator": "host = new Host(32, textMismatch)", "var_name": "host"}, {"original_string": "private final Owner owner = new Owner(39, textMismatch, textMismatch, OwnerType.administrative);", "modifier": "private final", "type": "Owner", "declarator": "owner = new Owner(39, textMismatch, textMismatch, OwnerType.administrative)", "var_name": "owner"}, {"original_string": "private final Owner owner1 = new Owner(12, null, textMismatch, null);", "modifier": "private final", "type": "Owner", "declarator": "owner1 = new Owner(12, null, textMismatch, null)", "var_name": "owner1"}, {"original_string": "private final Owner owner2 = new Owner(23, textMismatch, textMismatch, OwnerType.technical);", "modifier": "private final", "type": "Owner", "declarator": "owner2 = new Owner(23, textMismatch, textMismatch, OwnerType.technical)", "var_name": "owner2"}, {"original_string": "private final Service service = new Service(29, textMismatch, null);", "modifier": "private final", "type": "Service", "declarator": "service = new Service(29, textMismatch, null)", "var_name": "service"}, {"original_string": "private final AttributeDefinition attributeDefinition1 = new AttributeDefinition(getAttributeDefinition1());", "modifier": "private final", "type": "AttributeDefinition", "declarator": "attributeDefinition1 = new AttributeDefinition(getAttributeDefinition1())", "var_name": "attributeDefinition1"}, {"original_string": "private final Attribute attribute1 = new Attribute(attributeDefinition1);", "modifier": "private final", "type": "Attribute", "declarator": "attribute1 = new Attribute(attributeDefinition1)", "var_name": "attribute1"}, {"original_string": "private final AttributeDefinition attributeDefinition2 = new AttributeDefinition(getAttributeDefinition2());", "modifier": "private final", "type": "AttributeDefinition", "declarator": "attributeDefinition2 = new AttributeDefinition(getAttributeDefinition2())", "var_name": "attributeDefinition2"}, {"original_string": "private final Attribute attribute2 = new Attribute(attributeDefinition2);", "modifier": "private final", "type": "Attribute", "declarator": "attribute2 = new Attribute(attributeDefinition2)", "var_name": "attribute2"}, {"original_string": "private final AttributeDefinition attributeDefinition3 = new AttributeDefinition(getAttributeDefinition3());", "modifier": "private final", "type": "AttributeDefinition", "declarator": "attributeDefinition3 = new AttributeDefinition(getAttributeDefinition3())", "var_name": "attributeDefinition3"}, {"original_string": "private final Attribute attribute3 = new Attribute(attributeDefinition3);", "modifier": "private final", "type": "Attribute", "declarator": "attribute3 = new Attribute(attributeDefinition3)", "var_name": "attribute3"}, {"original_string": "private final AttributeDefinition attributeDefinition4 = new AttributeDefinition(getAttributeDefinition4());", "modifier": "private final", "type": "AttributeDefinition", "declarator": "attributeDefinition4 = new AttributeDefinition(getAttributeDefinition4())", "var_name": "attributeDefinition4"}, {"original_string": "private final Attribute attribute4 = new Attribute(attributeDefinition4);", "modifier": "private final", "type": "Attribute", "declarator": "attribute4 = new Attribute(attributeDefinition4)", "var_name": "attribute4"}, {"original_string": "private RichMember richMember;", "modifier": "private", "type": "RichMember", "declarator": "richMember", "var_name": "richMember"}, {"original_string": "private final RichDestination richDestination = new RichDestination(destination, facility, service);", "modifier": "private final", "type": "RichDestination", "declarator": "richDestination = new RichDestination(destination, facility, service)", "var_name": "richDestination"}, {"original_string": "private final RichResource richResource = new RichResource(resource);", "modifier": "private final", "type": "RichResource", "declarator": "richResource = new RichResource(resource)", "var_name": "richResource"}, {"original_string": "private RichUser richUser;", "modifier": "private", "type": "RichUser", "declarator": "richUser", "var_name": "richUser"}, {"original_string": "private RichGroup richGroup;", "modifier": "private", "type": "RichGroup", "declarator": "richGroup", "var_name": "richGroup"}, {"original_string": "private RichFacility richFacility;", "modifier": "private", "type": "RichFacility", "declarator": "richFacility", "var_name": "richFacility"}, {"original_string": "private ResourceTag resourceTag1 = new ResourceTag(5, \"cosi\" , 2);", "modifier": "private", "type": "ResourceTag", "declarator": "resourceTag1 = new ResourceTag(5, \"cosi\" , 2)", "var_name": "resourceTag1"}, {"original_string": "private ResourceTag resourceTag2 = new ResourceTag(8, null, 5);", "modifier": "private", "type": "ResourceTag", "declarator": "resourceTag2 = new ResourceTag(8, null, 5)", "var_name": "resourceTag2"}, {"original_string": "private SecurityTeam securityTeam1 = new SecurityTeam(1, \"jmeno\", \"popis\");", "modifier": "private", "type": "SecurityTeam", "declarator": "securityTeam1 = new SecurityTeam(1, \"jmeno\", \"popis\")", "var_name": "securityTeam1"}, {"original_string": "private SecurityTeam securityTeam2 = new SecurityTeam(2, null, null);", "modifier": "private", "type": "SecurityTeam", "declarator": "securityTeam2 = new SecurityTeam(2, null, null)", "var_name": "securityTeam2"}, {"original_string": "private TaskResult taskResult1 = new TaskResult();", "modifier": "private", "type": "TaskResult", "declarator": "taskResult1 = new TaskResult()", "var_name": "taskResult1"}, {"original_string": "private BanOnResource banOnResource1 = new BanOnResource(3, new Date(), \"neco\" , 10, 12);", "modifier": "private", "type": "BanOnResource", "declarator": "banOnResource1 = new BanOnResource(3, new Date(), \"neco\" , 10, 12)", "var_name": "banOnResource1"}, {"original_string": "private BanOnResource banOnResource2 = new BanOnResource(4, null, null, 10, 12);", "modifier": "private", "type": "BanOnResource", "declarator": "banOnResource2 = new BanOnResource(4, null, null, 10, 12)", "var_name": "banOnResource2"}, {"original_string": "private BanOnFacility banOnFacility1 = new BanOnFacility(5, new Date(), \"neco\", 10, 12);", "modifier": "private", "type": "BanOnFacility", "declarator": "banOnFacility1 = new BanOnFacility(5, new Date(), \"neco\", 10, 12)", "var_name": "banOnFacility1"}, {"original_string": "private BanOnFacility banOnFacility2 = new BanOnFacility(6, null, null, 10, 12);", "modifier": "private", "type": "BanOnFacility", "declarator": "banOnFacility2 = new BanOnFacility(6, null, null, 10, 12)", "var_name": "banOnFacility2"}], "file": "perun-auditparser/src/test/java/cz/metacentrum/perun/auditparser/AuditParserTest.java"}, "test_case": {"identifier": "testParseLogCreatedBeans", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testParseLogCreatedBeans() throws Exception {\n\t\tSystem.out.println(CLASS_NAME + \":testParseLogCreatedBeans()\");\n\t\trichMember.setMembershipType(MembershipType.INDIRECT);\n\t\tString bigLog = user.serializeToString() + extSource.serializeToString() + userExtSource1.serializeToString() +\n\t\t\tvo.serializeToString() + facility.serializeToString() +\n\t\t\tresource.serializeToString() + group.serializeToString() + member.serializeToString() +\n\t\t\tcandidate.serializeToString() + destination.serializeToString() + host.serializeToString() +\n\t\t\towner.serializeToString() + service.serializeToString() + attributeDefinition1.serializeToString() +\n\t\t\tattribute1.serializeToString() + richMember.serializeToString() + richDestination.serializeToString() +\n\t\t\trichResource.serializeToString() + richUser.serializeToString() + richGroup.serializeToString() +\n\t\t\trichFacility.serializeToString() + resourceTag1.serializeToString() +\n\t\t\tsecurityTeam1.serializeToString() + taskResult1.serializeToString() + banOnResource1.serializeToString() +\n\t\t\tbanOnResource2.serializeToString() + banOnFacility1.serializeToString()+ banOnFacility2.serializeToString();\n\n\t\tList<PerunBean> perunBeans = new ArrayList<PerunBean>();\n\t\tperunBeans = AuditParser.parseLog(bigLog);\n\t\tassertEquals(28, perunBeans.size());\n\n\t\tassertTrue(perunBeans.contains(user));\n\t\tassertTrue(perunBeans.contains(attribute1));\n\t\tassertTrue(perunBeans.contains(attributeDefinition1));\n\t\tassertTrue(perunBeans.contains(candidate));\n\t\tassertTrue(perunBeans.contains(destination));\n\t\tassertTrue(perunBeans.contains(extSource));\n\t\tassertTrue(perunBeans.contains(facility));\n\t\tassertTrue(perunBeans.contains(group));\n\t\tassertTrue(perunBeans.contains(host));\n\t\tassertTrue(perunBeans.contains(member));\n\t\tassertTrue(perunBeans.contains(owner));\n\t\tassertTrue(perunBeans.contains(resource));\n\t\tassertTrue(perunBeans.contains(richDestination));\n\t\tassertTrue(perunBeans.contains(richMember));\n\t\tassertTrue(perunBeans.contains(richResource));\n\t\tassertTrue(perunBeans.contains(service));\n\t\tassertTrue(perunBeans.contains(vo));\n\t\tassertTrue(perunBeans.contains(userExtSource1));\n\t\tassertTrue(perunBeans.contains(richUser));\n\t\tassertTrue(perunBeans.contains(richGroup));\n\t\tassertTrue(perunBeans.contains(richFacility));\n\t\tassertTrue(perunBeans.contains(resourceTag1));\n\t\tassertTrue(perunBeans.contains(securityTeam1));\n\t\tassertTrue(perunBeans.contains(taskResult1));\n\t}", "signature": "void testParseLogCreatedBeans()", "full_signature": "@Test public void testParseLogCreatedBeans()", "class_method_signature": "AuditParserTest.testParseLogCreatedBeans()", "testcase": true, "constructor": false, "invocations": ["println", "setMembershipType", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "serializeToString", "parseLog", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "AuditParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger loger = LoggerFactory.getLogger(AuditParser.class);", "modifier": "private final static", "type": "Logger", "declarator": "loger = LoggerFactory.getLogger(AuditParser.class)", "var_name": "loger"}, {"original_string": "static final Pattern perunBeanStartPattern = Pattern.compile(\"\\\\w+:\\\\[\");", "modifier": "static final", "type": "Pattern", "declarator": "perunBeanStartPattern = Pattern.compile(\"\\\\w+:\\\\[\")", "var_name": "perunBeanStartPattern"}, {"original_string": "static final Pattern pointyAndSquareBracket = Pattern.compile(\".\\\\[|.\\\\]|[^\\\\\\\\](\\\\\\\\\\\\\\\\)*(<|>)\");", "modifier": "static final", "type": "Pattern", "declarator": "pointyAndSquareBracket = Pattern.compile(\".\\\\[|.\\\\]|[^\\\\\\\\](\\\\\\\\\\\\\\\\)*(<|>)\")", "var_name": "pointyAndSquareBracket"}], "methods": [{"identifier": "parseLog", "parameters": "(String log)", "modifiers": "public static", "return": "List<PerunBean>", "signature": "List<PerunBean> parseLog(String log)", "full_signature": "public static List<PerunBean> parseLog(String log)", "class_method_signature": "AuditParser.parseLog(String log)", "testcase": false, "constructor": false}, {"identifier": "beansToMap", "parameters": "(String log)", "modifiers": "private static", "return": "List<Pair<String, Map<String, String>>>", "signature": "List<Pair<String, Map<String, String>>> beansToMap(String log)", "full_signature": "private static List<Pair<String, Map<String, String>>> beansToMap(String log)", "class_method_signature": "AuditParser.beansToMap(String log)", "testcase": false, "constructor": false}, {"identifier": "parseOfLog", "parameters": "(String log)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> parseOfLog(String log)", "full_signature": "private static List<String> parseOfLog(String log)", "class_method_signature": "AuditParser.parseOfLog(String log)", "testcase": false, "constructor": false}, {"identifier": "CutStartOfLog", "parameters": "(String log)", "modifiers": "private static", "return": "String", "signature": "String CutStartOfLog(String log)", "full_signature": "private static String CutStartOfLog(String log)", "class_method_signature": "AuditParser.CutStartOfLog(String log)", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "User", "signature": "User createUser(Map<String, String> beanAttr)", "full_signature": "private static User createUser(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createUser(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createAttribute", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Attribute", "signature": "Attribute createAttribute(Map<String, String> beanAttr)", "full_signature": "private static Attribute createAttribute(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createAttribute(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createAttributeDefinition", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "AttributeDefinition", "signature": "AttributeDefinition createAttributeDefinition(Map<String, String> beanAttr)", "full_signature": "private static AttributeDefinition createAttributeDefinition(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createAttributeDefinition(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createCandidate", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Candidate", "signature": "Candidate createCandidate(Map<String, String> beanAttr)", "full_signature": "private static Candidate createCandidate(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createCandidate(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createDestination", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Destination", "signature": "Destination createDestination(Map<String, String> beanAttr)", "full_signature": "private static Destination createDestination(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createDestination(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createExtSource", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "ExtSource", "signature": "ExtSource createExtSource(Map<String, String> beanAttr)", "full_signature": "private static ExtSource createExtSource(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createExtSource(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createFacility", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Facility", "signature": "Facility createFacility(Map<String, String> beanAttr)", "full_signature": "private static Facility createFacility(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createFacility(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createGroup", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Group", "signature": "Group createGroup(Map<String, String> beanAttr)", "full_signature": "private static Group createGroup(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createGroup(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createHost", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Host", "signature": "Host createHost(Map<String, String> beanAttr)", "full_signature": "private static Host createHost(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createHost(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createMember", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Member", "signature": "Member createMember(Map<String, String> beanAttr)", "full_signature": "private static Member createMember(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createMember(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createOwner", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Owner", "signature": "Owner createOwner(Map<String, String> beanAttr)", "full_signature": "private static Owner createOwner(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createOwner(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createResource", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Resource", "signature": "Resource createResource(Map<String, String> beanAttr)", "full_signature": "private static Resource createResource(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createResource(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createService", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Service", "signature": "Service createService(Map<String, String> beanAttr)", "full_signature": "private static Service createService(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createService(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createUserExtSource", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "UserExtSource", "signature": "UserExtSource createUserExtSource(Map<String, String> beanAttr)", "full_signature": "private static UserExtSource createUserExtSource(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createUserExtSource(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createVo", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Vo", "signature": "Vo createVo(Map<String, String> beanAttr)", "full_signature": "private static Vo createVo(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createVo(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createAuthorship", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Authorship", "signature": "Authorship createAuthorship(Map<String, String> beanAttr)", "full_signature": "private static Authorship createAuthorship(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createAuthorship(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createResourceTag", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "ResourceTag", "signature": "ResourceTag createResourceTag(Map<String, String> beanAttr)", "full_signature": "private static ResourceTag createResourceTag(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createResourceTag(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createSecurityTeam", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "SecurityTeam", "signature": "SecurityTeam createSecurityTeam(Map<String, String> beanAttr)", "full_signature": "private static SecurityTeam createSecurityTeam(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createSecurityTeam(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createTaskResult", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "TaskResult", "signature": "TaskResult createTaskResult(Map<String, String> beanAttr)", "full_signature": "private static TaskResult createTaskResult(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createTaskResult(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createBanOnResource", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Ban", "signature": "Ban createBanOnResource(Map<String, String> beanAttr)", "full_signature": "private static Ban createBanOnResource(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createBanOnResource(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createBanOnFacility", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Ban", "signature": "Ban createBanOnFacility(Map<String, String> beanAttr)", "full_signature": "private static Ban createBanOnFacility(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createBanOnFacility(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createRichDestination", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "RichDestination", "signature": "RichDestination createRichDestination(Map<String, String> beanAttr)", "full_signature": "private static RichDestination createRichDestination(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createRichDestination(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createRichMember", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "RichMember", "signature": "RichMember createRichMember(Map<String, String> beanAttr)", "full_signature": "private static RichMember createRichMember(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createRichMember(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createRichUser", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "RichUser", "signature": "RichUser createRichUser(Map<String, String> beanAttr)", "full_signature": "private static RichUser createRichUser(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createRichUser(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createRichGroup", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "RichGroup", "signature": "RichGroup createRichGroup(Map<String, String> beanAttr)", "full_signature": "private static RichGroup createRichGroup(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createRichGroup(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createRichFacility", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "RichFacility", "signature": "RichFacility createRichFacility(Map<String, String> beanAttr)", "full_signature": "private static RichFacility createRichFacility(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createRichFacility(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createRichResource", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "RichResource", "signature": "RichResource createRichResource(Map<String, String> beanAttr)", "full_signature": "private static RichResource createRichResource(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createRichResource(Map<String, String> beanAttr)", "testcase": false, "constructor": false}], "file": "perun-auditparser/src/main/java/cz/metacentrum/perun/auditparser/AuditParser.java"}, "focal_method": {"identifier": "parseLog", "parameters": "(String log)", "modifiers": "public static", "return": "List<PerunBean>", "body": "public static List<PerunBean> parseLog(String log) {\n\t\tList<PerunBean> listPerunBeans = new ArrayList<PerunBean>();\n\t\tPerunBean perunBean = null;\n\t\t//Parse log to List of text Beanss\n\t\tList<Pair<String, Map<String, String>>> listOfTextBeans = new ArrayList<Pair<String, Map<String, String>>>();\n\t\ttry {\n\t\t\tlistOfTextBeans = beansToMap(log);\n\t\t} catch (RuntimeException ex) {\n\t\t\tloger.error(\"Message \" + log + \" was not correctly parsed to Map<NameOfBean,BodyOfBean>\", ex);\n\t\t}\n\t\t//For every bean try to find it and create object from text\n\t\tfor(Pair<String, Map<String, String>> p: listOfTextBeans) {\n\t\t\ttry {\n\t\t\t\tperunBean = null;\n\t\t\t\tif(p.getLeft().equals(\"Attribute\")) perunBean = createAttribute(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"AttributeDefinition\")) perunBean = createAttributeDefinition(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Candidate\")) perunBean = createCandidate(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Destination\")) perunBean = createDestination(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"ExtSource\")) perunBean = createExtSource(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"RichFacility\")) perunBean = createRichFacility(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Facility\")) perunBean = createFacility(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Group\")) perunBean = createGroup(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Host\")) perunBean = createHost(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Member\")) perunBean = createMember(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Owner\")) perunBean = createOwner(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Resource\")) perunBean = createResource(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"RichDestination\")) perunBean = createRichDestination(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"RichMember\")) perunBean = createRichMember(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"RichUser\")) perunBean = createRichUser(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"RichGroup\")) perunBean = createRichGroup(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"RichResource\")) perunBean = createRichResource(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Service\")) perunBean = createService(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"User\")) perunBean = createUser(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"UserExtSource\")) perunBean = createUserExtSource(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Vo\")) perunBean = createVo(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Authorship\")) perunBean = createAuthorship(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"ResourceTag\")) perunBean = createResourceTag(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"SecurityTeam\")) perunBean = createSecurityTeam(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"TaskResult\")) perunBean = createTaskResult(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"BanOnResource\")) perunBean = createBanOnResource(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"BanOnFacility\")) perunBean = createBanOnFacility(p.getRight());\n\t\t\t\telse loger.debug(\"Object of this type can't be parsed cause there is no such object in parser's branches. ObjectName:\" + p.getLeft());\n\t\t\t\tif(perunBean != null) listPerunBeans.add(perunBean);\n\t\t\t} catch (RuntimeException e) {\n\t\t\t\tloger.error(\"Object name \" + p.getLeft() + \" with attributes \" + p.getRight() + \" was not parsed due to fail {} \", e);\n\t\t\t}\n\t\t}\n\t\treturn listPerunBeans;\n\t}", "signature": "List<PerunBean> parseLog(String log)", "full_signature": "public static List<PerunBean> parseLog(String log)", "class_method_signature": "AuditParser.parseLog(String log)", "testcase": false, "constructor": false, "invocations": ["beansToMap", "error", "equals", "getLeft", "createAttribute", "getRight", "equals", "getLeft", "createAttributeDefinition", "getRight", "equals", "getLeft", "createCandidate", "getRight", "equals", "getLeft", "createDestination", "getRight", "equals", "getLeft", "createExtSource", "getRight", "equals", "getLeft", "createRichFacility", "getRight", "equals", "getLeft", "createFacility", "getRight", "equals", "getLeft", "createGroup", "getRight", "equals", "getLeft", "createHost", "getRight", "equals", "getLeft", "createMember", "getRight", "equals", "getLeft", "createOwner", "getRight", "equals", "getLeft", "createResource", "getRight", "equals", "getLeft", "createRichDestination", "getRight", "equals", "getLeft", "createRichMember", "getRight", "equals", "getLeft", "createRichUser", "getRight", "equals", "getLeft", "createRichGroup", "getRight", "equals", "getLeft", "createRichResource", "getRight", "equals", "getLeft", "createService", "getRight", "equals", "getLeft", "createUser", "getRight", "equals", "getLeft", "createUserExtSource", "getRight", "equals", "getLeft", "createVo", "getRight", "equals", "getLeft", "createAuthorship", "getRight", "equals", "getLeft", "createResourceTag", "getRight", "equals", "getLeft", "createSecurityTeam", "getRight", "equals", "getLeft", "createTaskResult", "getRight", "equals", "getLeft", "createBanOnResource", "getRight", "equals", "getLeft", "createBanOnFacility", "getRight", "debug", "getLeft", "add", "error", "getLeft", "getRight"]}, "repository": {"repo_id": 4085998, "url": "https://github.com/CESNET/perun", "stars": 38, "created": "4/20/2012 11:55:38 AM +00:00", "updates": "2020-01-27T09:51:13+00:00", "fork": "False", "license": "licensed"}}