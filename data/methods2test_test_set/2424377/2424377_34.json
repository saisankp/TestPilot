{"test_class": {"identifier": "SuffixTreeTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/carrot2/text/suffixtree/SuffixTreeTest.java"}, "test_case": {"identifier": "testContainsSuffix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testContainsSuffix() {\n    final SuffixTree stree = SuffixTreeBuilder.from(new CharacterSequence(\"cocoa$\")).build();\n\n    assertFalse(stree.containsSuffix(new CharacterSequence(\"c\")));\n    assertFalse(stree.containsSuffix(new CharacterSequence(\"co\")));\n    assertFalse(stree.containsSuffix(new CharacterSequence(\"coc\")));\n    assertFalse(stree.containsSuffix(new CharacterSequence(\"coco\")));\n    assertFalse(stree.containsSuffix(new CharacterSequence(\"cocoa\")));\n\n    assertFalse(stree.containsSuffix(new CharacterSequence(\"cx\")));\n    assertFalse(stree.containsSuffix(new CharacterSequence(\"cox\")));\n    assertFalse(stree.containsSuffix(new CharacterSequence(\"cocx\")));\n    assertFalse(stree.containsSuffix(new CharacterSequence(\"cocox\")));\n    assertFalse(stree.containsSuffix(new CharacterSequence(\"cocoax\")));\n    assertFalse(stree.containsSuffix(new CharacterSequence(\"cocoa$x\")));\n\n    assertFalse(stree.containsSuffix(new CharacterSequence(\"x\")));\n  }", "signature": "void testContainsSuffix()", "full_signature": "@Test public void testContainsSuffix()", "class_method_signature": "SuffixTreeTest.testContainsSuffix()", "testcase": true, "constructor": false, "invocations": ["build", "from", "assertFalse", "containsSuffix", "assertFalse", "containsSuffix", "assertFalse", "containsSuffix", "assertFalse", "containsSuffix", "assertFalse", "containsSuffix", "assertFalse", "containsSuffix", "assertFalse", "containsSuffix", "assertFalse", "containsSuffix", "assertFalse", "containsSuffix", "assertFalse", "containsSuffix", "assertFalse", "containsSuffix", "assertFalse", "containsSuffix"]}, "focal_class": {"identifier": "SuffixTree", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int NO_SUFFIX_LINK = Integer.MIN_VALUE;", "modifier": "private static final", "type": "int", "declarator": "NO_SUFFIX_LINK = Integer.MIN_VALUE", "var_name": "NO_SUFFIX_LINK"}, {"original_string": "private static final int LEAF_STATE = -1;", "modifier": "private static final", "type": "int", "declarator": "LEAF_STATE = -1", "var_name": "LEAF_STATE"}, {"original_string": "public static final int NO_EDGE = -1;", "modifier": "public static final", "type": "int", "declarator": "NO_EDGE = -1", "var_name": "NO_EDGE"}, {"original_string": "private static final int ROOT_STATE = 1;", "modifier": "private static final", "type": "int", "declarator": "ROOT_STATE = 1", "var_name": "ROOT_STATE"}, {"original_string": "final Sequence sequence;", "modifier": "final", "type": "Sequence", "declarator": "sequence", "var_name": "sequence"}, {"original_string": "private final int inputSize;", "modifier": "private final", "type": "int", "declarator": "inputSize", "var_name": "inputSize"}, {"original_string": "private IntArrayList states = new IntArrayList();", "modifier": "private", "type": "IntArrayList", "declarator": "states = new IntArrayList()", "var_name": "states"}, {"original_string": "private final LongIntScatterMap transitions_map = new LongIntScatterMap();", "modifier": "private final", "type": "LongIntScatterMap", "declarator": "transitions_map = new LongIntScatterMap()", "var_name": "transitions_map"}, {"original_string": "private final IntArrayList transitions = new IntArrayList();", "modifier": "private final", "type": "IntArrayList", "declarator": "transitions = new IntArrayList()", "var_name": "transitions"}, {"original_string": "private int s, k, i;", "modifier": "private", "type": "int", "declarator": "s", "var_name": "s"}, {"original_string": "private boolean end_point;", "modifier": "private", "type": "boolean", "declarator": "end_point", "var_name": "end_point"}, {"original_string": "private final int head, root;", "modifier": "private final", "type": "int", "declarator": "head", "var_name": "head"}, {"original_string": "private final int root_transition;", "modifier": "private final", "type": "int", "declarator": "root_transition", "var_name": "root_transition"}, {"original_string": "private final int slots_per_transition;", "modifier": "private final", "type": "int", "declarator": "slots_per_transition", "var_name": "slots_per_transition"}, {"original_string": "private final IStateCallback newStateCallback;", "modifier": "private final", "type": "IStateCallback", "declarator": "newStateCallback", "var_name": "newStateCallback"}], "methods": [{"identifier": "SuffixTree", "parameters": "(\n      Sequence sequence,\n      IStateCallback newStateCallback,\n      final IProgressCallback progressCallback)", "modifiers": "public", "return": "", "signature": " SuffixTree(\n      Sequence sequence,\n      IStateCallback newStateCallback,\n      final IProgressCallback progressCallback)", "full_signature": "public  SuffixTree(\n      Sequence sequence,\n      IStateCallback newStateCallback,\n      final IProgressCallback progressCallback)", "class_method_signature": "SuffixTree.SuffixTree(\n      Sequence sequence,\n      IStateCallback newStateCallback,\n      final IProgressCallback progressCallback)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "()", "modifiers": "private final", "return": "void", "signature": "void update()", "full_signature": "private final void update()", "class_method_signature": "SuffixTree.update()", "testcase": false, "constructor": false}, {"identifier": "testAndSplit", "parameters": "(int p, int ti)", "modifiers": "private final", "return": "int", "signature": "int testAndSplit(int p, int ti)", "full_signature": "private final int testAndSplit(int p, int ti)", "class_method_signature": "SuffixTree.testAndSplit(int p, int ti)", "testcase": false, "constructor": false}, {"identifier": "canonize", "parameters": "(int s, int k, int p)", "modifiers": "private", "return": "void", "signature": "void canonize(int s, int k, int p)", "full_signature": "private void canonize(int s, int k, int p)", "class_method_signature": "SuffixTree.canonize(int s, int k, int p)", "testcase": false, "constructor": false}, {"identifier": "setSuffixLink", "parameters": "(int fromState, int toState)", "modifiers": "private", "return": "void", "signature": "void setSuffixLink(int fromState, int toState)", "full_signature": "private void setSuffixLink(int fromState, int toState)", "class_method_signature": "SuffixTree.setSuffixLink(int fromState, int toState)", "testcase": false, "constructor": false}, {"identifier": "getSuffixLink", "parameters": "(int s)", "modifiers": "private", "return": "int", "signature": "int getSuffixLink(int s)", "full_signature": "private int getSuffixLink(int s)", "class_method_signature": "SuffixTree.getSuffixLink(int s)", "testcase": false, "constructor": false}, {"identifier": "createNewState", "parameters": "(int position)", "modifiers": "private final", "return": "int", "signature": "int createNewState(int position)", "full_signature": "private final int createNewState(int position)", "class_method_signature": "SuffixTree.createNewState(int position)", "testcase": false, "constructor": false}, {"identifier": "createState", "parameters": "()", "modifiers": "private final", "return": "int", "signature": "int createState()", "full_signature": "private final int createState()", "class_method_signature": "SuffixTree.createState()", "testcase": false, "constructor": false}, {"identifier": "createTransition", "parameters": "(int s, int k, int p, int ts)", "modifiers": "private final", "return": "void", "signature": "void createTransition(int s, int k, int p, int ts)", "full_signature": "private final void createTransition(int s, int k, int p, int ts)", "class_method_signature": "SuffixTree.createTransition(int s, int k, int p, int ts)", "testcase": false, "constructor": false}, {"identifier": "reuseTransition", "parameters": "(int transition, int s, int k, int p, int ts)", "modifiers": "private final", "return": "void", "signature": "void reuseTransition(int transition, int s, int k, int p, int ts)", "full_signature": "private final void reuseTransition(int transition, int s, int k, int p, int ts)", "class_method_signature": "SuffixTree.reuseTransition(int transition, int s, int k, int p, int ts)", "testcase": false, "constructor": false}, {"identifier": "addTransition", "parameters": "(int ts, int k, int p)", "modifiers": "private final", "return": "int", "signature": "int addTransition(int ts, int k, int p)", "full_signature": "private final int addTransition(int ts, int k, int p)", "class_method_signature": "SuffixTree.addTransition(int ts, int k, int p)", "testcase": false, "constructor": false}, {"identifier": "findTransition", "parameters": "(int s, int k)", "modifiers": "private final", "return": "int", "signature": "int findTransition(int s, int k)", "full_signature": "private final int findTransition(int s, int k)", "class_method_signature": "SuffixTree.findTransition(int s, int k)", "testcase": false, "constructor": false}, {"identifier": "removeTransition", "parameters": "(int s, int k)", "modifiers": "private", "return": "int", "signature": "int removeTransition(int s, int k)", "full_signature": "private int removeTransition(int s, int k)", "class_method_signature": "SuffixTree.removeTransition(int s, int k)", "testcase": false, "constructor": false}, {"identifier": "asLong", "parameters": "(int i1, int i2)", "modifiers": "private static final", "return": "long", "signature": "long asLong(int i1, int i2)", "full_signature": "private static final long asLong(int i1, int i2)", "class_method_signature": "SuffixTree.asLong(int i1, int i2)", "testcase": false, "constructor": false}, {"identifier": "getTransitionsCount", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getTransitionsCount()", "full_signature": "public final int getTransitionsCount()", "class_method_signature": "SuffixTree.getTransitionsCount()", "testcase": false, "constructor": false}, {"identifier": "getStatesCount", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getStatesCount()", "full_signature": "public final int getStatesCount()", "class_method_signature": "SuffixTree.getStatesCount()", "testcase": false, "constructor": false}, {"identifier": "containsSuffix", "parameters": "(Sequence seq)", "modifiers": "public", "return": "boolean", "signature": "boolean containsSuffix(Sequence seq)", "full_signature": "public boolean containsSuffix(Sequence seq)", "class_method_signature": "SuffixTree.containsSuffix(Sequence seq)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(final IVisitor visitor)", "modifiers": "public final", "return": "void", "signature": "void visit(final IVisitor visitor)", "full_signature": "public final void visit(final IVisitor visitor)", "class_method_signature": "SuffixTree.visit(final IVisitor visitor)", "testcase": false, "constructor": false}, {"identifier": "visitState", "parameters": "(final int state, final IVisitor visitor)", "modifiers": "public final", "return": "void", "signature": "void visitState(final int state, final IVisitor visitor)", "full_signature": "public final void visitState(final int state, final IVisitor visitor)", "class_method_signature": "SuffixTree.visitState(final int state, final IVisitor visitor)", "testcase": false, "constructor": false}, {"identifier": "getRootState", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRootState()", "full_signature": "public int getRootState()", "class_method_signature": "SuffixTree.getRootState()", "testcase": false, "constructor": false}, {"identifier": "isLeaf", "parameters": "(int state)", "modifiers": "public final", "return": "boolean", "signature": "boolean isLeaf(int state)", "full_signature": "public final boolean isLeaf(int state)", "class_method_signature": "SuffixTree.isLeaf(int state)", "testcase": false, "constructor": false}, {"identifier": "firstEdge", "parameters": "(int state)", "modifiers": "public final", "return": "int", "signature": "int firstEdge(int state)", "full_signature": "public final int firstEdge(int state)", "class_method_signature": "SuffixTree.firstEdge(int state)", "testcase": false, "constructor": false}, {"identifier": "nextEdge", "parameters": "(int edge)", "modifiers": "public final", "return": "int", "signature": "int nextEdge(int edge)", "full_signature": "public final int nextEdge(int edge)", "class_method_signature": "SuffixTree.nextEdge(int edge)", "testcase": false, "constructor": false}, {"identifier": "findEdge", "parameters": "(int state, int symbol)", "modifiers": "public final", "return": "int", "signature": "int findEdge(int state, int symbol)", "full_signature": "public final int findEdge(int state, int symbol)", "class_method_signature": "SuffixTree.findEdge(int state, int symbol)", "testcase": false, "constructor": false}, {"identifier": "getToState", "parameters": "(int edge)", "modifiers": "public", "return": "int", "signature": "int getToState(int edge)", "full_signature": "public int getToState(int edge)", "class_method_signature": "SuffixTree.getToState(int edge)", "testcase": false, "constructor": false}, {"identifier": "getStartIndex", "parameters": "(int edge)", "modifiers": "public", "return": "int", "signature": "int getStartIndex(int edge)", "full_signature": "public int getStartIndex(int edge)", "class_method_signature": "SuffixTree.getStartIndex(int edge)", "testcase": false, "constructor": false}, {"identifier": "getEndIndex", "parameters": "(int edge)", "modifiers": "public", "return": "int", "signature": "int getEndIndex(int edge)", "full_signature": "public int getEndIndex(int edge)", "class_method_signature": "SuffixTree.getEndIndex(int edge)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/carrot2/text/suffixtree/SuffixTree.java"}, "focal_method": {"identifier": "containsSuffix", "parameters": "(Sequence seq)", "modifiers": "public", "return": "boolean", "body": "public boolean containsSuffix(Sequence seq) {\n    int state = root;\n    int i = 0;\n    while (true) {\n      // Find an edge leaving the current state marked with symbol sequence[i].\n      final int edge = findEdge(state, seq.objectAt(i));\n      if (edge < 0) {\n        // Different characters on explicit state.\n        return false;\n      }\n\n      // Follow the edge, checking symbols on the way.\n      int j = getStartIndex(edge);\n      final int m = getEndIndex(edge) + 1;\n      for (; i < seq.size() && j < m; j++, i++) {\n        if (seq.objectAt(i) != this.sequence.objectAt(j)) {\n          // Different characters on implicit state.\n          return false;\n        }\n      }\n\n      if (i == seq.size()) {\n        // End of input sequence must be aligned with the tree's leaf state.\n        return j == inputSize;\n      }\n\n      // Follow to the child state.\n      state = getToState(edge);\n    }\n  }", "signature": "boolean containsSuffix(Sequence seq)", "full_signature": "public boolean containsSuffix(Sequence seq)", "class_method_signature": "SuffixTree.containsSuffix(Sequence seq)", "testcase": false, "constructor": false, "invocations": ["findEdge", "objectAt", "getStartIndex", "getEndIndex", "size", "objectAt", "objectAt", "size", "getToState"]}, "repository": {"repo_id": 2424377, "url": "https://github.com/carrot2/carrot2", "stars": 393, "created": "9/20/2011 6:19:05 PM +00:00", "updates": "2020-01-24T20:43:38+00:00", "fork": "False", "license": "licensed"}}