{"test_class": {"identifier": "ContractPositionNameGeneratorTest", "superclass": "extends AbstractGeneratorTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate IdmIdentityContractService identityContractService;", "modifier": "@Autowired\n\tprivate", "type": "IdmIdentityContractService", "declarator": "identityContractService", "var_name": "identityContractService"}], "file": "Realization/backend/example/src/test/java/eu/bcvsolutions/idm/example/generator/contract/ContractPositionNameGeneratorTest.java"}, "test_case": {"identifier": "testGreenLine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGreenLine() {\n\t\tIdmIdentityDto identityDto = getHelper().createIdentity();\n\t\tIdmIdentityContractDto contractDto = new IdmIdentityContractDto();\n\t\tcontractDto.setIdentity(identityDto.getId());\n\n\t\tString prefix = \"prefix\" + System.currentTimeMillis();\n\t\tString suffix = \"suffix\" + System.currentTimeMillis();\n\n\t\tValueGeneratorDto generator = getGenerator();\n\n\t\tthis.createGenerator(getDtoType(), getGeneratorType(),\n\t\t\t\tthis.createConfiguration(generator.getFormDefinition(), ImmutableMap.of(\n\t\t\t\t\t\tContractPositionNameGenerator.POSITION_NAME_PREFIX, prefix,\n\t\t\t\t\t\tContractPositionNameGenerator.POSITION_NAME_SUFFIX, suffix)), 1, null);\n\n\t\tIdmIdentityContractDto generated = valueGeneratorManager.generate(contractDto);\n\t\tassertNotNull(generated);\n\t\tassertEquals(prefix + identityDto.getUsername() + suffix, generated.getPosition());\n\t}", "signature": "void testGreenLine()", "full_signature": "@Test public void testGreenLine()", "class_method_signature": "ContractPositionNameGeneratorTest.testGreenLine()", "testcase": true, "constructor": false, "invocations": ["createIdentity", "getHelper", "setIdentity", "getId", "currentTimeMillis", "currentTimeMillis", "getGenerator", "createGenerator", "getDtoType", "getGeneratorType", "createConfiguration", "getFormDefinition", "of", "generate", "assertNotNull", "assertEquals", "getUsername", "getPosition"]}, "focal_class": {"identifier": "ContractPositionNameGenerator", "superclass": "extends AbstractValueGenerator<IdmIdentityContractDto>", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(ContractPositionNameGenerator.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOG = org.slf4j.LoggerFactory.getLogger(ContractPositionNameGenerator.class)", "var_name": "LOG"}, {"original_string": "public static final String GENERATOR_NAME = \"example-contract-position-name-value-generator\";", "modifier": "public static final", "type": "String", "declarator": "GENERATOR_NAME = \"example-contract-position-name-value-generator\"", "var_name": "GENERATOR_NAME"}, {"original_string": "public static String POSITION_NAME_SUFFIX = \"positionNameSuffix\";", "modifier": "public static", "type": "String", "declarator": "POSITION_NAME_SUFFIX = \"positionNameSuffix\"", "var_name": "POSITION_NAME_SUFFIX"}, {"original_string": "public static String POSITION_NAME_PREFIX = \"positionNamePrefix\";", "modifier": "public static", "type": "String", "declarator": "POSITION_NAME_PREFIX = \"positionNamePrefix\"", "var_name": "POSITION_NAME_PREFIX"}, {"original_string": "@Autowired\n\tprivate IdmIdentityService identityService;", "modifier": "@Autowired\n\tprivate", "type": "IdmIdentityService", "declarator": "identityService", "var_name": "identityService"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ContractPositionNameGenerator.getName()", "testcase": false, "constructor": false}, {"identifier": "getPropertyNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getPropertyNames()", "full_signature": "@Override public List<String> getPropertyNames()", "class_method_signature": "ContractPositionNameGenerator.getPropertyNames()", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(IdmIdentityContractDto dto, IdmGenerateValueDto generatorConfiguration)", "modifiers": "@Override public", "return": "IdmIdentityContractDto", "signature": "IdmIdentityContractDto generate(IdmIdentityContractDto dto, IdmGenerateValueDto generatorConfiguration)", "full_signature": "@Override public IdmIdentityContractDto generate(IdmIdentityContractDto dto, IdmGenerateValueDto generatorConfiguration)", "class_method_signature": "ContractPositionNameGenerator.generate(IdmIdentityContractDto dto, IdmGenerateValueDto generatorConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getSuffix", "parameters": "(IdmGenerateValueDto generatorConfiguration)", "modifiers": "private", "return": "String", "signature": "String getSuffix(IdmGenerateValueDto generatorConfiguration)", "full_signature": "private String getSuffix(IdmGenerateValueDto generatorConfiguration)", "class_method_signature": "ContractPositionNameGenerator.getSuffix(IdmGenerateValueDto generatorConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "(IdmGenerateValueDto generatorConfiguration)", "modifiers": "private", "return": "String", "signature": "String getPrefix(IdmGenerateValueDto generatorConfiguration)", "full_signature": "private String getPrefix(IdmGenerateValueDto generatorConfiguration)", "class_method_signature": "ContractPositionNameGenerator.getPrefix(IdmGenerateValueDto generatorConfiguration)", "testcase": false, "constructor": false}], "file": "Realization/backend/example/src/main/java/eu/bcvsolutions/idm/example/generator/contract/ContractPositionNameGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IdmIdentityContractDto dto, IdmGenerateValueDto generatorConfiguration)", "modifiers": "@Override public", "return": "IdmIdentityContractDto", "body": "@Override\n\tpublic IdmIdentityContractDto generate(IdmIdentityContractDto dto, IdmGenerateValueDto generatorConfiguration) {\n\t\t// if exists email and configuration doesn't allow regenerate return dto\n\t\tif (!generatorConfiguration.isRegenerateValue() && StringUtils.isNotEmpty(dto.getPosition())) {\n\t\t\treturn dto;\n\t\t}\n\n\t\tIdmIdentityDto identityDto = DtoUtils.getEmbedded(dto, IdmIdentityContract_.identity, IdmIdentityDto.class, null);\n\t\tif (identityDto == null) {\n\t\t\t// embedded is not filled\n\t\t\tidentityDto = identityService.get(dto.getIdentity());\n\t\t}\n\n\t\tif (identityDto == null) {\n\t\t\t// this is possible, when create identity contract by rest\n\t\t\tLOG.error(\"New contract hasn't correctly filed identity ID [{}]\", dto.getIdentity());\n\t\t\treturn dto;\n\t\t}\n\n\t\tString username = identityDto.getUsername();\n\t\t\n\t\tStringBuilder result = new StringBuilder();\n\t\t\n\t\tString prefix = this.getPrefix(generatorConfiguration);\n\t\tString suffix = this.getSuffix(generatorConfiguration);\n\t\t\n\t\tif (StringUtils.isNotEmpty(prefix)) {\n\t\t\tresult.append(prefix);\n\t\t}\n\t\tresult.append(username);\n\t\tif (StringUtils.isNotEmpty(suffix)) {\n\t\t\tresult.append(suffix);\n\t\t}\n\n\t\tdto.setPosition(result.toString());\n\t\treturn dto;\n\t}", "signature": "IdmIdentityContractDto generate(IdmIdentityContractDto dto, IdmGenerateValueDto generatorConfiguration)", "full_signature": "@Override public IdmIdentityContractDto generate(IdmIdentityContractDto dto, IdmGenerateValueDto generatorConfiguration)", "class_method_signature": "ContractPositionNameGenerator.generate(IdmIdentityContractDto dto, IdmGenerateValueDto generatorConfiguration)", "testcase": false, "constructor": false, "invocations": ["isRegenerateValue", "isNotEmpty", "getPosition", "getEmbedded", "get", "getIdentity", "error", "getIdentity", "getUsername", "getPrefix", "getSuffix", "isNotEmpty", "append", "append", "isNotEmpty", "append", "setPosition", "toString"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}