{"test_class": {"identifier": "AbstractDynamicConfigurationFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AbstractDynamicConfigurationFactory factory;", "modifier": "private", "type": "AbstractDynamicConfigurationFactory", "declarator": "factory", "var_name": "factory"}], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/config/configcenter/AbstractDynamicConfigurationFactoryTest.java"}, "test_case": {"identifier": "testGetDynamicConfiguration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDynamicConfiguration() {\n        URL url = URL.valueOf(\"nop://127.0.0.1\");\n        assertEquals(factory.getDynamicConfiguration(url), factory.getDynamicConfiguration(url));\n    }", "signature": "void testGetDynamicConfiguration()", "full_signature": "@Test public void testGetDynamicConfiguration()", "class_method_signature": "AbstractDynamicConfigurationFactoryTest.testGetDynamicConfiguration()", "testcase": true, "constructor": false, "invocations": ["valueOf", "assertEquals", "getDynamicConfiguration", "getDynamicConfiguration"]}, "focal_class": {"identifier": "AbstractDynamicConfigurationFactory", "superclass": "", "interfaces": "implements DynamicConfigurationFactory", "fields": [{"original_string": "private volatile Map<String, DynamicConfiguration> dynamicConfigurations = new ConcurrentHashMap<>();", "modifier": "private volatile", "type": "Map<String, DynamicConfiguration>", "declarator": "dynamicConfigurations = new ConcurrentHashMap<>()", "var_name": "dynamicConfigurations"}], "methods": [{"identifier": "getDynamicConfiguration", "parameters": "(URL url)", "modifiers": "@Override public final", "return": "DynamicConfiguration", "signature": "DynamicConfiguration getDynamicConfiguration(URL url)", "full_signature": "@Override public final DynamicConfiguration getDynamicConfiguration(URL url)", "class_method_signature": "AbstractDynamicConfigurationFactory.getDynamicConfiguration(URL url)", "testcase": false, "constructor": false}, {"identifier": "createDynamicConfiguration", "parameters": "(URL url)", "modifiers": "protected abstract", "return": "DynamicConfiguration", "signature": "DynamicConfiguration createDynamicConfiguration(URL url)", "full_signature": "protected abstract DynamicConfiguration createDynamicConfiguration(URL url)", "class_method_signature": "AbstractDynamicConfigurationFactory.createDynamicConfiguration(URL url)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/config/configcenter/AbstractDynamicConfigurationFactory.java"}, "focal_method": {"identifier": "getDynamicConfiguration", "parameters": "(URL url)", "modifiers": "@Override public final", "return": "DynamicConfiguration", "body": "@Override\n    public final DynamicConfiguration getDynamicConfiguration(URL url) {\n        String key = url == null ? DEFAULT_KEY : url.toServiceString();\n        return dynamicConfigurations.computeIfAbsent(key, k -> createDynamicConfiguration(url));\n    }", "signature": "DynamicConfiguration getDynamicConfiguration(URL url)", "full_signature": "@Override public final DynamicConfiguration getDynamicConfiguration(URL url)", "class_method_signature": "AbstractDynamicConfigurationFactory.getDynamicConfiguration(URL url)", "testcase": false, "constructor": false, "invocations": ["toServiceString", "computeIfAbsent", "createDynamicConfiguration"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}