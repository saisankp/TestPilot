{"test_class": {"identifier": "RpcUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/RpcUtilsTest.java"}, "test_case": {"identifier": "invoke_Arguments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGet_$invoke_Arguments() {\n        Object[] args = new Object[]{\"hello\", \"dubbo\", 520};\n        Class<?> demoServiceClass = DemoService.class;\n        String serviceName = demoServiceClass.getName();\n        Invoker invoker = mock(Invoker.class);\n\n        RpcInvocation inv = new RpcInvocation(\"$invoke\", serviceName, \"\",\n                new Class<?>[]{String.class, String[].class, Object[].class},\n                new Object[]{\"method\", new String[]{}, args},\n                null, invoker, null);\n\n        Object[] arguments = RpcUtils.getArguments(inv);\n        for (int i = 0; i < args.length; i++) {\n            Assertions.assertNotNull(arguments[i]);\n            Assertions.assertEquals(args[i].getClass().getName(), arguments[i].getClass().getName());\n            Assertions.assertEquals(args[i], arguments[i]);\n        }\n    }", "signature": "void invoke_Arguments()", "full_signature": "@Test public void invoke_Arguments()", "class_method_signature": "RpcUtilsTest.invoke_Arguments()", "testcase": true, "constructor": false, "invocations": ["getName", "mock", "getArguments", "assertNotNull", "assertEquals", "getName", "getClass", "getName", "getClass", "assertEquals"]}, "focal_class": {"identifier": "RpcUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RpcUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RpcUtils.class)", "var_name": "logger"}, {"original_string": "private static final AtomicLong INVOKE_ID = new AtomicLong(0);", "modifier": "private static final", "type": "AtomicLong", "declarator": "INVOKE_ID = new AtomicLong(0)", "var_name": "INVOKE_ID"}], "methods": [{"identifier": "getReturnType", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getReturnType(Invocation invocation)", "full_signature": "public static Class<?> getReturnType(Invocation invocation)", "class_method_signature": "RpcUtils.getReturnType(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getReturnTypes", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Type[]", "signature": "Type[] getReturnTypes(Invocation invocation)", "full_signature": "public static Type[] getReturnTypes(Invocation invocation)", "class_method_signature": "RpcUtils.getReturnTypes(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getInvocationId", "parameters": "(Invocation inv)", "modifiers": "public static", "return": "Long", "signature": "Long getInvocationId(Invocation inv)", "full_signature": "public static Long getInvocationId(Invocation inv)", "class_method_signature": "RpcUtils.getInvocationId(Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "attachInvocationIdIfAsync", "parameters": "(URL url, Invocation inv)", "modifiers": "public static", "return": "void", "signature": "void attachInvocationIdIfAsync(URL url, Invocation inv)", "full_signature": "public static void attachInvocationIdIfAsync(URL url, Invocation inv)", "class_method_signature": "RpcUtils.attachInvocationIdIfAsync(URL url, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isAttachInvocationId", "parameters": "(URL url, Invocation invocation)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAttachInvocationId(URL url, Invocation invocation)", "full_signature": "private static boolean isAttachInvocationId(URL url, Invocation invocation)", "class_method_signature": "RpcUtils.isAttachInvocationId(URL url, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getMethodName", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "String", "signature": "String getMethodName(Invocation invocation)", "full_signature": "public static String getMethodName(Invocation invocation)", "class_method_signature": "RpcUtils.getMethodName(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getArguments", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] getArguments(Invocation invocation)", "full_signature": "public static Object[] getArguments(Invocation invocation)", "class_method_signature": "RpcUtils.getArguments(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getParameterTypes", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getParameterTypes(Invocation invocation)", "full_signature": "public static Class<?>[] getParameterTypes(Invocation invocation)", "class_method_signature": "RpcUtils.getParameterTypes(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "isAsync", "parameters": "(URL url, Invocation inv)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAsync(URL url, Invocation inv)", "full_signature": "public static boolean isAsync(URL url, Invocation inv)", "class_method_signature": "RpcUtils.isAsync(URL url, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isReturnTypeFuture", "parameters": "(Invocation inv)", "modifiers": "public static", "return": "boolean", "signature": "boolean isReturnTypeFuture(Invocation inv)", "full_signature": "public static boolean isReturnTypeFuture(Invocation inv)", "class_method_signature": "RpcUtils.isReturnTypeFuture(Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isGenericAsync", "parameters": "(Invocation inv)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGenericAsync(Invocation inv)", "full_signature": "public static boolean isGenericAsync(Invocation inv)", "class_method_signature": "RpcUtils.isGenericAsync(Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isGenericCall", "parameters": "(String parameterTypesDesc, String method)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGenericCall(String parameterTypesDesc, String method)", "full_signature": "public static boolean isGenericCall(String parameterTypesDesc, String method)", "class_method_signature": "RpcUtils.isGenericCall(String parameterTypesDesc, String method)", "testcase": false, "constructor": false}, {"identifier": "isEcho", "parameters": "(String parameterTypesDesc, String method)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEcho(String parameterTypesDesc, String method)", "full_signature": "public static boolean isEcho(String parameterTypesDesc, String method)", "class_method_signature": "RpcUtils.isEcho(String parameterTypesDesc, String method)", "testcase": false, "constructor": false}, {"identifier": "getInvokeMode", "parameters": "(URL url, Invocation inv)", "modifiers": "public static", "return": "InvokeMode", "signature": "InvokeMode getInvokeMode(URL url, Invocation inv)", "full_signature": "public static InvokeMode getInvokeMode(URL url, Invocation inv)", "class_method_signature": "RpcUtils.getInvokeMode(URL url, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isOneway", "parameters": "(URL url, Invocation inv)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOneway(URL url, Invocation inv)", "full_signature": "public static boolean isOneway(URL url, Invocation inv)", "class_method_signature": "RpcUtils.isOneway(URL url, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "getMethodByService", "parameters": "(Invocation invocation, String service)", "modifiers": "private static", "return": "Method", "signature": "Method getMethodByService(Invocation invocation, String service)", "full_signature": "private static Method getMethodByService(Invocation invocation, String service)", "class_method_signature": "RpcUtils.getMethodByService(Invocation invocation, String service)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "(Invocation invocation, long defaultTimeout)", "modifiers": "public static", "return": "long", "signature": "long getTimeout(Invocation invocation, long defaultTimeout)", "full_signature": "public static long getTimeout(Invocation invocation, long defaultTimeout)", "class_method_signature": "RpcUtils.getTimeout(Invocation invocation, long defaultTimeout)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "(URL url, String methodName, RpcContext context, long defaultTimeout)", "modifiers": "public static", "return": "long", "signature": "long getTimeout(URL url, String methodName, RpcContext context, long defaultTimeout)", "full_signature": "public static long getTimeout(URL url, String methodName, RpcContext context, long defaultTimeout)", "class_method_signature": "RpcUtils.getTimeout(URL url, String methodName, RpcContext context, long defaultTimeout)", "testcase": false, "constructor": false}, {"identifier": "convertToNumber", "parameters": "(Object obj, long defaultTimeout)", "modifiers": "private static", "return": "long", "signature": "long convertToNumber(Object obj, long defaultTimeout)", "full_signature": "private static long convertToNumber(Object obj, long defaultTimeout)", "class_method_signature": "RpcUtils.convertToNumber(Object obj, long defaultTimeout)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java"}, "focal_method": {"identifier": "getArguments", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Object[]", "body": "public static Object[] getArguments(Invocation invocation) {\n        if ($INVOKE.equals(invocation.getMethodName())\n                && invocation.getArguments() != null\n                && invocation.getArguments().length > 2\n                && invocation.getArguments()[2] instanceof Object[]) {\n            return (Object[]) invocation.getArguments()[2];\n        }\n        return invocation.getArguments();\n    }", "signature": "Object[] getArguments(Invocation invocation)", "full_signature": "public static Object[] getArguments(Invocation invocation)", "class_method_signature": "RpcUtils.getArguments(Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["equals", "getMethodName", "getArguments", "getArguments", "getArguments", "getArguments", "getArguments"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}