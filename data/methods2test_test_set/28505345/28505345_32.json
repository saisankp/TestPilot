{"test_class": {"identifier": "HeadersTest", "superclass": "", "interfaces": "", "fields": [], "file": "jus-java/src/test/java/io/apptik/comm/jus/http/HeadersTest.java"}, "test_case": {"identifier": "addParsing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void addParsing() {\n    Headers headers = new Headers.Builder()\n        .add(\"foo: bar\")\n        .add(\" foo: baz\") // Name leading whitespace is trimmed.\n        .add(\"foo : bak\") // Name trailing whitespace is trimmed.\n        .add(\"ping:  pong  \") // Value whitespace is trimmed.\n        .add(\"kit:kat\") // Space after colon is not required.\n        .build();\n    assertEquals(Arrays.asList(\"bar\", \"baz\", \"bak\"), headers.values(\"foo\"));\n    assertEquals(Arrays.asList(\"pong\"), headers.values(\"ping\"));\n    assertEquals(Arrays.asList(\"kat\"), headers.values(\"kit\"));\n  }", "signature": "void addParsing()", "full_signature": "@Test public void addParsing()", "class_method_signature": "HeadersTest.addParsing()", "testcase": true, "constructor": false, "invocations": ["build", "add", "add", "add", "add", "add", "assertEquals", "asList", "values", "assertEquals", "asList", "values", "assertEquals", "asList", "values"]}, "focal_class": {"identifier": "Headers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String[] namesAndValues;", "modifier": "private final", "type": "String[]", "declarator": "namesAndValues", "var_name": "namesAndValues"}], "methods": [{"identifier": "Headers", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " Headers(Builder builder)", "full_signature": "private  Headers(Builder builder)", "class_method_signature": "Headers.Headers(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "Headers", "parameters": "(String[] namesAndValues)", "modifiers": "private", "return": "", "signature": " Headers(String[] namesAndValues)", "full_signature": "private  Headers(String[] namesAndValues)", "class_method_signature": "Headers.Headers(String[] namesAndValues)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String get(String name)", "full_signature": "public String get(String name)", "class_method_signature": "Headers.get(String name)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(String name)", "modifiers": "public", "return": "Date", "signature": "Date getDate(String name)", "full_signature": "public Date getDate(String name)", "class_method_signature": "Headers.getDate(String name)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Headers.size()", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "(int index)", "modifiers": "public", "return": "String", "signature": "String name(int index)", "full_signature": "public String name(int index)", "class_method_signature": "Headers.name(int index)", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "(int index)", "modifiers": "public", "return": "String", "signature": "String value(int index)", "full_signature": "public String value(int index)", "class_method_signature": "Headers.value(int index)", "testcase": false, "constructor": false}, {"identifier": "names", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> names()", "full_signature": "public Set<String> names()", "class_method_signature": "Headers.names()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "(String name)", "modifiers": "public", "return": "List<String>", "signature": "List<String> values(String name)", "full_signature": "public List<String> values(String name)", "class_method_signature": "Headers.values(String name)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "public", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "public Builder newBuilder()", "class_method_signature": "Headers.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "Headers.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Headers.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Headers.toString()", "testcase": false, "constructor": false}, {"identifier": "toMultimap", "parameters": "()", "modifiers": "public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> toMultimap()", "full_signature": "public Map<String, List<String>> toMultimap()", "class_method_signature": "Headers.toMultimap()", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> toMap()", "full_signature": "public Map<String, String> toMap()", "class_method_signature": "Headers.toMap()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String[] namesAndValues, String name)", "modifiers": "private static", "return": "String", "signature": "String get(String[] namesAndValues, String name)", "full_signature": "private static String get(String[] namesAndValues, String name)", "class_method_signature": "Headers.get(String[] namesAndValues, String name)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(String... namesAndValues)", "modifiers": "public static", "return": "Headers", "signature": "Headers of(String... namesAndValues)", "full_signature": "public static Headers of(String... namesAndValues)", "class_method_signature": "Headers.of(String... namesAndValues)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Map<String, String> headers)", "modifiers": "public static", "return": "Headers", "signature": "Headers of(Map<String, String> headers)", "full_signature": "public static Headers of(Map<String, String> headers)", "class_method_signature": "Headers.of(Map<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "ofMMap", "parameters": "(Map<String, List<String>> headers)", "modifiers": "public static", "return": "Headers", "signature": "Headers ofMMap(Map<String, List<String>> headers)", "full_signature": "public static Headers ofMMap(Map<String, List<String>> headers)", "class_method_signature": "Headers.ofMMap(Map<String, List<String>> headers)", "testcase": false, "constructor": false}], "file": "jus-java/src/main/java/io/apptik/comm/jus/http/Headers.java"}, "focal_method": {"identifier": "values", "parameters": "(String name)", "modifiers": "public", "return": "List<String>", "body": "public List<String> values(String name) {\n        List<String> result = null;\n        for (int i = 0, size = size(); i < size; i++) {\n            if (name.equalsIgnoreCase(name(i))) {\n                if (result == null) result = new ArrayList<>(2);\n                result.add(value(i));\n            }\n        }\n        return result != null\n                ? Collections.unmodifiableList(result)\n                : Collections.<String>emptyList();\n    }", "signature": "List<String> values(String name)", "full_signature": "public List<String> values(String name)", "class_method_signature": "Headers.values(String name)", "testcase": false, "constructor": false, "invocations": ["size", "equalsIgnoreCase", "name", "add", "value", "unmodifiableList", "emptyList"]}, "repository": {"repo_id": 28505345, "url": "https://github.com/apptik/jus", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 56, "size": 2057, "license": "licensed"}}