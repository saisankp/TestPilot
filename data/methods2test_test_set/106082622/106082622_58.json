{"test_class": {"identifier": "SecretManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/encryption/SecretManagerTest.java"}, "test_case": {"identifier": "doTestWithNullInput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doTestWithNullInput() {\n        final SecretManager secretManager = new SecretManager(\"key\");\n\n\n        expectedException.expect(NullPointerException.class);\n        final String encrypted = secretManager.encrypt(null);\n    }", "signature": "void doTestWithNullInput()", "full_signature": "@Test public void doTestWithNullInput()", "class_method_signature": "SecretManagerTest.doTestWithNullInput()", "testcase": true, "constructor": false, "invocations": ["expect", "encrypt"]}, "focal_class": {"identifier": "SecretManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String passphrase;", "modifier": "private final", "type": "String", "declarator": "passphrase", "var_name": "passphrase"}], "methods": [{"identifier": "SecretManager", "parameters": "(final String passphrase)", "modifiers": "public", "return": "", "signature": " SecretManager(final String passphrase)", "full_signature": "public  SecretManager(final String passphrase)", "class_method_signature": "SecretManager.SecretManager(final String passphrase)", "testcase": false, "constructor": true}, {"identifier": "encrypt", "parameters": "(final String str)", "modifiers": "public", "return": "String", "signature": "String encrypt(final String str)", "full_signature": "public String encrypt(final String str)", "class_method_signature": "SecretManager.encrypt(final String str)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(final String str)", "modifiers": "public", "return": "String", "signature": "String decrypt(final String str)", "full_signature": "public String decrypt(final String str)", "class_method_signature": "SecretManager.decrypt(final String str)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/encryption/SecretManager.java"}, "focal_method": {"identifier": "encrypt", "parameters": "(final String str)", "modifiers": "public", "return": "String", "body": "public String encrypt(final String str) {\n        if (str == null) {\n            throw new NullPointerException(\"Argument cannot be null\");\n        }\n\n        try {\n            final SecureRandom random = new SecureRandom();\n            final byte[] salt = new byte[16];\n            random.nextBytes(salt);\n\n            final SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n            final KeySpec spec = new PBEKeySpec(passphrase.toCharArray(), salt, 65536, 128);\n            final SecretKey tmp = factory.generateSecret(spec);\n            final SecretKey secret = new SecretKeySpec(tmp.getEncoded(), \"AES\");\n\n            final Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, secret);\n\n            final AlgorithmParameters params = cipher.getParameters();\n            final byte[] iv = params.getParameterSpec(IvParameterSpec.class).getIV();\n            final byte[] encryptedText = cipher.doFinal(str.getBytes(StandardCharsets.UTF_8));\n\n            // concatenate salt + iv + cipher text\n            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            outputStream.write(salt);\n            outputStream.write(iv);\n            outputStream.write(encryptedText);\n\n            // properly encode the complete cipher text\n            return DatatypeConverter.printBase64Binary(outputStream.toByteArray());\n        } catch (final Exception exception) {\n            throw new RuntimeException(exception.getMessage(), exception);\n        }\n    }", "signature": "String encrypt(final String str)", "full_signature": "public String encrypt(final String str)", "class_method_signature": "SecretManager.encrypt(final String str)", "testcase": false, "constructor": false, "invocations": ["nextBytes", "getInstance", "toCharArray", "generateSecret", "getEncoded", "getInstance", "init", "getParameters", "getIV", "getParameterSpec", "doFinal", "getBytes", "write", "write", "write", "printBase64Binary", "toByteArray", "getMessage"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}