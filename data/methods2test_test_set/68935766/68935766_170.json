{"test_class": {"identifier": "StandaloneEnvironmentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Messager messager = mock(Messager.class);", "modifier": "", "type": "Messager", "declarator": "messager = mock(Messager.class)", "var_name": "messager"}, {"original_string": "StandaloneEnvironment environment = new StandaloneEnvironment(messager);", "modifier": "", "type": "StandaloneEnvironment", "declarator": "environment = new StandaloneEnvironment(messager)", "var_name": "environment"}, {"original_string": "Element element = mock(Element.class);", "modifier": "", "type": "Element", "declarator": "element = mock(Element.class)", "var_name": "element"}], "file": "scribe/standalone/src/test/java/com/karuslabs/scribe/standalone/StandaloneEnvironmentTest.java"}, "test_case": {"identifier": "warn", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void warn() {\n        environment.warn(\"warning\");\n        \n        verify(messager).printMessage(WARNING, \"warning\");\n    }", "signature": "void warn()", "full_signature": "@Test void warn()", "class_method_signature": "StandaloneEnvironmentTest.warn()", "testcase": true, "constructor": false, "invocations": ["warn", "printMessage", "verify"]}, "focal_class": {"identifier": "StandaloneEnvironment", "superclass": "extends Environment<Element>", "interfaces": "", "fields": [{"original_string": "Messager messager;", "modifier": "", "type": "Messager", "declarator": "messager", "var_name": "messager"}], "methods": [{"identifier": "StandaloneEnvironment", "parameters": "(Messager messager)", "modifiers": "public", "return": "", "signature": " StandaloneEnvironment(Messager messager)", "full_signature": "public  StandaloneEnvironment(Messager messager)", "class_method_signature": "StandaloneEnvironment.StandaloneEnvironment(Messager messager)", "testcase": false, "constructor": true}, {"identifier": "error", "parameters": "(String message)", "modifiers": "@Override public", "return": "void", "signature": "void error(String message)", "full_signature": "@Override public void error(String message)", "class_method_signature": "StandaloneEnvironment.error(String message)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(Element location, String message)", "modifiers": "@Override public", "return": "void", "signature": "void error(Element location, String message)", "full_signature": "@Override public void error(Element location, String message)", "class_method_signature": "StandaloneEnvironment.error(Element location, String message)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(String message)", "modifiers": "@Override public", "return": "void", "signature": "void warn(String message)", "full_signature": "@Override public void warn(String message)", "class_method_signature": "StandaloneEnvironment.warn(String message)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(Element location, String message)", "modifiers": "@Override public", "return": "void", "signature": "void warn(Element location, String message)", "full_signature": "@Override public void warn(Element location, String message)", "class_method_signature": "StandaloneEnvironment.warn(Element location, String message)", "testcase": false, "constructor": false}], "file": "scribe/standalone/src/main/java/com/karuslabs/scribe/standalone/StandaloneEnvironment.java"}, "focal_method": {"identifier": "warn", "parameters": "(String message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void warn(String message) {\n        messager.printMessage(WARNING, message);\n    }", "signature": "void warn(String message)", "full_signature": "@Override public void warn(String message)", "class_method_signature": "StandaloneEnvironment.warn(String message)", "testcase": false, "constructor": false, "invocations": ["printMessage"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}