{"test_class": {"identifier": "BPIViewHolderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int layoutId;", "modifier": "private", "type": "int", "declarator": "layoutId", "var_name": "layoutId"}, {"original_string": "private SimpleDateFormat simpleDateFormat;", "modifier": "private", "type": "SimpleDateFormat", "declarator": "simpleDateFormat", "var_name": "simpleDateFormat"}, {"original_string": "private BPIViewHolder viewHolder;", "modifier": "private", "type": "BPIViewHolder", "declarator": "viewHolder", "var_name": "viewHolder"}], "file": "app/src/test/java/com/romainpiel/bitcointracker/view/holder/BPIViewHolderTest.java"}, "test_case": {"identifier": "bind_noChange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void bind_noChange() {\n        BPI bpi = new BPI(new Date(System.currentTimeMillis()), 225.25f);\n\n        viewHolder.bind(bpi);\n\n        if (viewHolder.date != null) {\n            ANDROID.assertThat(viewHolder.date).hasTextString(simpleDateFormat.format(bpi.getDate()));\n        }\n        ANDROID.assertThat(viewHolder.close).hasTextString(\"$\" + bpi.getClose());\n        ANDROID.assertThat(viewHolder.change).hasTextString(\"\");\n    }", "signature": "void bind_noChange()", "full_signature": "@Test public void bind_noChange()", "class_method_signature": "BPIViewHolderTest.bind_noChange()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "bind", "hasTextString", "assertThat", "format", "getDate", "hasTextString", "assertThat", "getClose", "hasTextString", "assertThat"]}, "focal_class": {"identifier": "BPIViewHolder", "superclass": "extends RecyclerView.ViewHolder", "interfaces": "", "fields": [{"original_string": "@Optional\n    @InjectView(R.id.date)\n    TextView date;", "modifier": "@Optional\n    @InjectView(R.id.date)", "type": "TextView", "declarator": "date", "var_name": "date"}, {"original_string": "@InjectView(R.id.close)\n    TextView close;", "modifier": "@InjectView(R.id.close)", "type": "TextView", "declarator": "close", "var_name": "close"}, {"original_string": "@InjectView(R.id.change)\n    TextView change;", "modifier": "@InjectView(R.id.change)", "type": "TextView", "declarator": "change", "var_name": "change"}, {"original_string": "private SimpleDateFormat simpleDateFormat;", "modifier": "private", "type": "SimpleDateFormat", "declarator": "simpleDateFormat", "var_name": "simpleDateFormat"}, {"original_string": "private boolean largeCloseTextSize;", "modifier": "private", "type": "boolean", "declarator": "largeCloseTextSize", "var_name": "largeCloseTextSize"}], "methods": [{"identifier": "BPIViewHolder", "parameters": "(View itemView, SimpleDateFormat simpleDateFormat)", "modifiers": "public", "return": "", "signature": " BPIViewHolder(View itemView, SimpleDateFormat simpleDateFormat)", "full_signature": "public  BPIViewHolder(View itemView, SimpleDateFormat simpleDateFormat)", "class_method_signature": "BPIViewHolder.BPIViewHolder(View itemView, SimpleDateFormat simpleDateFormat)", "testcase": false, "constructor": true}, {"identifier": "bind", "parameters": "(BPI item)", "modifiers": "public", "return": "void", "signature": "void bind(BPI item)", "full_signature": "public void bind(BPI item)", "class_method_signature": "BPIViewHolder.bind(BPI item)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/romainpiel/bitcointracker/view/holder/BPIViewHolder.java"}, "focal_method": {"identifier": "bind", "parameters": "(BPI item)", "modifiers": "public", "return": "void", "body": "public void bind(BPI item) {\n        if (date != null) {\n            date.setText(simpleDateFormat.format(item.getDate()));\n        }\n        SpannableStringBuilder closeText = new SpannableStringBuilder(String.format(\"$%.2f\", item.getClose()));\n        if (largeCloseTextSize) {\n            // if large text, the price looks better with a small $\n            closeText.setSpan(new RelativeSizeSpan(0.4f), 0, 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n        }\n        close.setText(closeText);\n\n        int changeTextColorRes = R.color.textColorSecondary;\n        String changeText = \"\";\n        String changeArrow = \"\";\n        if (item.getChange() != null) {\n            changeText = String.format(\"%.2f%%\", item.getChange() * 100);\n            if (item.getChange() > 0) {\n                changeArrow = \" \u25b2\";\n                changeTextColorRes = R.color.bpiChangeIncrease;\n            } else if (item.getChange() < 0) {\n                changeArrow = \" \u25bc\";\n                changeTextColorRes = R.color.bpiChangeDecrease;\n            }\n        }\n        change.setText(changeText + changeArrow);\n        change.setTextColor(change.getResources().getColor(changeTextColorRes));\n    }", "signature": "void bind(BPI item)", "full_signature": "public void bind(BPI item)", "class_method_signature": "BPIViewHolder.bind(BPI item)", "testcase": false, "constructor": false, "invocations": ["setText", "format", "getDate", "format", "getClose", "setSpan", "setText", "getChange", "format", "getChange", "getChange", "getChange", "setText", "setTextColor", "getColor", "getResources"]}, "repository": {"repo_id": 30466015, "url": "https://github.com/romainpiel/BitCoin-Tracker", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 10, "size": 628, "license": "licensed"}}