{"test_class": {"identifier": "HighAvailabilityManagerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(HighAvailabilityManagerImplTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(HighAvailabilityManagerImplTest.class)", "var_name": "s_logger"}, {"original_string": "@Mock\n  HighAvailabilityDao _haDao;", "modifier": "@Mock", "type": "HighAvailabilityDao", "declarator": "_haDao", "var_name": "_haDao"}, {"original_string": "@Mock\n  VMInstanceDao _instanceDao;", "modifier": "@Mock", "type": "VMInstanceDao", "declarator": "_instanceDao", "var_name": "_instanceDao"}, {"original_string": "@Mock\n  HostDao _hostDao;", "modifier": "@Mock", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Mock\n  DataCenterDao _dcDao;", "modifier": "@Mock", "type": "DataCenterDao", "declarator": "_dcDao", "var_name": "_dcDao"}, {"original_string": "@Mock\n  HostPodDao _podDao;", "modifier": "@Mock", "type": "HostPodDao", "declarator": "_podDao", "var_name": "_podDao"}, {"original_string": "@Mock\n  ClusterDetailsDao _clusterDetailsDao;", "modifier": "@Mock", "type": "ClusterDetailsDao", "declarator": "_clusterDetailsDao", "var_name": "_clusterDetailsDao"}, {"original_string": "@Mock\n  ServiceOfferingDao _serviceOfferingDao;", "modifier": "@Mock", "type": "ServiceOfferingDao", "declarator": "_serviceOfferingDao", "var_name": "_serviceOfferingDao"}, {"original_string": "@Mock\n  ManagedContext _managedContext;", "modifier": "@Mock", "type": "ManagedContext", "declarator": "_managedContext", "var_name": "_managedContext"}, {"original_string": "@Mock\n  AgentManager _agentMgr;", "modifier": "@Mock", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "@Mock\n  AlertManager _alertMgr;", "modifier": "@Mock", "type": "AlertManager", "declarator": "_alertMgr", "var_name": "_alertMgr"}, {"original_string": "@Mock\n  StorageManager _storageMgr;", "modifier": "@Mock", "type": "StorageManager", "declarator": "_storageMgr", "var_name": "_storageMgr"}, {"original_string": "@Mock\n  GuestOSDao _guestOSDao;", "modifier": "@Mock", "type": "GuestOSDao", "declarator": "_guestOSDao", "var_name": "_guestOSDao"}, {"original_string": "@Mock\n  GuestOSCategoryDao _guestOSCategoryDao;", "modifier": "@Mock", "type": "GuestOSCategoryDao", "declarator": "_guestOSCategoryDao", "var_name": "_guestOSCategoryDao"}, {"original_string": "@Mock\n  VirtualMachineManager _itMgr;", "modifier": "@Mock", "type": "VirtualMachineManager", "declarator": "_itMgr", "var_name": "_itMgr"}, {"original_string": "@Mock\n  AccountManager _accountMgr;", "modifier": "@Mock", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Mock\n  ResourceManager _resourceMgr;", "modifier": "@Mock", "type": "ResourceManager", "declarator": "_resourceMgr", "var_name": "_resourceMgr"}, {"original_string": "@Mock\n  ManagementServer _msServer;", "modifier": "@Mock", "type": "ManagementServer", "declarator": "_msServer", "var_name": "_msServer"}, {"original_string": "@Mock\n  ConfigurationDao _configDao;", "modifier": "@Mock", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Mock\n  VolumeOrchestrationService volumeMgr;", "modifier": "@Mock", "type": "VolumeOrchestrationService", "declarator": "volumeMgr", "var_name": "volumeMgr"}, {"original_string": "@Mock\n  HostVO hostVO;", "modifier": "@Mock", "type": "HostVO", "declarator": "hostVO", "var_name": "hostVO"}, {"original_string": "HighAvailabilityManagerImpl highAvailabilityManager;", "modifier": "", "type": "HighAvailabilityManagerImpl", "declarator": "highAvailabilityManager", "var_name": "highAvailabilityManager"}, {"original_string": "HighAvailabilityManagerImpl highAvailabilityManagerSpy;", "modifier": "", "type": "HighAvailabilityManagerImpl", "declarator": "highAvailabilityManagerSpy", "var_name": "highAvailabilityManagerSpy"}, {"original_string": "static Method processWorkMethod = null;", "modifier": "static", "type": "Method", "declarator": "processWorkMethod = null", "var_name": "processWorkMethod"}], "file": "server/src/test/java/com/cloud/ha/HighAvailabilityManagerImplTest.java"}, "test_case": {"identifier": "scheduleRestartForVmsOnHostNonEmptyVMList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void scheduleRestartForVmsOnHostNonEmptyVMList() {\n    Mockito.when(hostVO.getId()).thenReturn(1l);\n    Mockito.when(hostVO.getType()).thenReturn(Host.Type.Routing);\n    Mockito.when(hostVO.getHypervisorType()).thenReturn(HypervisorType.XenServer);\n    final List<VMInstanceVO> vms = new ArrayList<VMInstanceVO>();\n    final VMInstanceVO vm1 = Mockito.mock(VMInstanceVO.class);\n    Mockito.when(vm1.getHostId()).thenReturn(1l);\n    Mockito.when(vm1.getInstanceName()).thenReturn(\"i-2-3-VM\");\n    Mockito.when(vm1.getType()).thenReturn(VirtualMachine.Type.User);\n    Mockito.when(vm1.isHaEnabled()).thenReturn(true);\n    vms.add(vm1);\n    final VMInstanceVO vm2 = Mockito.mock(VMInstanceVO.class);\n    Mockito.when(vm2.getHostId()).thenReturn(1l);\n    Mockito.when(vm2.getInstanceName()).thenReturn(\"r-2-VM\");\n    Mockito.when(vm2.getType()).thenReturn(VirtualMachine.Type.DomainRouter);\n    Mockito.when(vm2.isHaEnabled()).thenReturn(true);\n    vms.add(vm2);\n    Mockito.when(_instanceDao.listByHostId(Mockito.anyLong())).thenReturn(vms);\n    Mockito.when(_instanceDao.findByUuid(vm1.getUuid())).thenReturn(vm1);\n    Mockito.when(_instanceDao.findByUuid(vm2.getUuid())).thenReturn(vm2);\n    Mockito.when(_podDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(HostPodVO.class));\n    Mockito.when(_dcDao.findById(Mockito.anyLong())).thenReturn(Mockito.mock(DataCenterVO.class));\n    Mockito.when(_haDao.findPreviousHA(Mockito.anyLong())).thenReturn(Arrays.asList(Mockito.mock(HaWorkVO.class)));\n    Mockito.when(_haDao.persist((HaWorkVO)Mockito.anyObject())).thenReturn(Mockito.mock(HaWorkVO.class));\n\n    highAvailabilityManager.scheduleRestartForVmsOnHost(hostVO, true);\n  }", "signature": "void scheduleRestartForVmsOnHostNonEmptyVMList()", "full_signature": "@Test public void scheduleRestartForVmsOnHostNonEmptyVMList()", "class_method_signature": "HighAvailabilityManagerImplTest.scheduleRestartForVmsOnHostNonEmptyVMList()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getId", "thenReturn", "when", "getType", "thenReturn", "when", "getHypervisorType", "mock", "thenReturn", "when", "getHostId", "thenReturn", "when", "getInstanceName", "thenReturn", "when", "getType", "thenReturn", "when", "isHaEnabled", "add", "mock", "thenReturn", "when", "getHostId", "thenReturn", "when", "getInstanceName", "thenReturn", "when", "getType", "thenReturn", "when", "isHaEnabled", "add", "thenReturn", "when", "listByHostId", "anyLong", "thenReturn", "when", "findByUuid", "getUuid", "thenReturn", "when", "findByUuid", "getUuid", "thenReturn", "when", "findById", "anyLong", "mock", "thenReturn", "when", "findById", "anyLong", "mock", "thenReturn", "when", "findPreviousHA", "anyLong", "asList", "mock", "thenReturn", "when", "persist", "anyObject", "mock", "scheduleRestartForVmsOnHost"]}, "focal_class": {"identifier": "HighAvailabilityManagerImpl", "superclass": "extends ManagerBase", "interfaces": "implements HighAvailabilityManager, ClusterManagerListener", "fields": [{"original_string": "protected static final Logger s_logger = LoggerFactory.getLogger(HighAvailabilityManagerImpl.class);", "modifier": "protected static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(HighAvailabilityManagerImpl.class)", "var_name": "s_logger"}, {"original_string": "WorkerThread[] _workers;", "modifier": "", "type": "WorkerThread[]", "declarator": "_workers", "var_name": "_workers"}, {"original_string": "boolean _stopped;", "modifier": "", "type": "boolean", "declarator": "_stopped", "var_name": "_stopped"}, {"original_string": "long _timeToSleep;", "modifier": "", "type": "long", "declarator": "_timeToSleep", "var_name": "_timeToSleep"}, {"original_string": "@Inject\n  HighAvailabilityDao _haDao;", "modifier": "@Inject", "type": "HighAvailabilityDao", "declarator": "_haDao", "var_name": "_haDao"}, {"original_string": "@Inject\n  VMInstanceDao _instanceDao;", "modifier": "@Inject", "type": "VMInstanceDao", "declarator": "_instanceDao", "var_name": "_instanceDao"}, {"original_string": "@Inject\n  HostDao _hostDao;", "modifier": "@Inject", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Inject\n  DataCenterDao _dcDao;", "modifier": "@Inject", "type": "DataCenterDao", "declarator": "_dcDao", "var_name": "_dcDao"}, {"original_string": "@Inject\n  HostPodDao _podDao;", "modifier": "@Inject", "type": "HostPodDao", "declarator": "_podDao", "var_name": "_podDao"}, {"original_string": "@Inject\n  ClusterDetailsDao _clusterDetailsDao;", "modifier": "@Inject", "type": "ClusterDetailsDao", "declarator": "_clusterDetailsDao", "var_name": "_clusterDetailsDao"}, {"original_string": "@Inject\n  ServiceOfferingDao _serviceOfferingDao;", "modifier": "@Inject", "type": "ServiceOfferingDao", "declarator": "_serviceOfferingDao", "var_name": "_serviceOfferingDao"}, {"original_string": "long _serverId;", "modifier": "", "type": "long", "declarator": "_serverId", "var_name": "_serverId"}, {"original_string": "@Inject\n  ManagedContext _managedContext;", "modifier": "@Inject", "type": "ManagedContext", "declarator": "_managedContext", "var_name": "_managedContext"}, {"original_string": "List<Investigator> investigators;", "modifier": "", "type": "List<Investigator>", "declarator": "investigators", "var_name": "investigators"}, {"original_string": "List<FenceBuilder> fenceBuilders;", "modifier": "", "type": "List<FenceBuilder>", "declarator": "fenceBuilders", "var_name": "fenceBuilders"}, {"original_string": "List<HAPlanner> _haPlanners;", "modifier": "", "type": "List<HAPlanner>", "declarator": "_haPlanners", "var_name": "_haPlanners"}, {"original_string": "@Inject\n  AgentManager _agentMgr;", "modifier": "@Inject", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "@Inject\n  AlertManager _alertMgr;", "modifier": "@Inject", "type": "AlertManager", "declarator": "_alertMgr", "var_name": "_alertMgr"}, {"original_string": "@Inject\n  StorageManager _storageMgr;", "modifier": "@Inject", "type": "StorageManager", "declarator": "_storageMgr", "var_name": "_storageMgr"}, {"original_string": "@Inject\n  GuestOSDao _guestOSDao;", "modifier": "@Inject", "type": "GuestOSDao", "declarator": "_guestOSDao", "var_name": "_guestOSDao"}, {"original_string": "@Inject\n  GuestOSCategoryDao _guestOSCategoryDao;", "modifier": "@Inject", "type": "GuestOSCategoryDao", "declarator": "_guestOSCategoryDao", "var_name": "_guestOSCategoryDao"}, {"original_string": "@Inject\n  VirtualMachineManager _itMgr;", "modifier": "@Inject", "type": "VirtualMachineManager", "declarator": "_itMgr", "var_name": "_itMgr"}, {"original_string": "@Inject\n  AccountManager _accountMgr;", "modifier": "@Inject", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n  ResourceManager _resourceMgr;", "modifier": "@Inject", "type": "ResourceManager", "declarator": "_resourceMgr", "var_name": "_resourceMgr"}, {"original_string": "@Inject\n  ManagementServer _msServer;", "modifier": "@Inject", "type": "ManagementServer", "declarator": "_msServer", "var_name": "_msServer"}, {"original_string": "@Inject\n  ConfigurationDao _configDao;", "modifier": "@Inject", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Inject\n  VolumeOrchestrationService volumeMgr;", "modifier": "@Inject", "type": "VolumeOrchestrationService", "declarator": "volumeMgr", "var_name": "volumeMgr"}, {"original_string": "String _instance;", "modifier": "", "type": "String", "declarator": "_instance", "var_name": "_instance"}, {"original_string": "ScheduledExecutorService _executor;", "modifier": "", "type": "ScheduledExecutorService", "declarator": "_executor", "var_name": "_executor"}, {"original_string": "int _stopRetryInterval;", "modifier": "", "type": "int", "declarator": "_stopRetryInterval", "var_name": "_stopRetryInterval"}, {"original_string": "int _investigateRetryInterval;", "modifier": "", "type": "int", "declarator": "_investigateRetryInterval", "var_name": "_investigateRetryInterval"}, {"original_string": "int _migrateRetryInterval;", "modifier": "", "type": "int", "declarator": "_migrateRetryInterval", "var_name": "_migrateRetryInterval"}, {"original_string": "int _restartRetryInterval;", "modifier": "", "type": "int", "declarator": "_restartRetryInterval", "var_name": "_restartRetryInterval"}, {"original_string": "int _maxRetries;", "modifier": "", "type": "int", "declarator": "_maxRetries", "var_name": "_maxRetries"}, {"original_string": "long _timeBetweenFailures;", "modifier": "", "type": "long", "declarator": "_timeBetweenFailures", "var_name": "_timeBetweenFailures"}, {"original_string": "long _timeBetweenCleanups;", "modifier": "", "type": "long", "declarator": "_timeBetweenCleanups", "var_name": "_timeBetweenCleanups"}, {"original_string": "boolean _forceHA;", "modifier": "", "type": "boolean", "declarator": "_forceHA", "var_name": "_forceHA"}, {"original_string": "String _haTag = null;", "modifier": "", "type": "String", "declarator": "_haTag = null", "var_name": "_haTag"}], "methods": [{"identifier": "getInvestigators", "parameters": "()", "modifiers": "public", "return": "List<Investigator>", "signature": "List<Investigator> getInvestigators()", "full_signature": "public List<Investigator> getInvestigators()", "class_method_signature": "HighAvailabilityManagerImpl.getInvestigators()", "testcase": false, "constructor": false}, {"identifier": "setInvestigators", "parameters": "(List<Investigator> investigators)", "modifiers": "public", "return": "void", "signature": "void setInvestigators(List<Investigator> investigators)", "full_signature": "public void setInvestigators(List<Investigator> investigators)", "class_method_signature": "HighAvailabilityManagerImpl.setInvestigators(List<Investigator> investigators)", "testcase": false, "constructor": false}, {"identifier": "getFenceBuilders", "parameters": "()", "modifiers": "public", "return": "List<FenceBuilder>", "signature": "List<FenceBuilder> getFenceBuilders()", "full_signature": "public List<FenceBuilder> getFenceBuilders()", "class_method_signature": "HighAvailabilityManagerImpl.getFenceBuilders()", "testcase": false, "constructor": false}, {"identifier": "setFenceBuilders", "parameters": "(List<FenceBuilder> fenceBuilders)", "modifiers": "public", "return": "void", "signature": "void setFenceBuilders(List<FenceBuilder> fenceBuilders)", "full_signature": "public void setFenceBuilders(List<FenceBuilder> fenceBuilders)", "class_method_signature": "HighAvailabilityManagerImpl.setFenceBuilders(List<FenceBuilder> fenceBuilders)", "testcase": false, "constructor": false}, {"identifier": "getHaPlanners", "parameters": "()", "modifiers": "public", "return": "List<HAPlanner>", "signature": "List<HAPlanner> getHaPlanners()", "full_signature": "public List<HAPlanner> getHaPlanners()", "class_method_signature": "HighAvailabilityManagerImpl.getHaPlanners()", "testcase": false, "constructor": false}, {"identifier": "setHaPlanners", "parameters": "(List<HAPlanner> haPlanners)", "modifiers": "public", "return": "void", "signature": "void setHaPlanners(List<HAPlanner> haPlanners)", "full_signature": "public void setHaPlanners(List<HAPlanner> haPlanners)", "class_method_signature": "HighAvailabilityManagerImpl.setHaPlanners(List<HAPlanner> haPlanners)", "testcase": false, "constructor": false}, {"identifier": "HighAvailabilityManagerImpl", "parameters": "()", "modifiers": "protected", "return": "", "signature": " HighAvailabilityManagerImpl()", "full_signature": "protected  HighAvailabilityManagerImpl()", "class_method_signature": "HighAvailabilityManagerImpl.HighAvailabilityManagerImpl()", "testcase": false, "constructor": true}, {"identifier": "investigate", "parameters": "(final long hostId)", "modifiers": "@Override public", "return": "Status", "signature": "Status investigate(final long hostId)", "full_signature": "@Override public Status investigate(final long hostId)", "class_method_signature": "HighAvailabilityManagerImpl.investigate(final long hostId)", "testcase": false, "constructor": false}, {"identifier": "scheduleRestartForVmsOnHost", "parameters": "(final HostVO host, boolean investigate)", "modifiers": "@Override public", "return": "void", "signature": "void scheduleRestartForVmsOnHost(final HostVO host, boolean investigate)", "full_signature": "@Override public void scheduleRestartForVmsOnHost(final HostVO host, boolean investigate)", "class_method_signature": "HighAvailabilityManagerImpl.scheduleRestartForVmsOnHost(final HostVO host, boolean investigate)", "testcase": false, "constructor": false}, {"identifier": "scheduleStop", "parameters": "(VMInstanceVO vm, long hostId, WorkType type)", "modifiers": "@Override public", "return": "void", "signature": "void scheduleStop(VMInstanceVO vm, long hostId, WorkType type)", "full_signature": "@Override public void scheduleStop(VMInstanceVO vm, long hostId, WorkType type)", "class_method_signature": "HighAvailabilityManagerImpl.scheduleStop(VMInstanceVO vm, long hostId, WorkType type)", "testcase": false, "constructor": false}, {"identifier": "wakeupWorkers", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void wakeupWorkers()", "full_signature": "protected void wakeupWorkers()", "class_method_signature": "HighAvailabilityManagerImpl.wakeupWorkers()", "testcase": false, "constructor": false}, {"identifier": "scheduleMigration", "parameters": "(final VMInstanceVO vm)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean scheduleMigration(final VMInstanceVO vm)", "full_signature": "@Override public boolean scheduleMigration(final VMInstanceVO vm)", "class_method_signature": "HighAvailabilityManagerImpl.scheduleMigration(final VMInstanceVO vm)", "testcase": false, "constructor": false}, {"identifier": "scheduleRestart", "parameters": "(VMInstanceVO vm, boolean investigate)", "modifiers": "@Override public", "return": "void", "signature": "void scheduleRestart(VMInstanceVO vm, boolean investigate)", "full_signature": "@Override public void scheduleRestart(VMInstanceVO vm, boolean investigate)", "class_method_signature": "HighAvailabilityManagerImpl.scheduleRestart(VMInstanceVO vm, boolean investigate)", "testcase": false, "constructor": false}, {"identifier": "restart", "parameters": "(final HaWorkVO work)", "modifiers": "protected", "return": "Long", "signature": "Long restart(final HaWorkVO work)", "full_signature": "protected Long restart(final HaWorkVO work)", "class_method_signature": "HighAvailabilityManagerImpl.restart(final HaWorkVO work)", "testcase": false, "constructor": false}, {"identifier": "migrate", "parameters": "(final HaWorkVO work)", "modifiers": "public", "return": "Long", "signature": "Long migrate(final HaWorkVO work)", "full_signature": "public Long migrate(final HaWorkVO work)", "class_method_signature": "HighAvailabilityManagerImpl.migrate(final HaWorkVO work)", "testcase": false, "constructor": false}, {"identifier": "scheduleDestroy", "parameters": "(VMInstanceVO vm, long hostId)", "modifiers": "@Override public", "return": "void", "signature": "void scheduleDestroy(VMInstanceVO vm, long hostId)", "full_signature": "@Override public void scheduleDestroy(VMInstanceVO vm, long hostId)", "class_method_signature": "HighAvailabilityManagerImpl.scheduleDestroy(VMInstanceVO vm, long hostId)", "testcase": false, "constructor": false}, {"identifier": "cancelDestroy", "parameters": "(VMInstanceVO vm, Long hostId)", "modifiers": "@Override public", "return": "void", "signature": "void cancelDestroy(VMInstanceVO vm, Long hostId)", "full_signature": "@Override public void cancelDestroy(VMInstanceVO vm, Long hostId)", "class_method_signature": "HighAvailabilityManagerImpl.cancelDestroy(VMInstanceVO vm, Long hostId)", "testcase": false, "constructor": false}, {"identifier": "destroyVM", "parameters": "(final HaWorkVO work)", "modifiers": "protected", "return": "Long", "signature": "Long destroyVM(final HaWorkVO work)", "full_signature": "protected Long destroyVM(final HaWorkVO work)", "class_method_signature": "HighAvailabilityManagerImpl.destroyVM(final HaWorkVO work)", "testcase": false, "constructor": false}, {"identifier": "stopVM", "parameters": "(final HaWorkVO work)", "modifiers": "protected", "return": "Long", "signature": "Long stopVM(final HaWorkVO work)", "full_signature": "protected Long stopVM(final HaWorkVO work)", "class_method_signature": "HighAvailabilityManagerImpl.stopVM(final HaWorkVO work)", "testcase": false, "constructor": false}, {"identifier": "cancelScheduledMigrations", "parameters": "(final HostVO host)", "modifiers": "@Override public", "return": "void", "signature": "void cancelScheduledMigrations(final HostVO host)", "full_signature": "@Override public void cancelScheduledMigrations(final HostVO host)", "class_method_signature": "HighAvailabilityManagerImpl.cancelScheduledMigrations(final HostVO host)", "testcase": false, "constructor": false}, {"identifier": "findTakenMigrationWork", "parameters": "()", "modifiers": "@Override public", "return": "List<VMInstanceVO>", "signature": "List<VMInstanceVO> findTakenMigrationWork()", "full_signature": "@Override public List<VMInstanceVO> findTakenMigrationWork()", "class_method_signature": "HighAvailabilityManagerImpl.findTakenMigrationWork()", "testcase": false, "constructor": false}, {"identifier": "rescheduleWork", "parameters": "(final HaWorkVO work, final long nextTime)", "modifiers": "private", "return": "void", "signature": "void rescheduleWork(final HaWorkVO work, final long nextTime)", "full_signature": "private void rescheduleWork(final HaWorkVO work, final long nextTime)", "class_method_signature": "HighAvailabilityManagerImpl.rescheduleWork(final HaWorkVO work, final long nextTime)", "testcase": false, "constructor": false}, {"identifier": "getRescheduleTime", "parameters": "(WorkType workType)", "modifiers": "private", "return": "long", "signature": "long getRescheduleTime(WorkType workType)", "full_signature": "private long getRescheduleTime(WorkType workType)", "class_method_signature": "HighAvailabilityManagerImpl.getRescheduleTime(WorkType workType)", "testcase": false, "constructor": false}, {"identifier": "processWork", "parameters": "(final HaWorkVO work)", "modifiers": "private", "return": "void", "signature": "void processWork(final HaWorkVO work)", "full_signature": "private void processWork(final HaWorkVO work)", "class_method_signature": "HighAvailabilityManagerImpl.processWork(final HaWorkVO work)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(final String name, final Map<String, Object> xmlParams)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(final String name, final Map<String, Object> xmlParams)", "full_signature": "@Override public boolean configure(final String name, final Map<String, Object> xmlParams)", "class_method_signature": "HighAvailabilityManagerImpl.configure(final String name, final Map<String, Object> xmlParams)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "HighAvailabilityManagerImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stop()", "full_signature": "@Override public boolean stop()", "class_method_signature": "HighAvailabilityManagerImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "onManagementNodeJoined", "parameters": "(List<? extends ManagementServerHost> nodeList, long selfNodeId)", "modifiers": "@Override public", "return": "void", "signature": "void onManagementNodeJoined(List<? extends ManagementServerHost> nodeList, long selfNodeId)", "full_signature": "@Override public void onManagementNodeJoined(List<? extends ManagementServerHost> nodeList, long selfNodeId)", "class_method_signature": "HighAvailabilityManagerImpl.onManagementNodeJoined(List<? extends ManagementServerHost> nodeList, long selfNodeId)", "testcase": false, "constructor": false}, {"identifier": "onManagementNodeLeft", "parameters": "(List<? extends ManagementServerHost> nodeList, long selfNodeId)", "modifiers": "@Override public", "return": "void", "signature": "void onManagementNodeLeft(List<? extends ManagementServerHost> nodeList, long selfNodeId)", "full_signature": "@Override public void onManagementNodeLeft(List<? extends ManagementServerHost> nodeList, long selfNodeId)", "class_method_signature": "HighAvailabilityManagerImpl.onManagementNodeLeft(List<? extends ManagementServerHost> nodeList, long selfNodeId)", "testcase": false, "constructor": false}, {"identifier": "onManagementNodeIsolated", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onManagementNodeIsolated()", "full_signature": "@Override public void onManagementNodeIsolated()", "class_method_signature": "HighAvailabilityManagerImpl.onManagementNodeIsolated()", "testcase": false, "constructor": false}, {"identifier": "getHaTag", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getHaTag()", "full_signature": "@Override public String getHaTag()", "class_method_signature": "HighAvailabilityManagerImpl.getHaTag()", "testcase": false, "constructor": false}, {"identifier": "getHAPlanner", "parameters": "()", "modifiers": "@Override public", "return": "DeploymentPlanner", "signature": "DeploymentPlanner getHAPlanner()", "full_signature": "@Override public DeploymentPlanner getHAPlanner()", "class_method_signature": "HighAvailabilityManagerImpl.getHAPlanner()", "testcase": false, "constructor": false}, {"identifier": "hasPendingHaWork", "parameters": "(long vmId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPendingHaWork(long vmId)", "full_signature": "@Override public boolean hasPendingHaWork(long vmId)", "class_method_signature": "HighAvailabilityManagerImpl.hasPendingHaWork(long vmId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/ha/HighAvailabilityManagerImpl.java"}, "focal_method": {"identifier": "scheduleRestartForVmsOnHost", "parameters": "(final HostVO host, boolean investigate)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void scheduleRestartForVmsOnHost(final HostVO host, boolean investigate) {\n\n    if (host.getType() != Host.Type.Routing) {\n      return;\n    }\n\n    s_logger.warn(\"Scheduling restart for VMs on host \" + host.getId() + \"-\" + host.getName());\n\n    final List<VMInstanceVO> vms = _instanceDao.listByHostId(host.getId());\n    final DataCenterVO dcVO = _dcDao.findById(host.getDataCenterId());\n\n    // send an email alert that the host is down\n    StringBuilder sb = null;\n    final List<VMInstanceVO> reorderedVMList = new ArrayList<VMInstanceVO>();\n    if (vms != null && !vms.isEmpty()) {\n      sb = new StringBuilder();\n      sb.append(\"  Starting HA on the following VMs:\");\n      // collect list of vm names for the alert email\n      for (int i = 0; i < vms.size(); i++) {\n        final VMInstanceVO vm = vms.get(i);\n        if (vm.getType() == VirtualMachine.Type.User) {\n          reorderedVMList.add(vm);\n        } else {\n          reorderedVMList.add(0, vm);\n        }\n        if (vm.isHaEnabled()) {\n          sb.append(\" \" + vm.getHostName());\n        }\n      }\n    }\n\n    // send an email alert that the host is down, include VMs\n    final HostPodVO podVO = _podDao.findById(host.getPodId());\n    final String hostDesc = \"name: \" + host.getName() + \" (id:\" + host.getId() + \"), availability zone: \" + dcVO.getName() + \", pod: \" + podVO.getName();\n    _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST, host.getDataCenterId(), host.getPodId(), \"Host is down, \" + hostDesc,\n        \"Host [\" + hostDesc + \"] is down.\" + (sb != null ? sb.toString() : \"\"));\n\n    for (VMInstanceVO vm : reorderedVMList) {\n      if (s_logger.isDebugEnabled()) {\n        s_logger.debug(\"Notifying HA Mgr of to restart vm \" + vm.getId() + \"-\" + vm.getInstanceName());\n      }\n      vm = _instanceDao.findByUuid(vm.getUuid());\n      final Long hostId = vm.getHostId();\n      if (hostId != null && !hostId.equals(host.getId())) {\n        s_logger.debug(\"VM \" + vm.getInstanceName() + \" is not on down host \" + host.getId() + \" it is on other host \"\n            + hostId + \" VM HA is done\");\n        continue;\n      }\n      scheduleRestart(vm, investigate);\n    }\n  }", "signature": "void scheduleRestartForVmsOnHost(final HostVO host, boolean investigate)", "full_signature": "@Override public void scheduleRestartForVmsOnHost(final HostVO host, boolean investigate)", "class_method_signature": "HighAvailabilityManagerImpl.scheduleRestartForVmsOnHost(final HostVO host, boolean investigate)", "testcase": false, "constructor": false, "invocations": ["getType", "warn", "getId", "getName", "listByHostId", "getId", "findById", "getDataCenterId", "isEmpty", "append", "size", "get", "getType", "add", "add", "isHaEnabled", "append", "getHostName", "findById", "getPodId", "getName", "getId", "getName", "getName", "sendAlert", "getDataCenterId", "getPodId", "toString", "isDebugEnabled", "debug", "getId", "getInstanceName", "findByUuid", "getUuid", "getHostId", "equals", "getId", "debug", "getInstanceName", "getId", "scheduleRestart"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}