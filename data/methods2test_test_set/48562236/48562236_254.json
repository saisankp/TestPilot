{"test_class": {"identifier": "ParserTest", "superclass": "extends SpelTestCase", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/el/spel/parser/ParserTest.java"}, "test_case": {"identifier": "testLeftShift", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLeftShift() throws Exception {\n        String text = \"a << 3\";\n        Parser parser = new Parser(text);\n        AstExpr expr = parser.expr();\n        \n        AstBinary binaryExpr = (AstBinary) expr;\n        \n        AstIdentifier left = (AstIdentifier) binaryExpr.getLeft();\n        AstNumber right = (AstNumber) binaryExpr.getRight();\n        \n        assertEquals(\"a\", left.getName());\n        assertEquals(3, right.getValue());\n        assertEquals(expr.toString(), text);\n    }", "signature": "void testLeftShift()", "full_signature": "@Test public void testLeftShift()", "class_method_signature": "ParserTest.testLeftShift()", "testcase": true, "constructor": false, "invocations": ["expr", "getLeft", "getRight", "assertEquals", "getName", "assertEquals", "getValue", "assertEquals", "toString"]}, "focal_class": {"identifier": "Parser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ElParseContext EMPTY_CONTEXT = new DefaultElParseContext();", "modifier": "private static final", "type": "ElParseContext", "declarator": "EMPTY_CONTEXT = new DefaultElParseContext()", "var_name": "EMPTY_CONTEXT"}, {"original_string": "private static final String T = \"T\";", "modifier": "private static final", "type": "String", "declarator": "T = \"T\"", "var_name": "T"}, {"original_string": "protected final ElParseContext context;", "modifier": "protected final", "type": "ElParseContext", "declarator": "context", "var_name": "context"}, {"original_string": "protected final Lexer \t \t   lexer;", "modifier": "protected final", "type": "Lexer", "declarator": "lexer", "var_name": "lexer"}, {"original_string": "private int quesCounter;", "modifier": "private", "type": "int", "declarator": "quesCounter", "var_name": "quesCounter"}], "methods": [{"identifier": "parse", "parameters": "(String text)", "modifiers": "public static", "return": "AstExpr", "signature": "AstExpr parse(String text)", "full_signature": "public static AstExpr parse(String text)", "class_method_signature": "Parser.parse(String text)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(ElParseContext context, String text)", "modifiers": "public static", "return": "AstExpr", "signature": "AstExpr parse(ElParseContext context, String text)", "full_signature": "public static AstExpr parse(ElParseContext context, String text)", "class_method_signature": "Parser.parse(ElParseContext context, String text)", "testcase": false, "constructor": false}, {"identifier": "Parser", "parameters": "(String input)", "modifiers": "public", "return": "", "signature": " Parser(String input)", "full_signature": "public  Parser(String input)", "class_method_signature": "Parser.Parser(String input)", "testcase": false, "constructor": true}, {"identifier": "Parser", "parameters": "(ElParseContext context, String input)", "modifiers": "public", "return": "", "signature": " Parser(ElParseContext context, String input)", "full_signature": "public  Parser(ElParseContext context, String input)", "class_method_signature": "Parser.Parser(ElParseContext context, String input)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "()", "modifiers": "public", "return": "AstExpr", "signature": "AstExpr parse()", "full_signature": "public AstExpr parse()", "class_method_signature": "Parser.parse()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(boolean allowRest)", "modifiers": "public", "return": "AstExpr", "signature": "AstExpr parse(boolean allowRest)", "full_signature": "public AstExpr parse(boolean allowRest)", "class_method_signature": "Parser.parse(boolean allowRest)", "testcase": false, "constructor": false}, {"identifier": "expr", "parameters": "()", "modifiers": "protected", "return": "AstExpr", "signature": "AstExpr expr()", "full_signature": "protected AstExpr expr()", "class_method_signature": "Parser.expr()", "testcase": false, "constructor": false}, {"identifier": "eof", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean eof()", "full_signature": "public boolean eof()", "class_method_signature": "Parser.eof()", "testcase": false, "constructor": false}, {"identifier": "rest", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String rest()", "full_signature": "public String rest()", "class_method_signature": "Parser.rest()", "testcase": false, "constructor": false}, {"identifier": "exprRest", "parameters": "(AstExpr expr)", "modifiers": "protected", "return": "AstExpr", "signature": "AstExpr exprRest(AstExpr expr)", "full_signature": "protected AstExpr exprRest(AstExpr expr)", "class_method_signature": "Parser.exprRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "lexer", "parameters": "()", "modifiers": "protected", "return": "Lexer", "signature": "Lexer lexer()", "full_signature": "protected Lexer lexer()", "class_method_signature": "Parser.lexer()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(Token token)", "modifiers": "protected", "return": "void", "signature": "void accept(Token token)", "full_signature": "protected void accept(Token token)", "class_method_signature": "Parser.accept(Token token)", "testcase": false, "constructor": false}, {"identifier": "bitXor", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr bitXor()", "full_signature": "protected final AstExpr bitXor()", "class_method_signature": "Parser.bitXor()", "testcase": false, "constructor": false}, {"identifier": "bitXorRest", "parameters": "(AstExpr expr)", "modifiers": "protected", "return": "AstExpr", "signature": "AstExpr bitXorRest(AstExpr expr)", "full_signature": "protected AstExpr bitXorRest(AstExpr expr)", "class_method_signature": "Parser.bitXorRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "multiplicative", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr multiplicative()", "full_signature": "protected final AstExpr multiplicative()", "class_method_signature": "Parser.multiplicative()", "testcase": false, "constructor": false}, {"identifier": "multiplicativeRest", "parameters": "(AstExpr expr)", "modifiers": "protected", "return": "AstExpr", "signature": "AstExpr multiplicativeRest(AstExpr expr)", "full_signature": "protected AstExpr multiplicativeRest(AstExpr expr)", "class_method_signature": "Parser.multiplicativeRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "bitAnd", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr bitAnd()", "full_signature": "protected final AstExpr bitAnd()", "class_method_signature": "Parser.bitAnd()", "testcase": false, "constructor": false}, {"identifier": "bitAndRest", "parameters": "(AstExpr expr)", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr bitAndRest(AstExpr expr)", "full_signature": "protected final AstExpr bitAndRest(AstExpr expr)", "class_method_signature": "Parser.bitAndRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "bitOr", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr bitOr()", "full_signature": "protected final AstExpr bitOr()", "class_method_signature": "Parser.bitOr()", "testcase": false, "constructor": false}, {"identifier": "bitOrRest", "parameters": "(AstExpr expr)", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr bitOrRest(AstExpr expr)", "full_signature": "protected final AstExpr bitOrRest(AstExpr expr)", "class_method_signature": "Parser.bitOrRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "equality", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr equality()", "full_signature": "protected final AstExpr equality()", "class_method_signature": "Parser.equality()", "testcase": false, "constructor": false}, {"identifier": "equalityRest", "parameters": "(AstExpr expr)", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr equalityRest(AstExpr expr)", "full_signature": "protected final AstExpr equalityRest(AstExpr expr)", "class_method_signature": "Parser.equalityRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "additive", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr additive()", "full_signature": "protected final AstExpr additive()", "class_method_signature": "Parser.additive()", "testcase": false, "constructor": false}, {"identifier": "additiveRest", "parameters": "(AstExpr expr)", "modifiers": "protected", "return": "AstExpr", "signature": "AstExpr additiveRest(AstExpr expr)", "full_signature": "protected AstExpr additiveRest(AstExpr expr)", "class_method_signature": "Parser.additiveRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "shift", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr shift()", "full_signature": "protected final AstExpr shift()", "class_method_signature": "Parser.shift()", "testcase": false, "constructor": false}, {"identifier": "shiftRest", "parameters": "(AstExpr expr)", "modifiers": "protected", "return": "AstExpr", "signature": "AstExpr shiftRest(AstExpr expr)", "full_signature": "protected AstExpr shiftRest(AstExpr expr)", "class_method_signature": "Parser.shiftRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr and()", "full_signature": "protected final AstExpr and()", "class_method_signature": "Parser.and()", "testcase": false, "constructor": false}, {"identifier": "andRest", "parameters": "(AstExpr expr)", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr andRest(AstExpr expr)", "full_signature": "protected final AstExpr andRest(AstExpr expr)", "class_method_signature": "Parser.andRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr or()", "full_signature": "protected final AstExpr or()", "class_method_signature": "Parser.or()", "testcase": false, "constructor": false}, {"identifier": "orRest", "parameters": "(AstExpr expr)", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr orRest(AstExpr expr)", "full_signature": "protected final AstExpr orRest(AstExpr expr)", "class_method_signature": "Parser.orRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "conditional", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr conditional()", "full_signature": "protected final AstExpr conditional()", "class_method_signature": "Parser.conditional()", "testcase": false, "constructor": false}, {"identifier": "choiceRest", "parameters": "(AstExpr expr)", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr choiceRest(AstExpr expr)", "full_signature": "protected final AstExpr choiceRest(AstExpr expr)", "class_method_signature": "Parser.choiceRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr assign()", "full_signature": "protected final AstExpr assign()", "class_method_signature": "Parser.assign()", "testcase": false, "constructor": false}, {"identifier": "assignRest", "parameters": "(AstExpr expr)", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr assignRest(AstExpr expr)", "full_signature": "protected final AstExpr assignRest(AstExpr expr)", "class_method_signature": "Parser.assignRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "relational", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr relational()", "full_signature": "protected final AstExpr relational()", "class_method_signature": "Parser.relational()", "testcase": false, "constructor": false}, {"identifier": "relationalRest", "parameters": "(AstExpr expr)", "modifiers": "public", "return": "AstExpr", "signature": "AstExpr relationalRest(AstExpr expr)", "full_signature": "public AstExpr relationalRest(AstExpr expr)", "class_method_signature": "Parser.relationalRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "protected final", "return": "AstExpr", "signature": "AstExpr name()", "full_signature": "protected final AstExpr name()", "class_method_signature": "Parser.name()", "testcase": false, "constructor": false}, {"identifier": "primary", "parameters": "()", "modifiers": "public", "return": "AstExpr", "signature": "AstExpr primary()", "full_signature": "public AstExpr primary()", "class_method_signature": "Parser.primary()", "testcase": false, "constructor": false}, {"identifier": "primaryRest", "parameters": "(AstExpr expr)", "modifiers": "public", "return": "AstExpr", "signature": "AstExpr primaryRest(AstExpr expr)", "full_signature": "public AstExpr primaryRest(AstExpr expr)", "class_method_signature": "Parser.primaryRest(AstExpr expr)", "testcase": false, "constructor": false}, {"identifier": "exprList", "parameters": "(Collection<AstExpr> c)", "modifiers": "protected final", "return": "void", "signature": "void exprList(Collection<AstExpr> c)", "full_signature": "protected final void exprList(Collection<AstExpr> c)", "class_method_signature": "Parser.exprList(Collection<AstExpr> c)", "testcase": false, "constructor": false}, {"identifier": "createFunction", "parameters": "(ElParseContext context, String name, List<AstExpr> params)", "modifiers": "protected", "return": "AstExpr", "signature": "AstExpr createFunction(ElParseContext context, String name, List<AstExpr> params)", "full_signature": "protected AstExpr createFunction(ElParseContext context, String name, List<AstExpr> params)", "class_method_signature": "Parser.createFunction(ElParseContext context, String name, List<AstExpr> params)", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/el/spel/parser/Parser.java"}, "focal_method": {"identifier": "expr", "parameters": "()", "modifiers": "protected", "return": "AstExpr", "body": "protected AstExpr expr() {\n        AstExpr expr = primary();\n\n        if (lexer.token() == Token.COMMA) {\n            return expr;\n        }\n\n        return exprRest(expr);\n    }", "signature": "AstExpr expr()", "full_signature": "protected AstExpr expr()", "class_method_signature": "Parser.expr()", "testcase": false, "constructor": false, "invocations": ["primary", "token", "exprRest"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}