{"test_class": {"identifier": "XmlSeatsSpecTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtss/src/test/java/ec/demetra/xml/sa/tramoseats/XmlSeatsSpecTest.java"}, "test_case": {"identifier": "testMarshalling", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMarshalling() {\n        SeatsSpecification spec1 = new SeatsSpecification();\n        test(spec1);\n        spec1.setApproximationMode(SeatsSpecification.ApproximationMode.None);\n        spec1.setMethod(SeatsSpecification.EstimationMethod.KalmanSmoother);\n        test(spec1);\n        spec1.setSeasBoundary(0.5);\n        spec1.setSeasBoundary1(0.6);\n        test(spec1);\n        spec1.setSeasTolerance(0);\n        spec1.setTrendBoundary(.8);\n        spec1.setXlBoundary(.9);\n        test(spec1);\n    }", "signature": "void testMarshalling()", "full_signature": "@Test public void testMarshalling()", "class_method_signature": "XmlSeatsSpecTest.testMarshalling()", "testcase": true, "constructor": false, "invocations": ["test", "setApproximationMode", "setMethod", "test", "setSeasBoundary", "setSeasBoundary1", "test", "setSeasTolerance", "setTrendBoundary", "setXlBoundary", "test"]}, "focal_class": {"identifier": "XmlSeatsSpec", "superclass": "extends XmlDecompositionSpec", "interfaces": "", "fields": [{"original_string": "@XmlElement(name = \"EpsPhi\", defaultValue = \"2.0\")\n    protected Double epsPhi;", "modifier": "@XmlElement(name = \"EpsPhi\", defaultValue = \"2.0\")\n    protected", "type": "Double", "declarator": "epsPhi", "var_name": "epsPhi"}, {"original_string": "@XmlElement(name = \"RMod\", defaultValue = \"0.5\")\n    protected Double rMod;", "modifier": "@XmlElement(name = \"RMod\", defaultValue = \"0.5\")\n    protected", "type": "Double", "declarator": "rMod", "var_name": "rMod"}, {"original_string": "@XmlElement(name = \"SMod\", defaultValue = \"0.8\")\n    protected Double sMod;", "modifier": "@XmlElement(name = \"SMod\", defaultValue = \"0.8\")\n    protected", "type": "Double", "declarator": "sMod", "var_name": "sMod"}, {"original_string": "@XmlElement(name = \"StSMod\", defaultValue = \"0.8\")\n    protected Double stSMod;", "modifier": "@XmlElement(name = \"StSMod\", defaultValue = \"0.8\")\n    protected", "type": "Double", "declarator": "stSMod", "var_name": "stSMod"}, {"original_string": "@XmlElement(name = \"XL\", defaultValue = \"0.95\")\n    protected Double xl;", "modifier": "@XmlElement(name = \"XL\", defaultValue = \"0.95\")\n    protected", "type": "Double", "declarator": "xl", "var_name": "xl"}, {"original_string": "@XmlElement(name = \"ForceModel\", defaultValue = \"Legacy\")\n    @XmlSchemaType(name = \"NMTOKEN\")\n    protected SeatsSpecification.ApproximationMode forceModel;", "modifier": "@XmlElement(name = \"ForceModel\", defaultValue = \"Legacy\")\n    @XmlSchemaType(name = \"NMTOKEN\")\n    protected", "type": "SeatsSpecification.ApproximationMode", "declarator": "forceModel", "var_name": "forceModel"}, {"original_string": "@XmlElement(name = \"Method\", defaultValue = \"Burman\")\n    @XmlSchemaType(name = \"NMTOKEN\")\n    protected SeatsSpecification.EstimationMethod method;", "modifier": "@XmlElement(name = \"Method\", defaultValue = \"Burman\")\n    @XmlSchemaType(name = \"NMTOKEN\")\n    protected", "type": "SeatsSpecification.EstimationMethod", "declarator": "method", "var_name": "method"}, {"original_string": "public static final InPlaceXmlUnmarshaller<XmlSeatsSpec, SeatsSpecification> UNMARSHALLER = (XmlSeatsSpec xml, SeatsSpecification v) -> {\n        if (xml.epsPhi != null)\n            v.setSeasTolerance(xml.epsPhi);\n        if (xml.rMod != null)\n            v.setTrendBoundary(xml.rMod);\n        if (xml.sMod != null)\n            v.setSeasBoundary(xml.sMod);\n        if (xml.stSMod != null)\n            v.setSeasBoundary1(xml.stSMod);\n        if (xml.xl != null)\n            v.setXlBoundary(xml.xl);\n        if (xml.forceModel != null)\n            v.setApproximationMode(xml.forceModel);\n        if (xml.method != null)\n            v.setMethod(xml.method);\n        return true;\n    };", "modifier": "public static final", "type": "InPlaceXmlUnmarshaller<XmlSeatsSpec, SeatsSpecification>", "declarator": "UNMARSHALLER = (XmlSeatsSpec xml, SeatsSpecification v) -> {\n        if (xml.epsPhi != null)\n            v.setSeasTolerance(xml.epsPhi);\n        if (xml.rMod != null)\n            v.setTrendBoundary(xml.rMod);\n        if (xml.sMod != null)\n            v.setSeasBoundary(xml.sMod);\n        if (xml.stSMod != null)\n            v.setSeasBoundary1(xml.stSMod);\n        if (xml.xl != null)\n            v.setXlBoundary(xml.xl);\n        if (xml.forceModel != null)\n            v.setApproximationMode(xml.forceModel);\n        if (xml.method != null)\n            v.setMethod(xml.method);\n        return true;\n    }", "var_name": "UNMARSHALLER"}, {"original_string": "public static final InPlaceXmlMarshaller<XmlSeatsSpec, SeatsSpecification> MARSHALLER = (SeatsSpecification v, XmlSeatsSpec xml) -> {\n        if (v.isDefault())\n            return true;\n        xml.setEpsPhi(v.getSeasTolerance());\n        xml.setRMod(v.getTrendBoundary());\n        xml.setSMod(v.getSeasBoundary());\n        xml.setStSMod(v.getSeasBoundary1());\n        xml.setXL(v.getXlBoundary());\n        xml.setForceModel(v.getApproximationMode());\n        xml.setMethod(v.getMethod());\n        return true;\n    };", "modifier": "public static final", "type": "InPlaceXmlMarshaller<XmlSeatsSpec, SeatsSpecification>", "declarator": "MARSHALLER = (SeatsSpecification v, XmlSeatsSpec xml) -> {\n        if (v.isDefault())\n            return true;\n        xml.setEpsPhi(v.getSeasTolerance());\n        xml.setRMod(v.getTrendBoundary());\n        xml.setSMod(v.getSeasBoundary());\n        xml.setStSMod(v.getSeasBoundary1());\n        xml.setXL(v.getXlBoundary());\n        xml.setForceModel(v.getApproximationMode());\n        xml.setMethod(v.getMethod());\n        return true;\n    }", "var_name": "MARSHALLER"}], "methods": [{"identifier": "getEpsPhi", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getEpsPhi()", "full_signature": "public Double getEpsPhi()", "class_method_signature": "XmlSeatsSpec.getEpsPhi()", "testcase": false, "constructor": false}, {"identifier": "setEpsPhi", "parameters": "(Double value)", "modifiers": "public", "return": "void", "signature": "void setEpsPhi(Double value)", "full_signature": "public void setEpsPhi(Double value)", "class_method_signature": "XmlSeatsSpec.setEpsPhi(Double value)", "testcase": false, "constructor": false}, {"identifier": "getRMod", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getRMod()", "full_signature": "public Double getRMod()", "class_method_signature": "XmlSeatsSpec.getRMod()", "testcase": false, "constructor": false}, {"identifier": "setRMod", "parameters": "(Double value)", "modifiers": "public", "return": "void", "signature": "void setRMod(Double value)", "full_signature": "public void setRMod(Double value)", "class_method_signature": "XmlSeatsSpec.setRMod(Double value)", "testcase": false, "constructor": false}, {"identifier": "getSMod", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getSMod()", "full_signature": "public Double getSMod()", "class_method_signature": "XmlSeatsSpec.getSMod()", "testcase": false, "constructor": false}, {"identifier": "setSMod", "parameters": "(Double value)", "modifiers": "public", "return": "void", "signature": "void setSMod(Double value)", "full_signature": "public void setSMod(Double value)", "class_method_signature": "XmlSeatsSpec.setSMod(Double value)", "testcase": false, "constructor": false}, {"identifier": "getStSMod", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getStSMod()", "full_signature": "public Double getStSMod()", "class_method_signature": "XmlSeatsSpec.getStSMod()", "testcase": false, "constructor": false}, {"identifier": "setStSMod", "parameters": "(Double value)", "modifiers": "public", "return": "void", "signature": "void setStSMod(Double value)", "full_signature": "public void setStSMod(Double value)", "class_method_signature": "XmlSeatsSpec.setStSMod(Double value)", "testcase": false, "constructor": false}, {"identifier": "getXL", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getXL()", "full_signature": "public Double getXL()", "class_method_signature": "XmlSeatsSpec.getXL()", "testcase": false, "constructor": false}, {"identifier": "setXL", "parameters": "(Double value)", "modifiers": "public", "return": "void", "signature": "void setXL(Double value)", "full_signature": "public void setXL(Double value)", "class_method_signature": "XmlSeatsSpec.setXL(Double value)", "testcase": false, "constructor": false}, {"identifier": "getForceModel", "parameters": "()", "modifiers": "public", "return": "SeatsSpecification.ApproximationMode", "signature": "SeatsSpecification.ApproximationMode getForceModel()", "full_signature": "public SeatsSpecification.ApproximationMode getForceModel()", "class_method_signature": "XmlSeatsSpec.getForceModel()", "testcase": false, "constructor": false}, {"identifier": "setForceModel", "parameters": "(SeatsSpecification.ApproximationMode value)", "modifiers": "public", "return": "void", "signature": "void setForceModel(SeatsSpecification.ApproximationMode value)", "full_signature": "public void setForceModel(SeatsSpecification.ApproximationMode value)", "class_method_signature": "XmlSeatsSpec.setForceModel(SeatsSpecification.ApproximationMode value)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "()", "modifiers": "public", "return": "SeatsSpecification.EstimationMethod", "signature": "SeatsSpecification.EstimationMethod getMethod()", "full_signature": "public SeatsSpecification.EstimationMethod getMethod()", "class_method_signature": "XmlSeatsSpec.getMethod()", "testcase": false, "constructor": false}, {"identifier": "setMethod", "parameters": "(SeatsSpecification.EstimationMethod value)", "modifiers": "public", "return": "void", "signature": "void setMethod(SeatsSpecification.EstimationMethod value)", "full_signature": "public void setMethod(SeatsSpecification.EstimationMethod value)", "class_method_signature": "XmlSeatsSpec.setMethod(SeatsSpecification.EstimationMethod value)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/demetra/xml/sa/tramoseats/XmlSeatsSpec.java"}, "focal_method": {"identifier": "setMethod", "parameters": "(SeatsSpecification.EstimationMethod value)", "modifiers": "public", "return": "void", "body": "public void setMethod(SeatsSpecification.EstimationMethod value) {\n        if (value == SeatsSpecification.EstimationMethod.Burman) {\n            this.method = null;\n        } else {\n            this.method = value;\n        }\n    }", "signature": "void setMethod(SeatsSpecification.EstimationMethod value)", "full_signature": "public void setMethod(SeatsSpecification.EstimationMethod value)", "class_method_signature": "XmlSeatsSpec.setMethod(SeatsSpecification.EstimationMethod value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}