{"test_class": {"identifier": "SPDXParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private User dummyUser = new User().setEmail(\"dummy@some.domain\");", "modifier": "private", "type": "User", "declarator": "dummyUser = new User().setEmail(\"dummy@some.domain\")", "var_name": "dummyUser"}, {"original_string": "private SPDXParser parser;", "modifier": "private", "type": "SPDXParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private AttachmentContentStore attachmentContentStore;", "modifier": "private", "type": "AttachmentContentStore", "declarator": "attachmentContentStore", "var_name": "attachmentContentStore"}, {"original_string": "@Mock\n    private AttachmentConnector connector;", "modifier": "@Mock\n    private", "type": "AttachmentConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "public static final String spdxExampleFile = \"SPDXRdfExample-v2.0.rdf\";", "modifier": "public static final", "type": "String", "declarator": "spdxExampleFile = \"SPDXRdfExample-v2.0.rdf\"", "var_name": "spdxExampleFile"}, {"original_string": "public static final String spdx11ExampleFile = \"SPDXRdfExample-v1.1.rdf\";", "modifier": "public static final", "type": "String", "declarator": "spdx11ExampleFile = \"SPDXRdfExample-v1.1.rdf\"", "var_name": "spdx11ExampleFile"}, {"original_string": "public static final String spdx12ExampleFile = \"SPDXRdfExample-v1.2.rdf\";", "modifier": "public static final", "type": "String", "declarator": "spdx12ExampleFile = \"SPDXRdfExample-v1.2.rdf\"", "var_name": "spdx12ExampleFile"}], "file": "backend/src/src-licenseinfo/src/test/java/org/eclipse/sw360/licenseinfo/parsers/SPDXParserTest.java"}, "test_case": {"identifier": "testGetLicenseInfo", "parameters": "(String exampleFile, List<String> expectedLicenses, int numberOfCoyprights, String exampleCopyright)", "modifiers": "@Test @UseDataProvider(\"dataProviderAdd\") public", "return": "void", "body": "@Test\n    @UseDataProvider(\"dataProviderAdd\")\n    public void testGetLicenseInfo(String exampleFile, List<String> expectedLicenses, int numberOfCoyprights, String exampleCopyright) throws Exception {\n\n        Attachment attachment = makeAttachment(exampleFile,\n                Arrays.stream(AttachmentType.values())\n                        .filter(SW360Constants.LICENSE_INFO_ATTACHMENT_TYPES::contains)\n                        .findAny()\n                        .get());\n\n        LicenseInfoParsingResult result = parser.getLicenseInfos(attachment, dummyUser,\n                                            new Project()\n                                                    .setVisbility(Visibility.ME_AND_MODERATORS)\n                                                    .setCreatedBy(dummyUser.getEmail())\n                                                    .setAttachments(Collections.singleton(new Attachment().setAttachmentContentId(attachment.getAttachmentContentId()))))\n                .stream()\n                .findFirst()\n                .orElseThrow(()->new RuntimeException(\"Parser returned empty LisenceInfoParsingResult list\"));\n\n        assertLicenseInfoParsingResult(result);\n        assertIsResultOfExample(result.getLicenseInfo(), exampleFile, expectedLicenses, numberOfCoyprights, exampleCopyright);\n    }", "signature": "void testGetLicenseInfo(String exampleFile, List<String> expectedLicenses, int numberOfCoyprights, String exampleCopyright)", "full_signature": "@Test @UseDataProvider(\"dataProviderAdd\") public void testGetLicenseInfo(String exampleFile, List<String> expectedLicenses, int numberOfCoyprights, String exampleCopyright)", "class_method_signature": "SPDXParserTest.testGetLicenseInfo(String exampleFile, List<String> expectedLicenses, int numberOfCoyprights, String exampleCopyright)", "testcase": true, "constructor": false, "invocations": ["makeAttachment", "get", "findAny", "filter", "stream", "values", "orElseThrow", "findFirst", "stream", "getLicenseInfos", "setAttachments", "setCreatedBy", "setVisbility", "getEmail", "singleton", "setAttachmentContentId", "getAttachmentContentId", "assertLicenseInfoParsingResult", "assertIsResultOfExample", "getLicenseInfo"]}, "focal_class": {"identifier": "SPDXParser", "superclass": "extends LicenseInfoParser", "interfaces": "", "fields": [{"original_string": "protected static final String FILETYPE_SPDX_INTERNAL = \"RDF/XML\";", "modifier": "protected static final", "type": "String", "declarator": "FILETYPE_SPDX_INTERNAL = \"RDF/XML\"", "var_name": "FILETYPE_SPDX_INTERNAL"}, {"original_string": "protected static final String FILETYPE_SPDX_EXTENSION = \".rdf\";", "modifier": "protected static final", "type": "String", "declarator": "FILETYPE_SPDX_EXTENSION = \".rdf\"", "var_name": "FILETYPE_SPDX_EXTENSION"}, {"original_string": "private static final Logger log = Logger.getLogger(SPDXParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(SPDXParser.class)", "var_name": "log"}], "methods": [{"identifier": "SPDXParser", "parameters": "(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider)", "modifiers": "public", "return": "", "signature": " SPDXParser(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider)", "full_signature": "public  SPDXParser(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider)", "class_method_signature": "SPDXParser.SPDXParser(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider)", "testcase": false, "constructor": true}, {"identifier": "getApplicableFileExtensions", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getApplicableFileExtensions()", "full_signature": "@Override public List<String> getApplicableFileExtensions()", "class_method_signature": "SPDXParser.getApplicableFileExtensions()", "testcase": false, "constructor": false}, {"identifier": "getLicenseInfos", "parameters": "(Attachment attachment, User user, T context)", "modifiers": "@Override public", "return": "List<LicenseInfoParsingResult>", "signature": "List<LicenseInfoParsingResult> getLicenseInfos(Attachment attachment, User user, T context)", "full_signature": "@Override public List<LicenseInfoParsingResult> getLicenseInfos(Attachment attachment, User user, T context)", "class_method_signature": "SPDXParser.getLicenseInfos(Attachment attachment, User user, T context)", "testcase": false, "constructor": false}, {"identifier": "getLicenseInfo", "parameters": "(Attachment attachment, User user, T context)", "modifiers": "public", "return": "LicenseInfoParsingResult", "signature": "LicenseInfoParsingResult getLicenseInfo(Attachment attachment, User user, T context)", "full_signature": "public LicenseInfoParsingResult getLicenseInfo(Attachment attachment, User user, T context)", "class_method_signature": "SPDXParser.getLicenseInfo(Attachment attachment, User user, T context)", "testcase": false, "constructor": false}, {"identifier": "getUriOfAttachment", "parameters": "(AttachmentContent attachmentContent)", "modifiers": "protected", "return": "String", "signature": "String getUriOfAttachment(AttachmentContent attachmentContent)", "full_signature": "protected String getUriOfAttachment(AttachmentContent attachmentContent)", "class_method_signature": "SPDXParser.getUriOfAttachment(AttachmentContent attachmentContent)", "testcase": false, "constructor": false}, {"identifier": "openAsSpdx", "parameters": "(AttachmentContent attachmentContent, User user, T context)", "modifiers": "protected", "return": "Optional<SpdxDocument>", "signature": "Optional<SpdxDocument> openAsSpdx(AttachmentContent attachmentContent, User user, T context)", "full_signature": "protected Optional<SpdxDocument> openAsSpdx(AttachmentContent attachmentContent, User user, T context)", "class_method_signature": "SPDXParser.openAsSpdx(AttachmentContent attachmentContent, User user, T context)", "testcase": false, "constructor": false}], "file": "backend/src/src-licenseinfo/src/main/java/org/eclipse/sw360/licenseinfo/parsers/SPDXParser.java"}, "focal_method": {"identifier": "getLicenseInfo", "parameters": "(Attachment attachment, User user, T context)", "modifiers": "public", "return": "LicenseInfoParsingResult", "body": "public <T> LicenseInfoParsingResult getLicenseInfo(Attachment attachment, User user, T context) throws TException {\n        AttachmentContent attachmentContent = attachmentContentProvider.getAttachmentContent(attachment);\n\n        final Optional<SpdxDocument> spdxDocument = openAsSpdx(attachmentContent, user, context);\n        if(! spdxDocument.isPresent()){\n            return new LicenseInfoParsingResult()\n                    .setStatus(LicenseInfoRequestStatus.FAILURE);\n        }\n\n        return getLicenseInfoFromSpdx(attachmentContent, spdxDocument.get());\n    }", "signature": "LicenseInfoParsingResult getLicenseInfo(Attachment attachment, User user, T context)", "full_signature": "public LicenseInfoParsingResult getLicenseInfo(Attachment attachment, User user, T context)", "class_method_signature": "SPDXParser.getLicenseInfo(Attachment attachment, User user, T context)", "testcase": false, "constructor": false, "invocations": ["getAttachmentContent", "openAsSpdx", "isPresent", "setStatus", "getLicenseInfoFromSpdx", "get"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}