{"test_class": {"identifier": "TestBaseTimestampOracle", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BaseTimestampOracle timestampOracle;", "modifier": "private", "type": "BaseTimestampOracle", "declarator": "timestampOracle", "var_name": "timestampOracle"}, {"original_string": "private GetTimestampInvokeThread[] getThreads;", "modifier": "private", "type": "GetTimestampInvokeThread[]", "declarator": "getThreads", "var_name": "getThreads"}, {"original_string": "private static final String TIMESTAMP_EXCEPTION_STRING = \"Timestamp Exception\";", "modifier": "private static final", "type": "String", "declarator": "TIMESTAMP_EXCEPTION_STRING = \"Timestamp Exception\"", "var_name": "TIMESTAMP_EXCEPTION_STRING"}], "file": "themis-client/src/test/java/org/apache/hadoop/hbase/themis/timestamp/TestBaseTimestampOracle.java"}, "test_case": {"identifier": "testGetTimestampWithBatchImplTimeout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetTimestampWithBatchImplTimeout() throws Exception {\n    // test single thread\n    createBatchOracleWithTimeoutImpl(1, 100, 150);\n    long startTs = System.currentTimeMillis();\n    try {\n      timestampOracle.getRequestIdWithTimestamp();\n      Assert.fail();\n    } catch (Exception e) {\n      Assert.assertTrue(e.getCause() instanceof TimeoutException);\n    } finally {\n      long consume = System.currentTimeMillis() - startTs;\n      Assert.assertTrue(consume >= 100 && consume < 150);\n    }\n    \n    // test multi thread\n    createBatchOracleWithTimeoutImpl(1, 100, 150);\n    createGetThreads(3, 1);\n    startGetThreads(true);\n    waitGetThreads();\n    Assert.assertTrue(getRootCause(getThreads[0].results[0]) instanceof TimeoutException);\n    Assert.assertTrue(getRootCause(getThreads[1].results[0]) instanceof TimeoutException);\n    Assert.assertTrue(getRootCause(getThreads[2].results[0]) instanceof RejectedExecutionException);\n  }", "signature": "void testGetTimestampWithBatchImplTimeout()", "full_signature": "@Test public void testGetTimestampWithBatchImplTimeout()", "class_method_signature": "TestBaseTimestampOracle.testGetTimestampWithBatchImplTimeout()", "testcase": true, "constructor": false, "invocations": ["createBatchOracleWithTimeoutImpl", "currentTimeMillis", "getRequestIdWithTimestamp", "fail", "assertTrue", "getCause", "currentTimeMillis", "assertTrue", "createBatchOracleWithTimeoutImpl", "createGetThreads", "startGetThreads", "waitGetThreads", "assertTrue", "getRootCause", "assertTrue", "getRootCause", "assertTrue", "getRootCause"]}, "focal_class": {"identifier": "BaseTimestampOracle", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(BaseTimestampOracle.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(BaseTimestampOracle.class)", "var_name": "LOG"}, {"original_string": "private final ThreadPoolExecutor executor;", "modifier": "private final", "type": "ThreadPoolExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private final ArrayBlockingQueue<Runnable> requestQueue;", "modifier": "private final", "type": "ArrayBlockingQueue<Runnable>", "declarator": "requestQueue", "var_name": "requestQueue"}, {"original_string": "private final int maxQueuedRequestCount;", "modifier": "private final", "type": "int", "declarator": "maxQueuedRequestCount", "var_name": "maxQueuedRequestCount"}, {"original_string": "private final int requestTimeout;", "modifier": "private final", "type": "int", "declarator": "requestTimeout", "var_name": "requestTimeout"}, {"original_string": "private static long currentRequestId = 0;", "modifier": "private static", "type": "long", "declarator": "currentRequestId = 0", "var_name": "currentRequestId"}, {"original_string": "private static long currentTimestamp = 0;", "modifier": "private static", "type": "long", "declarator": "currentTimestamp = 0", "var_name": "currentTimestamp"}, {"original_string": "private static int cachedTimestampCount = 0;", "modifier": "private static", "type": "int", "declarator": "cachedTimestampCount = 0", "var_name": "cachedTimestampCount"}], "methods": [{"identifier": "BaseTimestampOracle", "parameters": "(Configuration conf)", "modifiers": "public", "return": "", "signature": " BaseTimestampOracle(Configuration conf)", "full_signature": "public  BaseTimestampOracle(Configuration conf)", "class_method_signature": "BaseTimestampOracle.BaseTimestampOracle(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "getRequestIdWithTimestamp", "parameters": "()", "modifiers": "public", "return": "Pair<Long, Long>", "signature": "Pair<Long, Long> getRequestIdWithTimestamp()", "full_signature": "public Pair<Long, Long> getRequestIdWithTimestamp()", "class_method_signature": "BaseTimestampOracle.getRequestIdWithTimestamp()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "BaseTimestampOracle.close()", "testcase": false, "constructor": false}, {"identifier": "getRequestIdWithTimestamp", "parameters": "(long timeout)", "modifiers": "protected", "return": "Pair<Long, Long>", "signature": "Pair<Long, Long> getRequestIdWithTimestamp(long timeout)", "full_signature": "protected Pair<Long, Long> getRequestIdWithTimestamp(long timeout)", "class_method_signature": "BaseTimestampOracle.getRequestIdWithTimestamp(long timeout)", "testcase": false, "constructor": false}, {"identifier": "getTimestamps", "parameters": "(int n)", "modifiers": "public abstract", "return": "long", "signature": "long getTimestamps(int n)", "full_signature": "public abstract long getTimestamps(int n)", "class_method_signature": "BaseTimestampOracle.getTimestamps(int n)", "testcase": false, "constructor": false}], "file": "themis-client/src/main/java/org/apache/hadoop/hbase/themis/timestamp/BaseTimestampOracle.java"}, "focal_method": {"identifier": "getRequestIdWithTimestamp", "parameters": "()", "modifiers": "public", "return": "Pair<Long, Long>", "body": "public Pair<Long, Long> getRequestIdWithTimestamp() throws IOException {\n    return getRequestIdWithTimestamp(0);\n  }", "signature": "Pair<Long, Long> getRequestIdWithTimestamp()", "full_signature": "public Pair<Long, Long> getRequestIdWithTimestamp()", "class_method_signature": "BaseTimestampOracle.getRequestIdWithTimestamp()", "testcase": false, "constructor": false, "invocations": ["getRequestIdWithTimestamp"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}