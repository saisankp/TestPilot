{"test_class": {"identifier": "CachedThreadPoolTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/cached/CachedThreadPoolTest.java"}, "test_case": {"identifier": "getExecutor2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getExecutor2() throws Exception {\n        URL url = URL.valueOf(\"dubbo://10.20.130.230:20880/context/path?\" + QUEUES_KEY + \"=1\");\n        ThreadPool threadPool = new CachedThreadPool();\n        ThreadPoolExecutor executor = (ThreadPoolExecutor) threadPool.getExecutor(url);\n        assertThat(executor.getQueue(), Matchers.<BlockingQueue<Runnable>>instanceOf(LinkedBlockingQueue.class));\n    }", "signature": "void getExecutor2()", "full_signature": "@Test public void getExecutor2()", "class_method_signature": "CachedThreadPoolTest.getExecutor2()", "testcase": true, "constructor": false, "invocations": ["valueOf", "getExecutor", "assertThat", "getQueue", "instanceOf"]}, "focal_class": {"identifier": "CachedThreadPool", "superclass": "", "interfaces": "implements ThreadPool", "fields": [], "methods": [{"identifier": "getExecutor", "parameters": "(URL url)", "modifiers": "@Override public", "return": "Executor", "signature": "Executor getExecutor(URL url)", "full_signature": "@Override public Executor getExecutor(URL url)", "class_method_signature": "CachedThreadPool.getExecutor(URL url)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/cached/CachedThreadPool.java"}, "focal_method": {"identifier": "getExecutor", "parameters": "(URL url)", "modifiers": "@Override public", "return": "Executor", "body": "@Override\n    public Executor getExecutor(URL url) {\n        String name = url.getParameter(THREAD_NAME_KEY, DEFAULT_THREAD_NAME);\n        int cores = url.getParameter(CORE_THREADS_KEY, DEFAULT_CORE_THREADS);\n        int threads = url.getParameter(THREADS_KEY, Integer.MAX_VALUE);\n        int queues = url.getParameter(QUEUES_KEY, DEFAULT_QUEUES);\n        int alive = url.getParameter(ALIVE_KEY, DEFAULT_ALIVE);\n        return new ThreadPoolExecutor(cores, threads, alive, TimeUnit.MILLISECONDS,\n                queues == 0 ? new SynchronousQueue<Runnable>() :\n                        (queues < 0 ? new LinkedBlockingQueue<Runnable>()\n                                : new LinkedBlockingQueue<Runnable>(queues)),\n                new NamedInternalThreadFactory(name, true), new AbortPolicyWithReport(name, url));\n    }", "signature": "Executor getExecutor(URL url)", "full_signature": "@Override public Executor getExecutor(URL url)", "class_method_signature": "CachedThreadPool.getExecutor(URL url)", "testcase": false, "constructor": false, "invocations": ["getParameter", "getParameter", "getParameter", "getParameter", "getParameter"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}