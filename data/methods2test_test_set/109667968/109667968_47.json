{"test_class": {"identifier": "OfflineServiceHelperTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Mock\n    private Context context;", "modifier": "@Mock\n    private", "type": "Context", "declarator": "context", "var_name": "context"}], "file": "library/src/test/java/io/ona/kujaku/helpers/OfflineServiceHelperTest.java"}, "test_case": {"identifier": "stopMapDownloadShouldCreateValidIntentAndCallStartService", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void stopMapDownloadShouldCreateValidIntentAndCallStartService() {\n        String mapName = \"kampala-map\";\n        String mapboxAccessToken = \"access-token-here\";\n        ArrayList<Object> results = new ArrayList<>();\n\n        Mockito.doAnswer(new Answer() {\n            @Override\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                Intent intent = invocation.getArgument(0);\n\n                results.add(intent.getStringExtra(Constants.PARCELABLE_KEY_MAP_UNIQUE_NAME));\n                results.add(intent.getStringExtra(Constants.PARCELABLE_KEY_MAPBOX_ACCESS_TOKEN));\n                results.add(intent.getExtras().get(Constants.PARCELABLE_KEY_SERVICE_ACTION));\n                results.add(intent.getExtras().get(Constants.PARCELABLE_KEY_DELETE_TASK_TYPE));\n\n                return null;\n            }\n        })\n                .when(context)\n                .startService(Mockito.any(Intent.class));\n\n        OfflineServiceHelper.stopMapDownload(context, mapName, mapboxAccessToken);\n\n        Mockito.verify(context, Mockito.times(1))\n                .startService(Mockito.any(Intent.class));\n\n        assertEquals(mapName, results.get(0));\n        assertEquals(mapboxAccessToken, results.get(1));\n        assertEquals(MapboxOfflineDownloaderService.SERVICE_ACTION.STOP_CURRENT_DOWNLOAD, results.get(2));\n        assertEquals(MapBoxOfflineQueueTask.TASK_TYPE_DOWNLOAD, results.get(3));\n    }", "signature": "void stopMapDownloadShouldCreateValidIntentAndCallStartService()", "full_signature": "@Test public void stopMapDownloadShouldCreateValidIntentAndCallStartService()", "class_method_signature": "OfflineServiceHelperTest.stopMapDownloadShouldCreateValidIntentAndCallStartService()", "testcase": true, "constructor": false, "invocations": ["startService", "when", "doAnswer", "getArgument", "add", "getStringExtra", "add", "getStringExtra", "add", "get", "getExtras", "add", "get", "getExtras", "any", "stopMapDownload", "startService", "verify", "times", "any", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "OfflineServiceHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "requestOfflineMapDownload", "parameters": "(@NonNull Context context, @NonNull String mapName,\n                                          @NonNull String mapboxStyleUrl, @NonNull String mapBoxAccessToken,\n                                          @NonNull LatLng topLeftBound, @NonNull LatLng topRightBound,\n                                          @NonNull LatLng bottomRightBound, @NonNull LatLng bottomLeftBound,\n                                          @NonNull ZoomRange zoomRange)", "modifiers": "public static", "return": "void", "signature": "void requestOfflineMapDownload(@NonNull Context context, @NonNull String mapName,\n                                          @NonNull String mapboxStyleUrl, @NonNull String mapBoxAccessToken,\n                                          @NonNull LatLng topLeftBound, @NonNull LatLng topRightBound,\n                                          @NonNull LatLng bottomRightBound, @NonNull LatLng bottomLeftBound,\n                                          @NonNull ZoomRange zoomRange)", "full_signature": "public static void requestOfflineMapDownload(@NonNull Context context, @NonNull String mapName,\n                                          @NonNull String mapboxStyleUrl, @NonNull String mapBoxAccessToken,\n                                          @NonNull LatLng topLeftBound, @NonNull LatLng topRightBound,\n                                          @NonNull LatLng bottomRightBound, @NonNull LatLng bottomLeftBound,\n                                          @NonNull ZoomRange zoomRange)", "class_method_signature": "OfflineServiceHelper.requestOfflineMapDownload(@NonNull Context context, @NonNull String mapName,\n                                          @NonNull String mapboxStyleUrl, @NonNull String mapBoxAccessToken,\n                                          @NonNull LatLng topLeftBound, @NonNull LatLng topRightBound,\n                                          @NonNull LatLng bottomRightBound, @NonNull LatLng bottomLeftBound,\n                                          @NonNull ZoomRange zoomRange)", "testcase": false, "constructor": false}, {"identifier": "requestOfflineMapDownload", "parameters": "(@NonNull Context context, @NonNull String mapName,\n                                                 @NonNull String mapboxStyleUrl, @NonNull String mapBoxAccessToken,\n                                                 @NonNull LatLng topLeftBound, @NonNull LatLng topRightBound,\n                                                 @NonNull LatLng bottomRightBound, @NonNull LatLng bottomLeftBound,\n                                                 @NonNull ZoomRange zoomRange, @NonNull Long tileDownloadLimit)", "modifiers": "public static", "return": "void", "signature": "void requestOfflineMapDownload(@NonNull Context context, @NonNull String mapName,\n                                                 @NonNull String mapboxStyleUrl, @NonNull String mapBoxAccessToken,\n                                                 @NonNull LatLng topLeftBound, @NonNull LatLng topRightBound,\n                                                 @NonNull LatLng bottomRightBound, @NonNull LatLng bottomLeftBound,\n                                                 @NonNull ZoomRange zoomRange, @NonNull Long tileDownloadLimit)", "full_signature": "public static void requestOfflineMapDownload(@NonNull Context context, @NonNull String mapName,\n                                                 @NonNull String mapboxStyleUrl, @NonNull String mapBoxAccessToken,\n                                                 @NonNull LatLng topLeftBound, @NonNull LatLng topRightBound,\n                                                 @NonNull LatLng bottomRightBound, @NonNull LatLng bottomLeftBound,\n                                                 @NonNull ZoomRange zoomRange, @NonNull Long tileDownloadLimit)", "class_method_signature": "OfflineServiceHelper.requestOfflineMapDownload(@NonNull Context context, @NonNull String mapName,\n                                                 @NonNull String mapboxStyleUrl, @NonNull String mapBoxAccessToken,\n                                                 @NonNull LatLng topLeftBound, @NonNull LatLng topRightBound,\n                                                 @NonNull LatLng bottomRightBound, @NonNull LatLng bottomLeftBound,\n                                                 @NonNull ZoomRange zoomRange, @NonNull Long tileDownloadLimit)", "testcase": false, "constructor": false}, {"identifier": "deleteOfflineMap", "parameters": "(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken)", "modifiers": "public static", "return": "void", "signature": "void deleteOfflineMap(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken)", "full_signature": "public static void deleteOfflineMap(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken)", "class_method_signature": "OfflineServiceHelper.deleteOfflineMap(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken)", "testcase": false, "constructor": false}, {"identifier": "stopMapDownload", "parameters": "(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken)", "modifiers": "public static", "return": "void", "signature": "void stopMapDownload(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken)", "full_signature": "public static void stopMapDownload(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken)", "class_method_signature": "OfflineServiceHelper.stopMapDownload(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken)", "testcase": false, "constructor": false}], "file": "library/src/main/java/io/ona/kujaku/helpers/OfflineServiceHelper.java"}, "focal_method": {"identifier": "stopMapDownload", "parameters": "(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken)", "modifiers": "public static", "return": "void", "body": "public static void stopMapDownload(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken) {\n        Intent stopDownloadIntent = new Intent(context, MapboxOfflineDownloaderService.class);\n        stopDownloadIntent.putExtra(Constants.PARCELABLE_KEY_SERVICE_ACTION, MapboxOfflineDownloaderService.SERVICE_ACTION.STOP_CURRENT_DOWNLOAD);\n        stopDownloadIntent.putExtra(Constants.PARCELABLE_KEY_MAP_UNIQUE_NAME, mapName);\n        stopDownloadIntent.putExtra(Constants.PARCELABLE_KEY_MAPBOX_ACCESS_TOKEN, mapBoxAccessToken);\n        stopDownloadIntent.putExtra(Constants.PARCELABLE_KEY_DELETE_TASK_TYPE, MapBoxOfflineQueueTask.TASK_TYPE_DOWNLOAD);\n\n        context.startService(stopDownloadIntent);\n    }", "signature": "void stopMapDownload(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken)", "full_signature": "public static void stopMapDownload(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken)", "class_method_signature": "OfflineServiceHelper.stopMapDownload(@NonNull Context context, @NonNull String mapName, @NonNull String mapBoxAccessToken)", "testcase": false, "constructor": false, "invocations": ["putExtra", "putExtra", "putExtra", "putExtra", "startService"]}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}