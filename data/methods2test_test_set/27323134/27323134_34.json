{"test_class": {"identifier": "DvrDataRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateTime FAKE_START_TIME = new DateTime();", "modifier": "private static final", "type": "DateTime", "declarator": "FAKE_START_TIME = new DateTime()", "var_name": "FAKE_START_TIME"}, {"original_string": "private static final DateTime FAKE_END_TIME = new DateTime();", "modifier": "private static final", "type": "DateTime", "declarator": "FAKE_END_TIME = new DateTime()", "var_name": "FAKE_END_TIME"}, {"original_string": "private static final String FAKE_TITLE = \"fake title\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_TITLE = \"fake title\"", "var_name": "FAKE_TITLE"}, {"original_string": "private static final String FAKE_SUB_TITLE = \"fake sub title\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_SUB_TITLE = \"fake sub title\"", "var_name": "FAKE_SUB_TITLE"}, {"original_string": "private static final String FAKE_CATEGORY = \"fake category\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_CATEGORY = \"fake category\"", "var_name": "FAKE_CATEGORY"}, {"original_string": "private static final String FAKE_CATTYPE = \"fake catType\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_CATTYPE = \"fake catType\"", "var_name": "FAKE_CATTYPE"}, {"original_string": "private static final boolean FAKE_REPEAT = false;", "modifier": "private static final", "type": "boolean", "declarator": "FAKE_REPEAT = false", "var_name": "FAKE_REPEAT"}, {"original_string": "private static final int FAKE_VIDEOPROPS = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_VIDEOPROPS = 1", "var_name": "FAKE_VIDEOPROPS"}, {"original_string": "private static final int FAKE_AUDIOPROPS = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_AUDIOPROPS = 1", "var_name": "FAKE_AUDIOPROPS"}, {"original_string": "private static final int FAKE_SUBPROPS = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_SUBPROPS = 1", "var_name": "FAKE_SUBPROPS"}, {"original_string": "private static final String FAKE_SERIESID = \"fake seriesId\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_SERIESID = \"fake seriesId\"", "var_name": "FAKE_SERIESID"}, {"original_string": "private static final String FAKE_PROGRAMID = \"fake programId\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_PROGRAMID = \"fake programId\"", "var_name": "FAKE_PROGRAMID"}, {"original_string": "private static final double FAKE_STARS = 1.0;", "modifier": "private static final", "type": "double", "declarator": "FAKE_STARS = 1.0", "var_name": "FAKE_STARS"}, {"original_string": "private static final long FAKE_FILESIZE = 1L;", "modifier": "private static final", "type": "long", "declarator": "FAKE_FILESIZE = 1L", "var_name": "FAKE_FILESIZE"}, {"original_string": "private static final DateTime FAKE_LASTMODIFIED = new DateTime();", "modifier": "private static final", "type": "DateTime", "declarator": "FAKE_LASTMODIFIED = new DateTime()", "var_name": "FAKE_LASTMODIFIED"}, {"original_string": "private static final int FAKE_PROGRAMFLAGS = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_PROGRAMFLAGS = 1", "var_name": "FAKE_PROGRAMFLAGS"}, {"original_string": "private static final String FAKE_FILENAME = \"fake fileName\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_FILENAME = \"fake fileName\"", "var_name": "FAKE_FILENAME"}, {"original_string": "private static final String FAKE_HOSTNAME = \"fake hostName\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_HOSTNAME = \"fake hostName\"", "var_name": "FAKE_HOSTNAME"}, {"original_string": "private static final LocalDate FAKE_AIRDATE = new LocalDate();", "modifier": "private static final", "type": "LocalDate", "declarator": "FAKE_AIRDATE = new LocalDate()", "var_name": "FAKE_AIRDATE"}, {"original_string": "private static final String FAKE_DESCRIPTION = \"fake description\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_DESCRIPTION = \"fake description\"", "var_name": "FAKE_DESCRIPTION"}, {"original_string": "private static final String FAKE_INETREF = \"fake inetref\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_INETREF = \"fake inetref\"", "var_name": "FAKE_INETREF"}, {"original_string": "private static final int FAKE_SEASON = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_SEASON = 1", "var_name": "FAKE_SEASON"}, {"original_string": "private static final int FAKE_EPISODE = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_EPISODE = 1", "var_name": "FAKE_EPISODE"}, {"original_string": "private static final int FAKE_TOTALEPISODES = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_TOTALEPISODES = 1", "var_name": "FAKE_TOTALEPISODES"}, {"original_string": "private static final int FAKE_ID = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_ID = 1", "var_name": "FAKE_ID"}, {"original_string": "private static final int FAKE_WIDTH = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_WIDTH = 1", "var_name": "FAKE_WIDTH"}, {"original_string": "private static final int FAKE_HEIGHT = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_HEIGHT = 1", "var_name": "FAKE_HEIGHT"}, {"original_string": "private static final int FAKE_BITRATE = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_BITRATE = 1", "var_name": "FAKE_BITRATE"}, {"original_string": "private static final int FAKE_AUDIO_BITRATE = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_AUDIO_BITRATE = 1", "var_name": "FAKE_AUDIO_BITRATE"}, {"original_string": "private static final int FAKE_SEGMENT_SIZE = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_SEGMENT_SIZE = 1", "var_name": "FAKE_SEGMENT_SIZE"}, {"original_string": "private static final int FAKE_MAX_SEGMENTS = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_MAX_SEGMENTS = 1", "var_name": "FAKE_MAX_SEGMENTS"}, {"original_string": "private static final int FAKE_START_SEGMENT = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_START_SEGMENT = 1", "var_name": "FAKE_START_SEGMENT"}, {"original_string": "private static final int FAKE_CURRENT_SEGMENT = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_CURRENT_SEGMENT = 1", "var_name": "FAKE_CURRENT_SEGMENT"}, {"original_string": "private static final int FAKE_SEGMENT_COUNT = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_SEGMENT_COUNT = 1", "var_name": "FAKE_SEGMENT_COUNT"}, {"original_string": "private static final int FAKE_PERCENT_COMPLETE = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_PERCENT_COMPLETE = 1", "var_name": "FAKE_PERCENT_COMPLETE"}, {"original_string": "private static final DateTime FAKE_CREATED = new DateTime();", "modifier": "private static final", "type": "DateTime", "declarator": "FAKE_CREATED = new DateTime()", "var_name": "FAKE_CREATED"}, {"original_string": "private static final DateTime FAKE_LAST_MODIFIED = new DateTime();", "modifier": "private static final", "type": "DateTime", "declarator": "FAKE_LAST_MODIFIED = new DateTime()", "var_name": "FAKE_LAST_MODIFIED"}, {"original_string": "private static final String FAKE_RELATIVE_URL = \"fake relative url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_RELATIVE_URL = \"fake relative url\"", "var_name": "FAKE_RELATIVE_URL"}, {"original_string": "private static final String FAKE_FULL_URL = \"fake full url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_FULL_URL = \"fake full url\"", "var_name": "FAKE_FULL_URL"}, {"original_string": "private static final String FAKE_STATUS_STR = \"fake status str\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_STATUS_STR = \"fake status str\"", "var_name": "FAKE_STATUS_STR"}, {"original_string": "private static final int FAKE_STATUS_INT = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_STATUS_INT = 1", "var_name": "FAKE_STATUS_INT"}, {"original_string": "private static final String FAKE_STATUS_MESSAGE = \"fake status message\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_STATUS_MESSAGE = \"fake status message\"", "var_name": "FAKE_STATUS_MESSAGE"}, {"original_string": "private static final String FAKE_SOURCE_FILE = \"fake source file\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_SOURCE_FILE = \"fake source file\"", "var_name": "FAKE_SOURCE_FILE"}, {"original_string": "private static final String FAKE_SOURCE_HOST = \"fake source host\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_SOURCE_HOST = \"fake source host\"", "var_name": "FAKE_SOURCE_HOST"}, {"original_string": "private static final int FAKE_SOURCE_WIDTH = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_SOURCE_WIDTH = 1", "var_name": "FAKE_SOURCE_WIDTH"}, {"original_string": "private static final int FAKE_SOURCE_HEIGHT = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_SOURCE_HEIGHT = 1", "var_name": "FAKE_SOURCE_HEIGHT"}, {"original_string": "private static final int FAKE_AUDIO_ONLY_BITRATE = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_AUDIO_ONLY_BITRATE = 1", "var_name": "FAKE_AUDIO_ONLY_BITRATE"}, {"original_string": "private DvrDataRepository dvrDataRepository;", "modifier": "private", "type": "DvrDataRepository", "declarator": "dvrDataRepository", "var_name": "dvrDataRepository"}, {"original_string": "@Mock private DvrDataStoreFactory mockDvrDataStoreFactory;", "modifier": "@Mock private", "type": "DvrDataStoreFactory", "declarator": "mockDvrDataStoreFactory", "var_name": "mockDvrDataStoreFactory"}, {"original_string": "@Mock private DvrDataStore mockDvrDataStore;", "modifier": "@Mock private", "type": "DvrDataStore", "declarator": "mockDvrDataStore", "var_name": "mockDvrDataStore"}, {"original_string": "@Mock private ContentDataStore mockContentDataStore;", "modifier": "@Mock private", "type": "ContentDataStore", "declarator": "mockContentDataStore", "var_name": "mockContentDataStore"}, {"original_string": "@Mock private ProgramEntity mockProgramEntity;", "modifier": "@Mock private", "type": "ProgramEntity", "declarator": "mockProgramEntity", "var_name": "mockProgramEntity"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "mythtv-player/src/test/java/org/mythtv/android/data/repository/DvrDataRepositoryTest.java"}, "test_case": {"identifier": "testGetEncodersHappyCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetEncodersHappyCase() {\n\n        List<EncoderEntity> encodersList = new ArrayList<>();\n        encodersList.add( EncoderEntity.create( -1, \"\", false, false, -1, -1, false, Collections.emptyList(), createFakeProgramEntity() ) );\n\n        given( mockDvrDataStore.encoderEntityList() ).willReturn( Observable.just( encodersList ) );\n\n        dvrDataRepository.encoders();\n\n        verify( mockDvrDataStoreFactory ).createMasterBackendDataStore();\n        verify( mockDvrDataStore ).encoderEntityList();\n\n    }", "signature": "void testGetEncodersHappyCase()", "full_signature": "@Test public void testGetEncodersHappyCase()", "class_method_signature": "DvrDataRepositoryTest.testGetEncodersHappyCase()", "testcase": true, "constructor": false, "invocations": ["add", "create", "emptyList", "createFakeProgramEntity", "willReturn", "given", "encoderEntityList", "just", "encoders", "createMasterBackendDataStore", "verify", "encoderEntityList", "verify"]}, "focal_class": {"identifier": "DvrDataRepository", "superclass": "", "interfaces": "implements DvrRepository", "fields": [{"original_string": "private static final String TAG = DvrDataRepository.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = DvrDataRepository.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private static final String CONVERT2METHODREF = \"Convert2MethodRef\";", "modifier": "private static final", "type": "String", "declarator": "CONVERT2METHODREF = \"Convert2MethodRef\"", "var_name": "CONVERT2METHODREF"}, {"original_string": "private final DvrDataStoreFactory dvrDataStoreFactory;", "modifier": "private final", "type": "DvrDataStoreFactory", "declarator": "dvrDataStoreFactory", "var_name": "dvrDataStoreFactory"}], "methods": [{"identifier": "DvrDataRepository", "parameters": "( DvrDataStoreFactory dvrDataStoreFactory )", "modifiers": "@Inject public", "return": "", "signature": " DvrDataRepository( DvrDataStoreFactory dvrDataStoreFactory )", "full_signature": "@Inject public  DvrDataRepository( DvrDataStoreFactory dvrDataStoreFactory )", "class_method_signature": "DvrDataRepository.DvrDataRepository( DvrDataStoreFactory dvrDataStoreFactory )", "testcase": false, "constructor": true}, {"identifier": "encoders", "parameters": "()", "modifiers": "@SuppressWarnings( CONVERT2METHODREF ) @Override public", "return": "Observable<List<Encoder>>", "signature": "Observable<List<Encoder>> encoders()", "full_signature": "@SuppressWarnings( CONVERT2METHODREF ) @Override public Observable<List<Encoder>> encoders()", "class_method_signature": "DvrDataRepository.encoders()", "testcase": false, "constructor": false}], "file": "mythtv-player/src/main/java/org/mythtv/android/data/repository/DvrDataRepository.java"}, "focal_method": {"identifier": "encoders", "parameters": "()", "modifiers": "@SuppressWarnings( CONVERT2METHODREF ) @Override public", "return": "Observable<List<Encoder>>", "body": "@SuppressWarnings( CONVERT2METHODREF )\n    @Override\n    public Observable<List<Encoder>> encoders() {\n        Log.d( TAG, \"encoders : enter\" );\n\n        final DvrDataStore dvrDataStore = this.dvrDataStoreFactory.createMasterBackendDataStore();\n\n        return dvrDataStore.encoderEntityList()\n                .doOnError( throwable -> Log.e( TAG, \"encoders : error\", throwable ) )\n                .map( encoderEntities -> EncoderEntityDataMapper.transformCollection( encoderEntities ) );\n    }", "signature": "Observable<List<Encoder>> encoders()", "full_signature": "@SuppressWarnings( CONVERT2METHODREF ) @Override public Observable<List<Encoder>> encoders()", "class_method_signature": "DvrDataRepository.encoders()", "testcase": false, "constructor": false, "invocations": ["d", "createMasterBackendDataStore", "map", "doOnError", "encoderEntityList", "e", "transformCollection"]}, "repository": {"repo_id": 27323134, "url": "https://github.com/MythTV-Clients/MythtvPlayerForAndroid", "stars": 17, "created": "11/30/2014 3:26:45 AM +00:00", "updates": "2019-12-31T22:13:00+00:00", "fork": "False", "license": "licensed"}}