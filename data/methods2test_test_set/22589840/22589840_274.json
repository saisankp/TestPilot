{"test_class": {"identifier": "CampuskursCoOwnersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CampuskursCoOwners campuskursCoOwnersTestObject;", "modifier": "private", "type": "CampuskursCoOwners", "declarator": "campuskursCoOwnersTestObject", "var_name": "campuskursCoOwnersTestObject"}, {"original_string": "private BaseSecurity baseSecurityMock;", "modifier": "private", "type": "BaseSecurity", "declarator": "baseSecurityMock", "var_name": "baseSecurityMock"}, {"original_string": "private CampusConfiguration campusConfigurationMock;", "modifier": "private", "type": "CampusConfiguration", "declarator": "campusConfigurationMock", "var_name": "campusConfigurationMock"}], "file": "olat7.8/src/test/java/org/olat/lms/core/course/campus/impl/syncer/CampuskursCoOwnersTest.java"}, "test_case": {"identifier": "getDefaultCoOwners_duplicateCoOwnerName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDefaultCoOwners_duplicateCoOwnerName() {\n        String coOwnerName = \"test3\";\n        Identity coOwnerIdentityMock = mock(Identity.class);\n        String coOwnerConigValue = coOwnerName + \",\" + coOwnerName;\n        when(campusConfigurationMock.getDefaultCoOwnerUserNames()).thenReturn(coOwnerConigValue);\n        when(baseSecurityMock.findIdentityByName(coOwnerName)).thenReturn(coOwnerIdentityMock);\n        // Exercise\n        List<Identity> coOwners = campuskursCoOwnersTestObject.getDefaultCoOwners();\n        assertEquals(\"Wrong number of owners, duplicate identity can be added only once\", 1, coOwners.size());\n    }", "signature": "void getDefaultCoOwners_duplicateCoOwnerName()", "full_signature": "@Test public void getDefaultCoOwners_duplicateCoOwnerName()", "class_method_signature": "CampuskursCoOwnersTest.getDefaultCoOwners_duplicateCoOwnerName()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getDefaultCoOwnerUserNames", "thenReturn", "when", "findIdentityByName", "getDefaultCoOwners", "assertEquals", "size"]}, "focal_class": {"identifier": "CampuskursCoOwners", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "private static final String DELIMITER = \",\";", "modifier": "private static final", "type": "String", "declarator": "DELIMITER = \",\"", "var_name": "DELIMITER"}, {"original_string": "@Autowired\n    CampusConfiguration campusConfiguration;", "modifier": "@Autowired", "type": "CampusConfiguration", "declarator": "campusConfiguration", "var_name": "campusConfiguration"}, {"original_string": "@Autowired\n    BaseSecurity baseSecurity;", "modifier": "@Autowired", "type": "BaseSecurity", "declarator": "baseSecurity", "var_name": "baseSecurity"}, {"original_string": "private List<Identity> identites;", "modifier": "private", "type": "List<Identity>", "declarator": "identites", "var_name": "identites"}], "methods": [{"identifier": "getDefaultCoOwners", "parameters": "()", "modifiers": "public", "return": "List<Identity>", "signature": "List<Identity> getDefaultCoOwners()", "full_signature": "public List<Identity> getDefaultCoOwners()", "class_method_signature": "CampuskursCoOwners.getDefaultCoOwners()", "testcase": false, "constructor": false}, {"identifier": "initCoOwnerIdentities", "parameters": "()", "modifiers": "private", "return": "List<Identity>", "signature": "List<Identity> initCoOwnerIdentities()", "full_signature": "private List<Identity> initCoOwnerIdentities()", "class_method_signature": "CampuskursCoOwners.initCoOwnerIdentities()", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/lms/core/course/campus/impl/syncer/CampuskursCoOwners.java"}, "focal_method": {"identifier": "getDefaultCoOwners", "parameters": "()", "modifiers": "public", "return": "List<Identity>", "body": "public List<Identity> getDefaultCoOwners() {\n        if (identites != null) {\n            return identites;\n        } else {\n            identites = initCoOwnerIdentities();\n            return identites;\n        }\n\n    }", "signature": "List<Identity> getDefaultCoOwners()", "full_signature": "public List<Identity> getDefaultCoOwners()", "class_method_signature": "CampuskursCoOwners.getDefaultCoOwners()", "testcase": false, "constructor": false, "invocations": ["initCoOwnerIdentities"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}