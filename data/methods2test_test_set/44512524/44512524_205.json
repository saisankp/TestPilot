{"test_class": {"identifier": "FilterActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QueryExecutor queryExecutor;", "modifier": "private", "type": "QueryExecutor", "declarator": "queryExecutor", "var_name": "queryExecutor"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private MockElasticsearchServer elasticsearchServer;", "modifier": "private", "type": "MockElasticsearchServer", "declarator": "elasticsearchServer", "var_name": "elasticsearchServer"}, {"original_string": "private HazelcastInstance hazelcastInstance;", "modifier": "private", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}], "file": "real-time/foxtrot/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/FilterActionTest.java"}, "test_case": {"identifier": "testQueryNoFilterAscending", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testQueryNoFilterAscending() throws QueryStoreException, JsonProcessingException {\n        Query query = new Query();\n        query.setTable(TestUtils.TEST_TABLE_NAME);\n        ResultSort resultSort = new ResultSort();\n        resultSort.setOrder(ResultSort.Order.asc);\n        resultSort.setField(\"_timestamp\");\n        query.setSort(resultSort);\n\n        List<Document> documents = new ArrayList<Document>();\n        documents.add(TestUtils.getDocument(\"W\", 1397658117001L, new Object[]{\"os\", \"android\", \"device\", \"nexus\", \"battery\", 99}, mapper));\n        documents.add(TestUtils.getDocument(\"X\", 1397658117002L, new Object[]{\"os\", \"android\", \"device\", \"nexus\", \"battery\", 74}, mapper));\n        documents.add(TestUtils.getDocument(\"Y\", 1397658117003L, new Object[]{\"os\", \"android\", \"device\", \"nexus\", \"battery\", 48}, mapper));\n        documents.add(TestUtils.getDocument(\"Z\", 1397658117004L, new Object[]{\"os\", \"android\", \"device\", \"nexus\", \"battery\", 24}, mapper));\n        documents.add(TestUtils.getDocument(\"A\", 1397658118000L, new Object[]{\"os\", \"android\", \"version\", 1, \"device\", \"nexus\"}, mapper));\n        documents.add(TestUtils.getDocument(\"B\", 1397658118001L, new Object[]{\"os\", \"android\", \"version\", 1, \"device\", \"galaxy\"}, mapper));\n        documents.add(TestUtils.getDocument(\"C\", 1397658118002L, new Object[]{\"os\", \"android\", \"version\", 2, \"device\", \"nexus\"}, mapper));\n        documents.add(TestUtils.getDocument(\"D\", 1397658118003L, new Object[]{\"os\", \"ios\", \"version\", 1, \"device\", \"iphone\"}, mapper));\n        documents.add(TestUtils.getDocument(\"E\", 1397658118004L, new Object[]{\"os\", \"ios\", \"version\", 2, \"device\", \"ipad\"}, mapper));\n\n        QueryResponse actualResponse = QueryResponse.class.cast(queryExecutor.execute(query));\n        compare(documents, actualResponse.getDocuments());\n    }", "signature": "void testQueryNoFilterAscending()", "full_signature": "@Test public void testQueryNoFilterAscending()", "class_method_signature": "FilterActionTest.testQueryNoFilterAscending()", "testcase": true, "constructor": false, "invocations": ["setTable", "setOrder", "setField", "setSort", "add", "getDocument", "add", "getDocument", "add", "getDocument", "add", "getDocument", "add", "getDocument", "add", "getDocument", "add", "getDocument", "add", "getDocument", "add", "getDocument", "cast", "execute", "compare", "getDocuments"]}, "focal_class": {"identifier": "FilterAction", "superclass": "extends Action<Query>", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FilterAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FilterAction.class)", "var_name": "logger"}], "methods": [{"identifier": "FilterAction", "parameters": "(Query parameter,\n                        TableMetadataManager tableMetadataManager,\n                        DataStore dataStore,\n                        QueryStore queryStore,\n                        ElasticsearchConnection connection,\n                        String cacheToken)", "modifiers": "public", "return": "", "signature": " FilterAction(Query parameter,\n                        TableMetadataManager tableMetadataManager,\n                        DataStore dataStore,\n                        QueryStore queryStore,\n                        ElasticsearchConnection connection,\n                        String cacheToken)", "full_signature": "public  FilterAction(Query parameter,\n                        TableMetadataManager tableMetadataManager,\n                        DataStore dataStore,\n                        QueryStore queryStore,\n                        ElasticsearchConnection connection,\n                        String cacheToken)", "class_method_signature": "FilterAction.FilterAction(Query parameter,\n                        TableMetadataManager tableMetadataManager,\n                        DataStore dataStore,\n                        QueryStore queryStore,\n                        ElasticsearchConnection connection,\n                        String cacheToken)", "testcase": false, "constructor": true}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override protected String getRequestCacheKey()", "class_method_signature": "FilterAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Query parameter)", "modifiers": "@Override public", "return": "QueryResponse", "signature": "QueryResponse execute(Query parameter)", "full_signature": "@Override public QueryResponse execute(Query parameter)", "class_method_signature": "FilterAction.execute(Query parameter)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/FilterAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(Query parameter)", "modifiers": "@Override public", "return": "QueryResponse", "body": "@Override\n    public QueryResponse execute(Query parameter) throws QueryStoreException {\n        parameter.setTable(ElasticsearchUtils.getValidTableName(parameter.getTable()));\n        if (null == parameter.getFilters() || parameter.getFilters().isEmpty()) {\n            parameter.setFilters(Lists.<Filter>newArrayList(new AnyFilter(parameter.getTable())));\n        }\n        if (null == parameter.getSort()) {\n            ResultSort resultSort = new ResultSort();\n            resultSort.setField(\"_timestamp\");\n            resultSort.setOrder(ResultSort.Order.desc);\n            parameter.setSort(resultSort);\n        }\n        SearchRequestBuilder search = null;\n        SearchResponse response;\n        try {\n            /*if(!tableManager.exists(query.getTable())) {\n                throw new QueryStoreException(QueryStoreException.ErrorCode.NO_SUCH_TABLE,\n                        \"There is no table called: \" + query.getTable());\n            }*/\n            search = getConnection().getClient().prepareSearch(ElasticsearchUtils.getIndices(parameter.getTable(), parameter))\n                    .setTypes(ElasticsearchUtils.TYPE_NAME)\n                    .setQuery(new ElasticSearchQueryGenerator(FilterCombinerType.and).genFilter(parameter.getFilters()))\n                    .setSearchType(SearchType.QUERY_THEN_FETCH)\n                    .setFrom(parameter.getFrom())\n                    .setSize(parameter.getLimit());\n            search.addSort(parameter.getSort().getField(),\n                    ResultSort.Order.desc == parameter.getSort().getOrder() ? SortOrder.DESC : SortOrder.ASC);\n            response = search.execute().actionGet();\n            Vector<String> ids = new Vector<String>();\n            for (SearchHit searchHit : response.getHits()) {\n                ids.add(searchHit.getId());\n            }\n            if (ids.isEmpty()) {\n                return new QueryResponse(Collections.<Document>emptyList());\n            }\n            return new QueryResponse(getQueryStore().get(parameter.getTable(), ids));\n        } catch (Exception e) {\n            if (null != search) {\n                logger.error(\"Error running generated query: \" + search, e);\n            } else {\n                logger.error(\"Query generation error: \", e);\n            }\n            throw new QueryStoreException(QueryStoreException.ErrorCode.QUERY_EXECUTION_ERROR,\n                    \"Error running query: \" + parameter.toString());\n        }\n    }", "signature": "QueryResponse execute(Query parameter)", "full_signature": "@Override public QueryResponse execute(Query parameter)", "class_method_signature": "FilterAction.execute(Query parameter)", "testcase": false, "constructor": false, "invocations": ["setTable", "getValidTableName", "getTable", "getFilters", "isEmpty", "getFilters", "setFilters", "newArrayList", "getTable", "getSort", "setField", "setOrder", "setSort", "setSize", "setFrom", "setSearchType", "setQuery", "setTypes", "prepareSearch", "getClient", "getConnection", "getIndices", "getTable", "genFilter", "getFilters", "getFrom", "getLimit", "addSort", "getField", "getSort", "getOrder", "getSort", "actionGet", "execute", "getHits", "add", "getId", "isEmpty", "emptyList", "get", "getQueryStore", "getTable", "error", "error", "toString"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}