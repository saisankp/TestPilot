{"test_class": {"identifier": "AllTest", "superclass": "", "interfaces": "", "fields": [], "file": "dockerfile-image-update/src/test/java/com/salesforce/dockerfileimageupdate/subcommands/impl/AllTest.java"}, "test_case": {"identifier": "testForkRepositoriesFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForkRepositoriesFound() throws Exception {\n        DockerfileGitHubUtil dockerfileGitHubUtil = mock(DockerfileGitHubUtil.class);\n\n        GHRepository contentRepo1 = mock(GHRepository.class);\n        GHRepository contentRepo2 = mock(GHRepository.class);\n        GHRepository contentRepo3 = mock(GHRepository.class);\n\n        GHContent content1 = mock(GHContent.class);\n        when(content1.getOwner()).thenReturn(contentRepo1);\n        GHContent content2 = mock(GHContent.class);\n        when(content2.getOwner()).thenReturn(contentRepo2);\n        GHContent content3 = mock(GHContent.class);\n        when(content3.getOwner()).thenReturn(contentRepo3);\n\n        PagedSearchIterable<GHContent> contentsWithImage = mock(PagedSearchIterable.class);\n\n        PagedIterator<GHContent> contentsWithImageIterator = mock(PagedIterator.class);\n        when(contentsWithImageIterator.hasNext()).thenReturn(true, true, true, false);\n        when(contentsWithImageIterator.next()).thenReturn(content1, content2, content3, null);\n        when(contentsWithImage.iterator()).thenReturn(contentsWithImageIterator);\n\n        All all = new All();\n        all.loadDockerfileGithubUtil(dockerfileGitHubUtil);\n        all.forkRepositoriesFound(ArrayListMultimap.create(), ArrayListMultimap.create(), contentsWithImage, \"image\");\n\n        Mockito.verify(dockerfileGitHubUtil, times(3)).getOrCreateFork(any());\n    }", "signature": "void testForkRepositoriesFound()", "full_signature": "@Test public void testForkRepositoriesFound()", "class_method_signature": "AllTest.testForkRepositoriesFound()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "getOwner", "mock", "thenReturn", "when", "getOwner", "mock", "thenReturn", "when", "getOwner", "mock", "mock", "thenReturn", "when", "hasNext", "thenReturn", "when", "next", "thenReturn", "when", "iterator", "loadDockerfileGithubUtil", "forkRepositoriesFound", "create", "create", "getOrCreateFork", "verify", "times", "any"]}, "focal_class": {"identifier": "All", "superclass": "", "interfaces": "implements ExecutableWithNamespace", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(All.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(All.class)", "var_name": "log"}, {"original_string": "private DockerfileGitHubUtil dockerfileGitHubUtil;", "modifier": "private", "type": "DockerfileGitHubUtil", "declarator": "dockerfileGitHubUtil", "var_name": "dockerfileGitHubUtil"}], "methods": [{"identifier": "execute", "parameters": "(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "full_signature": "@Override public void execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "class_method_signature": "All.execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "testcase": false, "constructor": false}, {"identifier": "loadDockerfileGithubUtil", "parameters": "(DockerfileGitHubUtil _dockerfileGitHubUtil)", "modifiers": "protected", "return": "void", "signature": "void loadDockerfileGithubUtil(DockerfileGitHubUtil _dockerfileGitHubUtil)", "full_signature": "protected void loadDockerfileGithubUtil(DockerfileGitHubUtil _dockerfileGitHubUtil)", "class_method_signature": "All.loadDockerfileGithubUtil(DockerfileGitHubUtil _dockerfileGitHubUtil)", "testcase": false, "constructor": false}, {"identifier": "forkRepositoriesFound", "parameters": "(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image)", "modifiers": "protected", "return": "void", "signature": "void forkRepositoriesFound(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image)", "full_signature": "protected void forkRepositoriesFound(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image)", "class_method_signature": "All.forkRepositoriesFound(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image)", "testcase": false, "constructor": false}, {"identifier": "parseStoreToImagesMap", "parameters": "(String storeName)", "modifiers": "protected", "return": "Set<Map.Entry<String, JsonElement>>", "signature": "Set<Map.Entry<String, JsonElement>> parseStoreToImagesMap(String storeName)", "full_signature": "protected Set<Map.Entry<String, JsonElement>> parseStoreToImagesMap(String storeName)", "class_method_signature": "All.parseStoreToImagesMap(String storeName)", "testcase": false, "constructor": false}, {"identifier": "changeDockerfiles", "parameters": "(Namespace ns,\n                                     Multimap<String, String> pathToDockerfilesInParentRepo,\n                                     Multimap<String, String> imagesFoundInParentRepo,\n                                     Map<String, String> imageToTagMap,\n                                     GHRepository currUserRepo,\n                                     List<String> skippedRepos)", "modifiers": "protected", "return": "void", "signature": "void changeDockerfiles(Namespace ns,\n                                     Multimap<String, String> pathToDockerfilesInParentRepo,\n                                     Multimap<String, String> imagesFoundInParentRepo,\n                                     Map<String, String> imageToTagMap,\n                                     GHRepository currUserRepo,\n                                     List<String> skippedRepos)", "full_signature": "protected void changeDockerfiles(Namespace ns,\n                                     Multimap<String, String> pathToDockerfilesInParentRepo,\n                                     Multimap<String, String> imagesFoundInParentRepo,\n                                     Map<String, String> imageToTagMap,\n                                     GHRepository currUserRepo,\n                                     List<String> skippedRepos)", "class_method_signature": "All.changeDockerfiles(Namespace ns,\n                                     Multimap<String, String> pathToDockerfilesInParentRepo,\n                                     Multimap<String, String> imagesFoundInParentRepo,\n                                     Map<String, String> imageToTagMap,\n                                     GHRepository currUserRepo,\n                                     List<String> skippedRepos)", "testcase": false, "constructor": false}, {"identifier": "getPullRequestWithPullReqIdentifier", "parameters": "(GHRepository parent)", "modifiers": "private", "return": "GHPullRequest", "signature": "GHPullRequest getPullRequestWithPullReqIdentifier(GHRepository parent)", "full_signature": "private GHPullRequest getPullRequestWithPullReqIdentifier(GHRepository parent)", "class_method_signature": "All.getPullRequestWithPullReqIdentifier(GHRepository parent)", "testcase": false, "constructor": false}], "file": "dockerfile-image-update/src/main/java/com/salesforce/dockerfileimageupdate/subcommands/impl/All.java"}, "focal_method": {"identifier": "forkRepositoriesFound", "parameters": "(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image)", "modifiers": "protected", "return": "void", "body": "protected void forkRepositoriesFound(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image) throws IOException {\n        log.info(\"Forking {} repositories...\", contentsWithImage.getTotalCount());\n        List<String> parentReposForked = new ArrayList<>();\n        GHRepository parent;\n        String parentRepoName = null;\n        for (GHContent c : contentsWithImage) {\n            /* Kohsuke's GitHub API library, when retrieving the forked repository, looks at the name of the parent to\n             * retrieve. The issue with that is: GitHub, when forking two or more repositories with the same name,\n             * automatically fixes the names to be unique (by appending \"-#\" to the end). Because of this edge case, we\n             * cannot save the forks and iterate over the repositories; else, we end up missing/not updating the\n             * repositories that were automatically fixed by GitHub. Instead, we save the names of the parent repos\n             * in the map above, find the list of repositories under the authorized user, and iterate through that list.\n             */\n            parent = c.getOwner();\n            parentRepoName = parent.getFullName();\n            if (parent.isFork()) {\n                log.warn(\"Skipping {} because it's a fork already. Sending a PR to a fork is unsupported at the moment.\",\n                        parentRepoName);\n            } else {\n                // fork the parent if not already forked\n                if (!parentReposForked.contains(parentRepoName)) {\n                    // TODO: Need to close PR!\n                    GHRepository fork = dockerfileGitHubUtil.getOrCreateFork(parent);\n                    GHPullRequest pr = getPullRequestWithPullReqIdentifier(parent);\n                    // Only reason we close the existing PR, delete fork and re-fork, is because there is no way to\n                    // determine if the existing fork is compatible with it's parent.\n                    if (pr != null) {\n                        // close the pull-request since the fork is out of date\n                        log.info(\"closing existing pr: {}\", pr.getUrl());\n                        try {\n                            pr.close();\n                        } catch (IOException e) {\n                            log.info(\"Issues closing the pull request '{}'. Moving ahead...\", pr.getUrl());\n                        }\n                    }\n\n                    if (fork == null) {\n                        log.info(\"Could not fork {}\", parentRepoName);\n                    } else {\n                        // Add repos to pathToDockerfilesInParentRepo and imagesFoundInParentRepo only if we forked it successfully.\n                        pathToDockerfilesInParentRepo.put(parentRepoName, c.getPath());\n                        imagesFoundInParentRepo.put(parentRepoName, image);\n                        parentReposForked.add(parentRepoName);\n                    }\n                }\n            }\n        }\n\n        log.info(\"Path to Dockerfiles in repo '{}': {}\", parentRepoName, pathToDockerfilesInParentRepo);\n        log.info(\"All images found in repo '{}': {}\", parentRepoName, imagesFoundInParentRepo);\n    }", "signature": "void forkRepositoriesFound(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image)", "full_signature": "protected void forkRepositoriesFound(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image)", "class_method_signature": "All.forkRepositoriesFound(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image)", "testcase": false, "constructor": false, "invocations": ["info", "getTotalCount", "getOwner", "getFullName", "isFork", "warn", "contains", "getOrCreateFork", "getPullRequestWithPullReqIdentifier", "info", "getUrl", "close", "info", "getUrl", "info", "put", "getPath", "put", "add", "info", "info"]}, "repository": {"repo_id": 104787715, "url": "https://github.com/salesforce/dockerfile-image-update", "stars": 62, "created": "9/25/2017 6:38:13 PM +00:00", "updates": "2020-01-23T07:15:59+00:00", "fork": "False", "license": "licensed"}}