{"test_class": {"identifier": "DistributedLockWatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/lock/DistributedLockWatcherTest.java"}, "test_case": {"identifier": "shouldWatchOnLock", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldWatchOnLock() throws Exception {\n        // given\n        final LockFactory delegate = mock(LockFactory.class);\n        final DistributedLock mock = mock(DistributedLock.class);\n        when(mock.getKey()).thenReturn(\"1234\");\n        when(delegate.getLock(eq(\"1234\"))).thenReturn(mock);\n        final DistributedLockWatcher watcher = new DistributedLockWatcher(delegate);\n\n        // when\n        final DistributedLock lock = watcher.getLock(\"1234\");\n\n        // then\n        assertEquals(DistributedLockWatcher.WatchedDistributedLock.class, lock.getClass());\n    }", "signature": "void shouldWatchOnLock()", "full_signature": "@Test public void shouldWatchOnLock()", "class_method_signature": "DistributedLockWatcherTest.shouldWatchOnLock()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getKey", "thenReturn", "when", "getLock", "eq", "getLock", "assertEquals", "getClass"]}, "focal_class": {"identifier": "DistributedLockWatcher", "superclass": "", "interfaces": "implements LockFactory, ApplicationListener<ContextClosedEvent>", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DistributedLockWatcher.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DistributedLockWatcher.class)", "var_name": "LOGGER"}, {"original_string": "private final Map<String, DistributedLock> locks = new HashMap<>();", "modifier": "private final", "type": "Map<String, DistributedLock>", "declarator": "locks = new HashMap<>()", "var_name": "locks"}, {"original_string": "private final LockFactory delegate;", "modifier": "private final", "type": "LockFactory", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "DistributedLockWatcher", "parameters": "(LockFactory delegate)", "modifiers": "public", "return": "", "signature": " DistributedLockWatcher(LockFactory delegate)", "full_signature": "public  DistributedLockWatcher(LockFactory delegate)", "class_method_signature": "DistributedLockWatcher.DistributedLockWatcher(LockFactory delegate)", "testcase": false, "constructor": true}, {"identifier": "getLock", "parameters": "(String id)", "modifiers": "@Override public", "return": "DistributedLock", "signature": "DistributedLock getLock(String id)", "full_signature": "@Override public DistributedLock getLock(String id)", "class_method_signature": "DistributedLockWatcher.getLock(String id)", "testcase": false, "constructor": false}, {"identifier": "onApplicationEvent", "parameters": "(ContextClosedEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onApplicationEvent(ContextClosedEvent event)", "full_signature": "@Override public void onApplicationEvent(ContextClosedEvent event)", "class_method_signature": "DistributedLockWatcher.onApplicationEvent(ContextClosedEvent event)", "testcase": false, "constructor": false}, {"identifier": "getLocks", "parameters": "()", "modifiers": "public", "return": "Collection<DistributedLock>", "signature": "Collection<DistributedLock> getLocks()", "full_signature": "public Collection<DistributedLock> getLocks()", "class_method_signature": "DistributedLockWatcher.getLocks()", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/lock/DistributedLockWatcher.java"}, "focal_method": {"identifier": "getLock", "parameters": "(String id)", "modifiers": "@Override public", "return": "DistributedLock", "body": "@Override\n    public DistributedLock getLock(String id) {\n        final DistributedLock lock = delegate.getLock(id);\n        final WatchedDistributedLock watchedDistributedLock = new WatchedDistributedLock(lock);\n        locks.put(watchedDistributedLock.getKey(), watchedDistributedLock);\n        return watchedDistributedLock;\n    }", "signature": "DistributedLock getLock(String id)", "full_signature": "@Override public DistributedLock getLock(String id)", "class_method_signature": "DistributedLockWatcher.getLock(String id)", "testcase": false, "constructor": false, "invocations": ["getLock", "put", "getKey"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}