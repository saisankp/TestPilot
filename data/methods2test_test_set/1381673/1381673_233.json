{"test_class": {"identifier": "DefaultTemplateRuleBaseTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-templates/src/test/java/org/drools/template/parser/DefaultTemplateRuleBaseTest.java"}, "test_case": {"identifier": "testSimpleTemplate", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSimpleTemplate() throws Exception {\n        TemplateContainer tc = new TemplateContainer() {\n            private Column[] columns = new Column[]{\n                    new LongColumn(\"column1\"),\n                    new LongColumn(\"column2\"),\n                    new StringColumn(\"column3\")\n            };\n\n            public Column[] getColumns() {\n                return columns;\n            }\n\n            public String getHeader() {\n                return null;\n            }\n\n            public Map<String, RuleTemplate> getTemplates() {\n                Map<String, RuleTemplate> templates = new HashMap<String, RuleTemplate>();\n                RuleTemplate ruleTemplate = new RuleTemplate(\"template1\", this);\n                ruleTemplate.addColumn(\"column1 == 10\");\n                ruleTemplate.addColumn(\"column2 < 5 || > 20\");\n                ruleTemplate.addColumn(\"column3 == \\\"xyz\\\"\");\n                templates.put(\"template1\", ruleTemplate);\n                return templates;\n            }\n\n            public Column getColumn(String name) {\n                return columns[Integer.parseInt(name.substring(6)) - 1];\n            }\n\n        };\n        DefaultTemplateRuleBase ruleBase = new DefaultTemplateRuleBase(tc);\n        InternalKnowledgePackage[] packages = ((KnowledgeBaseImpl)ruleBase.newStatefulSession().getKieBase()).getPackages();\n        assertEquals(1, packages.length);\n        Map<String, Class<?>> globals = packages[0].getGlobals();\n        assertEquals(DefaultGenerator.class, globals.get(\"generator\"));\n        Collection<org.kie.api.definition.rule.Rule> rules = packages[0].getRules();\n        assertEquals(1, rules.size());\n        assertEquals(\"template1\", rules.iterator().next().getName());\n        GroupElement lhs = ((RuleImpl)rules.iterator().next()).getLhs();\n        //when\n        //  r : Row()\n        //  column1 : Column(name == \"column1\")\n        //  exists LongCell(row == r, column == column1, value == 10)\n        //  column2 : Column(name == \"column2\")\n        //  exists LongCell(row == r, column == column2, value < 5 | > 20)\n        //  column3 : Column(name == \"column3\")\n        //  exists StringCell(row == r, column == column3, value == \"xyz\")\n        assertEquals(7, lhs.getChildren().size());\n        org.drools.core.rule.Pattern pattern = (org.drools.core.rule.Pattern) lhs.getChildren().get(1);\n        assertEquals(1, pattern.getConstraints().size());\n        Constraint constraint = pattern.getConstraints().get(0);\n        GroupElement exists = (GroupElement) lhs.getChildren().get(2);\n        pattern = (org.drools.core.rule.Pattern) exists.getChildren().get(0);\n        assertEquals(3, pattern.getConstraints().size());\n        IndexableConstraint vconstraint = (IndexableConstraint) pattern.getConstraints().get(1);\n        assertEquals(Column.class, vconstraint.getFieldIndex().getExtractor().getExtractToClass());\n        assertEquals(\"column1\", vconstraint.getRequiredDeclarations()[0].getIdentifier());\n        pattern = (org.drools.core.rule.Pattern) lhs.getChildren().get(3);\n        assertEquals(1, pattern.getConstraints().size());\n        constraint = pattern.getConstraints().get(0);\n        exists = (GroupElement) lhs.getChildren().get(4);\n        pattern = (org.drools.core.rule.Pattern) exists.getChildren().get(0);\n        assertEquals(3, pattern.getConstraints().size());\n        vconstraint = (IndexableConstraint) pattern.getConstraints().get(1);\n        assertEquals(Column.class, vconstraint.getFieldIndex().getExtractor().getExtractToClass());\n        assertEquals(\"column2\", vconstraint.getRequiredDeclarations()[0].getIdentifier());\n        pattern = (org.drools.core.rule.Pattern) lhs.getChildren().get(5);\n        assertEquals(1, pattern.getConstraints().size());\n        constraint = pattern.getConstraints().get(0);\n        exists = (GroupElement) lhs.getChildren().get(6);\n        pattern = (org.drools.core.rule.Pattern) exists.getChildren().get(0);\n        assertEquals(3, pattern.getConstraints().size());\n        vconstraint = (IndexableConstraint) pattern.getConstraints().get(1);\n        assertEquals(Column.class, vconstraint.getFieldIndex().getExtractor().getExtractToClass());\n        assertEquals(\"column3\", vconstraint.getRequiredDeclarations()[0].getIdentifier());\n    }", "signature": "void testSimpleTemplate()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testSimpleTemplate()", "class_method_signature": "DefaultTemplateRuleBaseTest.testSimpleTemplate()", "testcase": true, "constructor": false, "invocations": ["addColumn", "addColumn", "addColumn", "put", "parseInt", "substring", "getPackages", "getKieBase", "newStatefulSession", "assertEquals", "getGlobals", "assertEquals", "get", "getRules", "assertEquals", "size", "assertEquals", "getName", "next", "iterator", "getLhs", "next", "iterator", "assertEquals", "size", "getChildren", "get", "getChildren", "assertEquals", "size", "getConstraints", "get", "getConstraints", "get", "getChildren", "get", "getChildren", "assertEquals", "size", "getConstraints", "get", "getConstraints", "assertEquals", "getExtractToClass", "getExtractor", "getFieldIndex", "assertEquals", "getIdentifier", "getRequiredDeclarations", "get", "getChildren", "assertEquals", "size", "getConstraints", "get", "getConstraints", "get", "getChildren", "get", "getChildren", "assertEquals", "size", "getConstraints", "get", "getConstraints", "assertEquals", "getExtractToClass", "getExtractor", "getFieldIndex", "assertEquals", "getIdentifier", "getRequiredDeclarations", "get", "getChildren", "assertEquals", "size", "getConstraints", "get", "getConstraints", "get", "getChildren", "get", "getChildren", "assertEquals", "size", "getConstraints", "get", "getConstraints", "assertEquals", "getExtractToClass", "getExtractor", "getFieldIndex", "assertEquals", "getIdentifier", "getRequiredDeclarations"]}, "focal_class": {"identifier": "DefaultTemplateRuleBase", "superclass": "", "interfaces": "implements TemplateRuleBase", "fields": [{"original_string": "private InternalKnowledgeBase kBase;", "modifier": "private", "type": "InternalKnowledgeBase", "declarator": "kBase", "var_name": "kBase"}], "methods": [{"identifier": "DefaultTemplateRuleBase", "parameters": "(final TemplateContainer tc)", "modifiers": "public", "return": "", "signature": " DefaultTemplateRuleBase(final TemplateContainer tc)", "full_signature": "public  DefaultTemplateRuleBase(final TemplateContainer tc)", "class_method_signature": "DefaultTemplateRuleBase.DefaultTemplateRuleBase(final TemplateContainer tc)", "testcase": false, "constructor": true}, {"identifier": "newStatefulSession", "parameters": "()", "modifiers": "public", "return": "KieSession", "signature": "KieSession newStatefulSession()", "full_signature": "public KieSession newStatefulSession()", "class_method_signature": "DefaultTemplateRuleBase.newStatefulSession()", "testcase": false, "constructor": false}, {"identifier": "getDTRules", "parameters": "(Map<String, RuleTemplate> templates)", "modifiers": "private", "return": "String", "signature": "String getDTRules(Map<String, RuleTemplate> templates)", "full_signature": "private String getDTRules(Map<String, RuleTemplate> templates)", "class_method_signature": "DefaultTemplateRuleBase.getDTRules(Map<String, RuleTemplate> templates)", "testcase": false, "constructor": false}, {"identifier": "createTemplateRule", "parameters": "(org.drools.template.model.Package p, int index, RuleTemplate template)", "modifiers": "private", "return": "void", "signature": "void createTemplateRule(org.drools.template.model.Package p, int index, RuleTemplate template)", "full_signature": "private void createTemplateRule(org.drools.template.model.Package p, int index, RuleTemplate template)", "class_method_signature": "DefaultTemplateRuleBase.createTemplateRule(org.drools.template.model.Package p, int index, RuleTemplate template)", "testcase": false, "constructor": false}, {"identifier": "createColumnConditions", "parameters": "(RuleTemplate template, Rule rule)", "modifiers": "private", "return": "void", "signature": "void createColumnConditions(RuleTemplate template, Rule rule)", "full_signature": "private void createColumnConditions(RuleTemplate template, Rule rule)", "class_method_signature": "DefaultTemplateRuleBase.createColumnConditions(RuleTemplate template, Rule rule)", "testcase": false, "constructor": false}, {"identifier": "addGlobals", "parameters": "(org.drools.template.model.Package p)", "modifiers": "private", "return": "void", "signature": "void addGlobals(org.drools.template.model.Package p)", "full_signature": "private void addGlobals(org.drools.template.model.Package p)", "class_method_signature": "DefaultTemplateRuleBase.addGlobals(org.drools.template.model.Package p)", "testcase": false, "constructor": false}, {"identifier": "addImports", "parameters": "(org.drools.template.model.Package p)", "modifiers": "private", "return": "void", "signature": "void addImports(org.drools.template.model.Package p)", "full_signature": "private void addImports(org.drools.template.model.Package p)", "class_method_signature": "DefaultTemplateRuleBase.addImports(org.drools.template.model.Package p)", "testcase": false, "constructor": false}, {"identifier": "createConsequence", "parameters": "(RuleTemplate template)", "modifiers": "private", "return": "Consequence", "signature": "Consequence createConsequence(RuleTemplate template)", "full_signature": "private Consequence createConsequence(RuleTemplate template)", "class_method_signature": "DefaultTemplateRuleBase.createConsequence(RuleTemplate template)", "testcase": false, "constructor": false}, {"identifier": "readKnowledgeBase", "parameters": "(String drl)", "modifiers": "private", "return": "InternalKnowledgeBase", "signature": "InternalKnowledgeBase readKnowledgeBase(String drl)", "full_signature": "private InternalKnowledgeBase readKnowledgeBase(String drl)", "class_method_signature": "DefaultTemplateRuleBase.readKnowledgeBase(String drl)", "testcase": false, "constructor": false}], "file": "drools-templates/src/main/java/org/drools/template/parser/DefaultTemplateRuleBase.java"}, "focal_method": {"identifier": "newStatefulSession", "parameters": "()", "modifiers": "public", "return": "KieSession", "body": "public KieSession newStatefulSession() {\n        return kBase.newKieSession();\n    }", "signature": "KieSession newStatefulSession()", "full_signature": "public KieSession newStatefulSession()", "class_method_signature": "DefaultTemplateRuleBase.newStatefulSession()", "testcase": false, "constructor": false, "invocations": ["newKieSession"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}