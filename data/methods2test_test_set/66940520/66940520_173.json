{"test_class": {"identifier": "ProgramStageCheckTest", "superclass": "extends BaseValidationTest", "interfaces": "", "fields": [{"original_string": "private ProgramStageCheck rule;", "modifier": "private", "type": "ProgramStageCheck", "declarator": "rule", "var_name": "rule"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheckTest.java"}, "test_case": {"identifier": "failOnNullProgramStage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void failOnNullProgramStage()\n    {\n        Program program = new Program();\n        program.setUid( CodeGenerator.generateUid() );\n        program.setProgramType( ProgramType.WITH_REGISTRATION );\n        Map<String, Program> programMap = new HashMap<>();\n        programMap.put( program.getUid(), program );\n\n        event.setProgram( program.getUid() );\n        when( workContext.getProgramsMap() ).thenReturn( programMap );\n\n        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n        assertHasError( summary, event,\n            \"Event.programStage does not point to a valid programStage: \" + event.getProgramStage() );\n    }", "signature": "void failOnNullProgramStage()", "full_signature": "@Test public void failOnNullProgramStage()", "class_method_signature": "ProgramStageCheckTest.failOnNullProgramStage()", "testcase": true, "constructor": false, "invocations": ["setUid", "generateUid", "setProgramType", "put", "getUid", "setProgram", "getUid", "thenReturn", "when", "getProgramsMap", "check", "assertHasError", "getProgramStage"]}, "focal_class": {"identifier": "ProgramStageCheck", "superclass": "", "interfaces": "implements Checker", "fields": [], "methods": [{"identifier": "check", "parameters": "(ImmutableEvent event, WorkContext ctx )", "modifiers": "@Override public", "return": "ImportSummary", "signature": "ImportSummary check(ImmutableEvent event, WorkContext ctx )", "full_signature": "@Override public ImportSummary check(ImmutableEvent event, WorkContext ctx )", "class_method_signature": "ProgramStageCheck.check(ImmutableEvent event, WorkContext ctx )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramStageCheck.java"}, "focal_method": {"identifier": "check", "parameters": "(ImmutableEvent event, WorkContext ctx )", "modifiers": "@Override public", "return": "ImportSummary", "body": "@Override\n    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n    {\n        IdScheme programStageIdScheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n        // Get the program stage id from the event.\n        // If the event has no program stage set, use a dummy value which will not\n        // return any Program Stage\n        // from the WorkContext\n        final String programStageId = StringUtils.isEmpty( event.getProgramStage() ) ? \"-\" : event.getProgramStage();\n\n        ProgramStage programStage = ctx.getProgramStage( programStageIdScheme, programStageId );\n\n        if ( programStage == null )\n        {\n            return error( \"Event.programStage does not point to a valid programStage: \" + event.getProgramStage(),\n                event.getEvent() );\n        }\n\n        return success();\n    }", "signature": "ImportSummary check(ImmutableEvent event, WorkContext ctx )", "full_signature": "@Override public ImportSummary check(ImmutableEvent event, WorkContext ctx )", "class_method_signature": "ProgramStageCheck.check(ImmutableEvent event, WorkContext ctx )", "testcase": false, "constructor": false, "invocations": ["getProgramStageIdScheme", "getIdSchemes", "getImportOptions", "isEmpty", "getProgramStage", "getProgramStage", "getProgramStage", "error", "getProgramStage", "getEvent", "success"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}