{"test_class": {"identifier": "ClassLoaderFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClassLoaderFilter classLoaderFilter = new ClassLoaderFilter();", "modifier": "private", "type": "ClassLoaderFilter", "declarator": "classLoaderFilter = new ClassLoaderFilter()", "var_name": "classLoaderFilter"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/ClassLoaderFilterTest.java"}, "test_case": {"identifier": "testInvoke", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvoke() throws Exception {\n        URL url = URL.valueOf(\"test://test:11/test?accesslog=true&group=dubbo&version=1.1\");\n\n        String path = DemoService.class.getResource(\"/\").getPath();\n        final URLClassLoader cl = new URLClassLoader(new java.net.URL[]{new java.net.URL(\"file:\" + path)}) {\n            @Override\n            public Class<?> loadClass(String name) throws ClassNotFoundException {\n                try {\n                    return findClass(name);\n                } catch (ClassNotFoundException e) {\n                    return super.loadClass(name);\n                }\n            }\n        };\n        final Class<?> clazz = cl.loadClass(DemoService.class.getCanonicalName());\n        Invoker invoker = new MyInvoker(url) {\n            @Override\n            public Class getInterface() {\n                return clazz;\n            }\n\n            @Override\n            public Result invoke(Invocation invocation) throws RpcException {\n                Assertions.assertEquals(cl, Thread.currentThread().getContextClassLoader());\n                return null;\n            }\n        };\n        Invocation invocation = Mockito.mock(Invocation.class);\n\n        classLoaderFilter.invoke(invoker, invocation);\n    }", "signature": "void testInvoke()", "full_signature": "@Test public void testInvoke()", "class_method_signature": "ClassLoaderFilterTest.testInvoke()", "testcase": true, "constructor": false, "invocations": ["valueOf", "getPath", "getResource", "findClass", "loadClass", "loadClass", "getCanonicalName", "assertEquals", "getContextClassLoader", "currentThread", "mock", "invoke"]}, "focal_class": {"identifier": "ClassLoaderFilter", "superclass": "", "interfaces": "implements Filter", "fields": [], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ClassLoaderFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ClassLoaderFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        ClassLoader ocl = Thread.currentThread().getContextClassLoader();\n        Thread.currentThread().setContextClassLoader(invoker.getInterface().getClassLoader());\n        try {\n            return invoker.invoke(invocation);\n        } finally {\n            Thread.currentThread().setContextClassLoader(ocl);\n        }\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ClassLoaderFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getContextClassLoader", "currentThread", "setContextClassLoader", "currentThread", "getClassLoader", "getInterface", "invoke", "setContextClassLoader", "currentThread"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}