{"test_class": {"identifier": "UDPTest", "superclass": "", "interfaces": "", "fields": [], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/packet/UDPTest.java"}, "test_case": {"identifier": "testSerialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerialize() {\n        byte[] expected = new byte[] { 0x45, 0x00, 0x00, 0x1d, 0x56, 0x23,\n                0x00, 0x00, (byte) 0x80, 0x11, 0x48, 0x7f, (byte) 0xc0,\n                (byte) 0xa8, 0x01, 0x02, 0x0c, (byte) 0x81, (byte) 0xce, 0x02,\n                0x17, (byte) 0xe1, 0x04, 0x5f, 0x00, 0x09, 0x46, 0x6e,\n                0x01 };\n        IPacket packet = new IPv4()\n            .setIdentification((short) 22051)\n            .setTtl((byte) 128)\n            .setSourceAddress(\"192.168.1.2\")\n            .setDestinationAddress(\"12.129.206.2\")\n            .setPayload(new UDP()\n                            .setSourcePort((short) 6113)\n                            .setDestinationPort((short) 1119)\n                            .setPayload(new Data(new byte[] {0x01}))\n                       );\n        byte[] actual = packet.serialize();\n        assertTrue(Arrays.equals(expected, actual));\n    }", "signature": "void testSerialize()", "full_signature": "@Test public void testSerialize()", "class_method_signature": "UDPTest.testSerialize()", "testcase": true, "constructor": false, "invocations": ["setPayload", "setDestinationAddress", "setSourceAddress", "setTtl", "setIdentification", "setPayload", "setDestinationPort", "setSourcePort", "serialize", "assertTrue", "equals"]}, "focal_class": {"identifier": "UDP", "superclass": "extends BasePacket", "interfaces": "", "fields": [{"original_string": "public static Map<Short, Class<? extends IPacket>> decodeMap;", "modifier": "public static", "type": "Map<Short, Class<? extends IPacket>>", "declarator": "decodeMap", "var_name": "decodeMap"}, {"original_string": "public static short DHCP_SERVER_PORT = (short)67;", "modifier": "public static", "type": "short", "declarator": "DHCP_SERVER_PORT = (short)67", "var_name": "DHCP_SERVER_PORT"}, {"original_string": "public static short DHCP_CLIENT_PORT = (short)68;", "modifier": "public static", "type": "short", "declarator": "DHCP_CLIENT_PORT = (short)68", "var_name": "DHCP_CLIENT_PORT"}, {"original_string": "protected short sourcePort;", "modifier": "protected", "type": "short", "declarator": "sourcePort", "var_name": "sourcePort"}, {"original_string": "protected short destinationPort;", "modifier": "protected", "type": "short", "declarator": "destinationPort", "var_name": "destinationPort"}, {"original_string": "protected short length;", "modifier": "protected", "type": "short", "declarator": "length", "var_name": "length"}, {"original_string": "protected short checksum;", "modifier": "protected", "type": "short", "declarator": "checksum", "var_name": "checksum"}], "methods": [{"identifier": "getSourcePort", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getSourcePort()", "full_signature": "public short getSourcePort()", "class_method_signature": "UDP.getSourcePort()", "testcase": false, "constructor": false}, {"identifier": "setSourcePort", "parameters": "(short sourcePort)", "modifiers": "public", "return": "UDP", "signature": "UDP setSourcePort(short sourcePort)", "full_signature": "public UDP setSourcePort(short sourcePort)", "class_method_signature": "UDP.setSourcePort(short sourcePort)", "testcase": false, "constructor": false}, {"identifier": "getDestinationPort", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getDestinationPort()", "full_signature": "public short getDestinationPort()", "class_method_signature": "UDP.getDestinationPort()", "testcase": false, "constructor": false}, {"identifier": "setDestinationPort", "parameters": "(short destinationPort)", "modifiers": "public", "return": "UDP", "signature": "UDP setDestinationPort(short destinationPort)", "full_signature": "public UDP setDestinationPort(short destinationPort)", "class_method_signature": "UDP.setDestinationPort(short destinationPort)", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getLength()", "full_signature": "public short getLength()", "class_method_signature": "UDP.getLength()", "testcase": false, "constructor": false}, {"identifier": "getChecksum", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getChecksum()", "full_signature": "public short getChecksum()", "class_method_signature": "UDP.getChecksum()", "testcase": false, "constructor": false}, {"identifier": "setChecksum", "parameters": "(short checksum)", "modifiers": "public", "return": "UDP", "signature": "UDP setChecksum(short checksum)", "full_signature": "public UDP setChecksum(short checksum)", "class_method_signature": "UDP.setChecksum(short checksum)", "testcase": false, "constructor": false}, {"identifier": "resetChecksum", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resetChecksum()", "full_signature": "@Override public void resetChecksum()", "class_method_signature": "UDP.resetChecksum()", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] serialize()", "full_signature": "public byte[] serialize()", "class_method_signature": "UDP.serialize()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "UDP.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "UDP.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "UDP.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/packet/UDP.java"}, "focal_method": {"identifier": "serialize", "parameters": "()", "modifiers": "public", "return": "byte[]", "body": "public byte[] serialize() {\n        byte[] payloadData = null;\n        if (payload != null) {\n            payload.setParent(this);\n            payloadData = payload.serialize();\n        }\n\n        this.length = (short) (8 + ((payloadData == null) ? 0\n                : payloadData.length));\n\n        byte[] data = new byte[this.length];\n        ByteBuffer bb = ByteBuffer.wrap(data);\n\n        bb.putShort(this.sourcePort);\n        bb.putShort(this.destinationPort);\n        bb.putShort(this.length);\n        bb.putShort(this.checksum);\n        if (payloadData != null)\n            bb.put(payloadData);\n\n        if (this.parent != null && this.parent instanceof IPv4)\n            ((IPv4)this.parent).setProtocol(IPv4.PROTOCOL_UDP);\n\n        // compute checksum if needed\n        if (this.checksum == 0) {\n            bb.rewind();\n            int accumulation = 0;\n\n            // compute pseudo header mac\n            if (this.parent != null && this.parent instanceof IPv4) {\n                IPv4 ipv4 = (IPv4) this.parent;\n                accumulation += ((ipv4.getSourceAddress() >> 16) & 0xffff)\n                        + (ipv4.getSourceAddress() & 0xffff);\n                accumulation += ((ipv4.getDestinationAddress() >> 16) & 0xffff)\n                        + (ipv4.getDestinationAddress() & 0xffff);\n                accumulation += ipv4.getProtocol() & 0xff;\n                accumulation += this.length & 0xffff;\n            }\n\n            for (int i = 0; i < this.length / 2; ++i) {\n                accumulation += 0xffff & bb.getShort();\n            }\n            // pad to an even number of shorts\n            if (this.length % 2 > 0) {\n                accumulation += (bb.get() & 0xff) << 8;\n            }\n\n            accumulation = ((accumulation >> 16) & 0xffff)\n                    + (accumulation & 0xffff);\n            this.checksum = (short) (~accumulation & 0xffff);\n            bb.putShort(6, this.checksum);\n        }\n        return data;\n    }", "signature": "byte[] serialize()", "full_signature": "public byte[] serialize()", "class_method_signature": "UDP.serialize()", "testcase": false, "constructor": false, "invocations": ["setParent", "serialize", "wrap", "putShort", "putShort", "putShort", "putShort", "put", "setProtocol", "rewind", "getSourceAddress", "getSourceAddress", "getDestinationAddress", "getDestinationAddress", "getProtocol", "getShort", "get", "putShort"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}