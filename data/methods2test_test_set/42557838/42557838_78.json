{"test_class": {"identifier": "FileUtilitiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "http/src/test/java/ro/polak/http/utilities/FileUtilitiesTest.java"}, "test_case": {"identifier": "shouldFormatFileSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldFormatFileSize() {\n        assertThat(FileUtilities.fileSizeUnits(1), is(\"1 B\"));\n        assertThat(FileUtilities.fileSizeUnits(1024), is(\"1.00 KB\"));\n        assertThat(FileUtilities.fileSizeUnits(1025), is(\"1.00 KB\"));\n        assertThat(FileUtilities.fileSizeUnits(1048576), is(\"1.00 MB\"));\n        assertThat(FileUtilities.fileSizeUnits(1048577), is(\"1.00 MB\"));\n        assertThat(FileUtilities.fileSizeUnits(1073741824), is(\"1.00 GB\"));\n        assertThat(FileUtilities.fileSizeUnits(1073741825), is(\"1.00 GB\"));\n    }", "signature": "void shouldFormatFileSize()", "full_signature": "@Test public void shouldFormatFileSize()", "class_method_signature": "FileUtilitiesTest.shouldFormatFileSize()", "testcase": true, "constructor": false, "invocations": ["assertThat", "fileSizeUnits", "is", "assertThat", "fileSizeUnits", "is", "assertThat", "fileSizeUnits", "is", "assertThat", "fileSizeUnits", "is", "assertThat", "fileSizeUnits", "is", "assertThat", "fileSizeUnits", "is", "assertThat", "fileSizeUnits", "is"]}, "focal_class": {"identifier": "FileUtilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(FileUtilities.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(FileUtilities.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static final int BYTES_IN_KILOBYTE = 1024;", "modifier": "private static final", "type": "int", "declarator": "BYTES_IN_KILOBYTE = 1024", "var_name": "BYTES_IN_KILOBYTE"}, {"original_string": "private static final int BYTES_IN_MEGABYTE = 1048576;", "modifier": "private static final", "type": "int", "declarator": "BYTES_IN_MEGABYTE = 1048576", "var_name": "BYTES_IN_MEGABYTE"}, {"original_string": "private static final int BYTES_IN_GIGABYTE = 1073741824;", "modifier": "private static final", "type": "int", "declarator": "BYTES_IN_GIGABYTE = 1073741824", "var_name": "BYTES_IN_GIGABYTE"}], "methods": [{"identifier": "FileUtilities", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileUtilities()", "full_signature": "private  FileUtilities()", "class_method_signature": "FileUtilities.FileUtilities()", "testcase": false, "constructor": true}, {"identifier": "getExtension", "parameters": "(final String filename)", "modifiers": "public static", "return": "String", "signature": "String getExtension(final String filename)", "full_signature": "public static String getExtension(final String filename)", "class_method_signature": "FileUtilities.getExtension(final String filename)", "testcase": false, "constructor": false}, {"identifier": "clearDirectory", "parameters": "(final String directoryPath)", "modifiers": "public static", "return": "void", "signature": "void clearDirectory(final String directoryPath)", "full_signature": "public static void clearDirectory(final String directoryPath)", "class_method_signature": "FileUtilities.clearDirectory(final String directoryPath)", "testcase": false, "constructor": false}, {"identifier": "fileSizeUnits", "parameters": "(final long length)", "modifiers": "public static", "return": "String", "signature": "String fileSizeUnits(final long length)", "full_signature": "public static String fileSizeUnits(final long length)", "class_method_signature": "FileUtilities.fileSizeUnits(final long length)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/utilities/FileUtilities.java"}, "focal_method": {"identifier": "fileSizeUnits", "parameters": "(final long length)", "modifiers": "public static", "return": "String", "body": "public static String fileSizeUnits(final long length) {\n        if (length < BYTES_IN_KILOBYTE) {\n            return length + \" B\";\n        }\n\n        double size = (double) length;\n        NumberFormat nf = NumberFormat.getNumberInstance(Locale.US);\n        DecimalFormat format = (DecimalFormat) nf;\n        format.applyPattern(\"####0.00\");\n\n        if (length < BYTES_IN_MEGABYTE) {\n            return format.format(size / BYTES_IN_KILOBYTE) + \" KB\";\n        } else if (length < BYTES_IN_GIGABYTE) {\n            return format.format(size / BYTES_IN_MEGABYTE) + \" MB\";\n        } else {\n            return format.format(size / BYTES_IN_GIGABYTE) + \" GB\";\n        }\n    }", "signature": "String fileSizeUnits(final long length)", "full_signature": "public static String fileSizeUnits(final long length)", "class_method_signature": "FileUtilities.fileSizeUnits(final long length)", "testcase": false, "constructor": false, "invocations": ["getNumberInstance", "applyPattern", "format", "format", "format"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}