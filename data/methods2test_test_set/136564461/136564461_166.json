{"test_class": {"identifier": "HashesTest", "superclass": "", "interfaces": "", "fields": [], "file": "eddsa/src/test/java/io/moatwel/crypto/HashesTest.java"}, "test_case": {"identifier": "success_5", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void success_5() {\n        String seed1 = \"This is a pen.\";\n        String seed2 = \"ed25519\";\n        String seed3 = \"klf;ajdfa98\";\n\n        byte[] result1 = Hashes.hash(HashAlgorithm.SHA_512, seed1.getBytes());\n        byte[] result2 = Hashes.hash(HashAlgorithm.SHA_512, seed2.getBytes());\n        byte[] result3 = Hashes.hash(HashAlgorithm.SHA_512, seed3.getBytes());\n\n        assertThat(HexEncoder.getString(result1), is(\"84b50c6166495578d74b5c0a333aae89990389b3d2895e480750ecf7e5f90200912ccc9b1cb4b0867811d6ffa0d3c6c343c37b1ca928b70124afcff6640bce78\"));\n        assertThat(HexEncoder.getString(result2), is(\"5bd5fc9297204890e536091937435f04c55bba9f21e8701837b144c6d8b6382d8cacfc1ea6cf5967ddac09e5f4cd213dc57870c2837a88765c076a2935782568\"));\n        assertThat(HexEncoder.getString(result3), is(\"80e21b76ffaf5755e60ea1486a7a201c058c88718299711c9ed09e75fc2ed31fc484e3b26e72e6c033b96135692e1970a0c89e2cf7dee8c57a4d3a5a45be509f\"));\n    }", "signature": "void success_5()", "full_signature": "@Test public void success_5()", "class_method_signature": "HashesTest.success_5()", "testcase": true, "constructor": false, "invocations": ["hash", "getBytes", "hash", "getBytes", "hash", "getBytes", "assertThat", "getString", "is", "assertThat", "getString", "is", "assertThat", "getString", "is"]}, "focal_class": {"identifier": "Hashes", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "hash", "parameters": "(HashAlgorithm algorithm, byte[]... inputs)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hash(HashAlgorithm algorithm, byte[]... inputs)", "full_signature": "public static byte[] hash(HashAlgorithm algorithm, byte[]... inputs)", "class_method_signature": "Hashes.hash(HashAlgorithm algorithm, byte[]... inputs)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(HashAlgorithm algorithm, int outputByteLength, byte[]... inputs)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hash(HashAlgorithm algorithm, int outputByteLength, byte[]... inputs)", "full_signature": "public static byte[] hash(HashAlgorithm algorithm, int outputByteLength, byte[]... inputs)", "class_method_signature": "Hashes.hash(HashAlgorithm algorithm, int outputByteLength, byte[]... inputs)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(String algorithm, byte[]... inputs)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] hash(String algorithm, byte[]... inputs)", "full_signature": "private static byte[] hash(String algorithm, byte[]... inputs)", "class_method_signature": "Hashes.hash(String algorithm, byte[]... inputs)", "testcase": false, "constructor": false}, {"identifier": "hashVariableOutput", "parameters": "(HashAlgorithm algorithm, int byteLength, byte[]... inputs)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] hashVariableOutput(HashAlgorithm algorithm, int byteLength, byte[]... inputs)", "full_signature": "private static byte[] hashVariableOutput(HashAlgorithm algorithm, int byteLength, byte[]... inputs)", "class_method_signature": "Hashes.hashVariableOutput(HashAlgorithm algorithm, int byteLength, byte[]... inputs)", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/crypto/Hashes.java"}, "focal_method": {"identifier": "hash", "parameters": "(HashAlgorithm algorithm, byte[]... inputs)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] hash(HashAlgorithm algorithm, byte[]... inputs) {\n        return hash(algorithm, algorithm.getDefaultBitLength() / 8, inputs);\n    }", "signature": "byte[] hash(HashAlgorithm algorithm, byte[]... inputs)", "full_signature": "public static byte[] hash(HashAlgorithm algorithm, byte[]... inputs)", "class_method_signature": "Hashes.hash(HashAlgorithm algorithm, byte[]... inputs)", "testcase": false, "constructor": false, "invocations": ["hash", "getDefaultBitLength"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}