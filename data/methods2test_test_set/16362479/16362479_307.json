{"test_class": {"identifier": "AbstractClientHistoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String SHARD_NAME = \"default\";", "modifier": "protected static final", "type": "String", "declarator": "SHARD_NAME = \"default\"", "var_name": "SHARD_NAME"}, {"original_string": "protected static final String PERSISTENCE_ID = \"per-1\";", "modifier": "protected static final", "type": "String", "declarator": "PERSISTENCE_ID = \"per-1\"", "var_name": "PERSISTENCE_ID"}, {"original_string": "protected static final LocalHistoryIdentifier HISTORY_ID = new LocalHistoryIdentifier(CLIENT_ID, 1L);", "modifier": "protected static final", "type": "LocalHistoryIdentifier", "declarator": "HISTORY_ID = new LocalHistoryIdentifier(CLIENT_ID, 1L)", "var_name": "HISTORY_ID"}, {"original_string": "@Mock\n    private DataTree tree;", "modifier": "@Mock\n    private", "type": "DataTree", "declarator": "tree", "var_name": "tree"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/actors/dds/AbstractClientHistoryTest.java"}, "test_case": {"identifier": "testNextTx", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNextTx() {\n        Assert.assertTrue(object().nextTx() + 1 == object().nextTx());\n    }", "signature": "void testNextTx()", "full_signature": "@Test public void testNextTx()", "class_method_signature": "AbstractClientHistoryTest.testNextTx()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "nextTx", "object", "nextTx", "object"]}, "focal_class": {"identifier": "AbstractClientHistory", "superclass": "extends LocalAbortable", "interfaces": "implements Identifiable<LocalHistoryIdentifier>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AbstractClientHistory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AbstractClientHistory.class)", "var_name": "LOG"}, {"original_string": "private static final AtomicLongFieldUpdater<AbstractClientHistory> NEXT_TX_UPDATER =\n            AtomicLongFieldUpdater.newUpdater(AbstractClientHistory.class, \"nextTx\");", "modifier": "private static final", "type": "AtomicLongFieldUpdater<AbstractClientHistory>", "declarator": "NEXT_TX_UPDATER =\n            AtomicLongFieldUpdater.newUpdater(AbstractClientHistory.class, \"nextTx\")", "var_name": "NEXT_TX_UPDATER"}, {"original_string": "private static final AtomicReferenceFieldUpdater<AbstractClientHistory, State> STATE_UPDATER =\n            AtomicReferenceFieldUpdater.newUpdater(AbstractClientHistory.class, State.class, \"state\");", "modifier": "private static final", "type": "AtomicReferenceFieldUpdater<AbstractClientHistory, State>", "declarator": "STATE_UPDATER =\n            AtomicReferenceFieldUpdater.newUpdater(AbstractClientHistory.class, State.class, \"state\")", "var_name": "STATE_UPDATER"}, {"original_string": "@GuardedBy(\"this\")\n    private final Map<TransactionIdentifier, AbstractClientHandle<?>> openTransactions = new HashMap<>();", "modifier": "@GuardedBy(\"this\")\n    private final", "type": "Map<TransactionIdentifier, AbstractClientHandle<?>>", "declarator": "openTransactions = new HashMap<>()", "var_name": "openTransactions"}, {"original_string": "@GuardedBy(\"this\")\n    private final Map<TransactionIdentifier, AbstractTransactionCommitCohort> readyTransactions = new HashMap<>();", "modifier": "@GuardedBy(\"this\")\n    private final", "type": "Map<TransactionIdentifier, AbstractTransactionCommitCohort>", "declarator": "readyTransactions = new HashMap<>()", "var_name": "readyTransactions"}, {"original_string": "@GuardedBy(\"lock\")\n    private final Map<Long, ProxyHistory> histories = new ConcurrentHashMap<>();", "modifier": "@GuardedBy(\"lock\")\n    private final", "type": "Map<Long, ProxyHistory>", "declarator": "histories = new ConcurrentHashMap<>()", "var_name": "histories"}, {"original_string": "private final StampedLock lock = new StampedLock();", "modifier": "private final", "type": "StampedLock", "declarator": "lock = new StampedLock()", "var_name": "lock"}, {"original_string": "private final AbstractDataStoreClientBehavior client;", "modifier": "private final", "type": "AbstractDataStoreClientBehavior", "declarator": "client", "var_name": "client"}, {"original_string": "private final LocalHistoryIdentifier identifier;", "modifier": "private final", "type": "LocalHistoryIdentifier", "declarator": "identifier", "var_name": "identifier"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private volatile long nextTx = 0;", "modifier": "@SuppressWarnings(\"unused\")\n    private volatile", "type": "long", "declarator": "nextTx = 0", "var_name": "nextTx"}, {"original_string": "private volatile State state = State.IDLE;", "modifier": "private volatile", "type": "State", "declarator": "state = State.IDLE", "var_name": "state"}], "methods": [{"identifier": "AbstractClientHistory", "parameters": "(final AbstractDataStoreClientBehavior client, final LocalHistoryIdentifier identifier)", "modifiers": "", "return": "", "signature": " AbstractClientHistory(final AbstractDataStoreClientBehavior client, final LocalHistoryIdentifier identifier)", "full_signature": "  AbstractClientHistory(final AbstractDataStoreClientBehavior client, final LocalHistoryIdentifier identifier)", "class_method_signature": "AbstractClientHistory.AbstractClientHistory(final AbstractDataStoreClientBehavior client, final LocalHistoryIdentifier identifier)", "testcase": false, "constructor": true}, {"identifier": "state", "parameters": "()", "modifiers": "final", "return": "State", "signature": "State state()", "full_signature": "final State state()", "class_method_signature": "AbstractClientHistory.state()", "testcase": false, "constructor": false}, {"identifier": "updateState", "parameters": "(final State expected, final State next)", "modifiers": "final", "return": "void", "signature": "void updateState(final State expected, final State next)", "full_signature": "final void updateState(final State expected, final State next)", "class_method_signature": "AbstractClientHistory.updateState(final State expected, final State next)", "testcase": false, "constructor": false}, {"identifier": "doClose", "parameters": "()", "modifiers": "final synchronized", "return": "void", "signature": "void doClose()", "full_signature": "final synchronized void doClose()", "class_method_signature": "AbstractClientHistory.doClose()", "testcase": false, "constructor": false}, {"identifier": "onProxyDestroyed", "parameters": "(final ProxyHistory proxyHistory)", "modifiers": "final synchronized", "return": "void", "signature": "void onProxyDestroyed(final ProxyHistory proxyHistory)", "full_signature": "final synchronized void onProxyDestroyed(final ProxyHistory proxyHistory)", "class_method_signature": "AbstractClientHistory.onProxyDestroyed(final ProxyHistory proxyHistory)", "testcase": false, "constructor": false}, {"identifier": "getIdentifier", "parameters": "()", "modifiers": "@Override public", "return": "LocalHistoryIdentifier", "signature": "LocalHistoryIdentifier getIdentifier()", "full_signature": "@Override public LocalHistoryIdentifier getIdentifier()", "class_method_signature": "AbstractClientHistory.getIdentifier()", "testcase": false, "constructor": false}, {"identifier": "nextTx", "parameters": "()", "modifiers": "final", "return": "long", "signature": "long nextTx()", "full_signature": "final long nextTx()", "class_method_signature": "AbstractClientHistory.nextTx()", "testcase": false, "constructor": false}, {"identifier": "resolveShardForPath", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "final", "return": "Long", "signature": "Long resolveShardForPath(final YangInstanceIdentifier path)", "full_signature": "final Long resolveShardForPath(final YangInstanceIdentifier path)", "class_method_signature": "AbstractClientHistory.resolveShardForPath(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "localAbort", "parameters": "(final Throwable cause)", "modifiers": "@Override final", "return": "void", "signature": "void localAbort(final Throwable cause)", "full_signature": "@Override final void localAbort(final Throwable cause)", "class_method_signature": "AbstractClientHistory.localAbort(final Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "createHistoryProxy", "parameters": "(final Long shard)", "modifiers": "@GuardedBy(\"lock\") private", "return": "ProxyHistory", "signature": "ProxyHistory createHistoryProxy(final Long shard)", "full_signature": "@GuardedBy(\"lock\") private ProxyHistory createHistoryProxy(final Long shard)", "class_method_signature": "AbstractClientHistory.createHistoryProxy(final Long shard)", "testcase": false, "constructor": false}, {"identifier": "createHistoryProxy", "parameters": "(LocalHistoryIdentifier historyId,\n            AbstractClientConnection<ShardBackendInfo> connection)", "modifiers": "abstract", "return": "ProxyHistory", "signature": "ProxyHistory createHistoryProxy(LocalHistoryIdentifier historyId,\n            AbstractClientConnection<ShardBackendInfo> connection)", "full_signature": "abstract ProxyHistory createHistoryProxy(LocalHistoryIdentifier historyId,\n            AbstractClientConnection<ShardBackendInfo> connection)", "class_method_signature": "AbstractClientHistory.createHistoryProxy(LocalHistoryIdentifier historyId,\n            AbstractClientConnection<ShardBackendInfo> connection)", "testcase": false, "constructor": false}, {"identifier": "createHistoryCallback", "parameters": "(final Response<?, ?> response)", "modifiers": "private", "return": "void", "signature": "void createHistoryCallback(final Response<?, ?> response)", "full_signature": "private void createHistoryCallback(final Response<?, ?> response)", "class_method_signature": "AbstractClientHistory.createHistoryCallback(final Response<?, ?> response)", "testcase": false, "constructor": false}, {"identifier": "ensureHistoryProxy", "parameters": "(final TransactionIdentifier transactionId, final Long shard)", "modifiers": "private", "return": "ProxyHistory", "signature": "ProxyHistory ensureHistoryProxy(final TransactionIdentifier transactionId, final Long shard)", "full_signature": "private ProxyHistory ensureHistoryProxy(final TransactionIdentifier transactionId, final Long shard)", "class_method_signature": "AbstractClientHistory.ensureHistoryProxy(final TransactionIdentifier transactionId, final Long shard)", "testcase": false, "constructor": false}, {"identifier": "createSnapshotProxy", "parameters": "(final TransactionIdentifier transactionId, final Long shard)", "modifiers": "final", "return": "AbstractProxyTransaction", "signature": "AbstractProxyTransaction createSnapshotProxy(final TransactionIdentifier transactionId, final Long shard)", "full_signature": "final AbstractProxyTransaction createSnapshotProxy(final TransactionIdentifier transactionId, final Long shard)", "class_method_signature": "AbstractClientHistory.createSnapshotProxy(final TransactionIdentifier transactionId, final Long shard)", "testcase": false, "constructor": false}, {"identifier": "createTransactionProxy", "parameters": "(final TransactionIdentifier transactionId, final Long shard)", "modifiers": "final", "return": "AbstractProxyTransaction", "signature": "AbstractProxyTransaction createTransactionProxy(final TransactionIdentifier transactionId, final Long shard)", "full_signature": "final AbstractProxyTransaction createTransactionProxy(final TransactionIdentifier transactionId, final Long shard)", "class_method_signature": "AbstractClientHistory.createTransactionProxy(final TransactionIdentifier transactionId, final Long shard)", "testcase": false, "constructor": false}, {"identifier": "checkNotClosed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkNotClosed()", "full_signature": "private void checkNotClosed()", "class_method_signature": "AbstractClientHistory.checkNotClosed()", "testcase": false, "constructor": false}, {"identifier": "createTransaction", "parameters": "()", "modifiers": "public", "return": "ClientTransaction", "signature": "ClientTransaction createTransaction()", "full_signature": "public ClientTransaction createTransaction()", "class_method_signature": "AbstractClientHistory.createTransaction()", "testcase": false, "constructor": false}, {"identifier": "takeSnapshot", "parameters": "()", "modifiers": "public", "return": "ClientSnapshot", "signature": "ClientSnapshot takeSnapshot()", "full_signature": "public ClientSnapshot takeSnapshot()", "class_method_signature": "AbstractClientHistory.takeSnapshot()", "testcase": false, "constructor": false}, {"identifier": "doCreateSnapshot", "parameters": "()", "modifiers": "@GuardedBy(\"this\") abstract", "return": "ClientSnapshot", "signature": "ClientSnapshot doCreateSnapshot()", "full_signature": "@GuardedBy(\"this\") abstract ClientSnapshot doCreateSnapshot()", "class_method_signature": "AbstractClientHistory.doCreateSnapshot()", "testcase": false, "constructor": false}, {"identifier": "doCreateTransaction", "parameters": "()", "modifiers": "@GuardedBy(\"this\") abstract", "return": "ClientTransaction", "signature": "ClientTransaction doCreateTransaction()", "full_signature": "@GuardedBy(\"this\") abstract ClientTransaction doCreateTransaction()", "class_method_signature": "AbstractClientHistory.doCreateTransaction()", "testcase": false, "constructor": false}, {"identifier": "onTransactionReady", "parameters": "(final ClientTransaction tx,\n            final AbstractTransactionCommitCohort cohort)", "modifiers": "synchronized", "return": "AbstractTransactionCommitCohort", "signature": "AbstractTransactionCommitCohort onTransactionReady(final ClientTransaction tx,\n            final AbstractTransactionCommitCohort cohort)", "full_signature": "synchronized AbstractTransactionCommitCohort onTransactionReady(final ClientTransaction tx,\n            final AbstractTransactionCommitCohort cohort)", "class_method_signature": "AbstractClientHistory.onTransactionReady(final ClientTransaction tx,\n            final AbstractTransactionCommitCohort cohort)", "testcase": false, "constructor": false}, {"identifier": "onTransactionAbort", "parameters": "(final AbstractClientHandle<?> snapshot)", "modifiers": "synchronized", "return": "void", "signature": "void onTransactionAbort(final AbstractClientHandle<?> snapshot)", "full_signature": "synchronized void onTransactionAbort(final AbstractClientHandle<?> snapshot)", "class_method_signature": "AbstractClientHistory.onTransactionAbort(final AbstractClientHandle<?> snapshot)", "testcase": false, "constructor": false}, {"identifier": "onTransactionComplete", "parameters": "(final TransactionIdentifier txId)", "modifiers": "synchronized", "return": "void", "signature": "void onTransactionComplete(final TransactionIdentifier txId)", "full_signature": "synchronized void onTransactionComplete(final TransactionIdentifier txId)", "class_method_signature": "AbstractClientHistory.onTransactionComplete(final TransactionIdentifier txId)", "testcase": false, "constructor": false}, {"identifier": "startReconnect", "parameters": "(final ConnectedClientConnection<ShardBackendInfo> newConn)", "modifiers": "", "return": "HistoryReconnectCohort", "signature": "HistoryReconnectCohort startReconnect(final ConnectedClientConnection<ShardBackendInfo> newConn)", "full_signature": " HistoryReconnectCohort startReconnect(final ConnectedClientConnection<ShardBackendInfo> newConn)", "class_method_signature": "AbstractClientHistory.startReconnect(final ConnectedClientConnection<ShardBackendInfo> newConn)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/actors/dds/AbstractClientHistory.java"}, "focal_method": {"identifier": "nextTx", "parameters": "()", "modifiers": "final", "return": "long", "body": "final long nextTx() {\n        return NEXT_TX_UPDATER.getAndIncrement(this);\n    }", "signature": "long nextTx()", "full_signature": "final long nextTx()", "class_method_signature": "AbstractClientHistory.nextTx()", "testcase": false, "constructor": false, "invocations": ["getAndIncrement"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}