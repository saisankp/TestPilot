{"test_class": {"identifier": "SocketIoClientTest", "superclass": "", "interfaces": "", "fields": [], "file": "socket.io-server/src/test/java/io/socket/socketio/server/SocketIoClientTest.java"}, "test_case": {"identifier": "test_sendPacket_nonbinary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_sendPacket_nonbinary() {\n        final EngineIoServer engineIoServer = new EngineIoServer();\n        final SocketIoServer socketIoServer = new SocketIoServer(engineIoServer);\n\n        final EngineIoWebSocket webSocket = Mockito.spy(new EngineIoWebSocketImpl());\n\n        final Emitter.Listener connectionListener = Mockito.mock(Emitter.Listener.class);\n        Mockito.doAnswer(invocation -> {\n            final Object[] args = invocation.getArguments();\n            final EngineIoSocket socket = (EngineIoSocket) args[0];\n            final SocketIoClient client = new SocketIoClient(socketIoServer, socket);\n\n            final JSONArray packetData = new JSONArray();\n            packetData.put(\"foo\");\n            packetData.put(1);\n\n            final Packet<JSONArray> packet = new Packet<>(Parser.EVENT, packetData);\n\n            try {\n                Mockito.reset(webSocket);\n                client.sendPacket(packet);\n                Mockito.verify(webSocket, Mockito.times(1))\n                        .write(Mockito.anyString());\n            } catch (IOException ignore) {\n            }\n            return null;\n        }).when(connectionListener).call(Mockito.any());\n        engineIoServer.on(\"connection\", connectionListener);\n        engineIoServer.handleWebSocket(webSocket);\n\n        Mockito.verify(connectionListener, Mockito.times(1))\n                .call(Mockito.any(EngineIoSocket.class));\n    }", "signature": "void test_sendPacket_nonbinary()", "full_signature": "@Test public void test_sendPacket_nonbinary()", "class_method_signature": "SocketIoClientTest.test_sendPacket_nonbinary()", "testcase": true, "constructor": false, "invocations": ["spy", "mock", "call", "when", "doAnswer", "getArguments", "put", "put", "reset", "sendPacket", "write", "verify", "times", "anyString", "any", "on", "handleWebSocket", "call", "verify", "times", "any"]}, "focal_class": {"identifier": "SocketIoClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SocketIoServer mServer;", "modifier": "private final", "type": "SocketIoServer", "declarator": "mServer", "var_name": "mServer"}, {"original_string": "private final EngineIoSocket mConnection;", "modifier": "private final", "type": "EngineIoSocket", "declarator": "mConnection", "var_name": "mConnection"}, {"original_string": "private final Parser.Encoder mEncoder;", "modifier": "private final", "type": "Parser.Encoder", "declarator": "mEncoder", "var_name": "mEncoder"}, {"original_string": "private final Parser.Decoder mDecoder;", "modifier": "private final", "type": "Parser.Decoder", "declarator": "mDecoder", "var_name": "mDecoder"}, {"original_string": "private final String mId;", "modifier": "private final", "type": "String", "declarator": "mId", "var_name": "mId"}, {"original_string": "private final Map<String, SocketIoSocket> mSockets = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, SocketIoSocket>", "declarator": "mSockets = new ConcurrentHashMap<>()", "var_name": "mSockets"}, {"original_string": "private final Map<String, SocketIoSocket> mNamespaceSockets = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, SocketIoSocket>", "declarator": "mNamespaceSockets = new ConcurrentHashMap<>()", "var_name": "mNamespaceSockets"}], "methods": [{"identifier": "SocketIoClient", "parameters": "(SocketIoServer server, EngineIoSocket connection)", "modifiers": "", "return": "", "signature": " SocketIoClient(SocketIoServer server, EngineIoSocket connection)", "full_signature": "  SocketIoClient(SocketIoServer server, EngineIoSocket connection)", "class_method_signature": "SocketIoClient.SocketIoClient(SocketIoServer server, EngineIoSocket connection)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getId()", "full_signature": " String getId()", "class_method_signature": "SocketIoClient.getId()", "testcase": false, "constructor": false}, {"identifier": "sendPacket", "parameters": "(final Packet packet)", "modifiers": "", "return": "void", "signature": "void sendPacket(final Packet packet)", "full_signature": " void sendPacket(final Packet packet)", "class_method_signature": "SocketIoClient.sendPacket(final Packet packet)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(String namespace)", "modifiers": "", "return": "void", "signature": "void connect(String namespace)", "full_signature": " void connect(String namespace)", "class_method_signature": "SocketIoClient.connect(String namespace)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(SocketIoSocket socket)", "modifiers": "", "return": "void", "signature": "void remove(SocketIoSocket socket)", "full_signature": " void remove(SocketIoSocket socket)", "class_method_signature": "SocketIoClient.remove(SocketIoSocket socket)", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "()", "modifiers": "", "return": "void", "signature": "void disconnect()", "full_signature": " void disconnect()", "class_method_signature": "SocketIoClient.disconnect()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "", "return": "EngineIoSocket", "signature": "EngineIoSocket getConnection()", "full_signature": " EngineIoSocket getConnection()", "class_method_signature": "SocketIoClient.getConnection()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void close()", "full_signature": "private void close()", "class_method_signature": "SocketIoClient.close()", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setup()", "full_signature": "private void setup()", "class_method_signature": "SocketIoClient.setup()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void destroy()", "full_signature": "private void destroy()", "class_method_signature": "SocketIoClient.destroy()", "testcase": false, "constructor": false}, {"identifier": "doConnect", "parameters": "(String namespace)", "modifiers": "private", "return": "void", "signature": "void doConnect(String namespace)", "full_signature": "private void doConnect(String namespace)", "class_method_signature": "SocketIoClient.doConnect(String namespace)", "testcase": false, "constructor": false}, {"identifier": "onClose", "parameters": "(String reason)", "modifiers": "private", "return": "void", "signature": "void onClose(String reason)", "full_signature": "private void onClose(String reason)", "class_method_signature": "SocketIoClient.onClose(String reason)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(String error)", "modifiers": "private", "return": "void", "signature": "void onError(String error)", "full_signature": "private void onError(String error)", "class_method_signature": "SocketIoClient.onError(String error)", "testcase": false, "constructor": false}], "file": "socket.io-server/src/main/java/io/socket/socketio/server/SocketIoClient.java"}, "focal_method": {"identifier": "sendPacket", "parameters": "(final Packet packet)", "modifiers": "", "return": "void", "body": "void sendPacket(final Packet packet) {\n        if (mConnection.getReadyState() == ReadyState.OPEN) {\n            mEncoder.encode(packet, objects -> {\n                // TODO: Check for volatile flag\n\n                for (Object item : objects) {\n                    final io.socket.engineio.parser.Packet engineIoPacket = new io.socket.engineio.parser.Packet(io.socket.engineio.parser.Packet.MESSAGE);\n                    engineIoPacket.data = item;\n                    mConnection.send(engineIoPacket);\n                }\n            });\n        }\n    }", "signature": "void sendPacket(final Packet packet)", "full_signature": " void sendPacket(final Packet packet)", "class_method_signature": "SocketIoClient.sendPacket(final Packet packet)", "testcase": false, "constructor": false, "invocations": ["getReadyState", "encode", "send"]}, "repository": {"repo_id": 144740389, "url": "https://github.com/trinopoty/socket.io-server-java", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 16, "size": 1069, "license": "licensed"}}