{"test_class": {"identifier": "SequenceResponseGuardTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LOGGER_ID = \"id\";", "modifier": "private static final", "type": "String", "declarator": "LOGGER_ID = \"id\"", "var_name": "LOGGER_ID"}, {"original_string": "@Mock\n    private WebAppConfigurationAccess configurationAccess;", "modifier": "@Mock\n    private", "type": "WebAppConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Mock\n    private PropertyDTO propertyDto;", "modifier": "@Mock\n    private", "type": "PropertyDTO", "declarator": "propertyDto", "var_name": "propertyDto"}, {"original_string": "@Mock\n    private WilmaHttpRequest stubbedRequest;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "stubbedRequest", "var_name": "stubbedRequest"}, {"original_string": "@Mock\n    private WilmaSequence actualSequence;", "modifier": "@Mock\n    private", "type": "WilmaSequence", "declarator": "actualSequence", "var_name": "actualSequence"}, {"original_string": "@InjectMocks\n    private SequenceResponseGuard underTest;", "modifier": "@InjectMocks\n    private", "type": "SequenceResponseGuard", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/stub/response/support/SequenceResponseGuardTest.java"}, "test_case": {"identifier": "testWhenResponsesCannotArriveInTimeThenExceptionIsThrown", "parameters": "()", "modifiers": "@Test(expectedExceptions = ResponseTimeoutException.class) public", "return": "void", "body": "@Test(expectedExceptions = ResponseTimeoutException.class)\n    public void testWhenResponsesCannotArriveInTimeThenExceptionIsThrown() throws InterruptedException {\n        //GIVEN\n        given(actualSequence.checkIfAllResponsesArrived(LOGGER_ID)).willReturn(false);\n        //WHEN\n        underTest.waitForResponses(stubbedRequest, actualSequence);\n        //THEN exception is thrown\n    }", "signature": "void testWhenResponsesCannotArriveInTimeThenExceptionIsThrown()", "full_signature": "@Test(expectedExceptions = ResponseTimeoutException.class) public void testWhenResponsesCannotArriveInTimeThenExceptionIsThrown()", "class_method_signature": "SequenceResponseGuardTest.testWhenResponsesCannotArriveInTimeThenExceptionIsThrown()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "checkIfAllResponsesArrived", "waitForResponses"]}, "focal_class": {"identifier": "SequenceResponseGuard", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TIMEOUT_ERROR_MESSAGE = \"Waiting for the responses has timed out.\";", "modifier": "private static final", "type": "String", "declarator": "TIMEOUT_ERROR_MESSAGE = \"Waiting for the responses has timed out.\"", "var_name": "TIMEOUT_ERROR_MESSAGE"}, {"original_string": "@Autowired\n    private WebAppConfigurationAccess configurationAccess;", "modifier": "@Autowired\n    private", "type": "WebAppConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "private SequenceResponseGuardProperties properties;", "modifier": "private", "type": "SequenceResponseGuardProperties", "declarator": "properties", "var_name": "properties"}], "methods": [{"identifier": "waitForResponses", "parameters": "(final WilmaHttpRequest stubbedRequest, final WilmaSequence actualSequence)", "modifiers": "public", "return": "void", "signature": "void waitForResponses(final WilmaHttpRequest stubbedRequest, final WilmaSequence actualSequence)", "full_signature": "public void waitForResponses(final WilmaHttpRequest stubbedRequest, final WilmaSequence actualSequence)", "class_method_signature": "SequenceResponseGuard.waitForResponses(final WilmaHttpRequest stubbedRequest, final WilmaSequence actualSequence)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getProperties()", "full_signature": "private void getProperties()", "class_method_signature": "SequenceResponseGuard.getProperties()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/stub/response/support/SequenceResponseGuard.java"}, "focal_method": {"identifier": "waitForResponses", "parameters": "(final WilmaHttpRequest stubbedRequest, final WilmaSequence actualSequence)", "modifiers": "public", "return": "void", "body": "public void waitForResponses(final WilmaHttpRequest stubbedRequest, final WilmaSequence actualSequence) throws InterruptedException {\n        String wilmaLoggerId = stubbedRequest.getWilmaMessageId();\n        boolean allResponsesArrived = actualSequence.checkIfAllResponsesArrived(wilmaLoggerId);\n        int timeWaited = 0;\n        getProperties();\n        int waitInterval = properties.getWaitInterval();\n        int timeout = properties.getTimeout();\n        while (!allResponsesArrived) {\n            Thread.sleep(waitInterval);\n            timeWaited += waitInterval;\n            if (timeWaited > timeout) {\n                throw new ResponseTimeoutException(TIMEOUT_ERROR_MESSAGE);\n            }\n            allResponsesArrived = actualSequence.checkIfAllResponsesArrived(wilmaLoggerId);\n        }\n\n    }", "signature": "void waitForResponses(final WilmaHttpRequest stubbedRequest, final WilmaSequence actualSequence)", "full_signature": "public void waitForResponses(final WilmaHttpRequest stubbedRequest, final WilmaSequence actualSequence)", "class_method_signature": "SequenceResponseGuard.waitForResponses(final WilmaHttpRequest stubbedRequest, final WilmaSequence actualSequence)", "testcase": false, "constructor": false, "invocations": ["getWilmaMessageId", "checkIfAllResponsesArrived", "getProperties", "getWaitInterval", "getTimeout", "sleep", "checkIfAllResponsesArrived"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}