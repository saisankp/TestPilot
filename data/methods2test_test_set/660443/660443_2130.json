{"test_class": {"identifier": "SDFWriterTest", "superclass": "extends ChemObjectWriterTest", "interfaces": "", "fields": [{"original_string": "private static IChemObjectBuilder builder;", "modifier": "private static", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}], "file": "storage/ctab/src/test/java/org/openscience/cdk/io/SDFWriterTest.java"}, "test_case": {"identifier": "testAccepts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccepts() throws Exception {\n        SDFWriter reader = new SDFWriter();\n        Assert.assertTrue(reader.accepts(ChemFile.class));\n        Assert.assertTrue(reader.accepts(ChemModel.class));\n        Assert.assertTrue(reader.accepts(AtomContainerSet.class));\n    }", "signature": "void testAccepts()", "full_signature": "@Test public void testAccepts()", "class_method_signature": "SDFWriterTest.testAccepts()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "accepts", "assertTrue", "accepts", "assertTrue", "accepts"]}, "focal_class": {"identifier": "SDFWriter", "superclass": "extends DefaultChemObjectWriter", "interfaces": "", "fields": [{"original_string": "private final static ILoggingTool logger = LoggingToolFactory.createLoggingTool(SDFWriter.class);", "modifier": "private final static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(SDFWriter.class)", "var_name": "logger"}, {"original_string": "public static final String OptAlwaysV3000 = \"writeV3000\";", "modifier": "public static final", "type": "String", "declarator": "OptAlwaysV3000 = \"writeV3000\"", "var_name": "OptAlwaysV3000"}, {"original_string": "public static final String OptWriteData = \"writeProperties\";", "modifier": "public static final", "type": "String", "declarator": "OptWriteData = \"writeProperties\"", "var_name": "OptWriteData"}, {"original_string": "public static final String OptTruncateLongData  = \"TruncateLongData\";", "modifier": "public static final", "type": "String", "declarator": "OptTruncateLongData  = \"TruncateLongData\"", "var_name": "OptTruncateLongData"}, {"original_string": "private BufferedWriter   writer;", "modifier": "private", "type": "BufferedWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private BooleanIOSetting paramWriteData;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "paramWriteData", "var_name": "paramWriteData"}, {"original_string": "private BooleanIOSetting paramWriteV3000;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "paramWriteV3000", "var_name": "paramWriteV3000"}, {"original_string": "private BooleanIOSetting truncateData;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "truncateData", "var_name": "truncateData"}, {"original_string": "private Set<String>      propertiesToWrite;", "modifier": "private", "type": "Set<String>", "declarator": "propertiesToWrite", "var_name": "propertiesToWrite"}, {"original_string": "private static List<String> cdkInternalProperties = new ArrayList<String>();", "modifier": "private static", "type": "List<String>", "declarator": "cdkInternalProperties = new ArrayList<String>()", "var_name": "cdkInternalProperties"}], "methods": [{"identifier": "SDFWriter", "parameters": "(BufferedWriter wtr)", "modifiers": "public", "return": "", "signature": " SDFWriter(BufferedWriter wtr)", "full_signature": "public  SDFWriter(BufferedWriter wtr)", "class_method_signature": "SDFWriter.SDFWriter(BufferedWriter wtr)", "testcase": false, "constructor": true}, {"identifier": "SDFWriter", "parameters": "(Writer wtr)", "modifiers": "public", "return": "", "signature": " SDFWriter(Writer wtr)", "full_signature": "public  SDFWriter(Writer wtr)", "class_method_signature": "SDFWriter.SDFWriter(Writer wtr)", "testcase": false, "constructor": true}, {"identifier": "SDFWriter", "parameters": "(OutputStream output)", "modifiers": "public", "return": "", "signature": " SDFWriter(OutputStream output)", "full_signature": "public  SDFWriter(OutputStream output)", "class_method_signature": "SDFWriter.SDFWriter(OutputStream output)", "testcase": false, "constructor": true}, {"identifier": "SDFWriter", "parameters": "()", "modifiers": "public", "return": "", "signature": " SDFWriter()", "full_signature": "public  SDFWriter()", "class_method_signature": "SDFWriter.SDFWriter()", "testcase": false, "constructor": true}, {"identifier": "SDFWriter", "parameters": "(Writer out, Set<String> propertiesToWrite)", "modifiers": "public", "return": "", "signature": " SDFWriter(Writer out, Set<String> propertiesToWrite)", "full_signature": "public  SDFWriter(Writer out, Set<String> propertiesToWrite)", "class_method_signature": "SDFWriter.SDFWriter(Writer out, Set<String> propertiesToWrite)", "testcase": false, "constructor": true}, {"identifier": "SDFWriter", "parameters": "(OutputStream output, Set<String> propertiesToWrite)", "modifiers": "public", "return": "", "signature": " SDFWriter(OutputStream output, Set<String> propertiesToWrite)", "full_signature": "public  SDFWriter(OutputStream output, Set<String> propertiesToWrite)", "class_method_signature": "SDFWriter.SDFWriter(OutputStream output, Set<String> propertiesToWrite)", "testcase": false, "constructor": true}, {"identifier": "SDFWriter", "parameters": "(Set<String> propertiesToWrite)", "modifiers": "public", "return": "", "signature": " SDFWriter(Set<String> propertiesToWrite)", "full_signature": "public  SDFWriter(Set<String> propertiesToWrite)", "class_method_signature": "SDFWriter.SDFWriter(Set<String> propertiesToWrite)", "testcase": false, "constructor": true}, {"identifier": "ensureBuffered", "parameters": "(Writer wtr)", "modifiers": "private static", "return": "BufferedWriter", "signature": "BufferedWriter ensureBuffered(Writer wtr)", "full_signature": "private static BufferedWriter ensureBuffered(Writer wtr)", "class_method_signature": "SDFWriter.ensureBuffered(Writer wtr)", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "SDFWriter.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setWriter", "parameters": "(Writer out)", "modifiers": "@Override public", "return": "void", "signature": "void setWriter(Writer out)", "full_signature": "@Override public void setWriter(Writer out)", "class_method_signature": "SDFWriter.setWriter(Writer out)", "testcase": false, "constructor": false}, {"identifier": "setWriter", "parameters": "(OutputStream output)", "modifiers": "@Override public", "return": "void", "signature": "void setWriter(OutputStream output)", "full_signature": "@Override public void setWriter(OutputStream output)", "class_method_signature": "SDFWriter.setWriter(OutputStream output)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SDFWriter.close()", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "SDFWriter.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(IChemObject object)", "modifiers": "@Override public", "return": "void", "signature": "void write(IChemObject object)", "full_signature": "@Override public void write(IChemObject object)", "class_method_signature": "SDFWriter.write(IChemObject object)", "testcase": false, "constructor": false}, {"identifier": "writeMoleculeSet", "parameters": "(IAtomContainerSet som)", "modifiers": "private", "return": "void", "signature": "void writeMoleculeSet(IAtomContainerSet som)", "full_signature": "private void writeMoleculeSet(IAtomContainerSet som)", "class_method_signature": "SDFWriter.writeMoleculeSet(IAtomContainerSet som)", "testcase": false, "constructor": false}, {"identifier": "writeChemFile", "parameters": "(IChemFile file)", "modifiers": "private", "return": "void", "signature": "void writeChemFile(IChemFile file)", "full_signature": "private void writeChemFile(IChemFile file)", "class_method_signature": "SDFWriter.writeChemFile(IChemFile file)", "testcase": false, "constructor": false}, {"identifier": "replaceInvalidHeaderChars", "parameters": "(String headerKey)", "modifiers": "private static", "return": "String", "signature": "String replaceInvalidHeaderChars(String headerKey)", "full_signature": "private static String replaceInvalidHeaderChars(String headerKey)", "class_method_signature": "SDFWriter.replaceInvalidHeaderChars(String headerKey)", "testcase": false, "constructor": false}, {"identifier": "writeMolecule", "parameters": "(IAtomContainer container)", "modifiers": "private", "return": "void", "signature": "void writeMolecule(IAtomContainer container)", "full_signature": "private void writeMolecule(IAtomContainer container)", "class_method_signature": "SDFWriter.writeMolecule(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "isPrimitiveDataValue", "parameters": "(Object obj)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPrimitiveDataValue(Object obj)", "full_signature": "private static boolean isPrimitiveDataValue(Object obj)", "class_method_signature": "SDFWriter.isPrimitiveDataValue(Object obj)", "testcase": false, "constructor": false}, {"identifier": "writeV3000", "parameters": "(IAtomContainer container)", "modifiers": "private", "return": "boolean", "signature": "boolean writeV3000(IAtomContainer container)", "full_signature": "private boolean writeV3000(IAtomContainer container)", "class_method_signature": "SDFWriter.writeV3000(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "isCDKInternalProperty", "parameters": "(Object propKey)", "modifiers": "private", "return": "boolean", "signature": "boolean isCDKInternalProperty(Object propKey)", "full_signature": "private boolean isCDKInternalProperty(Object propKey)", "class_method_signature": "SDFWriter.isCDKInternalProperty(Object propKey)", "testcase": false, "constructor": false}, {"identifier": "initIOSettings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initIOSettings()", "full_signature": "private void initIOSettings()", "class_method_signature": "SDFWriter.initIOSettings()", "testcase": false, "constructor": false}, {"identifier": "setAlwaysV3000", "parameters": "(boolean val)", "modifiers": "public", "return": "void", "signature": "void setAlwaysV3000(boolean val)", "full_signature": "public void setAlwaysV3000(boolean val)", "class_method_signature": "SDFWriter.setAlwaysV3000(boolean val)", "testcase": false, "constructor": false}, {"identifier": "customizeJob", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void customizeJob()", "full_signature": "public void customizeJob()", "class_method_signature": "SDFWriter.customizeJob()", "testcase": false, "constructor": false}], "file": "storage/ctab/src/main/java/org/openscience/cdk/io/SDFWriter.java"}, "focal_method": {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean accepts(Class<? extends IChemObject> classObject) {\n        Class<?>[] interfaces = classObject.getInterfaces();\n        for (int i = 0; i < interfaces.length; i++) {\n            if (IAtomContainer.class.equals(interfaces[i])) return true;\n            if (IChemFile.class.equals(interfaces[i])) return true;\n            if (IChemModel.class.equals(interfaces[i])) return true;\n            if (IAtomContainerSet.class.equals(interfaces[i])) return true;\n        }\n        if (IAtomContainer.class.equals(classObject)) return true;\n        if (IChemFile.class.equals(classObject)) return true;\n        if (IChemModel.class.equals(classObject)) return true;\n        if (IAtomContainerSet.class.equals(classObject)) return true;\n        Class superClass = classObject.getSuperclass();\n        if (superClass != null) return this.accepts(superClass);\n        return false;\n    }", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "SDFWriter.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false, "invocations": ["getInterfaces", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "getSuperclass", "accepts"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}