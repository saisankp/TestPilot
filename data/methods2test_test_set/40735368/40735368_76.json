{"test_class": {"identifier": "TimeParserTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private final static TimeParser PARSER = new TimeParser();", "modifier": "private final static", "type": "TimeParser", "declarator": "PARSER = new TimeParser()", "var_name": "PARSER"}], "file": "modules/plugin/imagemosaic/src/test/java/org/geotools/gce/imagemosaic/properties/time/TimeParserTest.java"}, "test_case": {"identifier": "testParserOnTimePeriod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testParserOnTimePeriod() throws ParseException {\n\t\tfinal String timeInterval = \"2011-10-10T10:11:12.000Z/2011-10-10T14:11:12.000Z/PT1H\";\n\t\tList<Date> time = PARSER.parse(timeInterval);\n\t\tassertEquals(5, time.size());\n\t\tassertEquals(1318241472000l, time.get(0).getTime());\n\t\tassertEquals(1318241472000l + (3600 * 1000 * 4), time.get(time.size()-1).getTime());\n\t}", "signature": "void testParserOnTimePeriod()", "full_signature": "@Test public void testParserOnTimePeriod()", "class_method_signature": "TimeParserTest.testParserOnTimePeriod()", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "size", "assertEquals", "getTime", "get", "assertEquals", "getTime", "get", "size"]}, "focal_class": {"identifier": "TimeParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] PATTERNS = {\n        \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\n        \"yyyy-MM-dd'T'HHmmssSSS'Z'\",\n        \"yyyyMMdd'T'HH:mm:ss.SSS'Z'\",\n        \"yyyyMMdd'T'HHmmssSSS'Z'\",\n        \"yyyy-MM-dd'T'HH:mm:ss.SSS\",\n        \"yyyy-MM-dd'T'HHmmssSSS\",\n        \"yyyyMMdd'T'HH:mm:ss.SSS\",\n        \"yyyyMMdd'T'HHmmssSSS\",        \n        \n        \"yyyy-MM-dd'T'HH:mm:ss'Z'\",\n        \"yyyy-MM-dd'T'HHmmss'Z'\",\n        \"yyyyMMdd'T'HH:mm:ss'Z'\",\n        \"yyyyMMdd'T'HHmmss'Z'\",\n        \"yyyy-MM-dd'T'HH:mm:ss\",\n        \"yyyy-MM-dd'T'HHmmss\",\n        \"yyyyMMdd'T'HH:mm:ss\",\n        \"yyyyMMdd'T'HHmmss\",\n        \n        \n        \"yyyy-MM-dd'T'HH:mm'Z'\",\n        \"yyyy-MM-dd'T'HHmm'Z'\",\n        \"yyyyMMdd'T'HH:mm'Z'\",\n        \"yyyyMMdd'T'HHmm'Z'\",\n        \"yyyy-MM-dd'T'HH:mm\",\n        \"yyyy-MM-dd'T'HHmm\",\n        \"yyyyMMdd'T'HH:mm\",\n        \"yyyyMMdd'T'HHmm\",\n        \n        \n        \"yyyy-MM-dd'T'HH'Z'\",\n        \"yyyyMMdd'T'HH'Z'\",\n        \"yyyy-MM-dd'T'HH\",\n        \"yyyyMMdd'T'HH\",        \n        \n        \"yyyy-MM-dd\",\n        \"yyyyMMdd\",\n        \n        \"yyyy-MM\",\n        \"yyyyMM\",\n        \n        \"yyyy\"     \n    };", "modifier": "private static final", "type": "String[]", "declarator": "PATTERNS = {\n        \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\n        \"yyyy-MM-dd'T'HHmmssSSS'Z'\",\n        \"yyyyMMdd'T'HH:mm:ss.SSS'Z'\",\n        \"yyyyMMdd'T'HHmmssSSS'Z'\",\n        \"yyyy-MM-dd'T'HH:mm:ss.SSS\",\n        \"yyyy-MM-dd'T'HHmmssSSS\",\n        \"yyyyMMdd'T'HH:mm:ss.SSS\",\n        \"yyyyMMdd'T'HHmmssSSS\",        \n        \n        \"yyyy-MM-dd'T'HH:mm:ss'Z'\",\n        \"yyyy-MM-dd'T'HHmmss'Z'\",\n        \"yyyyMMdd'T'HH:mm:ss'Z'\",\n        \"yyyyMMdd'T'HHmmss'Z'\",\n        \"yyyy-MM-dd'T'HH:mm:ss\",\n        \"yyyy-MM-dd'T'HHmmss\",\n        \"yyyyMMdd'T'HH:mm:ss\",\n        \"yyyyMMdd'T'HHmmss\",\n        \n        \n        \"yyyy-MM-dd'T'HH:mm'Z'\",\n        \"yyyy-MM-dd'T'HHmm'Z'\",\n        \"yyyyMMdd'T'HH:mm'Z'\",\n        \"yyyyMMdd'T'HHmm'Z'\",\n        \"yyyy-MM-dd'T'HH:mm\",\n        \"yyyy-MM-dd'T'HHmm\",\n        \"yyyyMMdd'T'HH:mm\",\n        \"yyyyMMdd'T'HHmm\",\n        \n        \n        \"yyyy-MM-dd'T'HH'Z'\",\n        \"yyyyMMdd'T'HH'Z'\",\n        \"yyyy-MM-dd'T'HH\",\n        \"yyyyMMdd'T'HH\",        \n        \n        \"yyyy-MM-dd\",\n        \"yyyyMMdd\",\n        \n        \"yyyy-MM\",\n        \"yyyyMM\",\n        \n        \"yyyy\"     \n    }", "var_name": "PATTERNS"}, {"original_string": "private static final Map<Integer, List<String>> SPLITTED_PATTERNS;", "modifier": "private static final", "type": "Map<Integer, List<String>>", "declarator": "SPLITTED_PATTERNS", "var_name": "SPLITTED_PATTERNS"}, {"original_string": "static final TimeZone UTC_TZ = TimeZone.getTimeZone(\"UTC\");", "modifier": "static final", "type": "TimeZone", "declarator": "UTC_TZ = TimeZone.getTimeZone(\"UTC\")", "var_name": "UTC_TZ"}, {"original_string": "static final long MILLIS_IN_DAY = 24*60*60*1000;", "modifier": "static final", "type": "long", "declarator": "MILLIS_IN_DAY = 24*60*60*1000", "var_name": "MILLIS_IN_DAY"}], "methods": [{"identifier": "TimeParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " TimeParser()", "full_signature": "public  TimeParser()", "class_method_signature": "TimeParser.TimeParser()", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String value)", "modifiers": "public", "return": "List<Date>", "signature": "List<Date> parse(String value)", "full_signature": "public List<Date> parse(String value)", "class_method_signature": "TimeParser.parse(String value)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(final String value)", "modifiers": "private static", "return": "Date", "signature": "Date getDate(final String value)", "full_signature": "private static Date getDate(final String value)", "class_method_signature": "TimeParser.getDate(final String value)", "testcase": false, "constructor": false}, {"identifier": "parsePeriod", "parameters": "(final String period)", "modifiers": "static", "return": "long", "signature": "long parsePeriod(final String period)", "full_signature": "static long parsePeriod(final String period)", "class_method_signature": "TimeParser.parsePeriod(final String period)", "testcase": false, "constructor": false}], "file": "modules/plugin/imagemosaic/src/main/java/org/geotools/gce/imagemosaic/properties/time/TimeParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String value)", "modifiers": "public", "return": "List<Date>", "body": "public List<Date> parse(String value) throws ParseException {\n        if (value == null) {\n            return Collections.emptyList();\n        }\n        value = value.trim();\n        if (value.length() == 0) {\n            return Collections.emptyList();\n        }\n        final List<Date> dates = new ArrayList<Date>();\n        if (value.indexOf(',') >= 0) {\n            String[] listDates = value.split(\",\");\n            for (int i=0; i<listDates.length; i++) {\n                dates.add(getDate(listDates[i].trim()));\n            }\n            return dates;\n        }\n        String[] period = value.split(\"/\");\n        // Only one date given.\n        if (period.length == 1) {\n                if(value.equals(\"current\")) {\n                        dates.add(Calendar.getInstance(UTC_TZ).getTime());\n                } else {\n                        dates.add(getDate(value));\n                }\n            return dates;\n        }\n        // Period like : yyyy-MM-ddTHH:mm:ssZ/yyyy-MM-ddTHH:mm:ssZ/P1D\n        if (period.length == 3) {\n            final Date begin = getDate(period[0]);\n            final Date end   = getDate(period[1]);\n            final long millisIncrement = parsePeriod(period[2]);\n            final long startTime = begin.getTime();\n            final long endTime = end.getTime();\n            long time;\n            int j = 0;\n            while ((time = j * millisIncrement + startTime) <= endTime) {\n                Calendar calendar = Calendar.getInstance(UTC_TZ);\n                calendar.setTimeInMillis(time);\n                dates.add(calendar.getTime());\n                j++;\n            }\n            return dates;\n        }\n        throw new ParseException(\"Invalid time parameter: \" + value, 0);\n    }", "signature": "List<Date> parse(String value)", "full_signature": "public List<Date> parse(String value)", "class_method_signature": "TimeParser.parse(String value)", "testcase": false, "constructor": false, "invocations": ["emptyList", "trim", "length", "emptyList", "indexOf", "split", "add", "getDate", "trim", "split", "equals", "add", "getTime", "getInstance", "add", "getDate", "getDate", "getDate", "parsePeriod", "getTime", "getTime", "getInstance", "setTimeInMillis", "add", "getTime"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}