{"test_class": {"identifier": "SelectorNamingConventionCheckTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SelectorNamingConventionCheck check = new SelectorNamingConventionCheck();", "modifier": "private final", "type": "SelectorNamingConventionCheck", "declarator": "check = new SelectorNamingConventionCheck()", "var_name": "check"}], "file": "css-checks/src/test/java/org/sonar/css/checks/common/SelectorNamingConventionCheckTest.java"}, "test_case": {"identifier": "test_with_custom_format", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test_with_custom_format() {\n    check.setFormat(\"^[-a-z]+$\");\n    CssCheckVerifier.verifyCssFile(check, getTestFile(\"selectorNamingConventionCustomFormat.css\"));\n  }", "signature": "void test_with_custom_format()", "full_signature": "@Test public void test_with_custom_format()", "class_method_signature": "SelectorNamingConventionCheckTest.test_with_custom_format()", "testcase": true, "constructor": false, "invocations": ["setFormat", "verifyCssFile", "getTestFile"]}, "focal_class": {"identifier": "SelectorNamingConventionCheck", "superclass": "extends DoubleDispatchVisitorCheck", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_FORMAT = \"^[a-z][-a-z0-9]*$\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_FORMAT = \"^[a-z][-a-z0-9]*$\"", "var_name": "DEFAULT_FORMAT"}, {"original_string": "@RuleProperty(\n    key = \"Format\",\n    description = \"Regular expression used to check the selector names against. See \" + CheckUtils.LINK_TO_JAVA_REGEX_PATTERN_DOC + \" for detailed regular expression syntax.\",\n    defaultValue = DEFAULT_FORMAT)\n  private String format = DEFAULT_FORMAT;", "modifier": "@RuleProperty(\n    key = \"Format\",\n    description = \"Regular expression used to check the selector names against. See \" + CheckUtils.LINK_TO_JAVA_REGEX_PATTERN_DOC + \" for detailed regular expression syntax.\",\n    defaultValue = DEFAULT_FORMAT)\n  private", "type": "String", "declarator": "format = DEFAULT_FORMAT", "var_name": "format"}], "methods": [{"identifier": "visitClassSelector", "parameters": "(ClassSelectorTree tree)", "modifiers": "@Override public", "return": "void", "signature": "void visitClassSelector(ClassSelectorTree tree)", "full_signature": "@Override public void visitClassSelector(ClassSelectorTree tree)", "class_method_signature": "SelectorNamingConventionCheck.visitClassSelector(ClassSelectorTree tree)", "testcase": false, "constructor": false}, {"identifier": "visitIdSelector", "parameters": "(IdSelectorTree tree)", "modifiers": "@Override public", "return": "void", "signature": "void visitIdSelector(IdSelectorTree tree)", "full_signature": "@Override public void visitIdSelector(IdSelectorTree tree)", "class_method_signature": "SelectorNamingConventionCheck.visitIdSelector(IdSelectorTree tree)", "testcase": false, "constructor": false}, {"identifier": "visitScssPlaceholderSelector", "parameters": "(ScssPlaceholderSelectorTree tree)", "modifiers": "@Override public", "return": "void", "signature": "void visitScssPlaceholderSelector(ScssPlaceholderSelectorTree tree)", "full_signature": "@Override public void visitScssPlaceholderSelector(ScssPlaceholderSelectorTree tree)", "class_method_signature": "SelectorNamingConventionCheck.visitScssPlaceholderSelector(ScssPlaceholderSelectorTree tree)", "testcase": false, "constructor": false}, {"identifier": "setFormat", "parameters": "(String format)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setFormat(String format)", "full_signature": "@VisibleForTesting void setFormat(String format)", "class_method_signature": "SelectorNamingConventionCheck.setFormat(String format)", "testcase": false, "constructor": false}, {"identifier": "validateParameters", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void validateParameters()", "full_signature": "@Override public void validateParameters()", "class_method_signature": "SelectorNamingConventionCheck.validateParameters()", "testcase": false, "constructor": false}, {"identifier": "paramsErrorMessage", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String paramsErrorMessage()", "full_signature": "private String paramsErrorMessage()", "class_method_signature": "SelectorNamingConventionCheck.paramsErrorMessage()", "testcase": false, "constructor": false}, {"identifier": "addIssue", "parameters": "(Tree tree, String value)", "modifiers": "private", "return": "void", "signature": "void addIssue(Tree tree, String value)", "full_signature": "private void addIssue(Tree tree, String value)", "class_method_signature": "SelectorNamingConventionCheck.addIssue(Tree tree, String value)", "testcase": false, "constructor": false}], "file": "css-checks/src/main/java/org/sonar/css/checks/common/SelectorNamingConventionCheck.java"}, "focal_method": {"identifier": "setFormat", "parameters": "(String format)", "modifiers": "@VisibleForTesting", "return": "void", "body": "@VisibleForTesting\n  void setFormat(String format) {\n    this.format = format;\n  }", "signature": "void setFormat(String format)", "full_signature": "@VisibleForTesting void setFormat(String format)", "class_method_signature": "SelectorNamingConventionCheck.setFormat(String format)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 84313991, "url": "https://github.com/kalidasya/sonar-css-plugin", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 7, "size": 5062, "license": "licensed"}}