{"test_class": {"identifier": "JDBCCertRecordStoreConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private PoolableDataSource mockDataSrc;", "modifier": "@Mock private", "type": "PoolableDataSource", "declarator": "mockDataSrc", "var_name": "mockDataSrc"}, {"original_string": "@Mock private Statement mockStmt;", "modifier": "@Mock private", "type": "Statement", "declarator": "mockStmt", "var_name": "mockStmt"}, {"original_string": "@Mock private PreparedStatement mockPrepStmt;", "modifier": "@Mock private", "type": "PreparedStatement", "declarator": "mockPrepStmt", "var_name": "mockPrepStmt"}, {"original_string": "@Mock private Connection mockConn;", "modifier": "@Mock private", "type": "Connection", "declarator": "mockConn", "var_name": "mockConn"}, {"original_string": "@Mock private ResultSet mockResultSet;", "modifier": "@Mock private", "type": "ResultSet", "declarator": "mockResultSet", "var_name": "mockResultSet"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/JDBCCertRecordStoreConnectionTest.java"}, "test_case": {"identifier": "testConnectionCloseException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConnectionCloseException() throws SQLException {\n        Mockito.doThrow(new SQLException()).when(mockConn).close();\n        JDBCCertRecordStoreConnection jdbcConn = new JDBCCertRecordStoreConnection(mockConn);\n        jdbcConn.close();\n    }", "signature": "void testConnectionCloseException()", "full_signature": "@Test public void testConnectionCloseException()", "class_method_signature": "JDBCCertRecordStoreConnectionTest.testConnectionCloseException()", "testcase": true, "constructor": false, "invocations": ["close", "when", "doThrow", "close"]}, "focal_class": {"identifier": "JDBCCertRecordStoreConnection", "superclass": "", "interfaces": "implements CertRecordStoreConnection", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JDBCCertRecordStoreConnection.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JDBCCertRecordStoreConnection.class)", "var_name": "LOGGER"}, {"original_string": "private static final int MYSQL_ER_OPTION_DUPLICATE_ENTRY = 1062;", "modifier": "private static final", "type": "int", "declarator": "MYSQL_ER_OPTION_DUPLICATE_ENTRY = 1062", "var_name": "MYSQL_ER_OPTION_DUPLICATE_ENTRY"}, {"original_string": "private static final String SQL_GET_X509_RECORD = \"SELECT * FROM certificates WHERE provider=? AND instanceId=? AND service=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_X509_RECORD = \"SELECT * FROM certificates WHERE provider=? AND instanceId=? AND service=?;\"", "var_name": "SQL_GET_X509_RECORD"}, {"original_string": "private static final String SQL_INSERT_X509_RECORD = \"INSERT INTO certificates \" +\n            \"(provider, instanceId, service, currentSerial, currentTime, currentIP, prevSerial, prevTime, prevIP, clientCert, \" +\n            \"expiryTime, hostName) \" +\n            \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_X509_RECORD = \"INSERT INTO certificates \" +\n            \"(provider, instanceId, service, currentSerial, currentTime, currentIP, prevSerial, prevTime, prevIP, clientCert, \" +\n            \"expiryTime, hostName) \" +\n            \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?);\"", "var_name": "SQL_INSERT_X509_RECORD"}, {"original_string": "private static final String SQL_UPDATE_X509_RECORD = \"UPDATE certificates SET \" +\n            \"currentSerial=?, currentTime=?, currentIP=?, prevSerial=?, prevTime=?, prevIP=?, \" +\n            \"expiryTime=?, hostName=?, clientCert=? \" +\n            \"WHERE provider=? AND instanceId=? AND service=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_X509_RECORD = \"UPDATE certificates SET \" +\n            \"currentSerial=?, currentTime=?, currentIP=?, prevSerial=?, prevTime=?, prevIP=?, \" +\n            \"expiryTime=?, hostName=?, clientCert=? \" +\n            \"WHERE provider=? AND instanceId=? AND service=?;\"", "var_name": "SQL_UPDATE_X509_RECORD"}, {"original_string": "private static final String SQL_DELETE_X509_RECORD = \"DELETE from certificates \" +\n            \"WHERE provider=? AND instanceId=? AND service=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_X509_RECORD = \"DELETE from certificates \" +\n            \"WHERE provider=? AND instanceId=? AND service=?;\"", "var_name": "SQL_DELETE_X509_RECORD"}, {"original_string": "private static final String SQL_DELETE_EXPIRED_X509_RECORDS = \"DELETE FROM certificates \" +\n            \"WHERE currentTime < ADDDATE(NOW(), INTERVAL -? MINUTE);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_EXPIRED_X509_RECORDS = \"DELETE FROM certificates \" +\n            \"WHERE currentTime < ADDDATE(NOW(), INTERVAL -? MINUTE);\"", "var_name": "SQL_DELETE_EXPIRED_X509_RECORDS"}, {"original_string": "private static final String SQL_UPDATE_UNREFRESHED_X509_RECORDS_NOTIFICATION_TIMESTAMP = \"UPDATE certificates SET lastNotifiedTime=?, lastNotifiedServer=? \" +\n            \"WHERE currentTime < (CURRENT_DATE - INTERVAL 3 DAY) AND \" +\n            \"(hostName IS NOT NULL AND hostName != '') AND \" +\n            \"provider=? AND \" +\n            \"(lastNotifiedTime IS NULL || lastNotifiedTime < (CURRENT_DATE - INTERVAL 1 DAY))\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_UNREFRESHED_X509_RECORDS_NOTIFICATION_TIMESTAMP = \"UPDATE certificates SET lastNotifiedTime=?, lastNotifiedServer=? \" +\n            \"WHERE currentTime < (CURRENT_DATE - INTERVAL 3 DAY) AND \" +\n            \"(hostName IS NOT NULL AND hostName != '') AND \" +\n            \"provider=? AND \" +\n            \"(lastNotifiedTime IS NULL || lastNotifiedTime < (CURRENT_DATE - INTERVAL 1 DAY))\"", "var_name": "SQL_UPDATE_UNREFRESHED_X509_RECORDS_NOTIFICATION_TIMESTAMP"}, {"original_string": "private static final String SQL_LIST_NOTIFY_UNREFRESHED_X509_RECORDS = \"SELECT * FROM certificates WHERE lastNotifiedTime=? AND lastNotifiedServer=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_NOTIFY_UNREFRESHED_X509_RECORDS = \"SELECT * FROM certificates WHERE lastNotifiedTime=? AND lastNotifiedServer=?;\"", "var_name": "SQL_LIST_NOTIFY_UNREFRESHED_X509_RECORDS"}, {"original_string": "public static final String DB_COLUMN_INSTANCE_ID            = \"instanceId\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_INSTANCE_ID            = \"instanceId\"", "var_name": "DB_COLUMN_INSTANCE_ID"}, {"original_string": "public static final String DB_COLUMN_INSTANCE_PROVIDER      = \"provider\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_INSTANCE_PROVIDER      = \"provider\"", "var_name": "DB_COLUMN_INSTANCE_PROVIDER"}, {"original_string": "public static final String DB_COLUMN_SERVICE                = \"service\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_SERVICE                = \"service\"", "var_name": "DB_COLUMN_SERVICE"}, {"original_string": "public static final String DB_COLUMN_CURRENT_IP             = \"currentIP\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_CURRENT_IP             = \"currentIP\"", "var_name": "DB_COLUMN_CURRENT_IP"}, {"original_string": "public static final String DB_COLUMN_CURRENT_SERIAL         = \"currentSerial\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_CURRENT_SERIAL         = \"currentSerial\"", "var_name": "DB_COLUMN_CURRENT_SERIAL"}, {"original_string": "public static final String DB_COLUMN_CURRENT_TIME           = \"currentTime\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_CURRENT_TIME           = \"currentTime\"", "var_name": "DB_COLUMN_CURRENT_TIME"}, {"original_string": "public static final String DB_COLUMN_PREV_IP                = \"prevIP\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_PREV_IP                = \"prevIP\"", "var_name": "DB_COLUMN_PREV_IP"}, {"original_string": "public static final String DB_COLUMN_PREV_SERIAL            = \"prevSerial\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_PREV_SERIAL            = \"prevSerial\"", "var_name": "DB_COLUMN_PREV_SERIAL"}, {"original_string": "public static final String DB_COLUMN_PREV_TIME              = \"prevTime\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_PREV_TIME              = \"prevTime\"", "var_name": "DB_COLUMN_PREV_TIME"}, {"original_string": "public static final String DB_COLUMN_CLIENT_CERT            = \"clientCert\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_CLIENT_CERT            = \"clientCert\"", "var_name": "DB_COLUMN_CLIENT_CERT"}, {"original_string": "public static final String DB_COLUMN_LAST_NOTIFIED_TIME     = \"lastNotifiedTime\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_LAST_NOTIFIED_TIME     = \"lastNotifiedTime\"", "var_name": "DB_COLUMN_LAST_NOTIFIED_TIME"}, {"original_string": "public static final String DB_COLUMN_LAST_NOTIFIED_SERVER   = \"lastNotifiedServer\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_LAST_NOTIFIED_SERVER   = \"lastNotifiedServer\"", "var_name": "DB_COLUMN_LAST_NOTIFIED_SERVER"}, {"original_string": "public static final String DB_COLUMN_EXPIRY_TIME            = \"expiryTime\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_EXPIRY_TIME            = \"expiryTime\"", "var_name": "DB_COLUMN_EXPIRY_TIME"}, {"original_string": "public static final String DB_COLUMN_HOSTNAME               = \"hostName\";", "modifier": "public static final", "type": "String", "declarator": "DB_COLUMN_HOSTNAME               = \"hostName\"", "var_name": "DB_COLUMN_HOSTNAME"}, {"original_string": "Connection con;", "modifier": "", "type": "Connection", "declarator": "con", "var_name": "con"}, {"original_string": "int queryTimeout = 10;", "modifier": "", "type": "int", "declarator": "queryTimeout = 10", "var_name": "queryTimeout"}], "methods": [{"identifier": "JDBCCertRecordStoreConnection", "parameters": "(Connection con)", "modifiers": "public", "return": "", "signature": " JDBCCertRecordStoreConnection(Connection con)", "full_signature": "public  JDBCCertRecordStoreConnection(Connection con)", "class_method_signature": "JDBCCertRecordStoreConnection.JDBCCertRecordStoreConnection(Connection con)", "testcase": false, "constructor": true}, {"identifier": "setOperationTimeout", "parameters": "(int queryTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setOperationTimeout(int queryTimeout)", "full_signature": "@Override public void setOperationTimeout(int queryTimeout)", "class_method_signature": "JDBCCertRecordStoreConnection.setOperationTimeout(int queryTimeout)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "JDBCCertRecordStoreConnection.close()", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(PreparedStatement ps, String caller)", "modifiers": "", "return": "int", "signature": "int executeUpdate(PreparedStatement ps, String caller)", "full_signature": " int executeUpdate(PreparedStatement ps, String caller)", "class_method_signature": "JDBCCertRecordStoreConnection.executeUpdate(PreparedStatement ps, String caller)", "testcase": false, "constructor": false}, {"identifier": "executeQuery", "parameters": "(PreparedStatement ps, String caller)", "modifiers": "", "return": "ResultSet", "signature": "ResultSet executeQuery(PreparedStatement ps, String caller)", "full_signature": " ResultSet executeQuery(PreparedStatement ps, String caller)", "class_method_signature": "JDBCCertRecordStoreConnection.executeQuery(PreparedStatement ps, String caller)", "testcase": false, "constructor": false}, {"identifier": "getX509CertRecord", "parameters": "(String provider, String instanceId, String service)", "modifiers": "@Override public", "return": "X509CertRecord", "signature": "X509CertRecord getX509CertRecord(String provider, String instanceId, String service)", "full_signature": "@Override public X509CertRecord getX509CertRecord(String provider, String instanceId, String service)", "class_method_signature": "JDBCCertRecordStoreConnection.getX509CertRecord(String provider, String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "setRecordFromResultSet", "parameters": "(ResultSet rs)", "modifiers": "private", "return": "X509CertRecord", "signature": "X509CertRecord setRecordFromResultSet(ResultSet rs)", "full_signature": "private X509CertRecord setRecordFromResultSet(ResultSet rs)", "class_method_signature": "JDBCCertRecordStoreConnection.setRecordFromResultSet(ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "getDateFromResultSet", "parameters": "(ResultSet rs, String columnName)", "modifiers": "private", "return": "Date", "signature": "Date getDateFromResultSet(ResultSet rs, String columnName)", "full_signature": "private Date getDateFromResultSet(ResultSet rs, String columnName)", "class_method_signature": "JDBCCertRecordStoreConnection.getDateFromResultSet(ResultSet rs, String columnName)", "testcase": false, "constructor": false}, {"identifier": "getTimestampFromDate", "parameters": "(Date date)", "modifiers": "private", "return": "Timestamp", "signature": "Timestamp getTimestampFromDate(Date date)", "full_signature": "private Timestamp getTimestampFromDate(Date date)", "class_method_signature": "JDBCCertRecordStoreConnection.getTimestampFromDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "updateX509CertRecord", "parameters": "(X509CertRecord certRecord)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateX509CertRecord(X509CertRecord certRecord)", "full_signature": "@Override public boolean updateX509CertRecord(X509CertRecord certRecord)", "class_method_signature": "JDBCCertRecordStoreConnection.updateX509CertRecord(X509CertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "insertX509CertRecord", "parameters": "(X509CertRecord certRecord)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertX509CertRecord(X509CertRecord certRecord)", "full_signature": "@Override public boolean insertX509CertRecord(X509CertRecord certRecord)", "class_method_signature": "JDBCCertRecordStoreConnection.insertX509CertRecord(X509CertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "deleteX509CertRecord", "parameters": "(String provider, String instanceId, String service)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteX509CertRecord(String provider, String instanceId, String service)", "full_signature": "@Override public boolean deleteX509CertRecord(String provider, String instanceId, String service)", "class_method_signature": "JDBCCertRecordStoreConnection.deleteX509CertRecord(String provider, String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredX509CertRecords", "parameters": "(int expiryTimeMins)", "modifiers": "@Override public", "return": "int", "signature": "int deleteExpiredX509CertRecords(int expiryTimeMins)", "full_signature": "@Override public int deleteExpiredX509CertRecords(int expiryTimeMins)", "class_method_signature": "JDBCCertRecordStoreConnection.deleteExpiredX509CertRecords(int expiryTimeMins)", "testcase": false, "constructor": false}, {"identifier": "updateUnrefreshedCertificatesNotificationTimestamp", "parameters": "(String lastNotifiedServer,\n                                                                      long lastNotifiedTime,\n                                                                      String provider)", "modifiers": "@Override public", "return": "List<X509CertRecord>", "signature": "List<X509CertRecord> updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                      long lastNotifiedTime,\n                                                                      String provider)", "full_signature": "@Override public List<X509CertRecord> updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                      long lastNotifiedTime,\n                                                                      String provider)", "class_method_signature": "JDBCCertRecordStoreConnection.updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                      long lastNotifiedTime,\n                                                                      String provider)", "testcase": false, "constructor": false}, {"identifier": "getNotifyUnrefreshedCertificates", "parameters": "(String lastNotifiedServer, long lastNotifiedTime)", "modifiers": "private", "return": "List<X509CertRecord>", "signature": "List<X509CertRecord> getNotifyUnrefreshedCertificates(String lastNotifiedServer, long lastNotifiedTime)", "full_signature": "private List<X509CertRecord> getNotifyUnrefreshedCertificates(String lastNotifiedServer, long lastNotifiedTime)", "class_method_signature": "JDBCCertRecordStoreConnection.getNotifyUnrefreshedCertificates(String lastNotifiedServer, long lastNotifiedTime)", "testcase": false, "constructor": false}, {"identifier": "sqlError", "parameters": "(SQLException ex, String caller)", "modifiers": "", "return": "RuntimeException", "signature": "RuntimeException sqlError(SQLException ex, String caller)", "full_signature": " RuntimeException sqlError(SQLException ex, String caller)", "class_method_signature": "JDBCCertRecordStoreConnection.sqlError(SQLException ex, String caller)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/JDBCCertRecordStoreConnection.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void close() {\n        \n        if (con == null) {\n            return;\n        }\n        \n        try {\n            con.close();\n            con = null;\n        } catch (SQLException ex) {\n            LOGGER.error(\"Failed to close connection: state - {}, code - {}, message - {}\",\n                    ex.getSQLState(), ex.getErrorCode(), ex.getMessage());\n        }\n    }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "JDBCCertRecordStoreConnection.close()", "testcase": false, "constructor": false, "invocations": ["close", "error", "getSQLState", "getErrorCode", "getMessage"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}