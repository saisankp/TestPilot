{"test_class": {"identifier": "UpgradeTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private UpgradeTask upgradeTask;", "modifier": "@InjectMocks\n    private", "type": "UpgradeTask", "declarator": "upgradeTask", "var_name": "upgradeTask"}, {"original_string": "@Mock\n    private Security security;", "modifier": "@Mock\n    private", "type": "Security", "declarator": "security", "var_name": "security"}, {"original_string": "@Mock\n    private TaskExecutor executor;", "modifier": "@Mock\n    private", "type": "TaskExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "@Mock\n    private ForAll forAll;", "modifier": "@Mock\n    private", "type": "ForAll", "declarator": "forAll", "var_name": "forAll"}, {"original_string": "@Mock\n    private UpgradeService upgradeService;", "modifier": "@Mock\n    private", "type": "UpgradeService", "declarator": "upgradeService", "var_name": "upgradeService"}], "file": "dataprep-maintenance/src/test/java/org/talend/dataprep/maintenance/upgrade/UpgradeTaskTest.java"}, "test_case": {"identifier": "shouldPerformUpgrade", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldPerformUpgrade() {\n        // given\n        when(upgradeService.needUpgrade()).thenReturn(true);\n        when(forAll.condition()).thenReturn(o -> () -> true);\n\n        doAnswer((Answer<Void>) invocation -> {\n            ((Runnable) invocation.getArguments()[1]).run();\n            return null;\n        }).when(forAll).execute(any(), any());\n\n        doAnswer((Answer<Void>) invocation -> {\n            ((Runnable) invocation.getArguments()[0]).run();\n            return null;\n        }).when(executor).execute(any());\n\n        // when\n        upgradeTask.execute();\n\n        // then\n        verify(security, times(2)).getTenantId();\n        verify(upgradeService, times(1)).upgradeVersion();\n    }", "signature": "void shouldPerformUpgrade()", "full_signature": "@Test public void shouldPerformUpgrade()", "class_method_signature": "UpgradeTaskTest.shouldPerformUpgrade()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "needUpgrade", "thenReturn", "when", "condition", "execute", "when", "doAnswer", "run", "getArguments", "any", "any", "execute", "when", "doAnswer", "run", "getArguments", "any", "execute", "getTenantId", "verify", "times", "upgradeVersion", "verify", "times"]}, "focal_class": {"identifier": "UpgradeTask", "superclass": "", "interfaces": "implements MaintenanceTaskProcess", "fields": [{"original_string": "private static final Logger LOG = getLogger(UpgradeTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = getLogger(UpgradeTask.class)", "var_name": "LOG"}, {"original_string": "@Autowired\n    private UpgradeService upgradeService;", "modifier": "@Autowired\n    private", "type": "UpgradeService", "declarator": "upgradeService", "var_name": "upgradeService"}, {"original_string": "@Autowired\n    private UpgradeTaskRepository repository;", "modifier": "@Autowired\n    private", "type": "UpgradeTaskRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired\n    private ForAll forAll;", "modifier": "@Autowired\n    private", "type": "ForAll", "declarator": "forAll", "var_name": "forAll"}, {"original_string": "@Autowired\n    private Security security;", "modifier": "@Autowired\n    private", "type": "Security", "declarator": "security", "var_name": "security"}], "methods": [{"identifier": "performTask", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void performTask()", "full_signature": "public void performTask()", "class_method_signature": "UpgradeTask.performTask()", "testcase": false, "constructor": false}, {"identifier": "condition", "parameters": "()", "modifiers": "public", "return": "Supplier<Boolean>", "signature": "Supplier<Boolean> condition()", "full_signature": "public Supplier<Boolean> condition()", "class_method_signature": "UpgradeTask.condition()", "testcase": false, "constructor": false}, {"identifier": "getFrequency", "parameters": "()", "modifiers": "@Override public", "return": "ScheduleFrequency", "signature": "ScheduleFrequency getFrequency()", "full_signature": "@Override public ScheduleFrequency getFrequency()", "class_method_signature": "UpgradeTask.getFrequency()", "testcase": false, "constructor": false}], "file": "dataprep-maintenance/src/main/java/org/talend/dataprep/maintenance/upgrade/UpgradeTask.java"}, "focal_method": {"identifier": "condition", "parameters": "()", "modifiers": "public", "return": "Supplier<Boolean>", "body": "public Supplier<Boolean> condition() {\n        final Supplier<Boolean> needUpgradeCondition = () -> upgradeService.needUpgrade();\n        final Supplier<Boolean> hasRepositoryConfiguration = forAll.condition().operational(repository);\n        return () -> needUpgradeCondition.get() && hasRepositoryConfiguration.get();\n    }", "signature": "Supplier<Boolean> condition()", "full_signature": "public Supplier<Boolean> condition()", "class_method_signature": "UpgradeTask.condition()", "testcase": false, "constructor": false, "invocations": ["needUpgrade", "operational", "condition", "get", "get"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}