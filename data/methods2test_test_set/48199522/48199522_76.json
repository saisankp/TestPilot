{"test_class": {"identifier": "FPGrowthTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/edu/stanford/futuredata/macrobase/analysis/summary/fpg/FPGrowthTest.java"}, "test_case": {"identifier": "testFPFromPaper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFPFromPaper() {\n        List<Set<Integer>> txns = new ArrayList<>();\n        txns.add(intIfy(\"f, a, c, d, g, i, m, p\"));\n        txns.add(intIfy(\"a, b, c, f, l, m, o\"));\n        txns.add(intIfy(\"b, f, h, j, o\"));\n        txns.add(intIfy(\"b, c, k, s, p\"));\n        txns.add(intIfy(\"a, f, c, e, l, p, m, n\"));\n\n        FPGrowth fp = new FPGrowth();\n        Apriori ap = new Apriori();\n\n        Set<ItemsetWithCount> ap_itemsets = ap.getItemsets(txns, .6);\n        List<ItemsetWithCount> itemsets = fp.getItemsetsWithSupportRatio(txns, .6);\n\n        assertEquals(18, itemsets.size());\n        assert(compareResults(ap_itemsets, itemsets));\n    }", "signature": "void testFPFromPaper()", "full_signature": "@Test public void testFPFromPaper()", "class_method_signature": "FPGrowthTest.testFPFromPaper()", "testcase": true, "constructor": false, "invocations": ["add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "getItemsets", "getItemsetsWithSupportRatio", "assertEquals", "size", "compareResults"]}, "focal_class": {"identifier": "FPGrowth", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getItemsetsWithSupportRatio", "parameters": "(List<Set<Integer>> transactions,\n                                                              Double supportRatio)", "modifiers": "public", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Double supportRatio)", "full_signature": "public List<ItemsetWithCount> getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Double supportRatio)", "class_method_signature": "FPGrowth.getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Double supportRatio)", "testcase": false, "constructor": false}, {"identifier": "getItemsetsWithSupportRatio", "parameters": "(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportRatio)", "modifiers": "public", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportRatio)", "full_signature": "public List<ItemsetWithCount> getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportRatio)", "class_method_signature": "FPGrowth.getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportRatio)", "testcase": false, "constructor": false}, {"identifier": "getItemsetsWithSupportCount", "parameters": "(List<Set<Integer>> transactions,\n                                                              Double supportCount)", "modifiers": "public", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Double supportCount)", "full_signature": "public List<ItemsetWithCount> getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Double supportCount)", "class_method_signature": "FPGrowth.getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Double supportCount)", "testcase": false, "constructor": false}, {"identifier": "getItemsetsWithSupportCount", "parameters": "(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount)", "modifiers": "public", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount)", "full_signature": "public List<ItemsetWithCount> getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount)", "class_method_signature": "FPGrowth.getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount)", "testcase": false, "constructor": false}, {"identifier": "constructTree", "parameters": "(List<Set<Integer>> transactions, int supportCount)", "modifiers": "protected", "return": "FPTree", "signature": "FPTree constructTree(List<Set<Integer>> transactions, int supportCount)", "full_signature": "protected FPTree constructTree(List<Set<Integer>> transactions, int supportCount)", "class_method_signature": "FPGrowth.constructTree(List<Set<Integer>> transactions, int supportCount)", "testcase": false, "constructor": false}, {"identifier": "getItemsetsWithSupportCount", "parameters": "(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount,\n                                                              boolean printTreeDebug)", "modifiers": "public", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount,\n                                                              boolean printTreeDebug)", "full_signature": "public List<ItemsetWithCount> getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount,\n                                                              boolean printTreeDebug)", "class_method_signature": "FPGrowth.getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount,\n                                                              boolean printTreeDebug)", "testcase": false, "constructor": false}, {"identifier": "getCounts", "parameters": "(\n            List<Set<Integer>> transactions,\n            Map<Integer, Double> initialCounts,\n            Set<Integer> targetItems,\n            List<ItemsetWithCount> toCount)", "modifiers": "public", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> getCounts(\n            List<Set<Integer>> transactions,\n            Map<Integer, Double> initialCounts,\n            Set<Integer> targetItems,\n            List<ItemsetWithCount> toCount)", "full_signature": "public List<ItemsetWithCount> getCounts(\n            List<Set<Integer>> transactions,\n            Map<Integer, Double> initialCounts,\n            Set<Integer> targetItems,\n            List<ItemsetWithCount> toCount)", "class_method_signature": "FPGrowth.getCounts(\n            List<Set<Integer>> transactions,\n            Map<Integer, Double> initialCounts,\n            Set<Integer> targetItems,\n            List<ItemsetWithCount> toCount)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/edu/stanford/futuredata/macrobase/analysis/summary/fpg/FPGrowth.java"}, "focal_method": {"identifier": "getItemsetsWithSupportRatio", "parameters": "(List<Set<Integer>> transactions,\n                                                              Double supportRatio)", "modifiers": "public", "return": "List<ItemsetWithCount>", "body": "public List<ItemsetWithCount> getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Double supportRatio) {\n        return getItemsetsWithSupportRatio(transactions, null, supportRatio);\n    }", "signature": "List<ItemsetWithCount> getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Double supportRatio)", "full_signature": "public List<ItemsetWithCount> getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Double supportRatio)", "class_method_signature": "FPGrowth.getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Double supportRatio)", "testcase": false, "constructor": false, "invocations": ["getItemsetsWithSupportRatio"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}