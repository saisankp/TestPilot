{"test_class": {"identifier": "LatLonToIsinGridMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "beam-glob-due-reader/src/test/java/org/esa/beam/dataio/globaerosol/LatLonToIsinGridMapperTest.java"}, "test_case": {"identifier": "testComputeB_v", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComputeB_v() throws Exception {\n        final double cellSizeY = 180.0 / 2004.0;\n        assertEquals(0, LatLonToIsinGridMapper.computeB_v(cellSizeY * 1002));\n        assertEquals(2, LatLonToIsinGridMapper.computeB_v(cellSizeY * 1001));\n        assertEquals(10, LatLonToIsinGridMapper.computeB_v(cellSizeY * 1000));\n        assertEquals(24, LatLonToIsinGridMapper.computeB_v(cellSizeY * 999));\n\n        final int equatorB_v = LatLonToIsinGridMapper.computeB_v(cellSizeY * 0);\n        assertEquals(2 * equatorB_v + LatLonToIsinGridMapper.N_eq - 2,\n                     LatLonToIsinGridMapper.computeB_v(cellSizeY * -1002));\n    }", "signature": "void testComputeB_v()", "full_signature": "@Test public void testComputeB_v()", "class_method_signature": "LatLonToIsinGridMapperTest.testComputeB_v()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "computeB_v", "assertEquals", "computeB_v", "assertEquals", "computeB_v", "assertEquals", "computeB_v", "computeB_v", "assertEquals", "computeB_v"]}, "focal_class": {"identifier": "LatLonToIsinGridMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int N_eq = 4008;", "modifier": "static final", "type": "int", "declarator": "N_eq = 4008", "var_name": "N_eq"}, {"original_string": "static final double R_g = N_eq / 360.0;", "modifier": "static final", "type": "double", "declarator": "R_g = N_eq / 360.0", "var_name": "R_g"}, {"original_string": "static final double u_0 = 180 * R_g + 0.5;", "modifier": "static final", "type": "double", "declarator": "u_0 = 180 * R_g + 0.5", "var_name": "u_0"}, {"original_string": "static final double v_0 = 90 * R_g + 0.5;", "modifier": "static final", "type": "double", "declarator": "v_0 = 90 * R_g + 0.5", "var_name": "v_0"}], "methods": [{"identifier": "LatLonToIsinGridMapper", "parameters": "()", "modifiers": "private", "return": "", "signature": " LatLonToIsinGridMapper()", "full_signature": "private  LatLonToIsinGridMapper()", "class_method_signature": "LatLonToIsinGridMapper.LatLonToIsinGridMapper()", "testcase": false, "constructor": true}, {"identifier": "toIsinGridIndex", "parameters": "(GeoPos gp)", "modifiers": "static", "return": "int", "signature": "int toIsinGridIndex(GeoPos gp)", "full_signature": "static int toIsinGridIndex(GeoPos gp)", "class_method_signature": "LatLonToIsinGridMapper.toIsinGridIndex(GeoPos gp)", "testcase": false, "constructor": false}, {"identifier": "computeN_v", "parameters": "(double lat)", "modifiers": "static", "return": "int", "signature": "int computeN_v(double lat)", "full_signature": "static int computeN_v(double lat)", "class_method_signature": "LatLonToIsinGridMapper.computeN_v(double lat)", "testcase": false, "constructor": false}, {"identifier": "computeB_v", "parameters": "( double lat)", "modifiers": "static", "return": "int", "signature": "int computeB_v( double lat)", "full_signature": "static int computeB_v( double lat)", "class_method_signature": "LatLonToIsinGridMapper.computeB_v( double lat)", "testcase": false, "constructor": false}], "file": "beam-glob-due-reader/src/main/java/org/esa/beam/dataio/globaerosol/LatLonToIsinGridMapper.java"}, "focal_method": {"identifier": "computeB_v", "parameters": "( double lat)", "modifiers": "static", "return": "int", "body": "static int computeB_v( double lat) {\n        int B_v = 0;\n        int v = (int) Math.ceil( R_g * -lat + v_0 );\n        for( int i = 1; i <= v-1; i++){\n//            double latv = (i - v_0 ) / R_g;\n            double latv = 90 - ((i-1) * 180.0 /2004.0);\n            B_v += computeN_v( latv );\n        }\n        return B_v;\n    }", "signature": "int computeB_v( double lat)", "full_signature": "static int computeB_v( double lat)", "class_method_signature": "LatLonToIsinGridMapper.computeB_v( double lat)", "testcase": false, "constructor": false, "invocations": ["ceil", "computeN_v"]}, "repository": {"repo_id": 526150, "url": "https://github.com/bcdev/glob-box", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 6, "size": 6440, "license": "licensed"}}