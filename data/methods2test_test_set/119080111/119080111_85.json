{"test_class": {"identifier": "PropertyTest", "superclass": "", "interfaces": "", "fields": [], "file": "opt4j-core/src/test/java/org/opt4j/core/config/PropertyTest.java"}, "test_case": {"identifier": "isNumberInt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void isNumberInt() {\n\t\tProperty p = new Property(new MyModuleMock(), null, Integer.TYPE, null, null,\n\t\t\t\tCollections.<Annotation> emptySet());\n\n\t\tAssert.assertTrue(p.isNumber());\n\t}", "signature": "void isNumberInt()", "full_signature": "@Test public void isNumberInt()", "class_method_signature": "PropertyTest.isNumberInt()", "testcase": true, "constructor": false, "invocations": ["emptySet", "assertTrue", "isNumber"]}, "focal_class": {"identifier": "Property", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final Module module;", "modifier": "protected final", "type": "Module", "declarator": "module", "var_name": "module"}, {"original_string": "protected final String name;", "modifier": "protected final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "protected final Class<?> type;", "modifier": "protected final", "type": "Class<?>", "declarator": "type", "var_name": "type"}, {"original_string": "protected final Method getter;", "modifier": "protected final", "type": "Method", "declarator": "getter", "var_name": "getter"}, {"original_string": "protected final Method setter;", "modifier": "protected final", "type": "Method", "declarator": "setter", "var_name": "setter"}, {"original_string": "protected String info = \"\";", "modifier": "protected", "type": "String", "declarator": "info = \"\"", "var_name": "info"}, {"original_string": "protected int order = 10000;", "modifier": "protected", "type": "int", "declarator": "order = 10000", "var_name": "order"}, {"original_string": "protected final Collection<Requirement> requirements = new ArrayList<>();", "modifier": "protected final", "type": "Collection<Requirement>", "declarator": "requirements = new ArrayList<>()", "var_name": "requirements"}, {"original_string": "protected final Map<Class<? extends Annotation>, Annotation> annotations = new HashMap<>();", "modifier": "protected final", "type": "Map<Class<? extends Annotation>, Annotation>", "declarator": "annotations = new HashMap<>()", "var_name": "annotations"}], "methods": [{"identifier": "Property", "parameters": "(Module module, String name, Class<?> type, Method getter, Method setter,\n\t\t\tIterable<Annotation> annotations)", "modifiers": "public", "return": "", "signature": " Property(Module module, String name, Class<?> type, Method getter, Method setter,\n\t\t\tIterable<Annotation> annotations)", "full_signature": "public  Property(Module module, String name, Class<?> type, Method getter, Method setter,\n\t\t\tIterable<Annotation> annotations)", "class_method_signature": "Property.Property(Module module, String name, Class<?> type, Method getter, Method setter,\n\t\t\tIterable<Annotation> annotations)", "testcase": false, "constructor": true}, {"identifier": "getInfo", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInfo()", "full_signature": "public String getInfo()", "class_method_signature": "Property.getInfo()", "testcase": false, "constructor": false}, {"identifier": "setInfo", "parameters": "(String info)", "modifiers": "public", "return": "void", "signature": "void setInfo(String info)", "full_signature": "public void setInfo(String info)", "class_method_signature": "Property.setInfo(String info)", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getOrder()", "full_signature": "public int getOrder()", "class_method_signature": "Property.getOrder()", "testcase": false, "constructor": false}, {"identifier": "setOrder", "parameters": "(int order)", "modifiers": "public", "return": "void", "signature": "void setOrder(int order)", "full_signature": "public void setOrder(int order)", "class_method_signature": "Property.setOrder(int order)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Property.getName()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getType()", "full_signature": "public Class<?> getType()", "class_method_signature": "Property.getType()", "testcase": false, "constructor": false}, {"identifier": "getGetter", "parameters": "()", "modifiers": "public", "return": "Method", "signature": "Method getGetter()", "full_signature": "public Method getGetter()", "class_method_signature": "Property.getGetter()", "testcase": false, "constructor": false}, {"identifier": "getSetter", "parameters": "()", "modifiers": "public", "return": "Method", "signature": "Method getSetter()", "full_signature": "public Method getSetter()", "class_method_signature": "Property.getSetter()", "testcase": false, "constructor": false}, {"identifier": "addRequirement", "parameters": "(Requirement requirement)", "modifiers": "public", "return": "void", "signature": "void addRequirement(Requirement requirement)", "full_signature": "public void addRequirement(Requirement requirement)", "class_method_signature": "Property.addRequirement(Requirement requirement)", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isActive()", "full_signature": "public boolean isActive()", "class_method_signature": "Property.isActive()", "testcase": false, "constructor": false}, {"identifier": "getRequirements", "parameters": "()", "modifiers": "public", "return": "Collection<Requirement>", "signature": "Collection<Requirement> getRequirements()", "full_signature": "public Collection<Requirement> getRequirements()", "class_method_signature": "Property.getRequirements()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getValue()", "full_signature": "public Object getValue()", "class_method_signature": "Property.getValue()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(Object value)", "modifiers": "public", "return": "void", "signature": "void setValue(Object value)", "full_signature": "public void setValue(Object value)", "class_method_signature": "Property.setValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(String value)", "modifiers": "public", "return": "void", "signature": "void setValue(String value)", "full_signature": "public void setValue(String value)", "class_method_signature": "Property.setValue(String value)", "testcase": false, "constructor": false}, {"identifier": "isNumber", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNumber()", "full_signature": "public boolean isNumber()", "class_method_signature": "Property.isNumber()", "testcase": false, "constructor": false}, {"identifier": "getEnclosingType", "parameters": "(Type gtype)", "modifiers": "private", "return": "Type", "signature": "Type getEnclosingType(Type gtype)", "full_signature": "private Type getEnclosingType(Type gtype)", "class_method_signature": "Property.getEnclosingType(Type gtype)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(Type type, Class<?> clazz)", "modifiers": "private", "return": "boolean", "signature": "boolean isAssignable(Type type, Class<?> clazz)", "full_signature": "private boolean isAssignable(Type type, Class<?> clazz)", "class_method_signature": "Property.isAssignable(Type type, Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "setValueObject", "parameters": "(Object value)", "modifiers": "protected", "return": "void", "signature": "void setValueObject(Object value)", "full_signature": "protected void setValueObject(Object value)", "class_method_signature": "Property.setValueObject(Object value)", "testcase": false, "constructor": false}, {"identifier": "getAnnotations", "parameters": "()", "modifiers": "public", "return": "Collection<Annotation>", "signature": "Collection<Annotation> getAnnotations()", "full_signature": "public Collection<Annotation> getAnnotations()", "class_method_signature": "Property.getAnnotations()", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "(Class<? extends A> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "A", "signature": "A getAnnotation(Class<? extends A> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public A getAnnotation(Class<? extends A> clazz)", "class_method_signature": "Property.getAnnotation(Class<? extends A> clazz)", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/config/Property.java"}, "focal_method": {"identifier": "isNumber", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isNumber() {\n\t\tboolean isNumber = false;\n\t\tif (type.equals(Integer.TYPE)) {\n\t\t\tisNumber = true;\n\t\t} else if (type.equals(Long.TYPE)) {\n\t\t\tisNumber = true;\n\t\t} else if (type.equals(Double.TYPE)) {\n\t\t\tisNumber = true;\n\t\t} else if (type.equals(Float.TYPE)) {\n\t\t\tisNumber = true;\n\t\t} else if (type.equals(Byte.TYPE)) {\n\t\t\tisNumber = true;\n\t\t} else if (type.equals(Short.TYPE)) {\n\t\t\tisNumber = true;\n\t\t}\n\t\treturn isNumber;\n\t}", "signature": "boolean isNumber()", "full_signature": "public boolean isNumber()", "class_method_signature": "Property.isNumber()", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}