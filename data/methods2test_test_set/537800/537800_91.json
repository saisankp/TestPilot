{"test_class": {"identifier": "HealthCheckTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateTimeFormatter DATE_TIME_FORMATTER =\n            DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "DATE_TIME_FORMATTER =\n            DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\")", "var_name": "DATE_TIME_FORMATTER"}, {"original_string": "private final HealthCheck underlying = mock(HealthCheck.class);", "modifier": "private final", "type": "HealthCheck", "declarator": "underlying = mock(HealthCheck.class)", "var_name": "underlying"}, {"original_string": "private final HealthCheck healthCheck = new ExampleHealthCheck(underlying);", "modifier": "private final", "type": "HealthCheck", "declarator": "healthCheck = new ExampleHealthCheck(underlying)", "var_name": "healthCheck"}], "file": "metrics-healthchecks/src/test/java/com/codahale/metrics/health/HealthCheckTest.java"}, "test_case": {"identifier": "wrapsExceptionsWhenExecuted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void wrapsExceptionsWhenExecuted() {\n        final RuntimeException e = mock(RuntimeException.class);\n        when(e.getMessage()).thenReturn(\"oh noes\");\n\n        when(underlying.execute()).thenThrow(e);\n        HealthCheck.Result actual = healthCheck.execute();\n\n        assertThat(actual.isHealthy())\n                .isFalse();\n        assertThat(actual.getMessage())\n                .isEqualTo(\"oh noes\");\n        assertThat(actual.getError())\n                .isEqualTo(e);\n        assertThat(actual.getDetails())\n                .isNull();\n        assertThat(actual.getDuration())\n                .isGreaterThanOrEqualTo(0);\n    }", "signature": "void wrapsExceptionsWhenExecuted()", "full_signature": "@Test public void wrapsExceptionsWhenExecuted()", "class_method_signature": "HealthCheckTest.wrapsExceptionsWhenExecuted()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getMessage", "thenThrow", "when", "execute", "execute", "isFalse", "assertThat", "isHealthy", "isEqualTo", "assertThat", "getMessage", "isEqualTo", "assertThat", "getError", "isNull", "assertThat", "getDetails", "isGreaterThanOrEqualTo", "assertThat", "getDuration"]}, "focal_class": {"identifier": "HealthCheck", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "check", "parameters": "()", "modifiers": "protected abstract", "return": "Result", "signature": "Result check()", "full_signature": "protected abstract Result check()", "class_method_signature": "HealthCheck.check()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "Result", "signature": "Result execute()", "full_signature": "public Result execute()", "class_method_signature": "HealthCheck.execute()", "testcase": false, "constructor": false}, {"identifier": "clock", "parameters": "()", "modifiers": "protected", "return": "Clock", "signature": "Clock clock()", "full_signature": "protected Clock clock()", "class_method_signature": "HealthCheck.clock()", "testcase": false, "constructor": false}], "file": "metrics-healthchecks/src/main/java/com/codahale/metrics/health/HealthCheck.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "Result", "body": "public Result execute() {\n        long start = clock().getTick();\n        Result result;\n        try {\n            result = check();\n        } catch (Exception e) {\n            result = Result.unhealthy(e);\n        }\n        result.setDuration(TimeUnit.MILLISECONDS.convert(clock().getTick() - start, TimeUnit.NANOSECONDS));\n        return result;\n    }", "signature": "Result execute()", "full_signature": "public Result execute()", "class_method_signature": "HealthCheck.execute()", "testcase": false, "constructor": false, "invocations": ["getTick", "clock", "check", "unhealthy", "setDuration", "convert", "getTick", "clock"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}