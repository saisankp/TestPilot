{"test_class": {"identifier": "AbstractSystemJobTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "private static Logger LOGGER = LoggerFactory.getLogger(AbstractSystemJobTest.class);", "modifier": "private static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AbstractSystemJobTest.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private ApplicationContext applicationContext;", "modifier": "@Autowired\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/systemjobs/AbstractSystemJobTest.java"}, "test_case": {"identifier": "testGetCronExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCronExpression() throws ParseException\n    {\n        // Build a list of system jobs to be scheduled.\n        Map<String, AbstractSystemJob> systemJobs = applicationContext.getBeansOfType(AbstractSystemJob.class);\n\n        // Validate that we located the expected number of system job.\n        assertEquals(7, CollectionUtils.size(systemJobs));\n\n        // Validate cron expression configured in the system for each system job.\n        for (Map.Entry<String, AbstractSystemJob> entry : systemJobs.entrySet())\n        {\n            // Get the name and the system job implementation.\n            String jobName = entry.getKey();\n            AbstractSystemJob systemJob = entry.getValue();\n\n            // Get the cron expression configured in the system for the job.\n            String cronExpressionAsText = systemJob.getCronExpression();\n            LOGGER.info(String.format(\"Testing cron expression \\\"%s\\\" specified for \\\"%s\\\" system job...\", cronExpressionAsText, jobName));\n\n            // Validate the cron expression.\n            if (CronExpression.isValidExpression(cronExpressionAsText))\n            {\n                CronExpression cronExpression = new CronExpression(cronExpressionAsText);\n                LOGGER.info(String.format(\"Next valid time for \\\"%s\\\" cron expression after now is \\\"%s\\\".\", cronExpressionAsText,\n                    cronExpression.getNextValidTimeAfter(new Date())));\n            }\n            else\n            {\n                fail(String.format(\"Cron expression \\\"%s\\\" specified for \\\"%s\\\" system job is not valid.\", cronExpressionAsText, jobName));\n            }\n        }\n    }", "signature": "void testGetCronExpression()", "full_signature": "@Test public void testGetCronExpression()", "class_method_signature": "AbstractSystemJobTest.testGetCronExpression()", "testcase": true, "constructor": false, "invocations": ["getBeansOfType", "assertEquals", "size", "entrySet", "getKey", "getValue", "getCronExpression", "info", "format", "isValidExpression", "info", "format", "getNextValidTimeAfter", "fail", "format"]}, "focal_class": {"identifier": "AbstractSystemJob", "superclass": "extends QuartzJobBean", "interfaces": "", "fields": [{"original_string": "public static final String SYSTEM_JOB_PARAMETERS = \"parameters\";", "modifier": "public static final", "type": "String", "declarator": "SYSTEM_JOB_PARAMETERS = \"parameters\"", "var_name": "SYSTEM_JOB_PARAMETERS"}, {"original_string": "public static final String CRON_TRIGGER_SUFFIX = \"CronTrigger\";", "modifier": "public static final", "type": "String", "declarator": "CRON_TRIGGER_SUFFIX = \"CronTrigger\"", "var_name": "CRON_TRIGGER_SUFFIX"}, {"original_string": "public static final String RUN_ONCE_TRIGGER_SUFFIX = \"RunOnceTrigger\";", "modifier": "public static final", "type": "String", "declarator": "RUN_ONCE_TRIGGER_SUFFIX = \"RunOnceTrigger\"", "var_name": "RUN_ONCE_TRIGGER_SUFFIX"}, {"original_string": "protected Map<String, String> parameters;", "modifier": "protected", "type": "Map<String, String>", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "@Autowired\n    protected ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    protected", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}], "methods": [{"identifier": "setParameters", "parameters": "(Map<String, String> parameters)", "modifiers": "public", "return": "void", "signature": "void setParameters(Map<String, String> parameters)", "full_signature": "public void setParameters(Map<String, String> parameters)", "class_method_signature": "AbstractSystemJob.setParameters(Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "validateParameters", "parameters": "(List<Parameter> parameters)", "modifiers": "public abstract", "return": "void", "signature": "void validateParameters(List<Parameter> parameters)", "full_signature": "public abstract void validateParameters(List<Parameter> parameters)", "class_method_signature": "AbstractSystemJob.validateParameters(List<Parameter> parameters)", "testcase": false, "constructor": false}, {"identifier": "getCronExpression", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getCronExpression()", "full_signature": "public abstract String getCronExpression()", "class_method_signature": "AbstractSystemJob.getCronExpression()", "testcase": false, "constructor": false}, {"identifier": "getJobDataMap", "parameters": "()", "modifiers": "public abstract", "return": "JobDataMap", "signature": "JobDataMap getJobDataMap()", "full_signature": "public abstract JobDataMap getJobDataMap()", "class_method_signature": "AbstractSystemJob.getJobDataMap()", "testcase": false, "constructor": false}, {"identifier": "getJobDataMap", "parameters": "(List<Parameter> parameters)", "modifiers": "public", "return": "JobDataMap", "signature": "JobDataMap getJobDataMap(List<Parameter> parameters)", "full_signature": "public JobDataMap getJobDataMap(List<Parameter> parameters)", "class_method_signature": "AbstractSystemJob.getJobDataMap(List<Parameter> parameters)", "testcase": false, "constructor": false}, {"identifier": "getJobDataMapWithoutParameters", "parameters": "()", "modifiers": "protected", "return": "JobDataMap", "signature": "JobDataMap getJobDataMapWithoutParameters()", "full_signature": "protected JobDataMap getJobDataMapWithoutParameters()", "class_method_signature": "AbstractSystemJob.getJobDataMapWithoutParameters()", "testcase": false, "constructor": false}, {"identifier": "getJobDataMap", "parameters": "(ConfigurationValue... configurationValues)", "modifiers": "protected", "return": "JobDataMap", "signature": "JobDataMap getJobDataMap(ConfigurationValue... configurationValues)", "full_signature": "protected JobDataMap getJobDataMap(ConfigurationValue... configurationValues)", "class_method_signature": "AbstractSystemJob.getJobDataMap(ConfigurationValue... configurationValues)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/systemjobs/AbstractSystemJob.java"}, "focal_method": {"identifier": "getCronExpression", "parameters": "()", "modifiers": "public abstract", "return": "String", "body": "public abstract String getCronExpression();", "signature": "String getCronExpression()", "full_signature": "public abstract String getCronExpression()", "class_method_signature": "AbstractSystemJob.getCronExpression()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}