{"test_class": {"identifier": "TestDefaultIndexer", "superclass": "extends IndexTestBase", "interfaces": "", "fields": [], "file": "themis-index/src/test/java/org/apache/hadoop/hbase/themis/index/cp/TestDefaultIndexer.java"}, "test_case": {"identifier": "testAddIndexMutations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAddIndexMutations() throws IOException {\n    ColumnMutationCache mutationCache = new ColumnMutationCache();\n    mutationCache.addMutation(TABLENAME, KEYVALUE);\n    mutationCache.addMutation(MAIN_TABLE, new KeyValue(ROW, ANOTHER_FAMILY,\n        INDEX_QUALIFIER, Long.MAX_VALUE, Type.Put, VALUE));\n    mutationCache.addMutation(MAIN_TABLE, new KeyValue(ROW,\n        INDEX_FAMILY, ANOTHER_QUALIFIER, Long.MAX_VALUE, Type.Put, VALUE));\n    mutationCache.addMutation(MAIN_TABLE, new KeyValue(ROW,\n        INDEX_FAMILY, INDEX_QUALIFIER, Long.MAX_VALUE,\n        Type.DeleteColumn, VALUE));\n    DefaultIndexer indexer = new DefaultIndexer(conf);\n    indexer.addIndexMutations(mutationCache);\n    Assert.assertEquals(4, mutationCache.size());\n\n    mutationCache.addMutation(MAIN_TABLE, new KeyValue(ROW,\n        INDEX_FAMILY, INDEX_QUALIFIER, Long.MAX_VALUE,\n        Type.Put, VALUE));\n    indexer.addIndexMutations(mutationCache);\n    Assert.assertEquals(5, mutationCache.size());\n    ColumnCoordinate columnCoordinate = new ColumnCoordinate(INDEX_TABLE, VALUE,\n        IndexMasterObserver.THEMIS_SECONDARY_INDEX_TABLE_FAMILY_BYTES, ROW);\n    Pair<Type, byte[]> typeAndValue = mutationCache.getMutation(columnCoordinate);\n    Assert.assertNotNull(typeAndValue);\n    Assert.assertEquals(Type.Put, typeAndValue.getFirst());\n    Assert.assertArrayEquals(HConstants.EMPTY_BYTE_ARRAY, typeAndValue.getSecond());\n  }", "signature": "void testAddIndexMutations()", "full_signature": "@Test public void testAddIndexMutations()", "class_method_signature": "TestDefaultIndexer.testAddIndexMutations()", "testcase": true, "constructor": false, "invocations": ["addMutation", "addMutation", "addMutation", "addMutation", "addIndexMutations", "assertEquals", "size", "addMutation", "addIndexMutations", "assertEquals", "size", "getMutation", "assertNotNull", "assertEquals", "getFirst", "assertArrayEquals", "getSecond"]}, "focal_class": {"identifier": "DefaultIndexer", "superclass": "extends Indexer", "interfaces": "", "fields": [{"original_string": "private final Map<IndexColumn, String> columnIndexes = new HashMap<IndexColumn, String>();", "modifier": "private final", "type": "Map<IndexColumn, String>", "declarator": "columnIndexes = new HashMap<IndexColumn, String>()", "var_name": "columnIndexes"}], "methods": [{"identifier": "DefaultIndexer", "parameters": "(Configuration conf)", "modifiers": "public", "return": "", "signature": " DefaultIndexer(Configuration conf)", "full_signature": "public  DefaultIndexer(Configuration conf)", "class_method_signature": "DefaultIndexer.DefaultIndexer(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "getColumnIndexes", "parameters": "()", "modifiers": "public", "return": "Map<IndexColumn, String>", "signature": "Map<IndexColumn, String> getColumnIndexes()", "full_signature": "public Map<IndexColumn, String> getColumnIndexes()", "class_method_signature": "DefaultIndexer.getColumnIndexes()", "testcase": false, "constructor": false}, {"identifier": "loadSecondaryIndexes", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void loadSecondaryIndexes()", "full_signature": "protected void loadSecondaryIndexes()", "class_method_signature": "DefaultIndexer.loadSecondaryIndexes()", "testcase": false, "constructor": false}, {"identifier": "loadSecondaryIndexesForTable", "parameters": "(HTableDescriptor desc,\n      Map<IndexColumn, String> columnIndexes)", "modifiers": "protected", "return": "void", "signature": "void loadSecondaryIndexesForTable(HTableDescriptor desc,\n      Map<IndexColumn, String> columnIndexes)", "full_signature": "protected void loadSecondaryIndexesForTable(HTableDescriptor desc,\n      Map<IndexColumn, String> columnIndexes)", "class_method_signature": "DefaultIndexer.loadSecondaryIndexesForTable(HTableDescriptor desc,\n      Map<IndexColumn, String> columnIndexes)", "testcase": false, "constructor": false}, {"identifier": "getScanner", "parameters": "(byte[] tableName, ThemisScan scan, Transaction transaction)", "modifiers": "@Override public", "return": "IndexScanner", "signature": "IndexScanner getScanner(byte[] tableName, ThemisScan scan, Transaction transaction)", "full_signature": "@Override public IndexScanner getScanner(byte[] tableName, ThemisScan scan, Transaction transaction)", "class_method_signature": "DefaultIndexer.getScanner(byte[] tableName, ThemisScan scan, Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "addIndexMutations", "parameters": "(ColumnMutationCache mutationCache)", "modifiers": "@Override public", "return": "void", "signature": "void addIndexMutations(ColumnMutationCache mutationCache)", "full_signature": "@Override public void addIndexMutations(ColumnMutationCache mutationCache)", "class_method_signature": "DefaultIndexer.addIndexMutations(ColumnMutationCache mutationCache)", "testcase": false, "constructor": false}, {"identifier": "constructIndexKv", "parameters": "(byte[] mainRowkey, byte[] mainValue)", "modifiers": "protected static", "return": "KeyValue", "signature": "KeyValue constructIndexKv(byte[] mainRowkey, byte[] mainValue)", "full_signature": "protected static KeyValue constructIndexKv(byte[] mainRowkey, byte[] mainValue)", "class_method_signature": "DefaultIndexer.constructIndexKv(byte[] mainRowkey, byte[] mainValue)", "testcase": false, "constructor": false}], "file": "themis-index/src/main/java/org/apache/hadoop/hbase/themis/index/cp/DefaultIndexer.java"}, "focal_method": {"identifier": "addIndexMutations", "parameters": "(ColumnMutationCache mutationCache)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void addIndexMutations(ColumnMutationCache mutationCache) throws IOException {\n    for (Entry<byte[], Map<byte[], RowMutation>> tableMutation : mutationCache.getMutations()) {\n      byte[] tableName = tableMutation.getKey();\n      for (Entry<byte[], RowMutation> rowMutation : tableMutation.getValue().entrySet()) {\n        byte[] row = rowMutation.getKey();\n        for (ColumnMutation columnMuation : rowMutation.getValue().mutationList()) {\n          if (columnMuation.getType().equals(Type.Put)) {\n            IndexColumn indexColumn = new IndexColumn(tableName, columnMuation.getFamily(),\n                columnMuation.getQualifier());\n            if (columnIndexes.containsKey(indexColumn)) {\n              String indexTableName = columnIndexes.get(indexColumn);\n              KeyValue indexKv = constructIndexKv(row, columnMuation.getValue());\n              mutationCache.addMutation(Bytes.toBytes(indexTableName), indexKv);\n            }\n          }\n        }\n      }\n    }\n  }", "signature": "void addIndexMutations(ColumnMutationCache mutationCache)", "full_signature": "@Override public void addIndexMutations(ColumnMutationCache mutationCache)", "class_method_signature": "DefaultIndexer.addIndexMutations(ColumnMutationCache mutationCache)", "testcase": false, "constructor": false, "invocations": ["getMutations", "getKey", "entrySet", "getValue", "getKey", "mutationList", "getValue", "equals", "getType", "getFamily", "getQualifier", "containsKey", "get", "constructIndexKv", "getValue", "addMutation", "toBytes"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}