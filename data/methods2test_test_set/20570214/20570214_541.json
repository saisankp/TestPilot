{"test_class": {"identifier": "WebPushHybridDecryptTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PLAINTEXT = \"V2hlbiBJIGdyb3cgdXAsIEkgd2FudCB0byBiZSBhIHdhdGVybWVsb24\";", "modifier": "private static final", "type": "String", "declarator": "PLAINTEXT = \"V2hlbiBJIGdyb3cgdXAsIEkgd2FudCB0byBiZSBhIHdhdGVybWVsb24\"", "var_name": "PLAINTEXT"}, {"original_string": "private static final String RECEIVER_PRIVATE_KEY = \"q1dXpw3UpT5VOmu_cf_v6ih07Aems3njxI-JWgLcM94\";", "modifier": "private static final", "type": "String", "declarator": "RECEIVER_PRIVATE_KEY = \"q1dXpw3UpT5VOmu_cf_v6ih07Aems3njxI-JWgLcM94\"", "var_name": "RECEIVER_PRIVATE_KEY"}, {"original_string": "private static final String RECEIVER_PUBLIC_KEY =\n      \"BCVxsr7N_eNgVRqvHtD0zTZsEc6-VV-JvLexhqUzORcxaOzi6-AYWXvTBHm4bjyPjs7Vd8pZGH6SRpkNtoIAiw4\";", "modifier": "private static final", "type": "String", "declarator": "RECEIVER_PUBLIC_KEY =\n      \"BCVxsr7N_eNgVRqvHtD0zTZsEc6-VV-JvLexhqUzORcxaOzi6-AYWXvTBHm4bjyPjs7Vd8pZGH6SRpkNtoIAiw4\"", "var_name": "RECEIVER_PUBLIC_KEY"}, {"original_string": "private static final String AUTH_SECRET = \"BTBZMqHH6r4Tts7J_aSIgg\";", "modifier": "private static final", "type": "String", "declarator": "AUTH_SECRET = \"BTBZMqHH6r4Tts7J_aSIgg\"", "var_name": "AUTH_SECRET"}, {"original_string": "private static final String CIPHERTEXT =\n      \"DGv6ra1nlYgDCS1FRnbzlwAAEABBBP4z9KsN6nGRTbVYI_c7VJSPQTBtkgcy27ml\"\n          + \"mlMoZIIgDll6e3vCYLocInmYWAmS6TlzAC8wEqKK6PBru3jl7A_yl95bQpu6cVPT\"\n          + \"pK4Mqgkf1CXztLVBSt2Ks3oZwbuwXPXLWyouBWLVWGNWQexSgSxsj_Qulcy4a-fN\";", "modifier": "private static final", "type": "String", "declarator": "CIPHERTEXT =\n      \"DGv6ra1nlYgDCS1FRnbzlwAAEABBBP4z9KsN6nGRTbVYI_c7VJSPQTBtkgcy27ml\"\n          + \"mlMoZIIgDll6e3vCYLocInmYWAmS6TlzAC8wEqKK6PBru3jl7A_yl95bQpu6cVPT\"\n          + \"pK4Mqgkf1CXztLVBSt2Ks3oZwbuwXPXLWyouBWLVWGNWQexSgSxsj_Qulcy4a-fN\"", "var_name": "CIPHERTEXT"}, {"original_string": "private static final int RECORD_SIZE = 4096;", "modifier": "private static final", "type": "int", "declarator": "RECORD_SIZE = 4096", "var_name": "RECORD_SIZE"}], "file": "apps/webpush/src/test/java/com/google/crypto/tink/apps/webpush/WebPushHybridDecryptTest.java"}, "test_case": {"identifier": "testModifyCiphertext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testModifyCiphertext() throws Exception {\n    KeyPair uaKeyPair = EllipticCurves.generateKeyPair(WebPushConstants.NIST_P256_CURVE_TYPE);\n    ECPrivateKey uaPrivateKey = (ECPrivateKey) uaKeyPair.getPrivate();\n    ECPublicKey uaPublicKey = (ECPublicKey) uaKeyPair.getPublic();\n    byte[] authSecret = Random.randBytes(16);\n\n    HybridEncrypt hybridEncrypt =\n        new WebPushHybridEncrypt.Builder()\n            .withAuthSecret(authSecret)\n            .withRecipientPublicKey(uaPublicKey)\n            .build();\n    HybridDecrypt hybridDecrypt =\n        new WebPushHybridDecrypt.Builder()\n            .withAuthSecret(authSecret)\n            .withRecipientPublicKey(uaPublicKey)\n            .withRecipientPrivateKey(uaPrivateKey)\n            .build();\n    byte[] plaintext = Random.randBytes(20);\n    byte[] ciphertext = hybridEncrypt.encrypt(plaintext, null /* contextInfo */);\n\n    // Flipping bits.\n    for (int b = 0; b < ciphertext.length; b++) {\n      for (int bit = 0; bit < 8; bit++) {\n        byte[] modified = Arrays.copyOf(ciphertext, ciphertext.length);\n        modified[b] ^= (byte) (1 << bit);\n        try {\n          byte[] unused = hybridDecrypt.decrypt(modified, null /* contextInfo */);\n          fail(\"Decrypting modified ciphertext should fail\");\n        } catch (GeneralSecurityException ex) {\n          // This is expected.\n        }\n      }\n    }\n\n    // Truncate the message.\n    for (int length = 0; length < ciphertext.length; length++) {\n      byte[] modified = Arrays.copyOf(ciphertext, length);\n      try {\n        byte[] unused = hybridDecrypt.decrypt(modified, null /* contextInfo */);\n        fail(\"Decrypting modified ciphertext should fail\");\n      } catch (GeneralSecurityException ex) {\n        // This is expected.\n      }\n    }\n  }", "signature": "void testModifyCiphertext()", "full_signature": "@Test public void testModifyCiphertext()", "class_method_signature": "WebPushHybridDecryptTest.testModifyCiphertext()", "testcase": true, "constructor": false, "invocations": ["generateKeyPair", "getPrivate", "getPublic", "randBytes", "build", "withRecipientPublicKey", "withAuthSecret", "build", "withRecipientPrivateKey", "withRecipientPublicKey", "withAuthSecret", "randBytes", "encrypt", "copyOf", "decrypt", "fail", "copyOf", "decrypt", "fail"]}, "focal_class": {"identifier": "WebPushHybridDecrypt", "superclass": "", "interfaces": "implements HybridDecrypt", "fields": [{"original_string": "private final ECPrivateKey recipientPrivateKey;", "modifier": "private final", "type": "ECPrivateKey", "declarator": "recipientPrivateKey", "var_name": "recipientPrivateKey"}, {"original_string": "private final byte[] recipientPublicKey;", "modifier": "private final", "type": "byte[]", "declarator": "recipientPublicKey", "var_name": "recipientPublicKey"}, {"original_string": "private final byte[] authSecret;", "modifier": "private final", "type": "byte[]", "declarator": "authSecret", "var_name": "authSecret"}, {"original_string": "private final int recordSize;", "modifier": "private final", "type": "int", "declarator": "recordSize", "var_name": "recordSize"}], "methods": [{"identifier": "WebPushHybridDecrypt", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " WebPushHybridDecrypt(Builder builder)", "full_signature": "private  WebPushHybridDecrypt(Builder builder)", "class_method_signature": "WebPushHybridDecrypt.WebPushHybridDecrypt(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "decrypt", "parameters": "(final byte[] ciphertext, final byte[] contextInfo /* unused */)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] decrypt(final byte[] ciphertext, final byte[] contextInfo /* unused */)", "full_signature": "@Override public byte[] decrypt(final byte[] ciphertext, final byte[] contextInfo /* unused */)", "class_method_signature": "WebPushHybridDecrypt.decrypt(final byte[] ciphertext, final byte[] contextInfo /* unused */)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(final byte[] key, final byte[] nonce, final byte[] ciphertext)", "modifiers": "private", "return": "byte[]", "signature": "byte[] decrypt(final byte[] key, final byte[] nonce, final byte[] ciphertext)", "full_signature": "private byte[] decrypt(final byte[] key, final byte[] nonce, final byte[] ciphertext)", "class_method_signature": "WebPushHybridDecrypt.decrypt(final byte[] key, final byte[] nonce, final byte[] ciphertext)", "testcase": false, "constructor": false}], "file": "apps/webpush/src/main/java/com/google/crypto/tink/apps/webpush/WebPushHybridDecrypt.java"}, "focal_method": {"identifier": "decrypt", "parameters": "(final byte[] ciphertext, final byte[] contextInfo /* unused */)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n  public byte[] decrypt(final byte[] ciphertext, final byte[] contextInfo /* unused */)\n      throws GeneralSecurityException {\n    if (contextInfo != null) {\n      throw new GeneralSecurityException(\"contextInfo must be null because it is unused\");\n    }\n\n    if (ciphertext.length < WebPushConstants.CIPHERTEXT_OVERHEAD) {\n      throw new GeneralSecurityException(\"ciphertext too short\");\n    }\n\n    // A push service is not required to support more than 4096 octets of\n    // payload body. See https://tools.ietf.org/html/rfc8291#section-4.0.\n    if (ciphertext.length > WebPushConstants.MAX_CIPHERTEXT_SIZE) {\n      throw new GeneralSecurityException(\"ciphertext too long\");\n    }\n\n    // Unpacking.\n    ByteBuffer record = ByteBuffer.wrap(ciphertext);\n    byte[] salt = new byte[WebPushConstants.SALT_SIZE];\n    record.get(salt);\n\n    int recordSize = record.getInt();\n    if (recordSize != this.recordSize\n        || recordSize < ciphertext.length\n        || recordSize > WebPushConstants.MAX_CIPHERTEXT_SIZE) {\n      throw new GeneralSecurityException(\"invalid record size: \" + recordSize);\n    }\n\n    int publicKeySize = (int) record.get();\n    if (publicKeySize != WebPushConstants.PUBLIC_KEY_SIZE) {\n      throw new GeneralSecurityException(\"invalid ephemeral public key size: \" + publicKeySize);\n    }\n\n    byte[] asPublicKey = new byte[WebPushConstants.PUBLIC_KEY_SIZE];\n    record.get(asPublicKey);\n    ECPoint asPublicPoint =\n        EllipticCurves.pointDecode(\n            WebPushConstants.NIST_P256_CURVE_TYPE,\n            WebPushConstants.UNCOMPRESSED_POINT_FORMAT,\n            asPublicKey);\n\n    byte[] payload = new byte[ciphertext.length - WebPushConstants.CONTENT_CODING_HEADER_SIZE];\n    record.get(payload);\n\n    // See https://tools.ietf.org/html/rfc8291#section-3.4.\n    byte[] ecdhSecret = EllipticCurves.computeSharedSecret(recipientPrivateKey, asPublicPoint);\n    byte[] ikm = WebPushUtil.computeIkm(ecdhSecret, authSecret, recipientPublicKey, asPublicKey);\n    byte[] cek = WebPushUtil.computeCek(ikm, salt);\n    byte[] nonce = WebPushUtil.computeNonce(ikm, salt);\n\n    return decrypt(cek, nonce, payload);\n  }", "signature": "byte[] decrypt(final byte[] ciphertext, final byte[] contextInfo /* unused */)", "full_signature": "@Override public byte[] decrypt(final byte[] ciphertext, final byte[] contextInfo /* unused */)", "class_method_signature": "WebPushHybridDecrypt.decrypt(final byte[] ciphertext, final byte[] contextInfo /* unused */)", "testcase": false, "constructor": false, "invocations": ["wrap", "get", "getInt", "get", "get", "pointDecode", "get", "computeSharedSecret", "computeIkm", "computeCek", "computeNonce", "decrypt"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}