{"test_class": {"identifier": "NamedArgumentPlaceholderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OutputStream logCapturingStream;", "modifier": "private", "type": "OutputStream", "declarator": "logCapturingStream", "var_name": "logCapturingStream"}, {"original_string": "private StreamHandler customLogHandler;", "modifier": "private", "type": "StreamHandler", "declarator": "customLogHandler", "var_name": "customLogHandler"}, {"original_string": "private final NamedArgumentPlaceholder underTest = new NamedArgumentPlaceholder();", "modifier": "private final", "type": "NamedArgumentPlaceholder", "declarator": "underTest = new NamedArgumentPlaceholder()", "var_name": "underTest"}, {"original_string": "private Method tenParamMethod;", "modifier": "private", "type": "Method", "declarator": "tenParamMethod", "var_name": "tenParamMethod"}], "file": "junit-jupiter/src/test/java/com/tngtech/junit/dataprovider/placeholder/NamedArgumentPlaceholderTest.java"}, "test_case": {"identifier": "testFormatAllHandlePrimitiveBooleanTypeArrayCorrectly", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testFormatAllHandlePrimitiveBooleanTypeArrayCorrectly() {\n        // Given:\n        final List<Object> arguments = list(new boolean[] { true, false });\n\n        // When:\n        String result = underTest.formatAll(paramsWith(1), arguments);\n\n        // Then:\n        assertThat(result).isEqualTo(\"c0=[true, false]\");\n    }", "signature": "void testFormatAllHandlePrimitiveBooleanTypeArrayCorrectly()", "full_signature": "@Test void testFormatAllHandlePrimitiveBooleanTypeArrayCorrectly()", "class_method_signature": "NamedArgumentPlaceholderTest.testFormatAllHandlePrimitiveBooleanTypeArrayCorrectly()", "testcase": true, "constructor": false, "invocations": ["list", "formatAll", "paramsWith", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "NamedArgumentPlaceholder", "superclass": "extends AbstractArgumentPlaceholder", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(NamedArgumentPlaceholder.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(NamedArgumentPlaceholder.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "NamedArgumentPlaceholder", "parameters": "()", "modifiers": "public", "return": "", "signature": " NamedArgumentPlaceholder()", "full_signature": "public  NamedArgumentPlaceholder()", "class_method_signature": "NamedArgumentPlaceholder.NamedArgumentPlaceholder()", "testcase": false, "constructor": true}, {"identifier": "getReplacementFor", "parameters": "(String placeholder, ReplacementData data)", "modifiers": "@Override protected", "return": "String", "signature": "String getReplacementFor(String placeholder, ReplacementData data)", "full_signature": "@Override protected String getReplacementFor(String placeholder, ReplacementData data)", "class_method_signature": "NamedArgumentPlaceholder.getReplacementFor(String placeholder, ReplacementData data)", "testcase": false, "constructor": false}, {"identifier": "formatAll", "parameters": "(Parameter[] parameters, List<Object> arguments)", "modifiers": "protected", "return": "String", "signature": "String formatAll(Parameter[] parameters, List<Object> arguments)", "full_signature": "protected String formatAll(Parameter[] parameters, List<Object> arguments)", "class_method_signature": "NamedArgumentPlaceholder.formatAll(Parameter[] parameters, List<Object> arguments)", "testcase": false, "constructor": false}, {"identifier": "getSubArrayOfMethodParameters", "parameters": "(Method testMethod, FromAndTo fromAndTo)", "modifiers": "private", "return": "Parameter[]", "signature": "Parameter[] getSubArrayOfMethodParameters(Method testMethod, FromAndTo fromAndTo)", "full_signature": "private Parameter[] getSubArrayOfMethodParameters(Method testMethod, FromAndTo fromAndTo)", "class_method_signature": "NamedArgumentPlaceholder.getSubArrayOfMethodParameters(Method testMethod, FromAndTo fromAndTo)", "testcase": false, "constructor": false}], "file": "junit-jupiter/src/main/java/com/tngtech/junit/dataprovider/placeholder/NamedArgumentPlaceholder.java"}, "focal_method": {"identifier": "formatAll", "parameters": "(Parameter[] parameters, List<Object> arguments)", "modifiers": "protected", "return": "String", "body": "protected String formatAll(Parameter[] parameters, List<Object> arguments) {\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int idx = 0; idx < arguments.size(); idx++) {\n            String parameterName = (parameters.length > idx) ? parameters[idx].getName() : \"?\";\n            Object argument = arguments.get(idx);\n\n            stringBuilder.append(parameterName).append(\"=\").append(format(argument));\n            if (idx < arguments.size() - 1) {\n                stringBuilder.append(\", \");\n            }\n        }\n        return stringBuilder.toString();\n    }", "signature": "String formatAll(Parameter[] parameters, List<Object> arguments)", "full_signature": "protected String formatAll(Parameter[] parameters, List<Object> arguments)", "class_method_signature": "NamedArgumentPlaceholder.formatAll(Parameter[] parameters, List<Object> arguments)", "testcase": false, "constructor": false, "invocations": ["size", "getName", "get", "append", "append", "append", "format", "size", "append", "toString"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}