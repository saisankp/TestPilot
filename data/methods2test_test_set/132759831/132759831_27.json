{"test_class": {"identifier": "ActorDetailResponseToActorTest", "superclass": "extends UnitTest", "interfaces": "", "fields": [{"original_string": "@Mock private ActorDetailResponse responseDetailMock;", "modifier": "@Mock private", "type": "ActorDetailResponse", "declarator": "responseDetailMock", "var_name": "responseDetailMock"}, {"original_string": "@Mock private ActorResponse responseMock;", "modifier": "@Mock private", "type": "ActorResponse", "declarator": "responseMock", "var_name": "responseMock"}, {"original_string": "@Mock private List<ActorNetwork> actorNetworkListMock;", "modifier": "@Mock private", "type": "List<ActorNetwork>", "declarator": "actorNetworkListMock", "var_name": "actorNetworkListMock"}, {"original_string": "private ActorDetailResponseToActor mapper;", "modifier": "private", "type": "ActorDetailResponseToActor", "declarator": "mapper", "var_name": "mapper"}], "file": "app/src/test/java/com/ru/devit/mediateka/models/mapper/ActorDetailResponseToActorTest.java"}, "test_case": {"identifier": "shouldMapListOfActor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldMapListOfActor() {\n        List<ActorNetwork> spyListOfActors = spy(new ArrayList<>());\n        spyListOfActors.add(new ActorNetwork());\n        doReturn(1).when(actorNetworkListMock).size();\n        doReturn(spyListOfActors).when(responseMock).getActors();\n\n        final List<Actor> actorList = mapper.map(responseMock);\n        assertNotNull(actorList);\n        assertFalse(actorList.isEmpty());\n        assertEquals(responseMock.getActors().size() , actorList.size());\n    }", "signature": "void shouldMapListOfActor()", "full_signature": "@Test public void shouldMapListOfActor()", "class_method_signature": "ActorDetailResponseToActorTest.shouldMapListOfActor()", "testcase": true, "constructor": false, "invocations": ["spy", "add", "size", "when", "doReturn", "getActors", "when", "doReturn", "map", "assertNotNull", "assertFalse", "isEmpty", "assertEquals", "size", "getActors", "size"]}, "focal_class": {"identifier": "ActorDetailResponseToActor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "map", "parameters": "(ActorDetailResponse response)", "modifiers": "public", "return": "Actor", "signature": "Actor map(ActorDetailResponse response)", "full_signature": "public Actor map(ActorDetailResponse response)", "class_method_signature": "ActorDetailResponseToActor.map(ActorDetailResponse response)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(ActorResponse response)", "modifiers": "public", "return": "List<Actor>", "signature": "List<Actor> map(ActorResponse response)", "full_signature": "public List<Actor> map(ActorResponse response)", "class_method_signature": "ActorDetailResponseToActor.map(ActorResponse response)", "testcase": false, "constructor": false}, {"identifier": "setBackgroundPosters", "parameters": "(ActorDetailResponse response, Actor actor)", "modifiers": "private", "return": "void", "signature": "void setBackgroundPosters(ActorDetailResponse response, Actor actor)", "full_signature": "private void setBackgroundPosters(ActorDetailResponse response, Actor actor)", "class_method_signature": "ActorDetailResponseToActor.setBackgroundPosters(ActorDetailResponse response, Actor actor)", "testcase": false, "constructor": false}, {"identifier": "checkAgeThenSet", "parameters": "(ActorDetailResponse response , Actor actor)", "modifiers": "private", "return": "void", "signature": "void checkAgeThenSet(ActorDetailResponse response , Actor actor)", "full_signature": "private void checkAgeThenSet(ActorDetailResponse response , Actor actor)", "class_method_signature": "ActorDetailResponseToActor.checkAgeThenSet(ActorDetailResponse response , Actor actor)", "testcase": false, "constructor": false}, {"identifier": "setCinemas", "parameters": "(ActorDetailResponse response , Actor actor)", "modifiers": "private", "return": "void", "signature": "void setCinemas(ActorDetailResponse response , Actor actor)", "full_signature": "private void setCinemas(ActorDetailResponse response , Actor actor)", "class_method_signature": "ActorDetailResponseToActor.setCinemas(ActorDetailResponse response , Actor actor)", "testcase": false, "constructor": false}, {"identifier": "setPosters", "parameters": "(ActorDetailResponse response , Actor actor)", "modifiers": "private", "return": "void", "signature": "void setPosters(ActorDetailResponse response , Actor actor)", "full_signature": "private void setPosters(ActorDetailResponse response , Actor actor)", "class_method_signature": "ActorDetailResponseToActor.setPosters(ActorDetailResponse response , Actor actor)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/ru/devit/mediateka/models/mapper/ActorDetailResponseToActor.java"}, "focal_method": {"identifier": "map", "parameters": "(ActorDetailResponse response)", "modifiers": "public", "return": "Actor", "body": "public Actor map(ActorDetailResponse response){\n        Actor actor = new Actor();\n        actor.setActorId(response.getId());\n        actor.setProfileUrl(response.getProfilePath());\n        actor.setName(response.getName());\n        actor.setBiography(response.getBiography());\n        actor.setDeathDay((String) response.getDeathday());\n        actor.setPlaceOfBirth(defaultValueIfNull(response.getPlaceOfBirth()));\n        actor.setPopularity(response.getPopularity());\n        checkAgeThenSet(response , actor);\n        setCinemas(response , actor);\n        setPosters(response , actor);\n        setBackgroundPosters(response , actor);\n        return actor;\n    }", "signature": "Actor map(ActorDetailResponse response)", "full_signature": "public Actor map(ActorDetailResponse response)", "class_method_signature": "ActorDetailResponseToActor.map(ActorDetailResponse response)", "testcase": false, "constructor": false, "invocations": ["setActorId", "getId", "setProfileUrl", "getProfilePath", "setName", "getName", "setBiography", "getBiography", "setDeathDay", "getDeathday", "setPlaceOfBirth", "defaultValueIfNull", "getPlaceOfBirth", "setPopularity", "getPopularity", "checkAgeThenSet", "setCinemas", "setPosters", "setBackgroundPosters"]}, "repository": {"repo_id": 132759831, "url": "https://github.com/Devit951/Mediateka", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 33, "size": 679, "license": "licensed"}}