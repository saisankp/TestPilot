{"test_class": {"identifier": "MassToFormulaToolTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private IsotopeFactory                  ifac;", "modifier": "private", "type": "IsotopeFactory", "declarator": "ifac", "var_name": "ifac"}], "file": "legacy/src/test/java/org/openscience/cdk/formula/MassToFormulaToolTest.java"}, "test_case": {"identifier": "testSetDefaultRestrictions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetDefaultRestrictions() {\n        MassToFormulaTool mfTool = new MassToFormulaTool(builder);\n\n        List<IRule> rules = mfTool.getRestrictions();\n        Assert.assertNotNull(rules);\n\n        Assert.assertEquals(3, rules.size());\n\n        ElementRule elemR = (ElementRule) rules.get(0);\n        Assert.assertEquals(1, elemR.getParameters().length);\n        Object[] objects = elemR.getParameters();\n        MolecularFormulaRange mfRange = (MolecularFormulaRange) objects[0];\n        Assert.assertEquals(4, mfRange.getIsotopeCount());\n        Assert.assertEquals(15, mfRange.getIsotopeCountMax(ifac.getMajorIsotope(\"C\")));\n        Assert.assertEquals(0, mfRange.getIsotopeCountMin(ifac.getMajorIsotope(\"C\")));\n        Assert.assertEquals(15, mfRange.getIsotopeCountMax(ifac.getMajorIsotope(\"H\")));\n        Assert.assertEquals(0, mfRange.getIsotopeCountMin(ifac.getMajorIsotope(\"H\")));\n        Assert.assertEquals(15, mfRange.getIsotopeCountMax(ifac.getMajorIsotope(\"N\")));\n        Assert.assertEquals(0, mfRange.getIsotopeCountMin(ifac.getMajorIsotope(\"N\")));\n        Assert.assertEquals(15, mfRange.getIsotopeCountMax(ifac.getMajorIsotope(\"O\")));\n        Assert.assertEquals(0, mfRange.getIsotopeCountMin(ifac.getMajorIsotope(\"O\")));\n\n        ChargeRule chargeR = (ChargeRule) rules.get(1);\n        Assert.assertEquals(1, chargeR.getParameters().length);\n        objects = chargeR.getParameters();\n        double charge = (Double) objects[0];\n        Assert.assertEquals(0.0, charge, 0.001);\n\n        ToleranceRangeRule toleranceR = (ToleranceRangeRule) rules.get(2);\n        Assert.assertEquals(2, toleranceR.getParameters().length);\n        objects = toleranceR.getParameters();\n        double mass = (Double) objects[0];\n        Assert.assertEquals(0.0, mass, 0.001);\n        double tolerance = (Double) objects[1];\n        Assert.assertEquals(0.05, tolerance, 0.001);\n\n    }", "signature": "void testSetDefaultRestrictions()", "full_signature": "@Test public void testSetDefaultRestrictions()", "class_method_signature": "MassToFormulaToolTest.testSetDefaultRestrictions()", "testcase": true, "constructor": false, "invocations": ["getRestrictions", "assertNotNull", "assertEquals", "size", "get", "assertEquals", "getParameters", "getParameters", "assertEquals", "getIsotopeCount", "assertEquals", "getIsotopeCountMax", "getMajorIsotope", "assertEquals", "getIsotopeCountMin", "getMajorIsotope", "assertEquals", "getIsotopeCountMax", "getMajorIsotope", "assertEquals", "getIsotopeCountMin", "getMajorIsotope", "assertEquals", "getIsotopeCountMax", "getMajorIsotope", "assertEquals", "getIsotopeCountMin", "getMajorIsotope", "assertEquals", "getIsotopeCountMax", "getMajorIsotope", "assertEquals", "getIsotopeCountMin", "getMajorIsotope", "get", "assertEquals", "getParameters", "getParameters", "assertEquals", "get", "assertEquals", "getParameters", "getParameters", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "MassToFormulaTool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ILoggingTool          logger = LoggingToolFactory.createLoggingTool(MassToFormulaTool.class);", "modifier": "private", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MassToFormulaTool.class)", "var_name": "logger"}, {"original_string": "private IChemObjectBuilder    builder;", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "AtomTypeFactory               factory;", "modifier": "", "type": "AtomTypeFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private int[][]               matrix_Base;", "modifier": "private", "type": "int[][]", "declarator": "matrix_Base", "var_name": "matrix_Base"}, {"original_string": "private String[]              orderElements;", "modifier": "private", "type": "String[]", "declarator": "orderElements", "var_name": "orderElements"}, {"original_string": "private List<IRule>           rules;", "modifier": "private", "type": "List<IRule>", "declarator": "rules", "var_name": "rules"}, {"original_string": "private MolecularFormulaRange mfRange;", "modifier": "private", "type": "MolecularFormulaRange", "declarator": "mfRange", "var_name": "mfRange"}, {"original_string": "private Double                charge;", "modifier": "private", "type": "Double", "declarator": "charge", "var_name": "charge"}, {"original_string": "private Double                tolerance;", "modifier": "private", "type": "Double", "declarator": "tolerance", "var_name": "tolerance"}], "methods": [{"identifier": "MassToFormulaTool", "parameters": "(IChemObjectBuilder builder)", "modifiers": "public", "return": "", "signature": " MassToFormulaTool(IChemObjectBuilder builder)", "full_signature": "public  MassToFormulaTool(IChemObjectBuilder builder)", "class_method_signature": "MassToFormulaTool.MassToFormulaTool(IChemObjectBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "setRestrictions", "parameters": "(List<IRule> rulesNew)", "modifiers": "public", "return": "void", "signature": "void setRestrictions(List<IRule> rulesNew)", "full_signature": "public void setRestrictions(List<IRule> rulesNew)", "class_method_signature": "MassToFormulaTool.setRestrictions(List<IRule> rulesNew)", "testcase": false, "constructor": false}, {"identifier": "getRestrictions", "parameters": "()", "modifiers": "public", "return": "List<IRule>", "signature": "List<IRule> getRestrictions()", "full_signature": "public List<IRule> getRestrictions()", "class_method_signature": "MassToFormulaTool.getRestrictions()", "testcase": false, "constructor": false}, {"identifier": "setDefaultRestrictions", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setDefaultRestrictions()", "full_signature": "public void setDefaultRestrictions()", "class_method_signature": "MassToFormulaTool.setDefaultRestrictions()", "testcase": false, "constructor": false}, {"identifier": "callDefaultRestrictions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void callDefaultRestrictions()", "full_signature": "private void callDefaultRestrictions()", "class_method_signature": "MassToFormulaTool.callDefaultRestrictions()", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(double mass)", "modifiers": "public", "return": "IMolecularFormulaSet", "signature": "IMolecularFormulaSet generate(double mass)", "full_signature": "public IMolecularFormulaSet generate(double mass)", "class_method_signature": "MassToFormulaTool.generate(double mass)", "testcase": false, "constructor": false}, {"identifier": "orderList", "parameters": "(List<IIsotope> isotopes_TO)", "modifiers": "private", "return": "List<IIsotope>", "signature": "List<IIsotope> orderList(List<IIsotope> isotopes_TO)", "full_signature": "private List<IIsotope> orderList(List<IIsotope> isotopes_TO)", "class_method_signature": "MassToFormulaTool.orderList(List<IIsotope> isotopes_TO)", "testcase": false, "constructor": false}, {"identifier": "generateOrderE", "parameters": "()", "modifiers": "private", "return": "String[]", "signature": "String[] generateOrderE()", "full_signature": "private String[] generateOrderE()", "class_method_signature": "MassToFormulaTool.generateOrderE()", "testcase": false, "constructor": false}, {"identifier": "getMaxOccurence", "parameters": "(double massTo, int element_pos, int[] matrix, List<IIsotope> isoToCond_new)", "modifiers": "private", "return": "int", "signature": "int getMaxOccurence(double massTo, int element_pos, int[] matrix, List<IIsotope> isoToCond_new)", "full_signature": "private int getMaxOccurence(double massTo, int element_pos, int[] matrix, List<IIsotope> isoToCond_new)", "class_method_signature": "MassToFormulaTool.getMaxOccurence(double massTo, int element_pos, int[] matrix, List<IIsotope> isoToCond_new)", "testcase": false, "constructor": false}, {"identifier": "getFormula", "parameters": "(List<IIsotope> isoToCond_new, int[] value_In)", "modifiers": "private", "return": "IMolecularFormula", "signature": "IMolecularFormula getFormula(List<IIsotope> isoToCond_new, int[] value_In)", "full_signature": "private IMolecularFormula getFormula(List<IIsotope> isoToCond_new, int[] value_In)", "class_method_signature": "MassToFormulaTool.getFormula(List<IIsotope> isoToCond_new, int[] value_In)", "testcase": false, "constructor": false}, {"identifier": "putInOrder", "parameters": "(IMolecularFormula formula)", "modifiers": "private", "return": "IMolecularFormula", "signature": "IMolecularFormula putInOrder(IMolecularFormula formula)", "full_signature": "private IMolecularFormula putInOrder(IMolecularFormula formula)", "class_method_signature": "MassToFormulaTool.putInOrder(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "calculateMassT", "parameters": "(List<IIsotope> isoToCond_new, int[] value_In)", "modifiers": "private", "return": "double", "signature": "double calculateMassT(List<IIsotope> isoToCond_new, int[] value_In)", "full_signature": "private double calculateMassT(List<IIsotope> isoToCond_new, int[] value_In)", "class_method_signature": "MassToFormulaTool.calculateMassT(List<IIsotope> isoToCond_new, int[] value_In)", "testcase": false, "constructor": false}, {"identifier": "returnOrdered", "parameters": "(double mass, IMolecularFormulaSet formulaSet)", "modifiers": "private", "return": "IMolecularFormulaSet", "signature": "IMolecularFormulaSet returnOrdered(double mass, IMolecularFormulaSet formulaSet)", "full_signature": "private IMolecularFormulaSet returnOrdered(double mass, IMolecularFormulaSet formulaSet)", "class_method_signature": "MassToFormulaTool.returnOrdered(double mass, IMolecularFormulaSet formulaSet)", "testcase": false, "constructor": false}, {"identifier": "getMatrix", "parameters": "(int size)", "modifiers": "private", "return": "int[][]", "signature": "int[][] getMatrix(int size)", "full_signature": "private int[][] getMatrix(int size)", "class_method_signature": "MassToFormulaTool.getMatrix(int size)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/formula/MassToFormulaTool.java"}, "focal_method": {"identifier": "setDefaultRestrictions", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void setDefaultRestrictions() {\n        try {\n            callDefaultRestrictions();\n        } catch (CDKException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }", "signature": "void setDefaultRestrictions()", "full_signature": "public void setDefaultRestrictions()", "class_method_signature": "MassToFormulaTool.setDefaultRestrictions()", "testcase": false, "constructor": false, "invocations": ["callDefaultRestrictions", "printStackTrace", "printStackTrace"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}