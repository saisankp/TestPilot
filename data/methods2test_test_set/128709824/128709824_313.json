{"test_class": {"identifier": "JDKProxyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = LoggerFactory.getLogger(JDKProxyTest.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JDKProxyTest.class)", "var_name": "LOGGER"}], "file": "core-impl/proxy/src/test/java/com/alipay/sofa/rpc/proxy/jdk/JDKProxyTest.java"}, "test_case": {"identifier": "getProxy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getProxy() throws Exception {\n        JDKProxy proxy = new JDKProxy();\n        AbstractTestClass testClass = null;\n        try {\n            testClass = proxy.getProxy(AbstractTestClass.class, new TestInvoker());\n        } catch (Exception e) {\n            LOGGER.info(e.getMessage());\n        }\n        Assert.assertNull(testClass);\n\n        TestInvoker invoker = new TestInvoker();\n        TestInterface testInterface = proxy.getProxy(TestInterface.class, invoker);\n        Assert.assertNotNull(testInterface);\n\n        Class clazz = testInterface.getClass().getInterfaces()[0];\n        Assert.assertEquals(TestInterface.class, clazz);\n\n        Assert.assertTrue(Proxy.class.isAssignableFrom(testInterface.getClass()));\n        Assert.assertTrue(Proxy.isProxyClass(testInterface.getClass()));\n\n        Assert.assertEquals(proxy.getInvoker(testInterface).getClass(), TestInvoker.class);\n        Assert.assertEquals(testInterface.toString(), invoker.toString());\n        Assert.assertEquals(testInterface.hashCode(), invoker.hashCode());\n\n        TestInterface another1 = proxy.getProxy(TestInterface.class, invoker);\n        TestInterface another2 = proxy.getProxy(TestInterface.class, new TestInvoker());\n        Assert.assertFalse(testInterface.equals(invoker));\n        Assert.assertFalse(testInterface.equals(another2));\n        Assert.assertEquals(testInterface, another1);\n\n        Assert.assertEquals(678, another1.sayNum(true));\n        SofaRequest request = invoker.getRequest();\n        Assert.assertEquals(TestInterface.class.getCanonicalName(), request.getInterfaceName());\n        Assert.assertEquals(\"sayNum\", request.getMethodName());\n        Assert.assertEquals(\"boolean\", request.getMethodArgSigs()[0]);\n        Assert.assertEquals(true, request.getMethodArgs()[0]);\n        Assert.assertNotNull(request.getMethod());\n\n        Assert.assertEquals(\"sayHello\", another1.sayHello(\"xxxx\"));\n        another1.sayNoting();\n        Assert.assertArrayEquals(new int[] { 6, 7, 8 }, another1.sayNums(null, new HashMap()));\n        Assert.assertNull(another1.sayNum2(1.2D));\n\n        boolean error = false;\n        try {\n            another1.throwbiz1();\n        } catch (Throwable e) {\n            error = true;\n        }\n        Assert.assertFalse(error);\n\n        error = false;\n        try {\n            another1.throwbiz2();\n        } catch (Throwable e) {\n            error = true;\n        }\n        Assert.assertFalse(error);\n\n        try {\n            another1.throwRPC();\n        } catch (Throwable e) {\n            error = true;\n        }\n        Assert.assertTrue(error);\n    }", "signature": "void getProxy()", "full_signature": "@Test public void getProxy()", "class_method_signature": "JDKProxyTest.getProxy()", "testcase": true, "constructor": false, "invocations": ["getProxy", "info", "getMessage", "assertNull", "getProxy", "assertNotNull", "getInterfaces", "getClass", "assertEquals", "assertTrue", "isAssignableFrom", "getClass", "assertTrue", "isProxyClass", "getClass", "assertEquals", "getClass", "getInvoker", "assertEquals", "toString", "toString", "assertEquals", "hashCode", "hashCode", "getProxy", "getProxy", "assertFalse", "equals", "assertFalse", "equals", "assertEquals", "assertEquals", "sayNum", "getRequest", "assertEquals", "getCanonicalName", "getInterfaceName", "assertEquals", "getMethodName", "assertEquals", "getMethodArgSigs", "assertEquals", "getMethodArgs", "assertNotNull", "getMethod", "assertEquals", "sayHello", "sayNoting", "assertArrayEquals", "sayNums", "assertNull", "sayNum2", "throwbiz1", "assertFalse", "throwbiz2", "assertFalse", "throwRPC", "assertTrue"]}, "focal_class": {"identifier": "JDKProxy", "superclass": "", "interfaces": "implements Proxy", "fields": [], "methods": [{"identifier": "getProxy", "parameters": "(Class<T> interfaceClass, Invoker proxyInvoker)", "modifiers": "@Override public", "return": "T", "signature": "T getProxy(Class<T> interfaceClass, Invoker proxyInvoker)", "full_signature": "@Override public T getProxy(Class<T> interfaceClass, Invoker proxyInvoker)", "class_method_signature": "JDKProxy.getProxy(Class<T> interfaceClass, Invoker proxyInvoker)", "testcase": false, "constructor": false}, {"identifier": "getInvoker", "parameters": "(Object proxyObject)", "modifiers": "@Override public", "return": "Invoker", "signature": "Invoker getInvoker(Object proxyObject)", "full_signature": "@Override public Invoker getInvoker(Object proxyObject)", "class_method_signature": "JDKProxy.getInvoker(Object proxyObject)", "testcase": false, "constructor": false}, {"identifier": "parseInvoker", "parameters": "(Object proxyObject)", "modifiers": "public static", "return": "Invoker", "signature": "Invoker parseInvoker(Object proxyObject)", "full_signature": "public static Invoker parseInvoker(Object proxyObject)", "class_method_signature": "JDKProxy.parseInvoker(Object proxyObject)", "testcase": false, "constructor": false}], "file": "core-impl/proxy/src/main/java/com/alipay/sofa/rpc/proxy/jdk/JDKProxy.java"}, "focal_method": {"identifier": "getProxy", "parameters": "(Class<T> interfaceClass, Invoker proxyInvoker)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T getProxy(Class<T> interfaceClass, Invoker proxyInvoker) {\n        InvocationHandler handler = new JDKInvocationHandler(interfaceClass, proxyInvoker);\n        ClassLoader classLoader = ClassLoaderUtils.getCurrentClassLoader();\n        T result = (T) java.lang.reflect.Proxy.newProxyInstance(classLoader,\n            new Class[] { interfaceClass }, handler);\n        return result;\n    }", "signature": "T getProxy(Class<T> interfaceClass, Invoker proxyInvoker)", "full_signature": "@Override public T getProxy(Class<T> interfaceClass, Invoker proxyInvoker)", "class_method_signature": "JDKProxy.getProxy(Class<T> interfaceClass, Invoker proxyInvoker)", "testcase": false, "constructor": false, "invocations": ["getCurrentClassLoader", "newProxyInstance"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}