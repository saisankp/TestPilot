{"test_class": {"identifier": "JAXBObjectEntityProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_XML_CONTENT = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n                                                   + \"<book send-by-post=\\\"true\\\">\"\n                                                   + \"  <title>Java and XML Data Binding</title>\"\n                                                   + \"  <author>Brett McLaughlin</author>\"\n                                                   + \"  <price currency=\\\"USD\\\">34.95</price>\"\n                                                   + \"  <member-price currency=\\\"USD\\\">26.56</member-price>\"\n                                                   + \"</book>\";", "modifier": "private static final", "type": "String", "declarator": "TEST_XML_CONTENT = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n                                                   + \"<book send-by-post=\\\"true\\\">\"\n                                                   + \"  <title>Java and XML Data Binding</title>\"\n                                                   + \"  <author>Brett McLaughlin</author>\"\n                                                   + \"  <price currency=\\\"USD\\\">34.95</price>\"\n                                                   + \"  <member-price currency=\\\"USD\\\">26.56</member-price>\"\n                                                   + \"</book>\"", "var_name": "TEST_XML_CONTENT"}, {"original_string": "private static final byte[] TEST_XML_CONTENT_BYTES = TEST_XML_CONTENT.getBytes();", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_XML_CONTENT_BYTES = TEST_XML_CONTENT.getBytes()", "var_name": "TEST_XML_CONTENT_BYTES"}, {"original_string": "private MessageBodyReader reader;", "modifier": "private", "type": "MessageBodyReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private MessageBodyWriter writer;", "modifier": "private", "type": "MessageBodyWriter", "declarator": "writer", "var_name": "writer"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/JAXBObjectEntityProviderTest.java"}, "test_case": {"identifier": "readsObjectFromEntityStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readsObjectFromEntityStream() throws Exception {\n        Book book = (Book)reader.readFrom(Book.class, null, null, APPLICATION_XML_TYPE, new MultivaluedMapImpl(), new ByteArrayInputStream(TEST_XML_CONTENT_BYTES));\n\n        assertEquals(\"Java and XML Data Binding\", book.getTitle());\n        assertTrue(book.isSendByPost());\n        assertEquals(\"Brett McLaughlin\", book.getAuthor());\n        assertEquals(\"USD\", book.getPrice().getCurrency());\n        assertEquals(new BigDecimal(\"34.95\"), book.getPrice().getValue());\n        assertEquals(\"USD\", book.getMemberPrice().getCurrency());\n        assertEquals(new BigDecimal(\"26.56\"), book.getMemberPrice().getValue());\n    }", "signature": "void readsObjectFromEntityStream()", "full_signature": "@Test public void readsObjectFromEntityStream()", "class_method_signature": "JAXBObjectEntityProviderTest.readsObjectFromEntityStream()", "testcase": true, "constructor": false, "invocations": ["readFrom", "assertEquals", "getTitle", "assertTrue", "isSendByPost", "assertEquals", "getAuthor", "assertEquals", "getCurrency", "getPrice", "assertEquals", "getValue", "getPrice", "assertEquals", "getCurrency", "getMemberPrice", "assertEquals", "getValue", "getMemberPrice"]}, "focal_class": {"identifier": "JAXBObjectEntityProvider", "superclass": "", "interfaces": "implements EntityProvider<Object>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JAXBObjectEntityProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JAXBObjectEntityProvider.class)", "var_name": "LOG"}, {"original_string": "private Providers providers;", "modifier": "private", "type": "Providers", "declarator": "providers", "var_name": "providers"}], "methods": [{"identifier": "JAXBObjectEntityProvider", "parameters": "(@Context Providers providers)", "modifiers": "public", "return": "", "signature": " JAXBObjectEntityProvider(@Context Providers providers)", "full_signature": "public  JAXBObjectEntityProvider(@Context Providers providers)", "class_method_signature": "JAXBObjectEntityProvider.JAXBObjectEntityProvider(@Context Providers providers)", "testcase": false, "constructor": true}, {"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "JAXBObjectEntityProvider.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Class<Object> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream)", "modifiers": "@Override public", "return": "Object", "signature": "Object readFrom(Class<Object> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream)", "full_signature": "@Override public Object readFrom(Class<Object> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream)", "class_method_signature": "JAXBObjectEntityProvider.readFrom(Class<Object> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(Object t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "long", "signature": "long getSize(Object t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public long getSize(Object t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "JAXBObjectEntityProvider.getSize(Object t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "JAXBObjectEntityProvider.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(Object t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(Object t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@Override public void writeTo(Object t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "JAXBObjectEntityProvider.writeTo(Object t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getCharset", "parameters": "(MediaType mediaType)", "modifiers": "private", "return": "String", "signature": "String getCharset(MediaType mediaType)", "full_signature": "private String getCharset(MediaType mediaType)", "class_method_signature": "JAXBObjectEntityProvider.getCharset(MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "getJAXBContext", "parameters": "(Class<?> type, MediaType mediaType)", "modifiers": "protected", "return": "JAXBContext", "signature": "JAXBContext getJAXBContext(Class<?> type, MediaType mediaType)", "full_signature": "protected JAXBContext getJAXBContext(Class<?> type, MediaType mediaType)", "class_method_signature": "JAXBObjectEntityProvider.getJAXBContext(Class<?> type, MediaType mediaType)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/JAXBObjectEntityProvider.java"}, "focal_method": {"identifier": "readFrom", "parameters": "(Class<Object> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object readFrom(Class<Object> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream) throws IOException {\n        try {\n            JAXBContext jaxbContext = getJAXBContext(type, mediaType);\n            return jaxbContext.createUnmarshaller().unmarshal(entityStream);\n        } catch (UnmarshalException e) {\n            LOG.debug(e.getMessage(), e);\n            return null;\n        } catch (JAXBException e) {\n            throw new IOException(String.format(\"Can't read from input stream, %s\", e));\n        }\n    }", "signature": "Object readFrom(Class<Object> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream)", "full_signature": "@Override public Object readFrom(Class<Object> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream)", "class_method_signature": "JAXBObjectEntityProvider.readFrom(Class<Object> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream)", "testcase": false, "constructor": false, "invocations": ["getJAXBContext", "unmarshal", "createUnmarshaller", "debug", "getMessage", "format"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}