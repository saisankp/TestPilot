{"test_class": {"identifier": "ChangeHandledMultiMapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MultiMap<Value, String, List<String>> map;", "modifier": "private", "type": "MultiMap<Value, String, List<String>>", "declarator": "map", "var_name": "map"}, {"original_string": "private MultiMapChangeHandler.ChangeSet<Value, String> changeSet;", "modifier": "private", "type": "MultiMapChangeHandler.ChangeSet<Value, String>", "declarator": "changeSet", "var_name": "changeSet"}, {"original_string": "private int timesCalled = 0;", "modifier": "private", "type": "int", "declarator": "timesCalled = 0", "var_name": "timesCalled"}], "file": "drools-verifier/drools-verifier-core/src/test/java/org/drools/verifier/core/maps/ChangeHandledMultiMapTest.java"}, "test_case": {"identifier": "testPut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPut() throws Exception {\n        map.put( new Value( \"hello\" ),\n                 \"test\" );\n\n        assertTrue( changeSet.getAdded().get( new Value( \"hello\" ) ).contains( \"test\" ) );\n\n        assertEquals( 1, timesCalled );\n    }", "signature": "void testPut()", "full_signature": "@Test public void testPut()", "class_method_signature": "ChangeHandledMultiMapTest.testPut()", "testcase": true, "constructor": false, "invocations": ["put", "assertTrue", "contains", "get", "getAdded", "assertEquals"]}, "focal_class": {"identifier": "ChangeHandledMultiMap", "superclass": "", "interfaces": "implements MultiMap<V, T, ListType>", "fields": [{"original_string": "private final MultiMap<V, T, ListType> map;", "modifier": "private final", "type": "MultiMap<V, T, ListType>", "declarator": "map", "var_name": "map"}, {"original_string": "private List<MultiMapChangeHandler<V, T>> changeHandlers = new ArrayList<>();", "modifier": "private", "type": "List<MultiMapChangeHandler<V, T>>", "declarator": "changeHandlers = new ArrayList<>()", "var_name": "changeHandlers"}, {"original_string": "private MultiMapChangeHandler.ChangeSet<V, T> changeSet = new MultiMapChangeHandler.ChangeSet<>();", "modifier": "private", "type": "MultiMapChangeHandler.ChangeSet<V, T>", "declarator": "changeSet = new MultiMapChangeHandler.ChangeSet<>()", "var_name": "changeSet"}, {"original_string": "private int counter = 0;", "modifier": "private", "type": "int", "declarator": "counter = 0", "var_name": "counter"}], "methods": [{"identifier": "ChangeHandledMultiMap", "parameters": "(final MultiMap<V, T, ListType> map)", "modifiers": "public", "return": "", "signature": " ChangeHandledMultiMap(final MultiMap<V, T, ListType> map)", "full_signature": "public  ChangeHandledMultiMap(final MultiMap<V, T, ListType> map)", "class_method_signature": "ChangeHandledMultiMap.ChangeHandledMultiMap(final MultiMap<V, T, ListType> map)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(final V value,\n                       final T t)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean put(final V value,\n                       final T t)", "full_signature": "@Override public boolean put(final V value,\n                       final T t)", "class_method_signature": "ChangeHandledMultiMap.put(final V value,\n                       final T t)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "ChangeHandledMultiMap.size()", "testcase": false, "constructor": false}, {"identifier": "keySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<V>", "signature": "Set<V> keySet()", "full_signature": "@Override public Set<V> keySet()", "class_method_signature": "ChangeHandledMultiMap.keySet()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final V key)", "modifiers": "@Override public", "return": "ListType", "signature": "ListType get(final V key)", "full_signature": "@Override public ListType get(final V key)", "class_method_signature": "ChangeHandledMultiMap.get(final V key)", "testcase": false, "constructor": false}, {"identifier": "addAllValues", "parameters": "(final V value,\n                                final Collection<T> tCollection)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAllValues(final V value,\n                                final Collection<T> tCollection)", "full_signature": "@Override public boolean addAllValues(final V value,\n                                final Collection<T> tCollection)", "class_method_signature": "ChangeHandledMultiMap.addAllValues(final V value,\n                                final Collection<T> tCollection)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final V value)", "modifiers": "@Override public", "return": "Collection<T>", "signature": "Collection<T> remove(final V value)", "full_signature": "@Override public Collection<T> remove(final V value)", "class_method_signature": "ChangeHandledMultiMap.remove(final V value)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "ChangeHandledMultiMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "addChangeListener", "parameters": "(final MultiMapChangeHandler<V, T> changeHandler)", "modifiers": "public", "return": "void", "signature": "void addChangeListener(final MultiMapChangeHandler<V, T> changeHandler)", "full_signature": "public void addChangeListener(final MultiMapChangeHandler<V, T> changeHandler)", "class_method_signature": "ChangeHandledMultiMap.addChangeListener(final MultiMapChangeHandler<V, T> changeHandler)", "testcase": false, "constructor": false}, {"identifier": "allValues", "parameters": "()", "modifiers": "@Override public", "return": "Collection<T>", "signature": "Collection<T> allValues()", "full_signature": "@Override public Collection<T> allValues()", "class_method_signature": "ChangeHandledMultiMap.allValues()", "testcase": false, "constructor": false}, {"identifier": "addToCounter", "parameters": "()", "modifiers": "", "return": "void", "signature": "void addToCounter()", "full_signature": " void addToCounter()", "class_method_signature": "ChangeHandledMultiMap.addToCounter()", "testcase": false, "constructor": false}, {"identifier": "fire", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void fire()", "full_signature": "protected void fire()", "class_method_signature": "ChangeHandledMultiMap.fire()", "testcase": false, "constructor": false}, {"identifier": "addToChangeSet", "parameters": "(final V value,\n                                final T t)", "modifiers": "private", "return": "void", "signature": "void addToChangeSet(final V value,\n                                final T t)", "full_signature": "private void addToChangeSet(final V value,\n                                final T t)", "class_method_signature": "ChangeHandledMultiMap.addToChangeSet(final V value,\n                                final T t)", "testcase": false, "constructor": false}, {"identifier": "addRemovedToChangeSet", "parameters": "(final V value,\n                                       final T t)", "modifiers": "private", "return": "void", "signature": "void addRemovedToChangeSet(final V value,\n                                       final T t)", "full_signature": "private void addRemovedToChangeSet(final V value,\n                                       final T t)", "class_method_signature": "ChangeHandledMultiMap.addRemovedToChangeSet(final V value,\n                                       final T t)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(final Set<V> oldKeys,\n                     final Set<V> newKeys,\n                     final T t)", "modifiers": "@Override public", "return": "void", "signature": "void move(final Set<V> oldKeys,\n                     final Set<V> newKeys,\n                     final T t)", "full_signature": "@Override public void move(final Set<V> oldKeys,\n                     final Set<V> newKeys,\n                     final T t)", "class_method_signature": "ChangeHandledMultiMap.move(final Set<V> oldKeys,\n                     final Set<V> newKeys,\n                     final T t)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(final V key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(final V key)", "full_signature": "@Override public boolean containsKey(final V key)", "class_method_signature": "ChangeHandledMultiMap.containsKey(final V key)", "testcase": false, "constructor": false}, {"identifier": "firstKey", "parameters": "()", "modifiers": "@Override public", "return": "V", "signature": "V firstKey()", "full_signature": "@Override public V firstKey()", "class_method_signature": "ChangeHandledMultiMap.firstKey()", "testcase": false, "constructor": false}, {"identifier": "lastKey", "parameters": "()", "modifiers": "@Override public", "return": "V", "signature": "V lastKey()", "full_signature": "@Override public V lastKey()", "class_method_signature": "ChangeHandledMultiMap.lastKey()", "testcase": false, "constructor": false}, {"identifier": "subMap", "parameters": "(final V fromKey,\n                                           final boolean fromInclusive,\n                                           final V toKey,\n                                           final boolean toInclusive)", "modifiers": "@Override public", "return": "MultiMap<V, T, ListType>", "signature": "MultiMap<V, T, ListType> subMap(final V fromKey,\n                                           final boolean fromInclusive,\n                                           final V toKey,\n                                           final boolean toInclusive)", "full_signature": "@Override public MultiMap<V, T, ListType> subMap(final V fromKey,\n                                           final boolean fromInclusive,\n                                           final V toKey,\n                                           final boolean toInclusive)", "class_method_signature": "ChangeHandledMultiMap.subMap(final V fromKey,\n                                           final boolean fromInclusive,\n                                           final V toKey,\n                                           final boolean toInclusive)", "testcase": false, "constructor": false}, {"identifier": "removeValue", "parameters": "(final V value,\n                            final T t)", "modifiers": "@Override public", "return": "void", "signature": "void removeValue(final V value,\n                            final T t)", "full_signature": "@Override public void removeValue(final V value,\n                            final T t)", "class_method_signature": "ChangeHandledMultiMap.removeValue(final V value,\n                            final T t)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "ChangeHandledMultiMap.clear()", "testcase": false, "constructor": false}, {"identifier": "putAllValues", "parameters": "(final V value,\n                             final Collection<T> ts)", "modifiers": "@Override public", "return": "void", "signature": "void putAllValues(final V value,\n                             final Collection<T> ts)", "full_signature": "@Override public void putAllValues(final V value,\n                             final Collection<T> ts)", "class_method_signature": "ChangeHandledMultiMap.putAllValues(final V value,\n                             final Collection<T> ts)", "testcase": false, "constructor": false}], "file": "drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/maps/ChangeHandledMultiMap.java"}, "focal_method": {"identifier": "put", "parameters": "(final V value,\n                       final T t)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean put(final V value,\n                       final T t) {\n        addToCounter();\n\n        final boolean put = map.put(value,\n                                    t);\n\n        addToChangeSet(value,\n                       t);\n\n        fire();\n\n        return put;\n    }", "signature": "boolean put(final V value,\n                       final T t)", "full_signature": "@Override public boolean put(final V value,\n                       final T t)", "class_method_signature": "ChangeHandledMultiMap.put(final V value,\n                       final T t)", "testcase": false, "constructor": false, "invocations": ["addToCounter", "put", "addToChangeSet", "fire"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}