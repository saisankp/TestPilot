{"test_class": {"identifier": "ExplainabilityServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MODEL_RESOURCE = \"/Traffic Violation.dmn\";", "modifier": "public static final", "type": "String", "declarator": "MODEL_RESOURCE = \"/Traffic Violation.dmn\"", "var_name": "MODEL_RESOURCE"}, {"original_string": "public static final String MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";", "modifier": "public static final", "type": "String", "declarator": "MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\"", "var_name": "MODEL_NAMESPACE"}, {"original_string": "public static final String MODEL_NAME = \"Traffic Violation\";", "modifier": "public static final", "type": "String", "declarator": "MODEL_NAME = \"Traffic Violation\"", "var_name": "MODEL_NAME"}, {"original_string": "final static String TEST_EXECUTION_ID = \"test\";", "modifier": "final static", "type": "String", "declarator": "TEST_EXECUTION_ID = \"test\"", "var_name": "TEST_EXECUTION_ID"}, {"original_string": "final static DMNRuntime genericDMNRuntime = DMNKogito.createGenericDMNRuntime(new InputStreamReader(\n            ExplainabilityServiceTest.class.getResourceAsStream(MODEL_RESOURCE)\n    ));", "modifier": "final static", "type": "DMNRuntime", "declarator": "genericDMNRuntime = DMNKogito.createGenericDMNRuntime(new InputStreamReader(\n            ExplainabilityServiceTest.class.getResourceAsStream(MODEL_RESOURCE)\n    ))", "var_name": "genericDMNRuntime"}, {"original_string": "final static DmnDecisionModel decisionModel = new DmnDecisionModel(genericDMNRuntime, MODEL_NAMESPACE, MODEL_NAME, () -> TEST_EXECUTION_ID);", "modifier": "final static", "type": "DmnDecisionModel", "declarator": "decisionModel = new DmnDecisionModel(genericDMNRuntime, MODEL_NAMESPACE, MODEL_NAME, () -> TEST_EXECUTION_ID)", "var_name": "decisionModel"}], "file": "addons/explainability/explainability-addon-common/src/test/java/org/kie/kogito/explainability/ExplainabilityServiceTest.java"}, "test_case": {"identifier": "testPerturbedExecution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPerturbedExecution() {\n\n        DecisionModels decisionModels = (namespace, name) -> {\n            if (MODEL_NAMESPACE.equals(namespace) && MODEL_NAME.equals(name)) {\n                return decisionModel;\n            }\n            throw new RuntimeException(\"Model \" + namespace + \":\" + name + \" not found.\");\n        };\n\n        Map<String, Object> perturbedRequest = createRequest();\n        PredictInput predictInput = new PredictInput(\n                new ModelIdentifier(\"dmn\", String.format(\"%s%s%s\", MODEL_NAMESPACE, RESOURCE_ID_SEPARATOR, MODEL_NAME)),\n                perturbedRequest);\n        StaticApplication application = new StaticApplication(null, null, null, decisionModels, null);\n\n        ExplainabilityService explainabilityService = ExplainabilityService.INSTANCE;\n        List<PredictOutput> predictOutputs = explainabilityService.processRequest(application, singletonList(predictInput));\n\n        Assertions.assertEquals(1, predictOutputs.size());\n        PredictOutput predictOutput = predictOutputs.get(0);\n\n        Assertions.assertNotNull(predictOutput);\n        Assertions.assertNotNull(predictOutput.getResult());\n\n        Map<String, Object> perturbedResult = predictOutput.getResult();\n        Assertions.assertTrue(perturbedResult.containsKey(\"Should the driver be suspended?\"));\n        Assertions.assertEquals(\"No\", perturbedResult.get(\"Should the driver be suspended?\"));\n        Assertions.assertTrue(perturbedResult.containsKey(\"Fine\"));\n        Assertions.assertNull(perturbedResult.get(\"Fine\"));\n    }", "signature": "void testPerturbedExecution()", "full_signature": "@Test public void testPerturbedExecution()", "class_method_signature": "ExplainabilityServiceTest.testPerturbedExecution()", "testcase": true, "constructor": false, "invocations": ["equals", "equals", "createRequest", "format", "processRequest", "singletonList", "assertEquals", "size", "get", "assertNotNull", "assertNotNull", "getResult", "getResult", "assertTrue", "containsKey", "assertEquals", "get", "assertTrue", "containsKey", "assertNull", "get"]}, "focal_class": {"identifier": "ExplainabilityService", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final ExplainabilityService INSTANCE = new ExplainabilityService(singletonList(new DecisionExplainabilityResourceExecutor()));", "modifier": "public static final", "type": "ExplainabilityService", "declarator": "INSTANCE = new ExplainabilityService(singletonList(new DecisionExplainabilityResourceExecutor()))", "var_name": "INSTANCE"}, {"original_string": "private Collection<ExplainabilityResourceExecutor> executors;", "modifier": "private", "type": "Collection<ExplainabilityResourceExecutor>", "declarator": "executors", "var_name": "executors"}], "methods": [{"identifier": "ExplainabilityService", "parameters": "(Collection<ExplainabilityResourceExecutor> executors)", "modifiers": "public", "return": "", "signature": " ExplainabilityService(Collection<ExplainabilityResourceExecutor> executors)", "full_signature": "public  ExplainabilityService(Collection<ExplainabilityResourceExecutor> executors)", "class_method_signature": "ExplainabilityService.ExplainabilityService(Collection<ExplainabilityResourceExecutor> executors)", "testcase": false, "constructor": true}, {"identifier": "processRequest", "parameters": "(Application application, List<PredictInput> predictInputs)", "modifiers": "public", "return": "List<PredictOutput>", "signature": "List<PredictOutput> processRequest(Application application, List<PredictInput> predictInputs)", "full_signature": "public List<PredictOutput> processRequest(Application application, List<PredictInput> predictInputs)", "class_method_signature": "ExplainabilityService.processRequest(Application application, List<PredictInput> predictInputs)", "testcase": false, "constructor": false}], "file": "addons/explainability/explainability-addon-common/src/main/java/org/kie/kogito/explainability/ExplainabilityService.java"}, "focal_method": {"identifier": "processRequest", "parameters": "(Application application, List<PredictInput> predictInputs)", "modifiers": "public", "return": "List<PredictOutput>", "body": "public List<PredictOutput> processRequest(Application application, List<PredictInput> predictInputs) {\n        return predictInputs.stream().map(predictInput -> executors.stream()\n                .filter(r -> r.acceptRequest(predictInput))\n                .map(r -> r.processRequest(application, predictInput))\n                .findFirst()\n                .orElseThrow(() -> new IllegalArgumentException(\"Malformed resourceType \" + predictInput.getModelIdentifier().getResourceType())))\n                .collect(toList());\n    }", "signature": "List<PredictOutput> processRequest(Application application, List<PredictInput> predictInputs)", "full_signature": "public List<PredictOutput> processRequest(Application application, List<PredictInput> predictInputs)", "class_method_signature": "ExplainabilityService.processRequest(Application application, List<PredictInput> predictInputs)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "orElseThrow", "findFirst", "map", "filter", "stream", "acceptRequest", "processRequest", "getResourceType", "getModelIdentifier", "toList"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}