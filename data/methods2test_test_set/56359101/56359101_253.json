{"test_class": {"identifier": "ReflectionUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReflectionUtils spy;", "modifier": "private", "type": "ReflectionUtils", "declarator": "spy", "var_name": "spy"}], "file": "autonomic-plugin-common/src/test/java/br/com/autonomiccs/autonomic/plugin/common/utils/ReflectionUtilsTest.java"}, "test_case": {"identifier": "setFieldIntoObjectTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setFieldIntoObjectTest() throws Exception {\n        HostResources host = new HostResources();\n        String expectedName = \"name\";\n        spy.setFieldIntoObject(host, \"hostName\", expectedName);\n        Mockito.verify(spy).getDeclaredField(Mockito.any(), Mockito.anyString());\n        Assert.assertEquals(expectedName, host.getHostName());\n    }", "signature": "void setFieldIntoObjectTest()", "full_signature": "@Test public void setFieldIntoObjectTest()", "class_method_signature": "ReflectionUtilsTest.setFieldIntoObjectTest()", "testcase": true, "constructor": false, "invocations": ["setFieldIntoObject", "getDeclaredField", "verify", "any", "anyString", "assertEquals", "getHostName"]}, "focal_class": {"identifier": "ReflectionUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "setFieldIntoObject", "parameters": "(Object object, String fieldName, Object value)", "modifiers": "public", "return": "void", "signature": "void setFieldIntoObject(Object object, String fieldName, Object value)", "full_signature": "public void setFieldIntoObject(Object object, String fieldName, Object value)", "class_method_signature": "ReflectionUtils.setFieldIntoObject(Object object, String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredField", "parameters": "(Object o, String fieldName)", "modifiers": "protected", "return": "Field", "signature": "Field getDeclaredField(Object o, String fieldName)", "full_signature": "protected Field getDeclaredField(Object o, String fieldName)", "class_method_signature": "ReflectionUtils.getDeclaredField(Object o, String fieldName)", "testcase": false, "constructor": false}], "file": "autonomic-plugin-common/src/main/java/br/com/autonomiccs/autonomic/plugin/common/utils/ReflectionUtils.java"}, "focal_method": {"identifier": "setFieldIntoObject", "parameters": "(Object object, String fieldName, Object value)", "modifiers": "public", "return": "void", "body": "public void setFieldIntoObject(Object object, String fieldName, Object value) {\n        Field declaredField = getDeclaredField(object, fieldName);\n        if (declaredField == null) {\n            throw new CloudRuntimeException(String.format(\"Field [fieldName=%s] does not exists into object [%s].\", fieldName, object));\n        }\n        declaredField.setAccessible(true);\n        try {\n            declaredField.set(object, value);\n        } catch (IllegalArgumentException | IllegalAccessException e) {\n            throw new CloudRuntimeException(String.format(\"Fail to set field [fieldName=%s] into object [%s] with the value [%s].\", fieldName, object, value), e);\n        }\n    }", "signature": "void setFieldIntoObject(Object object, String fieldName, Object value)", "full_signature": "public void setFieldIntoObject(Object object, String fieldName, Object value)", "class_method_signature": "ReflectionUtils.setFieldIntoObject(Object object, String fieldName, Object value)", "testcase": false, "constructor": false, "invocations": ["getDeclaredField", "format", "setAccessible", "set", "format"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}