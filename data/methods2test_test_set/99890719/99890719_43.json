{"test_class": {"identifier": "MissingDefPrefixNoViolationPredicateTest", "superclass": "", "interfaces": "", "fields": [], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/MissingDefPrefixNoViolationPredicateTest.java"}, "test_case": {"identifier": "missingDefPrefixWithConditionEdgeIsNoViolation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void missingDefPrefixWithConditionEdgeIsNoViolation() {\n        TestAUGBuilder pattern = buildAUG().withActionNodes(\"iterator()\", \"hasNext()\", \"next()\").withDataNode(\"Iterator\")\n                .withEdge(\"iterator()\", DEFINITION, \"Iterator\")\n                .withEdge(\"Iterator\", RECEIVER, \"hasNext()\")\n                .withEdge(\"Iterator\", RECEIVER, \"next()\")\n                .withEdge(\"iterator()\", REPETITION, \"next()\")\n                .withEdge(\"hasNext()\", REPETITION, \"next()\");\n        TestAUGBuilder target = buildAUG().withActionNodes(\"hasNext()\", \"next()\").withDataNode(\"Iterator\")\n                .withEdge(\"Iterator\", RECEIVER, \"hasNext()\")\n                .withEdge(\"Iterator\", RECEIVER, \"next()\")\n                .withEdge(\"hasNext()\", REPETITION, \"next()\");\n        TestOverlapBuilder overlap = buildOverlap(pattern, target).withNodes(\"hasNext()\", \"next()\", \"Iterator\")\n                .withEdge(\"Iterator\", RECEIVER, \"hasNext()\")\n                .withEdge(\"Iterator\", RECEIVER, \"next()\")\n                .withEdge(\"hasNext()\", CONDITION, \"next()\");\n\n        Optional<Boolean> decision = new MissingDefPrefixNoViolationPredicate().apply(overlap.build());\n\n        assertThat(decision, is(Optional.of(false)));\n    }", "signature": "void missingDefPrefixWithConditionEdgeIsNoViolation()", "full_signature": "@Test public void missingDefPrefixWithConditionEdgeIsNoViolation()", "class_method_signature": "MissingDefPrefixNoViolationPredicateTest.missingDefPrefixWithConditionEdgeIsNoViolation()", "testcase": true, "constructor": false, "invocations": ["withEdge", "withEdge", "withEdge", "withEdge", "withEdge", "withDataNode", "withActionNodes", "buildAUG", "withEdge", "withEdge", "withEdge", "withDataNode", "withActionNodes", "buildAUG", "withEdge", "withEdge", "withEdge", "withNodes", "buildOverlap", "apply", "build", "assertThat", "is", "of"]}, "focal_class": {"identifier": "MissingDefPrefixNoViolationPredicate", "superclass": "", "interfaces": "implements ViolationPredicate", "fields": [], "methods": [{"identifier": "apply", "parameters": "(Overlap overlap)", "modifiers": "@Override public", "return": "Optional<Boolean>", "signature": "Optional<Boolean> apply(Overlap overlap)", "full_signature": "@Override public Optional<Boolean> apply(Overlap overlap)", "class_method_signature": "MissingDefPrefixNoViolationPredicate.apply(Overlap overlap)", "testcase": false, "constructor": false}, {"identifier": "haveDefiningSource", "parameters": "(Set<Edge> missingDirectConnectionEdges)", "modifiers": "private", "return": "boolean", "signature": "boolean haveDefiningSource(Set<Edge> missingDirectConnectionEdges)", "full_signature": "private boolean haveDefiningSource(Set<Edge> missingDirectConnectionEdges)", "class_method_signature": "MissingDefPrefixNoViolationPredicate.haveDefiningSource(Set<Edge> missingDirectConnectionEdges)", "testcase": false, "constructor": false}, {"identifier": "haveSingleSource", "parameters": "(Set<Edge> missingDirectConnectionEdges)", "modifiers": "private", "return": "boolean", "signature": "boolean haveSingleSource(Set<Edge> missingDirectConnectionEdges)", "full_signature": "private boolean haveSingleSource(Set<Edge> missingDirectConnectionEdges)", "class_method_signature": "MissingDefPrefixNoViolationPredicate.haveSingleSource(Set<Edge> missingDirectConnectionEdges)", "testcase": false, "constructor": false}, {"identifier": "connectsToMappedNode", "parameters": "(Overlap overlap, Edge edge)", "modifiers": "private", "return": "boolean", "signature": "boolean connectsToMappedNode(Overlap overlap, Edge edge)", "full_signature": "private boolean connectsToMappedNode(Overlap overlap, Edge edge)", "class_method_signature": "MissingDefPrefixNoViolationPredicate.connectsToMappedNode(Overlap overlap, Edge edge)", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/MissingDefPrefixNoViolationPredicate.java"}, "focal_method": {"identifier": "apply", "parameters": "(Overlap overlap)", "modifiers": "@Override public", "return": "Optional<Boolean>", "body": "@Override\n    public Optional<Boolean> apply(Overlap overlap) {\n        Set<Edge> missingDirectConnectionEdges = overlap.getMissingEdges().stream()\n                .filter(Edge::isDirect)\n                .filter(edge -> connectsToMappedNode(overlap, edge))\n                .collect(Collectors.toSet());\n\n        if (haveSingleSource(missingDirectConnectionEdges) && haveDefiningSource(missingDirectConnectionEdges)) {\n            return Optional.of(false);\n        } else {\n            return Optional.empty();\n        }\n    }", "signature": "Optional<Boolean> apply(Overlap overlap)", "full_signature": "@Override public Optional<Boolean> apply(Overlap overlap)", "class_method_signature": "MissingDefPrefixNoViolationPredicate.apply(Overlap overlap)", "testcase": false, "constructor": false, "invocations": ["collect", "filter", "filter", "stream", "getMissingEdges", "connectsToMappedNode", "toSet", "haveSingleSource", "haveDefiningSource", "of", "empty"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}