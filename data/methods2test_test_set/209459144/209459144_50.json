{"test_class": {"identifier": "TensorFlowPsComponentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private ComponentTestCommons testCommons =\n      new ComponentTestCommons(TensorFlowRole.PS);", "modifier": "private", "type": "ComponentTestCommons", "declarator": "testCommons =\n      new ComponentTestCommons(TensorFlowRole.PS)", "var_name": "testCommons"}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/test/java/org/apache/submarine/server/submitter/yarnservice/tensorflow/component/TensorFlowPsComponentTest.java"}, "test_case": {"identifier": "testPSComponentZeroNumberOfPS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPSComponentZeroNumberOfPS() throws IOException {\n    testCommons.yarnConfig.set(\"hadoop.registry.dns.domain-name\", \"testDomain\");\n\n    TensorFlowRunJobParameters parameters = new TensorFlowRunJobParameters();\n    parameters.setPsResource(testCommons.resource);\n    parameters.setName(\"testJobName\");\n    parameters.setPsDockerImage(\"testPSDockerImage\");\n    parameters.setNumPS(0);\n\n    TensorFlowPsComponent psComponent =\n        createPsComponent(parameters);\n\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"Number of PS should be at least 1!\");\n    psComponent.createComponent();\n  }", "signature": "void testPSComponentZeroNumberOfPS()", "full_signature": "@Test public void testPSComponentZeroNumberOfPS()", "class_method_signature": "TensorFlowPsComponentTest.testPSComponentZeroNumberOfPS()", "testcase": true, "constructor": false, "invocations": ["set", "setPsResource", "setName", "setPsDockerImage", "setNumPS", "createPsComponent", "expect", "expectMessage", "createComponent"]}, "focal_class": {"identifier": "TensorFlowPsComponent", "superclass": "extends AbstractComponent", "interfaces": "", "fields": [], "methods": [{"identifier": "TensorFlowPsComponent", "parameters": "(FileSystemOperations fsOperations,\n                               RemoteDirectoryManager remoteDirectoryManager,\n                               TensorFlowLaunchCommandFactory launchCommandFactory,\n                               RunJobParameters parameters,\n                               Configuration yarnConfig)", "modifiers": "public", "return": "", "signature": " TensorFlowPsComponent(FileSystemOperations fsOperations,\n                               RemoteDirectoryManager remoteDirectoryManager,\n                               TensorFlowLaunchCommandFactory launchCommandFactory,\n                               RunJobParameters parameters,\n                               Configuration yarnConfig)", "full_signature": "public  TensorFlowPsComponent(FileSystemOperations fsOperations,\n                               RemoteDirectoryManager remoteDirectoryManager,\n                               TensorFlowLaunchCommandFactory launchCommandFactory,\n                               RunJobParameters parameters,\n                               Configuration yarnConfig)", "class_method_signature": "TensorFlowPsComponent.TensorFlowPsComponent(FileSystemOperations fsOperations,\n                               RemoteDirectoryManager remoteDirectoryManager,\n                               TensorFlowLaunchCommandFactory launchCommandFactory,\n                               RunJobParameters parameters,\n                               Configuration yarnConfig)", "testcase": false, "constructor": true}, {"identifier": "createComponent", "parameters": "()", "modifiers": "@Override public", "return": "Component", "signature": "Component createComponent()", "full_signature": "@Override public Component createComponent()", "class_method_signature": "TensorFlowPsComponent.createComponent()", "testcase": false, "constructor": false}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/main/java/org/apache/submarine/server/submitter/yarnservice/tensorflow/component/TensorFlowPsComponent.java"}, "focal_method": {"identifier": "createComponent", "parameters": "()", "modifiers": "@Override public", "return": "Component", "body": "@Override\n  public Component createComponent() throws IOException {\n    TensorFlowRunJobParameters tensorFlowParams =\n        (TensorFlowRunJobParameters) this.parameters;\n\n    Objects.requireNonNull(tensorFlowParams.getPsResource(),\n        \"PS resource must not be null!\");\n    if (tensorFlowParams.getNumPS() < 1) {\n      throw new IllegalArgumentException(\"Number of PS should be at least 1!\");\n    }\n\n    Component component = new Component();\n    component.setName(role.getComponentName());\n    component.setNumberOfContainers((long) tensorFlowParams.getNumPS());\n    component.setRestartPolicy(Component.RestartPolicyEnum.NEVER);\n    component.setResource(\n        SubmarineResourceUtils.convertYarnResourceToServiceResource(tensorFlowParams.getPsResource()));\n\n    // Override global docker image if needed.\n    if (tensorFlowParams.getPsDockerImage() != null) {\n      component.setArtifact(\n          DockerUtilities.getDockerArtifact(tensorFlowParams.getPsDockerImage()));\n    }\n    TensorFlowCommons.addCommonEnvironments(component, role);\n    generateLaunchCommand(component);\n\n    return component;\n  }", "signature": "Component createComponent()", "full_signature": "@Override public Component createComponent()", "class_method_signature": "TensorFlowPsComponent.createComponent()", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "getPsResource", "getNumPS", "setName", "getComponentName", "setNumberOfContainers", "getNumPS", "setRestartPolicy", "setResource", "convertYarnResourceToServiceResource", "getPsResource", "getPsDockerImage", "setArtifact", "getDockerArtifact", "getPsDockerImage", "addCommonEnvironments", "generateLaunchCommand"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}