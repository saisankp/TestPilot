{"test_class": {"identifier": "IndentingWriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "dexlib2/src/test/java/org/jf/util/IndentingWriterTest.java"}, "test_case": {"identifier": "testPrintSignedLongAsDec", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPrintSignedLongAsDec() throws IOException {\n        StringWriter stringWriter = new StringWriter();\n        IndentingWriter writer = new IndentingWriter(stringWriter);\n\n        writer.printUnsignedIntAsDec(-1);\n        writer.close();\n\n        Assert.assertEquals(\"4294967295\", stringWriter.toString());\n    }", "signature": "void testPrintSignedLongAsDec()", "full_signature": "@Test public void testPrintSignedLongAsDec()", "class_method_signature": "IndentingWriterTest.testPrintSignedLongAsDec()", "testcase": true, "constructor": false, "invocations": ["printUnsignedIntAsDec", "close", "assertEquals", "toString"]}, "focal_class": {"identifier": "IndentingWriter", "superclass": "extends Writer", "interfaces": "", "fields": [{"original_string": "protected final Writer writer;", "modifier": "protected final", "type": "Writer", "declarator": "writer", "var_name": "writer"}, {"original_string": "protected final char[] buffer = new char[24];", "modifier": "protected final", "type": "char[]", "declarator": "buffer = new char[24]", "var_name": "buffer"}, {"original_string": "protected int indentLevel = 0;", "modifier": "protected", "type": "int", "declarator": "indentLevel = 0", "var_name": "indentLevel"}, {"original_string": "private boolean beginningOfLine = true;", "modifier": "private", "type": "boolean", "declarator": "beginningOfLine = true", "var_name": "beginningOfLine"}, {"original_string": "private static final String newLine = System.getProperty(\"line.separator\");", "modifier": "private static final", "type": "String", "declarator": "newLine = System.getProperty(\"line.separator\")", "var_name": "newLine"}], "methods": [{"identifier": "IndentingWriter", "parameters": "(Writer writer)", "modifiers": "public", "return": "", "signature": " IndentingWriter(Writer writer)", "full_signature": "public  IndentingWriter(Writer writer)", "class_method_signature": "IndentingWriter.IndentingWriter(Writer writer)", "testcase": false, "constructor": true}, {"identifier": "writeIndent", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void writeIndent()", "full_signature": "protected void writeIndent()", "class_method_signature": "IndentingWriter.writeIndent()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(int chr)", "modifiers": "@Override public", "return": "void", "signature": "void write(int chr)", "full_signature": "@Override public void write(int chr)", "class_method_signature": "IndentingWriter.write(int chr)", "testcase": false, "constructor": false}, {"identifier": "writeLine", "parameters": "(char[] chars, int start, int len)", "modifiers": "private", "return": "void", "signature": "void writeLine(char[] chars, int start, int len)", "full_signature": "private void writeLine(char[] chars, int start, int len)", "class_method_signature": "IndentingWriter.writeLine(char[] chars, int start, int len)", "testcase": false, "constructor": false}, {"identifier": "writeLine", "parameters": "(String str, int start, int len)", "modifiers": "private", "return": "void", "signature": "void writeLine(String str, int start, int len)", "full_signature": "private void writeLine(String str, int start, int len)", "class_method_signature": "IndentingWriter.writeLine(String str, int start, int len)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(char[] chars)", "modifiers": "@Override public", "return": "void", "signature": "void write(char[] chars)", "full_signature": "@Override public void write(char[] chars)", "class_method_signature": "IndentingWriter.write(char[] chars)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(char[] chars, int start, int len)", "modifiers": "@Override public", "return": "void", "signature": "void write(char[] chars, int start, int len)", "full_signature": "@Override public void write(char[] chars, int start, int len)", "class_method_signature": "IndentingWriter.write(char[] chars, int start, int len)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(String s)", "modifiers": "@Override public", "return": "void", "signature": "void write(String s)", "full_signature": "@Override public void write(String s)", "class_method_signature": "IndentingWriter.write(String s)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(String str, int start, int len)", "modifiers": "@Override public", "return": "void", "signature": "void write(String str, int start, int len)", "full_signature": "@Override public void write(String str, int start, int len)", "class_method_signature": "IndentingWriter.write(String str, int start, int len)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(CharSequence charSequence)", "modifiers": "@Override public", "return": "Writer", "signature": "Writer append(CharSequence charSequence)", "full_signature": "@Override public Writer append(CharSequence charSequence)", "class_method_signature": "IndentingWriter.append(CharSequence charSequence)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(CharSequence charSequence, int start, int len)", "modifiers": "@Override public", "return": "Writer", "signature": "Writer append(CharSequence charSequence, int start, int len)", "full_signature": "@Override public Writer append(CharSequence charSequence, int start, int len)", "class_method_signature": "IndentingWriter.append(CharSequence charSequence, int start, int len)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(char c)", "modifiers": "@Override public", "return": "Writer", "signature": "Writer append(char c)", "full_signature": "@Override public Writer append(char c)", "class_method_signature": "IndentingWriter.append(char c)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "IndentingWriter.flush()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "IndentingWriter.close()", "testcase": false, "constructor": false}, {"identifier": "indent", "parameters": "(int indentAmount)", "modifiers": "public", "return": "void", "signature": "void indent(int indentAmount)", "full_signature": "public void indent(int indentAmount)", "class_method_signature": "IndentingWriter.indent(int indentAmount)", "testcase": false, "constructor": false}, {"identifier": "deindent", "parameters": "(int indentAmount)", "modifiers": "public", "return": "void", "signature": "void deindent(int indentAmount)", "full_signature": "public void deindent(int indentAmount)", "class_method_signature": "IndentingWriter.deindent(int indentAmount)", "testcase": false, "constructor": false}, {"identifier": "printUnsignedLongAsHex", "parameters": "(long value)", "modifiers": "public", "return": "void", "signature": "void printUnsignedLongAsHex(long value)", "full_signature": "public void printUnsignedLongAsHex(long value)", "class_method_signature": "IndentingWriter.printUnsignedLongAsHex(long value)", "testcase": false, "constructor": false}, {"identifier": "printSignedLongAsDec", "parameters": "(long value)", "modifiers": "public", "return": "void", "signature": "void printSignedLongAsDec(long value)", "full_signature": "public void printSignedLongAsDec(long value)", "class_method_signature": "IndentingWriter.printSignedLongAsDec(long value)", "testcase": false, "constructor": false}, {"identifier": "printSignedIntAsDec", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void printSignedIntAsDec(int value)", "full_signature": "public void printSignedIntAsDec(int value)", "class_method_signature": "IndentingWriter.printSignedIntAsDec(int value)", "testcase": false, "constructor": false}, {"identifier": "printUnsignedIntAsDec", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void printUnsignedIntAsDec(int value)", "full_signature": "public void printUnsignedIntAsDec(int value)", "class_method_signature": "IndentingWriter.printUnsignedIntAsDec(int value)", "testcase": false, "constructor": false}], "file": "dexlib2/src/main/java/org/jf/util/IndentingWriter.java"}, "focal_method": {"identifier": "printSignedLongAsDec", "parameters": "(long value)", "modifiers": "public", "return": "void", "body": "public void printSignedLongAsDec(long value) throws IOException {\n        int bufferIndex = 23;\n\n        if (value < 0) {\n            value *= -1;\n            write('-');\n        }\n\n        do {\n            long digit = value % 10;\n            buffer[bufferIndex--] = (char)(digit + '0');\n\n            value = value / 10;\n        } while (value != 0);\n\n        bufferIndex++;\n\n        writeLine(buffer, bufferIndex, 24-bufferIndex);\n    }", "signature": "void printSignedLongAsDec(long value)", "full_signature": "public void printSignedLongAsDec(long value)", "class_method_signature": "IndentingWriter.printSignedLongAsDec(long value)", "testcase": false, "constructor": false, "invocations": ["write", "writeLine"]}, "repository": {"repo_id": 5925560, "url": "https://github.com/JesusFreke/smali", "language": "Java", "is_fork": false, "fork_count": 875, "stargazer_count": 4465, "size": 9375, "license": "licensed"}}