{"test_class": {"identifier": "LocationReferencePointEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "LocationReferencePointEncoder locationReferencePointEncoder = new LocationReferencePointEncoder();", "modifier": "", "type": "LocationReferencePointEncoder", "declarator": "locationReferencePointEncoder = new LocationReferencePointEncoder()", "var_name": "locationReferencePointEncoder"}], "file": "proto/src/test/java/openlr/proto/encoder/LocationReferencePointEncoderTest.java"}, "test_case": {"identifier": "testEncodeLastLocationReferencePoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncodeLastLocationReferencePoint() {\n        LocationReferencePointProtoImpl locationReferencePoint = new LocationReferencePointProtoImpl(\n                2,\n                5.6,\n                53.6,\n                165,\n                FunctionalRoadClass.FRC_4,\n                FormOfWay.MULTIPLE_CARRIAGEWAY);\n\n        LocationReferencePoint lrp = locationReferencePointEncoder.encode(locationReferencePoint);\n\n        assertNotNull(lrp);\n        assertTrue(lrp.hasCoordinates());\n        assertTrue(lrp.hasLineAttributes());\n        assertFalse(lrp.hasPathAttributes());\n\n        Coordinates coordinates = lrp.getCoordinates();\n        assertEquals(coordinates.getLongitude(), 5.6);\n        assertEquals(coordinates.getLatitude(), 53.6);\n\n        LineAttributes lineAttributes = lrp.getLineAttributes();\n        assertEquals(lineAttributes.getBearing(), 165);\n        assertEquals(lineAttributes.getFrc(), FRC.FRC_4);\n        assertEquals(lineAttributes.getFow(), FOW.FOW_MULTIPLE_CARRIAGEWAY);\n    }", "signature": "void testEncodeLastLocationReferencePoint()", "full_signature": "@Test public void testEncodeLastLocationReferencePoint()", "class_method_signature": "LocationReferencePointEncoderTest.testEncodeLastLocationReferencePoint()", "testcase": true, "constructor": false, "invocations": ["encode", "assertNotNull", "assertTrue", "hasCoordinates", "assertTrue", "hasLineAttributes", "assertFalse", "hasPathAttributes", "getCoordinates", "assertEquals", "getLongitude", "assertEquals", "getLatitude", "getLineAttributes", "assertEquals", "getBearing", "assertEquals", "getFrc", "assertEquals", "getFow"]}, "focal_class": {"identifier": "LocationReferencePointEncoder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "encode", "parameters": "(LocationReferencePoint locationReferencePoint)", "modifiers": "public", "return": "openlr.proto.schema.LocationReferencePoint", "signature": "openlr.proto.schema.LocationReferencePoint encode(LocationReferencePoint locationReferencePoint)", "full_signature": "public openlr.proto.schema.LocationReferencePoint encode(LocationReferencePoint locationReferencePoint)", "class_method_signature": "LocationReferencePointEncoder.encode(LocationReferencePoint locationReferencePoint)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(FunctionalRoadClass functionalRoadClass)", "modifiers": "private", "return": "FRC", "signature": "FRC encode(FunctionalRoadClass functionalRoadClass)", "full_signature": "private FRC encode(FunctionalRoadClass functionalRoadClass)", "class_method_signature": "LocationReferencePointEncoder.encode(FunctionalRoadClass functionalRoadClass)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(FormOfWay formOfWay)", "modifiers": "private", "return": "FOW", "signature": "FOW encode(FormOfWay formOfWay)", "full_signature": "private FOW encode(FormOfWay formOfWay)", "class_method_signature": "LocationReferencePointEncoder.encode(FormOfWay formOfWay)", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/encoder/LocationReferencePointEncoder.java"}, "focal_method": {"identifier": "encode", "parameters": "(LocationReferencePoint locationReferencePoint)", "modifiers": "public", "return": "openlr.proto.schema.LocationReferencePoint", "body": "public openlr.proto.schema.LocationReferencePoint encode(LocationReferencePoint locationReferencePoint) {\n        openlr.proto.schema.LocationReferencePoint.Builder builder = openlr.proto.schema.LocationReferencePoint.newBuilder();\n\n        Coordinates coordinates = Coordinates.newBuilder()\n                .setLongitude(locationReferencePoint.getLongitudeDeg())\n                .setLatitude(locationReferencePoint.getLatitudeDeg())\n                .build();\n        builder.setCoordinates(coordinates);\n\n        LineAttributes lineAttributes = LineAttributes.newBuilder()\n                .setBearing((int) locationReferencePoint.getBearing())\n                .setFrc(encode(locationReferencePoint.getFRC()))\n                .setFow(encode(locationReferencePoint.getFOW()))\n                .build();\n        builder.setLineAttributes(lineAttributes);\n\n        if (!locationReferencePoint.isLastLRP()) {\n            PathAttributes pathAttributes = PathAttributes.newBuilder()\n                    .setDistanceToNext(locationReferencePoint.getDistanceToNext())\n                    .setLowestFrcAlongPath(encode(locationReferencePoint.getLfrc()))\n                    .build();\n            builder.setPathAttributes(pathAttributes);\n        }\n\n        return builder.build();\n    }", "signature": "openlr.proto.schema.LocationReferencePoint encode(LocationReferencePoint locationReferencePoint)", "full_signature": "public openlr.proto.schema.LocationReferencePoint encode(LocationReferencePoint locationReferencePoint)", "class_method_signature": "LocationReferencePointEncoder.encode(LocationReferencePoint locationReferencePoint)", "testcase": false, "constructor": false, "invocations": ["newBuilder", "build", "setLatitude", "setLongitude", "newBuilder", "getLongitudeDeg", "getLatitudeDeg", "setCoordinates", "build", "setFow", "setFrc", "setBearing", "newBuilder", "getBearing", "encode", "getFRC", "encode", "getFOW", "setLineAttributes", "isLastLRP", "build", "setLowestFrcAlongPath", "setDistanceToNext", "newBuilder", "getDistanceToNext", "encode", "getLfrc", "setPathAttributes", "build"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}