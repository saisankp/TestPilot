{"test_class": {"identifier": "FastLineAndPointRendererTest", "superclass": "extends AndroidplotTest", "interfaces": "", "fields": [], "file": "androidplot-core/src/test/java/com/androidplot/xy/FastLineAndPointRendererTest.java"}, "test_case": {"identifier": "testOnRender", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnRender() throws Exception {\n        RectF gridRect = new RectF(5, 5, 105, 105);\n        XYPlot plot = new XYPlot(getContext(), \"Test\");\n\n        FastLineAndPointRenderer.Formatter formatter =\n                new FastLineAndPointRenderer.Formatter(Color.RED, Color.RED, null);\n\n\n        // create a series composed of 3 \"segments\"; series portions separated by null values:\n        XYSeries series = new SimpleXYSeries(\n                SimpleXYSeries.ArrayFormat.Y_VALS_ONLY, \"some data\", 1, 2, null, 3, 4, 5, 6, 7, null, null, 8);\n\n        FastLineAndPointRenderer renderer = Mockito.spy(new FastLineAndPointRenderer(plot));\n        Canvas canvas = mock(Canvas.class);\n\n        renderer.onRender(canvas, gridRect, series, formatter, null);\n\n        // first segment\n        verify(renderer, times(1)).drawSegment(\n                eq(canvas),\n                any(float[].class),\n                eq(0),\n                eq(4),\n                eq(formatter));\n\n        verify(canvas, times(1)).drawPoints(\n                any(float[].class),\n                eq(0),\n                eq(4),\n                eq(formatter.getVertexPaint()));\n\n        // second segment\n        verify(renderer, times(1)).drawSegment(\n                eq(canvas),\n                any(float[].class),\n                eq(6),\n                eq(10),\n                eq(formatter));\n\n        verify(canvas, times(1)).drawPoints(\n                any(float[].class),\n                eq(6),\n                eq(10),\n                eq(formatter.getVertexPaint()));\n\n        // third segment\n        verify(renderer, times(1)).drawSegment(\n                eq(canvas),\n                any(float[].class),\n                eq(20),\n                eq(2),\n                eq(formatter));\n\n        verify(canvas, times(1)).drawPoints(\n                any(float[].class),\n                eq(20),\n                eq(2),\n                eq(formatter.getVertexPaint()));\n    }", "signature": "void testOnRender()", "full_signature": "@Test public void testOnRender()", "class_method_signature": "FastLineAndPointRendererTest.testOnRender()", "testcase": true, "constructor": false, "invocations": ["getContext", "spy", "mock", "onRender", "drawSegment", "verify", "times", "eq", "any", "eq", "eq", "eq", "drawPoints", "verify", "times", "any", "eq", "eq", "eq", "getVertexPaint", "drawSegment", "verify", "times", "eq", "any", "eq", "eq", "eq", "drawPoints", "verify", "times", "any", "eq", "eq", "eq", "getVertexPaint", "drawSegment", "verify", "times", "eq", "any", "eq", "eq", "eq", "drawPoints", "verify", "times", "any", "eq", "eq", "eq", "getVertexPaint"]}, "focal_class": {"identifier": "FastLineAndPointRenderer", "superclass": "extends XYSeriesRenderer<XYSeries, FastLineAndPointRenderer.Formatter>", "interfaces": "", "fields": [{"original_string": "private static final int MINIMUM_NUMBER_OF_POINTS_TO_DEFINE_A_LINE = 4;", "modifier": "private static final", "type": "int", "declarator": "MINIMUM_NUMBER_OF_POINTS_TO_DEFINE_A_LINE = 4", "var_name": "MINIMUM_NUMBER_OF_POINTS_TO_DEFINE_A_LINE"}, {"original_string": "private float[] points;", "modifier": "private", "type": "float[]", "declarator": "points", "var_name": "points"}, {"original_string": "List<Integer> segmentOffsets = new ArrayList<>();", "modifier": "", "type": "List<Integer>", "declarator": "segmentOffsets = new ArrayList<>()", "var_name": "segmentOffsets"}, {"original_string": "List<Integer> segmentLengths = new ArrayList<>();", "modifier": "", "type": "List<Integer>", "declarator": "segmentLengths = new ArrayList<>()", "var_name": "segmentLengths"}], "methods": [{"identifier": "FastLineAndPointRenderer", "parameters": "(XYPlot plot)", "modifiers": "public", "return": "", "signature": " FastLineAndPointRenderer(XYPlot plot)", "full_signature": "public  FastLineAndPointRenderer(XYPlot plot)", "class_method_signature": "FastLineAndPointRenderer.FastLineAndPointRenderer(XYPlot plot)", "testcase": false, "constructor": true}, {"identifier": "onRender", "parameters": "(Canvas canvas, RectF plotArea, XYSeries series, Formatter formatter, RenderStack stack)", "modifiers": "@Override protected", "return": "void", "signature": "void onRender(Canvas canvas, RectF plotArea, XYSeries series, Formatter formatter, RenderStack stack)", "full_signature": "@Override protected void onRender(Canvas canvas, RectF plotArea, XYSeries series, Formatter formatter, RenderStack stack)", "class_method_signature": "FastLineAndPointRenderer.onRender(Canvas canvas, RectF plotArea, XYSeries series, Formatter formatter, RenderStack stack)", "testcase": false, "constructor": false}, {"identifier": "drawSegment", "parameters": "(@NonNull Canvas canvas,\n                               @NonNull float[] points,\n                               int offset,\n                               int len,\n                               Formatter formatter)", "modifiers": "protected", "return": "void", "signature": "void drawSegment(@NonNull Canvas canvas,\n                               @NonNull float[] points,\n                               int offset,\n                               int len,\n                               Formatter formatter)", "full_signature": "protected void drawSegment(@NonNull Canvas canvas,\n                               @NonNull float[] points,\n                               int offset,\n                               int len,\n                               Formatter formatter)", "class_method_signature": "FastLineAndPointRenderer.drawSegment(@NonNull Canvas canvas,\n                               @NonNull float[] points,\n                               int offset,\n                               int len,\n                               Formatter formatter)", "testcase": false, "constructor": false}, {"identifier": "doDrawLegendIcon", "parameters": "(@NonNull Canvas canvas,\n                                    @NonNull RectF rect,\n                                    @NonNull Formatter formatter)", "modifiers": "@Override protected", "return": "void", "signature": "void doDrawLegendIcon(@NonNull Canvas canvas,\n                                    @NonNull RectF rect,\n                                    @NonNull Formatter formatter)", "full_signature": "@Override protected void doDrawLegendIcon(@NonNull Canvas canvas,\n                                    @NonNull RectF rect,\n                                    @NonNull Formatter formatter)", "class_method_signature": "FastLineAndPointRenderer.doDrawLegendIcon(@NonNull Canvas canvas,\n                                    @NonNull RectF rect,\n                                    @NonNull Formatter formatter)", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/xy/FastLineAndPointRenderer.java"}, "focal_method": {"identifier": "onRender", "parameters": "(Canvas canvas, RectF plotArea, XYSeries series, Formatter formatter, RenderStack stack)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void onRender(Canvas canvas, RectF plotArea, XYSeries series, Formatter formatter, RenderStack stack) {\n\n        segmentOffsets.clear();\n        segmentLengths.clear();\n\n        final int numPoints = series.size() * 2;\n        if(points == null || points.length != numPoints) {\n            // only allocate when necessary:\n            points = new  float[series.size()*2];\n        }\n\n        int segmentLen = 0;\n        boolean isLastPointNull = true;\n        PointF resultPoint = new PointF();\n        for (int i = 0, j = 0;  i < series.size(); i++, j+=2) {\n            Number y = series.getY(i);\n            Number x = series.getX(i);\n\n            if (y != null && x != null) {\n                if(isLastPointNull) {\n                    segmentOffsets.add(j);\n                    segmentLen = 0;\n                    isLastPointNull = false;\n                }\n\n                getPlot().getBounds().transformScreen(resultPoint, x, y, plotArea);\n                points[j] = resultPoint.x;\n                points[j + 1] = resultPoint.y;\n                segmentLen+=2;\n\n                // if this is the last point, account for it in segment lengths:\n                if(i == series.size()-1) {\n                    segmentLengths.add(segmentLen);\n                }\n            } else if(!isLastPointNull) {\n                segmentLengths.add(segmentLen);\n                isLastPointNull = true;\n            }\n        }\n\n        // draw segments\n        if(formatter.linePaint != null || formatter.vertexPaint != null) {\n            for (int i = 0; i < segmentOffsets.size(); i++) {\n                final int len = segmentLengths.get(i);\n                final int offset = segmentOffsets.get(i);\n                drawSegment(canvas, points, offset, len, formatter);\n            }\n        }\n    }", "signature": "void onRender(Canvas canvas, RectF plotArea, XYSeries series, Formatter formatter, RenderStack stack)", "full_signature": "@Override protected void onRender(Canvas canvas, RectF plotArea, XYSeries series, Formatter formatter, RenderStack stack)", "class_method_signature": "FastLineAndPointRenderer.onRender(Canvas canvas, RectF plotArea, XYSeries series, Formatter formatter, RenderStack stack)", "testcase": false, "constructor": false, "invocations": ["clear", "clear", "size", "size", "size", "getY", "getX", "add", "transformScreen", "getBounds", "getPlot", "size", "add", "add", "size", "get", "get", "drawSegment"]}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}