{"test_class": {"identifier": "ReferenceBeanBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Reference(\n            interfaceClass = CharSequence.class,\n            interfaceName = \"java.lang.CharSequence\",\n            version = \"1.0.0\", group = \"TEST_GROUP\", url = \"dubbo://localhost:12345\",\n            client = \"client\", generic = true, injvm = true,\n            check = false, init = false, lazy = true,\n            stubevent = true, reconnect = \"reconnect\", sticky = true,\n            proxy = \"javassist\", stub = \"java.lang.CharSequence\", cluster = \"failover\",\n            connections = 3, callbacks = 1, onconnect = \"onconnect\", ondisconnect = \"ondisconnect\",\n            owner = \"owner\", layer = \"layer\", retries = 1,\n            loadbalance = \"random\", async = true, actives = 3,\n            sent = true, mock = \"mock\", validation = \"validation\",\n            timeout = 3, cache = \"cache\", filter = {\"echo\", \"generic\", \"accesslog\"},\n            listener = {\"deprecated\"}, parameters = {\"n1=v1  \", \"n2 = v2 \", \"  n3 =   v3  \"},\n            application = \"application\",\n            module = \"module\", consumer = \"consumer\", monitor = \"monitor\", registry = {\"registry\"}\n    )\n    private static final Object TEST_FIELD = new Object();", "modifier": "@Reference(\n            interfaceClass = CharSequence.class,\n            interfaceName = \"java.lang.CharSequence\",\n            version = \"1.0.0\", group = \"TEST_GROUP\", url = \"dubbo://localhost:12345\",\n            client = \"client\", generic = true, injvm = true,\n            check = false, init = false, lazy = true,\n            stubevent = true, reconnect = \"reconnect\", sticky = true,\n            proxy = \"javassist\", stub = \"java.lang.CharSequence\", cluster = \"failover\",\n            connections = 3, callbacks = 1, onconnect = \"onconnect\", ondisconnect = \"ondisconnect\",\n            owner = \"owner\", layer = \"layer\", retries = 1,\n            loadbalance = \"random\", async = true, actives = 3,\n            sent = true, mock = \"mock\", validation = \"validation\",\n            timeout = 3, cache = \"cache\", filter = {\"echo\", \"generic\", \"accesslog\"},\n            listener = {\"deprecated\"}, parameters = {\"n1=v1  \", \"n2 = v2 \", \"  n3 =   v3  \"},\n            application = \"application\",\n            module = \"module\", consumer = \"consumer\", monitor = \"monitor\", registry = {\"registry\"}\n    )\n    private static final", "type": "Object", "declarator": "TEST_FIELD = new Object()", "var_name": "TEST_FIELD"}, {"original_string": "@Autowired\n    private ApplicationContext context;", "modifier": "@Autowired\n    private", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}], "file": "dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java"}, "test_case": {"identifier": "testBuild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuild() throws Exception {\n        Reference reference = findAnnotation(findField(getClass(), \"TEST_FIELD\"), Reference.class);\n        ReferenceBeanBuilder beanBuilder = ReferenceBeanBuilder.create(reference, context.getClassLoader(), context);\n        beanBuilder.interfaceClass(CharSequence.class);\n        ReferenceBean referenceBean = beanBuilder.build();\n        Assert.assertEquals(CharSequence.class, referenceBean.getInterfaceClass());\n        Assert.assertEquals(\"1.0.0\", referenceBean.getVersion());\n        Assert.assertEquals(\"TEST_GROUP\", referenceBean.getGroup());\n        Assert.assertEquals(\"dubbo://localhost:12345\", referenceBean.getUrl());\n        Assert.assertEquals(\"client\", referenceBean.getClient());\n        Assert.assertEquals(true, referenceBean.isGeneric());\n        Assert.assertEquals(true, referenceBean.isInjvm());\n        Assert.assertEquals(false, referenceBean.isCheck());\n        Assert.assertEquals(null, referenceBean.isInit());\n        Assert.assertEquals(true, referenceBean.getLazy());\n        Assert.assertEquals(true, referenceBean.getStubevent());\n        Assert.assertEquals(\"reconnect\", referenceBean.getReconnect());\n        Assert.assertEquals(true, referenceBean.getSticky());\n        Assert.assertEquals(\"javassist\", referenceBean.getProxy());\n        Assert.assertEquals(\"java.lang.CharSequence\", referenceBean.getStub());\n        Assert.assertEquals(\"failover\", referenceBean.getCluster());\n        Assert.assertEquals(Integer.valueOf(3), referenceBean.getConnections());\n        Assert.assertEquals(Integer.valueOf(1), referenceBean.getCallbacks());\n        Assert.assertEquals(\"onconnect\", referenceBean.getOnconnect());\n        Assert.assertEquals(\"ondisconnect\", referenceBean.getOndisconnect());\n        Assert.assertEquals(\"owner\", referenceBean.getOwner());\n        Assert.assertEquals(\"layer\", referenceBean.getLayer());\n        Assert.assertEquals(Integer.valueOf(1), referenceBean.getRetries());\n        Assert.assertEquals(\"random\", referenceBean.getLoadbalance());\n        Assert.assertEquals(true, referenceBean.isAsync());\n        Assert.assertEquals(Integer.valueOf(3), referenceBean.getActives());\n        Assert.assertEquals(true, referenceBean.getSent());\n        Assert.assertEquals(\"mock\", referenceBean.getMock());\n        Assert.assertEquals(\"validation\", referenceBean.getValidation());\n        Assert.assertEquals(Integer.valueOf(3), referenceBean.getTimeout());\n        Assert.assertEquals(\"cache\", referenceBean.getCache());\n        Assert.assertEquals(\"echo,generic,accesslog\", referenceBean.getFilter());\n        Assert.assertEquals(\"deprecated\", referenceBean.getListener());\n\n        // parameters\n        Map<String, String> parameters = new HashMap<String, String>();\n        parameters.put(\"n1\", \"v1\");\n        parameters.put(\"n2\", \"v2\");\n        parameters.put(\"n3\", \"v3\");\n        Assert.assertEquals(parameters, referenceBean.getParameters());\n\n        // Asserts Null fields\n        Assert.assertNull(referenceBean.getApplication());\n        Assert.assertNull(referenceBean.getModule());\n        Assert.assertNull(referenceBean.getConsumer());\n        Assert.assertNull(referenceBean.getMonitor());\n        Assert.assertEquals(Collections.emptyList(), referenceBean.getRegistries());\n    }", "signature": "void testBuild()", "full_signature": "@Test public void testBuild()", "class_method_signature": "ReferenceBeanBuilderTest.testBuild()", "testcase": true, "constructor": false, "invocations": ["findAnnotation", "findField", "getClass", "create", "getClassLoader", "interfaceClass", "build", "assertEquals", "getInterfaceClass", "assertEquals", "getVersion", "assertEquals", "getGroup", "assertEquals", "getUrl", "assertEquals", "getClient", "assertEquals", "isGeneric", "assertEquals", "isInjvm", "assertEquals", "isCheck", "assertEquals", "isInit", "assertEquals", "getLazy", "assertEquals", "getStubevent", "assertEquals", "getReconnect", "assertEquals", "getSticky", "assertEquals", "getProxy", "assertEquals", "getStub", "assertEquals", "getCluster", "assertEquals", "valueOf", "getConnections", "assertEquals", "valueOf", "getCallbacks", "assertEquals", "getOnconnect", "assertEquals", "getOndisconnect", "assertEquals", "getOwner", "assertEquals", "getLayer", "assertEquals", "valueOf", "getRetries", "assertEquals", "getLoadbalance", "assertEquals", "isAsync", "assertEquals", "valueOf", "getActives", "assertEquals", "getSent", "assertEquals", "getMock", "assertEquals", "getValidation", "assertEquals", "valueOf", "getTimeout", "assertEquals", "getCache", "assertEquals", "getFilter", "assertEquals", "getListener", "put", "put", "put", "assertEquals", "getParameters", "assertNull", "getApplication", "assertNull", "getModule", "assertNull", "getConsumer", "assertNull", "getMonitor", "assertEquals", "emptyList", "getRegistries"]}, "focal_class": {"identifier": "ReferenceBeanBuilder", "superclass": "extends AbstractAnnotationConfigBeanBuilder<Reference, ReferenceBean>", "interfaces": "", "fields": [{"original_string": "static final String[] IGNORE_FIELD_NAMES = of(\"application\", \"module\", \"consumer\", \"monitor\", \"registry\");", "modifier": "static final", "type": "String[]", "declarator": "IGNORE_FIELD_NAMES = of(\"application\", \"module\", \"consumer\", \"monitor\", \"registry\")", "var_name": "IGNORE_FIELD_NAMES"}], "methods": [{"identifier": "ReferenceBeanBuilder", "parameters": "(Reference annotation, ClassLoader classLoader, ApplicationContext applicationContext)", "modifiers": "private", "return": "", "signature": " ReferenceBeanBuilder(Reference annotation, ClassLoader classLoader, ApplicationContext applicationContext)", "full_signature": "private  ReferenceBeanBuilder(Reference annotation, ClassLoader classLoader, ApplicationContext applicationContext)", "class_method_signature": "ReferenceBeanBuilder.ReferenceBeanBuilder(Reference annotation, ClassLoader classLoader, ApplicationContext applicationContext)", "testcase": false, "constructor": true}, {"identifier": "configureInterface", "parameters": "(Reference reference, ReferenceBean referenceBean)", "modifiers": "private", "return": "void", "signature": "void configureInterface(Reference reference, ReferenceBean referenceBean)", "full_signature": "private void configureInterface(Reference reference, ReferenceBean referenceBean)", "class_method_signature": "ReferenceBeanBuilder.configureInterface(Reference reference, ReferenceBean referenceBean)", "testcase": false, "constructor": false}, {"identifier": "configureConsumerConfig", "parameters": "(Reference reference, ReferenceBean<?> referenceBean)", "modifiers": "private", "return": "void", "signature": "void configureConsumerConfig(Reference reference, ReferenceBean<?> referenceBean)", "full_signature": "private void configureConsumerConfig(Reference reference, ReferenceBean<?> referenceBean)", "class_method_signature": "ReferenceBeanBuilder.configureConsumerConfig(Reference reference, ReferenceBean<?> referenceBean)", "testcase": false, "constructor": false}, {"identifier": "configureMethodConfig", "parameters": "(Reference reference, ReferenceBean<?> referenceBean)", "modifiers": "", "return": "void", "signature": "void configureMethodConfig(Reference reference, ReferenceBean<?> referenceBean)", "full_signature": " void configureMethodConfig(Reference reference, ReferenceBean<?> referenceBean)", "class_method_signature": "ReferenceBeanBuilder.configureMethodConfig(Reference reference, ReferenceBean<?> referenceBean)", "testcase": false, "constructor": false}, {"identifier": "doBuild", "parameters": "()", "modifiers": "@Override protected", "return": "ReferenceBean", "signature": "ReferenceBean doBuild()", "full_signature": "@Override protected ReferenceBean doBuild()", "class_method_signature": "ReferenceBeanBuilder.doBuild()", "testcase": false, "constructor": false}, {"identifier": "preConfigureBean", "parameters": "(Reference reference, ReferenceBean referenceBean)", "modifiers": "@Override protected", "return": "void", "signature": "void preConfigureBean(Reference reference, ReferenceBean referenceBean)", "full_signature": "@Override protected void preConfigureBean(Reference reference, ReferenceBean referenceBean)", "class_method_signature": "ReferenceBeanBuilder.preConfigureBean(Reference reference, ReferenceBean referenceBean)", "testcase": false, "constructor": false}, {"identifier": "resolveModuleConfigBeanName", "parameters": "(Reference annotation)", "modifiers": "@Override protected", "return": "String", "signature": "String resolveModuleConfigBeanName(Reference annotation)", "full_signature": "@Override protected String resolveModuleConfigBeanName(Reference annotation)", "class_method_signature": "ReferenceBeanBuilder.resolveModuleConfigBeanName(Reference annotation)", "testcase": false, "constructor": false}, {"identifier": "resolveApplicationConfigBeanName", "parameters": "(Reference annotation)", "modifiers": "@Override protected", "return": "String", "signature": "String resolveApplicationConfigBeanName(Reference annotation)", "full_signature": "@Override protected String resolveApplicationConfigBeanName(Reference annotation)", "class_method_signature": "ReferenceBeanBuilder.resolveApplicationConfigBeanName(Reference annotation)", "testcase": false, "constructor": false}, {"identifier": "resolveRegistryConfigBeanNames", "parameters": "(Reference annotation)", "modifiers": "@Override protected", "return": "String[]", "signature": "String[] resolveRegistryConfigBeanNames(Reference annotation)", "full_signature": "@Override protected String[] resolveRegistryConfigBeanNames(Reference annotation)", "class_method_signature": "ReferenceBeanBuilder.resolveRegistryConfigBeanNames(Reference annotation)", "testcase": false, "constructor": false}, {"identifier": "resolveMonitorConfigBeanName", "parameters": "(Reference annotation)", "modifiers": "@Override protected", "return": "String", "signature": "String resolveMonitorConfigBeanName(Reference annotation)", "full_signature": "@Override protected String resolveMonitorConfigBeanName(Reference annotation)", "class_method_signature": "ReferenceBeanBuilder.resolveMonitorConfigBeanName(Reference annotation)", "testcase": false, "constructor": false}, {"identifier": "postConfigureBean", "parameters": "(Reference annotation, ReferenceBean bean)", "modifiers": "@Override protected", "return": "void", "signature": "void postConfigureBean(Reference annotation, ReferenceBean bean)", "full_signature": "@Override protected void postConfigureBean(Reference annotation, ReferenceBean bean)", "class_method_signature": "ReferenceBeanBuilder.postConfigureBean(Reference annotation, ReferenceBean bean)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Reference annotation, ClassLoader classLoader,\n                                              ApplicationContext applicationContext)", "modifiers": "public static", "return": "ReferenceBeanBuilder", "signature": "ReferenceBeanBuilder create(Reference annotation, ClassLoader classLoader,\n                                              ApplicationContext applicationContext)", "full_signature": "public static ReferenceBeanBuilder create(Reference annotation, ClassLoader classLoader,\n                                              ApplicationContext applicationContext)", "class_method_signature": "ReferenceBeanBuilder.create(Reference annotation, ClassLoader classLoader,\n                                              ApplicationContext applicationContext)", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilder.java"}, "focal_method": {"identifier": "create", "parameters": "(Reference annotation, ClassLoader classLoader,\n                                              ApplicationContext applicationContext)", "modifiers": "public static", "return": "ReferenceBeanBuilder", "body": "public static ReferenceBeanBuilder create(Reference annotation, ClassLoader classLoader,\n                                              ApplicationContext applicationContext) {\n        return new ReferenceBeanBuilder(annotation, classLoader, applicationContext);\n    }", "signature": "ReferenceBeanBuilder create(Reference annotation, ClassLoader classLoader,\n                                              ApplicationContext applicationContext)", "full_signature": "public static ReferenceBeanBuilder create(Reference annotation, ClassLoader classLoader,\n                                              ApplicationContext applicationContext)", "class_method_signature": "ReferenceBeanBuilder.create(Reference annotation, ClassLoader classLoader,\n                                              ApplicationContext applicationContext)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}