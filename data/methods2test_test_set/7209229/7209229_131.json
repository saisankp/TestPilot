{"test_class": {"identifier": "TestBootstrapProcessor", "superclass": "", "interfaces": "", "fields": [], "file": "databus-bootstrap-server/databus-bootstrap-server-impl/src/test/java/com/linkedin/databus/bootstrap/server/TestBootstrapProcessor.java"}, "test_case": {"identifier": "testIsPhaseCompletedFlag", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIsPhaseCompletedFlag()\n  throws Exception\n  {\n    BootstrapProcessor bp = new BootstrapProcessor();\n\n    long processedRowCount = 1;\n    // order of args : processedRowCount, isLimitExceeded, isDropped, isError\n    BootstrapEventProcessResult result_ok = new BootstrapEventProcessResult(processedRowCount, false, false, false);\n    BootstrapEventProcessResult result_err = new BootstrapEventProcessResult(processedRowCount, false, false, true);\n    BootstrapEventProcessResult result_ile = new BootstrapEventProcessResult(processedRowCount, true, false, false);\n\n    Checkpoint ckpt_ss = new Checkpoint(\"{\\\"consumption_mode\\\":\\\"BOOTSTRAP_SNAPSHOT\\\", \\\"bootstrap_since_scn\\\":0,\" +\n        \"\\\"bootstrap_start_scn\\\":1000,\\\"bootstrap_target_scn\\\":2000,\\\"bootstrap_catchup_source_index\\\":0,\" +\n        \"\\\"bootstrap_snapshot_source_index\\\":1}\");\n    ckpt_ss.assertCheckpoint();\n\n    Checkpoint ckpt_cu = new Checkpoint(\"{\\\"consumption_mode\\\":\\\"BOOTSTRAP_CATCHUP\\\", \\\"bootstrap_since_scn\\\":0,\" +\n            \"\\\"bootstrap_start_scn\\\":1000,\\\"bootstrap_target_scn\\\":2000,\\\"bootstrap_catchup_source_index\\\":1,\" +\n            \"\\\"bootstrap_snapshot_source_index\\\":1}\");\n    ckpt_cu.assertCheckpoint();\n    long numRowsReadFromDb = 1;\n    long maxRowsPerFetch = 2;\n    long windowScn = 1;\n\n    // result is null, phaseCompleted == false ( irrespective of snapshot / catchup phase )\n    numRowsReadFromDb = 0;\n    boolean pc = bp.computeIsPhaseCompleted(null, ckpt_ss, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertTrue(pc);\n    pc = bp.computeIsPhaseCompleted(null, ckpt_cu, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertTrue(pc);\n\n    numRowsReadFromDb = 1;\n    // numRowsReadFromDb < maxRowsPerFetch, in SNAPSHOT mode\n    pc = bp.computeIsPhaseCompleted(result_ok, ckpt_ss, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertTrue(pc);\n    // Same as above, but result.isError == true ( overrides all other conditions )\n    pc = bp.computeIsPhaseCompleted(result_err, ckpt_ss, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertFalse(pc);\n    // Same as above, but result.isLimitExceeded == true ( overrides all other conditions )\n    pc = bp.computeIsPhaseCompleted(result_ile, ckpt_ss, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertFalse(pc);\n\n    // numRowsReadFromDb == maxRowsPerFetch, in SNAPSHOT mode\n    numRowsReadFromDb = 2;\n    pc = bp.computeIsPhaseCompleted(result_ok, ckpt_ss, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertFalse(pc);\n    // Same as above, but result.isError == true\n    pc = bp.computeIsPhaseCompleted(result_err, ckpt_ss, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertFalse(pc);\n    // Same as above, but result.isLimitExceeded == true\n    pc = bp.computeIsPhaseCompleted(result_ile, ckpt_ss, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertFalse(pc);\n\n    numRowsReadFromDb = 1;\n    // numRowsReadFromDb < maxRowsPerFetch, in CATCHUP mode, windowScn != bootstrap_target_scn\n    pc = bp.computeIsPhaseCompleted(result_ok, ckpt_ss, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertTrue(pc);\n\n    windowScn = ckpt_cu.getBootstrapTargetScn();\n    pc = bp.computeIsPhaseCompleted(result_ok, ckpt_cu, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertTrue(pc);\n\n    // Same as above, but result.isError == true ( overrides all other conditions )\n    pc = bp.computeIsPhaseCompleted(result_err, ckpt_ss, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertFalse(pc);\n    // Same as above, but result.isLimitExceeded == true ( overrides result being null )\n    pc = bp.computeIsPhaseCompleted(result_ile, ckpt_ss, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertFalse(pc);\n\n    // numRowsReadFromDb == maxRowsPerFetch, in CATCHUP mode\n    numRowsReadFromDb = 2;\n    windowScn = 10; // not equal to bootstrap_target_scn\n    pc = bp.computeIsPhaseCompleted(result_ok, ckpt_cu, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertFalse(pc);\n    windowScn = ckpt_cu.getBootstrapTargetScn(); // equal to bootstrap_target_scn, but does not matter still\n    pc = bp.computeIsPhaseCompleted(result_ok, ckpt_cu, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertFalse(pc);\n\n    // Same as above, but result.isError == true\n    pc = bp.computeIsPhaseCompleted(result_err, ckpt_cu, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertFalse(pc);\n    // Same as above, but result.isLimitExceeded == true\n    pc = bp.computeIsPhaseCompleted(result_ile, ckpt_cu, numRowsReadFromDb, maxRowsPerFetch, windowScn);\n    Assert.assertFalse(pc);\n  }", "signature": "void testIsPhaseCompletedFlag()", "full_signature": "@Test public void testIsPhaseCompletedFlag()", "class_method_signature": "TestBootstrapProcessor.testIsPhaseCompletedFlag()", "testcase": true, "constructor": false, "invocations": ["assertCheckpoint", "assertCheckpoint", "computeIsPhaseCompleted", "assertTrue", "computeIsPhaseCompleted", "assertTrue", "computeIsPhaseCompleted", "assertTrue", "computeIsPhaseCompleted", "assertFalse", "computeIsPhaseCompleted", "assertFalse", "computeIsPhaseCompleted", "assertFalse", "computeIsPhaseCompleted", "assertFalse", "computeIsPhaseCompleted", "assertFalse", "computeIsPhaseCompleted", "assertTrue", "getBootstrapTargetScn", "computeIsPhaseCompleted", "assertTrue", "computeIsPhaseCompleted", "assertFalse", "computeIsPhaseCompleted", "assertFalse", "computeIsPhaseCompleted", "assertFalse", "getBootstrapTargetScn", "computeIsPhaseCompleted", "assertFalse", "computeIsPhaseCompleted", "assertFalse", "computeIsPhaseCompleted", "assertFalse"]}, "focal_class": {"identifier": "BootstrapProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String            MODULE                      =\n      BootstrapProcessor.class.getName();", "modifier": "public static final", "type": "String", "declarator": "MODULE                      =\n      BootstrapProcessor.class.getName()", "var_name": "MODULE"}, {"original_string": "public static final Logger            LOG                         =\n      Logger.getLogger(MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "LOG                         =\n      Logger.getLogger(MODULE)", "var_name": "LOG"}, {"original_string": "public final static String            EVENT_COLUMNS               = \"val\";", "modifier": "public final static", "type": "String", "declarator": "EVENT_COLUMNS               = \"val\"", "var_name": "EVENT_COLUMNS"}, {"original_string": "public final static String            PHASE_COMPLETED_HEADER_NAME = \"PhaseCompleted\";", "modifier": "public final static", "type": "String", "declarator": "PHASE_COMPLETED_HEADER_NAME = \"PhaseCompleted\"", "var_name": "PHASE_COMPLETED_HEADER_NAME"}, {"original_string": "public final static String            PHASE_COMPLETED_HEADER_TRUE = \"TRUE\";", "modifier": "public final static", "type": "String", "declarator": "PHASE_COMPLETED_HEADER_TRUE = \"TRUE\"", "var_name": "PHASE_COMPLETED_HEADER_TRUE"}, {"original_string": "public final static String            EMPTY_STRING = \"\";", "modifier": "public final static", "type": "String", "declarator": "EMPTY_STRING = \"\"", "var_name": "EMPTY_STRING"}, {"original_string": "private final long                    _maxSnapshotRowsPerFetch;", "modifier": "private final", "type": "long", "declarator": "_maxSnapshotRowsPerFetch", "var_name": "_maxSnapshotRowsPerFetch"}, {"original_string": "private final long                    _maxCatchupRowsPerFetch;", "modifier": "private final", "type": "long", "declarator": "_maxCatchupRowsPerFetch", "var_name": "_maxCatchupRowsPerFetch"}, {"original_string": "private final int                     _queryTimeInSec;", "modifier": "private final", "type": "int", "declarator": "_queryTimeInSec", "var_name": "_queryTimeInSec"}, {"original_string": "private BootstrapDBMetaDataDAO                _dbDao;", "modifier": "private", "type": "BootstrapDBMetaDataDAO", "declarator": "_dbDao", "var_name": "_dbDao"}, {"original_string": "private final DbusEventsStatisticsCollector _curStatsCollector;", "modifier": "private final", "type": "DbusEventsStatisticsCollector", "declarator": "_curStatsCollector", "var_name": "_curStatsCollector"}, {"original_string": "private DbusKeyFilter                 keyFilter;", "modifier": "private", "type": "DbusKeyFilter", "declarator": "keyFilter", "var_name": "keyFilter"}, {"original_string": "BootstrapServerStaticConfig config;", "modifier": "", "type": "BootstrapServerStaticConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "BootstrapProcessor", "parameters": "(BootstrapServerStaticConfig config,\n                            DbusEventsStatisticsCollector curStatsCollector)", "modifiers": "public", "return": "", "signature": " BootstrapProcessor(BootstrapServerStaticConfig config,\n                            DbusEventsStatisticsCollector curStatsCollector)", "full_signature": "public  BootstrapProcessor(BootstrapServerStaticConfig config,\n                            DbusEventsStatisticsCollector curStatsCollector)", "class_method_signature": "BootstrapProcessor.BootstrapProcessor(BootstrapServerStaticConfig config,\n                            DbusEventsStatisticsCollector curStatsCollector)", "testcase": false, "constructor": true}, {"identifier": "BootstrapProcessor", "parameters": "()", "modifiers": "protected", "return": "", "signature": " BootstrapProcessor()", "full_signature": "protected  BootstrapProcessor()", "class_method_signature": "BootstrapProcessor.BootstrapProcessor()", "testcase": false, "constructor": true}, {"identifier": "getKeyFilter", "parameters": "()", "modifiers": "public", "return": "DbusKeyFilter", "signature": "DbusKeyFilter getKeyFilter()", "full_signature": "public DbusKeyFilter getKeyFilter()", "class_method_signature": "BootstrapProcessor.getKeyFilter()", "testcase": false, "constructor": false}, {"identifier": "setKeyFilter", "parameters": "(DbusKeyFilter keyFilter)", "modifiers": "public", "return": "void", "signature": "void setKeyFilter(DbusKeyFilter keyFilter)", "full_signature": "public void setKeyFilter(DbusKeyFilter keyFilter)", "class_method_signature": "BootstrapProcessor.setKeyFilter(DbusKeyFilter keyFilter)", "testcase": false, "constructor": false}, {"identifier": "streamCatchupRows", "parameters": "(Checkpoint currState, BootstrapEventCallback callBack)", "modifiers": "public", "return": "boolean", "signature": "boolean streamCatchupRows(Checkpoint currState, BootstrapEventCallback callBack)", "full_signature": "public boolean streamCatchupRows(Checkpoint currState, BootstrapEventCallback callBack)", "class_method_signature": "BootstrapProcessor.streamCatchupRows(Checkpoint currState, BootstrapEventCallback callBack)", "testcase": false, "constructor": false}, {"identifier": "getFilterSQL", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getFilterSQL()", "full_signature": "private String getFilterSQL()", "class_method_signature": "BootstrapProcessor.getFilterSQL()", "testcase": false, "constructor": false}, {"identifier": "getCatchupSQLString", "parameters": "(String catchupTab)", "modifiers": "public", "return": "String", "signature": "String getCatchupSQLString(String catchupTab)", "full_signature": "public String getCatchupSQLString(String catchupTab)", "class_method_signature": "BootstrapProcessor.getCatchupSQLString(String catchupTab)", "testcase": false, "constructor": false}, {"identifier": "getCatchupSQLString", "parameters": "(String catchupTab, String source)", "modifiers": "public", "return": "String", "signature": "String getCatchupSQLString(String catchupTab, String source)", "full_signature": "public String getCatchupSQLString(String catchupTab, String source)", "class_method_signature": "BootstrapProcessor.getCatchupSQLString(String catchupTab, String source)", "testcase": false, "constructor": false}, {"identifier": "getSnapshotSQLString", "parameters": "(String snapShotTable)", "modifiers": "public", "return": "String", "signature": "String getSnapshotSQLString(String snapShotTable)", "full_signature": "public String getSnapshotSQLString(String snapShotTable)", "class_method_signature": "BootstrapProcessor.getSnapshotSQLString(String snapShotTable)", "testcase": false, "constructor": false}, {"identifier": "getSnapshotSQLString", "parameters": "(String snapShotTable, String source)", "modifiers": "public", "return": "String", "signature": "String getSnapshotSQLString(String snapShotTable, String source)", "full_signature": "public String getSnapshotSQLString(String snapShotTable, String source)", "class_method_signature": "BootstrapProcessor.getSnapshotSQLString(String snapShotTable, String source)", "testcase": false, "constructor": false}, {"identifier": "createCatchupStatement", "parameters": "(int srcId,\n                                                   int logId,\n                                                   Checkpoint currState)", "modifiers": "private", "return": "PreparedStatement", "signature": "PreparedStatement createCatchupStatement(int srcId,\n                                                   int logId,\n                                                   Checkpoint currState)", "full_signature": "private PreparedStatement createCatchupStatement(int srcId,\n                                                   int logId,\n                                                   Checkpoint currState)", "class_method_signature": "BootstrapProcessor.createCatchupStatement(int srcId,\n                                                   int logId,\n                                                   Checkpoint currState)", "testcase": false, "constructor": false}, {"identifier": "streamSnapShotRows", "parameters": "(Checkpoint currState, BootstrapEventCallback callBack)", "modifiers": "public", "return": "boolean", "signature": "boolean streamSnapShotRows(Checkpoint currState, BootstrapEventCallback callBack)", "full_signature": "public boolean streamSnapShotRows(Checkpoint currState, BootstrapEventCallback callBack)", "class_method_signature": "BootstrapProcessor.streamSnapShotRows(Checkpoint currState, BootstrapEventCallback callBack)", "testcase": false, "constructor": false}, {"identifier": "streamOutRows", "parameters": "(Checkpoint ckpt,\n                                ResultSet rs,\n                                BootstrapEventCallback callback,\n                                long maxRowsPerFetch)", "modifiers": "private", "return": "boolean", "signature": "boolean streamOutRows(Checkpoint ckpt,\n                                ResultSet rs,\n                                BootstrapEventCallback callback,\n                                long maxRowsPerFetch)", "full_signature": "private boolean streamOutRows(Checkpoint ckpt,\n                                ResultSet rs,\n                                BootstrapEventCallback callback,\n                                long maxRowsPerFetch)", "class_method_signature": "BootstrapProcessor.streamOutRows(Checkpoint ckpt,\n                                ResultSet rs,\n                                BootstrapEventCallback callback,\n                                long maxRowsPerFetch)", "testcase": false, "constructor": false}, {"identifier": "writeCkptIfAppropriate", "parameters": "(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)", "modifiers": "protected", "return": "void", "signature": "void writeCkptIfAppropriate(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)", "full_signature": "protected void writeCkptIfAppropriate(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)", "class_method_signature": "BootstrapProcessor.writeCkptIfAppropriate(BootstrapEventProcessResult result,\n                                      BootstrapEventCallback callback,\n                                      long numRowsReadFromDb,\n                                      Checkpoint ckpt,\n                                      String resultSetStmtStr)", "testcase": false, "constructor": false}, {"identifier": "computeIsPhaseCompleted", "parameters": "(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)", "modifiers": "protected", "return": "boolean", "signature": "boolean computeIsPhaseCompleted(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)", "full_signature": "protected boolean computeIsPhaseCompleted(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)", "class_method_signature": "BootstrapProcessor.computeIsPhaseCompleted(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)", "testcase": false, "constructor": false}, {"identifier": "mergeAndResetStats", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void mergeAndResetStats()", "full_signature": "private void mergeAndResetStats()", "class_method_signature": "BootstrapProcessor.mergeAndResetStats()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "BootstrapProcessor.shutdown()", "testcase": false, "constructor": false}], "file": "databus-bootstrap-server/databus-bootstrap-server-impl/src/main/java/com/linkedin/databus/bootstrap/server/BootstrapProcessor.java"}, "focal_method": {"identifier": "computeIsPhaseCompleted", "parameters": "(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)", "modifiers": "protected", "return": "boolean", "body": "protected boolean computeIsPhaseCompleted(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)\n  {\n    assert(numRowsReadFromDb <= maxRowsPerFetch);\n    boolean isPhaseCompleted = false;\n    if (null == result)\n    {\n      /**\n       * There are no rows read from the DB in the resultSet.\n       * In this case, it definitely means that \"isPhaseCompleted\" is true, i.e., bootstrap has finished\n       */\n      assert(numRowsReadFromDb == 0);\n      isPhaseCompleted = true;\n    }\n    else\n    {\n      /**\n       * Note that 0<= numRowsReadFromDb <= maxRowsPerFetch in this case\n       * i.e., numRowsReadFromDb == 0 is possible\n       * in the case when all events are filtered out\n       */\n      if (\n          (numRowsReadFromDb < maxRowsPerFetch) &&\n          (DbusClientMode.BOOTSTRAP_SNAPSHOT == ckpt.getConsumptionMode())\n          )\n      {\n        /**\n         * 1. The total rows processed is less than the max rows per fetch\n         * 2. The client is in snapshot mode\n         */\n        isPhaseCompleted = true;\n      }\n      else if (\n          (numRowsReadFromDb < maxRowsPerFetch) &&\n          (DbusClientMode.BOOTSTRAP_CATCHUP == ckpt.getConsumptionMode()) &&\n          (ckpt.getBootstrapTargetScn() == windowScn)\n          )\n      {\n        /**\n         * 1. If the total rows processed is less than the max rows per fetch\n         * 2. The client is in catchup mode\n         * 3. We are caught up to targetScn\n         */\n        isPhaseCompleted = true;\n      }\n\n      LOG.info(\"Terminating batch with result: \" + result);\n\n      if (result.isError() || result.isClientBufferLimitExceeded())\n      {\n        /**\n         * Don't write either checkpoint or phaseCompleted when\n         * 1. There was an error, or\n         * 2. ClientBufferLimit was exceeded\n         *\n         * Note that even if isPhaseCompleted was set earlier, it is overruled\n         */\n        isPhaseCompleted = false;\n      }\n    }\n    return isPhaseCompleted;\n  }", "signature": "boolean computeIsPhaseCompleted(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)", "full_signature": "protected boolean computeIsPhaseCompleted(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)", "class_method_signature": "BootstrapProcessor.computeIsPhaseCompleted(BootstrapEventProcessResult result,\n                                            Checkpoint ckpt,\n                                            long numRowsReadFromDb,\n                                            long maxRowsPerFetch,\n                                            long windowScn)", "testcase": false, "constructor": false, "invocations": ["getConsumptionMode", "getConsumptionMode", "getBootstrapTargetScn", "info", "isError", "isClientBufferLimitExceeded"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}