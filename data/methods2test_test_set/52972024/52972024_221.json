{"test_class": {"identifier": "ResolveStandardTypesStrategiesPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}, {"original_string": "private ResolveStandardTypesStrategiesPlugin plugin;", "modifier": "private", "type": "ResolveStandardTypesStrategiesPlugin", "declarator": "plugin", "var_name": "plugin"}], "file": "CoreFeatures/IOCStrategyPack-plugins/PluginResolveStandardTypesStrategies/src/test/java/info/smart_tools/smartactors/ioc_strategy_pack_plugins/resolve_standard_types_strategies_plugin/ResolveStandardTypesStrategiesPluginTest.java"}, "test_case": {"identifier": "ShouldRegisterStrategiesForStandardTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ShouldRegisterStrategiesForStandardTypes() throws Exception {\n\n        BootstrapItem bootstrapItem = mock(BootstrapItem.class);\n        whenNew(BootstrapItem.class).withArguments(\"ResolveStandardTypesStrategiesPlugin\").thenReturn(bootstrapItem);\n        when(bootstrapItem.after(anyString())).thenReturn(bootstrapItem);\n        plugin.load();\n        verifyNew(BootstrapItem.class).withArguments(\"ResolveStandardTypesStrategiesPlugin\");\n\n        verify(bootstrapItem).after(\"IOC\");\n        ArgumentCaptor<IPoorAction> actionArgumentCaptor = ArgumentCaptor.forClass(IPoorAction.class);\n        verify(bootstrapItem).process(actionArgumentCaptor.capture());\n\n        IKey stringConvertKey = mock(IKey.class);\n        when(Keys.getOrAdd(String.class.getCanonicalName() + \"convert\")).thenReturn(stringConvertKey);\n        IKey integerConvertKey = mock(IKey.class);\n        when(Keys.getOrAdd(Integer.class.getCanonicalName() + \"convert\")).thenReturn(integerConvertKey);\n        IKey bigDecimalConvertKey = mock(IKey.class);\n        when(Keys.getOrAdd(BigDecimal.class.getCanonicalName() + \"convert\")).thenReturn(bigDecimalConvertKey);\n        IKey localDateTimeConvertKey = mock(IKey.class);\n        when(Keys.getOrAdd(LocalDateTime.class.getCanonicalName() + \"convert\")).thenReturn(localDateTimeConvertKey);\n        IKey listConvertKey = mock(IKey.class);\n        when(Keys.getOrAdd(List.class.getCanonicalName() + \"convert\")).thenReturn(listConvertKey);\n\n        verify(bootstrap).add(eq(bootstrapItem));\n\n        actionArgumentCaptor.getValue().execute();\n\n        verifyStatic();\n        Keys.getOrAdd(String.class.getCanonicalName() + \"convert\");\n        verifyStatic();\n        Keys.getOrAdd(Integer.class.getCanonicalName() + \"convert\");\n        verifyStatic();\n        Keys.getOrAdd(BigDecimal.class.getCanonicalName() + \"convert\");\n        verifyStatic();\n        Keys.getOrAdd(LocalDateTime.class.getCanonicalName() + \"convert\");\n        verifyStatic();\n        Keys.getOrAdd(List.class.getCanonicalName() + \"convert\");\n\n        verifyStatic();\n        IOC.register(eq(stringConvertKey), any(IResolveDependencyStrategy.class));\n        verifyStatic();\n        IOC.register(eq(integerConvertKey), any(IResolveDependencyStrategy.class));\n        verifyStatic();\n        IOC.register(eq(bigDecimalConvertKey), any(IResolveDependencyStrategy.class));\n        verifyStatic();\n        IOC.register(eq(localDateTimeConvertKey), any(IResolveDependencyStrategy.class));\n        verifyStatic();\n        IOC.register(eq(listConvertKey), any(IResolveDependencyStrategy.class));\n    }", "signature": "void ShouldRegisterStrategiesForStandardTypes()", "full_signature": "@Test public void ShouldRegisterStrategiesForStandardTypes()", "class_method_signature": "ResolveStandardTypesStrategiesPluginTest.ShouldRegisterStrategiesForStandardTypes()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "withArguments", "whenNew", "thenReturn", "when", "after", "anyString", "load", "withArguments", "verifyNew", "after", "verify", "forClass", "process", "verify", "capture", "mock", "thenReturn", "when", "getOrAdd", "getCanonicalName", "mock", "thenReturn", "when", "getOrAdd", "getCanonicalName", "mock", "thenReturn", "when", "getOrAdd", "getCanonicalName", "mock", "thenReturn", "when", "getOrAdd", "getCanonicalName", "mock", "thenReturn", "when", "getOrAdd", "getCanonicalName", "add", "verify", "eq", "execute", "getValue", "verifyStatic", "getOrAdd", "getCanonicalName", "verifyStatic", "getOrAdd", "getCanonicalName", "verifyStatic", "getOrAdd", "getCanonicalName", "verifyStatic", "getOrAdd", "getCanonicalName", "verifyStatic", "getOrAdd", "getCanonicalName", "verifyStatic", "register", "eq", "any", "verifyStatic", "register", "eq", "any", "verifyStatic", "register", "eq", "any", "verifyStatic", "register", "eq", "any", "verifyStatic", "register", "eq", "any"]}, "focal_class": {"identifier": "ResolveStandardTypesStrategiesPlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "ResolveStandardTypesStrategiesPlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " ResolveStandardTypesStrategiesPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  ResolveStandardTypesStrategiesPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "ResolveStandardTypesStrategiesPlugin.ResolveStandardTypesStrategiesPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "ResolveStandardTypesStrategiesPlugin.load()", "testcase": false, "constructor": false}], "file": "CoreFeatures/IOCStrategyPack-plugins/PluginResolveStandardTypesStrategies/src/main/java/info/smart_tools/smartactors/ioc_strategy_pack_plugins/resolve_standard_types_strategies_plugin/ResolveStandardTypesStrategiesPlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"ResolveStandardTypesStrategiesPlugin\");\n            item\n                    .after(\"IOC\")\n                    .process(() -> {\n                        try {\n                            IFunction argToKey = arg -> arg.getClass();\n                            IBiFunction findValueByArgument = (map, arg) -> {\n                                IResolveDependencyStrategy strategy = null;\n                                for (Map.Entry<Class, IResolveDependencyStrategy> entry : ((Map<Class, IResolveDependencyStrategy>) map).entrySet()) {\n                                    if (entry.getKey().isInstance(arg)) {\n                                        strategy = entry.getValue();\n\n                                        break;\n                                    }\n                                }\n                                return strategy;\n                            };\n\n                            // to String strategies\n                            IKey stringKey = Keys.getOrAdd(String.class.getCanonicalName() + \"convert\");\n                            IKey expandableStrategyStringKey = Keys.getOrAdd(\"expandable_strategy#\" + String.class.getCanonicalName());\n                            IResolveDependencyStrategy stringStrategy = new StrategyStorageWithCacheStrategy(argToKey, findValueByArgument);\n                            ((IAdditionDependencyStrategy)stringStrategy).register(\n                                    String.class,\n                                    new ClassToClassResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy)stringStrategy).register(\n                                    Object.class,\n                                    new ObjectToStringResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy)stringStrategy).register(\n                                    int.class,\n                                    new IntToStringResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy)stringStrategy).register(\n                                    long.class,\n                                    new LongToStringResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy)stringStrategy).register(\n                                    float.class,\n                                    new FloatToStringResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy)stringStrategy).register(\n                                    double.class,\n                                    new DoubleToStringResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy)stringStrategy).register(\n                                    boolean.class,\n                                    new BooleanToStringResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy)stringStrategy).register(\n                                    byte.class,\n                                    new ByteToStringResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy)stringStrategy).register(\n                                    short.class,\n                                    new ShortToStringResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy)stringStrategy).register(\n                                    char.class,\n                                    new CharToStringResolveDependencyStrategy()\n                            );\n                            IOC.register(stringKey, stringStrategy);\n                            IOC.register(expandableStrategyStringKey, new SingletonStrategy(stringStrategy));\n\n                            // to Character strategies\n                            IKey characterKey = Keys.getOrAdd(Character.class.getCanonicalName() + \"convert\");\n                            IKey expandableStrategyCharacterKey = Keys.getOrAdd(\"expandable_strategy#\" + Character.class.getCanonicalName());\n                            IResolveDependencyStrategy characterStrategy = new StrategyStorageWithCacheStrategy(argToKey, findValueByArgument);\n                            ((IAdditionDependencyStrategy) characterStrategy).register(\n                                    Character.class,\n                                    new ClassToClassResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy) characterStrategy).register(\n                                    String.class,\n                                    new StringToCharacterResolveDependencyStrategy()\n                            );\n                            IOC.register(characterKey, characterStrategy);\n                            IOC.register(expandableStrategyCharacterKey, new SingletonStrategy(characterStrategy));\n\n                            // to boolean strategies\n                            IKey booleanKey = Keys.getOrAdd(boolean.class.getCanonicalName() + \"convert\");\n                            IKey expandableStrategyBooleanKey = Keys.getOrAdd(\"expandable_strategy#\" + boolean.class.getCanonicalName());\n                            IResolveDependencyStrategy booleanStrategy = new StrategyStorageWithCacheStrategy(argToKey, findValueByArgument);\n                            ((IAdditionDependencyStrategy) booleanStrategy).register(\n                                    boolean.class,\n                                    new ClassToClassResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy) booleanStrategy).register(\n                                    Boolean.class,\n                                    new BooleanToPrimitiveResolveDependencyStrategy()\n                            );\n                            IOC.register(booleanKey, booleanStrategy);\n                            IOC.register(expandableStrategyBooleanKey, new SingletonStrategy(booleanStrategy));\n\n                            // to Integer strategies\n                            IKey integerKey = Keys.getOrAdd(Integer.class.getCanonicalName() + \"convert\");\n                            IKey expandableStrategyIntegerKey = Keys.getOrAdd(\"expandable_strategy#\" + Integer.class.getCanonicalName());\n                            IResolveDependencyStrategy integerStrategy = new StrategyStorageWithCacheStrategy(argToKey, findValueByArgument);\n                            ((IAdditionDependencyStrategy) integerStrategy).register(\n                                    Integer.class,\n                                    new ClassToClassResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy) integerStrategy).register(\n                                    String.class,\n                                    new StringToIntResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy) integerStrategy).register(\n                                    Double.class,\n                                    new DoubleToIntResolveDependencyStrategy()\n                            );\n                            IOC.register(integerKey, integerStrategy);\n                            IOC.register(expandableStrategyIntegerKey, new SingletonStrategy(integerStrategy));\n\n                            // to BigDecimal strategies\n                            IKey bigDecimalKey = Keys.getOrAdd(BigDecimal.class.getCanonicalName() + \"convert\");\n                            IKey expandableStrategyBigDecimalKey = Keys.getOrAdd(\"expandable_strategy#\" + BigDecimal.class.getCanonicalName());\n                            IResolveDependencyStrategy bigDecimalStrategy = new StrategyStorageWithCacheStrategy(argToKey, findValueByArgument);\n                            ((IAdditionDependencyStrategy) bigDecimalStrategy).register(\n                                    BigDecimal.class,\n                                    new ClassToClassResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy) bigDecimalStrategy).register(\n                                    String.class,\n                                    new StringToBigDecimalResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy) bigDecimalStrategy).register(\n                                    Double.class,\n                                    new DoubleToBigDecimalResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy) bigDecimalStrategy).register(\n                                    Float.class,\n                                    new FloatToBigDecimalResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy) bigDecimalStrategy).register(\n                                    Integer.class,\n                                    new IntegerToBigDecimalResolveDependencyStrategy()\n                            );\n                            IOC.register(bigDecimalKey, bigDecimalStrategy);\n                            IOC.register(expandableStrategyBigDecimalKey, new SingletonStrategy(bigDecimalStrategy));\n\n                            // to LocalDateTime strategies\n                            IKey localDateTimeKey = Keys.getOrAdd(LocalDateTime.class.getCanonicalName() + \"convert\");\n                            IKey expandableStrategyLocalDateTimeKey = Keys.getOrAdd(\"expandable_strategy#\" + LocalDateTime.class.getCanonicalName());\n                            IResolveDependencyStrategy localDateTimeStrategy = new StrategyStorageWithCacheStrategy(argToKey, findValueByArgument);\n                            ((IAdditionDependencyStrategy) localDateTimeStrategy).register(\n                                    LocalDateTime.class,\n                                    new ClassToClassResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy) localDateTimeStrategy).register(\n                                    String.class,\n                                    new StringToDateResolveDependencyStrategy()\n                            );\n                            IOC.register(localDateTimeKey, localDateTimeStrategy);\n                            IOC.register(expandableStrategyLocalDateTimeKey, new SingletonStrategy(localDateTimeStrategy));\n\n                            // to list strategies\n                            IKey listKey = Keys.getOrAdd(List.class.getCanonicalName() + \"convert\");\n                            IKey expandableStrategyListKey = Keys.getOrAdd(\"expandable_strategy#\" + List.class.getCanonicalName());\n                            IResolveDependencyStrategy listStrategy = new StrategyStorageWithCacheStrategy(argToKey, findValueByArgument);\n                            ((IAdditionDependencyStrategy) listStrategy).register(boolean[].class, new BooleanArrayToListResolveDependencyStrategy());\n                            ((IAdditionDependencyStrategy) listStrategy).register(byte[].class, new ByteArrayToListResolveDependencyStrategy());\n                            ((IAdditionDependencyStrategy) listStrategy).register(char[].class, new CharArrayToListResolveDependencyStrategy());\n                            ((IAdditionDependencyStrategy) listStrategy).register(double[].class, new DoubleArrayToListResolveDependencyStrategy());\n                            ((IAdditionDependencyStrategy) listStrategy).register(float[].class, new FloatArrayToListResolveDependencyStrategy());\n                            ((IAdditionDependencyStrategy) listStrategy).register(int[].class, new IntArrayToListResolveDependencyStrategy());\n                            ((IAdditionDependencyStrategy) listStrategy).register(long[].class, new LongArrayToListResolveDependencyStrategy());\n                            ((IAdditionDependencyStrategy) listStrategy).register(Object[].class, new ObjectArrayToListResolveDependencyStrategy());\n                            ((IAdditionDependencyStrategy) listStrategy).register(short[].class, new ShortArrayToListResolveDependencyStrategy());\n                            IOC.register(listKey, listStrategy);\n                            IOC.register(expandableStrategyListKey, new SingletonStrategy(listStrategy));\n\n                            //to int strategies\n                            IKey intKey = Keys.getOrAdd(int.class.getCanonicalName() + \"convert\");\n                            IKey expandableStrategyIntKey = Keys.getOrAdd(\"expandable_strategy#\" + int.class.getCanonicalName());\n                            IResolveDependencyStrategy intStrategy = new StrategyStorageWithCacheStrategy(argToKey, findValueByArgument);\n                            ((IAdditionDependencyStrategy) intStrategy).register(\n                                    String.class,\n                                    new StringToIntResolveDependencyStrategy()\n                            );\n                            ((IAdditionDependencyStrategy) intStrategy).register(\n                                    Double.class,\n                                    new DoubleToIntResolveDependencyStrategy()\n                            );\n                            IOC.register(intKey, intStrategy);\n                            IOC.register(expandableStrategyIntKey, new SingletonStrategy(intStrategy));\n                        } catch (ResolutionException e) {\n                            throw new ActionExecuteException(\"ResolveStandardTypesStrategies plugin can't load: can't get ResolveStandardTypesStrategies key\", e);\n                        } catch (RegistrationException | AdditionDependencyStrategyException | InvalidArgumentException e) {\n                            throw new ActionExecuteException(\"ResolveStandardTypesStrategies plugin can't load: can't register new strategy\", e);\n                        }\n                    });\n            bootstrap.add(item);\n        } catch (InvalidArgumentException e) {\n            throw new PluginException(\"Can't load ResolveStandardTypesStrategies plugin\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "ResolveStandardTypesStrategiesPlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "after", "getClass", "entrySet", "isInstance", "getKey", "getValue", "getOrAdd", "getCanonicalName", "getOrAdd", "getCanonicalName", "register", "register", "register", "register", "register", "register", "register", "register", "register", "register", "register", "register", "getOrAdd", "getCanonicalName", "getOrAdd", "getCanonicalName", "register", "register", "register", "register", "getOrAdd", "getCanonicalName", "getOrAdd", "getCanonicalName", "register", "register", "register", "register", "getOrAdd", "getCanonicalName", "getOrAdd", "getCanonicalName", "register", "register", "register", "register", "register", "getOrAdd", "getCanonicalName", "getOrAdd", "getCanonicalName", "register", "register", "register", "register", "register", "register", "register", "getOrAdd", "getCanonicalName", "getOrAdd", "getCanonicalName", "register", "register", "register", "register", "getOrAdd", "getCanonicalName", "getOrAdd", "getCanonicalName", "register", "register", "register", "register", "register", "register", "register", "register", "register", "register", "register", "getOrAdd", "getCanonicalName", "getOrAdd", "getCanonicalName", "register", "register", "register", "register", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}