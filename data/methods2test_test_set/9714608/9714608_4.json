{"test_class": {"identifier": "QuadTreeNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TreeNodeListenerStub<DefaultQuadTreeNode<Object>> listener =\n\t\tnew TreeNodeListenerStub<>();", "modifier": "private final", "type": "TreeNodeListenerStub<DefaultQuadTreeNode<Object>>", "declarator": "listener =\n\t\tnew TreeNodeListenerStub<>()", "var_name": "listener"}, {"original_string": "private DefaultQuadTreeNode<Object> root;", "modifier": "private", "type": "DefaultQuadTreeNode<Object>", "declarator": "root", "var_name": "root"}, {"original_string": "private DefaultQuadTreeNode<Object> child1;", "modifier": "private", "type": "DefaultQuadTreeNode<Object>", "declarator": "child1", "var_name": "child1"}, {"original_string": "private DefaultQuadTreeNode<Object> child2;", "modifier": "private", "type": "DefaultQuadTreeNode<Object>", "declarator": "child2", "var_name": "child2"}, {"original_string": "private DefaultQuadTreeNode<Object> node;", "modifier": "private", "type": "DefaultQuadTreeNode<Object>", "declarator": "node", "var_name": "node"}, {"original_string": "private DefaultQuadTreeNode<Object> newNode;", "modifier": "private", "type": "DefaultQuadTreeNode<Object>", "declarator": "newNode", "var_name": "newNode"}], "file": "core/maths/mathtree/src/test/java/org/arakhne/afc/math/tree/node/QuadTreeNodeTest.java"}, "test_case": {"identifier": "getChildCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getChildCount() {\n\t\tassertEquals(4, this.root.getChildCount());\n\t\tassertEquals(4, this.child1.getChildCount());\n\t\tassertEquals(4, this.child2.getChildCount());\n\t\tassertEquals(4, this.node.getChildCount());\n\t}", "signature": "void getChildCount()", "full_signature": "@Test public void getChildCount()", "class_method_signature": "QuadTreeNodeTest.getChildCount()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getChildCount", "assertEquals", "getChildCount", "assertEquals", "getChildCount", "assertEquals", "getChildCount"]}, "focal_class": {"identifier": "QuadTreeNode", "superclass": "extends AbstractTreeNode<D, N>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 5760376281112333537L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 5760376281112333537L", "var_name": "serialVersionUID"}, {"original_string": "private N nNorthWest;", "modifier": "private", "type": "N", "declarator": "nNorthWest", "var_name": "nNorthWest"}, {"original_string": "private N nNorthEast;", "modifier": "private", "type": "N", "declarator": "nNorthEast", "var_name": "nNorthEast"}, {"original_string": "private N nSouthWest;", "modifier": "private", "type": "N", "declarator": "nSouthWest", "var_name": "nSouthWest"}, {"original_string": "private N nSouthEast;", "modifier": "private", "type": "N", "declarator": "nSouthEast", "var_name": "nSouthEast"}], "methods": [{"identifier": "QuadTreeNode", "parameters": "()", "modifiers": "public", "return": "", "signature": " QuadTreeNode()", "full_signature": "public  QuadTreeNode()", "class_method_signature": "QuadTreeNode.QuadTreeNode()", "testcase": false, "constructor": true}, {"identifier": "QuadTreeNode", "parameters": "(Collection<D> data)", "modifiers": "public", "return": "", "signature": " QuadTreeNode(Collection<D> data)", "full_signature": "public  QuadTreeNode(Collection<D> data)", "class_method_signature": "QuadTreeNode.QuadTreeNode(Collection<D> data)", "testcase": false, "constructor": true}, {"identifier": "QuadTreeNode", "parameters": "(D data)", "modifiers": "public", "return": "", "signature": " QuadTreeNode(D data)", "full_signature": "public  QuadTreeNode(D data)", "class_method_signature": "QuadTreeNode.QuadTreeNode(D data)", "testcase": false, "constructor": true}, {"identifier": "QuadTreeNode", "parameters": "(boolean useLinkedList)", "modifiers": "public", "return": "", "signature": " QuadTreeNode(boolean useLinkedList)", "full_signature": "public  QuadTreeNode(boolean useLinkedList)", "class_method_signature": "QuadTreeNode.QuadTreeNode(boolean useLinkedList)", "testcase": false, "constructor": true}, {"identifier": "QuadTreeNode", "parameters": "(boolean useLinkedList, boolean copyDataCollection, List<D> data)", "modifiers": "public", "return": "", "signature": " QuadTreeNode(boolean useLinkedList, boolean copyDataCollection, List<D> data)", "full_signature": "public  QuadTreeNode(boolean useLinkedList, boolean copyDataCollection, List<D> data)", "class_method_signature": "QuadTreeNode.QuadTreeNode(boolean useLinkedList, boolean copyDataCollection, List<D> data)", "testcase": false, "constructor": true}, {"identifier": "QuadTreeNode", "parameters": "(boolean useLinkedList, D data)", "modifiers": "public", "return": "", "signature": " QuadTreeNode(boolean useLinkedList, D data)", "full_signature": "public  QuadTreeNode(boolean useLinkedList, D data)", "class_method_signature": "QuadTreeNode.QuadTreeNode(boolean useLinkedList, D data)", "testcase": false, "constructor": true}, {"identifier": "getPartitionEnumeration", "parameters": "()", "modifiers": "@Override @Pure public", "return": "Class<? extends Enum<?>>", "signature": "Class<? extends Enum<?>> getPartitionEnumeration()", "full_signature": "@Override @Pure public Class<? extends Enum<?>> getPartitionEnumeration()", "class_method_signature": "QuadTreeNode.getPartitionEnumeration()", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream in)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream in)", "full_signature": "private void readObject(ObjectInputStream in)", "class_method_signature": "QuadTreeNode.readObject(ObjectInputStream in)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "QuadTreeNode.clear()", "testcase": false, "constructor": false}, {"identifier": "getChildCount", "parameters": "()", "modifiers": "@Override @Pure @SuppressWarnings(\"checkstyle:magicnumber\") public", "return": "int", "signature": "int getChildCount()", "full_signature": "@Override @Pure @SuppressWarnings(\"checkstyle:magicnumber\") public int getChildCount()", "class_method_signature": "QuadTreeNode.getChildCount()", "testcase": false, "constructor": false}, {"identifier": "getNotNullChildCount", "parameters": "()", "modifiers": "@Override @Pure public", "return": "int", "signature": "int getNotNullChildCount()", "full_signature": "@Override @Pure public int getNotNullChildCount()", "class_method_signature": "QuadTreeNode.getNotNullChildCount()", "testcase": false, "constructor": false}, {"identifier": "getChildAt", "parameters": "(int index)", "modifiers": "@Override @Pure public", "return": "N", "signature": "N getChildAt(int index)", "full_signature": "@Override @Pure public N getChildAt(int index)", "class_method_signature": "QuadTreeNode.getChildAt(int index)", "testcase": false, "constructor": false}, {"identifier": "getChildAt", "parameters": "(QuadTreeZone zone)", "modifiers": "@Pure public", "return": "N", "signature": "N getChildAt(QuadTreeZone zone)", "full_signature": "@Pure public N getChildAt(QuadTreeZone zone)", "class_method_signature": "QuadTreeNode.getChildAt(QuadTreeZone zone)", "testcase": false, "constructor": false}, {"identifier": "setFirstChild", "parameters": "(N newChild)", "modifiers": "public", "return": "boolean", "signature": "boolean setFirstChild(N newChild)", "full_signature": "public boolean setFirstChild(N newChild)", "class_method_signature": "QuadTreeNode.setFirstChild(N newChild)", "testcase": false, "constructor": false}, {"identifier": "getFirstChild", "parameters": "()", "modifiers": "@Pure public final", "return": "N", "signature": "N getFirstChild()", "full_signature": "@Pure public final N getFirstChild()", "class_method_signature": "QuadTreeNode.getFirstChild()", "testcase": false, "constructor": false}, {"identifier": "setSecondChild", "parameters": "(N newChild)", "modifiers": "public", "return": "boolean", "signature": "boolean setSecondChild(N newChild)", "full_signature": "public boolean setSecondChild(N newChild)", "class_method_signature": "QuadTreeNode.setSecondChild(N newChild)", "testcase": false, "constructor": false}, {"identifier": "getSecondChild", "parameters": "()", "modifiers": "@Pure public final", "return": "N", "signature": "N getSecondChild()", "full_signature": "@Pure public final N getSecondChild()", "class_method_signature": "QuadTreeNode.getSecondChild()", "testcase": false, "constructor": false}, {"identifier": "setThirdChild", "parameters": "(N newChild)", "modifiers": "public", "return": "boolean", "signature": "boolean setThirdChild(N newChild)", "full_signature": "public boolean setThirdChild(N newChild)", "class_method_signature": "QuadTreeNode.setThirdChild(N newChild)", "testcase": false, "constructor": false}, {"identifier": "getThirdChild", "parameters": "()", "modifiers": "@Pure public final", "return": "N", "signature": "N getThirdChild()", "full_signature": "@Pure public final N getThirdChild()", "class_method_signature": "QuadTreeNode.getThirdChild()", "testcase": false, "constructor": false}, {"identifier": "setFourthChild", "parameters": "(N newChild)", "modifiers": "public", "return": "boolean", "signature": "boolean setFourthChild(N newChild)", "full_signature": "public boolean setFourthChild(N newChild)", "class_method_signature": "QuadTreeNode.setFourthChild(N newChild)", "testcase": false, "constructor": false}, {"identifier": "getFourthChild", "parameters": "()", "modifiers": "@Pure public final", "return": "N", "signature": "N getFourthChild()", "full_signature": "@Pure public final N getFourthChild()", "class_method_signature": "QuadTreeNode.getFourthChild()", "testcase": false, "constructor": false}, {"identifier": "isLeaf", "parameters": "()", "modifiers": "@Override @Pure public", "return": "boolean", "signature": "boolean isLeaf()", "full_signature": "@Override @Pure public boolean isLeaf()", "class_method_signature": "QuadTreeNode.isLeaf()", "testcase": false, "constructor": false}, {"identifier": "moveTo", "parameters": "(N newParent, int index)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean moveTo(N newParent, int index)", "full_signature": "@Override public boolean moveTo(N newParent, int index)", "class_method_signature": "QuadTreeNode.moveTo(N newParent, int index)", "testcase": false, "constructor": false}, {"identifier": "moveTo", "parameters": "(N newParent, QuadTreeZone zone)", "modifiers": "public", "return": "boolean", "signature": "boolean moveTo(N newParent, QuadTreeZone zone)", "full_signature": "public boolean moveTo(N newParent, QuadTreeZone zone)", "class_method_signature": "QuadTreeNode.moveTo(N newParent, QuadTreeZone zone)", "testcase": false, "constructor": false}, {"identifier": "setChildAt", "parameters": "(int index, N newChild)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setChildAt(int index, N newChild)", "full_signature": "@Override public boolean setChildAt(int index, N newChild)", "class_method_signature": "QuadTreeNode.setChildAt(int index, N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChildAt", "parameters": "(QuadTreeZone zone, N newChild)", "modifiers": "public", "return": "boolean", "signature": "boolean setChildAt(QuadTreeZone zone, N newChild)", "full_signature": "public boolean setChildAt(QuadTreeZone zone, N newChild)", "class_method_signature": "QuadTreeNode.setChildAt(QuadTreeZone zone, N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChildAtWithoutEventFiring", "parameters": "(int index, N newChild)", "modifiers": "@Override @SuppressWarnings(\"checkstyle:npathcomplexity\") protected", "return": "void", "signature": "void setChildAtWithoutEventFiring(int index, N newChild)", "full_signature": "@Override @SuppressWarnings(\"checkstyle:npathcomplexity\") protected void setChildAtWithoutEventFiring(int index, N newChild)", "class_method_signature": "QuadTreeNode.setChildAtWithoutEventFiring(int index, N newChild)", "testcase": false, "constructor": false}, {"identifier": "removeChild", "parameters": "(N child)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeChild(N child)", "full_signature": "@Override public boolean removeChild(N child)", "class_method_signature": "QuadTreeNode.removeChild(N child)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(N child)", "modifiers": "@Override @Pure public", "return": "int", "signature": "int indexOf(N child)", "full_signature": "@Override @Pure public int indexOf(N child)", "class_method_signature": "QuadTreeNode.indexOf(N child)", "testcase": false, "constructor": false}, {"identifier": "zoneOf", "parameters": "(N child)", "modifiers": "@Pure public", "return": "QuadTreeZone", "signature": "QuadTreeZone zoneOf(N child)", "full_signature": "@Pure public QuadTreeZone zoneOf(N child)", "class_method_signature": "QuadTreeNode.zoneOf(N child)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "(Object[] array)", "modifiers": "@Override public", "return": "void", "signature": "void getChildren(Object[] array)", "full_signature": "@Override public void getChildren(Object[] array)", "class_method_signature": "QuadTreeNode.getChildren(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "getMinHeight", "parameters": "()", "modifiers": "@Override @Pure public", "return": "int", "signature": "int getMinHeight()", "full_signature": "@Override @Pure public int getMinHeight()", "class_method_signature": "QuadTreeNode.getMinHeight()", "testcase": false, "constructor": false}, {"identifier": "getMaxHeight", "parameters": "()", "modifiers": "@Override @Pure public", "return": "int", "signature": "int getMaxHeight()", "full_signature": "@Override @Pure public int getMaxHeight()", "class_method_signature": "QuadTreeNode.getMaxHeight()", "testcase": false, "constructor": false}, {"identifier": "getHeights", "parameters": "(int currentHeight, List<Integer> heights)", "modifiers": "@Override protected", "return": "void", "signature": "void getHeights(int currentHeight, List<Integer> heights)", "full_signature": "@Override protected void getHeights(int currentHeight, List<Integer> heights)", "class_method_signature": "QuadTreeNode.getHeights(int currentHeight, List<Integer> heights)", "testcase": false, "constructor": false}], "file": "core/maths/mathtree/src/main/java/org/arakhne/afc/math/tree/node/QuadTreeNode.java"}, "focal_method": {"identifier": "getChildCount", "parameters": "()", "modifiers": "@Override @Pure @SuppressWarnings(\"checkstyle:magicnumber\") public", "return": "int", "body": "@Override\n\t@Pure\n\t@SuppressWarnings(\"checkstyle:magicnumber\")\n\tpublic int getChildCount() {\n\t\treturn 4;\n\t}", "signature": "int getChildCount()", "full_signature": "@Override @Pure @SuppressWarnings(\"checkstyle:magicnumber\") public int getChildCount()", "class_method_signature": "QuadTreeNode.getChildCount()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}