{"test_class": {"identifier": "MinPatternActionsModelTest", "superclass": "", "interfaces": "", "fields": [], "file": "mubench/src/test/java/edu/iastate/cs/mudetect/mining/MinPatternActionsModelTest.java"}, "test_case": {"identifier": "considersCatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void considersCatch() {\n        APIUsagePattern pattern = somePattern(TestAUGBuilder.buildAUG()\n                .withActionNodes(\"m()\").withDataNode(\"SomeException\")\n                .withEdge(\"m()\", THROW, \"SomeException\"));\n\n        Set<APIUsagePattern> patterns = new MinPatternActionsModel(() -> asSet(pattern), 2).getPatterns();\n\n        assertThat(patterns, is(not(empty())));\n    }", "signature": "void considersCatch()", "full_signature": "@Test public void considersCatch()", "class_method_signature": "MinPatternActionsModelTest.considersCatch()", "testcase": true, "constructor": false, "invocations": ["somePattern", "withEdge", "withDataNode", "withActionNodes", "buildAUG", "getPatterns", "asSet", "assertThat", "is", "not", "empty"]}, "focal_class": {"identifier": "MinPatternActionsModel", "superclass": "", "interfaces": "implements Model", "fields": [{"original_string": "private final Set<APIUsagePattern> patterns;", "modifier": "private final", "type": "Set<APIUsagePattern>", "declarator": "patterns", "var_name": "patterns"}], "methods": [{"identifier": "MinPatternActionsModel", "parameters": "(Model model, int minNumberOfCalls)", "modifiers": "public", "return": "", "signature": " MinPatternActionsModel(Model model, int minNumberOfCalls)", "full_signature": "public  MinPatternActionsModel(Model model, int minNumberOfCalls)", "class_method_signature": "MinPatternActionsModel.MinPatternActionsModel(Model model, int minNumberOfCalls)", "testcase": false, "constructor": true}, {"identifier": "hasEnoughCalls", "parameters": "(APIUsagePattern pattern, int minNumberOfCalls)", "modifiers": "private", "return": "boolean", "signature": "boolean hasEnoughCalls(APIUsagePattern pattern, int minNumberOfCalls)", "full_signature": "private boolean hasEnoughCalls(APIUsagePattern pattern, int minNumberOfCalls)", "class_method_signature": "MinPatternActionsModel.hasEnoughCalls(APIUsagePattern pattern, int minNumberOfCalls)", "testcase": false, "constructor": false}, {"identifier": "isRelevant", "parameters": "(Edge edge)", "modifiers": "private", "return": "boolean", "signature": "boolean isRelevant(Edge edge)", "full_signature": "private boolean isRelevant(Edge edge)", "class_method_signature": "MinPatternActionsModel.isRelevant(Edge edge)", "testcase": false, "constructor": false}, {"identifier": "isMethodCall", "parameters": "(Node node)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMethodCall(Node node)", "full_signature": "private static boolean isMethodCall(Node node)", "class_method_signature": "MinPatternActionsModel.isMethodCall(Node node)", "testcase": false, "constructor": false}, {"identifier": "getPatterns", "parameters": "()", "modifiers": "@Override public", "return": "Set<APIUsagePattern>", "signature": "Set<APIUsagePattern> getPatterns()", "full_signature": "@Override public Set<APIUsagePattern> getPatterns()", "class_method_signature": "MinPatternActionsModel.getPatterns()", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/edu/iastate/cs/mudetect/mining/MinPatternActionsModel.java"}, "focal_method": {"identifier": "getPatterns", "parameters": "()", "modifiers": "@Override public", "return": "Set<APIUsagePattern>", "body": "@Override\n    public Set<APIUsagePattern> getPatterns() {\n        return patterns;\n    }", "signature": "Set<APIUsagePattern> getPatterns()", "full_signature": "@Override public Set<APIUsagePattern> getPatterns()", "class_method_signature": "MinPatternActionsModel.getPatterns()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}