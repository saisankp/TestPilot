{"test_class": {"identifier": "NotificationActionFactoryTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    NotificationActionFactory notificationActionFactory;", "modifier": "@Autowired", "type": "NotificationActionFactory", "declarator": "notificationActionFactory", "var_name": "notificationActionFactory"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/NotificationActionFactoryTest.java"}, "test_case": {"identifier": "testCreateBusinessObjectDataNotificationNoHandler", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateBusinessObjectDataNotificationNoHandler() throws Exception\n    {\n        try\n        {\n            notificationActionFactory.getNotificationActionHandler(\"NO_EXIST\", \"NO_EXIST\");\n            fail(\"Should throw an IllegalArgumentException as no supported handler if defined for this notification event type.\");\n        }\n        catch (IllegalArgumentException ex)\n        {\n            assertTrue(ex.getMessage().startsWith(\"No supported notification handler found for notificationType\"));\n        }\n    }", "signature": "void testCreateBusinessObjectDataNotificationNoHandler()", "full_signature": "@Test public void testCreateBusinessObjectDataNotificationNoHandler()", "class_method_signature": "NotificationActionFactoryTest.testCreateBusinessObjectDataNotificationNoHandler()", "testcase": true, "constructor": false, "invocations": ["getNotificationActionHandler", "fail", "assertTrue", "startsWith", "getMessage"]}, "focal_class": {"identifier": "NotificationActionFactory", "superclass": "", "interfaces": "implements InitializingBean", "fields": [{"original_string": "@Autowired\n    private ApplicationContext applicationContext;", "modifier": "@Autowired\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private Map<String, NotificationActionService> notificationActionHandlerServiceMap;", "modifier": "private", "type": "Map<String, NotificationActionService>", "declarator": "notificationActionHandlerServiceMap", "var_name": "notificationActionHandlerServiceMap"}], "methods": [{"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "NotificationActionFactory.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "getNotificationActionHandler", "parameters": "(String notificationType, String actionType)", "modifiers": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. afterPropertiesSet is called before this method which will ensure notificationActionHandlerServiceMap is \" + \"not null.\") public", "return": "NotificationActionService", "signature": "NotificationActionService getNotificationActionHandler(String notificationType, String actionType)", "full_signature": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. afterPropertiesSet is called before this method which will ensure notificationActionHandlerServiceMap is \" + \"not null.\") public NotificationActionService getNotificationActionHandler(String notificationType, String actionType)", "class_method_signature": "NotificationActionFactory.getNotificationActionHandler(String notificationType, String actionType)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/NotificationActionFactory.java"}, "focal_method": {"identifier": "getNotificationActionHandler", "parameters": "(String notificationType, String actionType)", "modifiers": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. afterPropertiesSet is called before this method which will ensure notificationActionHandlerServiceMap is \" + \"not null.\") public", "return": "NotificationActionService", "body": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\",\n        justification = \"This is a false positive. afterPropertiesSet is called before this method which will ensure notificationActionHandlerServiceMap is \" +\n            \"not null.\")\n    public NotificationActionService getNotificationActionHandler(String notificationType, String actionType)\n    {\n        NotificationActionService actionHandlerService = notificationActionHandlerServiceMap.get(notificationType + \"|\" + actionType);\n        if (actionHandlerService == null)\n        {\n            throw new IllegalArgumentException(\n                \"No supported notification handler found for notificationType \\\"\" + notificationType + \"\\\" and actionType: \\\"\" + actionType + \"\\\".\");\n        }\n        return actionHandlerService;\n    }", "signature": "NotificationActionService getNotificationActionHandler(String notificationType, String actionType)", "full_signature": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. afterPropertiesSet is called before this method which will ensure notificationActionHandlerServiceMap is \" + \"not null.\") public NotificationActionService getNotificationActionHandler(String notificationType, String actionType)", "class_method_signature": "NotificationActionFactory.getNotificationActionHandler(String notificationType, String actionType)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}