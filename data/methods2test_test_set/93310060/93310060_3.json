{"test_class": {"identifier": "SimpleRedisLockTest", "superclass": "", "interfaces": "implements InitializingBean", "fields": [{"original_string": "@Autowired\n  @SuppressWarnings(\"SpringJavaInjectionPointsAutowiringInspection\")\n  private StringRedisTemplate redisTemplate;", "modifier": "@Autowired\n  @SuppressWarnings(\"SpringJavaInjectionPointsAutowiringInspection\")\n  private", "type": "StringRedisTemplate", "declarator": "redisTemplate", "var_name": "redisTemplate"}, {"original_string": "private Lock lock;", "modifier": "private", "type": "Lock", "declarator": "lock", "var_name": "lock"}], "file": "distributed-lock-redis/src/test/java/com/github/alturkovic/lock/redis/impl/SimpleRedisLockTest.java"}, "test_case": {"identifier": "shouldNotRelease", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldNotRelease() {\n    redisTemplate.opsForValue().set(\"locks:1\", \"def\");\n    lock.release(Collections.singletonList(\"1\"), \"locks\", \"abc\");\n    assertThat(redisTemplate.opsForValue().get(\"locks:1\")).isEqualTo(\"def\");\n  }", "signature": "void shouldNotRelease()", "full_signature": "@Test public void shouldNotRelease()", "class_method_signature": "SimpleRedisLockTest.shouldNotRelease()", "testcase": true, "constructor": false, "invocations": ["set", "opsForValue", "release", "singletonList", "isEqualTo", "assertThat", "get", "opsForValue"]}, "focal_class": {"identifier": "SimpleRedisLock", "superclass": "extends AbstractSimpleLock", "interfaces": "", "fields": [{"original_string": "private static final String LOCK_SCRIPT = \"return redis.call('SET', KEYS[1], ARGV[1], 'PX', tonumber(ARGV[2]), 'NX') and true or false\";", "modifier": "private static final", "type": "String", "declarator": "LOCK_SCRIPT = \"return redis.call('SET', KEYS[1], ARGV[1], 'PX', tonumber(ARGV[2]), 'NX') and true or false\"", "var_name": "LOCK_SCRIPT"}, {"original_string": "private static final String LOCK_RELEASE_SCRIPT = \"return redis.call('GET', KEYS[1]) == ARGV[1] and (redis.call('DEL', KEYS[1]) == 1) or false\";", "modifier": "private static final", "type": "String", "declarator": "LOCK_RELEASE_SCRIPT = \"return redis.call('GET', KEYS[1]) == ARGV[1] and (redis.call('DEL', KEYS[1]) == 1) or false\"", "var_name": "LOCK_RELEASE_SCRIPT"}, {"original_string": "private static final String LOCK_REFRESH_SCRIPT = \"if redis.call('GET', KEYS[1]) == ARGV[1] then\\n\" +\n    \"    redis.call('PEXPIRE', KEYS[1], tonumber(ARGV[2]))\\n\" +\n    \"    return true\\n\" +\n    \"end\\n\" +\n    \"return false\";", "modifier": "private static final", "type": "String", "declarator": "LOCK_REFRESH_SCRIPT = \"if redis.call('GET', KEYS[1]) == ARGV[1] then\\n\" +\n    \"    redis.call('PEXPIRE', KEYS[1], tonumber(ARGV[2]))\\n\" +\n    \"    return true\\n\" +\n    \"end\\n\" +\n    \"return false\"", "var_name": "LOCK_REFRESH_SCRIPT"}, {"original_string": "private final RedisScript<Boolean> lockScript = new DefaultRedisScript<>(LOCK_SCRIPT, Boolean.class);", "modifier": "private final", "type": "RedisScript<Boolean>", "declarator": "lockScript = new DefaultRedisScript<>(LOCK_SCRIPT, Boolean.class)", "var_name": "lockScript"}, {"original_string": "private final RedisScript<Boolean> lockReleaseScript = new DefaultRedisScript<>(LOCK_RELEASE_SCRIPT, Boolean.class);", "modifier": "private final", "type": "RedisScript<Boolean>", "declarator": "lockReleaseScript = new DefaultRedisScript<>(LOCK_RELEASE_SCRIPT, Boolean.class)", "var_name": "lockReleaseScript"}, {"original_string": "private final RedisScript<Boolean> lockRefreshScript = new DefaultRedisScript<>(LOCK_REFRESH_SCRIPT, Boolean.class);", "modifier": "private final", "type": "RedisScript<Boolean>", "declarator": "lockRefreshScript = new DefaultRedisScript<>(LOCK_REFRESH_SCRIPT, Boolean.class)", "var_name": "lockRefreshScript"}, {"original_string": "private final StringRedisTemplate stringRedisTemplate;", "modifier": "private final", "type": "StringRedisTemplate", "declarator": "stringRedisTemplate", "var_name": "stringRedisTemplate"}], "methods": [{"identifier": "SimpleRedisLock", "parameters": "(final Supplier<String> tokenSupplier, final StringRedisTemplate stringRedisTemplate)", "modifiers": "public", "return": "", "signature": " SimpleRedisLock(final Supplier<String> tokenSupplier, final StringRedisTemplate stringRedisTemplate)", "full_signature": "public  SimpleRedisLock(final Supplier<String> tokenSupplier, final StringRedisTemplate stringRedisTemplate)", "class_method_signature": "SimpleRedisLock.SimpleRedisLock(final Supplier<String> tokenSupplier, final StringRedisTemplate stringRedisTemplate)", "testcase": false, "constructor": true}, {"identifier": "acquire", "parameters": "(final String key, final String storeId, final String token, final long expiration)", "modifiers": "@Override protected", "return": "String", "signature": "String acquire(final String key, final String storeId, final String token, final long expiration)", "full_signature": "@Override protected String acquire(final String key, final String storeId, final String token, final long expiration)", "class_method_signature": "SimpleRedisLock.acquire(final String key, final String storeId, final String token, final long expiration)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(final String key, final String storeId, final String token)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean release(final String key, final String storeId, final String token)", "full_signature": "@Override protected boolean release(final String key, final String storeId, final String token)", "class_method_signature": "SimpleRedisLock.release(final String key, final String storeId, final String token)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(final String key, final String storeId, final String token, final long expiration)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean refresh(final String key, final String storeId, final String token, final long expiration)", "full_signature": "@Override protected boolean refresh(final String key, final String storeId, final String token, final long expiration)", "class_method_signature": "SimpleRedisLock.refresh(final String key, final String storeId, final String token, final long expiration)", "testcase": false, "constructor": false}], "file": "distributed-lock-redis/src/main/java/com/github/alturkovic/lock/redis/impl/SimpleRedisLock.java"}, "focal_method": {"identifier": "release", "parameters": "(final String key, final String storeId, final String token)", "modifiers": "@Override protected", "return": "boolean", "body": "@Override\n  protected boolean release(final String key, final String storeId, final String token) {\n    final var singletonKeyList = Collections.singletonList(storeId + \":\" + key);\n\n    final var released = stringRedisTemplate.execute(lockReleaseScript, singletonKeyList, token);\n    if (released) {\n      log.debug(\"Release script deleted the record for key {} with token {} in store {}\", key, token, storeId);\n    } else {\n      log.error(\"Release script failed for key {} with token {} in store {}\", key, token, storeId);\n    }\n    return released;\n  }", "signature": "boolean release(final String key, final String storeId, final String token)", "full_signature": "@Override protected boolean release(final String key, final String storeId, final String token)", "class_method_signature": "SimpleRedisLock.release(final String key, final String storeId, final String token)", "testcase": false, "constructor": false, "invocations": ["singletonList", "execute", "debug", "error"]}, "repository": {"repo_id": 93310060, "url": "https://github.com/alturkovic/distributed-lock", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 77, "size": 282, "license": "licensed"}}