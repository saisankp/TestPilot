{"test_class": {"identifier": "LoadBalancerStepDefinitionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private LoadBalancerStepDefinitions loadBalancerStepDefinitions;", "modifier": "@Autowired\n    private", "type": "LoadBalancerStepDefinitions", "declarator": "loadBalancerStepDefinitions", "var_name": "loadBalancerStepDefinitions"}, {"original_string": "@Autowired\n    private EC2RaiderImpl ec2Raider;", "modifier": "@Autowired\n    private", "type": "EC2RaiderImpl", "declarator": "ec2Raider", "var_name": "ec2Raider"}, {"original_string": "@Autowired\n    private LoadBalancerRaiderImpl loadBalancerRaider;", "modifier": "@Autowired\n    private", "type": "LoadBalancerRaiderImpl", "declarator": "loadBalancerRaider", "var_name": "loadBalancerRaider"}, {"original_string": "@Autowired\n    private ApplicationLoadBalancerRaiderImpl applicationLoadBalancerRaider;", "modifier": "@Autowired\n    private", "type": "ApplicationLoadBalancerRaiderImpl", "declarator": "applicationLoadBalancerRaider", "var_name": "applicationLoadBalancerRaider"}, {"original_string": "@Autowired\n    private ExecutionStateCache executionStateCache;", "modifier": "@Autowired\n    private", "type": "ExecutionStateCache", "declarator": "executionStateCache", "var_name": "executionStateCache"}], "file": "cloudraider-core/src/test/java/com/intuit/cloudraider/cucumber/steps/LoadBalancerStepDefinitionsTest.java"}, "test_case": {"identifier": "testGetLoadBalancerNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetLoadBalancerNames() throws Throwable {\n        loadBalancerStepDefinitions.givenLoadBalancerName(\"ELB\", \"elb\");\n        Map<String, String> names = loadBalancerStepDefinitions.getLoadBalancerNames();\n        Assert.assertEquals(1, names.size());\n        Assert.assertEquals(\"ELB\", names.get(\"elb\"));\n    }", "signature": "void testGetLoadBalancerNames()", "full_signature": "@Test public void testGetLoadBalancerNames()", "class_method_signature": "LoadBalancerStepDefinitionsTest.testGetLoadBalancerNames()", "testcase": true, "constructor": false, "invocations": ["givenLoadBalancerName", "getLoadBalancerNames", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "LoadBalancerStepDefinitions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LoadBalancerRaider loadBalancerRaider;", "modifier": "private", "type": "LoadBalancerRaider", "declarator": "loadBalancerRaider", "var_name": "loadBalancerRaider"}, {"original_string": "@Autowired\n    @Qualifier(\"ec2raiderBean\")\n    private EC2Raider ec2Raider;", "modifier": "@Autowired\n    @Qualifier(\"ec2raiderBean\")\n    private", "type": "EC2Raider", "declarator": "ec2Raider", "var_name": "ec2Raider"}, {"original_string": "@Autowired\n    private ExecutionStateCache executionStateCache;", "modifier": "@Autowired\n    private", "type": "ExecutionStateCache", "declarator": "executionStateCache", "var_name": "executionStateCache"}, {"original_string": "Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "@Autowired\n   // @Qualifier(\"credentials\")\n    private Credentials credentials;", "modifier": "@Autowired\n   // @Qualifier(\"credentials\")\n    private", "type": "Credentials", "declarator": "credentials", "var_name": "credentials"}, {"original_string": "@Autowired\n    private ApplicationLoadBalancerRaiderImpl applicationLoadBalancerRaider;", "modifier": "@Autowired\n    private", "type": "ApplicationLoadBalancerRaiderImpl", "declarator": "applicationLoadBalancerRaider", "var_name": "applicationLoadBalancerRaider"}, {"original_string": "@Autowired\n    private LoadBalancerRaiderImpl elasticLoadBalancerRaider;", "modifier": "@Autowired\n    private", "type": "LoadBalancerRaiderImpl", "declarator": "elasticLoadBalancerRaider", "var_name": "elasticLoadBalancerRaider"}], "methods": [{"identifier": "LoadBalancerStepDefinitions", "parameters": "()", "modifiers": "public", "return": "", "signature": " LoadBalancerStepDefinitions()", "full_signature": "public  LoadBalancerStepDefinitions()", "class_method_signature": "LoadBalancerStepDefinitions.LoadBalancerStepDefinitions()", "testcase": false, "constructor": true}, {"identifier": "getExecutionStateCache", "parameters": "()", "modifiers": "public", "return": "ExecutionStateCache", "signature": "ExecutionStateCache getExecutionStateCache()", "full_signature": "public ExecutionStateCache getExecutionStateCache()", "class_method_signature": "LoadBalancerStepDefinitions.getExecutionStateCache()", "testcase": false, "constructor": false}, {"identifier": "setExecutionStateCache", "parameters": "(ExecutionStateCache executionStateCache)", "modifiers": "public", "return": "void", "signature": "void setExecutionStateCache(ExecutionStateCache executionStateCache)", "full_signature": "public void setExecutionStateCache(ExecutionStateCache executionStateCache)", "class_method_signature": "LoadBalancerStepDefinitions.setExecutionStateCache(ExecutionStateCache executionStateCache)", "testcase": false, "constructor": false}, {"identifier": "givenLoadBalancerName", "parameters": "(String loadbalancerType, String loadBalancerName)", "modifiers": "@Given(\"^(ELB|ALB|NLB) \\\"([^\\\"]*)\\\"$\") public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions givenLoadBalancerName(String loadbalancerType, String loadBalancerName)", "full_signature": "@Given(\"^(ELB|ALB|NLB) \\\"([^\\\"]*)\\\"$\") public LoadBalancerStepDefinitions givenLoadBalancerName(String loadbalancerType, String loadBalancerName)", "class_method_signature": "LoadBalancerStepDefinitions.givenLoadBalancerName(String loadbalancerType, String loadBalancerName)", "testcase": false, "constructor": false}, {"identifier": "givenLoadBalancerNameIgnoreExecCache", "parameters": "(String loadbalancerType, String loadBalancerName)", "modifiers": "public", "return": "void", "signature": "void givenLoadBalancerNameIgnoreExecCache(String loadbalancerType, String loadBalancerName)", "full_signature": "public void givenLoadBalancerNameIgnoreExecCache(String loadbalancerType, String loadBalancerName)", "class_method_signature": "LoadBalancerStepDefinitions.givenLoadBalancerNameIgnoreExecCache(String loadbalancerType, String loadBalancerName)", "testcase": false, "constructor": false}, {"identifier": "getLoadBalancerNames", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getLoadBalancerNames()", "full_signature": "public Map<String, String> getLoadBalancerNames()", "class_method_signature": "LoadBalancerStepDefinitions.getLoadBalancerNames()", "testcase": false, "constructor": false}, {"identifier": "detachSecurityGroup", "parameters": "(String securityGroupId)", "modifiers": "@Given(\"^detach security-group \\\"([^\\\"]*)\\\"$\") public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions detachSecurityGroup(String securityGroupId)", "full_signature": "@Given(\"^detach security-group \\\"([^\\\"]*)\\\"$\") public LoadBalancerStepDefinitions detachSecurityGroup(String securityGroupId)", "class_method_signature": "LoadBalancerStepDefinitions.detachSecurityGroup(String securityGroupId)", "testcase": false, "constructor": false}, {"identifier": "attachSecurityGroup", "parameters": "(String securityGroupId)", "modifiers": "@Given(\"^attach security-group \\\"([^\\\"]*)\\\"$\") public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions attachSecurityGroup(String securityGroupId)", "full_signature": "@Given(\"^attach security-group \\\"([^\\\"]*)\\\"$\") public LoadBalancerStepDefinitions attachSecurityGroup(String securityGroupId)", "class_method_signature": "LoadBalancerStepDefinitions.attachSecurityGroup(String securityGroupId)", "testcase": false, "constructor": false}, {"identifier": "detachRandomSecurityGroups", "parameters": "(int num)", "modifiers": "@Given(\"^detach (\\\\d+) security-groups$\") public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions detachRandomSecurityGroups(int num)", "full_signature": "@Given(\"^detach (\\\\d+) security-groups$\") public LoadBalancerStepDefinitions detachRandomSecurityGroups(int num)", "class_method_signature": "LoadBalancerStepDefinitions.detachRandomSecurityGroups(int num)", "testcase": false, "constructor": false}, {"identifier": "attachRandomRemovedSecurityGroups", "parameters": "()", "modifiers": "@Given(\"^attach removed security-groups$\") public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions attachRandomRemovedSecurityGroups()", "full_signature": "@Given(\"^attach removed security-groups$\") public LoadBalancerStepDefinitions attachRandomRemovedSecurityGroups()", "class_method_signature": "LoadBalancerStepDefinitions.attachRandomRemovedSecurityGroups()", "testcase": false, "constructor": false}, {"identifier": "detachSubnet", "parameters": "(String subnetId)", "modifiers": "@Given(\"^detach subnet \\\"([^\\\"]*)\\\"$\") public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions detachSubnet(String subnetId)", "full_signature": "@Given(\"^detach subnet \\\"([^\\\"]*)\\\"$\") public LoadBalancerStepDefinitions detachSubnet(String subnetId)", "class_method_signature": "LoadBalancerStepDefinitions.detachSubnet(String subnetId)", "testcase": false, "constructor": false}, {"identifier": "detachRandomSubnets", "parameters": "(int num)", "modifiers": "@Given(\"^detach (\\\\d+) subnets$\") public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions detachRandomSubnets(int num)", "full_signature": "@Given(\"^detach (\\\\d+) subnets$\") public LoadBalancerStepDefinitions detachRandomSubnets(int num)", "class_method_signature": "LoadBalancerStepDefinitions.detachRandomSubnets(int num)", "testcase": false, "constructor": false}, {"identifier": "attachRandomRemovedSubnets", "parameters": "()", "modifiers": "@Given(\"^attach removed subnets$\") public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions attachRandomRemovedSubnets()", "full_signature": "@Given(\"^attach removed subnets$\") public LoadBalancerStepDefinitions attachRandomRemovedSubnets()", "class_method_signature": "LoadBalancerStepDefinitions.attachRandomRemovedSubnets()", "testcase": false, "constructor": false}, {"identifier": "attachSubnet", "parameters": "(String subnetId)", "modifiers": "@Given(\"^attach subnet \\\"([^\\\"]*)\\\"$\") public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions attachSubnet(String subnetId)", "full_signature": "@Given(\"^attach subnet \\\"([^\\\"]*)\\\"$\") public LoadBalancerStepDefinitions attachSubnet(String subnetId)", "class_method_signature": "LoadBalancerStepDefinitions.attachSubnet(String subnetId)", "testcase": false, "constructor": false}, {"identifier": "assertHealthyHostCount", "parameters": "(int expected)", "modifiers": "@Then(\"^assertEC2 healthy host count = (\\\\d+)$\") public", "return": "void", "signature": "void assertHealthyHostCount(int expected)", "full_signature": "@Then(\"^assertEC2 healthy host count = (\\\\d+)$\") public void assertHealthyHostCount(int expected)", "class_method_signature": "LoadBalancerStepDefinitions.assertHealthyHostCount(int expected)", "testcase": false, "constructor": false}, {"identifier": "assertUntHealthyHostCount", "parameters": "(int expected)", "modifiers": "@Then(\"^assertEC2 unhealthy host count = (\\\\d+)$\") public", "return": "void", "signature": "void assertUntHealthyHostCount(int expected)", "full_signature": "@Then(\"^assertEC2 unhealthy host count = (\\\\d+)$\") public void assertUntHealthyHostCount(int expected)", "class_method_signature": "LoadBalancerStepDefinitions.assertUntHealthyHostCount(int expected)", "testcase": false, "constructor": false}, {"identifier": "corruptLBHealthCheck", "parameters": "()", "modifiers": "@When(\"^LB corrupt HealthChecks$\") public", "return": "void", "signature": "void corruptLBHealthCheck()", "full_signature": "@When(\"^LB corrupt HealthChecks$\") public void corruptLBHealthCheck()", "class_method_signature": "LoadBalancerStepDefinitions.corruptLBHealthCheck()", "testcase": false, "constructor": false}, {"identifier": "unCorruptLBHealthCheck", "parameters": "()", "modifiers": "@Then(\"^LB unCorrupt HealthChecks$\") public", "return": "void", "signature": "void unCorruptLBHealthCheck()", "full_signature": "@Then(\"^LB unCorrupt HealthChecks$\") public void unCorruptLBHealthCheck()", "class_method_signature": "LoadBalancerStepDefinitions.unCorruptLBHealthCheck()", "testcase": false, "constructor": false}, {"identifier": "deRegisterGivenInstance", "parameters": "(String instanceID)", "modifiers": "@When(\"^detach instanceId \\\"([^\\\"]*)\\\" from loadbalancer$\") public", "return": "void", "signature": "void deRegisterGivenInstance(String instanceID)", "full_signature": "@When(\"^detach instanceId \\\"([^\\\"]*)\\\" from loadbalancer$\") public void deRegisterGivenInstance(String instanceID)", "class_method_signature": "LoadBalancerStepDefinitions.deRegisterGivenInstance(String instanceID)", "testcase": false, "constructor": false}, {"identifier": "deRegisterPercentOfInstances", "parameters": "(double percentage)", "modifiers": "public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions deRegisterPercentOfInstances(double percentage)", "full_signature": "public LoadBalancerStepDefinitions deRegisterPercentOfInstances(double percentage)", "class_method_signature": "LoadBalancerStepDefinitions.deRegisterPercentOfInstances(double percentage)", "testcase": false, "constructor": false}, {"identifier": "deRegisterInstances", "parameters": "(int numInstances)", "modifiers": "@When(\"^detach (\\\\d+) instances from loadbalancer$\") public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions deRegisterInstances(int numInstances)", "full_signature": "@When(\"^detach (\\\\d+) instances from loadbalancer$\") public LoadBalancerStepDefinitions deRegisterInstances(int numInstances)", "class_method_signature": "LoadBalancerStepDefinitions.deRegisterInstances(int numInstances)", "testcase": false, "constructor": false}, {"identifier": "deRegisterPercentOfInstances", "parameters": "(int percentage)", "modifiers": "@When(\"^detach (\\\\d+)% instances from loadbalancer$\") public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions deRegisterPercentOfInstances(int percentage)", "full_signature": "@When(\"^detach (\\\\d+)% instances from loadbalancer$\") public LoadBalancerStepDefinitions deRegisterPercentOfInstances(int percentage)", "class_method_signature": "LoadBalancerStepDefinitions.deRegisterPercentOfInstances(int percentage)", "testcase": false, "constructor": false}, {"identifier": "registerInstances", "parameters": "()", "modifiers": "@When(\"^attach unregistered instances$\") public", "return": "LoadBalancerStepDefinitions", "signature": "LoadBalancerStepDefinitions registerInstances()", "full_signature": "@When(\"^attach unregistered instances$\") public LoadBalancerStepDefinitions registerInstances()", "class_method_signature": "LoadBalancerStepDefinitions.registerInstances()", "testcase": false, "constructor": false}, {"identifier": "confirmUnHealthyHostCount", "parameters": "(int expected)", "modifiers": "public", "return": "boolean", "signature": "boolean confirmUnHealthyHostCount(int expected)", "full_signature": "public boolean confirmUnHealthyHostCount(int expected)", "class_method_signature": "LoadBalancerStepDefinitions.confirmUnHealthyHostCount(int expected)", "testcase": false, "constructor": false}, {"identifier": "confirmHealthyHostCount", "parameters": "(int expected)", "modifiers": "public", "return": "boolean", "signature": "boolean confirmHealthyHostCount(int expected)", "full_signature": "public boolean confirmHealthyHostCount(int expected)", "class_method_signature": "LoadBalancerStepDefinitions.confirmHealthyHostCount(int expected)", "testcase": false, "constructor": false}, {"identifier": "getSecurityGroups", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSecurityGroups()", "full_signature": "public List<String> getSecurityGroups()", "class_method_signature": "LoadBalancerStepDefinitions.getSecurityGroups()", "testcase": false, "constructor": false}, {"identifier": "getSubnets", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSubnets()", "full_signature": "public List<String> getSubnets()", "class_method_signature": "LoadBalancerStepDefinitions.getSubnets()", "testcase": false, "constructor": false}, {"identifier": "findAllInServiceInstances", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> findAllInServiceInstances()", "full_signature": "public List<String> findAllInServiceInstances()", "class_method_signature": "LoadBalancerStepDefinitions.findAllInServiceInstances()", "testcase": false, "constructor": false}, {"identifier": "findAllInServiceInstances", "parameters": "(String loadBalancerName)", "modifiers": "public", "return": "List<String>", "signature": "List<String> findAllInServiceInstances(String loadBalancerName)", "full_signature": "public List<String> findAllInServiceInstances(String loadBalancerName)", "class_method_signature": "LoadBalancerStepDefinitions.findAllInServiceInstances(String loadBalancerName)", "testcase": false, "constructor": false}, {"identifier": "findAllOutOfServiceInstances", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> findAllOutOfServiceInstances()", "full_signature": "public List<String> findAllOutOfServiceInstances()", "class_method_signature": "LoadBalancerStepDefinitions.findAllOutOfServiceInstances()", "testcase": false, "constructor": false}], "file": "cloudraider-core/src/main/java/com/intuit/cloudraider/cucumber/steps/LoadBalancerStepDefinitions.java"}, "focal_method": {"identifier": "getLoadBalancerNames", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "body": "public Map<String, String> getLoadBalancerNames() {\n        Map<String, String> map = applicationLoadBalancerRaider.getLoadBalancerNames();\n        map.putAll(loadBalancerRaider.getLoadBalancerNames());\n        return map;\n    }", "signature": "Map<String, String> getLoadBalancerNames()", "full_signature": "public Map<String, String> getLoadBalancerNames()", "class_method_signature": "LoadBalancerStepDefinitions.getLoadBalancerNames()", "testcase": false, "constructor": false, "invocations": ["getLoadBalancerNames", "putAll", "getLoadBalancerNames"]}, "repository": {"repo_id": 189453445, "url": "https://github.com/intuit/CloudRaider", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 16, "size": 730, "license": "licensed"}}