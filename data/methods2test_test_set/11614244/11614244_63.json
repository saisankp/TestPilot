{"test_class": {"identifier": "RAWvernaActivityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RAWvernaActivityConfigurationBean configBean;", "modifier": "private", "type": "RAWvernaActivityConfigurationBean", "declarator": "configBean", "var_name": "configBean"}, {"original_string": "private RAWvernaActivity activity = new RAWvernaActivity();", "modifier": "private", "type": "RAWvernaActivity", "declarator": "activity = new RAWvernaActivity()", "var_name": "activity"}], "file": "photohawk-taverna/photohawk-activity/src/test/java/at/ac/tuwien/photohawk/taverna/RAWvernaActivityTest.java"}, "test_case": {"identifier": "reConfiguredSpecialPorts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reConfiguredSpecialPorts() throws Exception {\n        activity.configure(configBean);\n\n        RAWvernaActivityConfigurationBean specialBean = new RAWvernaActivityConfigurationBean();\n        specialBean.setExampleString(\"specialCase\");\n        specialBean.setExampleUri(URI.create(\"http://localhost:8080/myEndPoint\"));\n        activity.configure(specialBean);\n        // Should now have added the optional ports\n        assertEquals(\"Unexpected inputs\", 2, activity.getInputPorts().size());\n        assertEquals(\"Unexpected outputs\", 3, activity.getOutputPorts().size());\n    }", "signature": "void reConfiguredSpecialPorts()", "full_signature": "@Test public void reConfiguredSpecialPorts()", "class_method_signature": "RAWvernaActivityTest.reConfiguredSpecialPorts()", "testcase": true, "constructor": false, "invocations": ["configure", "setExampleString", "setExampleUri", "create", "configure", "assertEquals", "size", "getInputPorts", "assertEquals", "size", "getOutputPorts"]}, "focal_class": {"identifier": "RAWvernaActivity", "superclass": "extends AbstractAsynchronousActivity<RAWvernaActivityConfigurationBean>", "interfaces": "implements\n    AsynchronousActivity<RAWvernaActivityConfigurationBean>", "fields": [{"original_string": "private static final String IN_FIRST_INPUT = \"firstInput\";", "modifier": "private static final", "type": "String", "declarator": "IN_FIRST_INPUT = \"firstInput\"", "var_name": "IN_FIRST_INPUT"}, {"original_string": "private static final String IN_EXTRA_DATA = \"extraData\";", "modifier": "private static final", "type": "String", "declarator": "IN_EXTRA_DATA = \"extraData\"", "var_name": "IN_EXTRA_DATA"}, {"original_string": "private static final String OUT_MORE_OUTPUTS = \"moreOutputs\";", "modifier": "private static final", "type": "String", "declarator": "OUT_MORE_OUTPUTS = \"moreOutputs\"", "var_name": "OUT_MORE_OUTPUTS"}, {"original_string": "private static final String OUT_SIMPLE_OUTPUT = \"simpleOutput\";", "modifier": "private static final", "type": "String", "declarator": "OUT_SIMPLE_OUTPUT = \"simpleOutput\"", "var_name": "OUT_SIMPLE_OUTPUT"}, {"original_string": "private static final String OUT_REPORT = \"report\";", "modifier": "private static final", "type": "String", "declarator": "OUT_REPORT = \"report\"", "var_name": "OUT_REPORT"}, {"original_string": "private RAWvernaActivityConfigurationBean configBean;", "modifier": "private", "type": "RAWvernaActivityConfigurationBean", "declarator": "configBean", "var_name": "configBean"}], "methods": [{"identifier": "configure", "parameters": "(RAWvernaActivityConfigurationBean configBean)", "modifiers": "@Override public", "return": "void", "signature": "void configure(RAWvernaActivityConfigurationBean configBean)", "full_signature": "@Override public void configure(RAWvernaActivityConfigurationBean configBean)", "class_method_signature": "RAWvernaActivity.configure(RAWvernaActivityConfigurationBean configBean)", "testcase": false, "constructor": false}, {"identifier": "configurePorts", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void configurePorts()", "full_signature": "protected void configurePorts()", "class_method_signature": "RAWvernaActivity.configurePorts()", "testcase": false, "constructor": false}, {"identifier": "executeAsynch", "parameters": "(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void executeAsynch(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void executeAsynch(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback)", "class_method_signature": "RAWvernaActivity.executeAsynch(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "RAWvernaActivityConfigurationBean", "signature": "RAWvernaActivityConfigurationBean getConfiguration()", "full_signature": "@Override public RAWvernaActivityConfigurationBean getConfiguration()", "class_method_signature": "RAWvernaActivity.getConfiguration()", "testcase": false, "constructor": false}], "file": "photohawk-taverna/photohawk-activity/src/main/java/at/ac/tuwien/photohawk/taverna/RAWvernaActivity.java"}, "focal_method": {"identifier": "configure", "parameters": "(RAWvernaActivityConfigurationBean configBean)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void configure(RAWvernaActivityConfigurationBean configBean) throws ActivityConfigurationException {\n\n        // Any pre-config sanity checks\n        if (configBean.getExampleString().equals(\"invalidExample\")) {\n            throw new ActivityConfigurationException(\"Example string can't be 'invalidExample'\");\n        }\n        // Store for getConfiguration(), but you could also make\n        // getConfiguration() return a new bean from other sources\n        this.configBean = configBean;\n\n        // OPTIONAL:\n        // Do any server-side lookups and configuration, like resolving WSDLs\n\n        // myClient = new MyClient(configBean.getExampleUri());\n        // this.service = myClient.getService(configBean.getExampleString());\n\n        // REQUIRED: (Re)create input/output ports depending on configuration\n        configurePorts();\n    }", "signature": "void configure(RAWvernaActivityConfigurationBean configBean)", "full_signature": "@Override public void configure(RAWvernaActivityConfigurationBean configBean)", "class_method_signature": "RAWvernaActivity.configure(RAWvernaActivityConfigurationBean configBean)", "testcase": false, "constructor": false, "invocations": ["equals", "getExampleString", "configurePorts"]}, "repository": {"repo_id": 11614244, "url": "https://github.com/datascience/photohawk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 6, "size": 4209, "license": "licensed"}}