{"test_class": {"identifier": "TestAuditDBHelper", "superclass": "extends  AuditDBUtil", "interfaces": "", "fields": [], "file": "conduit-audit/src/test/java/com/inmobi/conduit/audit/util/TestAuditDBHelper.java"}, "test_case": {"identifier": "testUpdate", "parameters": "()", "modifiers": "@Test(priority = 1) public", "return": "void", "body": "@Test(priority = 1)\n  public void testUpdate() {\n    ClientConfig config = ClientConfig.loadFromClasspath(AuditDBConstants.FEEDER_CONF_FILE);\n    AuditDBHelper helper = new AuditDBHelper(config);\n    String selectStmt = helper.getSelectStmtForUpdation();\n    PreparedStatement selectStatement = null;\n    ResultSet rs = null;\n    try {\n      selectStatement = connection.prepareStatement(selectStmt);\n      rs = getResultSetOfQuery(selectStatement, tuple1);\n      Assert.assertNotNull(rs);\n      Assert.assertFalse(rs.next());\n      Assert.assertTrue(helper.update(tupleSet1));\n      rs = getResultSetOfQuery(selectStatement, tuple1);\n      Assert.assertNotNull(rs);\n      Assert.assertTrue(rs.next());\n      Assert.assertEquals(tuple1.getSent(), rs.getLong(AuditDBConstants.SENT));\n      for (LatencyColumns latencyColumns : LatencyColumns.values()) {\n        Long val = tuple1.getLatencyCountMap().get(latencyColumns);\n        if (val == null)\n          val = 0l;\n        Assert.assertEquals(val, (Long) rs.getLong(latencyColumns.toString()));\n      }\n      Assert.assertEquals(tuple1.getLostCount(),\n          (Long) rs.getLong(LatencyColumns.C600.toString()));\n      Assert.assertTrue(helper.update(tupleSet2));\n      rs = getResultSetOfQuery(selectStatement, tuple1);\n      Assert.assertNotNull(rs);\n      Assert.assertTrue(rs.next());\n      Assert.assertEquals(tuple1.getSent() + tuple2.getSent(),\n          rs.getLong(AuditDBConstants.SENT));\n      for (LatencyColumns latencyColumns : LatencyColumns.values()) {\n        Long val1 = tuple1.getLatencyCountMap().get(latencyColumns);\n        if (val1 == null)\n          val1 = 0l;\n        Long val2 = tuple2.getLatencyCountMap().get(latencyColumns);\n        if (val2 == null)\n          val2 = 0l;\n        Assert.assertEquals(val1 + val2, rs.getLong(latencyColumns\n            .toString()));\n      }\n      Assert.assertEquals(tuple1.getLostCount() + tuple2.getLostCount(),\n          rs.getLong(LatencyColumns.C600.toString()));\n      Assert.assertTrue(helper.update(tupleSet3));\n    } catch (SQLException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        if (rs != null) {\n          rs.close();\n        }\n        if (selectStatement != null) {\n          selectStatement.close();\n        }\n      } catch (SQLException e) {\n        e.printStackTrace();\n      }\n    }\n  }", "signature": "void testUpdate()", "full_signature": "@Test(priority = 1) public void testUpdate()", "class_method_signature": "TestAuditDBHelper.testUpdate()", "testcase": true, "constructor": false, "invocations": ["loadFromClasspath", "getSelectStmtForUpdation", "prepareStatement", "getResultSetOfQuery", "assertNotNull", "assertFalse", "next", "assertTrue", "update", "getResultSetOfQuery", "assertNotNull", "assertTrue", "next", "assertEquals", "getSent", "getLong", "values", "get", "getLatencyCountMap", "assertEquals", "getLong", "toString", "assertEquals", "getLostCount", "getLong", "toString", "assertTrue", "update", "getResultSetOfQuery", "assertNotNull", "assertTrue", "next", "assertEquals", "getSent", "getSent", "getLong", "values", "get", "getLatencyCountMap", "get", "getLatencyCountMap", "assertEquals", "getLong", "toString", "assertEquals", "getLostCount", "getLostCount", "getLong", "toString", "assertTrue", "update", "printStackTrace", "close", "close", "printStackTrace"]}, "focal_class": {"identifier": "AuditDBHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final SimpleDateFormat DAY_CHK_FORMATTER = new SimpleDateFormat\n      (\"yyyy-MM-dd\");", "modifier": "public static final", "type": "SimpleDateFormat", "declarator": "DAY_CHK_FORMATTER = new SimpleDateFormat\n      (\"yyyy-MM-dd\")", "var_name": "DAY_CHK_FORMATTER"}, {"original_string": "public static final SimpleDateFormat TABLE_DATE_FORMATTER = new\n      SimpleDateFormat(\"yyyyMMdd\");", "modifier": "public static final", "type": "SimpleDateFormat", "declarator": "TABLE_DATE_FORMATTER = new\n      SimpleDateFormat(\"yyyyMMdd\")", "var_name": "TABLE_DATE_FORMATTER"}, {"original_string": "private static final Log LOG = LogFactory.getLog(AuditDBHelper.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(AuditDBHelper.class)", "var_name": "LOG"}, {"original_string": "private final ClientConfig config;", "modifier": "private final", "type": "ClientConfig", "declarator": "config", "var_name": "config"}, {"original_string": "final private String tableName;", "modifier": "final private", "type": "String", "declarator": "tableName", "var_name": "tableName"}], "methods": [{"identifier": "getTableName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTableName()", "full_signature": "public String getTableName()", "class_method_signature": "AuditDBHelper.getTableName()", "testcase": false, "constructor": false}, {"identifier": "AuditDBHelper", "parameters": "(ClientConfig config)", "modifiers": "public", "return": "", "signature": " AuditDBHelper(ClientConfig config)", "full_signature": "public  AuditDBHelper(ClientConfig config)", "class_method_signature": "AuditDBHelper.AuditDBHelper(ClientConfig config)", "testcase": false, "constructor": true}, {"identifier": "getConnection", "parameters": "(ClientConfig config)", "modifiers": "public static", "return": "Connection", "signature": "Connection getConnection(ClientConfig config)", "full_signature": "public static Connection getConnection(ClientConfig config)", "class_method_signature": "AuditDBHelper.getConnection(ClientConfig config)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(String driverName, String url,\n      String username, String password)", "modifiers": "public static", "return": "Connection", "signature": "Connection getConnection(String driverName, String url,\n      String username, String password)", "full_signature": "public static Connection getConnection(String driverName, String url,\n      String username, String password)", "class_method_signature": "AuditDBHelper.getConnection(String driverName, String url,\n      String username, String password)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Set<Tuple> tupleSet)", "modifiers": "public", "return": "boolean", "signature": "boolean update(Set<Tuple> tupleSet)", "full_signature": "public boolean update(Set<Tuple> tupleSet)", "class_method_signature": "AuditDBHelper.update(Set<Tuple> tupleSet)", "testcase": false, "constructor": false}, {"identifier": "executeSelectStmtUpdation", "parameters": "(\n      PreparedStatement selectPreparedStatement, Tuple tuple)", "modifiers": "private static", "return": "ResultSet", "signature": "ResultSet executeSelectStmtUpdation(\n      PreparedStatement selectPreparedStatement, Tuple tuple)", "full_signature": "private static ResultSet executeSelectStmtUpdation(\n      PreparedStatement selectPreparedStatement, Tuple tuple)", "class_method_signature": "AuditDBHelper.executeSelectStmtUpdation(\n      PreparedStatement selectPreparedStatement, Tuple tuple)", "testcase": false, "constructor": false}, {"identifier": "getUpdateStmtForUpdation", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getUpdateStmtForUpdation()", "full_signature": "private String getUpdateStmtForUpdation()", "class_method_signature": "AuditDBHelper.getUpdateStmtForUpdation()", "testcase": false, "constructor": false}, {"identifier": "getInsertStmtForUpdation", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getInsertStmtForUpdation()", "full_signature": "private String getInsertStmtForUpdation()", "class_method_signature": "AuditDBHelper.getInsertStmtForUpdation()", "testcase": false, "constructor": false}, {"identifier": "getSelectStmtForUpdation", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSelectStmtForUpdation()", "full_signature": "public String getSelectStmtForUpdation()", "class_method_signature": "AuditDBHelper.getSelectStmtForUpdation()", "testcase": false, "constructor": false}, {"identifier": "addToInsertStatementBatch", "parameters": "(\n      PreparedStatement insertPreparedStatement, Tuple tuple)", "modifiers": "private static", "return": "boolean", "signature": "boolean addToInsertStatementBatch(\n      PreparedStatement insertPreparedStatement, Tuple tuple)", "full_signature": "private static boolean addToInsertStatementBatch(\n      PreparedStatement insertPreparedStatement, Tuple tuple)", "class_method_signature": "AuditDBHelper.addToInsertStatementBatch(\n      PreparedStatement insertPreparedStatement, Tuple tuple)", "testcase": false, "constructor": false}, {"identifier": "addToUpdateStatementBatch", "parameters": "(\n      PreparedStatement updatePreparedStatement, Tuple tuple, ResultSet rs)", "modifiers": "private static", "return": "boolean", "signature": "boolean addToUpdateStatementBatch(\n      PreparedStatement updatePreparedStatement, Tuple tuple, ResultSet rs)", "full_signature": "private static boolean addToUpdateStatementBatch(\n      PreparedStatement updatePreparedStatement, Tuple tuple, ResultSet rs)", "class_method_signature": "AuditDBHelper.addToUpdateStatementBatch(\n      PreparedStatement updatePreparedStatement, Tuple tuple, ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "retrieve", "parameters": "(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy)", "modifiers": "public", "return": "Set<Tuple>", "signature": "Set<Tuple> retrieve(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy)", "full_signature": "public Set<Tuple> retrieve(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy)", "class_method_signature": "AuditDBHelper.retrieve(Date toDate, Date fromDate, Filter filter,\n      GroupBy groupBy)", "testcase": false, "constructor": false}, {"identifier": "createNewTuple", "parameters": "(ResultSet rs, GroupBy groupBy)", "modifiers": "private static", "return": "Tuple", "signature": "Tuple createNewTuple(ResultSet rs, GroupBy groupBy)", "full_signature": "private static Tuple createNewTuple(ResultSet rs, GroupBy groupBy)", "class_method_signature": "AuditDBHelper.createNewTuple(ResultSet rs, GroupBy groupBy)", "testcase": false, "constructor": false}, {"identifier": "getSelectStmtForRetrieve", "parameters": "(Filter filter, GroupBy groupBy)", "modifiers": "public", "return": "String", "signature": "String getSelectStmtForRetrieve(Filter filter, GroupBy groupBy)", "full_signature": "public String getSelectStmtForRetrieve(Filter filter, GroupBy groupBy)", "class_method_signature": "AuditDBHelper.getSelectStmtForRetrieve(Filter filter, GroupBy groupBy)", "testcase": false, "constructor": false}, {"identifier": "logNextException", "parameters": "(String message, SQLException e)", "modifiers": "public static", "return": "void", "signature": "void logNextException(String message, SQLException e)", "full_signature": "public static void logNextException(String message, SQLException e)", "class_method_signature": "AuditDBHelper.logNextException(String message, SQLException e)", "testcase": false, "constructor": false}, {"identifier": "addDaysToCurrentDate", "parameters": "(Integer dayIncrement)", "modifiers": "public static", "return": "Date", "signature": "Date addDaysToCurrentDate(Integer dayIncrement)", "full_signature": "public static Date addDaysToCurrentDate(Integer dayIncrement)", "class_method_signature": "AuditDBHelper.addDaysToCurrentDate(Integer dayIncrement)", "testcase": false, "constructor": false}, {"identifier": "addDaysToGivenDate", "parameters": "(Date date, int increment)", "modifiers": "public static", "return": "Date", "signature": "Date addDaysToGivenDate(Date date, int increment)", "full_signature": "public static Date addDaysToGivenDate(Date date, int increment)", "class_method_signature": "AuditDBHelper.addDaysToGivenDate(Date date, int increment)", "testcase": false, "constructor": false}, {"identifier": "getFirstMilliOfDay", "parameters": "(Date date)", "modifiers": "public static", "return": "Long", "signature": "Long getFirstMilliOfDay(Date date)", "full_signature": "public static Long getFirstMilliOfDay(Date date)", "class_method_signature": "AuditDBHelper.getFirstMilliOfDay(Date date)", "testcase": false, "constructor": false}], "file": "conduit-audit/src/main/java/com/inmobi/conduit/audit/util/AuditDBHelper.java"}, "focal_method": {"identifier": "update", "parameters": "(Set<Tuple> tupleSet)", "modifiers": "public", "return": "boolean", "body": "public boolean update(Set<Tuple> tupleSet) {\n\n    LOG.info(\"Connecting to DB ...\");\n    Connection connection = getConnection(\n        config.getString(AuditDBConstants.JDBC_DRIVER_CLASS_NAME),\n        config.getString(AuditDBConstants.DB_URL),\n        config.getString(AuditDBConstants.DB_USERNAME),\n        config.getString(AuditDBConstants.DB_PASSWORD));\n    if (connection == null) {\n      LOG.error(\"Connection not initialized returning ...\");\n      return false;\n    }\n    LOG.info(\"Connected to DB\");\n\n    boolean isUpdate = false, isInsert = false;\n    ResultSet rs = null;\n    String selectstatement = getSelectStmtForUpdation();\n    String insertStatement = getInsertStmtForUpdation();\n    String updateStatement = getUpdateStmtForUpdation();\n    PreparedStatement selectPreparedStatement = null, insertPreparedStatement = null, updatePreparedStatement = null;\n    try {\n      selectPreparedStatement = connection.prepareStatement(selectstatement);\n      insertPreparedStatement = connection.prepareStatement(insertStatement);\n      updatePreparedStatement = connection.prepareStatement(updateStatement);\n      for (Tuple tuple : tupleSet) {\n        rs = executeSelectStmtUpdation(selectPreparedStatement, tuple);\n        if (rs.next()) {\n          if (!addToUpdateStatementBatch(updatePreparedStatement, tuple, rs))\n            return false;\n          isUpdate = true;\n        } else {\n          if (!addToInsertStatementBatch(insertPreparedStatement, tuple))\n            return false;\n          isInsert = true;\n        }\n      }\n      if (isUpdate)\n        updatePreparedStatement.executeBatch();\n      if (isInsert)\n        insertPreparedStatement.executeBatch();\n      connection.commit();\n    } catch (SQLException e) {\n      logNextException(\"SQLException while updating daily table\", e);\n      return false;\n    } finally {\n      try {\n        if (rs != null) {\n          rs.close();\n        }\n        selectPreparedStatement.close();\n        insertPreparedStatement.close();\n        updatePreparedStatement.close();\n        connection.close();\n      } catch (SQLException e) {\n        logNextException(\"Exception while closing \", e);\n      }\n    }\n    return true;\n  }", "signature": "boolean update(Set<Tuple> tupleSet)", "full_signature": "public boolean update(Set<Tuple> tupleSet)", "class_method_signature": "AuditDBHelper.update(Set<Tuple> tupleSet)", "testcase": false, "constructor": false, "invocations": ["info", "getConnection", "getString", "getString", "getString", "getString", "error", "info", "getSelectStmtForUpdation", "getInsertStmtForUpdation", "getUpdateStmtForUpdation", "prepareStatement", "prepareStatement", "prepareStatement", "executeSelectStmtUpdation", "next", "addToUpdateStatementBatch", "addToInsertStatementBatch", "executeBatch", "executeBatch", "commit", "logNextException", "close", "close", "close", "close", "close", "logNextException"]}, "repository": {"repo_id": 7218024, "url": "https://github.com/InMobi/conduit", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 49400, "license": "licensed"}}