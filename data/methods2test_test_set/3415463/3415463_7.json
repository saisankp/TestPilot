{"test_class": {"identifier": "JcrTemplateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SessionFactory sessionFactory;", "modifier": "private", "type": "SessionFactory", "declarator": "sessionFactory", "var_name": "sessionFactory"}, {"original_string": "private Repository repository;", "modifier": "private", "type": "Repository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private JcrTemplate jcrTemplate;", "modifier": "private", "type": "JcrTemplate", "declarator": "jcrTemplate", "var_name": "jcrTemplate"}], "file": "se-jcr-commons/src/test/java/org/springframework/extensions/jcr/JcrTemplateTest.java"}, "test_case": {"identifier": "testGetNamespacePrefixes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetNamespacePrefixes() throws RepositoryException {\n        String result[] = { \"prefix1\", \"prefix2\" };\n\n        expect(session.getNamespacePrefixes()).andReturn(result);\n        replay(session);\n        replay(sessionFactory);\n\n        assertSame(jcrTemplate.getNamespacePrefixes(), result);\n    }", "signature": "void testGetNamespacePrefixes()", "full_signature": "@Test public void testGetNamespacePrefixes()", "class_method_signature": "JcrTemplateTest.testGetNamespacePrefixes()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "getNamespacePrefixes", "replay", "replay", "assertSame", "getNamespacePrefixes"]}, "focal_class": {"identifier": "JcrTemplate", "superclass": "extends JcrAccessor", "interfaces": "implements JcrOperations", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JcrTemplate.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JcrTemplate.class)", "var_name": "LOG"}, {"original_string": "private boolean allowCreate = false;", "modifier": "private", "type": "boolean", "declarator": "allowCreate = false", "var_name": "allowCreate"}, {"original_string": "private boolean exposeNativeSession = false;", "modifier": "private", "type": "boolean", "declarator": "exposeNativeSession = false", "var_name": "exposeNativeSession"}], "methods": [{"identifier": "JcrTemplate", "parameters": "()", "modifiers": "public", "return": "", "signature": " JcrTemplate()", "full_signature": "public  JcrTemplate()", "class_method_signature": "JcrTemplate.JcrTemplate()", "testcase": false, "constructor": true}, {"identifier": "JcrTemplate", "parameters": "(SessionFactory sessionFactory)", "modifiers": "public", "return": "", "signature": " JcrTemplate(SessionFactory sessionFactory)", "full_signature": "public  JcrTemplate(SessionFactory sessionFactory)", "class_method_signature": "JcrTemplate.JcrTemplate(SessionFactory sessionFactory)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(JcrCallback<T> action, boolean exposeNativeSession)", "modifiers": "@Override public", "return": "T", "signature": "T execute(JcrCallback<T> action, boolean exposeNativeSession)", "full_signature": "@Override public T execute(JcrCallback<T> action, boolean exposeNativeSession)", "class_method_signature": "JcrTemplate.execute(JcrCallback<T> action, boolean exposeNativeSession)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(JcrCallback<T> callback)", "modifiers": "@Override public", "return": "T", "signature": "T execute(JcrCallback<T> callback)", "full_signature": "@Override public T execute(JcrCallback<T> callback)", "class_method_signature": "JcrTemplate.execute(JcrCallback<T> callback)", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "()", "modifiers": "protected", "return": "Session", "signature": "Session getSession()", "full_signature": "protected Session getSession()", "class_method_signature": "JcrTemplate.getSession()", "testcase": false, "constructor": false}, {"identifier": "addLockToken", "parameters": "(final String lock)", "modifiers": "@Override public", "return": "void", "signature": "void addLockToken(final String lock)", "full_signature": "@Override public void addLockToken(final String lock)", "class_method_signature": "JcrTemplate.addLockToken(final String lock)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(final String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getAttribute(final String name)", "full_signature": "@Override public Object getAttribute(final String name)", "class_method_signature": "JcrTemplate.getAttribute(final String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getAttributeNames()", "full_signature": "@Override public String[] getAttributeNames()", "class_method_signature": "JcrTemplate.getAttributeNames()", "testcase": false, "constructor": false}, {"identifier": "getImportContentHandler", "parameters": "(final String parentAbsPath, final int uuidBehavior)", "modifiers": "@Override public", "return": "ContentHandler", "signature": "ContentHandler getImportContentHandler(final String parentAbsPath, final int uuidBehavior)", "full_signature": "@Override public ContentHandler getImportContentHandler(final String parentAbsPath, final int uuidBehavior)", "class_method_signature": "JcrTemplate.getImportContentHandler(final String parentAbsPath, final int uuidBehavior)", "testcase": false, "constructor": false}, {"identifier": "getItem", "parameters": "(final String absPath)", "modifiers": "@Override public", "return": "Item", "signature": "Item getItem(final String absPath)", "full_signature": "@Override public Item getItem(final String absPath)", "class_method_signature": "JcrTemplate.getItem(final String absPath)", "testcase": false, "constructor": false}, {"identifier": "getLockTokens", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getLockTokens()", "full_signature": "@Override public String[] getLockTokens()", "class_method_signature": "JcrTemplate.getLockTokens()", "testcase": false, "constructor": false}, {"identifier": "getNamespacePrefix", "parameters": "(final String uri)", "modifiers": "@Override public", "return": "String", "signature": "String getNamespacePrefix(final String uri)", "full_signature": "@Override public String getNamespacePrefix(final String uri)", "class_method_signature": "JcrTemplate.getNamespacePrefix(final String uri)", "testcase": false, "constructor": false}, {"identifier": "getNamespacePrefixes", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getNamespacePrefixes()", "full_signature": "@Override public String[] getNamespacePrefixes()", "class_method_signature": "JcrTemplate.getNamespacePrefixes()", "testcase": false, "constructor": false}, {"identifier": "getNamespaceURI", "parameters": "(final String prefix)", "modifiers": "@Override public", "return": "String", "signature": "String getNamespaceURI(final String prefix)", "full_signature": "@Override public String getNamespaceURI(final String prefix)", "class_method_signature": "JcrTemplate.getNamespaceURI(final String prefix)", "testcase": false, "constructor": false}, {"identifier": "getNodeByUUID", "parameters": "(final String uuid)", "modifiers": "@Override @Deprecated public", "return": "Node", "signature": "Node getNodeByUUID(final String uuid)", "full_signature": "@Override @Deprecated public Node getNodeByUUID(final String uuid)", "class_method_signature": "JcrTemplate.getNodeByUUID(final String uuid)", "testcase": false, "constructor": false}, {"identifier": "getNodeByIdentifier", "parameters": "(final String id)", "modifiers": "@Override public", "return": "Node", "signature": "Node getNodeByIdentifier(final String id)", "full_signature": "@Override public Node getNodeByIdentifier(final String id)", "class_method_signature": "JcrTemplate.getNodeByIdentifier(final String id)", "testcase": false, "constructor": false}, {"identifier": "getRootNode", "parameters": "()", "modifiers": "@Override public", "return": "Node", "signature": "Node getRootNode()", "full_signature": "@Override public Node getRootNode()", "class_method_signature": "JcrTemplate.getRootNode()", "testcase": false, "constructor": false}, {"identifier": "getUserID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getUserID()", "full_signature": "@Override public String getUserID()", "class_method_signature": "JcrTemplate.getUserID()", "testcase": false, "constructor": false}, {"identifier": "getValueFactory", "parameters": "()", "modifiers": "@Override public", "return": "ValueFactory", "signature": "ValueFactory getValueFactory()", "full_signature": "@Override public ValueFactory getValueFactory()", "class_method_signature": "JcrTemplate.getValueFactory()", "testcase": false, "constructor": false}, {"identifier": "hasPendingChanges", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPendingChanges()", "full_signature": "@Override public boolean hasPendingChanges()", "class_method_signature": "JcrTemplate.hasPendingChanges()", "testcase": false, "constructor": false}, {"identifier": "importXML", "parameters": "(final String parentAbsPath, final InputStream in, final int uuidBehavior)", "modifiers": "@Override public", "return": "void", "signature": "void importXML(final String parentAbsPath, final InputStream in, final int uuidBehavior)", "full_signature": "@Override public void importXML(final String parentAbsPath, final InputStream in, final int uuidBehavior)", "class_method_signature": "JcrTemplate.importXML(final String parentAbsPath, final InputStream in, final int uuidBehavior)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(final boolean keepChanges)", "modifiers": "@Override public", "return": "void", "signature": "void refresh(final boolean keepChanges)", "full_signature": "@Override public void refresh(final boolean keepChanges)", "class_method_signature": "JcrTemplate.refresh(final boolean keepChanges)", "testcase": false, "constructor": false}, {"identifier": "removeLockToken", "parameters": "(final String lt)", "modifiers": "@Override public", "return": "void", "signature": "void removeLockToken(final String lt)", "full_signature": "@Override public void removeLockToken(final String lt)", "class_method_signature": "JcrTemplate.removeLockToken(final String lt)", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(final Node node, final String newName)", "modifiers": "@Override public", "return": "void", "signature": "void rename(final Node node, final String newName)", "full_signature": "@Override public void rename(final Node node, final String newName)", "class_method_signature": "JcrTemplate.rename(final Node node, final String newName)", "testcase": false, "constructor": false}, {"identifier": "setNamespacePrefix", "parameters": "(final String prefix, final String uri)", "modifiers": "@Override public", "return": "void", "signature": "void setNamespacePrefix(final String prefix, final String uri)", "full_signature": "@Override public void setNamespacePrefix(final String prefix, final String uri)", "class_method_signature": "JcrTemplate.setNamespacePrefix(final String prefix, final String uri)", "testcase": false, "constructor": false}, {"identifier": "isLive", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLive()", "full_signature": "@Override public boolean isLive()", "class_method_signature": "JcrTemplate.isLive()", "testcase": false, "constructor": false}, {"identifier": "itemExists", "parameters": "(final String absPath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean itemExists(final String absPath)", "full_signature": "@Override public boolean itemExists(final String absPath)", "class_method_signature": "JcrTemplate.itemExists(final String absPath)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(final String srcAbsPath, final String destAbsPath)", "modifiers": "@Override public", "return": "void", "signature": "void move(final String srcAbsPath, final String destAbsPath)", "full_signature": "@Override public void move(final String srcAbsPath, final String destAbsPath)", "class_method_signature": "JcrTemplate.move(final String srcAbsPath, final String destAbsPath)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void save()", "full_signature": "@Override public void save()", "class_method_signature": "JcrTemplate.save()", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(final Node node)", "modifiers": "@Override public", "return": "String", "signature": "String dump(final Node node)", "full_signature": "@Override public String dump(final Node node)", "class_method_signature": "JcrTemplate.dump(final Node node)", "testcase": false, "constructor": false}, {"identifier": "dumpNode", "parameters": "(Node node)", "modifiers": "protected", "return": "String", "signature": "String dumpNode(Node node)", "full_signature": "protected String dumpNode(Node node)", "class_method_signature": "JcrTemplate.dumpNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(final Node node)", "modifiers": "@Override public", "return": "QueryResult", "signature": "QueryResult query(final Node node)", "full_signature": "@Override public QueryResult query(final Node node)", "class_method_signature": "JcrTemplate.query(final Node node)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(final String statement)", "modifiers": "@Override public", "return": "QueryResult", "signature": "QueryResult query(final String statement)", "full_signature": "@Override public QueryResult query(final String statement)", "class_method_signature": "JcrTemplate.query(final String statement)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(final String statement, final String language)", "modifiers": "@Override public", "return": "QueryResult", "signature": "QueryResult query(final String statement, final String language)", "full_signature": "@Override public QueryResult query(final String statement, final String language)", "class_method_signature": "JcrTemplate.query(final String statement, final String language)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(final List<String> list)", "modifiers": "@Override public", "return": "Map<String, QueryResult>", "signature": "Map<String, QueryResult> query(final List<String> list)", "full_signature": "@Override public Map<String, QueryResult> query(final List<String> list)", "class_method_signature": "JcrTemplate.query(final List<String> list)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(final List<String> list, final String language, final boolean ignoreErrors)", "modifiers": "@Override public", "return": "Map<String, QueryResult>", "signature": "Map<String, QueryResult> query(final List<String> list, final String language, final boolean ignoreErrors)", "full_signature": "@Override public Map<String, QueryResult> query(final List<String> list, final String language, final boolean ignoreErrors)", "class_method_signature": "JcrTemplate.query(final List<String> list, final String language, final boolean ignoreErrors)", "testcase": false, "constructor": false}, {"identifier": "isAllowCreate", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllowCreate()", "full_signature": "public boolean isAllowCreate()", "class_method_signature": "JcrTemplate.isAllowCreate()", "testcase": false, "constructor": false}, {"identifier": "setAllowCreate", "parameters": "(boolean allowCreate)", "modifiers": "public", "return": "void", "signature": "void setAllowCreate(boolean allowCreate)", "full_signature": "public void setAllowCreate(boolean allowCreate)", "class_method_signature": "JcrTemplate.setAllowCreate(boolean allowCreate)", "testcase": false, "constructor": false}, {"identifier": "createSessionProxy", "parameters": "(Session session)", "modifiers": "protected", "return": "Session", "signature": "Session createSessionProxy(Session session)", "full_signature": "protected Session createSessionProxy(Session session)", "class_method_signature": "JcrTemplate.createSessionProxy(Session session)", "testcase": false, "constructor": false}, {"identifier": "isVersionable", "parameters": "(Node node)", "modifiers": "protected", "return": "boolean", "signature": "boolean isVersionable(Node node)", "full_signature": "protected boolean isVersionable(Node node)", "class_method_signature": "JcrTemplate.isVersionable(Node node)", "testcase": false, "constructor": false}, {"identifier": "isExposeNativeSession", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExposeNativeSession()", "full_signature": "public boolean isExposeNativeSession()", "class_method_signature": "JcrTemplate.isExposeNativeSession()", "testcase": false, "constructor": false}, {"identifier": "setExposeNativeSession", "parameters": "(boolean exposeNativeSession)", "modifiers": "public", "return": "void", "signature": "void setExposeNativeSession(boolean exposeNativeSession)", "full_signature": "public void setExposeNativeSession(boolean exposeNativeSession)", "class_method_signature": "JcrTemplate.setExposeNativeSession(boolean exposeNativeSession)", "testcase": false, "constructor": false}], "file": "se-jcr-commons/src/main/java/org/springframework/extensions/jcr/JcrTemplate.java"}, "focal_method": {"identifier": "getNamespacePrefixes", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "body": "@Override\n    public String[] getNamespacePrefixes() {\n        return execute(new JcrCallback<String[]>() {\n            /**\n             * @see JcrCallback#doInJcr(javax.jcr.Session)\n             */\n            @Override\n            public String[] doInJcr(Session session) throws RepositoryException {\n                return session.getNamespacePrefixes();\n            }\n        }, true);\n    }", "signature": "String[] getNamespacePrefixes()", "full_signature": "@Override public String[] getNamespacePrefixes()", "class_method_signature": "JcrTemplate.getNamespacePrefixes()", "testcase": false, "constructor": false, "invocations": ["execute", "getNamespacePrefixes"]}, "repository": {"repo_id": 3415463, "url": "https://github.com/jbellmann/jcr-springextension", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 14, "size": 634, "license": "licensed"}}