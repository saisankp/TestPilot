{"test_class": {"identifier": "ExecuteDMNCommandTest", "superclass": "", "interfaces": "", "fields": [], "file": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/fluent/ExecuteDMNCommandTest.java"}, "test_case": {"identifier": "execute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void execute() {\n        RegistryContext registryContext = new ContextImpl();\n        ExecuteDMNCommand executeDMNCommand = new ExecuteDMNCommand();\n\n        assertThatThrownBy(() -> executeDMNCommand.execute(registryContext))\n                .isInstanceOf(IllegalStateException.class)\n                .hasMessage(\"No DMN active model defined\");\n\n        registryContext.register(DMNModel.class, new DMNModelImpl(null));\n\n        assertThatThrownBy(() -> executeDMNCommand.execute(registryContext))\n                .isInstanceOf(IllegalStateException.class)\n                .hasMessage(\"No DMNRuntime available\");\n\n        DMNContext dmnContext = DMNFactory.newContext();\n        dmnContext.set(\"example\", 10);\n\n        registryContext.register(DMNRuntime.class, new DMNRuntimeImpl(new VoidDMNRuntimeKB()));\n        registryContext.register(DMNContext.class, dmnContext);\n\n        DMNResult result = executeDMNCommand.execute(registryContext);\n        assertNotNull(result);\n        DMNContext newDmnContext = registryContext.lookup(DMNContext.class);\n        assertEquals(1, dmnContext.getAll().size());\n        assertEquals(0, newDmnContext.getAll().size());\n    }", "signature": "void execute()", "full_signature": "@Test public void execute()", "class_method_signature": "ExecuteDMNCommandTest.execute()", "testcase": true, "constructor": false, "invocations": ["hasMessage", "isInstanceOf", "assertThatThrownBy", "execute", "register", "hasMessage", "isInstanceOf", "assertThatThrownBy", "execute", "newContext", "set", "register", "register", "execute", "assertNotNull", "lookup", "assertEquals", "size", "getAll", "assertEquals", "size", "getAll"]}, "focal_class": {"identifier": "ExecuteDMNCommand", "superclass": "", "interfaces": "implements ExecutableCommand<DMNResult>", "fields": [], "methods": [{"identifier": "execute", "parameters": "(Context context)", "modifiers": "@Override public", "return": "DMNResult", "signature": "DMNResult execute(Context context)", "full_signature": "@Override public DMNResult execute(Context context)", "class_method_signature": "ExecuteDMNCommand.execute(Context context)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/fluent/ExecuteDMNCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(Context context)", "modifiers": "@Override public", "return": "DMNResult", "body": "@Override\n    public DMNResult execute(Context context) {\n        RegistryContext registryContext = (RegistryContext) context;\n        DMNModel activeModel = registryContext.lookup(DMNModel.class);\n        DMNRuntime dmnRuntime = registryContext.lookup(DMNRuntime.class);\n        DMNContext dmnContext = registryContext.lookup(DMNContext.class);\n        if (activeModel == null) {\n            throw new IllegalStateException(\"No DMN active model defined\");\n        }\n        if (dmnRuntime == null) {\n            throw new IllegalStateException(\"No DMNRuntime available\");\n        }\n        if (dmnContext == null) {\n            dmnContext = dmnRuntime.newContext();\n        }\n        DMNResult dmnResult = dmnRuntime.evaluateAll(activeModel, dmnContext);\n        registryContext.register(DMNResult.class, dmnResult);\n\n        // reset context\n        registryContext.register(DMNContext.class, dmnRuntime.newContext());\n\n        return dmnResult;\n    }", "signature": "DMNResult execute(Context context)", "full_signature": "@Override public DMNResult execute(Context context)", "class_method_signature": "ExecuteDMNCommand.execute(Context context)", "testcase": false, "constructor": false, "invocations": ["lookup", "lookup", "lookup", "newContext", "evaluateAll", "register", "register", "newContext"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}