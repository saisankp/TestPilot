{"test_class": {"identifier": "TarGzArchiverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder tempFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "tempFolder = new TemporaryFolder()", "var_name": "tempFolder"}, {"original_string": "private TarGzArchiver archiver;", "modifier": "private", "type": "TarGzArchiver", "declarator": "archiver", "var_name": "archiver"}, {"original_string": "private File tarGzArchive;", "modifier": "private", "type": "File", "declarator": "tarGzArchive", "var_name": "tarGzArchive"}, {"original_string": "private File archiveRoot;", "modifier": "private", "type": "File", "declarator": "archiveRoot", "var_name": "archiveRoot"}, {"original_string": "private File testPermissionsFile;", "modifier": "private", "type": "File", "declarator": "testPermissionsFile", "var_name": "testPermissionsFile"}, {"original_string": "private File testOwnerAndGroupFile;", "modifier": "private", "type": "File", "declarator": "testOwnerAndGroupFile", "var_name": "testOwnerAndGroupFile"}], "file": "tycho-p2/tycho-p2-director-plugin/src/test/java/org/eclipse/tycho/plugins/tar/TarGzArchiverTest.java"}, "test_case": {"identifier": "testCreateArchiveEntriesPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateArchiveEntriesPresent() throws Exception {\n        archiver.createArchive();\n        Map<String, TarArchiveEntry> tarEntries = getTarEntries();\n        assertEquals(7, tarEntries.size());\n        assertThat(tarEntries.keySet(), hasItems(\"dir2/\", \"dir2/test.txt\", \"dir2/dir3/\", \"dir2/dir3/test.sh\",\n                \"dir2/testPermissions\", \"dir2/testLastModified\", \"dir2/testOwnerAndGroupName\"));\n        TarArchiveEntry dirArchiveEntry = tarEntries.get(\"dir2/\");\n        assertTrue(dirArchiveEntry.isDirectory());\n        TarArchiveEntry textFileEntry = tarEntries.get(\"dir2/test.txt\");\n        assertTrue(textFileEntry.isFile());\n        byte[] content = getTarEntry(\"dir2/test.txt\");\n        assertEquals(\"hello\", new String(content, StandardCharsets.UTF_8));\n    }", "signature": "void testCreateArchiveEntriesPresent()", "full_signature": "@Test public void testCreateArchiveEntriesPresent()", "class_method_signature": "TarGzArchiverTest.testCreateArchiveEntriesPresent()", "testcase": true, "constructor": false, "invocations": ["createArchive", "getTarEntries", "assertEquals", "size", "assertThat", "keySet", "hasItems", "get", "assertTrue", "isDirectory", "get", "assertTrue", "isFile", "getTarEntry", "assertEquals"]}, "focal_class": {"identifier": "TarGzArchiver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File destFile;", "modifier": "private", "type": "File", "declarator": "destFile", "var_name": "destFile"}, {"original_string": "private List<File> sourceDirs = new ArrayList<>();", "modifier": "private", "type": "List<File>", "declarator": "sourceDirs = new ArrayList<>()", "var_name": "sourceDirs"}, {"original_string": "private Log log = new SystemStreamLog();", "modifier": "private", "type": "Log", "declarator": "log = new SystemStreamLog()", "var_name": "log"}], "methods": [{"identifier": "TarGzArchiver", "parameters": "()", "modifiers": "public", "return": "", "signature": " TarGzArchiver()", "full_signature": "public  TarGzArchiver()", "class_method_signature": "TarGzArchiver.TarGzArchiver()", "testcase": false, "constructor": true}, {"identifier": "setLog", "parameters": "(Log log)", "modifiers": "public", "return": "void", "signature": "void setLog(Log log)", "full_signature": "public void setLog(Log log)", "class_method_signature": "TarGzArchiver.setLog(Log log)", "testcase": false, "constructor": false}, {"identifier": "setDestFile", "parameters": "(File destFile)", "modifiers": "public", "return": "void", "signature": "void setDestFile(File destFile)", "full_signature": "public void setDestFile(File destFile)", "class_method_signature": "TarGzArchiver.setDestFile(File destFile)", "testcase": false, "constructor": false}, {"identifier": "addDirectory", "parameters": "(File directory)", "modifiers": "public", "return": "void", "signature": "void addDirectory(File directory)", "full_signature": "public void addDirectory(File directory)", "class_method_signature": "TarGzArchiver.addDirectory(File directory)", "testcase": false, "constructor": false}, {"identifier": "createArchive", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void createArchive()", "full_signature": "public void createArchive()", "class_method_signature": "TarGzArchiver.createArchive()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validate()", "full_signature": "private void validate()", "class_method_signature": "TarGzArchiver.validate()", "testcase": false, "constructor": false}, {"identifier": "addToTarRecursively", "parameters": "(File tarRootDir, File source, TarArchiveOutputStream tarStream)", "modifiers": "private", "return": "void", "signature": "void addToTarRecursively(File tarRootDir, File source, TarArchiveOutputStream tarStream)", "full_signature": "private void addToTarRecursively(File tarRootDir, File source, TarArchiveOutputStream tarStream)", "class_method_signature": "TarGzArchiver.addToTarRecursively(File tarRootDir, File source, TarArchiveOutputStream tarStream)", "testcase": false, "constructor": false}, {"identifier": "createTarEntry", "parameters": "(File tarRootDir, File source)", "modifiers": "private", "return": "TarArchiveEntry", "signature": "TarArchiveEntry createTarEntry(File tarRootDir, File source)", "full_signature": "private TarArchiveEntry createTarEntry(File tarRootDir, File source)", "class_method_signature": "TarGzArchiver.createTarEntry(File tarRootDir, File source)", "testcase": false, "constructor": false}, {"identifier": "slashify", "parameters": "(Path path)", "modifiers": "private static", "return": "String", "signature": "String slashify(Path path)", "full_signature": "private static String slashify(Path path)", "class_method_signature": "TarGzArchiver.slashify(Path path)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "(File source)", "modifiers": "private", "return": "PosixFileAttributes", "signature": "PosixFileAttributes getAttributes(File source)", "full_signature": "private PosixFileAttributes getAttributes(File source)", "class_method_signature": "TarGzArchiver.getAttributes(File source)", "testcase": false, "constructor": false}, {"identifier": "copyFileContentToTarStream", "parameters": "(File source, TarArchiveOutputStream tarStream)", "modifiers": "private static", "return": "void", "signature": "void copyFileContentToTarStream(File source, TarArchiveOutputStream tarStream)", "full_signature": "private static void copyFileContentToTarStream(File source, TarArchiveOutputStream tarStream)", "class_method_signature": "TarGzArchiver.copyFileContentToTarStream(File source, TarArchiveOutputStream tarStream)", "testcase": false, "constructor": false}, {"identifier": "resolvesBelow", "parameters": "(File source, File baseDir)", "modifiers": "private", "return": "boolean", "signature": "boolean resolvesBelow(File source, File baseDir)", "full_signature": "private boolean resolvesBelow(File source, File baseDir)", "class_method_signature": "TarGzArchiver.resolvesBelow(File source, File baseDir)", "testcase": false, "constructor": false}, {"identifier": "getRelativeSymLinkTarget", "parameters": "(File source, File baseDir)", "modifiers": "private", "return": "Path", "signature": "Path getRelativeSymLinkTarget(File source, File baseDir)", "full_signature": "private Path getRelativeSymLinkTarget(File source, File baseDir)", "class_method_signature": "TarGzArchiver.getRelativeSymLinkTarget(File source, File baseDir)", "testcase": false, "constructor": false}, {"identifier": "isSymbolicLink", "parameters": "(File file)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSymbolicLink(File file)", "full_signature": "private static boolean isSymbolicLink(File file)", "class_method_signature": "TarGzArchiver.isSymbolicLink(File file)", "testcase": false, "constructor": false}], "file": "tycho-p2/tycho-p2-director-plugin/src/main/java/org/eclipse/tycho/plugins/tar/TarGzArchiver.java"}, "focal_method": {"identifier": "createArchive", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void createArchive() throws IOException {\n        validate();\n        log.info(\"Building tar: \" + destFile);\n        TarArchiveOutputStream tarStream = null;\n        try {\n            destFile.getAbsoluteFile().getParentFile().mkdirs();\n            GzipCompressorOutputStream gzipStream = new GzipCompressorOutputStream(\n                    new BufferedOutputStream(new FileOutputStream(destFile)));\n            tarStream = new TarArchiveOutputStream(gzipStream, \"UTF-8\");\n            // allow \"long\" file paths (> 100 chars)\n            tarStream.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n            for (File sourceDir : sourceDirs) {\n                for (File child : sourceDir.listFiles()) {\n                    addToTarRecursively(sourceDir, child, tarStream);\n                }\n            }\n        } finally {\n            if (tarStream != null) {\n                tarStream.close();\n            }\n        }\n    }", "signature": "void createArchive()", "full_signature": "public void createArchive()", "class_method_signature": "TarGzArchiver.createArchive()", "testcase": false, "constructor": false, "invocations": ["validate", "info", "mkdirs", "getParentFile", "getAbsoluteFile", "setLongFileMode", "listFiles", "addToTarRecursively", "close"]}, "repository": {"repo_id": 2666698, "url": "https://github.com/eclipse/tycho", "language": "Java", "is_fork": false, "fork_count": 67, "stargazer_count": 61, "size": 22429, "license": "licensed"}}