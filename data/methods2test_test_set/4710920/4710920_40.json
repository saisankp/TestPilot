{"test_class": {"identifier": "HelpTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/impl/HelpTest.java"}, "test_case": {"identifier": "testMainHelp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMainHelp() throws Exception {\n        Help help = new Help();\n        String output = help.execute(Mockito.mock(CommandContext.class), null);\n        assertThat(output, containsString(\"greeting\"));\n        assertThat(output, containsString(\"help\"));\n        assertThat(output, containsString(\"ls\"));\n        assertThat(output, containsString(\"online\"));\n        assertThat(output, containsString(\"offline\"));\n        assertThat(output, containsString(\"quit\"));\n    }", "signature": "void testMainHelp()", "full_signature": "@Test public void testMainHelp()", "class_method_signature": "HelpTest.testMainHelp()", "testcase": true, "constructor": false, "invocations": ["execute", "mock", "assertThat", "containsString", "assertThat", "containsString", "assertThat", "containsString", "assertThat", "containsString", "assertThat", "containsString", "assertThat", "containsString"]}, "focal_class": {"identifier": "Help", "superclass": "", "interfaces": "implements BaseCommand", "fields": [], "methods": [{"identifier": "execute", "parameters": "(CommandContext commandContext, String[] args)", "modifiers": "@Override public", "return": "String", "signature": "String execute(CommandContext commandContext, String[] args)", "full_signature": "@Override public String execute(CommandContext commandContext, String[] args)", "class_method_signature": "Help.execute(CommandContext commandContext, String[] args)", "testcase": false, "constructor": false}, {"identifier": "commandHelp", "parameters": "(String commandName)", "modifiers": "private", "return": "String", "signature": "String commandHelp(String commandName)", "full_signature": "private String commandHelp(String commandName)", "class_method_signature": "Help.commandHelp(String commandName)", "testcase": false, "constructor": false}, {"identifier": "drawExample", "parameters": "(Cmd cmd)", "modifiers": "private", "return": "String", "signature": "String drawExample(Cmd cmd)", "full_signature": "private String drawExample(Cmd cmd)", "class_method_signature": "Help.drawExample(Cmd cmd)", "testcase": false, "constructor": false}, {"identifier": "mainHelp", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String mainHelp()", "full_signature": "private String mainHelp()", "class_method_signature": "Help.mainHelp()", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/impl/Help.java"}, "focal_method": {"identifier": "mainHelp", "parameters": "()", "modifiers": "private", "return": "String", "body": "private String mainHelp() {\n\n        final TTable tTable = new TTable(new TTable.ColumnDefine[]{\n                new TTable.ColumnDefine(TTable.Align.RIGHT),\n                new TTable.ColumnDefine(80, false, TTable.Align.LEFT)\n        });\n\n        final List<Class<?>> classes = CommandHelper.getAllCommandClass();\n\n        Collections.sort(classes, new Comparator<Class<?>>() {\n\n            @Override\n            public int compare(Class<?> o1, Class<?> o2) {\n                final Integer o1s = o1.getAnnotation(Cmd.class).sort();\n                final Integer o2s = o2.getAnnotation(Cmd.class).sort();\n                return o1s.compareTo(o2s);\n            }\n\n        });\n        for (Class<?> clazz : classes) {\n\n            if (clazz.isAnnotationPresent(Cmd.class)) {\n                final Cmd cmd = clazz.getAnnotation(Cmd.class);\n                tTable.addRow(cmd.name(), cmd.summary());\n            }\n\n        }\n\n        return tTable.padding(1).rendering();\n    }", "signature": "String mainHelp()", "full_signature": "private String mainHelp()", "class_method_signature": "Help.mainHelp()", "testcase": false, "constructor": false, "invocations": ["getAllCommandClass", "sort", "sort", "getAnnotation", "sort", "getAnnotation", "compareTo", "isAnnotationPresent", "getAnnotation", "addRow", "name", "summary", "rendering", "padding"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}