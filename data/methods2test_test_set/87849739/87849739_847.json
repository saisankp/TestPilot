{"test_class": {"identifier": "PipelineFunctionSubstringAfterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final PipelineElement KNOWN_INPUT = PipelineElement.resolved(\"org.eclipse.ditto:any.thing.or.else\");", "modifier": "private static final", "type": "PipelineElement", "declarator": "KNOWN_INPUT = PipelineElement.resolved(\"org.eclipse.ditto:any.thing.or.else\")", "var_name": "KNOWN_INPUT"}, {"original_string": "private static final PipelineElement EMPTY_INPUT = PipelineElement.unresolved();", "modifier": "private static final", "type": "PipelineElement", "declarator": "EMPTY_INPUT = PipelineElement.unresolved()", "var_name": "EMPTY_INPUT"}, {"original_string": "private static final PipelineElement UNMATCHING_INPUT = PipelineElement.resolved(\"any.thing.without.colon\");", "modifier": "private static final", "type": "PipelineElement", "declarator": "UNMATCHING_INPUT = PipelineElement.resolved(\"any.thing.without.colon\")", "var_name": "UNMATCHING_INPUT"}, {"original_string": "private static final String SUBSTRING_AT = \":\";", "modifier": "private static final", "type": "String", "declarator": "SUBSTRING_AT = \":\"", "var_name": "SUBSTRING_AT"}, {"original_string": "private static final String EXPECTED_RESULT = \"any.thing.or.else\";", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_RESULT = \"any.thing.or.else\"", "var_name": "EXPECTED_RESULT"}, {"original_string": "private final PipelineFunctionSubstringAfter function = new PipelineFunctionSubstringAfter();", "modifier": "private final", "type": "PipelineFunctionSubstringAfter", "declarator": "function = new PipelineFunctionSubstringAfter()", "var_name": "function"}, {"original_string": "@Mock\n    private ExpressionResolver expressionResolver;", "modifier": "@Mock\n    private", "type": "ExpressionResolver", "declarator": "expressionResolver", "var_name": "expressionResolver"}], "file": "model/placeholders/src/test/java/org/eclipse/ditto/model/placeholders/PipelineFunctionSubstringAfterTest.java"}, "test_case": {"identifier": "apply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void apply() {\n        assertThat(function.apply(KNOWN_INPUT, \"('\" + SUBSTRING_AT + \"')\", expressionResolver)).contains(EXPECTED_RESULT);\n    }", "signature": "void apply()", "full_signature": "@Test public void apply()", "class_method_signature": "PipelineFunctionSubstringAfterTest.apply()", "testcase": true, "constructor": false, "invocations": ["contains", "assertThat", "apply"]}, "focal_class": {"identifier": "PipelineFunctionSubstringAfter", "superclass": "", "interfaces": "implements PipelineFunction", "fields": [{"original_string": "private static final String FUNCTION_NAME = \"substring-after\";", "modifier": "private static final", "type": "String", "declarator": "FUNCTION_NAME = \"substring-after\"", "var_name": "FUNCTION_NAME"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "PipelineFunctionSubstringAfter.getName()", "testcase": false, "constructor": false}, {"identifier": "getSignature", "parameters": "()", "modifiers": "@Override public", "return": "Signature", "signature": "Signature getSignature()", "full_signature": "@Override public Signature getSignature()", "class_method_signature": "PipelineFunctionSubstringAfter.getSignature()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "modifiers": "@Override public", "return": "PipelineElement", "signature": "PipelineElement apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "full_signature": "@Override public PipelineElement apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "class_method_signature": "PipelineFunctionSubstringAfter.apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false}, {"identifier": "parseAndResolve", "parameters": "(final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "modifiers": "private", "return": "String", "signature": "String parseAndResolve(final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "full_signature": "private String parseAndResolve(final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "class_method_signature": "PipelineFunctionSubstringAfter.parseAndResolve(final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false}], "file": "model/placeholders/src/main/java/org/eclipse/ditto/model/placeholders/PipelineFunctionSubstringAfter.java"}, "focal_method": {"identifier": "apply", "parameters": "(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "modifiers": "@Override public", "return": "PipelineElement", "body": "@Override\n    public PipelineElement apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver) {\n\n        final String splitValue = parseAndResolve(paramsIncludingParentheses, expressionResolver);\n\n        return value.onResolved(previousStage -> {\n            if (previousStage.contains(splitValue)) {\n                return PipelineElement.resolved(previousStage.substring(previousStage.indexOf(splitValue) + 1));\n            } else {\n                return PipelineElement.unresolved();\n            }\n        });\n    }", "signature": "PipelineElement apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "full_signature": "@Override public PipelineElement apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "class_method_signature": "PipelineFunctionSubstringAfter.apply(final PipelineElement value, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false, "invocations": ["parseAndResolve", "onResolved", "contains", "resolved", "substring", "indexOf", "unresolved"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}