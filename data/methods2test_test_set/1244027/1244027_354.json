{"test_class": {"identifier": "ReflectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String string;", "modifier": "private", "type": "String", "declarator": "string", "var_name": "string"}, {"original_string": "private List<String> stringList;", "modifier": "private", "type": "List<String>", "declarator": "stringList", "var_name": "stringList"}, {"original_string": "private Reflection stringReflection;", "modifier": "private", "type": "Reflection", "declarator": "stringReflection", "var_name": "stringReflection"}, {"original_string": "private Reflection stringListReflection;", "modifier": "private", "type": "Reflection", "declarator": "stringListReflection", "var_name": "stringListReflection"}], "file": "modeshape-common/src/test/java/org/modeshape/common/util/ReflectionTest.java"}, "test_case": {"identifier": "shouldGetClassNameWithPrimitive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGetClassNameWithPrimitive() {\n        assertThat(Reflection.getClassName(Integer.TYPE), is(\"int\"));\n        assertThat(Reflection.getClassName(Boolean.TYPE), is(\"boolean\"));\n        assertThat(Reflection.getClassName(Long.TYPE), is(\"long\"));\n        assertThat(Reflection.getClassName(Short.TYPE), is(\"short\"));\n        assertThat(Reflection.getClassName(Float.TYPE), is(\"float\"));\n        assertThat(Reflection.getClassName(Double.TYPE), is(\"double\"));\n        assertThat(Reflection.getClassName(Character.TYPE), is(\"char\"));\n        assertThat(Reflection.getClassName(Byte.TYPE), is(\"byte\"));\n        assertThat(Reflection.getClassName(Void.TYPE), is(\"void\"));\n    }", "signature": "void shouldGetClassNameWithPrimitive()", "full_signature": "@Test public void shouldGetClassNameWithPrimitive()", "class_method_signature": "ReflectionTest.shouldGetClassNameWithPrimitive()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getClassName", "is", "assertThat", "getClassName", "is", "assertThat", "getClassName", "is", "assertThat", "getClassName", "is", "assertThat", "getClassName", "is", "assertThat", "getClassName", "is", "assertThat", "getClassName", "is", "assertThat", "getClassName", "is", "assertThat", "getClassName", "is"]}, "focal_class": {"identifier": "Reflection", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class[] {};", "modifier": "private static final", "type": "Class<?>[]", "declarator": "EMPTY_CLASS_ARRAY = new Class[] {}", "var_name": "EMPTY_CLASS_ARRAY"}, {"original_string": "private static final String[] BRACKETS_PAIR = new String[] {\"\", \"[]\", \"[][]\", \"[][][]\", \"[][][][]\", \"[][][][][]\"};", "modifier": "private static final", "type": "String[]", "declarator": "BRACKETS_PAIR = new String[] {\"\", \"[]\", \"[][]\", \"[][][]\", \"[][][][]\", \"[][][][][]\"}", "var_name": "BRACKETS_PAIR"}, {"original_string": "private final Class<?> targetClass;", "modifier": "private final", "type": "Class<?>", "declarator": "targetClass", "var_name": "targetClass"}, {"original_string": "private Map<String, LinkedList<Method>> methodMap = null;", "modifier": "private", "type": "Map<String, LinkedList<Method>>", "declarator": "methodMap = null", "var_name": "methodMap"}, {"original_string": "protected static final Inflector INFLECTOR = Inflector.getInstance();", "modifier": "protected static final", "type": "Inflector", "declarator": "INFLECTOR = Inflector.getInstance()", "var_name": "INFLECTOR"}], "methods": [{"identifier": "buildArgumentClasses", "parameters": "( Object... arguments )", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] buildArgumentClasses( Object... arguments )", "full_signature": "public static Class<?>[] buildArgumentClasses( Object... arguments )", "class_method_signature": "Reflection.buildArgumentClasses( Object... arguments )", "testcase": false, "constructor": false}, {"identifier": "buildArgumentClassList", "parameters": "( Object... arguments )", "modifiers": "public static", "return": "List<Class<?>>", "signature": "List<Class<?>> buildArgumentClassList( Object... arguments )", "full_signature": "public static List<Class<?>> buildArgumentClassList( Object... arguments )", "class_method_signature": "Reflection.buildArgumentClassList( Object... arguments )", "testcase": false, "constructor": false}, {"identifier": "convertArgumentClassesToPrimitives", "parameters": "( Class<?>... arguments )", "modifiers": "public static", "return": "List<Class<?>>", "signature": "List<Class<?>> convertArgumentClassesToPrimitives( Class<?>... arguments )", "full_signature": "public static List<Class<?>> convertArgumentClassesToPrimitives( Class<?>... arguments )", "class_method_signature": "Reflection.convertArgumentClassesToPrimitives( Class<?>... arguments )", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "( final Class<?> clazz )", "modifiers": "public static", "return": "String", "signature": "String getClassName( final Class<?> clazz )", "full_signature": "public static String getClassName( final Class<?> clazz )", "class_method_signature": "Reflection.getClassName( final Class<?> clazz )", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(Object instance, String fieldName, Object value)", "modifiers": "public static", "return": "void", "signature": "void setValue(Object instance, String fieldName, Object value)", "full_signature": "public static void setValue(Object instance, String fieldName, Object value)", "class_method_signature": "Reflection.setValue(Object instance, String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(String fieldName, Class<?> objectClass)", "modifiers": "public static", "return": "Field", "signature": "Field getField(String fieldName, Class<?> objectClass)", "full_signature": "public static Field getField(String fieldName, Class<?> objectClass)", "class_method_signature": "Reflection.getField(String fieldName, Class<?> objectClass)", "testcase": false, "constructor": false}, {"identifier": "findMethod", "parameters": "(Class<?> type, String methodName)", "modifiers": "public static", "return": "Method", "signature": "Method findMethod(Class<?> type, String methodName)", "full_signature": "public static Method findMethod(Class<?> type, String methodName)", "class_method_signature": "Reflection.findMethod(Class<?> type, String methodName)", "testcase": false, "constructor": false}, {"identifier": "findFieldRecursively", "parameters": "(Class<?> c, String fieldName)", "modifiers": "public static", "return": "Field", "signature": "Field findFieldRecursively(Class<?> c, String fieldName)", "full_signature": "public static Field findFieldRecursively(Class<?> c, String fieldName)", "class_method_signature": "Reflection.findFieldRecursively(Class<?> c, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(String classname, ClassLoader cl)", "modifiers": "@SuppressWarnings( \"unchecked\" ) public static", "return": "T", "signature": "T getInstance(String classname, ClassLoader cl)", "full_signature": "@SuppressWarnings( \"unchecked\" ) public static T getInstance(String classname, ClassLoader cl)", "class_method_signature": "Reflection.getInstance(String classname, ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "getFactoryMethod", "parameters": "(Class<?> c)", "modifiers": "private static", "return": "Method", "signature": "Method getFactoryMethod(Class<?> c)", "full_signature": "private static Method getFactoryMethod(Class<?> c)", "class_method_signature": "Reflection.getFactoryMethod(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "invokeAccessibly", "parameters": "(Object instance, Method method, Object[] parameters)", "modifiers": "public static", "return": "Object", "signature": "Object invokeAccessibly(Object instance, Method method, Object[] parameters)", "full_signature": "public static Object invokeAccessibly(Object instance, Method method, Object[] parameters)", "class_method_signature": "Reflection.invokeAccessibly(Object instance, Method method, Object[] parameters)", "testcase": false, "constructor": false}, {"identifier": "Reflection", "parameters": "( Class<?> targetClass )", "modifiers": "public", "return": "", "signature": " Reflection( Class<?> targetClass )", "full_signature": "public  Reflection( Class<?> targetClass )", "class_method_signature": "Reflection.Reflection( Class<?> targetClass )", "testcase": false, "constructor": true}, {"identifier": "getTargetClass", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getTargetClass()", "full_signature": "public Class<?> getTargetClass()", "class_method_signature": "Reflection.getTargetClass()", "testcase": false, "constructor": false}, {"identifier": "findMethods", "parameters": "( String methodName,\n                                 boolean caseSensitive )", "modifiers": "public", "return": "Method[]", "signature": "Method[] findMethods( String methodName,\n                                 boolean caseSensitive )", "full_signature": "public Method[] findMethods( String methodName,\n                                 boolean caseSensitive )", "class_method_signature": "Reflection.findMethods( String methodName,\n                                 boolean caseSensitive )", "testcase": false, "constructor": false}, {"identifier": "findMethods", "parameters": "( Pattern methodNamePattern )", "modifiers": "public", "return": "Method[]", "signature": "Method[] findMethods( Pattern methodNamePattern )", "full_signature": "public Method[] findMethods( Pattern methodNamePattern )", "class_method_signature": "Reflection.findMethods( Pattern methodNamePattern )", "testcase": false, "constructor": false}, {"identifier": "findGetterMethods", "parameters": "()", "modifiers": "public", "return": "Method[]", "signature": "Method[] findGetterMethods()", "full_signature": "public Method[] findGetterMethods()", "class_method_signature": "Reflection.findGetterMethods()", "testcase": false, "constructor": false}, {"identifier": "findGetterPropertyNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] findGetterPropertyNames()", "full_signature": "public String[] findGetterPropertyNames()", "class_method_signature": "Reflection.findGetterPropertyNames()", "testcase": false, "constructor": false}, {"identifier": "findFirstMethod", "parameters": "( String methodName,\n                                   boolean caseSensitive )", "modifiers": "public", "return": "Method", "signature": "Method findFirstMethod( String methodName,\n                                   boolean caseSensitive )", "full_signature": "public Method findFirstMethod( String methodName,\n                                   boolean caseSensitive )", "class_method_signature": "Reflection.findFirstMethod( String methodName,\n                                   boolean caseSensitive )", "testcase": false, "constructor": false}, {"identifier": "findFirstMethod", "parameters": "( Pattern methodNamePattern )", "modifiers": "public", "return": "Method", "signature": "Method findFirstMethod( Pattern methodNamePattern )", "full_signature": "public Method findFirstMethod( Pattern methodNamePattern )", "class_method_signature": "Reflection.findFirstMethod( Pattern methodNamePattern )", "testcase": false, "constructor": false}, {"identifier": "findAllMethods", "parameters": "( String methodName,\n                                            boolean caseSensitive )", "modifiers": "public", "return": "Iterable<Method>", "signature": "Iterable<Method> findAllMethods( String methodName,\n                                            boolean caseSensitive )", "full_signature": "public Iterable<Method> findAllMethods( String methodName,\n                                            boolean caseSensitive )", "class_method_signature": "Reflection.findAllMethods( String methodName,\n                                            boolean caseSensitive )", "testcase": false, "constructor": false}, {"identifier": "findAllMethods", "parameters": "( Pattern methodNamePattern )", "modifiers": "public", "return": "Iterable<Method>", "signature": "Iterable<Method> findAllMethods( Pattern methodNamePattern )", "full_signature": "public Iterable<Method> findAllMethods( Pattern methodNamePattern )", "class_method_signature": "Reflection.findAllMethods( Pattern methodNamePattern )", "testcase": false, "constructor": false}, {"identifier": "invokeBestMethodOnTarget", "parameters": "( String[] methodNames,\n                                            final Object target,\n                                            final Object... arguments )", "modifiers": "public", "return": "Object", "signature": "Object invokeBestMethodOnTarget( String[] methodNames,\n                                            final Object target,\n                                            final Object... arguments )", "full_signature": "public Object invokeBestMethodOnTarget( String[] methodNames,\n                                            final Object target,\n                                            final Object... arguments )", "class_method_signature": "Reflection.invokeBestMethodOnTarget( String[] methodNames,\n                                            final Object target,\n                                            final Object... arguments )", "testcase": false, "constructor": false}, {"identifier": "invokeSetterMethodOnTarget", "parameters": "( String javaPropertyName,\n                                              Object target,\n                                              Object argument )", "modifiers": "public", "return": "Object", "signature": "Object invokeSetterMethodOnTarget( String javaPropertyName,\n                                              Object target,\n                                              Object argument )", "full_signature": "public Object invokeSetterMethodOnTarget( String javaPropertyName,\n                                              Object target,\n                                              Object argument )", "class_method_signature": "Reflection.invokeSetterMethodOnTarget( String javaPropertyName,\n                                              Object target,\n                                              Object argument )", "testcase": false, "constructor": false}, {"identifier": "invokeGetterMethodOnTarget", "parameters": "( String javaPropertyName,\n                                              Object target )", "modifiers": "public", "return": "Object", "signature": "Object invokeGetterMethodOnTarget( String javaPropertyName,\n                                              Object target )", "full_signature": "public Object invokeGetterMethodOnTarget( String javaPropertyName,\n                                              Object target )", "class_method_signature": "Reflection.invokeGetterMethodOnTarget( String javaPropertyName,\n                                              Object target )", "testcase": false, "constructor": false}, {"identifier": "findMethodNames", "parameters": "( String methodName )", "modifiers": "protected", "return": "String[]", "signature": "String[] findMethodNames( String methodName )", "full_signature": "protected String[] findMethodNames( String methodName )", "class_method_signature": "Reflection.findMethodNames( String methodName )", "testcase": false, "constructor": false}, {"identifier": "findBestMethodOnTarget", "parameters": "( String methodName,\n                                          Object... arguments )", "modifiers": "public", "return": "Method", "signature": "Method findBestMethodOnTarget( String methodName,\n                                          Object... arguments )", "full_signature": "public Method findBestMethodOnTarget( String methodName,\n                                          Object... arguments )", "class_method_signature": "Reflection.findBestMethodOnTarget( String methodName,\n                                          Object... arguments )", "testcase": false, "constructor": false}, {"identifier": "findBestMethodWithSignature", "parameters": "( String methodName,\n                                               Class<?>... argumentsClasses )", "modifiers": "public", "return": "Method", "signature": "Method findBestMethodWithSignature( String methodName,\n                                               Class<?>... argumentsClasses )", "full_signature": "public Method findBestMethodWithSignature( String methodName,\n                                               Class<?>... argumentsClasses )", "class_method_signature": "Reflection.findBestMethodWithSignature( String methodName,\n                                               Class<?>... argumentsClasses )", "testcase": false, "constructor": false}, {"identifier": "findBestMethodWithSignature", "parameters": "( String methodName,\n                                               boolean caseSensitive,\n                                               Class<?>... argumentsClasses )", "modifiers": "public", "return": "Method", "signature": "Method findBestMethodWithSignature( String methodName,\n                                               boolean caseSensitive,\n                                               Class<?>... argumentsClasses )", "full_signature": "public Method findBestMethodWithSignature( String methodName,\n                                               boolean caseSensitive,\n                                               Class<?>... argumentsClasses )", "class_method_signature": "Reflection.findBestMethodWithSignature( String methodName,\n                                               boolean caseSensitive,\n                                               Class<?>... argumentsClasses )", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "( Object target,\n                                 String propertyName,\n                                 String label,\n                                 String category,\n                                 String description,\n                                 Object... allowedValues )", "modifiers": "public", "return": "Property", "signature": "Property getProperty( Object target,\n                                 String propertyName,\n                                 String label,\n                                 String category,\n                                 String description,\n                                 Object... allowedValues )", "full_signature": "public Property getProperty( Object target,\n                                 String propertyName,\n                                 String label,\n                                 String category,\n                                 String description,\n                                 Object... allowedValues )", "class_method_signature": "Reflection.getProperty( Object target,\n                                 String propertyName,\n                                 String label,\n                                 String category,\n                                 String description,\n                                 Object... allowedValues )", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "( Class<?> targetClass,\n                              String propertyName )", "modifiers": "protected", "return": "Field", "signature": "Field getField( Class<?> targetClass,\n                              String propertyName )", "full_signature": "protected Field getField( Class<?> targetClass,\n                              String propertyName )", "class_method_signature": "Reflection.getField( Class<?> targetClass,\n                              String propertyName )", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "( Class<AnnotationType> annotationType,\n                                                                                       Field field,\n                                                                                       Method[] getters,\n                                                                                       Method[] setters )", "modifiers": "protected static", "return": "AnnotationType", "signature": "AnnotationType getAnnotation( Class<AnnotationType> annotationType,\n                                                                                       Field field,\n                                                                                       Method[] getters,\n                                                                                       Method[] setters )", "full_signature": "protected static AnnotationType getAnnotation( Class<AnnotationType> annotationType,\n                                                                                       Field field,\n                                                                                       Method[] getters,\n                                                                                       Method[] setters )", "class_method_signature": "Reflection.getAnnotation( Class<AnnotationType> annotationType,\n                                                                                       Field field,\n                                                                                       Method[] getters,\n                                                                                       Method[] setters )", "testcase": false, "constructor": false}, {"identifier": "localizedString", "parameters": "( Class<?> i18nClass,\n                                             String id )", "modifiers": "protected static", "return": "String", "signature": "String localizedString( Class<?> i18nClass,\n                                             String id )", "full_signature": "protected static String localizedString( Class<?> i18nClass,\n                                             String id )", "class_method_signature": "Reflection.localizedString( Class<?> i18nClass,\n                                             String id )", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "( Object target,\n                                 String propertyName,\n                                 String description )", "modifiers": "public", "return": "Property", "signature": "Property getProperty( Object target,\n                                 String propertyName,\n                                 String description )", "full_signature": "public Property getProperty( Object target,\n                                 String propertyName,\n                                 String description )", "class_method_signature": "Reflection.getProperty( Object target,\n                                 String propertyName,\n                                 String description )", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "( Object target,\n                                 String propertyName )", "modifiers": "public", "return": "Property", "signature": "Property getProperty( Object target,\n                                 String propertyName )", "full_signature": "public Property getProperty( Object target,\n                                 String propertyName )", "class_method_signature": "Reflection.getProperty( Object target,\n                                 String propertyName )", "testcase": false, "constructor": false}, {"identifier": "getAllPropertiesOn", "parameters": "( Object target )", "modifiers": "public", "return": "List<Property>", "signature": "List<Property> getAllPropertiesOn( Object target )", "full_signature": "public List<Property> getAllPropertiesOn( Object target )", "class_method_signature": "Reflection.getAllPropertiesOn( Object target )", "testcase": false, "constructor": false}, {"identifier": "getAllPropertiesByNameOn", "parameters": "( Object target )", "modifiers": "public", "return": "Map<String, Property>", "signature": "Map<String, Property> getAllPropertiesByNameOn( Object target )", "full_signature": "public Map<String, Property> getAllPropertiesByNameOn( Object target )", "class_method_signature": "Reflection.getAllPropertiesByNameOn( Object target )", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "( Object target,\n                             Property property,\n                             Object value )", "modifiers": "public", "return": "void", "signature": "void setProperty( Object target,\n                             Property property,\n                             Object value )", "full_signature": "public void setProperty( Object target,\n                             Property property,\n                             Object value )", "class_method_signature": "Reflection.setProperty( Object target,\n                             Property property,\n                             Object value )", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "( Object target,\n                               Property property )", "modifiers": "public", "return": "Object", "signature": "Object getProperty( Object target,\n                               Property property )", "full_signature": "public Object getProperty( Object target,\n                               Property property )", "class_method_signature": "Reflection.getProperty( Object target,\n                               Property property )", "testcase": false, "constructor": false}, {"identifier": "getPropertyAsString", "parameters": "( Object target,\n                                       Property property )", "modifiers": "public", "return": "String", "signature": "String getPropertyAsString( Object target,\n                                       Property property )", "full_signature": "public String getPropertyAsString( Object target,\n                                       Property property )", "class_method_signature": "Reflection.getPropertyAsString( Object target,\n                                       Property property )", "testcase": false, "constructor": false}, {"identifier": "writeObjectAsString", "parameters": "( Object obj,\n                                        StringBuilder sb,\n                                        boolean wrapWithBrackets )", "modifiers": "protected", "return": "void", "signature": "void writeObjectAsString( Object obj,\n                                        StringBuilder sb,\n                                        boolean wrapWithBrackets )", "full_signature": "protected void writeObjectAsString( Object obj,\n                                        StringBuilder sb,\n                                        boolean wrapWithBrackets )", "class_method_signature": "Reflection.writeObjectAsString( Object obj,\n                                        StringBuilder sb,\n                                        boolean wrapWithBrackets )", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/util/Reflection.java"}, "focal_method": {"identifier": "getClassName", "parameters": "( final Class<?> clazz )", "modifiers": "public static", "return": "String", "body": "public static String getClassName( final Class<?> clazz ) {\n        final String fullName = clazz.getName();\n        final int fullNameLength = fullName.length();\n\n        // Check for array ('[') or the class/interface marker ('L') ...\n        int numArrayDimensions = 0;\n        while (numArrayDimensions < fullNameLength) {\n            final char c = fullName.charAt(numArrayDimensions);\n            if (c != '[') {\n                String name = null;\n                // Not an array, so it must be one of the other markers ...\n                switch (c) {\n                    case 'L': {\n                        name = fullName.subSequence(numArrayDimensions + 1, fullNameLength).toString();\n                        break;\n                    }\n                    case 'B': {\n                        name = \"byte\";\n                        break;\n                    }\n                    case 'C': {\n                        name = \"char\";\n                        break;\n                    }\n                    case 'D': {\n                        name = \"double\";\n                        break;\n                    }\n                    case 'F': {\n                        name = \"float\";\n                        break;\n                    }\n                    case 'I': {\n                        name = \"int\";\n                        break;\n                    }\n                    case 'J': {\n                        name = \"long\";\n                        break;\n                    }\n                    case 'S': {\n                        name = \"short\";\n                        break;\n                    }\n                    case 'Z': {\n                        name = \"boolean\";\n                        break;\n                    }\n                    case 'V': {\n                        name = \"void\";\n                        break;\n                    }\n                    default: {\n                        name = fullName.subSequence(numArrayDimensions, fullNameLength).toString();\n                    }\n                }\n                if (numArrayDimensions == 0) {\n                    // No array markers, so just return the name ...\n                    return name;\n                }\n                // Otherwise, add the array markers and the name ...\n                if (numArrayDimensions < BRACKETS_PAIR.length) {\n                    name = name + BRACKETS_PAIR[numArrayDimensions];\n                } else {\n                    for (int i = 0; i < numArrayDimensions; i++) {\n                        name = name + BRACKETS_PAIR[1];\n                    }\n                }\n                return name;\n            }\n            ++numArrayDimensions;\n        }\n\n        return fullName;\n    }", "signature": "String getClassName( final Class<?> clazz )", "full_signature": "public static String getClassName( final Class<?> clazz )", "class_method_signature": "Reflection.getClassName( final Class<?> clazz )", "testcase": false, "constructor": false, "invocations": ["getName", "length", "charAt", "toString", "subSequence", "toString", "subSequence"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}