{"test_class": {"identifier": "BlueReaderTest", "superclass": "extends RobolectricTestWithConfig", "interfaces": "", "fields": [{"original_string": "private ByteArrayOutputStream _out;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "_out", "var_name": "_out"}], "file": "app/src/test/java/com/eveningoutpost/dexdrip/Models/BlueReaderTest.java"}, "test_case": {"identifier": "decodeBlueReaderPacket_TransFailed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void decodeBlueReaderPacket_TransFailed() {\n        // :: Setup\n        byte[] buffer = \"TRANS_FAILED\".getBytes();\n\n        // :: Act\n        byte[] reply = blueReader.decodeblueReaderPacket(buffer, -1);\n\n        // :: Verify\n        assertThat(reply).isNull();\n        assertThat(getLogs()).contains(\"W/blueReader: Attention: check position of blueReader on the sensor, as it was not able to read!\");\n    }", "signature": "void decodeBlueReaderPacket_TransFailed()", "full_signature": "@Test public void decodeBlueReaderPacket_TransFailed()", "class_method_signature": "BlueReaderTest.decodeBlueReaderPacket_TransFailed()", "testcase": true, "constructor": false, "invocations": ["getBytes", "decodeblueReaderPacket", "isNull", "assertThat", "contains", "assertThat", "getLogs"]}, "focal_class": {"identifier": "blueReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"blueReader\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"blueReader\"", "var_name": "TAG"}, {"original_string": "private static final String BatLog=\"/BatteryLog.csv\";", "modifier": "private static final", "type": "String", "declarator": "BatLog=\"/BatteryLog.csv\"", "var_name": "BatLog"}, {"original_string": "private static int counterHibernated = 0;", "modifier": "private static", "type": "int", "declarator": "counterHibernated = 0", "var_name": "counterHibernated"}, {"original_string": "private static Matcher tempVers;", "modifier": "private static", "type": "Matcher", "declarator": "tempVers", "var_name": "tempVers"}, {"original_string": "private static final byte[] shutdown = new byte[]{0x6B};", "modifier": "private static final", "type": "byte[]", "declarator": "shutdown = new byte[]{0x6B}", "var_name": "shutdown"}, {"original_string": "private static final byte[] requestValue = new byte[]{0x6C};", "modifier": "private static final", "type": "byte[]", "declarator": "requestValue = new byte[]{0x6C}", "var_name": "requestValue"}, {"original_string": "private static final byte[] goHybernate = new byte[]{0x68};", "modifier": "private static final", "type": "byte[]", "declarator": "goHybernate = new byte[]{0x68}", "var_name": "goHybernate"}, {"original_string": "private static final byte[] restart = new byte[]{0x79};", "modifier": "private static final", "type": "byte[]", "declarator": "restart = new byte[]{0x79}", "var_name": "restart"}], "methods": [{"identifier": "isblueReader", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isblueReader()", "full_signature": "public static boolean isblueReader()", "class_method_signature": "blueReader.isblueReader()", "testcase": false, "constructor": false}, {"identifier": "decodeblueReaderPacket", "parameters": "(byte[] buffer, int len)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decodeblueReaderPacket(byte[] buffer, int len)", "full_signature": "public static byte[] decodeblueReaderPacket(byte[] buffer, int len)", "class_method_signature": "blueReader.decodeblueReaderPacket(byte[] buffer, int len)", "testcase": false, "constructor": false}, {"identifier": "processNewTransmitterData", "parameters": "(TransmitterData transmitterData, long timestamp)", "modifiers": "private static synchronized", "return": "void", "signature": "void processNewTransmitterData(TransmitterData transmitterData, long timestamp)", "full_signature": "private static synchronized void processNewTransmitterData(TransmitterData transmitterData, long timestamp)", "class_method_signature": "blueReader.processNewTransmitterData(TransmitterData transmitterData, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "public static", "return": "ByteBuffer", "signature": "ByteBuffer initialize()", "full_signature": "public static ByteBuffer initialize()", "class_method_signature": "blueReader.initialize()", "testcase": false, "constructor": false}, {"identifier": "writeLog", "parameters": "(String logFile, String logLine)", "modifiers": "private static", "return": "void", "signature": "void writeLog(String logFile, String logLine)", "full_signature": "private static void writeLog(String logFile, String logLine)", "class_method_signature": "blueReader.writeLog(String logFile, String logLine)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/Models/blueReader.java"}, "focal_method": {"identifier": "decodeblueReaderPacket", "parameters": "(byte[] buffer, int len)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] decodeblueReaderPacket(byte[] buffer, int len) {\n        int cmdFound = 0;\n        long timestamp = new Date().getTime();\n        String bufferstring;\n        //Log.w(TAG, \"Packet: \" + bufferstring);\n        if (buffer == null) {\n            Log.e(TAG, \"null buffer passed to decodeblueReaderPacket\");\n            return null;\n        } else {\n            bufferstring=new String(buffer);\n        }\n        if (bufferstring.startsWith(\"not ready for\") ) { //delete the trans_failed, because its normal only if the bluereader could not read the sensor.\n            counterHibernated++;\n            Log.e(TAG, \"Found blueReader in a ugly State (\" + counterHibernated + \"/3), send hibernate to reset! If this does not help in the next 5 Minutes, then turn the bluereader manually off and on!\");\n            if (counterHibernated > 2) {\n                Log.wtf(TAG, \"Ugly state not resolveable. Bluereader will be shut down! Please restart it!\");\n                Home.toaststatic(\"BlueReader ugly state not resolveable, bluereader will be shut down. Please restart it!\");\n                if (!Pref.getBooleanDefaultFalse(\"blueReader_suppressuglystatemsg\")) {\n                    Notifications.RiseDropAlert(xdrip.getAppContext(),true,\"BlueReader Alarm\", xdrip.getAppContext().getString(R.string.bluereaderuglystate),1);\n                }\n                return shutdown;\n            } else {\n                Home.toaststatic(\"Found blueReader in a ugly State, send hibernate to reset!\");\n                return goHybernate; //send hard hibernate, because blueReader is in a ugly state\n            }\n        } else if (bufferstring.startsWith(\"IDR\")){\n            Log.i(TAG, bufferstring);\n            PersistentStore.setString(\"blueReaderFirmware\", bufferstring );\n            tempVers=Pattern.compile(\".*\\\\|blue(.*)-.*\").matcher(bufferstring);\n            tempVers.find();\n            PersistentStore.setDouble(\"blueReaderFirmwareValue\",Double.parseDouble(tempVers.group(1)));\n            Log.i(TAG, \"bluereader-Firmware-Version: \" + tempVers);\n            if (BgReading.last() == null || BgReading.last().timestamp + (4 * 60 * 1000) < System.currentTimeMillis()) {\n                return requestValue;\n            } else {\n                return null;\n            }\n        } else if (bufferstring.startsWith(\"WAKE\")) {\n            Log.d (TAG, \"blueReader was set to wakeup-mode manually...\");\n            return null;\n        } else if (bufferstring.startsWith(\"ECHO\")) {\n            Log.d (TAG, \"blueReader was set to Echo-Mode manually...\");\n            return null;\n        } else if (bufferstring.startsWith(\"NFC READY\")) {\n            Log.d (TAG, \"blueReader notice that NFC is active...\");\n            return null;\n        } else if (bufferstring.startsWith(\"NFC_DISABLED\")) {\n            Log.d (TAG, \"blueReader notice that NFC is now hibernated...\");\n            return null;\n        } else if (bufferstring.startsWith(\"HYBERNATE SUCCESS\")) {\n            Log.i (TAG, \"blueReader notice that NFC is now really hibernated...\");\n            if (counterHibernated > 0) {\n                Log.w (TAG,\"Found hibernation after wrong read. Resend read-command...\");\n                return requestValue;\n            } else {\n                return null;\n            }\n        } else if (bufferstring.startsWith(\"-r 0:\")) {\n            Log.d (TAG, \"blueReader sends an unknown reaction: '\" + bufferstring + \"'\");\n            return null;\n        } else if (bufferstring.startsWith(\"TRANS_FAILED\")) {\n            Log.w (TAG, \"Attention: check position of blueReader on the sensor, as it was not able to read!\");\n            Home.toaststatic(xdrip.getAppContext().getString(R.string.bluereader_position));\n            return null;\n        } else if (bufferstring.startsWith(\"battery: \")) {\n            if (BgReading.last() == null || BgReading.last().timestamp + (4 * 60 * 1000) < System.currentTimeMillis()) {\n                return requestValue;\n            }\n        } else {\n            counterHibernated = 0;\n            processNewTransmitterData(TransmitterData.create(buffer, len, timestamp), timestamp);\n            // check for shutdown blueReader if Battery is too low\n            if (Pref.getBooleanDefaultFalse(\"blueReader_turn_off\")) {\n                if (Pref.getInt(\"blueReader_turn_off_value\",5) > Pref.getInt(\"bridge_battery\",100)) {\n                    Log.w (TAG, \"blueReader will be turn off, as the battery is lower then \" + Pref.getInt(\"blueReader_turn_off_value\",5) +\"%\");\n                    Home.toaststatic(xdrip.getAppContext().getString(R.string.bluereaderoff) + Pref.getInt(\"blueReader_turn_off_value\",5) +\"%\");\n                    return shutdown;\n                }\n            }\n        }\n\n        return null;\n    }", "signature": "byte[] decodeblueReaderPacket(byte[] buffer, int len)", "full_signature": "public static byte[] decodeblueReaderPacket(byte[] buffer, int len)", "class_method_signature": "blueReader.decodeblueReaderPacket(byte[] buffer, int len)", "testcase": false, "constructor": false, "invocations": ["getTime", "e", "startsWith", "e", "wtf", "toaststatic", "getBooleanDefaultFalse", "RiseDropAlert", "getAppContext", "getString", "getAppContext", "toaststatic", "startsWith", "i", "setString", "matcher", "compile", "find", "setDouble", "parseDouble", "group", "i", "last", "last", "currentTimeMillis", "startsWith", "d", "startsWith", "d", "startsWith", "d", "startsWith", "d", "startsWith", "i", "w", "startsWith", "d", "startsWith", "w", "toaststatic", "getString", "getAppContext", "startsWith", "last", "last", "currentTimeMillis", "processNewTransmitterData", "create", "getBooleanDefaultFalse", "getInt", "getInt", "w", "getInt", "toaststatic", "getString", "getAppContext", "getInt"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}