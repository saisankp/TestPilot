{"test_class": {"identifier": "ConfettoTest", "superclass": "", "interfaces": "", "fields": [], "file": "confetti/src/test/java/com/github/jinatonic/confetti/confetto/ConfettoTest.java"}, "test_case": {"identifier": "test_computeBound_withAcceleration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_computeBound_withAcceleration() {\n        // 100 = 0.5 * 0.01 * t * t, t = sqrt(20000) or 141\n        long time = Confetto.computeBound(0f, 0f, 0.01f, null, null, -10000, 100);\n        assertEquals(141, time);\n        time = Confetto.computeBound(0f, 0f, -0.01f, null, null, -100, 10000);\n        assertEquals(141, time);\n\n        // 100 = 10 + 0.01 * t + 0.5 * 0.01 * t * t, t 3.358\n        time = Confetto.computeBound(10f, 0.01f, 0.01f, null, null, -10000, 100);\n        assertEquals(133, time);\n        time = Confetto.computeBound(-10f, -0.01f, -0.01f, null, null, -100, 10000);\n        assertEquals(133, time);\n    }", "signature": "void test_computeBound_withAcceleration()", "full_signature": "@Test public void test_computeBound_withAcceleration()", "class_method_signature": "ConfettoTest.test_computeBound_withAcceleration()", "testcase": true, "constructor": false, "invocations": ["computeBound", "assertEquals", "computeBound", "assertEquals", "computeBound", "assertEquals", "computeBound", "assertEquals"]}, "focal_class": {"identifier": "Confetto", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_ALPHA = 255;", "modifier": "private static final", "type": "int", "declarator": "MAX_ALPHA = 255", "var_name": "MAX_ALPHA"}, {"original_string": "private static final long RESET_ANIMATION_INITIAL_DELAY = -1;", "modifier": "private static final", "type": "long", "declarator": "RESET_ANIMATION_INITIAL_DELAY = -1", "var_name": "RESET_ANIMATION_INITIAL_DELAY"}, {"original_string": "private final Matrix matrix = new Matrix();", "modifier": "private final", "type": "Matrix", "declarator": "matrix = new Matrix()", "var_name": "matrix"}, {"original_string": "private final Paint workPaint = new Paint(Paint.ANTI_ALIAS_FLAG);", "modifier": "private final", "type": "Paint", "declarator": "workPaint = new Paint(Paint.ANTI_ALIAS_FLAG)", "var_name": "workPaint"}, {"original_string": "private final float[] workPairs = new float[2];", "modifier": "private final", "type": "float[]", "declarator": "workPairs = new float[2]", "var_name": "workPairs"}, {"original_string": "private Rect bound;", "modifier": "private", "type": "Rect", "declarator": "bound", "var_name": "bound"}, {"original_string": "private long initialDelay;", "modifier": "private", "type": "long", "declarator": "initialDelay", "var_name": "initialDelay"}, {"original_string": "private float initialX, initialY, initialVelocityX, initialVelocityY,\n            accelerationX, accelerationY;", "modifier": "private", "type": "float", "declarator": "initialX", "var_name": "initialX"}, {"original_string": "private Float targetVelocityX, targetVelocityY;", "modifier": "private", "type": "Float", "declarator": "targetVelocityX", "var_name": "targetVelocityX"}, {"original_string": "private Long millisToReachTargetVelocityX, millisToReachTargetVelocityY;", "modifier": "private", "type": "Long", "declarator": "millisToReachTargetVelocityX", "var_name": "millisToReachTargetVelocityX"}, {"original_string": "private float initialRotation, initialRotationalVelocity, rotationalAcceleration;", "modifier": "private", "type": "float", "declarator": "initialRotation", "var_name": "initialRotation"}, {"original_string": "private Float targetRotationalVelocity;", "modifier": "private", "type": "Float", "declarator": "targetRotationalVelocity", "var_name": "targetRotationalVelocity"}, {"original_string": "private Long millisToReachTargetRotationalVelocity;", "modifier": "private", "type": "Long", "declarator": "millisToReachTargetRotationalVelocity", "var_name": "millisToReachTargetRotationalVelocity"}, {"original_string": "private long ttl;", "modifier": "private", "type": "long", "declarator": "ttl", "var_name": "ttl"}, {"original_string": "private Interpolator fadeOutInterpolator;", "modifier": "private", "type": "Interpolator", "declarator": "fadeOutInterpolator", "var_name": "fadeOutInterpolator"}, {"original_string": "private float millisToReachBound;", "modifier": "private", "type": "float", "declarator": "millisToReachBound", "var_name": "millisToReachBound"}, {"original_string": "private float percentageAnimated;", "modifier": "private", "type": "float", "declarator": "percentageAnimated", "var_name": "percentageAnimated"}, {"original_string": "private float currentX, currentY, currentRotation;", "modifier": "private", "type": "float", "declarator": "currentX", "var_name": "currentX"}, {"original_string": "protected float currentVelocityX, currentVelocityY, currentRotationalVelocity;", "modifier": "protected", "type": "float", "declarator": "currentVelocityX", "var_name": "currentVelocityX"}, {"original_string": "private int alpha;", "modifier": "private", "type": "int", "declarator": "alpha", "var_name": "alpha"}, {"original_string": "private boolean startedAnimation, terminated;", "modifier": "private", "type": "boolean", "declarator": "startedAnimation", "var_name": "startedAnimation"}, {"original_string": "private boolean touchOverride;", "modifier": "private", "type": "boolean", "declarator": "touchOverride", "var_name": "touchOverride"}, {"original_string": "private VelocityTracker velocityTracker;", "modifier": "private", "type": "VelocityTracker", "declarator": "velocityTracker", "var_name": "velocityTracker"}, {"original_string": "private float overrideX, overrideY, overrideVelocityX, overrideVelocityY;", "modifier": "private", "type": "float", "declarator": "overrideX", "var_name": "overrideX"}, {"original_string": "private float overrideDeltaX, overrideDeltaY;", "modifier": "private", "type": "float", "declarator": "overrideDeltaX", "var_name": "overrideDeltaX"}], "methods": [{"identifier": "prepare", "parameters": "(Rect bound)", "modifiers": "public", "return": "void", "signature": "void prepare(Rect bound)", "full_signature": "public void prepare(Rect bound)", "class_method_signature": "Confetto.prepare(Rect bound)", "testcase": false, "constructor": false}, {"identifier": "doesLocationIntercept", "parameters": "(float x, float y)", "modifiers": "private", "return": "boolean", "signature": "boolean doesLocationIntercept(float x, float y)", "full_signature": "private boolean doesLocationIntercept(float x, float y)", "class_method_signature": "Confetto.doesLocationIntercept(float x, float y)", "testcase": false, "constructor": false}, {"identifier": "onTouchDown", "parameters": "(MotionEvent event)", "modifiers": "public", "return": "boolean", "signature": "boolean onTouchDown(MotionEvent event)", "full_signature": "public boolean onTouchDown(MotionEvent event)", "class_method_signature": "Confetto.onTouchDown(MotionEvent event)", "testcase": false, "constructor": false}, {"identifier": "onTouchMove", "parameters": "(MotionEvent event)", "modifiers": "public", "return": "void", "signature": "void onTouchMove(MotionEvent event)", "full_signature": "public void onTouchMove(MotionEvent event)", "class_method_signature": "Confetto.onTouchMove(MotionEvent event)", "testcase": false, "constructor": false}, {"identifier": "onTouchUp", "parameters": "(MotionEvent event)", "modifiers": "public", "return": "void", "signature": "void onTouchUp(MotionEvent event)", "full_signature": "public void onTouchUp(MotionEvent event)", "class_method_signature": "Confetto.onTouchUp(MotionEvent event)", "testcase": false, "constructor": false}, {"identifier": "getWidth", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int getWidth()", "full_signature": "public abstract int getWidth()", "class_method_signature": "Confetto.getWidth()", "testcase": false, "constructor": false}, {"identifier": "getHeight", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int getHeight()", "full_signature": "public abstract int getHeight()", "class_method_signature": "Confetto.getHeight()", "testcase": false, "constructor": false}, {"identifier": "computeMillisToReachTarget", "parameters": "(Float targetVelocity, float initialVelocity,\n            float acceleration)", "modifiers": "protected static", "return": "Long", "signature": "Long computeMillisToReachTarget(Float targetVelocity, float initialVelocity,\n            float acceleration)", "full_signature": "protected static Long computeMillisToReachTarget(Float targetVelocity, float initialVelocity,\n            float acceleration)", "class_method_signature": "Confetto.computeMillisToReachTarget(Float targetVelocity, float initialVelocity,\n            float acceleration)", "testcase": false, "constructor": false}, {"identifier": "computeBound", "parameters": "(float initialPos, float velocity, float acceleration,\n            Long targetTime, Float targetVelocity, int minBound, int maxBound)", "modifiers": "protected static", "return": "long", "signature": "long computeBound(float initialPos, float velocity, float acceleration,\n            Long targetTime, Float targetVelocity, int minBound, int maxBound)", "full_signature": "protected static long computeBound(float initialPos, float velocity, float acceleration,\n            Long targetTime, Float targetVelocity, int minBound, int maxBound)", "class_method_signature": "Confetto.computeBound(float initialPos, float velocity, float acceleration,\n            Long targetTime, Float targetVelocity, int minBound, int maxBound)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "Confetto.reset()", "testcase": false, "constructor": false}, {"identifier": "configurePaint", "parameters": "(Paint paint)", "modifiers": "protected", "return": "void", "signature": "void configurePaint(Paint paint)", "full_signature": "protected void configurePaint(Paint paint)", "class_method_signature": "Confetto.configurePaint(Paint paint)", "testcase": false, "constructor": false}, {"identifier": "applyUpdate", "parameters": "(long passedTime)", "modifiers": "public", "return": "boolean", "signature": "boolean applyUpdate(long passedTime)", "full_signature": "public boolean applyUpdate(long passedTime)", "class_method_signature": "Confetto.applyUpdate(long passedTime)", "testcase": false, "constructor": false}, {"identifier": "computeDistance", "parameters": "(float[] pair, long t, float xi, float vi, float ai, Long targetTime,\n                                 Float vTarget)", "modifiers": "private", "return": "void", "signature": "void computeDistance(float[] pair, long t, float xi, float vi, float ai, Long targetTime,\n                                 Float vTarget)", "full_signature": "private void computeDistance(float[] pair, long t, float xi, float vi, float ai, Long targetTime,\n                                 Float vTarget)", "class_method_signature": "Confetto.computeDistance(float[] pair, long t, float xi, float vi, float ai, Long targetTime,\n                                 Float vTarget)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Canvas canvas)", "modifiers": "public", "return": "void", "signature": "void draw(Canvas canvas)", "full_signature": "public void draw(Canvas canvas)", "class_method_signature": "Confetto.draw(Canvas canvas)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Canvas canvas, float x, float y, float rotation, float percentageAnimated)", "modifiers": "private", "return": "void", "signature": "void draw(Canvas canvas, float x, float y, float rotation, float percentageAnimated)", "full_signature": "private void draw(Canvas canvas, float x, float y, float rotation, float percentageAnimated)", "class_method_signature": "Confetto.draw(Canvas canvas, float x, float y, float rotation, float percentageAnimated)", "testcase": false, "constructor": false}, {"identifier": "drawInternal", "parameters": "(Canvas canvas, Matrix matrix, Paint paint, float x,\n            float y, float rotation, float percentAnimated)", "modifiers": "protected abstract", "return": "void", "signature": "void drawInternal(Canvas canvas, Matrix matrix, Paint paint, float x,\n            float y, float rotation, float percentAnimated)", "full_signature": "protected abstract void drawInternal(Canvas canvas, Matrix matrix, Paint paint, float x,\n            float y, float rotation, float percentAnimated)", "class_method_signature": "Confetto.drawInternal(Canvas canvas, Matrix matrix, Paint paint, float x,\n            float y, float rotation, float percentAnimated)", "testcase": false, "constructor": false}, {"identifier": "setInitialDelay", "parameters": "(long val)", "modifiers": "public", "return": "void", "signature": "void setInitialDelay(long val)", "full_signature": "public void setInitialDelay(long val)", "class_method_signature": "Confetto.setInitialDelay(long val)", "testcase": false, "constructor": false}, {"identifier": "setInitialX", "parameters": "(float val)", "modifiers": "public", "return": "void", "signature": "void setInitialX(float val)", "full_signature": "public void setInitialX(float val)", "class_method_signature": "Confetto.setInitialX(float val)", "testcase": false, "constructor": false}, {"identifier": "setInitialY", "parameters": "(float val)", "modifiers": "public", "return": "void", "signature": "void setInitialY(float val)", "full_signature": "public void setInitialY(float val)", "class_method_signature": "Confetto.setInitialY(float val)", "testcase": false, "constructor": false}, {"identifier": "setInitialVelocityX", "parameters": "(float val)", "modifiers": "public", "return": "void", "signature": "void setInitialVelocityX(float val)", "full_signature": "public void setInitialVelocityX(float val)", "class_method_signature": "Confetto.setInitialVelocityX(float val)", "testcase": false, "constructor": false}, {"identifier": "setInitialVelocityY", "parameters": "(float val)", "modifiers": "public", "return": "void", "signature": "void setInitialVelocityY(float val)", "full_signature": "public void setInitialVelocityY(float val)", "class_method_signature": "Confetto.setInitialVelocityY(float val)", "testcase": false, "constructor": false}, {"identifier": "setAccelerationX", "parameters": "(float val)", "modifiers": "public", "return": "void", "signature": "void setAccelerationX(float val)", "full_signature": "public void setAccelerationX(float val)", "class_method_signature": "Confetto.setAccelerationX(float val)", "testcase": false, "constructor": false}, {"identifier": "setAccelerationY", "parameters": "(float val)", "modifiers": "public", "return": "void", "signature": "void setAccelerationY(float val)", "full_signature": "public void setAccelerationY(float val)", "class_method_signature": "Confetto.setAccelerationY(float val)", "testcase": false, "constructor": false}, {"identifier": "setTargetVelocityX", "parameters": "(Float val)", "modifiers": "public", "return": "void", "signature": "void setTargetVelocityX(Float val)", "full_signature": "public void setTargetVelocityX(Float val)", "class_method_signature": "Confetto.setTargetVelocityX(Float val)", "testcase": false, "constructor": false}, {"identifier": "setTargetVelocityY", "parameters": "(Float val)", "modifiers": "public", "return": "void", "signature": "void setTargetVelocityY(Float val)", "full_signature": "public void setTargetVelocityY(Float val)", "class_method_signature": "Confetto.setTargetVelocityY(Float val)", "testcase": false, "constructor": false}, {"identifier": "setInitialRotation", "parameters": "(float val)", "modifiers": "public", "return": "void", "signature": "void setInitialRotation(float val)", "full_signature": "public void setInitialRotation(float val)", "class_method_signature": "Confetto.setInitialRotation(float val)", "testcase": false, "constructor": false}, {"identifier": "setInitialRotationalVelocity", "parameters": "(float val)", "modifiers": "public", "return": "void", "signature": "void setInitialRotationalVelocity(float val)", "full_signature": "public void setInitialRotationalVelocity(float val)", "class_method_signature": "Confetto.setInitialRotationalVelocity(float val)", "testcase": false, "constructor": false}, {"identifier": "setRotationalAcceleration", "parameters": "(float val)", "modifiers": "public", "return": "void", "signature": "void setRotationalAcceleration(float val)", "full_signature": "public void setRotationalAcceleration(float val)", "class_method_signature": "Confetto.setRotationalAcceleration(float val)", "testcase": false, "constructor": false}, {"identifier": "setTargetRotationalVelocity", "parameters": "(Float val)", "modifiers": "public", "return": "void", "signature": "void setTargetRotationalVelocity(Float val)", "full_signature": "public void setTargetRotationalVelocity(Float val)", "class_method_signature": "Confetto.setTargetRotationalVelocity(Float val)", "testcase": false, "constructor": false}, {"identifier": "setTTL", "parameters": "(long val)", "modifiers": "public", "return": "void", "signature": "void setTTL(long val)", "full_signature": "public void setTTL(long val)", "class_method_signature": "Confetto.setTTL(long val)", "testcase": false, "constructor": false}, {"identifier": "setFadeOut", "parameters": "(Interpolator fadeOutInterpolator)", "modifiers": "public", "return": "void", "signature": "void setFadeOut(Interpolator fadeOutInterpolator)", "full_signature": "public void setFadeOut(Interpolator fadeOutInterpolator)", "class_method_signature": "Confetto.setFadeOut(Interpolator fadeOutInterpolator)", "testcase": false, "constructor": false}], "file": "confetti/src/main/java/com/github/jinatonic/confetti/confetto/Confetto.java"}, "focal_method": {"identifier": "computeBound", "parameters": "(float initialPos, float velocity, float acceleration,\n            Long targetTime, Float targetVelocity, int minBound, int maxBound)", "modifiers": "protected static", "return": "long", "body": "protected static long computeBound(float initialPos, float velocity, float acceleration,\n            Long targetTime, Float targetVelocity, int minBound, int maxBound) {\n        if (acceleration != 0) {\n            // non-zero acceleration\n            final int bound = acceleration > 0 ? maxBound : minBound;\n\n            if (targetTime == null || targetTime < 0) {\n                // https://www.wolframalpha.com/input/\n                // ?i=solve+for+t+in+(d+%3D+x+%2B+v+*+t+%2B+0.5+*+a+*+t+*+t)\n\n                final double tmp = Math.sqrt(\n                        2 * acceleration * bound - 2 * acceleration * initialPos\n                                + velocity * velocity);\n\n                final double firstTime = (-tmp - velocity) / acceleration;\n                if (firstTime > 0) {\n                    return (long) firstTime;\n                }\n\n                final double secondTime = (tmp - velocity) / acceleration;\n                if (secondTime > 0) {\n                    return (long) secondTime;\n                }\n\n                return Long.MAX_VALUE;\n            } else {\n                // d = x + v * tm + 0.5 * a * tm * tm + tv * (t - tm)\n                // d - x - v * tm - 0.5 * a * tm * tm = tv * t - tv * tm\n                // d - x - v * tm - 0.5 * a * tm * tm + tv * tm = tv * t\n                // t = (d - x - v * tm - 0.5 * a * tm * tm + tv * tm) / tv\n\n                final double time =\n                        (bound - initialPos - velocity * targetTime -\n                                0.5 * acceleration * targetTime * targetTime +\n                                targetVelocity * targetTime) /\n                        targetVelocity;\n\n                return time > 0 ? (long) time : Long.MAX_VALUE;\n            }\n        } else {\n            float actualVelocity = targetTime == null ? velocity : targetVelocity;\n            final int bound = actualVelocity > 0 ? maxBound : minBound;\n            if (actualVelocity != 0) {\n                final double time = (bound - initialPos) / actualVelocity;\n                return time > 0 ? (long) time : Long.MAX_VALUE;\n            } else {\n                return Long.MAX_VALUE;\n            }\n        }\n    }", "signature": "long computeBound(float initialPos, float velocity, float acceleration,\n            Long targetTime, Float targetVelocity, int minBound, int maxBound)", "full_signature": "protected static long computeBound(float initialPos, float velocity, float acceleration,\n            Long targetTime, Float targetVelocity, int minBound, int maxBound)", "class_method_signature": "Confetto.computeBound(float initialPos, float velocity, float acceleration,\n            Long targetTime, Float targetVelocity, int minBound, int maxBound)", "testcase": false, "constructor": false, "invocations": ["sqrt"]}, "repository": {"repo_id": 66060256, "url": "https://github.com/jinatonic/confetti", "language": "Java", "is_fork": false, "fork_count": 150, "stargazer_count": 1156, "size": 2467, "license": "licensed"}}