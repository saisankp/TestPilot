{"test_class": {"identifier": "SolutionFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/planner/domain/SolutionFactoryTest.java"}, "test_case": {"identifier": "solution_created_from_vehicles_depot_and_visits_should_be_consistent", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void solution_created_from_vehicles_depot_and_visits_should_be_consistent() {\n        PlanningVehicle vehicle = new PlanningVehicle();\n\n        PlanningLocation depotLocation = PlanningLocationFactory.testLocation(1);\n        PlanningDepot depot = new PlanningDepot(depotLocation);\n\n        PlanningVisit visit = PlanningVisitFactory.testVisit(2);\n\n        VehicleRoutingSolution solutionWithDepot = SolutionFactory.solutionFromVisits(\n                singletonList(vehicle),\n                depot,\n                singletonList(visit));\n        assertThat(solutionWithDepot.getVehicleList()).containsExactly(vehicle);\n        assertThat(vehicle.getDepot()).isEqualTo(depot);\n        assertThat(solutionWithDepot.getDepotList()).containsExactly(depot);\n        assertThat(solutionWithDepot.getVisitList()).hasSize(1);\n        assertThat(solutionWithDepot.getVisitList()).containsExactly(visit);\n        assertThat(solutionWithDepot.getVisitList().get(0).getLocation()).isEqualTo(visit.getLocation());\n\n        VehicleRoutingSolution solutionWithNoDepot = SolutionFactory.solutionFromVisits(\n                singletonList(vehicle),\n                null,\n                emptyList());\n        assertThat(solutionWithNoDepot.getDepotList()).isEmpty();\n    }", "signature": "void solution_created_from_vehicles_depot_and_visits_should_be_consistent()", "full_signature": "@Test void solution_created_from_vehicles_depot_and_visits_should_be_consistent()", "class_method_signature": "SolutionFactoryTest.solution_created_from_vehicles_depot_and_visits_should_be_consistent()", "testcase": true, "constructor": false, "invocations": ["testLocation", "testVisit", "solutionFromVisits", "singletonList", "singletonList", "containsExactly", "assertThat", "getVehicleList", "isEqualTo", "assertThat", "getDepot", "containsExactly", "assertThat", "getDepotList", "hasSize", "assertThat", "getVisitList", "containsExactly", "assertThat", "getVisitList", "isEqualTo", "assertThat", "getLocation", "get", "getVisitList", "getLocation", "solutionFromVisits", "singletonList", "emptyList", "isEmpty", "assertThat", "getDepotList"]}, "focal_class": {"identifier": "SolutionFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SolutionFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " SolutionFactory()", "full_signature": "private  SolutionFactory()", "class_method_signature": "SolutionFactory.SolutionFactory()", "testcase": false, "constructor": true}, {"identifier": "emptySolution", "parameters": "()", "modifiers": "public static", "return": "VehicleRoutingSolution", "signature": "VehicleRoutingSolution emptySolution()", "full_signature": "public static VehicleRoutingSolution emptySolution()", "class_method_signature": "SolutionFactory.emptySolution()", "testcase": false, "constructor": false}, {"identifier": "solutionFromVisits", "parameters": "(\n            List<PlanningVehicle> vehicles,\n            PlanningDepot depot,\n            List<PlanningVisit> visits)", "modifiers": "public static", "return": "VehicleRoutingSolution", "signature": "VehicleRoutingSolution solutionFromVisits(\n            List<PlanningVehicle> vehicles,\n            PlanningDepot depot,\n            List<PlanningVisit> visits)", "full_signature": "public static VehicleRoutingSolution solutionFromVisits(\n            List<PlanningVehicle> vehicles,\n            PlanningDepot depot,\n            List<PlanningVisit> visits)", "class_method_signature": "SolutionFactory.solutionFromVisits(\n            List<PlanningVehicle> vehicles,\n            PlanningDepot depot,\n            List<PlanningVisit> visits)", "testcase": false, "constructor": false}, {"identifier": "moveAllVehiclesToDepot", "parameters": "(List<PlanningVehicle> vehicles, PlanningDepot depot)", "modifiers": "private static", "return": "void", "signature": "void moveAllVehiclesToDepot(List<PlanningVehicle> vehicles, PlanningDepot depot)", "full_signature": "private static void moveAllVehiclesToDepot(List<PlanningVehicle> vehicles, PlanningDepot depot)", "class_method_signature": "SolutionFactory.moveAllVehiclesToDepot(List<PlanningVehicle> vehicles, PlanningDepot depot)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/domain/SolutionFactory.java"}, "focal_method": {"identifier": "solutionFromVisits", "parameters": "(\n            List<PlanningVehicle> vehicles,\n            PlanningDepot depot,\n            List<PlanningVisit> visits)", "modifiers": "public static", "return": "VehicleRoutingSolution", "body": "public static VehicleRoutingSolution solutionFromVisits(\n            List<PlanningVehicle> vehicles,\n            PlanningDepot depot,\n            List<PlanningVisit> visits) {\n        VehicleRoutingSolution solution = new VehicleRoutingSolution();\n        solution.setVehicleList(new ArrayList<>(vehicles));\n        solution.setDepotList(new ArrayList<>(1));\n        if (depot != null) {\n            solution.getDepotList().add(depot);\n            moveAllVehiclesToDepot(vehicles, depot);\n        }\n        solution.setVisitList(new ArrayList<>(visits));\n        solution.setScore(HardSoftLongScore.ZERO);\n        return solution;\n    }", "signature": "VehicleRoutingSolution solutionFromVisits(\n            List<PlanningVehicle> vehicles,\n            PlanningDepot depot,\n            List<PlanningVisit> visits)", "full_signature": "public static VehicleRoutingSolution solutionFromVisits(\n            List<PlanningVehicle> vehicles,\n            PlanningDepot depot,\n            List<PlanningVisit> visits)", "class_method_signature": "SolutionFactory.solutionFromVisits(\n            List<PlanningVehicle> vehicles,\n            PlanningDepot depot,\n            List<PlanningVisit> visits)", "testcase": false, "constructor": false, "invocations": ["setVehicleList", "setDepotList", "add", "getDepotList", "moveAllVehiclesToDepot", "setVisitList", "setScore"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}