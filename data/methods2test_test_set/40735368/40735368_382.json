{"test_class": {"identifier": "WFSDataStoreFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WFSDataStoreFactory dsf;", "modifier": "private", "type": "WFSDataStoreFactory", "declarator": "dsf", "var_name": "dsf"}, {"original_string": "private Map<String, Serializable> params;", "modifier": "private", "type": "Map<String, Serializable>", "declarator": "params", "var_name": "params"}], "file": "modules/unsupported/wfs/src/test/java/org/geotools/data/wfs/WFSDataStoreFactoryTest.java"}, "test_case": {"identifier": "testCreateCapabilities", "parameters": "()", "modifiers": "@SuppressWarnings(\"nls\") @Test public", "return": "void", "body": "@SuppressWarnings(\"nls\")\n    @Test\n    public void testCreateCapabilities() throws MalformedURLException, UnsupportedEncodingException {\n        final String parametrizedUrl = \"https://excise.pyr.ec.gc.ca:8081/cgi-bin/mapserv.exe?map=/LocalApps/Mapsurfer/PYRWQMP.map&service=WFS&version=1.0.0&request=GetCapabilities\";\n        URL url = WFSDataStoreFactory.createGetCapabilitiesRequest(new URL(parametrizedUrl));\n        assertNotNull(url);\n        assertEquals(\"https\", url.getProtocol());\n        assertEquals(\"excise.pyr.ec.gc.ca\", url.getHost());\n        assertEquals(8081, url.getPort());\n        assertEquals(\"/cgi-bin/mapserv.exe\", url.getPath());\n\n        String query = url.getQuery();\n        assertNotNull(query);\n\n        Map<String, String> kvpMap = new HashMap<String, String>();\n        String[] kvpPairs = query.split(\"&\");\n        for (String kvp : kvpPairs) {\n            assertTrue(kvp.indexOf('=') > 0);\n            String[] split = kvp.split(\"=\");\n            String param = split[0];\n            String value = split[1];\n            value = URLDecoder.decode(value, \"UTF-8\");\n            assertFalse(kvpMap.containsKey(param));\n            kvpMap.put(param.toUpperCase(), value);\n        }\n\n        assertEquals(\"/LocalApps/Mapsurfer/PYRWQMP.map\", kvpMap.get(\"MAP\"));\n        assertEquals(\"GetCapabilities\", kvpMap.get(\"REQUEST\"));\n        assertEquals(\"WFS\", kvpMap.get(\"SERVICE\"));\n        assertEquals(\"1.0.0\", kvpMap.get(\"VERSION\"));\n    }", "signature": "void testCreateCapabilities()", "full_signature": "@SuppressWarnings(\"nls\") @Test public void testCreateCapabilities()", "class_method_signature": "WFSDataStoreFactoryTest.testCreateCapabilities()", "testcase": true, "constructor": false, "invocations": ["createGetCapabilitiesRequest", "assertNotNull", "assertEquals", "getProtocol", "assertEquals", "getHost", "assertEquals", "getPort", "assertEquals", "getPath", "getQuery", "assertNotNull", "split", "assertTrue", "indexOf", "split", "decode", "assertFalse", "containsKey", "put", "toUpperCase", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "WFSDataStoreFactory", "superclass": "", "interfaces": "implements DataStoreFactorySpi", "fields": [{"original_string": "private static final Logger logger = Logging.getLogger(\"org.geotools.data.wfs\");", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logging.getLogger(\"org.geotools.data.wfs\")", "var_name": "logger"}, {"original_string": "private HTTPClient http = new SimpleHttpClient();", "modifier": "private", "type": "HTTPClient", "declarator": "http = new SimpleHttpClient()", "var_name": "http"}, {"original_string": "private static final WFSFactoryParam<?>[] parametersInfo = new WFSFactoryParam[17];", "modifier": "private static final", "type": "WFSFactoryParam<?>[]", "declarator": "parametersInfo = new WFSFactoryParam[17]", "var_name": "parametersInfo"}, {"original_string": "public static final WFSFactoryParam<URL> URL;", "modifier": "public static final", "type": "WFSFactoryParam<URL>", "declarator": "URL", "var_name": "URL"}, {"original_string": "public static final WFSFactoryParam<Boolean> PROTOCOL;", "modifier": "public static final", "type": "WFSFactoryParam<Boolean>", "declarator": "PROTOCOL", "var_name": "PROTOCOL"}, {"original_string": "public static final WFSFactoryParam<String> USERNAME;", "modifier": "public static final", "type": "WFSFactoryParam<String>", "declarator": "USERNAME", "var_name": "USERNAME"}, {"original_string": "public static final WFSFactoryParam<String> PASSWORD;", "modifier": "public static final", "type": "WFSFactoryParam<String>", "declarator": "PASSWORD", "var_name": "PASSWORD"}, {"original_string": "public static final WFSFactoryParam<String> ENCODING;", "modifier": "public static final", "type": "WFSFactoryParam<String>", "declarator": "ENCODING", "var_name": "ENCODING"}, {"original_string": "public static final WFSFactoryParam<Integer> TIMEOUT;", "modifier": "public static final", "type": "WFSFactoryParam<Integer>", "declarator": "TIMEOUT", "var_name": "TIMEOUT"}, {"original_string": "public static final WFSFactoryParam<Integer> BUFFER_SIZE;", "modifier": "public static final", "type": "WFSFactoryParam<Integer>", "declarator": "BUFFER_SIZE", "var_name": "BUFFER_SIZE"}, {"original_string": "public static final WFSFactoryParam<Boolean> TRY_GZIP;", "modifier": "public static final", "type": "WFSFactoryParam<Boolean>", "declarator": "TRY_GZIP", "var_name": "TRY_GZIP"}, {"original_string": "public static final WFSFactoryParam<Boolean> LENIENT;", "modifier": "public static final", "type": "WFSFactoryParam<Boolean>", "declarator": "LENIENT", "var_name": "LENIENT"}, {"original_string": "public static final WFSFactoryParam<Integer> MAXFEATURES;", "modifier": "public static final", "type": "WFSFactoryParam<Integer>", "declarator": "MAXFEATURES", "var_name": "MAXFEATURES"}, {"original_string": "public static final WFSFactoryParam<Integer> FILTER_COMPLIANCE;", "modifier": "public static final", "type": "WFSFactoryParam<Integer>", "declarator": "FILTER_COMPLIANCE", "var_name": "FILTER_COMPLIANCE"}, {"original_string": "public static final WFSFactoryParam<String> WFS_STRATEGY;", "modifier": "public static final", "type": "WFSFactoryParam<String>", "declarator": "WFS_STRATEGY", "var_name": "WFS_STRATEGY"}, {"original_string": "public static final WFSFactoryParam<String> NAMESPACE;", "modifier": "public static final", "type": "WFSFactoryParam<String>", "declarator": "NAMESPACE", "var_name": "NAMESPACE"}, {"original_string": "public static final WFSFactoryParam<Boolean> USEDEFAULTSRS;", "modifier": "public static final", "type": "WFSFactoryParam<Boolean>", "declarator": "USEDEFAULTSRS", "var_name": "USEDEFAULTSRS"}, {"original_string": "public static final WFSFactoryParam<String> AXIS_ORDER;", "modifier": "public static final", "type": "WFSFactoryParam<String>", "declarator": "AXIS_ORDER", "var_name": "AXIS_ORDER"}, {"original_string": "public static final WFSFactoryParam<String> AXIS_ORDER_FILTER;", "modifier": "public static final", "type": "WFSFactoryParam<String>", "declarator": "AXIS_ORDER_FILTER", "var_name": "AXIS_ORDER_FILTER"}, {"original_string": "public static final WFSFactoryParam<String> OUTPUTFORMAT;", "modifier": "public static final", "type": "WFSFactoryParam<String>", "declarator": "OUTPUTFORMAT", "var_name": "OUTPUTFORMAT"}], "methods": [{"identifier": "createDataStore", "parameters": "(final Map params)", "modifiers": "public", "return": "WFSDataStore", "signature": "WFSDataStore createDataStore(final Map params)", "full_signature": "public WFSDataStore createDataStore(final Map params)", "class_method_signature": "WFSDataStoreFactory.createDataStore(final Map params)", "testcase": false, "constructor": false}, {"identifier": "parseCapabilities", "parameters": "(final byte[] wfsCapabilitiesRawData)", "modifiers": "private static", "return": "Document", "signature": "Document parseCapabilities(final byte[] wfsCapabilitiesRawData)", "full_signature": "private static Document parseCapabilities(final byte[] wfsCapabilitiesRawData)", "class_method_signature": "WFSDataStoreFactory.parseCapabilities(final byte[] wfsCapabilitiesRawData)", "testcase": false, "constructor": false}, {"identifier": "determineCorrectStrategy", "parameters": "(URL getCapabilitiesRequest, Document capabilitiesDoc, String override)", "modifiers": "static", "return": "WFSStrategy", "signature": "WFSStrategy determineCorrectStrategy(URL getCapabilitiesRequest, Document capabilitiesDoc, String override)", "full_signature": "static WFSStrategy determineCorrectStrategy(URL getCapabilitiesRequest, Document capabilitiesDoc, String override)", "class_method_signature": "WFSDataStoreFactory.determineCorrectStrategy(URL getCapabilitiesRequest, Document capabilitiesDoc, String override)", "testcase": false, "constructor": false}, {"identifier": "setHTTPClient", "parameters": "(HTTPClient http)", "modifiers": "public", "return": "void", "signature": "void setHTTPClient(HTTPClient http)", "full_signature": "public void setHTTPClient(HTTPClient http)", "class_method_signature": "WFSDataStoreFactory.setHTTPClient(HTTPClient http)", "testcase": false, "constructor": false}, {"identifier": "createNewDataStore", "parameters": "(final Map params)", "modifiers": "public", "return": "DataStore", "signature": "DataStore createNewDataStore(final Map params)", "full_signature": "public DataStore createNewDataStore(final Map params)", "class_method_signature": "WFSDataStoreFactory.createNewDataStore(final Map params)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDescription()", "full_signature": "public String getDescription()", "class_method_signature": "WFSDataStoreFactory.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getParametersInfo", "parameters": "()", "modifiers": "public", "return": "Param[]", "signature": "Param[] getParametersInfo()", "full_signature": "public Param[] getParametersInfo()", "class_method_signature": "WFSDataStoreFactory.getParametersInfo()", "testcase": false, "constructor": false}, {"identifier": "canProcess", "parameters": "(final Map params)", "modifiers": "public", "return": "boolean", "signature": "boolean canProcess(final Map params)", "full_signature": "public boolean canProcess(final Map params)", "class_method_signature": "WFSDataStoreFactory.canProcess(final Map params)", "testcase": false, "constructor": false}, {"identifier": "getDisplayName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDisplayName()", "full_signature": "public String getDisplayName()", "class_method_signature": "WFSDataStoreFactory.getDisplayName()", "testcase": false, "constructor": false}, {"identifier": "isAvailable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAvailable()", "full_signature": "public boolean isAvailable()", "class_method_signature": "WFSDataStoreFactory.isAvailable()", "testcase": false, "constructor": false}, {"identifier": "createGetCapabilitiesRequest", "parameters": "(URL host, Version version)", "modifiers": "public static", "return": "URL", "signature": "URL createGetCapabilitiesRequest(URL host, Version version)", "full_signature": "public static URL createGetCapabilitiesRequest(URL host, Version version)", "class_method_signature": "WFSDataStoreFactory.createGetCapabilitiesRequest(URL host, Version version)", "testcase": false, "constructor": false}, {"identifier": "createGetCapabilitiesRequest", "parameters": "(final URL host)", "modifiers": "public static", "return": "URL", "signature": "URL createGetCapabilitiesRequest(final URL host)", "full_signature": "public static URL createGetCapabilitiesRequest(final URL host)", "class_method_signature": "WFSDataStoreFactory.createGetCapabilitiesRequest(final URL host)", "testcase": false, "constructor": false}, {"identifier": "loadCapabilities", "parameters": "(final URL capabilitiesUrl, HTTPClient http)", "modifiers": "", "return": "byte[]", "signature": "byte[] loadCapabilities(final URL capabilitiesUrl, HTTPClient http)", "full_signature": " byte[] loadCapabilities(final URL capabilitiesUrl, HTTPClient http)", "class_method_signature": "WFSDataStoreFactory.loadCapabilities(final URL capabilitiesUrl, HTTPClient http)", "testcase": false, "constructor": false}, {"identifier": "parseCapabilities", "parameters": "(InputStream inputStream)", "modifiers": "static", "return": "Document", "signature": "Document parseCapabilities(InputStream inputStream)", "full_signature": "static Document parseCapabilities(InputStream inputStream)", "class_method_signature": "WFSDataStoreFactory.parseCapabilities(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getImplementationHints", "parameters": "()", "modifiers": "public", "return": "Map<java.awt.RenderingHints.Key, ?>", "signature": "Map<java.awt.RenderingHints.Key, ?> getImplementationHints()", "full_signature": "public Map<java.awt.RenderingHints.Key, ?> getImplementationHints()", "class_method_signature": "WFSDataStoreFactory.getImplementationHints()", "testcase": false, "constructor": false}], "file": "modules/unsupported/wfs/src/main/java/org/geotools/data/wfs/WFSDataStoreFactory.java"}, "focal_method": {"identifier": "createGetCapabilitiesRequest", "parameters": "(URL host, Version version)", "modifiers": "public static", "return": "URL", "body": "public static URL createGetCapabilitiesRequest(URL host, Version version) {\n        if (host == null) {\n            throw new NullPointerException(\"null url\");\n        }\n        if (version == null) {\n            throw new NullPointerException(\"version\");\n        }\n\n        Map<String, String> getCapsKvp = new HashMap<String, String>();\n        getCapsKvp.put(\"SERVICE\", \"WFS\");\n        getCapsKvp.put(\"REQUEST\", \"GetCapabilities\");\n        getCapsKvp.put(\"VERSION\", version.toString());\n        URL getcapsUrl;\n        try {\n            getcapsUrl = createUrl(host, getCapsKvp);\n        } catch (MalformedURLException e) {\n            logger.log(Level.WARNING, \"Can't create GetCapabilities request from \" + host, e);\n            throw new RuntimeException(e);\n        }\n\n        return getcapsUrl;\n    }", "signature": "URL createGetCapabilitiesRequest(URL host, Version version)", "full_signature": "public static URL createGetCapabilitiesRequest(URL host, Version version)", "class_method_signature": "WFSDataStoreFactory.createGetCapabilitiesRequest(URL host, Version version)", "testcase": false, "constructor": false, "invocations": ["put", "put", "put", "toString", "createUrl", "log"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}