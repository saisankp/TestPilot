{"test_class": {"identifier": "NamespaceMappingRequestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NS_FOO_PREFIX = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "NS_FOO_PREFIX = \"foo\"", "var_name": "NS_FOO_PREFIX"}, {"original_string": "private static final String NS_BAR_PREFIX = \"bar\";", "modifier": "private static final", "type": "String", "declarator": "NS_BAR_PREFIX = \"bar\"", "var_name": "NS_BAR_PREFIX"}, {"original_string": "private static final String NS_FOO_URI = \"http://foo.com\";", "modifier": "private static final", "type": "String", "declarator": "NS_FOO_URI = \"http://foo.com\"", "var_name": "NS_FOO_URI"}, {"original_string": "private static final String NS_BAR_URI = \"http://bar.com\";", "modifier": "private static final", "type": "String", "declarator": "NS_BAR_URI = \"http://bar.com\"", "var_name": "NS_BAR_URI"}, {"original_string": "private final JcrNs NS_FOO = JcrNs.create(NS_FOO_PREFIX, NS_FOO_URI);", "modifier": "private final", "type": "JcrNs", "declarator": "NS_FOO = JcrNs.create(NS_FOO_PREFIX, NS_FOO_URI)", "var_name": "NS_FOO"}, {"original_string": "private final JcrNs NS_BAR = JcrNs.create(NS_BAR_PREFIX, NS_BAR_URI);", "modifier": "private final", "type": "JcrNs", "declarator": "NS_BAR = JcrNs.create(NS_BAR_PREFIX, NS_BAR_URI)", "var_name": "NS_BAR"}, {"original_string": "private final List<JcrNs> addNs = Arrays.asList(NS_FOO, NS_BAR);", "modifier": "private final", "type": "List<JcrNs>", "declarator": "addNs = Arrays.asList(NS_FOO, NS_BAR)", "var_name": "addNs"}, {"original_string": "private final NamespaceMapping mapping = JsonCnd.toNamespaceMapping(addNs);", "modifier": "private final", "type": "NamespaceMapping", "declarator": "mapping = JsonCnd.toNamespaceMapping(addNs)", "var_name": "mapping"}, {"original_string": "private final NamePathResolver resolver = new DefaultNamePathResolver(mapping);", "modifier": "private final", "type": "NamePathResolver", "declarator": "resolver = new DefaultNamePathResolver(mapping)", "var_name": "resolver"}], "file": "core/src/test/java/net/adamcin/oakpal/core/NamespaceMappingRequestTest.java"}, "test_case": {"identifier": "testBuildWithJCRName_uri", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildWithJCRName_uri() {\n        final NamespaceMappingRequest request = builder().withJCRName(String.format(\"{%s}folder\", NS_FOO_URI)).build();\n        assertTrue(\"foo mapping is retained\",\n                request.resolveToJcrNs(mapping).stream().flatMap(Result::stream)\n                        .anyMatch(inferTest1(NS_FOO::equals)));\n        assertFalse(\"non-foo mappings are not retained\",\n                request.resolveToJcrNs(mapping).stream().flatMap(Result::stream)\n                        .anyMatch(inferTest1(NS_FOO::equals).negate()));\n    }", "signature": "void testBuildWithJCRName_uri()", "full_signature": "@Test public void testBuildWithJCRName_uri()", "class_method_signature": "NamespaceMappingRequestTest.testBuildWithJCRName_uri()", "testcase": true, "constructor": false, "invocations": ["build", "withJCRName", "builder", "format", "assertTrue", "anyMatch", "flatMap", "stream", "resolveToJcrNs", "inferTest1", "assertFalse", "anyMatch", "flatMap", "stream", "resolveToJcrNs", "negate", "inferTest1"]}, "focal_class": {"identifier": "NamespaceMappingRequest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Collection<String> BUILTIN_PREFIXES = NamespaceConstants.RESERVED_PREFIXES;", "modifier": "private static final", "type": "Collection<String>", "declarator": "BUILTIN_PREFIXES = NamespaceConstants.RESERVED_PREFIXES", "var_name": "BUILTIN_PREFIXES"}, {"original_string": "private static final Collection<String> BUILTIN_URIS = NamespaceConstants.RESERVED_URIS;", "modifier": "private static final", "type": "Collection<String>", "declarator": "BUILTIN_URIS = NamespaceConstants.RESERVED_URIS", "var_name": "BUILTIN_URIS"}, {"original_string": "private final Set<String> retainPrefixes;", "modifier": "private final", "type": "Set<String>", "declarator": "retainPrefixes", "var_name": "retainPrefixes"}, {"original_string": "private final Set<String> retainUris;", "modifier": "private final", "type": "Set<String>", "declarator": "retainUris", "var_name": "retainUris"}], "methods": [{"identifier": "NamespaceMappingRequest", "parameters": "(final @NotNull Set<String> retainPrefixes,\n                                    final @NotNull Set<String> retainUris,\n                                    final boolean retainBuiltins)", "modifiers": "private", "return": "", "signature": " NamespaceMappingRequest(final @NotNull Set<String> retainPrefixes,\n                                    final @NotNull Set<String> retainUris,\n                                    final boolean retainBuiltins)", "full_signature": "private  NamespaceMappingRequest(final @NotNull Set<String> retainPrefixes,\n                                    final @NotNull Set<String> retainUris,\n                                    final boolean retainBuiltins)", "class_method_signature": "NamespaceMappingRequest.NamespaceMappingRequest(final @NotNull Set<String> retainPrefixes,\n                                    final @NotNull Set<String> retainUris,\n                                    final boolean retainBuiltins)", "testcase": false, "constructor": true}, {"identifier": "resolveToJcrNs", "parameters": "(final @NotNull NamespaceMapping mapping)", "modifiers": "public", "return": "List<Result<JcrNs>>", "signature": "List<Result<JcrNs>> resolveToJcrNs(final @NotNull NamespaceMapping mapping)", "full_signature": "public List<Result<JcrNs>> resolveToJcrNs(final @NotNull NamespaceMapping mapping)", "class_method_signature": "NamespaceMappingRequest.resolveToJcrNs(final @NotNull NamespaceMapping mapping)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/NamespaceMappingRequest.java"}, "focal_method": {"identifier": "resolveToJcrNs", "parameters": "(final @NotNull NamespaceMapping mapping)", "modifiers": "public", "return": "List<Result<JcrNs>>", "body": "public List<Result<JcrNs>> resolveToJcrNs(final @NotNull NamespaceMapping mapping) {\n        final List<Result<JcrNs>> results = new ArrayList<>();\n\n        retainPrefixes.stream()\n                .map(result1(prefix -> JcrNs.create(prefix, mapping.getURI(prefix))))\n                .forEach(results::add);\n\n        final Set<String> retainedUris = results.stream().flatMap(Result::stream).map(JcrNs::getUri)\n                .collect(Collectors.toSet());\n\n        retainUris.stream()\n                .filter(inSet(retainedUris).negate())\n                .map(result1(uri -> JcrNs.create(mapping.getPrefix(uri), uri)))\n                .forEach(results::add);\n\n        return results;\n    }", "signature": "List<Result<JcrNs>> resolveToJcrNs(final @NotNull NamespaceMapping mapping)", "full_signature": "public List<Result<JcrNs>> resolveToJcrNs(final @NotNull NamespaceMapping mapping)", "class_method_signature": "NamespaceMappingRequest.resolveToJcrNs(final @NotNull NamespaceMapping mapping)", "testcase": false, "constructor": false, "invocations": ["forEach", "map", "stream", "result1", "create", "getURI", "collect", "map", "flatMap", "stream", "toSet", "forEach", "map", "filter", "stream", "negate", "inSet", "result1", "create", "getPrefix"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}