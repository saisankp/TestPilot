{"test_class": {"identifier": "TransactionsWebServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TransactionsService transactionsService = mock(TransactionsService.class);", "modifier": "private final", "type": "TransactionsService", "declarator": "transactionsService = mock(TransactionsService.class)", "var_name": "transactionsService"}, {"original_string": "private final TransactionsWebService webService = new TransactionsWebService(transactionsService);", "modifier": "private final", "type": "TransactionsWebService", "declarator": "webService = new TransactionsWebService(transactionsService)", "var_name": "webService"}, {"original_string": "private final Transaction transaction1 = MockTransaction.create(\"2015-01-01\", \"abc\", 123);", "modifier": "private final", "type": "Transaction", "declarator": "transaction1 = MockTransaction.create(\"2015-01-01\", \"abc\", 123)", "var_name": "transaction1"}, {"original_string": "private final Transaction transaction2 = MockTransaction.create(\"2015-01-02\", \"abc\", 456);", "modifier": "private final", "type": "Transaction", "declarator": "transaction2 = MockTransaction.create(\"2015-01-02\", \"abc\", 456)", "var_name": "transaction2"}, {"original_string": "private final Transactions transactions = new Transactions(transaction1, transaction2);", "modifier": "private final", "type": "Transactions", "declarator": "transactions = new Transactions(transaction1, transaction2)", "var_name": "transactions"}], "file": "services/src/test/java/com/greensopinion/finance/services/web/TransactionsWebServiceTest.java"}, "test_case": {"identifier": "putCategory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void putCategory() {\n\t\twebService.putCategory(transaction1.getId(), new CategoryModel(\"a category\"));\n\n\t\tArgumentCaptor<Transactions> transactionsCaptor = ArgumentCaptor.forClass(Transactions.class);\n\t\tverify(transactionsService).update(transactionsCaptor.capture());\n\t\tTransactions updated = transactionsCaptor.getValue();\n\n\t\tTransaction transaction = updated.getTransactions().get(0);\n\t\tassertEquals(transaction1, transaction);\n\t\tassertEquals(transaction1.getId(), transaction.getId());\n\t\tassertEquals(\"a category\", transaction.getCategoryName());\n\t}", "signature": "void putCategory()", "full_signature": "@Test public void putCategory()", "class_method_signature": "TransactionsWebServiceTest.putCategory()", "testcase": true, "constructor": false, "invocations": ["putCategory", "getId", "forClass", "update", "verify", "capture", "getValue", "get", "getTransactions", "assertEquals", "assertEquals", "getId", "getId", "assertEquals", "getCategoryName"]}, "focal_class": {"identifier": "TransactionsWebService", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String BASE_PATH = \"/transactions\";", "modifier": "static final", "type": "String", "declarator": "BASE_PATH = \"/transactions\"", "var_name": "BASE_PATH"}, {"original_string": "private final TransactionsService transactionsService;", "modifier": "private final", "type": "TransactionsService", "declarator": "transactionsService", "var_name": "transactionsService"}], "methods": [{"identifier": "TransactionsWebService", "parameters": "(TransactionsService transactionsService)", "modifiers": "@Inject", "return": "", "signature": " TransactionsWebService(TransactionsService transactionsService)", "full_signature": "@Inject  TransactionsWebService(TransactionsService transactionsService)", "class_method_signature": "TransactionsWebService.TransactionsWebService(TransactionsService transactionsService)", "testcase": false, "constructor": true}, {"identifier": "putCategory", "parameters": "(@PathParam(\"transactionId\") String transactionId, CategoryModel category)", "modifiers": "@PUT @Path(\"{transactionId}/category\") public", "return": "void", "signature": "void putCategory(@PathParam(\"transactionId\") String transactionId, CategoryModel category)", "full_signature": "@PUT @Path(\"{transactionId}/category\") public void putCategory(@PathParam(\"transactionId\") String transactionId, CategoryModel category)", "class_method_signature": "TransactionsWebService.putCategory(@PathParam(\"transactionId\") String transactionId, CategoryModel category)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/greensopinion/finance/services/web/TransactionsWebService.java"}, "focal_method": {"identifier": "putCategory", "parameters": "(@PathParam(\"transactionId\") String transactionId, CategoryModel category)", "modifiers": "@PUT @Path(\"{transactionId}/category\") public", "return": "void", "body": "@PUT\n\t@Path(\"{transactionId}/category\")\n\tpublic void putCategory(@PathParam(\"transactionId\") String transactionId, CategoryModel category) {\n\t\tvalidateRequired(transactionId, \"Transaction id\");\n\t\tvalidateNotNull(category, \"Category must be provided.\");\n\t\tvalidateRequired(category.getName(), \"Category name\");\n\n\t\tTransactions transactions = transactionsService.retrieve();\n\t\tTransaction transaction = transactions.byId(transactionId);\n\t\tvalidate(transaction != null, format(\"Transaction with id \\\"{0}\\\" not found.\", transactionId));\n\n\t\tTransaction categorized = transaction.withCategoryName(category.getName());\n\n\t\ttransactionsService.update(transactions.copyWithReplacement(categorized));\n\t}", "signature": "void putCategory(@PathParam(\"transactionId\") String transactionId, CategoryModel category)", "full_signature": "@PUT @Path(\"{transactionId}/category\") public void putCategory(@PathParam(\"transactionId\") String transactionId, CategoryModel category)", "class_method_signature": "TransactionsWebService.putCategory(@PathParam(\"transactionId\") String transactionId, CategoryModel category)", "testcase": false, "constructor": false, "invocations": ["validateRequired", "validateNotNull", "validateRequired", "getName", "retrieve", "byId", "validate", "format", "withCategoryName", "getName", "update", "copyWithReplacement"]}, "repository": {"repo_id": 54854741, "url": "https://github.com/greensopinion/greenbeans", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 30, "size": 1684, "license": "licensed"}}