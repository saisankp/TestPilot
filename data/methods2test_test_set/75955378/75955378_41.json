{"test_class": {"identifier": "RegexFilterOperationTest", "superclass": "extends OperationTest", "interfaces": "", "fields": [], "file": "operations/src/test/java/com/nextdoor/bender/operation/filter/RegexFilterOperationTest.java"}, "test_case": {"identifier": "testInvalidPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInvalidPath() throws IOException {\n    JsonParser parser = new JsonParser();\n    JsonElement input = parser.parse(getResourceString(\"filter_input.json\"));\n    GenericJsonEvent devent = new GenericJsonEvent(input.getAsJsonObject());\n\n    InternalEvent ievent = new InternalEvent(\"\", null, 0);\n    ievent.setEventObj(devent);\n\n    Pattern pattern = Pattern.compile(\"(val)\");\n    String path = \"[]\";\n    Boolean match = false;\n\n    RegexFilterOperation op = new RegexFilterOperation(pattern, path, match);\n    boolean filter = op.test(ievent);\n\n    assertFalse(filter);\n  }", "signature": "void testInvalidPath()", "full_signature": "@Test public void testInvalidPath()", "class_method_signature": "RegexFilterOperationTest.testInvalidPath()", "testcase": true, "constructor": false, "invocations": ["parse", "getResourceString", "getAsJsonObject", "setEventObj", "compile", "test", "assertFalse"]}, "focal_class": {"identifier": "RegexFilterOperation", "superclass": "", "interfaces": "implements FilterOperation", "fields": [{"original_string": "private final Pattern pattern;", "modifier": "private final", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private final String path;", "modifier": "private final", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private final Boolean exclude;", "modifier": "private final", "type": "Boolean", "declarator": "exclude", "var_name": "exclude"}], "methods": [{"identifier": "RegexFilterOperation", "parameters": "(Pattern pattern, String path, Boolean exclude)", "modifiers": "public", "return": "", "signature": " RegexFilterOperation(Pattern pattern, String path, Boolean exclude)", "full_signature": "public  RegexFilterOperation(Pattern pattern, String path, Boolean exclude)", "class_method_signature": "RegexFilterOperation.RegexFilterOperation(Pattern pattern, String path, Boolean exclude)", "testcase": false, "constructor": true}, {"identifier": "test", "parameters": "(InternalEvent ievent)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean test(InternalEvent ievent)", "full_signature": "@Override public boolean test(InternalEvent ievent)", "class_method_signature": "RegexFilterOperation.test(InternalEvent ievent)", "testcase": false, "constructor": false}], "file": "operations/src/main/java/com/nextdoor/bender/operation/filter/RegexFilterOperation.java"}, "focal_method": {"identifier": "test", "parameters": "(InternalEvent ievent)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean test(InternalEvent ievent) {\n    DeserializedEvent devent = ievent.getEventObj();\n    if (devent == null) {\n      return false;\n    }\n\n    boolean found;\n    try {\n      String field = devent.getFieldAsString(this.path);\n      found = this.pattern.matcher(field).matches();\n    } catch (FieldNotFoundException e) {\n      found = false;\n    }\n\n    /*\n     * When false is returned then the event is excluded from the stream.\n     */\n    return this.exclude != found;\n  }", "signature": "boolean test(InternalEvent ievent)", "full_signature": "@Override public boolean test(InternalEvent ievent)", "class_method_signature": "RegexFilterOperation.test(InternalEvent ievent)", "testcase": false, "constructor": false, "invocations": ["getEventObj", "getFieldAsString", "matches", "matcher"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}