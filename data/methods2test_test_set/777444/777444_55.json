{"test_class": {"identifier": "AgentServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServletContext context;", "modifier": "private", "type": "ServletContext", "declarator": "context", "var_name": "context"}, {"original_string": "private ServletConfig config;", "modifier": "private", "type": "ServletConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private HttpServletRequest request;", "modifier": "private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private HttpServletResponse response;", "modifier": "private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private AgentServlet servlet;", "modifier": "private", "type": "AgentServlet", "declarator": "servlet", "var_name": "servlet"}], "file": "agent/core/src/test/java/org/jolokia/http/AgentServletTest.java"}, "test_case": {"identifier": "initWithAgentDiscoveryAndGivenUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void initWithAgentDiscoveryAndGivenUrl() throws ServletException, IOException, InterruptedException {\n        checkMulticastAvailable();\n        String url = \"http://localhost:8080/jolokia\";\n        prepareStandardInitialisation(ConfigKey.DISCOVERY_AGENT_URL.getKeyValue(), url);\n        String multicastGroup = ConfigKey.MULTICAST_GROUP.getDefaultValue();\n        int multicastPort = Integer.valueOf(ConfigKey.MULTICAST_PORT.getDefaultValue());\n        // Wait listening thread to warm up\n        Thread.sleep(1000);\n        try {\n            JolokiaDiscovery discovery = new JolokiaDiscovery(\"test\", new QuietLogHandler());\n            List<JSONObject> in = discovery.lookupAgentsWithTimeoutAndMulticastAddress(500, multicastGroup, multicastPort);\n            for (JSONObject json : in) {\n                if (json.get(\"url\") != null && json.get(\"url\").equals(url)) {\n                    return;\n                }\n            }\n            fail(\"No agent found\");\n        } finally {\n            servlet.destroy();\n        }\n    }", "signature": "void initWithAgentDiscoveryAndGivenUrl()", "full_signature": "@Test public void initWithAgentDiscoveryAndGivenUrl()", "class_method_signature": "AgentServletTest.initWithAgentDiscoveryAndGivenUrl()", "testcase": true, "constructor": false, "invocations": ["checkMulticastAvailable", "prepareStandardInitialisation", "getKeyValue", "getDefaultValue", "valueOf", "getDefaultValue", "sleep", "lookupAgentsWithTimeoutAndMulticastAddress", "get", "equals", "get", "fail", "destroy"]}, "focal_class": {"identifier": "AgentServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 42L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 42L", "var_name": "serialVersionUID"}, {"original_string": "private ServletRequestHandler httpGetHandler, httpPostHandler;", "modifier": "private", "type": "ServletRequestHandler", "declarator": "httpGetHandler", "var_name": "httpGetHandler"}, {"original_string": "private BackendManager backendManager;", "modifier": "private", "type": "BackendManager", "declarator": "backendManager", "var_name": "backendManager"}, {"original_string": "private LogHandler logHandler;", "modifier": "private", "type": "LogHandler", "declarator": "logHandler", "var_name": "logHandler"}, {"original_string": "private HttpRequestHandler requestHandler;", "modifier": "private", "type": "HttpRequestHandler", "declarator": "requestHandler", "var_name": "requestHandler"}, {"original_string": "private Restrictor restrictor;", "modifier": "private", "type": "Restrictor", "declarator": "restrictor", "var_name": "restrictor"}, {"original_string": "private String configMimeType;", "modifier": "private", "type": "String", "declarator": "configMimeType", "var_name": "configMimeType"}, {"original_string": "private DiscoveryMulticastResponder discoveryMulticastResponder;", "modifier": "private", "type": "DiscoveryMulticastResponder", "declarator": "discoveryMulticastResponder", "var_name": "discoveryMulticastResponder"}, {"original_string": "private boolean allowDnsReverseLookup;", "modifier": "private", "type": "boolean", "declarator": "allowDnsReverseLookup", "var_name": "allowDnsReverseLookup"}, {"original_string": "private boolean streamingEnabled;", "modifier": "private", "type": "boolean", "declarator": "streamingEnabled", "var_name": "streamingEnabled"}], "methods": [{"identifier": "AgentServlet", "parameters": "()", "modifiers": "public", "return": "", "signature": " AgentServlet()", "full_signature": "public  AgentServlet()", "class_method_signature": "AgentServlet.AgentServlet()", "testcase": false, "constructor": true}, {"identifier": "AgentServlet", "parameters": "(Restrictor pRestrictor)", "modifiers": "public", "return": "", "signature": " AgentServlet(Restrictor pRestrictor)", "full_signature": "public  AgentServlet(Restrictor pRestrictor)", "class_method_signature": "AgentServlet.AgentServlet(Restrictor pRestrictor)", "testcase": false, "constructor": true}, {"identifier": "getLogHandler", "parameters": "()", "modifiers": "protected", "return": "LogHandler", "signature": "LogHandler getLogHandler()", "full_signature": "protected LogHandler getLogHandler()", "class_method_signature": "AgentServlet.getLogHandler()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(ServletConfig pServletConfig)", "modifiers": "@Override public", "return": "void", "signature": "void init(ServletConfig pServletConfig)", "full_signature": "@Override public void init(ServletConfig pServletConfig)", "class_method_signature": "AgentServlet.init(ServletConfig pServletConfig)", "testcase": false, "constructor": false}, {"identifier": "addJsr160DispatcherIfExternallyConfigured", "parameters": "(Configuration pConfig)", "modifiers": "private", "return": "void", "signature": "void addJsr160DispatcherIfExternallyConfigured(Configuration pConfig)", "full_signature": "private void addJsr160DispatcherIfExternallyConfigured(Configuration pConfig)", "class_method_signature": "AgentServlet.addJsr160DispatcherIfExternallyConfigured(Configuration pConfig)", "testcase": false, "constructor": false}, {"identifier": "createRestrictor", "parameters": "(Configuration config)", "modifiers": "protected", "return": "Restrictor", "signature": "Restrictor createRestrictor(Configuration config)", "full_signature": "protected Restrictor createRestrictor(Configuration config)", "class_method_signature": "AgentServlet.createRestrictor(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "initDiscoveryMulticast", "parameters": "(Configuration pConfig)", "modifiers": "private", "return": "void", "signature": "void initDiscoveryMulticast(Configuration pConfig)", "full_signature": "private void initDiscoveryMulticast(Configuration pConfig)", "class_method_signature": "AgentServlet.initDiscoveryMulticast(Configuration pConfig)", "testcase": false, "constructor": false}, {"identifier": "findAgentUrl", "parameters": "(Configuration pConfig)", "modifiers": "private", "return": "String", "signature": "String findAgentUrl(Configuration pConfig)", "full_signature": "private String findAgentUrl(Configuration pConfig)", "class_method_signature": "AgentServlet.findAgentUrl(Configuration pConfig)", "testcase": false, "constructor": false}, {"identifier": "listenForDiscoveryMcRequests", "parameters": "(Configuration pConfig)", "modifiers": "private", "return": "boolean", "signature": "boolean listenForDiscoveryMcRequests(Configuration pConfig)", "full_signature": "private boolean listenForDiscoveryMcRequests(Configuration pConfig)", "class_method_signature": "AgentServlet.listenForDiscoveryMcRequests(Configuration pConfig)", "testcase": false, "constructor": false}, {"identifier": "getOrDefault", "parameters": "(ConfigKey configKey, String sysEnvKey, Configuration pConfig, Class<T> clazz)", "modifiers": "private", "return": "T", "signature": "T getOrDefault(ConfigKey configKey, String sysEnvKey, Configuration pConfig, Class<T> clazz)", "full_signature": "private T getOrDefault(ConfigKey configKey, String sysEnvKey, Configuration pConfig, Class<T> clazz)", "class_method_signature": "AgentServlet.getOrDefault(ConfigKey configKey, String sysEnvKey, Configuration pConfig, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAsType", "parameters": "(String property, Class<T> clazz)", "modifiers": "private", "return": "T", "signature": "T getAsType(String property, Class<T> clazz)", "full_signature": "private T getAsType(String property, Class<T> clazz)", "class_method_signature": "AgentServlet.getAsType(String property, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "createLogHandler", "parameters": "(ServletConfig pServletConfig, final boolean pDebug)", "modifiers": "protected", "return": "LogHandler", "signature": "LogHandler createLogHandler(ServletConfig pServletConfig, final boolean pDebug)", "full_signature": "protected LogHandler createLogHandler(ServletConfig pServletConfig, final boolean pDebug)", "class_method_signature": "AgentServlet.createLogHandler(ServletConfig pServletConfig, final boolean pDebug)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "AgentServlet.destroy()", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "AgentServlet.doGet(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "doPost", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doPost(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doPost(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "AgentServlet.doPost(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "doOptions", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doOptions(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doOptions(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "AgentServlet.doOptions(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(ServletRequestHandler pReqHandler,HttpServletRequest pReq, HttpServletResponse pResp)", "modifiers": "@SuppressWarnings({ \"PMD.AvoidCatchingThrowable\", \"PMD.AvoidInstanceofChecksInCatchClause\" }) private", "return": "void", "signature": "void handle(ServletRequestHandler pReqHandler,HttpServletRequest pReq, HttpServletResponse pResp)", "full_signature": "@SuppressWarnings({ \"PMD.AvoidCatchingThrowable\", \"PMD.AvoidInstanceofChecksInCatchClause\" }) private void handle(ServletRequestHandler pReqHandler,HttpServletRequest pReq, HttpServletResponse pResp)", "class_method_signature": "AgentServlet.handle(ServletRequestHandler pReqHandler,HttpServletRequest pReq, HttpServletResponse pResp)", "testcase": false, "constructor": false}, {"identifier": "handleSecurely", "parameters": "(final ServletRequestHandler pReqHandler, final HttpServletRequest pReq, final HttpServletResponse pResp)", "modifiers": "private", "return": "JSONAware", "signature": "JSONAware handleSecurely(final ServletRequestHandler pReqHandler, final HttpServletRequest pReq, final HttpServletResponse pResp)", "full_signature": "private JSONAware handleSecurely(final ServletRequestHandler pReqHandler, final HttpServletRequest pReq, final HttpServletResponse pResp)", "class_method_signature": "AgentServlet.handleSecurely(final ServletRequestHandler pReqHandler, final HttpServletRequest pReq, final HttpServletResponse pResp)", "testcase": false, "constructor": false}, {"identifier": "getOriginOrReferer", "parameters": "(HttpServletRequest pReq)", "modifiers": "private", "return": "String", "signature": "String getOriginOrReferer(HttpServletRequest pReq)", "full_signature": "private String getOriginOrReferer(HttpServletRequest pReq)", "class_method_signature": "AgentServlet.getOriginOrReferer(HttpServletRequest pReq)", "testcase": false, "constructor": false}, {"identifier": "updateAgentDetailsIfNeeded", "parameters": "(HttpServletRequest pReq)", "modifiers": "private", "return": "void", "signature": "void updateAgentDetailsIfNeeded(HttpServletRequest pReq)", "full_signature": "private void updateAgentDetailsIfNeeded(HttpServletRequest pReq)", "class_method_signature": "AgentServlet.updateAgentDetailsIfNeeded(HttpServletRequest pReq)", "testcase": false, "constructor": false}, {"identifier": "extractServletPath", "parameters": "(HttpServletRequest pReq)", "modifiers": "private", "return": "String", "signature": "String extractServletPath(HttpServletRequest pReq)", "full_signature": "private String extractServletPath(HttpServletRequest pReq)", "class_method_signature": "AgentServlet.extractServletPath(HttpServletRequest pReq)", "testcase": false, "constructor": false}, {"identifier": "getBaseUrl", "parameters": "(String pUrl, String pServletPath)", "modifiers": "private", "return": "String", "signature": "String getBaseUrl(String pUrl, String pServletPath)", "full_signature": "private String getBaseUrl(String pUrl, String pServletPath)", "class_method_signature": "AgentServlet.getBaseUrl(String pUrl, String pServletPath)", "testcase": false, "constructor": false}, {"identifier": "getIpIfPossible", "parameters": "(String pHost)", "modifiers": "private", "return": "String", "signature": "String getIpIfPossible(String pHost)", "full_signature": "private String getIpIfPossible(String pHost)", "class_method_signature": "AgentServlet.getIpIfPossible(String pHost)", "testcase": false, "constructor": false}, {"identifier": "plainReplacement", "parameters": "(String pUrl, String pServletPath)", "modifiers": "private", "return": "String", "signature": "String plainReplacement(String pUrl, String pServletPath)", "full_signature": "private String plainReplacement(String pUrl, String pServletPath)", "class_method_signature": "AgentServlet.plainReplacement(String pUrl, String pServletPath)", "testcase": false, "constructor": false}, {"identifier": "setCorsHeader", "parameters": "(HttpServletRequest pReq, HttpServletResponse pResp)", "modifiers": "private", "return": "void", "signature": "void setCorsHeader(HttpServletRequest pReq, HttpServletResponse pResp)", "full_signature": "private void setCorsHeader(HttpServletRequest pReq, HttpServletResponse pResp)", "class_method_signature": "AgentServlet.setCorsHeader(HttpServletRequest pReq, HttpServletResponse pResp)", "testcase": false, "constructor": false}, {"identifier": "isStreamingEnabled", "parameters": "(HttpServletRequest pReq)", "modifiers": "private", "return": "boolean", "signature": "boolean isStreamingEnabled(HttpServletRequest pReq)", "full_signature": "private boolean isStreamingEnabled(HttpServletRequest pReq)", "class_method_signature": "AgentServlet.isStreamingEnabled(HttpServletRequest pReq)", "testcase": false, "constructor": false}, {"identifier": "newPostHttpRequestHandler", "parameters": "()", "modifiers": "private", "return": "ServletRequestHandler", "signature": "ServletRequestHandler newPostHttpRequestHandler()", "full_signature": "private ServletRequestHandler newPostHttpRequestHandler()", "class_method_signature": "AgentServlet.newPostHttpRequestHandler()", "testcase": false, "constructor": false}, {"identifier": "newGetHttpRequestHandler", "parameters": "()", "modifiers": "private", "return": "ServletRequestHandler", "signature": "ServletRequestHandler newGetHttpRequestHandler()", "full_signature": "private ServletRequestHandler newGetHttpRequestHandler()", "class_method_signature": "AgentServlet.newGetHttpRequestHandler()", "testcase": false, "constructor": false}, {"identifier": "getParameterMap", "parameters": "(HttpServletRequest pReq)", "modifiers": "private", "return": "Map<String, String[]>", "signature": "Map<String, String[]> getParameterMap(HttpServletRequest pReq)", "full_signature": "private Map<String, String[]> getParameterMap(HttpServletRequest pReq)", "class_method_signature": "AgentServlet.getParameterMap(HttpServletRequest pReq)", "testcase": false, "constructor": false}, {"identifier": "initConfig", "parameters": "(ServletConfig pConfig)", "modifiers": "", "return": "Configuration", "signature": "Configuration initConfig(ServletConfig pConfig)", "full_signature": " Configuration initConfig(ServletConfig pConfig)", "class_method_signature": "AgentServlet.initConfig(ServletConfig pConfig)", "testcase": false, "constructor": false}, {"identifier": "sendResponse", "parameters": "(HttpServletResponse pResp, HttpServletRequest pReq, JSONAware pJson)", "modifiers": "private", "return": "void", "signature": "void sendResponse(HttpServletResponse pResp, HttpServletRequest pReq, JSONAware pJson)", "full_signature": "private void sendResponse(HttpServletResponse pResp, HttpServletRequest pReq, JSONAware pJson)", "class_method_signature": "AgentServlet.sendResponse(HttpServletResponse pResp, HttpServletRequest pReq, JSONAware pJson)", "testcase": false, "constructor": false}, {"identifier": "validateCallbackIfGiven", "parameters": "(HttpServletRequest pReq)", "modifiers": "private", "return": "void", "signature": "void validateCallbackIfGiven(HttpServletRequest pReq)", "full_signature": "private void validateCallbackIfGiven(HttpServletRequest pReq)", "class_method_signature": "AgentServlet.validateCallbackIfGiven(HttpServletRequest pReq)", "testcase": false, "constructor": false}, {"identifier": "sendStreamingResponse", "parameters": "(HttpServletResponse pResp, String pCallback, JSONStreamAware pJson)", "modifiers": "private", "return": "void", "signature": "void sendStreamingResponse(HttpServletResponse pResp, String pCallback, JSONStreamAware pJson)", "full_signature": "private void sendStreamingResponse(HttpServletResponse pResp, String pCallback, JSONStreamAware pJson)", "class_method_signature": "AgentServlet.sendStreamingResponse(HttpServletResponse pResp, String pCallback, JSONStreamAware pJson)", "testcase": false, "constructor": false}, {"identifier": "sendAllJSON", "parameters": "(HttpServletResponse pResp, String callback, JSONAware pJson)", "modifiers": "private", "return": "void", "signature": "void sendAllJSON(HttpServletResponse pResp, String callback, JSONAware pJson)", "full_signature": "private void sendAllJSON(HttpServletResponse pResp, String callback, JSONAware pJson)", "class_method_signature": "AgentServlet.sendAllJSON(HttpServletResponse pResp, String callback, JSONAware pJson)", "testcase": false, "constructor": false}, {"identifier": "setNoCacheHeaders", "parameters": "(HttpServletResponse pResp)", "modifiers": "private", "return": "void", "signature": "void setNoCacheHeaders(HttpServletResponse pResp)", "full_signature": "private void setNoCacheHeaders(HttpServletResponse pResp)", "class_method_signature": "AgentServlet.setNoCacheHeaders(HttpServletResponse pResp)", "testcase": false, "constructor": false}, {"identifier": "setContentType", "parameters": "(HttpServletResponse pResp, String pContentType)", "modifiers": "private", "return": "void", "signature": "void setContentType(HttpServletResponse pResp, String pContentType)", "full_signature": "private void setContentType(HttpServletResponse pResp, String pContentType)", "class_method_signature": "AgentServlet.setContentType(HttpServletResponse pResp, String pContentType)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/http/AgentServlet.java"}, "focal_method": {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void destroy() {\n        backendManager.destroy();\n        if (discoveryMulticastResponder != null) {\n            discoveryMulticastResponder.stop();\n            discoveryMulticastResponder = null;\n        }\n        super.destroy();\n    }", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "AgentServlet.destroy()", "testcase": false, "constructor": false, "invocations": ["destroy", "stop", "destroy"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}