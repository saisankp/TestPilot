{"test_class": {"identifier": "UpdaterTreeNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private SdkUpdaterConfigurable myConfigurable;", "modifier": "@Mock private", "type": "SdkUpdaterConfigurable", "declarator": "myConfigurable", "var_name": "myConfigurable"}], "file": "sdk-updates/testSrc/com/android/tools/idea/updater/configure/UpdaterTreeNodeTest.java"}, "test_case": {"identifier": "testSummaryTreeNodeWithAndWithoutSources", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSummaryTreeNodeWithAndWithoutSources() throws Exception {\n    DetailsTypes.PlatformDetailsType platformDetailsType = AndroidSdkHandler.getRepositoryModule().createLatestFactory()\n      .createPlatformDetailsType();\n    FakePackage.FakeRemotePackage platformPackage = new FakePackage.FakeRemotePackage(\"platform\");\n    FakePackage.FakeLocalPackage localPlatfromPackage = new FakePackage.FakeLocalPackage(\"platform\");\n    platformPackage.setTypeDetails((TypeDetails)platformDetailsType);\n    localPlatfromPackage.setTypeDetails((TypeDetails)platformDetailsType);\n    UpdatablePackage updatablePlatformPackage = new UpdatablePackage(localPlatfromPackage, platformPackage);\n    DetailsTreeNode platformNode = new DetailsTreeNode(new PackageNodeModel(updatablePlatformPackage), null,\n                                                       myConfigurable);\n    Set<UpdaterTreeNode> nodes = ImmutableSet.of(platformNode);\n    SummaryTreeNode node = SummaryTreeNode.createNode(new AndroidVersion(17, null), nodes);\n    assertEquals(\"Installed\", node.getStatusString());\n\n    // Now create the sources node and add it without a local package - should imply partial installation status.\n    DetailsTypes.SourceDetailsType sourceDetailsType = AndroidSdkHandler.getRepositoryModule().createLatestFactory()\n      .createSourceDetailsType();\n    FakePackage.FakeRemotePackage sourcesPackage = new FakePackage.FakeRemotePackage(\"sources\");\n    sourcesPackage.setTypeDetails((TypeDetails)sourceDetailsType);\n    UpdatablePackage updatableSourcesPackage = new UpdatablePackage(sourcesPackage);\n    DetailsTreeNode sourcesNode = new DetailsTreeNode(new PackageNodeModel(updatableSourcesPackage), null, myConfigurable);\n    nodes = ImmutableSet.of(platformNode, sourcesNode);\n    node = SummaryTreeNode.createNode(new AndroidVersion(17, null), nodes);\n    assertEquals(\"Partially installed\", node.getStatusString());\n\n    // Now test that both platform and sources installed imply the full installation status.\n    FakePackage.FakeLocalPackage localSourcesPackage = new FakePackage.FakeLocalPackage(\"sources\");\n    localSourcesPackage.setTypeDetails((TypeDetails)sourceDetailsType);\n    updatableSourcesPackage = new UpdatablePackage(localSourcesPackage, sourcesPackage);\n    sourcesNode = new DetailsTreeNode(new PackageNodeModel(updatableSourcesPackage), null, myConfigurable);\n    nodes = ImmutableSet.of(platformNode, sourcesNode);\n    node = SummaryTreeNode.createNode(new AndroidVersion(17, null), nodes);\n    assertEquals(\"Installed\", node.getStatusString());\n  }", "signature": "void testSummaryTreeNodeWithAndWithoutSources()", "full_signature": "@Test public void testSummaryTreeNodeWithAndWithoutSources()", "class_method_signature": "UpdaterTreeNodeTest.testSummaryTreeNodeWithAndWithoutSources()", "testcase": true, "constructor": false, "invocations": ["createPlatformDetailsType", "createLatestFactory", "getRepositoryModule", "setTypeDetails", "setTypeDetails", "of", "createNode", "assertEquals", "getStatusString", "createSourceDetailsType", "createLatestFactory", "getRepositoryModule", "setTypeDetails", "of", "createNode", "assertEquals", "getStatusString", "setTypeDetails", "of", "createNode", "assertEquals", "getStatusString"]}, "focal_class": {"identifier": "UpdaterTreeNode", "superclass": "extends DefaultMutableTreeNode", "interfaces": "implements Comparable<UpdaterTreeNode>, SdkUpdaterConfigPanel.MultiStateRow", "fields": [], "methods": [{"identifier": "getInitialState", "parameters": "()", "modifiers": "abstract public", "return": "PackageNodeModel.SelectedState", "signature": "PackageNodeModel.SelectedState getInitialState()", "full_signature": "abstract public PackageNodeModel.SelectedState getInitialState()", "class_method_signature": "UpdaterTreeNode.getInitialState()", "testcase": false, "constructor": false}, {"identifier": "getCurrentState", "parameters": "()", "modifiers": "abstract public", "return": "PackageNodeModel.SelectedState", "signature": "PackageNodeModel.SelectedState getCurrentState()", "full_signature": "abstract public PackageNodeModel.SelectedState getCurrentState()", "class_method_signature": "UpdaterTreeNode.getCurrentState()", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(PackageNodeModel.SelectedState state)", "modifiers": "abstract protected", "return": "void", "signature": "void setState(PackageNodeModel.SelectedState state)", "full_signature": "abstract protected void setState(PackageNodeModel.SelectedState state)", "class_method_signature": "UpdaterTreeNode.setState(PackageNodeModel.SelectedState state)", "testcase": false, "constructor": false}, {"identifier": "resetState", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void resetState()", "full_signature": "public final void resetState()", "class_method_signature": "UpdaterTreeNode.resetState()", "testcase": false, "constructor": false}, {"identifier": "includeInSummary", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean includeInSummary()", "full_signature": "public boolean includeInSummary()", "class_method_signature": "UpdaterTreeNode.includeInSummary()", "testcase": false, "constructor": false}, {"identifier": "isPrimary", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPrimary()", "full_signature": "public boolean isPrimary()", "class_method_signature": "UpdaterTreeNode.isPrimary()", "testcase": false, "constructor": false}, {"identifier": "cycleState", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void cycleState()", "full_signature": "@Override public final void cycleState()", "class_method_signature": "UpdaterTreeNode.cycleState()", "testcase": false, "constructor": false}, {"identifier": "canHaveMixedState", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean canHaveMixedState()", "full_signature": "protected boolean canHaveMixedState()", "class_method_signature": "UpdaterTreeNode.canHaveMixedState()", "testcase": false, "constructor": false}, {"identifier": "getStatusString", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getStatusString()", "full_signature": "@NotNull public String getStatusString()", "class_method_signature": "UpdaterTreeNode.getStatusString()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(@NotNull UpdaterTreeNode o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(@NotNull UpdaterTreeNode o)", "full_signature": "@Override public int compareTo(@NotNull UpdaterTreeNode o)", "class_method_signature": "UpdaterTreeNode.compareTo(@NotNull UpdaterTreeNode o)", "testcase": false, "constructor": false}, {"identifier": "customizeRenderer", "parameters": "(Renderer renderer,\n                                JTree tree,\n                                boolean selected,\n                                boolean expanded,\n                                boolean leaf,\n                                int row,\n                                boolean hasFocus)", "modifiers": "public", "return": "void", "signature": "void customizeRenderer(Renderer renderer,\n                                JTree tree,\n                                boolean selected,\n                                boolean expanded,\n                                boolean leaf,\n                                int row,\n                                boolean hasFocus)", "full_signature": "public void customizeRenderer(Renderer renderer,\n                                JTree tree,\n                                boolean selected,\n                                boolean expanded,\n                                boolean leaf,\n                                int row,\n                                boolean hasFocus)", "class_method_signature": "UpdaterTreeNode.customizeRenderer(Renderer renderer,\n                                JTree tree,\n                                boolean selected,\n                                boolean expanded,\n                                boolean leaf,\n                                int row,\n                                boolean hasFocus)", "testcase": false, "constructor": false}], "file": "sdk-updates/src/com/android/tools/idea/updater/configure/UpdaterTreeNode.java"}, "focal_method": {"identifier": "getStatusString", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "body": "@NotNull\n  public String getStatusString() {\n    return \"\";\n  }", "signature": "String getStatusString()", "full_signature": "@NotNull public String getStatusString()", "class_method_signature": "UpdaterTreeNode.getStatusString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}