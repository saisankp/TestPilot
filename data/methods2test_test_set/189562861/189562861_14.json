{"test_class": {"identifier": "TagRouterTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/router/tag/TagRouterTest.java"}, "test_case": {"identifier": "testRoute_requestWithoutTag_shouldNotDowngrade", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRoute_requestWithoutTag_shouldNotDowngrade() {\n\n        RpcContext.getContext().setAttachment(Constants.TAG_KEY, \"\");\n\n        List<Invoker<String>> invokers = new ArrayList<Invoker<String>>();\n        Invoker<String> redInvoker = new MockInvoker<String>(URL.valueOf(\n                \"dubbo://10.20.3.1:20880/com.foo.BarService?dubbo.tag=red\"));\n        Invoker<String> yellowInvoker = new MockInvoker<String>(URL.valueOf(\n                \"dubbo://10.20.3.2:20880/com.foo.BarService?dubbo.tag=yellow\"));\n        Invoker<String> blueInvoker = new MockInvoker<String>(URL.valueOf(\n                \"dubbo://10.20.3.3:20880/com.foo.BarService?dubbo.tag=blue\"));\n\n        invokers.add(redInvoker);\n        invokers.add(yellowInvoker);\n        invokers.add(blueInvoker);\n\n        Router tagRouter = new TagRouter();\n        List<Invoker<String>> filteredInvokers = tagRouter.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\n        Assert.assertEquals(0, filteredInvokers.size());\n    }", "signature": "void testRoute_requestWithoutTag_shouldNotDowngrade()", "full_signature": "@Test public void testRoute_requestWithoutTag_shouldNotDowngrade()", "class_method_signature": "TagRouterTest.testRoute_requestWithoutTag_shouldNotDowngrade()", "testcase": true, "constructor": false, "invocations": ["setAttachment", "getContext", "valueOf", "valueOf", "valueOf", "add", "add", "add", "route", "valueOf", "getLocalHost", "assertEquals", "size"]}, "focal_class": {"identifier": "TagRouter", "superclass": "extends AbstractRouter", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_PRIORITY = 100;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PRIORITY = 100", "var_name": "DEFAULT_PRIORITY"}, {"original_string": "private static final URL ROUTER_URL = new URL(\"tag\", Constants.ANYHOST_VALUE, 0, Constants.ANY_VALUE).addParameters(Constants.RUNTIME_KEY, \"true\");", "modifier": "private static final", "type": "URL", "declarator": "ROUTER_URL = new URL(\"tag\", Constants.ANYHOST_VALUE, 0, Constants.ANY_VALUE).addParameters(Constants.RUNTIME_KEY, \"true\")", "var_name": "ROUTER_URL"}], "methods": [{"identifier": "TagRouter", "parameters": "()", "modifiers": "public", "return": "", "signature": " TagRouter()", "full_signature": "public  TagRouter()", "class_method_signature": "TagRouter.TagRouter()", "testcase": false, "constructor": true}, {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "URL", "signature": "URL getUrl()", "full_signature": "@Override public URL getUrl()", "class_method_signature": "TagRouter.getUrl()", "testcase": false, "constructor": false}, {"identifier": "route", "parameters": "(List<Invoker<T>> invokers, URL url, Invocation invocation)", "modifiers": "@Override public", "return": "List<Invoker<T>>", "signature": "List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "full_signature": "@Override public List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "class_method_signature": "TagRouter.route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/router/tag/TagRouter.java"}, "focal_method": {"identifier": "route", "parameters": "(List<Invoker<T>> invokers, URL url, Invocation invocation)", "modifiers": "@Override public", "return": "List<Invoker<T>>", "body": "@Override\n    public <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {\n        // filter\n        List<Invoker<T>> result = new ArrayList<Invoker<T>>();\n        // Dynamic param\n        String tag = RpcContext.getContext().getAttachment(Constants.TAG_KEY);\n        // Tag request\n        if (!StringUtils.isEmpty(tag)) {\n            // Select tag invokers first\n            for (Invoker<T> invoker : invokers) {\n                if (tag.equals(invoker.getUrl().getParameter(Constants.TAG_KEY))) {\n                    result.add(invoker);\n                }\n            }\n        }\n        // If Constants.REQUEST_TAG_KEY unspecified or no invoker be selected, downgrade to normal invokers\n        if (result.isEmpty()) {\n            // Only forceTag = true force match, otherwise downgrade\n            String forceTag = RpcContext.getContext().getAttachment(Constants.FORCE_USE_TAG);\n            if (StringUtils.isEmpty(forceTag) || \"false\".equals(forceTag)) {\n                for (Invoker<T> invoker : invokers) {\n                    if (StringUtils.isEmpty(invoker.getUrl().getParameter(Constants.TAG_KEY))) {\n                        result.add(invoker);\n                    }\n                }\n            }\n        }\n        return result;\n    }", "signature": "List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "full_signature": "@Override public List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "class_method_signature": "TagRouter.route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getAttachment", "getContext", "isEmpty", "equals", "getParameter", "getUrl", "add", "isEmpty", "getAttachment", "getContext", "isEmpty", "equals", "isEmpty", "getParameter", "getUrl", "add"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}