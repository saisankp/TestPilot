{"test_class": {"identifier": "PageViewCountTest", "superclass": "", "interfaces": "", "fields": [], "file": "storm/storm-benchmark/src/test/java/storm/benchmark/benchmarks/PageViewCountTest.java"}, "test_case": {"identifier": "componentParallelismCouldBeSetThroughConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void componentParallelismCouldBeSetThroughConfig() {\n    StormBenchmark benchmark = new PageViewCount();\n    Config config = new Config();\n    config.put(PageViewCount.SPOUT_NUM, 3);\n    config.put(PageViewCount.VIEW_NUM, 4);\n    config.put(PageViewCount.COUNT_NUM, 5);\n\n    StormTopology topology = benchmark.getTopology(config);\n    assertThat(topology).isNotNull();\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, PageViewCount.SPOUT_ID), 3);\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, PageViewCount.VIEW_ID), 4);\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, PageViewCount.COUNT_ID), 5);\n  }", "signature": "void componentParallelismCouldBeSetThroughConfig()", "full_signature": "@Test public void componentParallelismCouldBeSetThroughConfig()", "class_method_signature": "PageViewCountTest.componentParallelismCouldBeSetThroughConfig()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "getTopology", "isNotNull", "assertThat", "verifyParallelism", "getComponentCommon", "verifyParallelism", "getComponentCommon", "verifyParallelism", "getComponentCommon"]}, "focal_class": {"identifier": "PageViewCount", "superclass": "extends StormBenchmark", "interfaces": "", "fields": [{"original_string": "public static final String SPOUT_ID = \"spout\";", "modifier": "public static final", "type": "String", "declarator": "SPOUT_ID = \"spout\"", "var_name": "SPOUT_ID"}, {"original_string": "public static final String SPOUT_NUM = \"component.spout_num\";", "modifier": "public static final", "type": "String", "declarator": "SPOUT_NUM = \"component.spout_num\"", "var_name": "SPOUT_NUM"}, {"original_string": "public static final String VIEW_ID = \"view\";", "modifier": "public static final", "type": "String", "declarator": "VIEW_ID = \"view\"", "var_name": "VIEW_ID"}, {"original_string": "public static final String VIEW_NUM = \"component.view_bolt_num\";", "modifier": "public static final", "type": "String", "declarator": "VIEW_NUM = \"component.view_bolt_num\"", "var_name": "VIEW_NUM"}, {"original_string": "public static final String COUNT_ID = \"count\";", "modifier": "public static final", "type": "String", "declarator": "COUNT_ID = \"count\"", "var_name": "COUNT_ID"}, {"original_string": "public static final String COUNT_NUM = \"component.count_bolt_num\";", "modifier": "public static final", "type": "String", "declarator": "COUNT_NUM = \"component.count_bolt_num\"", "var_name": "COUNT_NUM"}, {"original_string": "public static final int DEFAULT_SPOUT_NUM = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SPOUT_NUM = 4", "var_name": "DEFAULT_SPOUT_NUM"}, {"original_string": "public static final int DEFAULT_VIEW_BOLT_NUM = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_VIEW_BOLT_NUM = 4", "var_name": "DEFAULT_VIEW_BOLT_NUM"}, {"original_string": "public static final int DEFAULT_COUNT_BOLT_NUM = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_COUNT_BOLT_NUM = 4", "var_name": "DEFAULT_COUNT_BOLT_NUM"}, {"original_string": "private IRichSpout spout;", "modifier": "private", "type": "IRichSpout", "declarator": "spout", "var_name": "spout"}], "methods": [{"identifier": "getTopology", "parameters": "(Config config)", "modifiers": "@Override public", "return": "StormTopology", "signature": "StormTopology getTopology(Config config)", "full_signature": "@Override public StormTopology getTopology(Config config)", "class_method_signature": "PageViewCount.getTopology(Config config)", "testcase": false, "constructor": false}], "file": "storm/storm-benchmark/src/main/java/storm/benchmark/benchmarks/PageViewCount.java"}, "focal_method": {"identifier": "getTopology", "parameters": "(Config config)", "modifiers": "@Override public", "return": "StormTopology", "body": "@Override\n  public StormTopology getTopology(Config config) {\n\n    final int spoutNum = BenchmarkUtils.getInt(config, SPOUT_NUM, DEFAULT_SPOUT_NUM);\n    final int viewBoltNum = BenchmarkUtils.getInt(config, VIEW_NUM, DEFAULT_VIEW_BOLT_NUM);\n    final int cntBoltNum = BenchmarkUtils.getInt(config, COUNT_NUM, DEFAULT_COUNT_BOLT_NUM);\n\n    spout = new KafkaSpout(KafkaUtils.getSpoutConfig(\n            config, new SchemeAsMultiScheme(new StringScheme())));\n\n    TopologyBuilder builder = new TopologyBuilder();\n    builder.setSpout(SPOUT_ID, spout, spoutNum);\n    builder.setBolt(VIEW_ID, new PageViewBolt(Item.URL, Item.ONE), viewBoltNum)\n           .localOrShuffleGrouping(SPOUT_ID);\n    builder.setBolt(COUNT_ID, new WordCount.Count(), cntBoltNum)\n            .fieldsGrouping(VIEW_ID, new Fields(Item.URL.toString()));\n    return builder.createTopology();\n  }", "signature": "StormTopology getTopology(Config config)", "full_signature": "@Override public StormTopology getTopology(Config config)", "class_method_signature": "PageViewCount.getTopology(Config config)", "testcase": false, "constructor": false, "invocations": ["getInt", "getInt", "getInt", "getSpoutConfig", "setSpout", "localOrShuffleGrouping", "setBolt", "fieldsGrouping", "setBolt", "toString", "createTopology"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}