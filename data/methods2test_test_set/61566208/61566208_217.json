{"test_class": {"identifier": "NodeMetaInfoProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( SwitchNodeConnectorTest.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( SwitchNodeConnectorTest.class )", "var_name": "logger"}], "file": "modules/hms-core/src/test/java/com/vmware/vrack/hms/node/NodeMetaInfoProviderTest.java"}, "test_case": {"identifier": "increaseConcurrentOperationCountTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void increaseConcurrentOperationCountTest()\n    {\n        int noOfConcurrentOperations = CommonProperties.getMaxConcurrentTasksPerNode();\n\n        for ( int currentCount = 0; currentCount < noOfConcurrentOperations - 1; ++currentCount )\n        {\n\n            NodeMetaInfoProvider.increaseConcurrentOperationCount( \"N1\" );\n        }\n\n        Boolean lockAcquired = NodeMetaInfoProvider.increaseConcurrentOperationCount( \"N1\" );\n        assertTrue( lockAcquired );\n\n        for ( int currentCount = 0; currentCount <= noOfConcurrentOperations; ++currentCount )\n        {\n\n            NodeMetaInfoProvider.decreaseConcurrentOperationCount( \"N1\" );\n        }\n\n    }", "signature": "void increaseConcurrentOperationCountTest()", "full_signature": "@Test public void increaseConcurrentOperationCountTest()", "class_method_signature": "NodeMetaInfoProviderTest.increaseConcurrentOperationCountTest()", "testcase": true, "constructor": false, "invocations": ["getMaxConcurrentTasksPerNode", "increaseConcurrentOperationCount", "increaseConcurrentOperationCount", "assertTrue", "decreaseConcurrentOperationCount"]}, "focal_class": {"identifier": "NodeMetaInfoProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger( NodeMetaInfoProvider.class );", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger( NodeMetaInfoProvider.class )", "var_name": "logger"}, {"original_string": "private static final ReentrantLock nodeServiceLock = new ReentrantLock();", "modifier": "private static final", "type": "ReentrantLock", "declarator": "nodeServiceLock = new ReentrantLock()", "var_name": "nodeServiceLock"}, {"original_string": "private static final Map<String, Integer> nodeMetaInfoMap = new ConcurrentHashMap<String, Integer>();", "modifier": "private static final", "type": "Map<String, Integer>", "declarator": "nodeMetaInfoMap = new ConcurrentHashMap<String, Integer>()", "var_name": "nodeMetaInfoMap"}], "methods": [{"identifier": "increaseConcurrentOperationCount", "parameters": "( String nodeId )", "modifiers": "public static", "return": "boolean", "signature": "boolean increaseConcurrentOperationCount( String nodeId )", "full_signature": "public static boolean increaseConcurrentOperationCount( String nodeId )", "class_method_signature": "NodeMetaInfoProvider.increaseConcurrentOperationCount( String nodeId )", "testcase": false, "constructor": false}, {"identifier": "decreaseConcurrentOperationCount", "parameters": "( String nodeId )", "modifiers": "public static", "return": "boolean", "signature": "boolean decreaseConcurrentOperationCount( String nodeId )", "full_signature": "public static boolean decreaseConcurrentOperationCount( String nodeId )", "class_method_signature": "NodeMetaInfoProvider.decreaseConcurrentOperationCount( String nodeId )", "testcase": false, "constructor": false}], "file": "modules/hms-core/src/main/java/com/vmware/vrack/hms/node/NodeMetaInfoProvider.java"}, "focal_method": {"identifier": "increaseConcurrentOperationCount", "parameters": "( String nodeId )", "modifiers": "public static", "return": "boolean", "body": "public static boolean increaseConcurrentOperationCount( String nodeId )\n    {\n        // Deliberately keeping true as default, as we better allow operations, rather than completely blocking them\n        // incase of some issue.\n        boolean canPerformOperationOnNode = true;\n\n        // Get the lock for determining if the operation can be performed or not on the given node\n        nodeServiceLock.lock();\n\n        try\n        {\n            logger.debug( \"Got the lock for determining feasibility to call operation service for node:\" + nodeId );\n\n            Integer currentOperationCount = (Integer) nodeMetaInfoMap.get( nodeId );\n\n            if ( currentOperationCount == null )\n            {\n                currentOperationCount = 0;\n            }\n\n            int maxConcurrentTasksPerNode = CommonProperties.getMaxConcurrentTasksPerNode();\n\n            if ( currentOperationCount >= maxConcurrentTasksPerNode )\n            {\n                logger.warn( \"Will not perform further operation. Reached Max concurrent operation count for Node:\"\n                    + nodeId + \". Current count:\" + maxConcurrentTasksPerNode );\n                canPerformOperationOnNode = false;\n            }\n            else\n            {\n                ++currentOperationCount;\n                logger.debug( \"Node can perform operation. Increasing current concurrent operation count for Node:\"\n                    + nodeId + \" set to:\" + currentOperationCount );\n                nodeMetaInfoMap.put( nodeId, currentOperationCount );\n            }\n        }\n        catch ( Exception ex )\n        {\n            logger.warn( \"Error while checking for current operation count for Node:\" + nodeId, ex );\n        }\n        finally\n        {\n            nodeServiceLock.unlock();\n        }\n\n        return canPerformOperationOnNode;\n    }", "signature": "boolean increaseConcurrentOperationCount( String nodeId )", "full_signature": "public static boolean increaseConcurrentOperationCount( String nodeId )", "class_method_signature": "NodeMetaInfoProvider.increaseConcurrentOperationCount( String nodeId )", "testcase": false, "constructor": false, "invocations": ["lock", "debug", "get", "getMaxConcurrentTasksPerNode", "warn", "debug", "put", "warn", "unlock"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}