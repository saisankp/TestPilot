{"test_class": {"identifier": "LocalUniqueIndexTest", "superclass": "extends AbstractLocalIndexTest", "interfaces": "", "fields": [], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/index/local/LocalUniqueIndexTest.java"}, "test_case": {"identifier": "shouldAllowRemovingAllValuesForKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAllowRemovingAllValuesForKey() {\n        LocalUniqueIndex<Long> index = uniqueValueIndex(Long.class);\n        loadLongIndex(index, 10);\n\n        // Check the values that are in the index ...\n        assertThat(index.estimateTotalCount(), is(10L));\n        assertMatch(index, Operator.EQUAL_TO, 20L, key(2));\n\n        // Remove the value associated with a given key and verify they are indeed gone ...\n        index.remove(key(2));\n        assertNoMatch(index, Operator.EQUAL_TO, 20L);\n        assertThat(index.estimateTotalCount(), is(9L));\n\n        // Try to remove the values associated with a key not in the index ...\n        assertNoMatch(index, Operator.EQUAL_TO, 200L);\n        index.remove(key(20));\n        assertNoMatch(index, Operator.EQUAL_TO, 200L);\n        assertThat(index.estimateTotalCount(), is(9L));\n\n        // Remove a value and key pair that's in the index, and verify they are indeed gone ...\n        index.remove(key(3), null, 30L);\n        assertNoMatch(index, Operator.EQUAL_TO, 30L);\n        assertThat(index.estimateTotalCount(), is(8L));\n\n        // Try to remove a non-existant value-key pair, and verify nothing is removed ...\n        index.remove(key(3), null, 3000L);\n        assertNoMatch(index, Operator.EQUAL_TO, 30L);\n        assertThat(index.estimateTotalCount(), is(8L));\n    }", "signature": "void shouldAllowRemovingAllValuesForKey()", "full_signature": "@Test public void shouldAllowRemovingAllValuesForKey()", "class_method_signature": "LocalUniqueIndexTest.shouldAllowRemovingAllValuesForKey()", "testcase": true, "constructor": false, "invocations": ["uniqueValueIndex", "loadLongIndex", "assertThat", "estimateTotalCount", "is", "assertMatch", "key", "remove", "key", "assertNoMatch", "assertThat", "estimateTotalCount", "is", "assertNoMatch", "remove", "key", "assertNoMatch", "assertThat", "estimateTotalCount", "is", "remove", "key", "assertNoMatch", "assertThat", "estimateTotalCount", "is", "remove", "key", "assertNoMatch", "assertThat", "estimateTotalCount", "is"]}, "focal_class": {"identifier": "LocalUniqueIndex", "superclass": "extends LocalMapIndex<T, T>", "interfaces": "", "fields": [], "methods": [{"identifier": "create", "parameters": "( String name,\n                                           String workspaceName,\n                                           DB db,\n                                           Converter<T> converter,\n                                           BTreeKeySerializer<T> valueSerializer,\n                                           Serializer<T> rawSerializer )", "modifiers": "static", "return": "LocalUniqueIndex<T>", "signature": "LocalUniqueIndex<T> create( String name,\n                                           String workspaceName,\n                                           DB db,\n                                           Converter<T> converter,\n                                           BTreeKeySerializer<T> valueSerializer,\n                                           Serializer<T> rawSerializer )", "full_signature": "static LocalUniqueIndex<T> create( String name,\n                                           String workspaceName,\n                                           DB db,\n                                           Converter<T> converter,\n                                           BTreeKeySerializer<T> valueSerializer,\n                                           Serializer<T> rawSerializer )", "class_method_signature": "LocalUniqueIndex.create( String name,\n                                           String workspaceName,\n                                           DB db,\n                                           Converter<T> converter,\n                                           BTreeKeySerializer<T> valueSerializer,\n                                           Serializer<T> rawSerializer )", "testcase": false, "constructor": false}, {"identifier": "LocalUniqueIndex", "parameters": "( String name,\n                                String workspaceName,\n                                DB db,\n                                Converter<T> converter,\n                                BTreeKeySerializer<T> valueSerializer,\n                                Serializer<T> rawSerializer )", "modifiers": "protected", "return": "", "signature": " LocalUniqueIndex( String name,\n                                String workspaceName,\n                                DB db,\n                                Converter<T> converter,\n                                BTreeKeySerializer<T> valueSerializer,\n                                Serializer<T> rawSerializer )", "full_signature": "protected  LocalUniqueIndex( String name,\n                                String workspaceName,\n                                DB db,\n                                Converter<T> converter,\n                                BTreeKeySerializer<T> valueSerializer,\n                                Serializer<T> rawSerializer )", "class_method_signature": "LocalUniqueIndex.LocalUniqueIndex( String name,\n                                String workspaceName,\n                                DB db,\n                                Converter<T> converter,\n                                BTreeKeySerializer<T> valueSerializer,\n                                Serializer<T> rawSerializer )", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "( String nodeKey,\n                     String propertyName, \n                     T value )", "modifiers": "@Override public", "return": "void", "signature": "void add( String nodeKey,\n                     String propertyName, \n                     T value )", "full_signature": "@Override public void add( String nodeKey,\n                     String propertyName, \n                     T value )", "class_method_signature": "LocalUniqueIndex.add( String nodeKey,\n                     String propertyName, \n                     T value )", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "( String nodeKey,\n                        String propertyName, \n                        T value )", "modifiers": "@Override public", "return": "void", "signature": "void remove( String nodeKey,\n                        String propertyName, \n                        T value )", "full_signature": "@Override public void remove( String nodeKey,\n                        String propertyName, \n                        T value )", "class_method_signature": "LocalUniqueIndex.remove( String nodeKey,\n                        String propertyName, \n                        T value )", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "( String nodeKey )", "modifiers": "@Override public", "return": "void", "signature": "void remove( String nodeKey )", "full_signature": "@Override public void remove( String nodeKey )", "class_method_signature": "LocalUniqueIndex.remove( String nodeKey )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/index/local/LocalUniqueIndex.java"}, "focal_method": {"identifier": "remove", "parameters": "( String nodeKey,\n                        String propertyName, \n                        T value )", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void remove( String nodeKey,\n                        String propertyName, \n                        T value ) {\n        // Find all of the T values (entry keys) for the given node key (entry values) ...\n        for (T key : Fun.filter(valuesByKey, nodeKey)) {\n            if (comparator.compare(value, key) == 0) {\n                logger.trace(\"Removing node '{0}' from '{1}' index with value '{2}'\", nodeKey, name, value);\n                keysByValue.remove(key);\n            }\n        }\n    }", "signature": "void remove( String nodeKey,\n                        String propertyName, \n                        T value )", "full_signature": "@Override public void remove( String nodeKey,\n                        String propertyName, \n                        T value )", "class_method_signature": "LocalUniqueIndex.remove( String nodeKey,\n                        String propertyName, \n                        T value )", "testcase": false, "constructor": false, "invocations": ["filter", "compare", "trace", "remove"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}