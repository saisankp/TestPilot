{"test_class": {"identifier": "AdapterDelegatesManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "library/src/test/java/com/hannesdorfmann/adapterdelegates4/AdapterDelegatesManagerTest.java"}, "test_case": {"identifier": "onViewAttachedToWindow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onViewAttachedToWindow() {\n\n\n        // 3 elements and each element has it's own viewtype and hence own delegate\n        List<Object> items = Arrays.asList(new Object(), new Object(), new Object());\n        SpyableAdapterDelegate<List<Object>> d0 = new SpyableAdapterDelegate<>(0);\n        SpyableAdapterDelegate<List<Object>> d1 = new SpyableAdapterDelegate<>(1);\n        SpyableAdapterDelegate<List<Object>> d2 = new SpyableAdapterDelegate<>(2);\n\n        AdapterDelegatesManager<List<Object>> manager = new AdapterDelegatesManager<>();\n        manager.addDelegate(d0);\n        manager.addDelegate(d1);\n        manager.addDelegate(d2);\n\n        // Test first item\n        manager.onViewAttachedToWindow(d0.viewHolder);\n        Assert.assertTrue(d0.onViewAtachedToWindowCalled);\n        Assert.assertFalse(d1.onViewAtachedToWindowCalled);\n        Assert.assertFalse(d2.onViewAtachedToWindowCalled);\n\n        resetDelegates(d0, d1, d2);\n\n        // Test second item\n        manager.onViewAttachedToWindow(d1.viewHolder);\n        Assert.assertTrue(d1.onViewAtachedToWindowCalled);\n        Assert.assertFalse(d0.onViewAtachedToWindowCalled);\n        Assert.assertFalse(d2.onViewAtachedToWindowCalled);\n\n        resetDelegates(d0, d1, d2);\n\n        // Test third item\n        manager.onViewAttachedToWindow(d2.viewHolder);\n        Assert.assertTrue(d2.onViewAtachedToWindowCalled);\n        Assert.assertFalse(d1.onViewAtachedToWindowCalled);\n        Assert.assertFalse(d0.onViewAtachedToWindowCalled);\n\n        resetDelegates(d0, d1, d2);\n    }", "signature": "void onViewAttachedToWindow()", "full_signature": "@Test public void onViewAttachedToWindow()", "class_method_signature": "AdapterDelegatesManagerTest.onViewAttachedToWindow()", "testcase": true, "constructor": false, "invocations": ["asList", "addDelegate", "addDelegate", "addDelegate", "onViewAttachedToWindow", "assertTrue", "assertFalse", "assertFalse", "resetDelegates", "onViewAttachedToWindow", "assertTrue", "assertFalse", "assertFalse", "resetDelegates", "onViewAttachedToWindow", "assertTrue", "assertFalse", "assertFalse", "resetDelegates"]}, "focal_class": {"identifier": "AdapterDelegatesManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int FALLBACK_DELEGATE_VIEW_TYPE = Integer.MAX_VALUE - 1;", "modifier": "public static final", "type": "int", "declarator": "FALLBACK_DELEGATE_VIEW_TYPE = Integer.MAX_VALUE - 1", "var_name": "FALLBACK_DELEGATE_VIEW_TYPE"}, {"original_string": "private static final List<Object> PAYLOADS_EMPTY_LIST = Collections.emptyList();", "modifier": "private static final", "type": "List<Object>", "declarator": "PAYLOADS_EMPTY_LIST = Collections.emptyList()", "var_name": "PAYLOADS_EMPTY_LIST"}, {"original_string": "protected SparseArrayCompat<AdapterDelegate<T>> delegates = new SparseArrayCompat();", "modifier": "protected", "type": "SparseArrayCompat<AdapterDelegate<T>>", "declarator": "delegates = new SparseArrayCompat()", "var_name": "delegates"}, {"original_string": "protected AdapterDelegate<T> fallbackDelegate;", "modifier": "protected", "type": "AdapterDelegate<T>", "declarator": "fallbackDelegate", "var_name": "fallbackDelegate"}], "methods": [{"identifier": "AdapterDelegatesManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " AdapterDelegatesManager()", "full_signature": "public  AdapterDelegatesManager()", "class_method_signature": "AdapterDelegatesManager.AdapterDelegatesManager()", "testcase": false, "constructor": true}, {"identifier": "AdapterDelegatesManager", "parameters": "(@NonNull AdapterDelegate<T>... delegates)", "modifiers": "public", "return": "", "signature": " AdapterDelegatesManager(@NonNull AdapterDelegate<T>... delegates)", "full_signature": "public  AdapterDelegatesManager(@NonNull AdapterDelegate<T>... delegates)", "class_method_signature": "AdapterDelegatesManager.AdapterDelegatesManager(@NonNull AdapterDelegate<T>... delegates)", "testcase": false, "constructor": true}, {"identifier": "addDelegate", "parameters": "(@NonNull AdapterDelegate<T> delegate)", "modifiers": "public", "return": "AdapterDelegatesManager<T>", "signature": "AdapterDelegatesManager<T> addDelegate(@NonNull AdapterDelegate<T> delegate)", "full_signature": "public AdapterDelegatesManager<T> addDelegate(@NonNull AdapterDelegate<T> delegate)", "class_method_signature": "AdapterDelegatesManager.addDelegate(@NonNull AdapterDelegate<T> delegate)", "testcase": false, "constructor": false}, {"identifier": "addDelegate", "parameters": "(int viewType,\n                                                  @NonNull AdapterDelegate<T> delegate)", "modifiers": "public", "return": "AdapterDelegatesManager<T>", "signature": "AdapterDelegatesManager<T> addDelegate(int viewType,\n                                                  @NonNull AdapterDelegate<T> delegate)", "full_signature": "public AdapterDelegatesManager<T> addDelegate(int viewType,\n                                                  @NonNull AdapterDelegate<T> delegate)", "class_method_signature": "AdapterDelegatesManager.addDelegate(int viewType,\n                                                  @NonNull AdapterDelegate<T> delegate)", "testcase": false, "constructor": false}, {"identifier": "addDelegate", "parameters": "(int viewType, boolean allowReplacingDelegate,\n                                                  @NonNull AdapterDelegate<T> delegate)", "modifiers": "public", "return": "AdapterDelegatesManager<T>", "signature": "AdapterDelegatesManager<T> addDelegate(int viewType, boolean allowReplacingDelegate,\n                                                  @NonNull AdapterDelegate<T> delegate)", "full_signature": "public AdapterDelegatesManager<T> addDelegate(int viewType, boolean allowReplacingDelegate,\n                                                  @NonNull AdapterDelegate<T> delegate)", "class_method_signature": "AdapterDelegatesManager.addDelegate(int viewType, boolean allowReplacingDelegate,\n                                                  @NonNull AdapterDelegate<T> delegate)", "testcase": false, "constructor": false}, {"identifier": "removeDelegate", "parameters": "(@NonNull AdapterDelegate<T> delegate)", "modifiers": "public", "return": "AdapterDelegatesManager<T>", "signature": "AdapterDelegatesManager<T> removeDelegate(@NonNull AdapterDelegate<T> delegate)", "full_signature": "public AdapterDelegatesManager<T> removeDelegate(@NonNull AdapterDelegate<T> delegate)", "class_method_signature": "AdapterDelegatesManager.removeDelegate(@NonNull AdapterDelegate<T> delegate)", "testcase": false, "constructor": false}, {"identifier": "removeDelegate", "parameters": "(int viewType)", "modifiers": "public", "return": "AdapterDelegatesManager<T>", "signature": "AdapterDelegatesManager<T> removeDelegate(int viewType)", "full_signature": "public AdapterDelegatesManager<T> removeDelegate(int viewType)", "class_method_signature": "AdapterDelegatesManager.removeDelegate(int viewType)", "testcase": false, "constructor": false}, {"identifier": "getItemViewType", "parameters": "(@NonNull T items, int position)", "modifiers": "public", "return": "int", "signature": "int getItemViewType(@NonNull T items, int position)", "full_signature": "public int getItemViewType(@NonNull T items, int position)", "class_method_signature": "AdapterDelegatesManager.getItemViewType(@NonNull T items, int position)", "testcase": false, "constructor": false}, {"identifier": "onCreateViewHolder", "parameters": "(@NonNull ViewGroup parent, int viewType)", "modifiers": "@NonNull public", "return": "RecyclerView.ViewHolder", "signature": "RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType)", "full_signature": "@NonNull public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType)", "class_method_signature": "AdapterDelegatesManager.onCreateViewHolder(@NonNull ViewGroup parent, int viewType)", "testcase": false, "constructor": false}, {"identifier": "onBindViewHolder", "parameters": "(@NonNull T items, int position,\n                                 @NonNull RecyclerView.ViewHolder holder, List payloads)", "modifiers": "public", "return": "void", "signature": "void onBindViewHolder(@NonNull T items, int position,\n                                 @NonNull RecyclerView.ViewHolder holder, List payloads)", "full_signature": "public void onBindViewHolder(@NonNull T items, int position,\n                                 @NonNull RecyclerView.ViewHolder holder, List payloads)", "class_method_signature": "AdapterDelegatesManager.onBindViewHolder(@NonNull T items, int position,\n                                 @NonNull RecyclerView.ViewHolder holder, List payloads)", "testcase": false, "constructor": false}, {"identifier": "onBindViewHolder", "parameters": "(@NonNull T items, int position,\n                                 @NonNull RecyclerView.ViewHolder holder)", "modifiers": "public", "return": "void", "signature": "void onBindViewHolder(@NonNull T items, int position,\n                                 @NonNull RecyclerView.ViewHolder holder)", "full_signature": "public void onBindViewHolder(@NonNull T items, int position,\n                                 @NonNull RecyclerView.ViewHolder holder)", "class_method_signature": "AdapterDelegatesManager.onBindViewHolder(@NonNull T items, int position,\n                                 @NonNull RecyclerView.ViewHolder holder)", "testcase": false, "constructor": false}, {"identifier": "onViewRecycled", "parameters": "(@NonNull RecyclerView.ViewHolder holder)", "modifiers": "public", "return": "void", "signature": "void onViewRecycled(@NonNull RecyclerView.ViewHolder holder)", "full_signature": "public void onViewRecycled(@NonNull RecyclerView.ViewHolder holder)", "class_method_signature": "AdapterDelegatesManager.onViewRecycled(@NonNull RecyclerView.ViewHolder holder)", "testcase": false, "constructor": false}, {"identifier": "onFailedToRecycleView", "parameters": "(@NonNull RecyclerView.ViewHolder holder)", "modifiers": "public", "return": "boolean", "signature": "boolean onFailedToRecycleView(@NonNull RecyclerView.ViewHolder holder)", "full_signature": "public boolean onFailedToRecycleView(@NonNull RecyclerView.ViewHolder holder)", "class_method_signature": "AdapterDelegatesManager.onFailedToRecycleView(@NonNull RecyclerView.ViewHolder holder)", "testcase": false, "constructor": false}, {"identifier": "onViewAttachedToWindow", "parameters": "(@NonNull RecyclerView.ViewHolder holder)", "modifiers": "public", "return": "void", "signature": "void onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder)", "full_signature": "public void onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder)", "class_method_signature": "AdapterDelegatesManager.onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder)", "testcase": false, "constructor": false}, {"identifier": "onViewDetachedFromWindow", "parameters": "(@NonNull RecyclerView.ViewHolder holder)", "modifiers": "public", "return": "void", "signature": "void onViewDetachedFromWindow(@NonNull RecyclerView.ViewHolder holder)", "full_signature": "public void onViewDetachedFromWindow(@NonNull RecyclerView.ViewHolder holder)", "class_method_signature": "AdapterDelegatesManager.onViewDetachedFromWindow(@NonNull RecyclerView.ViewHolder holder)", "testcase": false, "constructor": false}, {"identifier": "setFallbackDelegate", "parameters": "(\n            @Nullable AdapterDelegate<T> fallbackDelegate)", "modifiers": "public", "return": "AdapterDelegatesManager<T>", "signature": "AdapterDelegatesManager<T> setFallbackDelegate(\n            @Nullable AdapterDelegate<T> fallbackDelegate)", "full_signature": "public AdapterDelegatesManager<T> setFallbackDelegate(\n            @Nullable AdapterDelegate<T> fallbackDelegate)", "class_method_signature": "AdapterDelegatesManager.setFallbackDelegate(\n            @Nullable AdapterDelegate<T> fallbackDelegate)", "testcase": false, "constructor": false}, {"identifier": "getViewType", "parameters": "(@NonNull AdapterDelegate<T> delegate)", "modifiers": "public", "return": "int", "signature": "int getViewType(@NonNull AdapterDelegate<T> delegate)", "full_signature": "public int getViewType(@NonNull AdapterDelegate<T> delegate)", "class_method_signature": "AdapterDelegatesManager.getViewType(@NonNull AdapterDelegate<T> delegate)", "testcase": false, "constructor": false}, {"identifier": "getDelegateForViewType", "parameters": "(int viewType)", "modifiers": "@Nullable public", "return": "AdapterDelegate<T>", "signature": "AdapterDelegate<T> getDelegateForViewType(int viewType)", "full_signature": "@Nullable public AdapterDelegate<T> getDelegateForViewType(int viewType)", "class_method_signature": "AdapterDelegatesManager.getDelegateForViewType(int viewType)", "testcase": false, "constructor": false}, {"identifier": "getFallbackDelegate", "parameters": "()", "modifiers": "@Nullable public", "return": "AdapterDelegate<T>", "signature": "AdapterDelegate<T> getFallbackDelegate()", "full_signature": "@Nullable public AdapterDelegate<T> getFallbackDelegate()", "class_method_signature": "AdapterDelegatesManager.getFallbackDelegate()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/hannesdorfmann/adapterdelegates4/AdapterDelegatesManager.java"}, "focal_method": {"identifier": "onViewAttachedToWindow", "parameters": "(@NonNull RecyclerView.ViewHolder holder)", "modifiers": "public", "return": "void", "body": "public void onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder) {\n        AdapterDelegate<T> delegate = getDelegateForViewType(holder.getItemViewType());\n        if (delegate == null) {\n            throw new NullPointerException(\"No delegate found for \"\n                    + holder\n                    + \" for item at position = \"\n                    + holder.getAdapterPosition()\n                    + \" for viewType = \"\n                    + holder.getItemViewType());\n        }\n        delegate.onViewAttachedToWindow(holder);\n    }", "signature": "void onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder)", "full_signature": "public void onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder)", "class_method_signature": "AdapterDelegatesManager.onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder)", "testcase": false, "constructor": false, "invocations": ["getDelegateForViewType", "getItemViewType", "getAdapterPosition", "getItemViewType", "onViewAttachedToWindow"]}, "repository": {"repo_id": 39889599, "url": "https://github.com/sockeqwe/AdapterDelegates", "language": "Java", "is_fork": false, "fork_count": 285, "stargazer_count": 2498, "size": 963, "license": "licensed"}}