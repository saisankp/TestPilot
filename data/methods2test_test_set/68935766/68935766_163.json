{"test_class": {"identifier": "StandaloneProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Elements elements = when(mock(Elements.class).getTypeElement(any())).thenReturn(mock(TypeElement.class)).getMock();", "modifier": "", "type": "Elements", "declarator": "elements = when(mock(Elements.class).getTypeElement(any())).thenReturn(mock(TypeElement.class)).getMock()", "var_name": "elements"}, {"original_string": "Types types = mock(Types.class);", "modifier": "", "type": "Types", "declarator": "types = mock(Types.class)", "var_name": "types"}, {"original_string": "RoundEnvironment round = mock(RoundEnvironment.class);", "modifier": "", "type": "RoundEnvironment", "declarator": "round = mock(RoundEnvironment.class)", "var_name": "round"}, {"original_string": "StandaloneProcessor processor = new StandaloneProcessor(mock(Environment.class), elements, types);", "modifier": "", "type": "StandaloneProcessor", "declarator": "processor = new StandaloneProcessor(mock(Environment.class), elements, types)", "var_name": "processor"}, {"original_string": "Element element = mock(Element.class);", "modifier": "", "type": "Element", "declarator": "element = mock(Element.class)", "var_name": "element"}], "file": "scribe/standalone/src/test/java/com/karuslabs/scribe/standalone/StandaloneProcessorTest.java"}, "test_case": {"identifier": "annotated", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void annotated() {\n        doReturn(Set.of(element)).when(round).getElementsAnnotatedWith(Plugin.class);\n\n        processor.round = round;\n        \n        assertEquals(Set.of(element), processor.annotated(Plugin.class).collect(toSet()));\n    }", "signature": "void annotated()", "full_signature": "@Test void annotated()", "class_method_signature": "StandaloneProcessorTest.annotated()", "testcase": true, "constructor": false, "invocations": ["getElementsAnnotatedWith", "when", "doReturn", "of", "assertEquals", "of", "collect", "annotated", "toSet"]}, "focal_class": {"identifier": "StandaloneProcessor", "superclass": "extends Processor<Element>", "interfaces": "", "fields": [{"original_string": "@Nullable RoundEnvironment round;", "modifier": "@Nullable", "type": "RoundEnvironment", "declarator": "round", "var_name": "round"}], "methods": [{"identifier": "StandaloneProcessor", "parameters": "(Environment<Element> environment, Elements elements, Types types)", "modifiers": "public", "return": "", "signature": " StandaloneProcessor(Environment<Element> environment, Elements elements, Types types)", "full_signature": "public  StandaloneProcessor(Environment<Element> environment, Elements elements, Types types)", "class_method_signature": "StandaloneProcessor.StandaloneProcessor(Environment<Element> environment, Elements elements, Types types)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(RoundEnvironment round)", "modifiers": "public", "return": "void", "signature": "void initialize(RoundEnvironment round)", "full_signature": "public void initialize(RoundEnvironment round)", "class_method_signature": "StandaloneProcessor.initialize(RoundEnvironment round)", "testcase": false, "constructor": false}, {"identifier": "annotated", "parameters": "(Class<? extends Annotation> annotation)", "modifiers": "@Override protected", "return": "Stream<Element>", "signature": "Stream<Element> annotated(Class<? extends Annotation> annotation)", "full_signature": "@Override protected Stream<Element> annotated(Class<? extends Annotation> annotation)", "class_method_signature": "StandaloneProcessor.annotated(Class<? extends Annotation> annotation)", "testcase": false, "constructor": false}], "file": "scribe/standalone/src/main/java/com/karuslabs/scribe/standalone/StandaloneProcessor.java"}, "focal_method": {"identifier": "annotated", "parameters": "(Class<? extends Annotation> annotation)", "modifiers": "@Override protected", "return": "Stream<Element>", "body": "@Override\n    protected Stream<Element> annotated(Class<? extends Annotation> annotation) {\n        return round.getElementsAnnotatedWith(annotation).stream().map(element -> element);\n    }", "signature": "Stream<Element> annotated(Class<? extends Annotation> annotation)", "full_signature": "@Override protected Stream<Element> annotated(Class<? extends Annotation> annotation)", "class_method_signature": "StandaloneProcessor.annotated(Class<? extends Annotation> annotation)", "testcase": false, "constructor": false, "invocations": ["map", "stream", "getElementsAnnotatedWith"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}