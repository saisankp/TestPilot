{"test_class": {"identifier": "EnvironmentHealerStepDefinitionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private EnvironmentHealerStepDefinitions environmentHealerStepDefinitions;", "modifier": "@Autowired\n    private", "type": "EnvironmentHealerStepDefinitions", "declarator": "environmentHealerStepDefinitions", "var_name": "environmentHealerStepDefinitions"}, {"original_string": "@Autowired\n    private   SSMRaiderImpl ssmRaider;", "modifier": "@Autowired\n    private", "type": "SSMRaiderImpl", "declarator": "ssmRaider", "var_name": "ssmRaider"}, {"original_string": "@Autowired\n    private   ScriptExecutor scriptExecutor;", "modifier": "@Autowired\n    private", "type": "ScriptExecutor", "declarator": "scriptExecutor", "var_name": "scriptExecutor"}, {"original_string": "@Autowired\n    private ExecutionStateCache executionStateCache;", "modifier": "@Autowired\n    private", "type": "ExecutionStateCache", "declarator": "executionStateCache", "var_name": "executionStateCache"}], "file": "cloudraider-core/src/test/java/com/intuit/cloudraider/cucumber/steps/EnvironmentHealerStepDefinitionsTest.java"}, "test_case": {"identifier": "testRecoverSystemFailures", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRecoverSystemFailures() throws Exception\n    {\n\n        executionStateCache.setUnhealthyInstances(this.createInstances());\n        executionStateCache.setHealProcess(true);\n        executionStateCache.addProcessName(\"nginx\");\n        executionStateCache.setRamDiskFull(true);\n        executionStateCache.addPortNum(1234);\n        executionStateCache.setHealNetwork(true);\n        executionStateCache.setBlockPort(true);\n        executionStateCache.setBlockedDomains(Arrays.asList(\"yahoo.com\"));\n        executionStateCache.setCpuSpiked(true);\n\n        environmentHealerStepDefinitions.recover();\n\n    }", "signature": "void testRecoverSystemFailures()", "full_signature": "@Test public void testRecoverSystemFailures()", "class_method_signature": "EnvironmentHealerStepDefinitionsTest.testRecoverSystemFailures()", "testcase": true, "constructor": false, "invocations": ["setUnhealthyInstances", "createInstances", "setHealProcess", "addProcessName", "setRamDiskFull", "addPortNum", "setHealNetwork", "setBlockPort", "setBlockedDomains", "asList", "setCpuSpiked", "recover"]}, "focal_class": {"identifier": "EnvironmentHealerStepDefinitions", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    @Qualifier(\"scriptExecutor\")\n    private ScriptExecutor scriptExecutor;", "modifier": "@Autowired\n    @Qualifier(\"scriptExecutor\")\n    private", "type": "ScriptExecutor", "declarator": "scriptExecutor", "var_name": "scriptExecutor"}, {"original_string": "Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "@Autowired\n    @Qualifier(\"ssmRaiderBean\")\n    private SSMRaider ssmRaider;", "modifier": "@Autowired\n    @Qualifier(\"ssmRaiderBean\")\n    private", "type": "SSMRaider", "declarator": "ssmRaider", "var_name": "ssmRaider"}, {"original_string": "@Autowired\n    private ExecutionStateCache executionStateCache;", "modifier": "@Autowired\n    private", "type": "ExecutionStateCache", "declarator": "executionStateCache", "var_name": "executionStateCache"}], "methods": [{"identifier": "getExecutionStateCache", "parameters": "()", "modifiers": "public", "return": "ExecutionStateCache", "signature": "ExecutionStateCache getExecutionStateCache()", "full_signature": "public ExecutionStateCache getExecutionStateCache()", "class_method_signature": "EnvironmentHealerStepDefinitions.getExecutionStateCache()", "testcase": false, "constructor": false}, {"identifier": "setExecutionStateCache", "parameters": "(ExecutionStateCache executionStateCache)", "modifiers": "public", "return": "void", "signature": "void setExecutionStateCache(ExecutionStateCache executionStateCache)", "full_signature": "public void setExecutionStateCache(ExecutionStateCache executionStateCache)", "class_method_signature": "EnvironmentHealerStepDefinitions.setExecutionStateCache(ExecutionStateCache executionStateCache)", "testcase": false, "constructor": false}, {"identifier": "EnvironmentHealerStepDefinitions", "parameters": "()", "modifiers": "public", "return": "", "signature": " EnvironmentHealerStepDefinitions()", "full_signature": "public  EnvironmentHealerStepDefinitions()", "class_method_signature": "EnvironmentHealerStepDefinitions.EnvironmentHealerStepDefinitions()", "testcase": false, "constructor": true}, {"identifier": "recover", "parameters": "()", "modifiers": "@Then(\"^recover$\") public", "return": "void", "signature": "void recover()", "full_signature": "@Then(\"^recover$\") public void recover()", "class_method_signature": "EnvironmentHealerStepDefinitions.recover()", "testcase": false, "constructor": false}, {"identifier": "clearCache", "parameters": "()", "modifiers": "@Then(\"^clearCache$\") public", "return": "void", "signature": "void clearCache()", "full_signature": "@Then(\"^clearCache$\") public void clearCache()", "class_method_signature": "EnvironmentHealerStepDefinitions.clearCache()", "testcase": false, "constructor": false}, {"identifier": "healGivenInstancesByProcess", "parameters": "(String processName, List<EC2InstanceTO> instances)", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healGivenInstancesByProcess(String processName, List<EC2InstanceTO> instances)", "full_signature": "public EnvironmentHealerStepDefinitions healGivenInstancesByProcess(String processName, List<EC2InstanceTO> instances)", "class_method_signature": "EnvironmentHealerStepDefinitions.healGivenInstancesByProcess(String processName, List<EC2InstanceTO> instances)", "testcase": false, "constructor": false}, {"identifier": "healGivenInstancesByDomainName", "parameters": "(String domainName, List<EC2InstanceTO> instances)", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healGivenInstancesByDomainName(String domainName, List<EC2InstanceTO> instances)", "full_signature": "public EnvironmentHealerStepDefinitions healGivenInstancesByDomainName(String domainName, List<EC2InstanceTO> instances)", "class_method_signature": "EnvironmentHealerStepDefinitions.healGivenInstancesByDomainName(String domainName, List<EC2InstanceTO> instances)", "testcase": false, "constructor": false}, {"identifier": "healGivenInstancesByFixingRamDisk", "parameters": "(List<EC2InstanceTO> instanceList)", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healGivenInstancesByFixingRamDisk(List<EC2InstanceTO> instanceList)", "full_signature": "public EnvironmentHealerStepDefinitions healGivenInstancesByFixingRamDisk(List<EC2InstanceTO> instanceList)", "class_method_signature": "EnvironmentHealerStepDefinitions.healGivenInstancesByFixingRamDisk(List<EC2InstanceTO> instanceList)", "testcase": false, "constructor": false}, {"identifier": "healGivenInstancesByFixingNetworkIssues", "parameters": "(List<EC2InstanceTO> instances)", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healGivenInstancesByFixingNetworkIssues(List<EC2InstanceTO> instances)", "full_signature": "public EnvironmentHealerStepDefinitions healGivenInstancesByFixingNetworkIssues(List<EC2InstanceTO> instances)", "class_method_signature": "EnvironmentHealerStepDefinitions.healGivenInstancesByFixingNetworkIssues(List<EC2InstanceTO> instances)", "testcase": false, "constructor": false}, {"identifier": "healGivenInstancesByFixingCPU", "parameters": "(List<EC2InstanceTO> instances)", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healGivenInstancesByFixingCPU(List<EC2InstanceTO> instances)", "full_signature": "public EnvironmentHealerStepDefinitions healGivenInstancesByFixingCPU(List<EC2InstanceTO> instances)", "class_method_signature": "EnvironmentHealerStepDefinitions.healGivenInstancesByFixingCPU(List<EC2InstanceTO> instances)", "testcase": false, "constructor": false}, {"identifier": "healGivenInstancesByFixingPort", "parameters": "(List<EC2InstanceTO> instances)", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healGivenInstancesByFixingPort(List<EC2InstanceTO> instances)", "full_signature": "public EnvironmentHealerStepDefinitions healGivenInstancesByFixingPort(List<EC2InstanceTO> instances)", "class_method_signature": "EnvironmentHealerStepDefinitions.healGivenInstancesByFixingPort(List<EC2InstanceTO> instances)", "testcase": false, "constructor": false}, {"identifier": "healSSMGivenInstancesByFixingCPU", "parameters": "(List<EC2InstanceTO> instanceList)", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healSSMGivenInstancesByFixingCPU(List<EC2InstanceTO> instanceList)", "full_signature": "public EnvironmentHealerStepDefinitions healSSMGivenInstancesByFixingCPU(List<EC2InstanceTO> instanceList)", "class_method_signature": "EnvironmentHealerStepDefinitions.healSSMGivenInstancesByFixingCPU(List<EC2InstanceTO> instanceList)", "testcase": false, "constructor": false}, {"identifier": "healSSMGivenInstancesFixingNetworkIssues", "parameters": "(List<EC2InstanceTO> instanceList )", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healSSMGivenInstancesFixingNetworkIssues(List<EC2InstanceTO> instanceList )", "full_signature": "public EnvironmentHealerStepDefinitions healSSMGivenInstancesFixingNetworkIssues(List<EC2InstanceTO> instanceList )", "class_method_signature": "EnvironmentHealerStepDefinitions.healSSMGivenInstancesFixingNetworkIssues(List<EC2InstanceTO> instanceList )", "testcase": false, "constructor": false}, {"identifier": "healGivenInstancesFixingNetworkIssues", "parameters": "(List<EC2InstanceTO> instances )", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healGivenInstancesFixingNetworkIssues(List<EC2InstanceTO> instances )", "full_signature": "public EnvironmentHealerStepDefinitions healGivenInstancesFixingNetworkIssues(List<EC2InstanceTO> instances )", "class_method_signature": "EnvironmentHealerStepDefinitions.healGivenInstancesFixingNetworkIssues(List<EC2InstanceTO> instances )", "testcase": false, "constructor": false}, {"identifier": "healSSMGivenInstancesByUnblockingDynamoDB", "parameters": "(List<EC2InstanceTO> instanceList )", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healSSMGivenInstancesByUnblockingDynamoDB(List<EC2InstanceTO> instanceList )", "full_signature": "public EnvironmentHealerStepDefinitions healSSMGivenInstancesByUnblockingDynamoDB(List<EC2InstanceTO> instanceList )", "class_method_signature": "EnvironmentHealerStepDefinitions.healSSMGivenInstancesByUnblockingDynamoDB(List<EC2InstanceTO> instanceList )", "testcase": false, "constructor": false}, {"identifier": "healSSMGivenInstancesByUnblockingS3", "parameters": "(List<EC2InstanceTO> instanceList )", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healSSMGivenInstancesByUnblockingS3(List<EC2InstanceTO> instanceList )", "full_signature": "public EnvironmentHealerStepDefinitions healSSMGivenInstancesByUnblockingS3(List<EC2InstanceTO> instanceList )", "class_method_signature": "EnvironmentHealerStepDefinitions.healSSMGivenInstancesByUnblockingS3(List<EC2InstanceTO> instanceList )", "testcase": false, "constructor": false}, {"identifier": "healSSMGivenInstancesByFixingPort", "parameters": "(int portNum, List<EC2InstanceTO> instanceList)", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healSSMGivenInstancesByFixingPort(int portNum, List<EC2InstanceTO> instanceList)", "full_signature": "public EnvironmentHealerStepDefinitions healSSMGivenInstancesByFixingPort(int portNum, List<EC2InstanceTO> instanceList)", "class_method_signature": "EnvironmentHealerStepDefinitions.healSSMGivenInstancesByFixingPort(int portNum, List<EC2InstanceTO> instanceList)", "testcase": false, "constructor": false}, {"identifier": "healGivenSSMInstancesByProcess", "parameters": "(String processName, List<EC2InstanceTO> instanceList)", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healGivenSSMInstancesByProcess(String processName, List<EC2InstanceTO> instanceList)", "full_signature": "public EnvironmentHealerStepDefinitions healGivenSSMInstancesByProcess(String processName, List<EC2InstanceTO> instanceList)", "class_method_signature": "EnvironmentHealerStepDefinitions.healGivenSSMInstancesByProcess(String processName, List<EC2InstanceTO> instanceList)", "testcase": false, "constructor": false}, {"identifier": "healSSMGivenInstancesByDomainName", "parameters": "(String domainName, List<EC2InstanceTO> instanceList)", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healSSMGivenInstancesByDomainName(String domainName, List<EC2InstanceTO> instanceList)", "full_signature": "public EnvironmentHealerStepDefinitions healSSMGivenInstancesByDomainName(String domainName, List<EC2InstanceTO> instanceList)", "class_method_signature": "EnvironmentHealerStepDefinitions.healSSMGivenInstancesByDomainName(String domainName, List<EC2InstanceTO> instanceList)", "testcase": false, "constructor": false}, {"identifier": "healSSMGivenInstancesByFixingRamDisk", "parameters": "(List<EC2InstanceTO> instanceList)", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healSSMGivenInstancesByFixingRamDisk(List<EC2InstanceTO> instanceList)", "full_signature": "public EnvironmentHealerStepDefinitions healSSMGivenInstancesByFixingRamDisk(List<EC2InstanceTO> instanceList)", "class_method_signature": "EnvironmentHealerStepDefinitions.healSSMGivenInstancesByFixingRamDisk(List<EC2InstanceTO> instanceList)", "testcase": false, "constructor": false}, {"identifier": "healGivenInstancesByUnblockingDynamoDB", "parameters": "(List<EC2InstanceTO> instances )", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healGivenInstancesByUnblockingDynamoDB(List<EC2InstanceTO> instances )", "full_signature": "public EnvironmentHealerStepDefinitions healGivenInstancesByUnblockingDynamoDB(List<EC2InstanceTO> instances )", "class_method_signature": "EnvironmentHealerStepDefinitions.healGivenInstancesByUnblockingDynamoDB(List<EC2InstanceTO> instances )", "testcase": false, "constructor": false}, {"identifier": "healGivenInstancesByUnblockingS3", "parameters": "(List<EC2InstanceTO> instances )", "modifiers": "public", "return": "EnvironmentHealerStepDefinitions", "signature": "EnvironmentHealerStepDefinitions healGivenInstancesByUnblockingS3(List<EC2InstanceTO> instances )", "full_signature": "public EnvironmentHealerStepDefinitions healGivenInstancesByUnblockingS3(List<EC2InstanceTO> instances )", "class_method_signature": "EnvironmentHealerStepDefinitions.healGivenInstancesByUnblockingS3(List<EC2InstanceTO> instances )", "testcase": false, "constructor": false}], "file": "cloudraider-core/src/main/java/com/intuit/cloudraider/cucumber/steps/EnvironmentHealerStepDefinitions.java"}, "focal_method": {"identifier": "recover", "parameters": "()", "modifiers": "@Then(\"^recover$\") public", "return": "void", "body": "@Then(\"^recover$\")\n    public void recover() {\n        boolean isSSM = !executionStateCache.getSsmCommandInvocationInstances().isEmpty();\n\n        if (executionStateCache.isHealProcess()) {\n            List<String> processes = executionStateCache.getProcessNames();\n            for (String process : processes) {\n                if (isSSM) {\n\n                    healGivenSSMInstancesByProcess(process, executionStateCache.getSsmCommandInvocationInstances());\n                } else {\n                    healGivenInstancesByProcess(process, executionStateCache.getUnhealthyInstances());\n                }\n            }\n        }\n\n        if (executionStateCache.isHealNetwork()) {\n\n            if (isSSM) {\n                healSSMGivenInstancesFixingNetworkIssues(executionStateCache.getSsmCommandInvocationInstances());\n            }\n            else {\n                healGivenInstancesFixingNetworkIssues(executionStateCache.getUnhealthyInstances());\n            }\n        }\n\n        if (!executionStateCache.getBlockedDomains().isEmpty()) {\n            if (isSSM) {\n\n                executionStateCache.getBlockedDomains().parallelStream()\n                        .forEach(domain -> healSSMGivenInstancesByDomainName(domain, executionStateCache.getSsmCommandInvocationInstances()));\n            } else {\n                executionStateCache.getBlockedDomains().parallelStream()\n                        .forEach(domain -> healGivenInstancesByDomainName(domain, executionStateCache.getUnhealthyInstances()));\n            }\n        }\n\n        if (executionStateCache.isCpuSpiked()) {\n            if (isSSM) {\n\n                healSSMGivenInstancesByFixingCPU(executionStateCache.getSsmCommandInvocationInstances());\n            } else {\n                healGivenInstancesByFixingCPU(executionStateCache.getUnhealthyInstances());\n            }\n        }\n\n        if (executionStateCache.isBlockPort()) {\n            List<Integer> portNums = executionStateCache.getPortNums();\n            for (Integer port : portNums) {\n                if (isSSM) {\n\n                    healSSMGivenInstancesByFixingPort(port, executionStateCache.getSsmCommandInvocationInstances());\n                } else {\n                    healGivenInstancesByFixingPort(executionStateCache.getUnhealthyInstances());\n                }\n            }\n        }\n\n        if (executionStateCache.isRamDiskFull()) {\n            if (isSSM) {\n                healSSMGivenInstancesByFixingRamDisk(executionStateCache.getSsmCommandInvocationInstances());\n            } else {\n                healGivenInstancesByFixingRamDisk(executionStateCache.getUnhealthyInstances());\n            }\n        }\n\n\n        if (executionStateCache.isBlockDynamoDB())\n        {\n            if (isSSM) {\n\n                healSSMGivenInstancesByUnblockingDynamoDB(executionStateCache.getSsmCommandInvocationInstances());\n            }\n            else\n            {\n                healGivenInstancesByUnblockingDynamoDB(executionStateCache.getUnhealthyInstances());\n\n            }\n        }\n\n        if (executionStateCache.isBlockS3())\n        {\n            if (isSSM) {\n\n                healSSMGivenInstancesByUnblockingS3(executionStateCache.getSsmCommandInvocationInstances());\n            }\n            else\n            {\n                healGivenInstancesByUnblockingS3(executionStateCache.getUnhealthyInstances());\n\n            }\n        }\n\n\n    }", "signature": "void recover()", "full_signature": "@Then(\"^recover$\") public void recover()", "class_method_signature": "EnvironmentHealerStepDefinitions.recover()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getSsmCommandInvocationInstances", "isHealProcess", "getProcessNames", "healGivenSSMInstancesByProcess", "getSsmCommandInvocationInstances", "healGivenInstancesByProcess", "getUnhealthyInstances", "isHealNetwork", "healSSMGivenInstancesFixingNetworkIssues", "getSsmCommandInvocationInstances", "healGivenInstancesFixingNetworkIssues", "getUnhealthyInstances", "isEmpty", "getBlockedDomains", "forEach", "parallelStream", "getBlockedDomains", "healSSMGivenInstancesByDomainName", "getSsmCommandInvocationInstances", "forEach", "parallelStream", "getBlockedDomains", "healGivenInstancesByDomainName", "getUnhealthyInstances", "isCpuSpiked", "healSSMGivenInstancesByFixingCPU", "getSsmCommandInvocationInstances", "healGivenInstancesByFixingCPU", "getUnhealthyInstances", "isBlockPort", "getPortNums", "healSSMGivenInstancesByFixingPort", "getSsmCommandInvocationInstances", "healGivenInstancesByFixingPort", "getUnhealthyInstances", "isRamDiskFull", "healSSMGivenInstancesByFixingRamDisk", "getSsmCommandInvocationInstances", "healGivenInstancesByFixingRamDisk", "getUnhealthyInstances", "isBlockDynamoDB", "healSSMGivenInstancesByUnblockingDynamoDB", "getSsmCommandInvocationInstances", "healGivenInstancesByUnblockingDynamoDB", "getUnhealthyInstances", "isBlockS3", "healSSMGivenInstancesByUnblockingS3", "getSsmCommandInvocationInstances", "healGivenInstancesByUnblockingS3", "getUnhealthyInstances"]}, "repository": {"repo_id": 189453445, "url": "https://github.com/intuit/CloudRaider", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 16, "size": 730, "license": "licensed"}}