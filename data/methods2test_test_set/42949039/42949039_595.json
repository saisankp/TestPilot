{"test_class": {"identifier": "SearchIndexServiceImplTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AlternateKeyHelper alternateKeyHelper;", "modifier": "@Mock\n    private", "type": "AlternateKeyHelper", "declarator": "alternateKeyHelper", "var_name": "alternateKeyHelper"}, {"original_string": "@Mock\n    private BusinessObjectDefinitionDao businessObjectDefinitionDao;", "modifier": "@Mock\n    private", "type": "BusinessObjectDefinitionDao", "declarator": "businessObjectDefinitionDao", "var_name": "businessObjectDefinitionDao"}, {"original_string": "@Mock\n    private BusinessObjectDefinitionHelper businessObjectDefinitionHelper;", "modifier": "@Mock\n    private", "type": "BusinessObjectDefinitionHelper", "declarator": "businessObjectDefinitionHelper", "var_name": "businessObjectDefinitionHelper"}, {"original_string": "@Mock\n    private ConfigurationDaoHelper configurationDaoHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationDaoHelper", "declarator": "configurationDaoHelper", "var_name": "configurationDaoHelper"}, {"original_string": "@Mock\n    private ConfigurationHelper configurationHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Mock\n    private IndexFunctionsDao indexFunctionDao;", "modifier": "@Mock\n    private", "type": "IndexFunctionsDao", "declarator": "indexFunctionDao", "var_name": "indexFunctionDao"}, {"original_string": "@Mock\n    private SearchIndexDao searchIndexDao;", "modifier": "@Mock\n    private", "type": "SearchIndexDao", "declarator": "searchIndexDao", "var_name": "searchIndexDao"}, {"original_string": "@Mock\n    private SearchIndexDaoHelper searchIndexDaoHelper;", "modifier": "@Mock\n    private", "type": "SearchIndexDaoHelper", "declarator": "searchIndexDaoHelper", "var_name": "searchIndexDaoHelper"}, {"original_string": "@Mock\n    private SearchIndexHelperService searchIndexHelperService;", "modifier": "@Mock\n    private", "type": "SearchIndexHelperService", "declarator": "searchIndexHelperService", "var_name": "searchIndexHelperService"}, {"original_string": "@InjectMocks\n    private SearchIndexServiceImpl searchIndexServiceImpl;", "modifier": "@InjectMocks\n    private", "type": "SearchIndexServiceImpl", "declarator": "searchIndexServiceImpl", "var_name": "searchIndexServiceImpl"}, {"original_string": "@Mock\n    private SearchIndexStatusDaoHelper searchIndexStatusDaoHelper;", "modifier": "@Mock\n    private", "type": "SearchIndexStatusDaoHelper", "declarator": "searchIndexStatusDaoHelper", "var_name": "searchIndexStatusDaoHelper"}, {"original_string": "@Mock\n    private SearchIndexTypeDaoHelper searchIndexTypeDaoHelper;", "modifier": "@Mock\n    private", "type": "SearchIndexTypeDaoHelper", "declarator": "searchIndexTypeDaoHelper", "var_name": "searchIndexTypeDaoHelper"}, {"original_string": "@Mock\n    private TagDao tagDao;", "modifier": "@Mock\n    private", "type": "TagDao", "declarator": "tagDao", "var_name": "tagDao"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/impl/SearchIndexServiceImplTest.java"}, "test_case": {"identifier": "testCreateSearchIndexHelper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateSearchIndexHelper()\n    {\n        // Create a search index key.\n        SearchIndexKey searchIndexKey = new SearchIndexKey(SEARCH_INDEX_NAME);\n\n        // Get the search index type value.\n        String searchIndexType = SearchIndexTypeEntity.SearchIndexTypes.BUS_OBJCT_DFNTN.name();\n\n        // Mock some of the external call responses.\n        @SuppressWarnings(\"unchecked\")\n        Future<Void> mockedFuture = mock(Future.class);\n\n        // Mock the external calls.\n        when(configurationHelper.getProperty(ConfigurationValue.ELASTICSEARCH_BDEF_INDEX_NAME, String.class)).thenReturn(SEARCH_INDEX_ALIAS_BDEF);\n        when(configurationDaoHelper.getClobProperty(ConfigurationValue.ELASTICSEARCH_BDEF_MAPPINGS_JSON_V2.getKey())).thenReturn(SEARCH_INDEX_MAPPING);\n        when(configurationDaoHelper.getClobProperty(ConfigurationValue.ELASTICSEARCH_BDEF_SETTINGS_JSON_V2.getKey())).thenReturn(SEARCH_INDEX_SETTINGS);\n\n        when(searchIndexHelperService.indexAllBusinessObjectDefinitions(searchIndexKey)).thenReturn(mockedFuture);\n\n        // Create a search index.\n        searchIndexServiceImpl.createSearchIndexHelper(searchIndexKey, searchIndexType);\n\n        // Verify the external calls.\n        verify(configurationHelper).getProperty(ConfigurationValue.ELASTICSEARCH_BDEF_INDEX_NAME, String.class);\n        verify(configurationDaoHelper).getClobProperty(ConfigurationValue.ELASTICSEARCH_BDEF_MAPPINGS_JSON_V2.getKey());\n        verify(configurationDaoHelper).getClobProperty(ConfigurationValue.ELASTICSEARCH_BDEF_SETTINGS_JSON_V2.getKey());\n        verify(indexFunctionDao).createIndex(any(), any(), any(), any());\n        verify(searchIndexHelperService).indexAllBusinessObjectDefinitions(searchIndexKey);\n        verifyNoMoreInteractions(alternateKeyHelper, businessObjectDefinitionDao, businessObjectDefinitionHelper, configurationDaoHelper,\n            indexFunctionDao, searchIndexDao, searchIndexDaoHelper, searchIndexHelperService, searchIndexStatusDaoHelper, searchIndexTypeDaoHelper);\n    }", "signature": "void testCreateSearchIndexHelper()", "full_signature": "@Test public void testCreateSearchIndexHelper()", "class_method_signature": "SearchIndexServiceImplTest.testCreateSearchIndexHelper()", "testcase": true, "constructor": false, "invocations": ["name", "mock", "thenReturn", "when", "getProperty", "thenReturn", "when", "getClobProperty", "getKey", "thenReturn", "when", "getClobProperty", "getKey", "thenReturn", "when", "indexAllBusinessObjectDefinitions", "createSearchIndexHelper", "getProperty", "verify", "getClobProperty", "verify", "getKey", "getClobProperty", "verify", "getKey", "createIndex", "verify", "any", "any", "any", "any", "indexAllBusinessObjectDefinitions", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "SearchIndexServiceImpl", "superclass": "", "interfaces": "implements SearchIndexService", "fields": [{"original_string": "@Autowired\n    private AlternateKeyHelper alternateKeyHelper;", "modifier": "@Autowired\n    private", "type": "AlternateKeyHelper", "declarator": "alternateKeyHelper", "var_name": "alternateKeyHelper"}, {"original_string": "@Autowired\n    private ConfigurationDaoHelper configurationDaoHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationDaoHelper", "declarator": "configurationDaoHelper", "var_name": "configurationDaoHelper"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private SearchIndexDao searchIndexDao;", "modifier": "@Autowired\n    private", "type": "SearchIndexDao", "declarator": "searchIndexDao", "var_name": "searchIndexDao"}, {"original_string": "@Autowired\n    private SearchIndexDaoHelper searchIndexDaoHelper;", "modifier": "@Autowired\n    private", "type": "SearchIndexDaoHelper", "declarator": "searchIndexDaoHelper", "var_name": "searchIndexDaoHelper"}, {"original_string": "@Autowired\n    private SearchIndexHelperService searchIndexHelperService;", "modifier": "@Autowired\n    private", "type": "SearchIndexHelperService", "declarator": "searchIndexHelperService", "var_name": "searchIndexHelperService"}, {"original_string": "@Autowired\n    private SearchIndexStatusDaoHelper searchIndexStatusDaoHelper;", "modifier": "@Autowired\n    private", "type": "SearchIndexStatusDaoHelper", "declarator": "searchIndexStatusDaoHelper", "var_name": "searchIndexStatusDaoHelper"}, {"original_string": "@Autowired\n    private SearchIndexTypeDaoHelper searchIndexTypeDaoHelper;", "modifier": "@Autowired\n    private", "type": "SearchIndexTypeDaoHelper", "declarator": "searchIndexTypeDaoHelper", "var_name": "searchIndexTypeDaoHelper"}, {"original_string": "@Autowired\n    private IndexFunctionsDao indexFunctionsDao;", "modifier": "@Autowired\n    private", "type": "IndexFunctionsDao", "declarator": "indexFunctionsDao", "var_name": "indexFunctionsDao"}], "methods": [{"identifier": "createSearchIndex", "parameters": "(SearchIndexCreateRequest request)", "modifiers": "@Override public", "return": "SearchIndex", "signature": "SearchIndex createSearchIndex(SearchIndexCreateRequest request)", "full_signature": "@Override public SearchIndex createSearchIndex(SearchIndexCreateRequest request)", "class_method_signature": "SearchIndexServiceImpl.createSearchIndex(SearchIndexCreateRequest request)", "testcase": false, "constructor": false}, {"identifier": "deleteSearchIndex", "parameters": "(SearchIndexKey searchIndexKey)", "modifiers": "@Override public", "return": "SearchIndex", "signature": "SearchIndex deleteSearchIndex(SearchIndexKey searchIndexKey)", "full_signature": "@Override public SearchIndex deleteSearchIndex(SearchIndexKey searchIndexKey)", "class_method_signature": "SearchIndexServiceImpl.deleteSearchIndex(SearchIndexKey searchIndexKey)", "testcase": false, "constructor": false}, {"identifier": "getSearchIndex", "parameters": "(SearchIndexKey searchIndexKey)", "modifiers": "@Override public", "return": "SearchIndex", "signature": "SearchIndex getSearchIndex(SearchIndexKey searchIndexKey)", "full_signature": "@Override public SearchIndex getSearchIndex(SearchIndexKey searchIndexKey)", "class_method_signature": "SearchIndexServiceImpl.getSearchIndex(SearchIndexKey searchIndexKey)", "testcase": false, "constructor": false}, {"identifier": "getSearchIndexes", "parameters": "()", "modifiers": "@Override public", "return": "SearchIndexKeys", "signature": "SearchIndexKeys getSearchIndexes()", "full_signature": "@Override public SearchIndexKeys getSearchIndexes()", "class_method_signature": "SearchIndexServiceImpl.getSearchIndexes()", "testcase": false, "constructor": false}, {"identifier": "createSearchIndexEntity", "parameters": "(SearchIndexCreateRequest request, SearchIndexTypeEntity searchIndexTypeEntity,\n        SearchIndexStatusEntity searchIndexStatusEntity)", "modifiers": "protected", "return": "SearchIndexEntity", "signature": "SearchIndexEntity createSearchIndexEntity(SearchIndexCreateRequest request, SearchIndexTypeEntity searchIndexTypeEntity,\n        SearchIndexStatusEntity searchIndexStatusEntity)", "full_signature": "protected SearchIndexEntity createSearchIndexEntity(SearchIndexCreateRequest request, SearchIndexTypeEntity searchIndexTypeEntity,\n        SearchIndexStatusEntity searchIndexStatusEntity)", "class_method_signature": "SearchIndexServiceImpl.createSearchIndexEntity(SearchIndexCreateRequest request, SearchIndexTypeEntity searchIndexTypeEntity,\n        SearchIndexStatusEntity searchIndexStatusEntity)", "testcase": false, "constructor": false}, {"identifier": "createSearchIndexFromEntity", "parameters": "(SearchIndexEntity searchIndexEntity)", "modifiers": "protected", "return": "SearchIndex", "signature": "SearchIndex createSearchIndexFromEntity(SearchIndexEntity searchIndexEntity)", "full_signature": "protected SearchIndex createSearchIndexFromEntity(SearchIndexEntity searchIndexEntity)", "class_method_signature": "SearchIndexServiceImpl.createSearchIndexFromEntity(SearchIndexEntity searchIndexEntity)", "testcase": false, "constructor": false}, {"identifier": "createSearchIndexHelper", "parameters": "(SearchIndexKey searchIndexKey, String searchIndexType)", "modifiers": "protected", "return": "void", "signature": "void createSearchIndexHelper(SearchIndexKey searchIndexKey, String searchIndexType)", "full_signature": "protected void createSearchIndexHelper(SearchIndexKey searchIndexKey, String searchIndexType)", "class_method_signature": "SearchIndexServiceImpl.createSearchIndexHelper(SearchIndexKey searchIndexKey, String searchIndexType)", "testcase": false, "constructor": false}, {"identifier": "createSearchIndexStatistics", "parameters": "(Settings settings, DocsStats docsStats, long indexCount)", "modifiers": "protected", "return": "SearchIndexStatistics", "signature": "SearchIndexStatistics createSearchIndexStatistics(Settings settings, DocsStats docsStats, long indexCount)", "full_signature": "protected SearchIndexStatistics createSearchIndexStatistics(Settings settings, DocsStats docsStats, long indexCount)", "class_method_signature": "SearchIndexServiceImpl.createSearchIndexStatistics(Settings settings, DocsStats docsStats, long indexCount)", "testcase": false, "constructor": false}, {"identifier": "deleteSearchIndexHelper", "parameters": "(String searchIndexName)", "modifiers": "protected", "return": "void", "signature": "void deleteSearchIndexHelper(String searchIndexName)", "full_signature": "protected void deleteSearchIndexHelper(String searchIndexName)", "class_method_signature": "SearchIndexServiceImpl.deleteSearchIndexHelper(String searchIndexName)", "testcase": false, "constructor": false}, {"identifier": "validateSearchIndexCreateRequest", "parameters": "(SearchIndexCreateRequest request)", "modifiers": "private", "return": "void", "signature": "void validateSearchIndexCreateRequest(SearchIndexCreateRequest request)", "full_signature": "private void validateSearchIndexCreateRequest(SearchIndexCreateRequest request)", "class_method_signature": "SearchIndexServiceImpl.validateSearchIndexCreateRequest(SearchIndexCreateRequest request)", "testcase": false, "constructor": false}, {"identifier": "validateSearchIndexKey", "parameters": "(SearchIndexKey key)", "modifiers": "private", "return": "void", "signature": "void validateSearchIndexKey(SearchIndexKey key)", "full_signature": "private void validateSearchIndexKey(SearchIndexKey key)", "class_method_signature": "SearchIndexServiceImpl.validateSearchIndexKey(SearchIndexKey key)", "testcase": false, "constructor": false}, {"identifier": "setSearchIndexName", "parameters": "(String searchIndexType)", "modifiers": "private", "return": "String", "signature": "String setSearchIndexName(String searchIndexType)", "full_signature": "private String setSearchIndexName(String searchIndexType)", "class_method_signature": "SearchIndexServiceImpl.setSearchIndexName(String searchIndexType)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/impl/SearchIndexServiceImpl.java"}, "focal_method": {"identifier": "createSearchIndexHelper", "parameters": "(SearchIndexKey searchIndexKey, String searchIndexType)", "modifiers": "protected", "return": "void", "body": "protected void createSearchIndexHelper(SearchIndexKey searchIndexKey, String searchIndexType)\n    {\n        String mapping;\n        String settings;\n        String alias;\n\n        // Currently, only search index for business object definitions and tag are supported.\n        if (SearchIndexTypeEntity.SearchIndexTypes.BUS_OBJCT_DFNTN.name().equalsIgnoreCase(searchIndexType))\n        {\n            mapping = configurationDaoHelper.getClobProperty(ConfigurationValue.ELASTICSEARCH_BDEF_MAPPINGS_JSON_V2.getKey());\n            settings = configurationDaoHelper.getClobProperty(ConfigurationValue.ELASTICSEARCH_BDEF_SETTINGS_JSON_V2.getKey());\n            alias = configurationHelper.getProperty(ConfigurationValue.ELASTICSEARCH_BDEF_INDEX_NAME, String.class);\n        }\n        else if (SearchIndexTypeEntity.SearchIndexTypes.TAG.name().equalsIgnoreCase(searchIndexType))\n        {\n            mapping = configurationDaoHelper.getClobProperty(ConfigurationValue.ELASTICSEARCH_TAG_MAPPINGS_JSON_V2.getKey());\n            settings = configurationDaoHelper.getClobProperty(ConfigurationValue.ELASTICSEARCH_TAG_SETTINGS_JSON_V2.getKey());\n            alias = configurationHelper.getProperty(ConfigurationValue.ELASTICSEARCH_TAG_INDEX_NAME, String.class);\n        }\n        else\n        {\n            throw new IllegalArgumentException(String.format(\"Search index type with code \\\"%s\\\" is not supported.\", searchIndexType));\n        }\n\n        // Create the index.\n        indexFunctionsDao.createIndex(searchIndexKey.getSearchIndexName(), mapping, settings, alias);\n\n        //Fetch data from database and index them\n        if (SearchIndexTypeEntity.SearchIndexTypes.BUS_OBJCT_DFNTN.name().equalsIgnoreCase(searchIndexType))\n        {\n            // Asynchronously index all business object definitions.\n            searchIndexHelperService.indexAllBusinessObjectDefinitions(searchIndexKey);\n        }\n        else\n        {\n            // Asynchronously index all tags. If we got to this point, it is tags\n            searchIndexHelperService.indexAllTags(searchIndexKey);\n        }\n    }", "signature": "void createSearchIndexHelper(SearchIndexKey searchIndexKey, String searchIndexType)", "full_signature": "protected void createSearchIndexHelper(SearchIndexKey searchIndexKey, String searchIndexType)", "class_method_signature": "SearchIndexServiceImpl.createSearchIndexHelper(SearchIndexKey searchIndexKey, String searchIndexType)", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "name", "getClobProperty", "getKey", "getClobProperty", "getKey", "getProperty", "equalsIgnoreCase", "name", "getClobProperty", "getKey", "getClobProperty", "getKey", "getProperty", "format", "createIndex", "getSearchIndexName", "equalsIgnoreCase", "name", "indexAllBusinessObjectDefinitions", "indexAllTags"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}