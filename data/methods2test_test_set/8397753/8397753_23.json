{"test_class": {"identifier": "TestGitAdd", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "File repoDirectory;", "modifier": "", "type": "File", "declarator": "repoDirectory", "var_name": "repoDirectory"}, {"original_string": "GitAdd gitAdd;", "modifier": "", "type": "GitAdd", "declarator": "gitAdd", "var_name": "gitAdd"}, {"original_string": "GitStatus gitStatus;", "modifier": "", "type": "GitStatus", "declarator": "gitStatus", "var_name": "gitStatus"}], "file": "javagit/src/test/java/edu/nyu/cs/javagit/api/commands/TestGitAdd.java"}, "test_case": {"identifier": "testAddingOneFileToRepositoryBlanksInPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddingOneFileToRepositoryBlanksInPath() throws IOException, JavaGitException {\n        File file1 = FileUtilities.createFile(repoDirectory, \"file A.txt\", \"This is file fileA.txt\");\n        gitAdd.add(repoDirectory, file1);\n        GitStatusResponse statusResponse = gitStatus.status(repoDirectory);\n        assertEquals(\"File to commit\", 1, statusResponse.getNewFilesToCommitSize());\n        assertEquals(\"Wrong path, \", repoDirectory.getAbsolutePath() + File.separator + \"file A.txt\",statusResponse.getNewFilesToCommit().iterator().next().getAbsolutePath() );\n    }", "signature": "void testAddingOneFileToRepositoryBlanksInPath()", "full_signature": "@Test public void testAddingOneFileToRepositoryBlanksInPath()", "class_method_signature": "TestGitAdd.testAddingOneFileToRepositoryBlanksInPath()", "testcase": true, "constructor": false, "invocations": ["createFile", "add", "status", "assertEquals", "getNewFilesToCommitSize", "assertEquals", "getAbsolutePath", "getAbsolutePath", "next", "iterator", "getNewFilesToCommit"]}, "focal_class": {"identifier": "GitAdd", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "add", "parameters": "(File repositoryPath, GitAddOptions options, List<File> paths)", "modifiers": "public", "return": "GitAddResponse", "signature": "GitAddResponse add(File repositoryPath, GitAddOptions options, List<File> paths)", "full_signature": "public GitAddResponse add(File repositoryPath, GitAddOptions options, List<File> paths)", "class_method_signature": "GitAdd.add(File repositoryPath, GitAddOptions options, List<File> paths)", "testcase": false, "constructor": false}, {"identifier": "addVerbose", "parameters": "(File repositoryPath, List<File> paths)", "modifiers": "public", "return": "GitAddResponse", "signature": "GitAddResponse addVerbose(File repositoryPath, List<File> paths)", "full_signature": "public GitAddResponse addVerbose(File repositoryPath, List<File> paths)", "class_method_signature": "GitAdd.addVerbose(File repositoryPath, List<File> paths)", "testcase": false, "constructor": false}, {"identifier": "addWithForce", "parameters": "(File repositoryPath, List<File> paths)", "modifiers": "public", "return": "GitAddResponse", "signature": "GitAddResponse addWithForce(File repositoryPath, List<File> paths)", "full_signature": "public GitAddResponse addWithForce(File repositoryPath, List<File> paths)", "class_method_signature": "GitAdd.addWithForce(File repositoryPath, List<File> paths)", "testcase": false, "constructor": false}, {"identifier": "addDryRun", "parameters": "(File repositoryPath, List<File> paths)", "modifiers": "public", "return": "GitAddResponse", "signature": "GitAddResponse addDryRun(File repositoryPath, List<File> paths)", "full_signature": "public GitAddResponse addDryRun(File repositoryPath, List<File> paths)", "class_method_signature": "GitAdd.addDryRun(File repositoryPath, List<File> paths)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(File repositoryPath, GitAddOptions options, File file)", "modifiers": "public", "return": "GitAddResponse", "signature": "GitAddResponse add(File repositoryPath, GitAddOptions options, File file)", "full_signature": "public GitAddResponse add(File repositoryPath, GitAddOptions options, File file)", "class_method_signature": "GitAdd.add(File repositoryPath, GitAddOptions options, File file)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(File repositoryPath, File file)", "modifiers": "public", "return": "GitAddResponse", "signature": "GitAddResponse add(File repositoryPath, File file)", "full_signature": "public GitAddResponse add(File repositoryPath, File file)", "class_method_signature": "GitAdd.add(File repositoryPath, File file)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(File repositoryPath, List<File> paths)", "modifiers": "public", "return": "GitAddResponse", "signature": "GitAddResponse add(File repositoryPath, List<File> paths)", "full_signature": "public GitAddResponse add(File repositoryPath, List<File> paths)", "class_method_signature": "GitAdd.add(File repositoryPath, List<File> paths)", "testcase": false, "constructor": false}], "file": "javagit/src/main/java/edu/nyu/cs/javagit/api/commands/GitAdd.java"}, "focal_method": {"identifier": "add", "parameters": "(File repositoryPath, GitAddOptions options, List<File> paths)", "modifiers": "public", "return": "GitAddResponse", "body": "public GitAddResponse add(File repositoryPath, GitAddOptions options, List<File> paths)\n      throws IOException, JavaGitException {\n    CheckUtilities.checkFileValidity(repositoryPath.getAbsoluteFile());\n    IClient client = ClientManager.getInstance().getPreferredClient();\n    IGitAdd gitAdd = client.getGitAddInstance();\n    return gitAdd.add(repositoryPath, options, paths);\n  }", "signature": "GitAddResponse add(File repositoryPath, GitAddOptions options, List<File> paths)", "full_signature": "public GitAddResponse add(File repositoryPath, GitAddOptions options, List<File> paths)", "class_method_signature": "GitAdd.add(File repositoryPath, GitAddOptions options, List<File> paths)", "testcase": false, "constructor": false, "invocations": ["checkFileValidity", "getAbsoluteFile", "getPreferredClient", "getInstance", "getGitAddInstance", "add"]}, "repository": {"repo_id": 8397753, "url": "https://github.com/bit-man/SwissArmyJavaGit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 1549, "license": "licensed"}}