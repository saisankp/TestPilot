{"test_class": {"identifier": "HtmlCellCssApplierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<Element> cells = new ArrayList<Element>();", "modifier": "private final", "type": "List<Element>", "declarator": "cells = new ArrayList<Element>()", "var_name": "cells"}, {"original_string": "Tag tag = new Tag(\"td\", new HashMap<String, String>());", "modifier": "", "type": "Tag", "declarator": "tag = new Tag(\"td\", new HashMap<String, String>())", "var_name": "tag"}, {"original_string": "private final NoNewLineParagraph basicPara = new NoNewLineParagraph();", "modifier": "private final", "type": "NoNewLineParagraph", "declarator": "basicPara = new NoNewLineParagraph()", "var_name": "basicPara"}, {"original_string": "private final Chunk basic = new Chunk(\"content\");", "modifier": "private final", "type": "Chunk", "declarator": "basic = new Chunk(\"content\")", "var_name": "basic"}, {"original_string": "private TableRowElement row1;", "modifier": "private", "type": "TableRowElement", "declarator": "row1", "var_name": "row1"}, {"original_string": "private final HtmlCell cell = new HtmlCell();", "modifier": "private final", "type": "HtmlCell", "declarator": "cell = new HtmlCell()", "var_name": "cell"}, {"original_string": "private final HtmlCellCssApplier applier = new HtmlCellCssApplier();", "modifier": "private final", "type": "HtmlCellCssApplier", "declarator": "applier = new HtmlCellCssApplier()", "var_name": "applier"}, {"original_string": "private HtmlPipelineContext config;", "modifier": "private", "type": "HtmlPipelineContext", "declarator": "config", "var_name": "config"}], "file": "xmlworker/src/test/java/com/itextpdf/tool/xml/css/apply/HtmlCellCssApplierTest.java"}, "test_case": {"identifier": "resolveRowspan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void resolveRowspan() {\n\t\tassertEquals(1, cell.getRowspan(), 0);\n\t\ttag.getAttributes().put(\"rowspan\", \"3\");\n\t\tapplier.apply(cell, tag, config,config);\n\t\tassertEquals(3, cell.getRowspan());\n\t}", "signature": "void resolveRowspan()", "full_signature": "@Test public void resolveRowspan()", "class_method_signature": "HtmlCellCssApplierTest.resolveRowspan()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getRowspan", "put", "getAttributes", "apply", "assertEquals", "getRowspan"]}, "focal_class": {"identifier": "HtmlCellCssApplier", "superclass": "", "interfaces": "implements CssApplier<HtmlCell>", "fields": [{"original_string": "private final CssUtils utils = CssUtils.getInstance();", "modifier": "private final", "type": "CssUtils", "declarator": "utils = CssUtils.getInstance()", "var_name": "utils"}], "methods": [{"identifier": "apply", "parameters": "(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc)", "modifiers": "public", "return": "HtmlCell", "signature": "HtmlCell apply(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc)", "full_signature": "public HtmlCell apply(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc)", "class_method_signature": "HtmlCellCssApplier.apply(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc, final HtmlPipelineContext ctx)", "modifiers": "public", "return": "HtmlCell", "signature": "HtmlCell apply(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc, final HtmlPipelineContext ctx)", "full_signature": "public HtmlCell apply(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc, final HtmlPipelineContext ctx)", "class_method_signature": "HtmlCellCssApplier.apply(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc, final HtmlPipelineContext ctx)", "testcase": false, "constructor": false}, {"identifier": "setTopOfBorder", "parameters": "(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "modifiers": "private", "return": "void", "signature": "void setTopOfBorder(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "full_signature": "private void setTopOfBorder(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "class_method_signature": "HtmlCellCssApplier.setTopOfBorder(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "testcase": false, "constructor": false}, {"identifier": "setBottomOfBorder", "parameters": "(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "modifiers": "private", "return": "void", "signature": "void setBottomOfBorder(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "full_signature": "private void setBottomOfBorder(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "class_method_signature": "HtmlCellCssApplier.setBottomOfBorder(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "testcase": false, "constructor": false}, {"identifier": "setLeftOfBorder", "parameters": "(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "modifiers": "private", "return": "void", "signature": "void setLeftOfBorder(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "full_signature": "private void setLeftOfBorder(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "class_method_signature": "HtmlCellCssApplier.setLeftOfBorder(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "testcase": false, "constructor": false}, {"identifier": "setRightOfBorder", "parameters": "(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "modifiers": "private", "return": "void", "signature": "void setRightOfBorder(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "full_signature": "private void setRightOfBorder(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "class_method_signature": "HtmlCellCssApplier.setRightOfBorder(final HtmlCell cell, final String key, final String value, final TableStyleValues values)", "testcase": false, "constructor": false}], "file": "xmlworker/src/main/java/com/itextpdf/tool/xml/css/apply/HtmlCellCssApplier.java"}, "focal_method": {"identifier": "apply", "parameters": "(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc)", "modifiers": "public", "return": "HtmlCell", "body": "public HtmlCell apply(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc) {\n        return apply(cell, t, memory, psc, null);\n    }", "signature": "HtmlCell apply(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc)", "full_signature": "public HtmlCell apply(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc)", "class_method_signature": "HtmlCellCssApplier.apply(final HtmlCell cell, final Tag t, final MarginMemory memory, final PageSizeContainable psc)", "testcase": false, "constructor": false, "invocations": ["apply"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}