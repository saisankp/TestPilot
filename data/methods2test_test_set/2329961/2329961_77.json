{"test_class": {"identifier": "SlotMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(SlotMapperTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(SlotMapperTest.class.getName())", "var_name": "log"}, {"original_string": "private static final long t1 = 1295872085000L;", "modifier": "private static final", "type": "long", "declarator": "t1 = 1295872085000L", "var_name": "t1"}, {"original_string": "private static final String SERVICENAME = \"testservice\";", "modifier": "private static final", "type": "String", "declarator": "SERVICENAME = \"testservice\"", "var_name": "SERVICENAME"}], "file": "log/src/test/java/org/cloudname/log/archiver/SlotMapperTest.java"}, "test_case": {"identifier": "testBoundaries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBoundaries() throws Exception\n    {\n        // I seriously can't be arsed to adapt the unit test for\n        // Windows.\n        if (! \"/\".equals(File.separator)) {\n            return;\n        }\n\n        SlotMapper mapper = new SlotMapper();\n\n        GregorianCalendar c1;\n        GregorianCalendar c2;\n\n        // Test hour rollover\n        c1 = new GregorianCalendar(2011,0,20,1,59,59);\n        c2 = new GregorianCalendar(2011,0,20,2,0,0);\n        ensureDifferent(mapper, c1, c2);\n        ensureConsistentMapping(mapper, c1);\n        ensureConsistentMapping(mapper, c2);\n        assertEquals(\"2011/01/20/\"+SERVICENAME+\"_2011-01-20_01\", mapper.map(c1.getTimeInMillis(), SERVICENAME));\n        assertEquals(\"2011/01/20/\"+SERVICENAME+\"_2011-01-20_02\", mapper.map(c2.getTimeInMillis(), SERVICENAME));\n\n        // Test day rollover\n        c1 = new GregorianCalendar(2011,0,20,23,59,59);\n        c2 = new GregorianCalendar(2011,0,21,0,0,0);\n        ensureDifferent(mapper, c1, c2);\n        ensureConsistentMapping(mapper, c1);\n        ensureConsistentMapping(mapper, c2);\n        assertEquals(\"2011/01/20/\"+SERVICENAME+\"_2011-01-20_23\", mapper.map(c1.getTimeInMillis(), SERVICENAME));\n        assertEquals(\"2011/01/21/\"+SERVICENAME+\"_2011-01-21_00\", mapper.map(c2.getTimeInMillis(), SERVICENAME));\n\n\n        // Test month rollover\n        c1 = new GregorianCalendar(2011,0,31,23,59,59);\n        c2 = new GregorianCalendar(2011,1,1,0,0,0);\n        ensureDifferent(mapper, c1, c2);\n        ensureConsistentMapping(mapper, c1);\n        ensureConsistentMapping(mapper, c2);\n        assertEquals(\"2011/01/31/\"+SERVICENAME+\"_2011-01-31_23\", mapper.map(c1.getTimeInMillis(), SERVICENAME));\n        assertEquals(\"2011/02/01/\"+SERVICENAME+\"_2011-02-01_00\", mapper.map(c2.getTimeInMillis(), SERVICENAME));\n\n        // Test month rollover, february, non-leap year\n        c1 = new GregorianCalendar(2011,1,28,23,59,59);\n        c2 = new GregorianCalendar(2011,2,1,0,0,0);\n        ensureDifferent(mapper, c1, c2);\n        ensureConsistentMapping(mapper, c1);\n        ensureConsistentMapping(mapper, c2);\n        assertEquals(\"2011/02/28/\"+SERVICENAME+\"_2011-02-28_23\", mapper.map(c1.getTimeInMillis(), SERVICENAME));\n        assertEquals(\"2011/03/01/\"+SERVICENAME+\"_2011-03-01_00\", mapper.map(c2.getTimeInMillis(), SERVICENAME));\n\n        // Test month rollover, february, leap year\n        c1 = new GregorianCalendar(2012,1,29,23,59,59);\n        c2 = new GregorianCalendar(2012,2,1,0,0,0);\n        ensureDifferent(mapper, c1, c2);\n        ensureConsistentMapping(mapper, c1);\n        ensureConsistentMapping(mapper, c2);\n        assertEquals(\"2012/02/29/\"+SERVICENAME+\"_2012-02-29_23\", mapper.map(c1.getTimeInMillis(), SERVICENAME));\n        assertEquals(\"2012/03/01/\"+SERVICENAME+\"_2012-03-01_00\", mapper.map(c2.getTimeInMillis(), SERVICENAME));\n\n        // Test year rollover\n        c1 = new GregorianCalendar(2011,11,31,23,59,59);\n        c2 = new GregorianCalendar(2012,0,1,0,0,0);\n        ensureDifferent(mapper, c1, c2);\n        ensureConsistentMapping(mapper, c1);\n        ensureConsistentMapping(mapper, c2);\n        assertEquals(\"2011/12/31/\"+SERVICENAME+\"_2011-12-31_23\", mapper.map(c1.getTimeInMillis(), SERVICENAME));\n        assertEquals(\"2012/01/01/\"+SERVICENAME+\"_2012-01-01_00\", mapper.map(c2.getTimeInMillis(), SERVICENAME));\n    }", "signature": "void testBoundaries()", "full_signature": "@Test public void testBoundaries()", "class_method_signature": "SlotMapperTest.testBoundaries()", "testcase": true, "constructor": false, "invocations": ["equals", "ensureDifferent", "ensureConsistentMapping", "ensureConsistentMapping", "assertEquals", "map", "getTimeInMillis", "assertEquals", "map", "getTimeInMillis", "ensureDifferent", "ensureConsistentMapping", "ensureConsistentMapping", "assertEquals", "map", "getTimeInMillis", "assertEquals", "map", "getTimeInMillis", "ensureDifferent", "ensureConsistentMapping", "ensureConsistentMapping", "assertEquals", "map", "getTimeInMillis", "assertEquals", "map", "getTimeInMillis", "ensureDifferent", "ensureConsistentMapping", "ensureConsistentMapping", "assertEquals", "map", "getTimeInMillis", "assertEquals", "map", "getTimeInMillis", "ensureDifferent", "ensureConsistentMapping", "ensureConsistentMapping", "assertEquals", "map", "getTimeInMillis", "assertEquals", "map", "getTimeInMillis", "ensureDifferent", "ensureConsistentMapping", "ensureConsistentMapping", "assertEquals", "map", "getTimeInMillis", "assertEquals", "map", "getTimeInMillis"]}, "focal_class": {"identifier": "SlotMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final TimeZone TZ = TimeZone.getTimeZone(\"UTC\");", "modifier": "public static final", "type": "TimeZone", "declarator": "TZ = TimeZone.getTimeZone(\"UTC\")", "var_name": "TZ"}, {"original_string": "public static final long SLOT_LENGTH = 3600000L;", "modifier": "public static final", "type": "long", "declarator": "SLOT_LENGTH = 3600000L", "var_name": "SLOT_LENGTH"}, {"original_string": "public static final int LARGE_CACHE = 255;", "modifier": "public static final", "type": "int", "declarator": "LARGE_CACHE = 255", "var_name": "LARGE_CACHE"}, {"original_string": "private final Map<Long,String> slotCache = new HashMap<Long,String>();", "modifier": "private final", "type": "Map<Long,String>", "declarator": "slotCache = new HashMap<Long,String>()", "var_name": "slotCache"}], "methods": [{"identifier": "map", "parameters": "(long time, String service)", "modifiers": "public", "return": "String", "signature": "String map(long time, String service)", "full_signature": "public String map(long time, String service)", "class_method_signature": "SlotMapper.map(long time, String service)", "testcase": false, "constructor": false}, {"identifier": "mapToPath", "parameters": "(long time, String service)", "modifiers": "public static", "return": "String", "signature": "String mapToPath(long time, String service)", "full_signature": "public static String mapToPath(long time, String service)", "class_method_signature": "SlotMapper.mapToPath(long time, String service)", "testcase": false, "constructor": false}], "file": "log/src/main/java/org/cloudname/log/archiver/SlotMapper.java"}, "focal_method": {"identifier": "map", "parameters": "(long time, String service)", "modifiers": "public", "return": "String", "body": "public String map(long time, String service)\n    {\n        // I am going out on a limb here assuming that if we come across\n        // log messages that come from before 1970 you won't be too upset\n        // about me blatantly assuming they may be a bit fishy.\n        if (time < 0) {\n            throw new IllegalArgumentException(\"Timestamp was less than zero\");\n        }\n\n        long slotnum = time / SLOT_LENGTH;\n        String slot = slotCache.get(slotnum);\n\n        // If a slot was not found we calculate the path for that slot\n        // and add it to the cache\n        if (null == slot) {\n            // Take this opportunity to possibly nuke the entire cache\n            // if it has grown beyond LARGE_CACHE number of entries.\n            // For all but the most degenerate use-cases this should not\n            // affect performance noticably\n            if (slotCache.size() > LARGE_CACHE) {\n                slotCache.clear();\n            }\n\n            slot = mapToPath(time, service);\n            slotCache.put(slotnum, slot);\n        }\n\n        return slot;\n    }", "signature": "String map(long time, String service)", "full_signature": "public String map(long time, String service)", "class_method_signature": "SlotMapper.map(long time, String service)", "testcase": false, "constructor": false, "invocations": ["get", "size", "clear", "mapToPath", "put"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}