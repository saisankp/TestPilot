{"test_class": {"identifier": "TracingInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Tracing tracing = Tracing.newBuilder().build();", "modifier": "", "type": "Tracing", "declarator": "tracing = Tracing.newBuilder().build()", "var_name": "tracing"}, {"original_string": "@Mock Interceptor.Chain chain;", "modifier": "@Mock", "type": "Interceptor.Chain", "declarator": "chain", "var_name": "chain"}, {"original_string": "@Mock Span span;", "modifier": "@Mock", "type": "Span", "declarator": "span", "var_name": "span"}], "file": "instrumentation/okhttp3/src/test/java/brave/okhttp3/TracingInterceptorTest.java"}, "test_case": {"identifier": "parseRouteAddress_skipsOnNoop", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void parseRouteAddress_skipsOnNoop() {\n    when(span.isNoop()).thenReturn(true);\n    TracingInterceptor.parseRouteAddress(chain, span);\n\n    verify(span).isNoop();\n    verifyNoMoreInteractions(span);\n  }", "signature": "void parseRouteAddress_skipsOnNoop()", "full_signature": "@Test public void parseRouteAddress_skipsOnNoop()", "class_method_signature": "TracingInterceptorTest.parseRouteAddress_skipsOnNoop()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isNoop", "parseRouteAddress", "isNoop", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "TracingInterceptor", "superclass": "", "interfaces": "implements Interceptor", "fields": [{"original_string": "final CurrentTraceContext currentTraceContext;", "modifier": "final", "type": "CurrentTraceContext", "declarator": "currentTraceContext", "var_name": "currentTraceContext"}, {"original_string": "final HttpClientHandler<HttpClientRequest, HttpClientResponse> handler;", "modifier": "final", "type": "HttpClientHandler<HttpClientRequest, HttpClientResponse>", "declarator": "handler", "var_name": "handler"}], "methods": [{"identifier": "create", "parameters": "(Tracing tracing)", "modifiers": "public static", "return": "Interceptor", "signature": "Interceptor create(Tracing tracing)", "full_signature": "public static Interceptor create(Tracing tracing)", "class_method_signature": "TracingInterceptor.create(Tracing tracing)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(HttpTracing httpTracing)", "modifiers": "public static", "return": "Interceptor", "signature": "Interceptor create(HttpTracing httpTracing)", "full_signature": "public static Interceptor create(HttpTracing httpTracing)", "class_method_signature": "TracingInterceptor.create(HttpTracing httpTracing)", "testcase": false, "constructor": false}, {"identifier": "TracingInterceptor", "parameters": "(HttpTracing httpTracing)", "modifiers": "", "return": "", "signature": " TracingInterceptor(HttpTracing httpTracing)", "full_signature": "  TracingInterceptor(HttpTracing httpTracing)", "class_method_signature": "TracingInterceptor.TracingInterceptor(HttpTracing httpTracing)", "testcase": false, "constructor": true}, {"identifier": "intercept", "parameters": "(Chain chain)", "modifiers": "@Override public", "return": "Response", "signature": "Response intercept(Chain chain)", "full_signature": "@Override public Response intercept(Chain chain)", "class_method_signature": "TracingInterceptor.intercept(Chain chain)", "testcase": false, "constructor": false}, {"identifier": "parseRouteAddress", "parameters": "(Chain chain, Span span)", "modifiers": "static", "return": "void", "signature": "void parseRouteAddress(Chain chain, Span span)", "full_signature": "static void parseRouteAddress(Chain chain, Span span)", "class_method_signature": "TracingInterceptor.parseRouteAddress(Chain chain, Span span)", "testcase": false, "constructor": false}], "file": "instrumentation/okhttp3/src/main/java/brave/okhttp3/TracingInterceptor.java"}, "focal_method": {"identifier": "parseRouteAddress", "parameters": "(Chain chain, Span span)", "modifiers": "static", "return": "void", "body": "static void parseRouteAddress(Chain chain, Span span) {\n    if (span.isNoop()) return;\n    Connection connection = chain.connection();\n    if (connection == null) return;\n    InetSocketAddress socketAddress = connection.route().socketAddress();\n    span.remoteIpAndPort(socketAddress.getHostString(), socketAddress.getPort());\n  }", "signature": "void parseRouteAddress(Chain chain, Span span)", "full_signature": "static void parseRouteAddress(Chain chain, Span span)", "class_method_signature": "TracingInterceptor.parseRouteAddress(Chain chain, Span span)", "testcase": false, "constructor": false, "invocations": ["isNoop", "connection", "socketAddress", "route", "remoteIpAndPort", "getHostString", "getPort"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}