{"test_class": {"identifier": "DataFramePrinterTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/tech/tablesaw/io/string/DataFramePrinterTest.java"}, "test_case": {"identifier": "printWithLargeDoubleNumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void printWithLargeDoubleNumber() {\n    DoubleColumn col = DoubleColumn.create(\"testCol\");\n    col.append(33.333333333333328);\n    col.append(9007199254740992d);\n    col.append(900719925474099.1d);\n    col.append(90071992547409.11d);\n    Table table = Table.create(\"large float table\", col);\n    String out = table.print();\n    assertTrue(out.contains(\"33.3333333333333\"));\n    assertTrue(out.contains(\"9007199254740992\"));\n    assertTrue(out.contains(\"900719925474099.1\"));\n    assertTrue(out.contains(\"90071992547409.11\"));\n  }", "signature": "void printWithLargeDoubleNumber()", "full_signature": "@Test public void printWithLargeDoubleNumber()", "class_method_signature": "DataFramePrinterTest.printWithLargeDoubleNumber()", "testcase": true, "constructor": false, "invocations": ["create", "append", "append", "append", "append", "create", "print", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "DataFramePrinter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TOO_SHORT_COLUMN_MARKER = \"?\";", "modifier": "private static final", "type": "String", "declarator": "TOO_SHORT_COLUMN_MARKER = \"?\"", "var_name": "TOO_SHORT_COLUMN_MARKER"}, {"original_string": "private final int maxRows;", "modifier": "private final", "type": "int", "declarator": "maxRows", "var_name": "maxRows"}, {"original_string": "private final OutputStream stream;", "modifier": "private final", "type": "OutputStream", "declarator": "stream", "var_name": "stream"}], "methods": [{"identifier": "DataFramePrinter", "parameters": "(int maxRows, OutputStream stream)", "modifiers": "public", "return": "", "signature": " DataFramePrinter(int maxRows, OutputStream stream)", "full_signature": "public  DataFramePrinter(int maxRows, OutputStream stream)", "class_method_signature": "DataFramePrinter.DataFramePrinter(int maxRows, OutputStream stream)", "testcase": false, "constructor": true}, {"identifier": "getWidths", "parameters": "(String[] headers, String[][] data)", "modifiers": "private static", "return": "int[]", "signature": "int[] getWidths(String[] headers, String[][] data)", "full_signature": "private static int[] getWidths(String[] headers, String[][] data)", "class_method_signature": "DataFramePrinter.getWidths(String[] headers, String[][] data)", "testcase": false, "constructor": false}, {"identifier": "getHeaderTemplate", "parameters": "(int[] widths, String[] headers)", "modifiers": "private static", "return": "String", "signature": "String getHeaderTemplate(int[] widths, String[] headers)", "full_signature": "private static String getHeaderTemplate(int[] widths, String[] headers)", "class_method_signature": "DataFramePrinter.getHeaderTemplate(int[] widths, String[] headers)", "testcase": false, "constructor": false}, {"identifier": "getDataTemplate", "parameters": "(int[] widths)", "modifiers": "private static", "return": "String", "signature": "String getDataTemplate(int[] widths)", "full_signature": "private static String getDataTemplate(int[] widths)", "class_method_signature": "DataFramePrinter.getDataTemplate(int[] widths)", "testcase": false, "constructor": false}, {"identifier": "whitespace", "parameters": "(StringBuilder text, int length)", "modifiers": "private static", "return": "void", "signature": "void whitespace(StringBuilder text, int length)", "full_signature": "private static void whitespace(StringBuilder text, int length)", "class_method_signature": "DataFramePrinter.whitespace(StringBuilder text, int length)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(Relation frame)", "modifiers": "public", "return": "void", "signature": "void print(Relation frame)", "full_signature": "public void print(Relation frame)", "class_method_signature": "DataFramePrinter.print(Relation frame)", "testcase": false, "constructor": false}, {"identifier": "tableName", "parameters": "(Relation frame, int width)", "modifiers": "private", "return": "String", "signature": "String tableName(Relation frame, int width)", "full_signature": "private String tableName(Relation frame, int width)", "class_method_signature": "DataFramePrinter.tableName(Relation frame, int width)", "testcase": false, "constructor": false}, {"identifier": "getHeaderTokens", "parameters": "(Relation frame)", "modifiers": "private", "return": "String[]", "signature": "String[] getHeaderTokens(Relation frame)", "full_signature": "private String[] getHeaderTokens(Relation frame)", "class_method_signature": "DataFramePrinter.getHeaderTokens(Relation frame)", "testcase": false, "constructor": false}, {"identifier": "getDataToken", "parameters": "(Column<?> col, int i)", "modifiers": "private", "return": "String", "signature": "String getDataToken(Column<?> col, int i)", "full_signature": "private String getDataToken(Column<?> col, int i)", "class_method_signature": "DataFramePrinter.getDataToken(Column<?> col, int i)", "testcase": false, "constructor": false}, {"identifier": "getDataTokens", "parameters": "(Relation frame)", "modifiers": "private", "return": "String[][]", "signature": "String[][] getDataTokens(Relation frame)", "full_signature": "private String[][] getDataTokens(Relation frame)", "class_method_signature": "DataFramePrinter.getDataTokens(Relation frame)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/io/string/DataFramePrinter.java"}, "focal_method": {"identifier": "print", "parameters": "(Relation frame)", "modifiers": "public", "return": "void", "body": "public void print(Relation frame) {\n    try {\n      final String[] headers = getHeaderTokens(frame);\n      final String[][] data = getDataTokens(frame);\n      final int[] widths = getWidths(headers, data);\n      final String dataTemplate = getDataTemplate(widths);\n      final String headerTemplate = getHeaderTemplate(widths, headers);\n      final int totalWidth = IntStream.of(widths).map(w -> w + 5).sum() - 1;\n      final int totalHeight = data.length + 1;\n      int capacity = totalWidth * totalHeight;\n      if (capacity < 0) {\n        capacity = 0;\n      }\n      final StringBuilder text = new StringBuilder(capacity);\n      if (frame.name() != null) {\n        text.append(tableName(frame, totalWidth)).append(System.lineSeparator());\n      }\n      final String headerLine = String.format(headerTemplate, (Object[]) headers);\n      text.append(headerLine).append(System.lineSeparator());\n      for (int j = 0; j < totalWidth; j++) {\n        text.append(\"-\");\n      }\n      for (String[] row : data) {\n        final String dataLine = String.format(dataTemplate, (Object[]) row);\n        text.append(System.lineSeparator());\n        text.append(dataLine);\n      }\n      final byte[] bytes = text.toString().getBytes();\n      this.stream.write(bytes);\n      this.stream.flush();\n    } catch (IOException ex) {\n      throw new IllegalStateException(\"Failed to print DataFrame\", ex);\n    }\n  }", "signature": "void print(Relation frame)", "full_signature": "public void print(Relation frame)", "class_method_signature": "DataFramePrinter.print(Relation frame)", "testcase": false, "constructor": false, "invocations": ["getHeaderTokens", "getDataTokens", "getWidths", "getDataTemplate", "getHeaderTemplate", "sum", "map", "of", "name", "append", "append", "tableName", "lineSeparator", "format", "append", "append", "lineSeparator", "append", "format", "append", "lineSeparator", "append", "getBytes", "toString", "write", "flush"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}