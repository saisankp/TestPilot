{"test_class": {"identifier": "AuthenticationManagerLdapImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PASSWORD = \"password\";", "modifier": "private static final", "type": "String", "declarator": "PASSWORD = \"password\"", "var_name": "PASSWORD"}, {"original_string": "private static final String NEW_PASSWORD = \"newPassword\";", "modifier": "private static final", "type": "String", "declarator": "NEW_PASSWORD = \"newPassword\"", "var_name": "NEW_PASSWORD"}, {"original_string": "private static final String[] RANDOM = new String[] { \"random\" };", "modifier": "private static final", "type": "String[]", "declarator": "RANDOM = new String[] { \"random\" }", "var_name": "RANDOM"}, {"original_string": "private AuthenticationManagerLdapImpl sut;", "modifier": "private", "type": "AuthenticationManagerLdapImpl", "declarator": "sut", "var_name": "sut"}, {"original_string": "private ConfigurationUtil cfg = mock(ConfigurationUtil.class);", "modifier": "private", "type": "ConfigurationUtil", "declarator": "cfg = mock(ConfigurationUtil.class)", "var_name": "cfg"}, {"original_string": "private IUserRolesService userRolesService = mock(IUserRolesService.class);", "modifier": "private", "type": "IUserRolesService", "declarator": "userRolesService = mock(IUserRolesService.class)", "var_name": "userRolesService"}, {"original_string": "private CustomBindAuthenticator customBindAuthenticator = mock(CustomBindAuthenticator.class);", "modifier": "private", "type": "CustomBindAuthenticator", "declarator": "customBindAuthenticator = mock(CustomBindAuthenticator.class)", "var_name": "customBindAuthenticator"}, {"original_string": "private InitialDirContextFactory initialDirContextFactory = mock(InitialDirContextFactory.class);", "modifier": "private", "type": "InitialDirContextFactory", "declarator": "initialDirContextFactory = mock(InitialDirContextFactory.class)", "var_name": "initialDirContextFactory"}, {"original_string": "private AuthenticationManagerLdapTemplate authManagerLdapTemplate;", "modifier": "private", "type": "AuthenticationManagerLdapTemplate", "declarator": "authManagerLdapTemplate", "var_name": "authManagerLdapTemplate"}, {"original_string": "private ConfigurationUtil configurationUtil = mock(ConfigurationUtil.class);", "modifier": "private", "type": "ConfigurationUtil", "declarator": "configurationUtil = mock(ConfigurationUtil.class)", "var_name": "configurationUtil"}, {"original_string": "private ApplicationContext ctx = mock(ApplicationContext.class);", "modifier": "private", "type": "ApplicationContext", "declarator": "ctx = mock(ApplicationContext.class)", "var_name": "ctx"}, {"original_string": "private AuthenticationManager authenticationManager = mock(AuthenticationManager.class);", "modifier": "private", "type": "AuthenticationManager", "declarator": "authenticationManager = mock(AuthenticationManager.class)", "var_name": "authenticationManager"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}], "file": "tntconcept-core/src/test/java/com/autentia/tnt/manager/security/AuthenticationManagerLdapImplTest.java"}, "test_case": {"identifier": "resetPassword", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resetPassword() throws Exception {\n\n        User userAdmin = getUserAdmin();\n\n        Principal principal = mock(Principal.class);\n        when(principal.getUser()).thenReturn(userAdmin);\n\n        when(authenticationManager.getCurrentPrincipal()).thenReturn(principal);\n\n        final String randomPassword = sut.generateRandomPassword(RANDOM, RANDOM, RANDOM, RANDOM, RANDOM);\n\n        doNothing().when(authManagerLdapTemplate).modifyAttributes(any(DirContext.class), eq(user), any(ModificationItem[].class));\n\n        sut.resetPassword(user, RANDOM, RANDOM, RANDOM, RANDOM, RANDOM);\n        verify(authManagerLdapTemplate).changePassword(user, randomPassword, userAdmin);\n        verify(authManagerLdapTemplate, times(2)).getTemplate(userAdmin);\n        verify(authManagerLdapTemplate).getCallback(user, randomPassword);\n        verify(authManagerLdapTemplate).getCallback(user);\n        verify(authManagerLdapTemplate).changeLdapUserPassword(any(DirContext.class), eq(randomPassword), eq(user));\n        verify(authManagerLdapTemplate).setLdapUserPasswordResetFlag(any(DirContext.class), eq(user));\n\n    }", "signature": "void resetPassword()", "full_signature": "@Test public void resetPassword()", "class_method_signature": "AuthenticationManagerLdapImplTest.resetPassword()", "testcase": true, "constructor": false, "invocations": ["getUserAdmin", "mock", "thenReturn", "when", "getUser", "thenReturn", "when", "getCurrentPrincipal", "generateRandomPassword", "modifyAttributes", "when", "doNothing", "any", "eq", "any", "resetPassword", "changePassword", "verify", "getTemplate", "verify", "times", "getCallback", "verify", "getCallback", "verify", "changeLdapUserPassword", "verify", "any", "eq", "eq", "setLdapUserPasswordResetFlag", "verify", "any", "eq"]}, "focal_class": {"identifier": "AuthenticationManagerLdapImpl", "superclass": "extends AuthenticationManager", "interfaces": "", "fields": [{"original_string": "private final AuthenticationManagerLdapTemplate authenticationManagerLdapTemplate;", "modifier": "private final", "type": "AuthenticationManagerLdapTemplate", "declarator": "authenticationManagerLdapTemplate", "var_name": "authenticationManagerLdapTemplate"}], "methods": [{"identifier": "AuthenticationManagerLdapImpl", "parameters": "(ConfigurationUtil cfg, IUserRolesService userRolesService,\n            AuthenticationManagerLdapTemplate authenticationManagerLdapTemplate)", "modifiers": "public", "return": "", "signature": " AuthenticationManagerLdapImpl(ConfigurationUtil cfg, IUserRolesService userRolesService,\n            AuthenticationManagerLdapTemplate authenticationManagerLdapTemplate)", "full_signature": "public  AuthenticationManagerLdapImpl(ConfigurationUtil cfg, IUserRolesService userRolesService,\n            AuthenticationManagerLdapTemplate authenticationManagerLdapTemplate)", "class_method_signature": "AuthenticationManagerLdapImpl.AuthenticationManagerLdapImpl(ConfigurationUtil cfg, IUserRolesService userRolesService,\n            AuthenticationManagerLdapTemplate authenticationManagerLdapTemplate)", "testcase": false, "constructor": true}, {"identifier": "getDefault", "parameters": "()", "modifiers": "public static", "return": "AuthenticationManager", "signature": "AuthenticationManager getDefault()", "full_signature": "public static AuthenticationManager getDefault()", "class_method_signature": "AuthenticationManagerLdapImpl.getDefault()", "testcase": false, "constructor": false}, {"identifier": "checkPassword", "parameters": "(User user, String password)", "modifiers": "public", "return": "boolean", "signature": "boolean checkPassword(User user, String password)", "full_signature": "public boolean checkPassword(User user, String password)", "class_method_signature": "AuthenticationManagerLdapImpl.checkPassword(User user, String password)", "testcase": false, "constructor": false}, {"identifier": "resetPassword", "parameters": "(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4)", "modifiers": "public", "return": "String", "signature": "String resetPassword(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4)", "full_signature": "public String resetPassword(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4)", "class_method_signature": "AuthenticationManagerLdapImpl.resetPassword(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4)", "testcase": false, "constructor": false}, {"identifier": "resetPasswordExternal", "parameters": "(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4)", "modifiers": "public", "return": "String", "signature": "String resetPasswordExternal(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4)", "full_signature": "public String resetPasswordExternal(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4)", "class_method_signature": "AuthenticationManagerLdapImpl.resetPasswordExternal(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4)", "testcase": false, "constructor": false}, {"identifier": "activateLdapUserPasswordResetFlag", "parameters": "(final User user,final User userAdmin)", "modifiers": "private", "return": "void", "signature": "void activateLdapUserPasswordResetFlag(final User user,final User userAdmin)", "full_signature": "private void activateLdapUserPasswordResetFlag(final User user,final User userAdmin)", "class_method_signature": "AuthenticationManagerLdapImpl.activateLdapUserPasswordResetFlag(final User user,final User userAdmin)", "testcase": false, "constructor": false}, {"identifier": "changePassword", "parameters": "(final User user, final String password)", "modifiers": "public", "return": "void", "signature": "void changePassword(final User user, final String password)", "full_signature": "public void changePassword(final User user, final String password)", "class_method_signature": "AuthenticationManagerLdapImpl.changePassword(final User user, final String password)", "testcase": false, "constructor": false}, {"identifier": "changePassword", "parameters": "(final User user, final String password, User userAdmin)", "modifiers": "protected", "return": "void", "signature": "void changePassword(final User user, final String password, User userAdmin)", "full_signature": "protected void changePassword(final User user, final String password, User userAdmin)", "class_method_signature": "AuthenticationManagerLdapImpl.changePassword(final User user, final String password, User userAdmin)", "testcase": false, "constructor": false}], "file": "tntconcept-core/src/main/java/com/autentia/tnt/manager/security/AuthenticationManagerLdapImpl.java"}, "focal_method": {"identifier": "resetPassword", "parameters": "(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4)", "modifiers": "public", "return": "String", "body": "public String resetPassword(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4) {\n        String changedPassword = generateRandomPassword(rnd0, rnd1, rnd2, rnd3, rnd4);\n        final User userAdmin = AuthenticationManager.getDefault().getCurrentPrincipal().getUser();\n        \n        changePassword(user, changedPassword, userAdmin);\n        activateLdapUserPasswordResetFlag(user, userAdmin);\n        return changedPassword;\n\n    }", "signature": "String resetPassword(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4)", "full_signature": "public String resetPassword(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4)", "class_method_signature": "AuthenticationManagerLdapImpl.resetPassword(User user, String[] rnd0, String[] rnd1, String[] rnd2, String[] rnd3, String[] rnd4)", "testcase": false, "constructor": false, "invocations": ["generateRandomPassword", "getUser", "getCurrentPrincipal", "getDefault", "changePassword", "activateLdapUserPasswordResetFlag"]}, "repository": {"repo_id": 2503314, "url": "https://github.com/autentia/TNTConcept", "stars": 11, "created": "10/3/2011 8:00:30 AM +00:00", "updates": "2020-01-24T12:30:31+00:00", "fork": "False", "license": "licensed"}}