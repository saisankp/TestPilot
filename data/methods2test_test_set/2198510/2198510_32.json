{"test_class": {"identifier": "TestEnvVarResolverProperties", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File TESTFILE = new File(\n      TestEnvVarResolverProperties.class.getClassLoader()\n          .getResource(\"flume-conf-with-envvars.properties\").getFile());", "modifier": "private static final", "type": "File", "declarator": "TESTFILE = new File(\n      TestEnvVarResolverProperties.class.getClassLoader()\n          .getResource(\"flume-conf-with-envvars.properties\").getFile())", "var_name": "TESTFILE"}, {"original_string": "@Rule\n  public final EnvironmentVariables environmentVariables = new EnvironmentVariables();", "modifier": "@Rule\n  public final", "type": "EnvironmentVariables", "declarator": "environmentVariables = new EnvironmentVariables()", "var_name": "environmentVariables"}, {"original_string": "private PropertiesFileConfigurationProvider provider;", "modifier": "private", "type": "PropertiesFileConfigurationProvider", "declarator": "provider", "var_name": "provider"}], "file": "flume-ng-node/src/test/java/org/apache/flume/node/TestEnvVarResolverProperties.java"}, "test_case": {"identifier": "resolveEnvVars", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void resolveEnvVars() throws Exception {\n    environmentVariables.set(\"VARNAME1\", \"varvalue1\");\n    environmentVariables.set(\"VARNAME2\", \"varvalue2\");\n    String resolved = EnvVarResolverProperties\n        .resolveEnvVars(\"padding ${VARNAME1} ${VARNAME2} padding\");\n    Assert.assertEquals(\"padding varvalue1 varvalue2 padding\", resolved);\n  }", "signature": "void resolveEnvVars()", "full_signature": "@Test public void resolveEnvVars()", "class_method_signature": "TestEnvVarResolverProperties.resolveEnvVars()", "testcase": true, "constructor": false, "invocations": ["set", "set", "resolveEnvVars", "assertEquals"]}, "focal_class": {"identifier": "EnvVarResolverProperties", "superclass": "extends Properties", "interfaces": "", "fields": [], "methods": [{"identifier": "resolveEnvVars", "parameters": "(String input)", "modifiers": "protected static", "return": "String", "signature": "String resolveEnvVars(String input)", "full_signature": "protected static String resolveEnvVars(String input)", "class_method_signature": "EnvVarResolverProperties.resolveEnvVars(String input)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String key)", "modifiers": "@Override public", "return": "String", "signature": "String getProperty(String key)", "full_signature": "@Override public String getProperty(String key)", "class_method_signature": "EnvVarResolverProperties.getProperty(String key)", "testcase": false, "constructor": false}], "file": "flume-ng-node/src/main/java/org/apache/flume/node/EnvVarResolverProperties.java"}, "focal_method": {"identifier": "resolveEnvVars", "parameters": "(String input)", "modifiers": "protected static", "return": "String", "body": "protected static String resolveEnvVars(String input) {\n    Preconditions.checkNotNull(input);\n    // match ${ENV_VAR_NAME}\n    Pattern p = Pattern.compile(\"\\\\$\\\\{(\\\\w+)\\\\}\");\n    Matcher m = p.matcher(input);\n    StringBuffer sb = new StringBuffer();\n    while (m.find()) {\n      String envVarName = m.group(1);\n      String envVarValue = System.getenv(envVarName);\n      m.appendReplacement(sb, null == envVarValue ? \"\" : envVarValue);\n    }\n    m.appendTail(sb);\n    return sb.toString();\n  }", "signature": "String resolveEnvVars(String input)", "full_signature": "protected static String resolveEnvVars(String input)", "class_method_signature": "EnvVarResolverProperties.resolveEnvVars(String input)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "compile", "matcher", "find", "group", "getenv", "appendReplacement", "appendTail", "toString"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}