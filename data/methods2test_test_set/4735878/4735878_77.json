{"test_class": {"identifier": "GeometryEditTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public WKTReader wKTReader = new WKTReader();", "modifier": "public", "type": "WKTReader", "declarator": "wKTReader = new WKTReader()", "var_name": "wKTReader"}], "file": "bundles/map-editor/src/test/java/org/orbisgis/mapeditor/map/geometryUtils/GeometryEditTest.java"}, "test_case": {"identifier": "testLinearInterpolation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLinearInterpolation() throws Exception {\n        LineString line = (LineString) wKTReader.read(\"LINESTRING(0 8, 1 8 , 3 8)\");\n        LineString result = GeometryEdit.linearZInterpolation(line);\n        assertTrue(Double.isNaN(result.getStartPoint().getCoordinate().z));\n        assertTrue(Double.isNaN(result.getEndPoint().getCoordinate().z));\n        line = (LineString) wKTReader.read(\"LINESTRING(0 0 0, 5 0 , 10 0 10)\");\n        result = GeometryEdit.linearZInterpolation(line);\n        assertTrue(result.getStartPoint().getCoordinate().z == 0);\n        assertTrue(result.getEndPoint().getCoordinate().z == 10);\n        assertTrue(result.getCoordinates()[1].z == 5);\n    }", "signature": "void testLinearInterpolation()", "full_signature": "@Test public void testLinearInterpolation()", "class_method_signature": "GeometryEditTest.testLinearInterpolation()", "testcase": true, "constructor": false, "invocations": ["read", "linearZInterpolation", "assertTrue", "isNaN", "getCoordinate", "getStartPoint", "assertTrue", "isNaN", "getCoordinate", "getEndPoint", "read", "linearZInterpolation", "assertTrue", "getCoordinate", "getStartPoint", "assertTrue", "getCoordinate", "getEndPoint", "assertTrue", "getCoordinates"]}, "focal_class": {"identifier": "GeometryEdit", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final GeometryFactory FACTORY = new GeometryFactory();", "modifier": "private static final", "type": "GeometryFactory", "declarator": "FACTORY = new GeometryFactory()", "var_name": "FACTORY"}, {"original_string": "public static final double PRECISION = 10E-6;", "modifier": "public static final", "type": "double", "declarator": "PRECISION = 10E-6", "var_name": "PRECISION"}, {"original_string": "private static final I18n I18N = I18nFactory.getI18n(GeometryEdit.class, Locale.getDefault(), I18nFactory.FALLBACK);", "modifier": "private static final", "type": "I18n", "declarator": "I18N = I18nFactory.getI18n(GeometryEdit.class, Locale.getDefault(), I18nFactory.FALLBACK)", "var_name": "I18N"}], "methods": [{"identifier": "linearZInterpolation", "parameters": "(LineString lineString, double startz, double endz)", "modifiers": "public static", "return": "LineString", "signature": "LineString linearZInterpolation(LineString lineString, double startz, double endz)", "full_signature": "public static LineString linearZInterpolation(LineString lineString, double startz, double endz)", "class_method_signature": "GeometryEdit.linearZInterpolation(LineString lineString, double startz, double endz)", "testcase": false, "constructor": false}, {"identifier": "linearZInterpolation", "parameters": "(LineString lineString)", "modifiers": "public static", "return": "LineString", "signature": "LineString linearZInterpolation(LineString lineString)", "full_signature": "public static LineString linearZInterpolation(LineString lineString)", "class_method_signature": "GeometryEdit.linearZInterpolation(LineString lineString)", "testcase": false, "constructor": false}, {"identifier": "linearZInterpolation", "parameters": "(MultiLineString multiLineString)", "modifiers": "public static", "return": "MultiLineString", "signature": "MultiLineString linearZInterpolation(MultiLineString multiLineString)", "full_signature": "public static MultiLineString linearZInterpolation(MultiLineString multiLineString)", "class_method_signature": "GeometryEdit.linearZInterpolation(MultiLineString multiLineString)", "testcase": false, "constructor": false}, {"identifier": "force3DStartEnd", "parameters": "(Geometry geom, final double startZ,\n            final double endZ)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry force3DStartEnd(Geometry geom, final double startZ,\n            final double endZ)", "full_signature": "public static Geometry force3DStartEnd(Geometry geom, final double startZ,\n            final double endZ)", "class_method_signature": "GeometryEdit.force3DStartEnd(Geometry geom, final double startZ,\n            final double endZ)", "testcase": false, "constructor": false}, {"identifier": "reverse3D", "parameters": "(MultiLineString multiLineString)", "modifiers": "public static", "return": "MultiLineString", "signature": "MultiLineString reverse3D(MultiLineString multiLineString)", "full_signature": "public static MultiLineString reverse3D(MultiLineString multiLineString)", "class_method_signature": "GeometryEdit.reverse3D(MultiLineString multiLineString)", "testcase": false, "constructor": false}, {"identifier": "reverse3D", "parameters": "(LineString lineString)", "modifiers": "public static", "return": "LineString", "signature": "LineString reverse3D(LineString lineString)", "full_signature": "public static LineString reverse3D(LineString lineString)", "class_method_signature": "GeometryEdit.reverse3D(LineString lineString)", "testcase": false, "constructor": false}, {"identifier": "reverse3D", "parameters": "(Geometry geometry)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry reverse3D(Geometry geometry)", "full_signature": "public static Geometry reverse3D(Geometry geometry)", "class_method_signature": "GeometryEdit.reverse3D(Geometry geometry)", "testcase": false, "constructor": false}, {"identifier": "force2D", "parameters": "(Geometry geom)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry force2D(Geometry geom)", "full_signature": "public static Geometry force2D(Geometry geom)", "class_method_signature": "GeometryEdit.force2D(Geometry geom)", "testcase": false, "constructor": false}, {"identifier": "force3D", "parameters": "(Geometry geom, final double value, final boolean addZ)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry force3D(Geometry geom, final double value, final boolean addZ)", "full_signature": "public static Geometry force3D(Geometry geom, final double value, final boolean addZ)", "class_method_signature": "GeometryEdit.force3D(Geometry geom, final double value, final boolean addZ)", "testcase": false, "constructor": false}, {"identifier": "splitLineWithPoint", "parameters": "(LineString line, Point pointToSplit)", "modifiers": "public static", "return": "MultiLineString", "signature": "MultiLineString splitLineWithPoint(LineString line, Point pointToSplit)", "full_signature": "public static MultiLineString splitLineWithPoint(LineString line, Point pointToSplit)", "class_method_signature": "GeometryEdit.splitLineWithPoint(LineString line, Point pointToSplit)", "testcase": false, "constructor": false}, {"identifier": "splitLineWithPoint", "parameters": "(LineString line, Point pointToSplit, double tolerance)", "modifiers": "public static", "return": "MultiLineString", "signature": "MultiLineString splitLineWithPoint(LineString line, Point pointToSplit, double tolerance)", "full_signature": "public static MultiLineString splitLineWithPoint(LineString line, Point pointToSplit, double tolerance)", "class_method_signature": "GeometryEdit.splitLineWithPoint(LineString line, Point pointToSplit, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "splitLineStringWithPoint", "parameters": "(LineString line, Point pointToSplit)", "modifiers": "public static", "return": "LineString[]", "signature": "LineString[] splitLineStringWithPoint(LineString line, Point pointToSplit)", "full_signature": "public static LineString[] splitLineStringWithPoint(LineString line, Point pointToSplit)", "class_method_signature": "GeometryEdit.splitLineStringWithPoint(LineString line, Point pointToSplit)", "testcase": false, "constructor": false}, {"identifier": "splitLineStringWithPoint", "parameters": "(LineString line, Point pointToSplit, double tolerance)", "modifiers": "public static", "return": "LineString[]", "signature": "LineString[] splitLineStringWithPoint(LineString line, Point pointToSplit, double tolerance)", "full_signature": "public static LineString[] splitLineStringWithPoint(LineString line, Point pointToSplit, double tolerance)", "class_method_signature": "GeometryEdit.splitLineStringWithPoint(LineString line, Point pointToSplit, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "splitMultiLineStringWithPoint", "parameters": "(MultiLineString multiLineString, Point pointToSplit)", "modifiers": "public static", "return": "MultiLineString", "signature": "MultiLineString splitMultiLineStringWithPoint(MultiLineString multiLineString, Point pointToSplit)", "full_signature": "public static MultiLineString splitMultiLineStringWithPoint(MultiLineString multiLineString, Point pointToSplit)", "class_method_signature": "GeometryEdit.splitMultiLineStringWithPoint(MultiLineString multiLineString, Point pointToSplit)", "testcase": false, "constructor": false}, {"identifier": "splitMultiLineStringWithPoint", "parameters": "(MultiLineString multiLineString, Point pointToSplit, double tolerance)", "modifiers": "public static", "return": "MultiLineString", "signature": "MultiLineString splitMultiLineStringWithPoint(MultiLineString multiLineString, Point pointToSplit, double tolerance)", "full_signature": "public static MultiLineString splitMultiLineStringWithPoint(MultiLineString multiLineString, Point pointToSplit, double tolerance)", "class_method_signature": "GeometryEdit.splitMultiLineStringWithPoint(MultiLineString multiLineString, Point pointToSplit, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "geometryNoders", "parameters": "(Geometry tobeNodes)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry geometryNoders(Geometry tobeNodes)", "full_signature": "public static Geometry geometryNoders(Geometry tobeNodes)", "class_method_signature": "GeometryEdit.geometryNoders(Geometry tobeNodes)", "testcase": false, "constructor": false}, {"identifier": "createNodedSegmentStrings", "parameters": "(Geometry geom)", "modifiers": "public static", "return": "List<NodedSegmentString>", "signature": "List<NodedSegmentString> createNodedSegmentStrings(Geometry geom)", "full_signature": "public static List<NodedSegmentString> createNodedSegmentStrings(Geometry geom)", "class_method_signature": "GeometryEdit.createNodedSegmentStrings(Geometry geom)", "testcase": false, "constructor": false}, {"identifier": "fromSegmentStrings", "parameters": "(Collection<NodedSegmentString> segStrings)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry fromSegmentStrings(Collection<NodedSegmentString> segStrings)", "full_signature": "public static Geometry fromSegmentStrings(Collection<NodedSegmentString> segStrings)", "class_method_signature": "GeometryEdit.fromSegmentStrings(Collection<NodedSegmentString> segStrings)", "testcase": false, "constructor": false}, {"identifier": "splitLineStringWithLine", "parameters": "(LineString input, LineString cut)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry splitLineStringWithLine(LineString input, LineString cut)", "full_signature": "public static Geometry splitLineStringWithLine(LineString input, LineString cut)", "class_method_signature": "GeometryEdit.splitLineStringWithLine(LineString input, LineString cut)", "testcase": false, "constructor": false}, {"identifier": "splitMultiLineStringWithLine", "parameters": "(MultiLineString input, LineString cut)", "modifiers": "public static", "return": "MultiLineString", "signature": "MultiLineString splitMultiLineStringWithLine(MultiLineString input, LineString cut)", "full_signature": "public static MultiLineString splitMultiLineStringWithLine(MultiLineString input, LineString cut)", "class_method_signature": "GeometryEdit.splitMultiLineStringWithLine(MultiLineString input, LineString cut)", "testcase": false, "constructor": false}, {"identifier": "getVertexToSnap", "parameters": "(Geometry g, Point p, double tolerance)", "modifiers": "public static", "return": "GeometryLocation", "signature": "GeometryLocation getVertexToSnap(Geometry g, Point p, double tolerance)", "full_signature": "public static GeometryLocation getVertexToSnap(Geometry g, Point p, double tolerance)", "class_method_signature": "GeometryEdit.getVertexToSnap(Geometry g, Point p, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "getVertexToSnap", "parameters": "(Geometry g, Point p)", "modifiers": "public static", "return": "GeometryLocation", "signature": "GeometryLocation getVertexToSnap(Geometry g, Point p)", "full_signature": "public static GeometryLocation getVertexToSnap(Geometry g, Point p)", "class_method_signature": "GeometryEdit.getVertexToSnap(Geometry g, Point p)", "testcase": false, "constructor": false}, {"identifier": "insertVertexInLineString", "parameters": "(LineString lineString, Point vertexPoint)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry insertVertexInLineString(LineString lineString, Point vertexPoint)", "full_signature": "public static Geometry insertVertexInLineString(LineString lineString, Point vertexPoint)", "class_method_signature": "GeometryEdit.insertVertexInLineString(LineString lineString, Point vertexPoint)", "testcase": false, "constructor": false}, {"identifier": "insertVertexInLineString", "parameters": "(LineString lineString, Point vertexPoint,\n            double tolerance)", "modifiers": "public static", "return": "LineString", "signature": "LineString insertVertexInLineString(LineString lineString, Point vertexPoint,\n            double tolerance)", "full_signature": "public static LineString insertVertexInLineString(LineString lineString, Point vertexPoint,\n            double tolerance)", "class_method_signature": "GeometryEdit.insertVertexInLineString(LineString lineString, Point vertexPoint,\n            double tolerance)", "testcase": false, "constructor": false}, {"identifier": "insertVertexInLinearRing", "parameters": "(LineString lineString,\n            Point vertexPoint)", "modifiers": "public static", "return": "LinearRing", "signature": "LinearRing insertVertexInLinearRing(LineString lineString,\n            Point vertexPoint)", "full_signature": "public static LinearRing insertVertexInLinearRing(LineString lineString,\n            Point vertexPoint)", "class_method_signature": "GeometryEdit.insertVertexInLinearRing(LineString lineString,\n            Point vertexPoint)", "testcase": false, "constructor": false}, {"identifier": "insertVertexInLinearRing", "parameters": "(LineString lineString,\n            Point vertexPoint, double tolerance)", "modifiers": "public static", "return": "LinearRing", "signature": "LinearRing insertVertexInLinearRing(LineString lineString,\n            Point vertexPoint, double tolerance)", "full_signature": "public static LinearRing insertVertexInLinearRing(LineString lineString,\n            Point vertexPoint, double tolerance)", "class_method_signature": "GeometryEdit.insertVertexInLinearRing(LineString lineString,\n            Point vertexPoint, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "insertVertexInPolygon", "parameters": "(Polygon polygon,\n            Point vertexPoint)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry insertVertexInPolygon(Polygon polygon,\n            Point vertexPoint)", "full_signature": "public static Geometry insertVertexInPolygon(Polygon polygon,\n            Point vertexPoint)", "class_method_signature": "GeometryEdit.insertVertexInPolygon(Polygon polygon,\n            Point vertexPoint)", "testcase": false, "constructor": false}, {"identifier": "insertVertexInPolygon", "parameters": "(Polygon polygon,\n            Point vertexPoint, double tolerance)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon insertVertexInPolygon(Polygon polygon,\n            Point vertexPoint, double tolerance)", "full_signature": "public static Polygon insertVertexInPolygon(Polygon polygon,\n            Point vertexPoint, double tolerance)", "class_method_signature": "GeometryEdit.insertVertexInPolygon(Polygon polygon,\n            Point vertexPoint, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "insertVertexInMultipoint", "parameters": "(Geometry g, Point vertexPoint)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry insertVertexInMultipoint(Geometry g, Point vertexPoint)", "full_signature": "public static Geometry insertVertexInMultipoint(Geometry g, Point vertexPoint)", "class_method_signature": "GeometryEdit.insertVertexInMultipoint(Geometry g, Point vertexPoint)", "testcase": false, "constructor": false}, {"identifier": "insertVertex", "parameters": "(Geometry geom, Point point)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry insertVertex(Geometry geom, Point point)", "full_signature": "public static Geometry insertVertex(Geometry geom, Point point)", "class_method_signature": "GeometryEdit.insertVertex(Geometry geom, Point point)", "testcase": false, "constructor": false}, {"identifier": "insertVertex", "parameters": "(Geometry geometry, Point vertexPoint, double tolerance)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry insertVertex(Geometry geometry, Point vertexPoint, double tolerance)", "full_signature": "public static Geometry insertVertex(Geometry geometry, Point vertexPoint, double tolerance)", "class_method_signature": "GeometryEdit.insertVertex(Geometry geometry, Point vertexPoint, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "splitPolygonizer", "parameters": "(Polygon polygon, LineString lineString)", "modifiers": "public static", "return": "Collection<Polygon>", "signature": "Collection<Polygon> splitPolygonizer(Polygon polygon, LineString lineString)", "full_signature": "public static Collection<Polygon> splitPolygonizer(Polygon polygon, LineString lineString)", "class_method_signature": "GeometryEdit.splitPolygonizer(Polygon polygon, LineString lineString)", "testcase": false, "constructor": false}, {"identifier": "splitPolygonWithLine", "parameters": "(Polygon polygon, LineString lineString)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry splitPolygonWithLine(Polygon polygon, LineString lineString)", "full_signature": "public static Geometry splitPolygonWithLine(Polygon polygon, LineString lineString)", "class_method_signature": "GeometryEdit.splitPolygonWithLine(Polygon polygon, LineString lineString)", "testcase": false, "constructor": false}, {"identifier": "polygonWithLineSplitter", "parameters": "(Polygon polygon, LineString lineString)", "modifiers": "public static", "return": "Collection<Polygon>", "signature": "Collection<Polygon> polygonWithLineSplitter(Polygon polygon, LineString lineString)", "full_signature": "public static Collection<Polygon> polygonWithLineSplitter(Polygon polygon, LineString lineString)", "class_method_signature": "GeometryEdit.polygonWithLineSplitter(Polygon polygon, LineString lineString)", "testcase": false, "constructor": false}, {"identifier": "splitMultiPolygonWithLine", "parameters": "(MultiPolygon multiPolygon, LineString lineString)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry splitMultiPolygonWithLine(MultiPolygon multiPolygon, LineString lineString)", "full_signature": "public static Geometry splitMultiPolygonWithLine(MultiPolygon multiPolygon, LineString lineString)", "class_method_signature": "GeometryEdit.splitMultiPolygonWithLine(MultiPolygon multiPolygon, LineString lineString)", "testcase": false, "constructor": false}, {"identifier": "removeVertex", "parameters": "(int vertexIndex,\n            Geometry g, int minNumVertex)", "modifiers": "public static", "return": "Coordinate[]", "signature": "Coordinate[] removeVertex(int vertexIndex,\n            Geometry g, int minNumVertex)", "full_signature": "public static Coordinate[] removeVertex(int vertexIndex,\n            Geometry g, int minNumVertex)", "class_method_signature": "GeometryEdit.removeVertex(int vertexIndex,\n            Geometry g, int minNumVertex)", "testcase": false, "constructor": false}, {"identifier": "removeVertex", "parameters": "(MultiPoint geometry, int vertexIndex)", "modifiers": "public static", "return": "MultiPoint", "signature": "MultiPoint removeVertex(MultiPoint geometry, int vertexIndex)", "full_signature": "public static MultiPoint removeVertex(MultiPoint geometry, int vertexIndex)", "class_method_signature": "GeometryEdit.removeVertex(MultiPoint geometry, int vertexIndex)", "testcase": false, "constructor": false}, {"identifier": "removeVertex", "parameters": "(LineString geometry, int vertexIndex)", "modifiers": "public static", "return": "LineString", "signature": "LineString removeVertex(LineString geometry, int vertexIndex)", "full_signature": "public static LineString removeVertex(LineString geometry, int vertexIndex)", "class_method_signature": "GeometryEdit.removeVertex(LineString geometry, int vertexIndex)", "testcase": false, "constructor": false}, {"identifier": "moveGeometry", "parameters": "(Geometry geometry, final double[] displacement)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry moveGeometry(Geometry geometry, final double[] displacement)", "full_signature": "public static Geometry moveGeometry(Geometry geometry, final double[] displacement)", "class_method_signature": "GeometryEdit.moveGeometry(Geometry geometry, final double[] displacement)", "testcase": false, "constructor": false}, {"identifier": "moveGeometry", "parameters": "(Geometry geometry, Coordinate start, Coordinate end)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry moveGeometry(Geometry geometry, Coordinate start, Coordinate end)", "full_signature": "public static Geometry moveGeometry(Geometry geometry, Coordinate start, Coordinate end)", "class_method_signature": "GeometryEdit.moveGeometry(Geometry geometry, Coordinate start, Coordinate end)", "testcase": false, "constructor": false}, {"identifier": "cutPolygonWithPolygon", "parameters": "(Polygon polygon, Polygon extrudePolygon)", "modifiers": "public static", "return": "List<Polygon>", "signature": "List<Polygon> cutPolygonWithPolygon(Polygon polygon, Polygon extrudePolygon)", "full_signature": "public static List<Polygon> cutPolygonWithPolygon(Polygon polygon, Polygon extrudePolygon)", "class_method_signature": "GeometryEdit.cutPolygonWithPolygon(Polygon polygon, Polygon extrudePolygon)", "testcase": false, "constructor": false}, {"identifier": "cutMultiPolygonWithPolygon", "parameters": "(MultiPolygon multiPolygon, Polygon extrudePolygon)", "modifiers": "public static", "return": "MultiPolygon", "signature": "MultiPolygon cutMultiPolygonWithPolygon(MultiPolygon multiPolygon, Polygon extrudePolygon)", "full_signature": "public static MultiPolygon cutMultiPolygonWithPolygon(MultiPolygon multiPolygon, Polygon extrudePolygon)", "class_method_signature": "GeometryEdit.cutMultiPolygonWithPolygon(MultiPolygon multiPolygon, Polygon extrudePolygon)", "testcase": false, "constructor": false}, {"identifier": "removeHole", "parameters": "(Geometry geometry)", "modifiers": "public static", "return": "Geometry", "signature": "Geometry removeHole(Geometry geometry)", "full_signature": "public static Geometry removeHole(Geometry geometry)", "class_method_signature": "GeometryEdit.removeHole(Geometry geometry)", "testcase": false, "constructor": false}, {"identifier": "removeHoleMultiPolygon", "parameters": "(MultiPolygon multiPolygon)", "modifiers": "public static", "return": "MultiPolygon", "signature": "MultiPolygon removeHoleMultiPolygon(MultiPolygon multiPolygon)", "full_signature": "public static MultiPolygon removeHoleMultiPolygon(MultiPolygon multiPolygon)", "class_method_signature": "GeometryEdit.removeHoleMultiPolygon(MultiPolygon multiPolygon)", "testcase": false, "constructor": false}, {"identifier": "removeHolePolygon", "parameters": "(Polygon polygon)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon removeHolePolygon(Polygon polygon)", "full_signature": "public static Polygon removeHolePolygon(Polygon polygon)", "class_method_signature": "GeometryEdit.removeHolePolygon(Polygon polygon)", "testcase": false, "constructor": false}, {"identifier": "GeometryEdit", "parameters": "()", "modifiers": "private", "return": "", "signature": " GeometryEdit()", "full_signature": "private  GeometryEdit()", "class_method_signature": "GeometryEdit.GeometryEdit()", "testcase": false, "constructor": true}], "file": "bundles/map-editor/src/main/java/org/orbisgis/mapeditor/map/geometryUtils/GeometryEdit.java"}, "focal_method": {"identifier": "linearZInterpolation", "parameters": "(LineString lineString, double startz, double endz)", "modifiers": "public static", "return": "LineString", "body": "public static LineString linearZInterpolation(LineString lineString, double startz, double endz) {\n        if (Double.isNaN(startz) || Double.isNaN(endz)) {\n            return lineString;\n        } else {\n            double length = lineString.getLength();\n            lineString.apply(new LinearZInterpolationFilter(startz, endz, length));\n            return lineString;\n        }\n    }", "signature": "LineString linearZInterpolation(LineString lineString, double startz, double endz)", "full_signature": "public static LineString linearZInterpolation(LineString lineString, double startz, double endz)", "class_method_signature": "GeometryEdit.linearZInterpolation(LineString lineString, double startz, double endz)", "testcase": false, "constructor": false, "invocations": ["isNaN", "isNaN", "getLength", "apply"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}