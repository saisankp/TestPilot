{"test_class": {"identifier": "CompositeSubscriptionTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/subscriptions/CompositeSubscriptionTest.java"}, "test_case": {"identifier": "testAddingNullSubscriptionIllegal", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void testAddingNullSubscriptionIllegal() {\n        CompositeSubscription csub = new CompositeSubscription();\n        csub.add(null);\n    }", "signature": "void testAddingNullSubscriptionIllegal()", "full_signature": "@Test(expected = NullPointerException.class) public void testAddingNullSubscriptionIllegal()", "class_method_signature": "CompositeSubscriptionTest.testAddingNullSubscriptionIllegal()", "testcase": true, "constructor": false, "invocations": ["add"]}, "focal_class": {"identifier": "CompositeSubscription", "superclass": "", "interfaces": "implements Subscription", "fields": [{"original_string": "private Set<Subscription> subscriptions;", "modifier": "private", "type": "Set<Subscription>", "declarator": "subscriptions", "var_name": "subscriptions"}, {"original_string": "private volatile boolean unsubscribed;", "modifier": "private volatile", "type": "boolean", "declarator": "unsubscribed", "var_name": "unsubscribed"}], "methods": [{"identifier": "CompositeSubscription", "parameters": "()", "modifiers": "public", "return": "", "signature": " CompositeSubscription()", "full_signature": "public  CompositeSubscription()", "class_method_signature": "CompositeSubscription.CompositeSubscription()", "testcase": false, "constructor": true}, {"identifier": "CompositeSubscription", "parameters": "(final Subscription... subscriptions)", "modifiers": "public", "return": "", "signature": " CompositeSubscription(final Subscription... subscriptions)", "full_signature": "public  CompositeSubscription(final Subscription... subscriptions)", "class_method_signature": "CompositeSubscription.CompositeSubscription(final Subscription... subscriptions)", "testcase": false, "constructor": true}, {"identifier": "isUnsubscribed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUnsubscribed()", "full_signature": "@Override public boolean isUnsubscribed()", "class_method_signature": "CompositeSubscription.isUnsubscribed()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final Subscription s)", "modifiers": "public", "return": "void", "signature": "void add(final Subscription s)", "full_signature": "public void add(final Subscription s)", "class_method_signature": "CompositeSubscription.add(final Subscription s)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final Subscription s)", "modifiers": "public", "return": "void", "signature": "void remove(final Subscription s)", "full_signature": "public void remove(final Subscription s)", "class_method_signature": "CompositeSubscription.remove(final Subscription s)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "CompositeSubscription.clear()", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void unsubscribe()", "full_signature": "@Override public void unsubscribe()", "class_method_signature": "CompositeSubscription.unsubscribe()", "testcase": false, "constructor": false}, {"identifier": "unsubscribeFromAll", "parameters": "(Collection<Subscription> subscriptions)", "modifiers": "private static", "return": "void", "signature": "void unsubscribeFromAll(Collection<Subscription> subscriptions)", "full_signature": "private static void unsubscribeFromAll(Collection<Subscription> subscriptions)", "class_method_signature": "CompositeSubscription.unsubscribeFromAll(Collection<Subscription> subscriptions)", "testcase": false, "constructor": false}, {"identifier": "hasSubscriptions", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasSubscriptions()", "full_signature": "public boolean hasSubscriptions()", "class_method_signature": "CompositeSubscription.hasSubscriptions()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/subscriptions/CompositeSubscription.java"}, "focal_method": {"identifier": "add", "parameters": "(final Subscription s)", "modifiers": "public", "return": "void", "body": "public void add(final Subscription s) {\n        if (s.isUnsubscribed()) {\n            return;\n        }\n        if (!unsubscribed) {\n            synchronized (this) {\n                if (!unsubscribed) {\n                    if (subscriptions == null) {\n                        subscriptions = new HashSet<Subscription>(4);\n                    }\n                    subscriptions.add(s);\n                    return;\n                }\n            }\n        }\n        // call after leaving the synchronized block so we're not holding a lock while executing this\n        s.unsubscribe();\n    }", "signature": "void add(final Subscription s)", "full_signature": "public void add(final Subscription s)", "class_method_signature": "CompositeSubscription.add(final Subscription s)", "testcase": false, "constructor": false, "invocations": ["isUnsubscribed", "add", "unsubscribe"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}