{"test_class": {"identifier": "TransactionAwareHTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TransactionAwareHTableTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TransactionAwareHTableTest.class)", "var_name": "LOG"}, {"original_string": "private static HBaseTestingUtility testUtil;", "modifier": "private static", "type": "HBaseTestingUtility", "declarator": "testUtil", "var_name": "testUtil"}, {"original_string": "private static HBaseAdmin hBaseAdmin;", "modifier": "private static", "type": "HBaseAdmin", "declarator": "hBaseAdmin", "var_name": "hBaseAdmin"}, {"original_string": "private static TransactionStateStorage txStateStorage;", "modifier": "private static", "type": "TransactionStateStorage", "declarator": "txStateStorage", "var_name": "txStateStorage"}, {"original_string": "private static TransactionManager txManager;", "modifier": "private static", "type": "TransactionManager", "declarator": "txManager", "var_name": "txManager"}, {"original_string": "private static Configuration conf;", "modifier": "private static", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private TransactionContext transactionContext;", "modifier": "private", "type": "TransactionContext", "declarator": "transactionContext", "var_name": "transactionContext"}, {"original_string": "private TransactionAwareHTable transactionAwareHTable;", "modifier": "private", "type": "TransactionAwareHTable", "declarator": "transactionAwareHTable", "var_name": "transactionAwareHTable"}, {"original_string": "private HTable hTable;", "modifier": "private", "type": "HTable", "declarator": "hTable", "var_name": "hTable"}, {"original_string": "private static final String TEST_ATTRIBUTE = \"TEST_ATTRIBUTE\";", "modifier": "private static final", "type": "String", "declarator": "TEST_ATTRIBUTE = \"TEST_ATTRIBUTE\"", "var_name": "TEST_ATTRIBUTE"}], "file": "tephra-hbase-compat-0.98/src/test/java/co/cask/tephra/hbase98/TransactionAwareHTableTest.java"}, "test_case": {"identifier": "testTransactionlessFailure", "parameters": "()", "modifiers": "@Test(expected = IOException.class) public", "return": "void", "body": "@Test(expected = IOException.class)\n  public void testTransactionlessFailure() throws Exception {\n    transactionAwareHTable.get(new Get(TestBytes.row));\n  }", "signature": "void testTransactionlessFailure()", "full_signature": "@Test(expected = IOException.class) public void testTransactionlessFailure()", "class_method_signature": "TransactionAwareHTableTest.testTransactionlessFailure()", "testcase": true, "constructor": false, "invocations": ["get"]}, "focal_class": {"identifier": "TransactionAwareHTable", "superclass": "extends AbstractTransactionAwareTable", "interfaces": "implements HTableInterface, TransactionAware", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TransactionAwareHTable.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TransactionAwareHTable.class)", "var_name": "LOG"}, {"original_string": "private final HTableInterface hTable;", "modifier": "private final", "type": "HTableInterface", "declarator": "hTable", "var_name": "hTable"}], "methods": [{"identifier": "TransactionAwareHTable", "parameters": "(HTableInterface hTable)", "modifiers": "public", "return": "", "signature": " TransactionAwareHTable(HTableInterface hTable)", "full_signature": "public  TransactionAwareHTable(HTableInterface hTable)", "class_method_signature": "TransactionAwareHTable.TransactionAwareHTable(HTableInterface hTable)", "testcase": false, "constructor": true}, {"identifier": "TransactionAwareHTable", "parameters": "(HTableInterface hTable, TxConstants.ConflictDetection conflictLevel)", "modifiers": "public", "return": "", "signature": " TransactionAwareHTable(HTableInterface hTable, TxConstants.ConflictDetection conflictLevel)", "full_signature": "public  TransactionAwareHTable(HTableInterface hTable, TxConstants.ConflictDetection conflictLevel)", "class_method_signature": "TransactionAwareHTable.TransactionAwareHTable(HTableInterface hTable, TxConstants.ConflictDetection conflictLevel)", "testcase": false, "constructor": true}, {"identifier": "TransactionAwareHTable", "parameters": "(HTableInterface hTable, boolean allowNonTransactional)", "modifiers": "public", "return": "", "signature": " TransactionAwareHTable(HTableInterface hTable, boolean allowNonTransactional)", "full_signature": "public  TransactionAwareHTable(HTableInterface hTable, boolean allowNonTransactional)", "class_method_signature": "TransactionAwareHTable.TransactionAwareHTable(HTableInterface hTable, boolean allowNonTransactional)", "testcase": false, "constructor": true}, {"identifier": "TransactionAwareHTable", "parameters": "(HTableInterface hTable, TxConstants.ConflictDetection conflictLevel,\n                                boolean allowNonTransactional)", "modifiers": "public", "return": "", "signature": " TransactionAwareHTable(HTableInterface hTable, TxConstants.ConflictDetection conflictLevel,\n                                boolean allowNonTransactional)", "full_signature": "public  TransactionAwareHTable(HTableInterface hTable, TxConstants.ConflictDetection conflictLevel,\n                                boolean allowNonTransactional)", "class_method_signature": "TransactionAwareHTable.TransactionAwareHTable(HTableInterface hTable, TxConstants.ConflictDetection conflictLevel,\n                                boolean allowNonTransactional)", "testcase": false, "constructor": true}, {"identifier": "getTableKey", "parameters": "()", "modifiers": "@Override protected", "return": "byte[]", "signature": "byte[] getTableKey()", "full_signature": "@Override protected byte[] getTableKey()", "class_method_signature": "TransactionAwareHTable.getTableKey()", "testcase": false, "constructor": false}, {"identifier": "doCommit", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean doCommit()", "full_signature": "@Override protected boolean doCommit()", "class_method_signature": "TransactionAwareHTable.doCommit()", "testcase": false, "constructor": false}, {"identifier": "doRollback", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean doRollback()", "full_signature": "@Override protected boolean doRollback()", "class_method_signature": "TransactionAwareHTable.doRollback()", "testcase": false, "constructor": false}, {"identifier": "getTableName", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getTableName()", "full_signature": "@Override public byte[] getTableName()", "class_method_signature": "TransactionAwareHTable.getTableName()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "TableName", "signature": "TableName getName()", "full_signature": "@Override public TableName getName()", "class_method_signature": "TransactionAwareHTable.getName()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "Configuration", "signature": "Configuration getConfiguration()", "full_signature": "@Override public Configuration getConfiguration()", "class_method_signature": "TransactionAwareHTable.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getTableDescriptor", "parameters": "()", "modifiers": "@Override public", "return": "HTableDescriptor", "signature": "HTableDescriptor getTableDescriptor()", "full_signature": "@Override public HTableDescriptor getTableDescriptor()", "class_method_signature": "TransactionAwareHTable.getTableDescriptor()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(Get get)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(Get get)", "full_signature": "@Override public boolean exists(Get get)", "class_method_signature": "TransactionAwareHTable.exists(Get get)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(List<Get> gets)", "modifiers": "@Override public", "return": "Boolean[]", "signature": "Boolean[] exists(List<Get> gets)", "full_signature": "@Override public Boolean[] exists(List<Get> gets)", "class_method_signature": "TransactionAwareHTable.exists(List<Get> gets)", "testcase": false, "constructor": false}, {"identifier": "batch", "parameters": "(List<? extends Row> actions, Object[] results)", "modifiers": "@Override public", "return": "void", "signature": "void batch(List<? extends Row> actions, Object[] results)", "full_signature": "@Override public void batch(List<? extends Row> actions, Object[] results)", "class_method_signature": "TransactionAwareHTable.batch(List<? extends Row> actions, Object[] results)", "testcase": false, "constructor": false}, {"identifier": "batch", "parameters": "(List<? extends Row> actions)", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] batch(List<? extends Row> actions)", "full_signature": "@Override public Object[] batch(List<? extends Row> actions)", "class_method_signature": "TransactionAwareHTable.batch(List<? extends Row> actions)", "testcase": false, "constructor": false}, {"identifier": "batchCallback", "parameters": "(List<? extends Row> actions, Object[] results, Batch.Callback<R> callback)", "modifiers": "@Override public", "return": "void", "signature": "void batchCallback(List<? extends Row> actions, Object[] results, Batch.Callback<R> callback)", "full_signature": "@Override public void batchCallback(List<? extends Row> actions, Object[] results, Batch.Callback<R> callback)", "class_method_signature": "TransactionAwareHTable.batchCallback(List<? extends Row> actions, Object[] results, Batch.Callback<R> callback)", "testcase": false, "constructor": false}, {"identifier": "batchCallback", "parameters": "(List<? extends Row> actions, Batch.Callback<R> callback)", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] batchCallback(List<? extends Row> actions, Batch.Callback<R> callback)", "full_signature": "@Override public Object[] batchCallback(List<? extends Row> actions, Batch.Callback<R> callback)", "class_method_signature": "TransactionAwareHTable.batchCallback(List<? extends Row> actions, Batch.Callback<R> callback)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Get get)", "modifiers": "@Override public", "return": "Result", "signature": "Result get(Get get)", "full_signature": "@Override public Result get(Get get)", "class_method_signature": "TransactionAwareHTable.get(Get get)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(List<Get> gets)", "modifiers": "@Override public", "return": "Result[]", "signature": "Result[] get(List<Get> gets)", "full_signature": "@Override public Result[] get(List<Get> gets)", "class_method_signature": "TransactionAwareHTable.get(List<Get> gets)", "testcase": false, "constructor": false}, {"identifier": "getRowOrBefore", "parameters": "(byte[] row, byte[] family)", "modifiers": "@Override public", "return": "Result", "signature": "Result getRowOrBefore(byte[] row, byte[] family)", "full_signature": "@Override public Result getRowOrBefore(byte[] row, byte[] family)", "class_method_signature": "TransactionAwareHTable.getRowOrBefore(byte[] row, byte[] family)", "testcase": false, "constructor": false}, {"identifier": "getScanner", "parameters": "(Scan scan)", "modifiers": "@Override public", "return": "ResultScanner", "signature": "ResultScanner getScanner(Scan scan)", "full_signature": "@Override public ResultScanner getScanner(Scan scan)", "class_method_signature": "TransactionAwareHTable.getScanner(Scan scan)", "testcase": false, "constructor": false}, {"identifier": "getScanner", "parameters": "(byte[] family)", "modifiers": "@Override public", "return": "ResultScanner", "signature": "ResultScanner getScanner(byte[] family)", "full_signature": "@Override public ResultScanner getScanner(byte[] family)", "class_method_signature": "TransactionAwareHTable.getScanner(byte[] family)", "testcase": false, "constructor": false}, {"identifier": "getScanner", "parameters": "(byte[] family, byte[] qualifier)", "modifiers": "@Override public", "return": "ResultScanner", "signature": "ResultScanner getScanner(byte[] family, byte[] qualifier)", "full_signature": "@Override public ResultScanner getScanner(byte[] family, byte[] qualifier)", "class_method_signature": "TransactionAwareHTable.getScanner(byte[] family, byte[] qualifier)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Put put)", "modifiers": "@Override public", "return": "void", "signature": "void put(Put put)", "full_signature": "@Override public void put(Put put)", "class_method_signature": "TransactionAwareHTable.put(Put put)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(List<Put> puts)", "modifiers": "@Override public", "return": "void", "signature": "void put(List<Put> puts)", "full_signature": "@Override public void put(List<Put> puts)", "class_method_signature": "TransactionAwareHTable.put(List<Put> puts)", "testcase": false, "constructor": false}, {"identifier": "checkAndPut", "parameters": "(byte[] row, byte[] family, byte[] qualifier, byte[] value, Put put)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkAndPut(byte[] row, byte[] family, byte[] qualifier, byte[] value, Put put)", "full_signature": "@Override public boolean checkAndPut(byte[] row, byte[] family, byte[] qualifier, byte[] value, Put put)", "class_method_signature": "TransactionAwareHTable.checkAndPut(byte[] row, byte[] family, byte[] qualifier, byte[] value, Put put)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Delete delete)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Delete delete)", "full_signature": "@Override public void delete(Delete delete)", "class_method_signature": "TransactionAwareHTable.delete(Delete delete)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(List<Delete> deletes)", "modifiers": "@Override public", "return": "void", "signature": "void delete(List<Delete> deletes)", "full_signature": "@Override public void delete(List<Delete> deletes)", "class_method_signature": "TransactionAwareHTable.delete(List<Delete> deletes)", "testcase": false, "constructor": false}, {"identifier": "checkAndDelete", "parameters": "(byte[] row, byte[] family, byte[] qualifier, byte[] value, Delete delete)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkAndDelete(byte[] row, byte[] family, byte[] qualifier, byte[] value, Delete delete)", "full_signature": "@Override public boolean checkAndDelete(byte[] row, byte[] family, byte[] qualifier, byte[] value, Delete delete)", "class_method_signature": "TransactionAwareHTable.checkAndDelete(byte[] row, byte[] family, byte[] qualifier, byte[] value, Delete delete)", "testcase": false, "constructor": false}, {"identifier": "checkAndMutate", "parameters": "(byte[] row, byte[] family, byte[] qualifier,\n                                CompareFilter.CompareOp compareOp, byte[] value, RowMutations rowMutations)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkAndMutate(byte[] row, byte[] family, byte[] qualifier,\n                                CompareFilter.CompareOp compareOp, byte[] value, RowMutations rowMutations)", "full_signature": "@Override public boolean checkAndMutate(byte[] row, byte[] family, byte[] qualifier,\n                                CompareFilter.CompareOp compareOp, byte[] value, RowMutations rowMutations)", "class_method_signature": "TransactionAwareHTable.checkAndMutate(byte[] row, byte[] family, byte[] qualifier,\n                                CompareFilter.CompareOp compareOp, byte[] value, RowMutations rowMutations)", "testcase": false, "constructor": false}, {"identifier": "mutateRow", "parameters": "(RowMutations rm)", "modifiers": "@Override public", "return": "void", "signature": "void mutateRow(RowMutations rm)", "full_signature": "@Override public void mutateRow(RowMutations rm)", "class_method_signature": "TransactionAwareHTable.mutateRow(RowMutations rm)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Append append)", "modifiers": "@Override public", "return": "Result", "signature": "Result append(Append append)", "full_signature": "@Override public Result append(Append append)", "class_method_signature": "TransactionAwareHTable.append(Append append)", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "(Increment increment)", "modifiers": "@Override public", "return": "Result", "signature": "Result increment(Increment increment)", "full_signature": "@Override public Result increment(Increment increment)", "class_method_signature": "TransactionAwareHTable.increment(Increment increment)", "testcase": false, "constructor": false}, {"identifier": "incrementColumnValue", "parameters": "(byte[] row, byte[] family, byte[] qualifier, long amount)", "modifiers": "@Override public", "return": "long", "signature": "long incrementColumnValue(byte[] row, byte[] family, byte[] qualifier, long amount)", "full_signature": "@Override public long incrementColumnValue(byte[] row, byte[] family, byte[] qualifier, long amount)", "class_method_signature": "TransactionAwareHTable.incrementColumnValue(byte[] row, byte[] family, byte[] qualifier, long amount)", "testcase": false, "constructor": false}, {"identifier": "incrementColumnValue", "parameters": "(byte[] row, byte[] family, byte[] qualifier, long amount, Durability durability)", "modifiers": "@Override public", "return": "long", "signature": "long incrementColumnValue(byte[] row, byte[] family, byte[] qualifier, long amount, Durability durability)", "full_signature": "@Override public long incrementColumnValue(byte[] row, byte[] family, byte[] qualifier, long amount, Durability durability)", "class_method_signature": "TransactionAwareHTable.incrementColumnValue(byte[] row, byte[] family, byte[] qualifier, long amount, Durability durability)", "testcase": false, "constructor": false}, {"identifier": "incrementColumnValue", "parameters": "(byte[] row, byte[] family, byte[] qualifier, long amount, boolean writeToWAL)", "modifiers": "@Override public", "return": "long", "signature": "long incrementColumnValue(byte[] row, byte[] family, byte[] qualifier, long amount, boolean writeToWAL)", "full_signature": "@Override public long incrementColumnValue(byte[] row, byte[] family, byte[] qualifier, long amount, boolean writeToWAL)", "class_method_signature": "TransactionAwareHTable.incrementColumnValue(byte[] row, byte[] family, byte[] qualifier, long amount, boolean writeToWAL)", "testcase": false, "constructor": false}, {"identifier": "isAutoFlush", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAutoFlush()", "full_signature": "@Override public boolean isAutoFlush()", "class_method_signature": "TransactionAwareHTable.isAutoFlush()", "testcase": false, "constructor": false}, {"identifier": "flushCommits", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flushCommits()", "full_signature": "@Override public void flushCommits()", "class_method_signature": "TransactionAwareHTable.flushCommits()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "TransactionAwareHTable.close()", "testcase": false, "constructor": false}, {"identifier": "coprocessorService", "parameters": "(byte[] row)", "modifiers": "@Override public", "return": "CoprocessorRpcChannel", "signature": "CoprocessorRpcChannel coprocessorService(byte[] row)", "full_signature": "@Override public CoprocessorRpcChannel coprocessorService(byte[] row)", "class_method_signature": "TransactionAwareHTable.coprocessorService(byte[] row)", "testcase": false, "constructor": false}, {"identifier": "coprocessorService", "parameters": "(Class<T> service, byte[] startKey, byte[] endKey,\n                                                                  Batch.Call<T, R> callable)", "modifiers": "@Override public", "return": "Map<byte[], R>", "signature": "Map<byte[], R> coprocessorService(Class<T> service, byte[] startKey, byte[] endKey,\n                                                                  Batch.Call<T, R> callable)", "full_signature": "@Override public Map<byte[], R> coprocessorService(Class<T> service, byte[] startKey, byte[] endKey,\n                                                                  Batch.Call<T, R> callable)", "class_method_signature": "TransactionAwareHTable.coprocessorService(Class<T> service, byte[] startKey, byte[] endKey,\n                                                                  Batch.Call<T, R> callable)", "testcase": false, "constructor": false}, {"identifier": "coprocessorService", "parameters": "(Class<T> service, byte[] startKey, byte[] endKey,\n                                                        Batch.Call<T, R> callable, Batch.Callback<R> callback)", "modifiers": "@Override public", "return": "void", "signature": "void coprocessorService(Class<T> service, byte[] startKey, byte[] endKey,\n                                                        Batch.Call<T, R> callable, Batch.Callback<R> callback)", "full_signature": "@Override public void coprocessorService(Class<T> service, byte[] startKey, byte[] endKey,\n                                                        Batch.Call<T, R> callable, Batch.Callback<R> callback)", "class_method_signature": "TransactionAwareHTable.coprocessorService(Class<T> service, byte[] startKey, byte[] endKey,\n                                                        Batch.Call<T, R> callable, Batch.Callback<R> callback)", "testcase": false, "constructor": false}, {"identifier": "batchCoprocessorService", "parameters": "(\n      MethodDescriptor methodDescriptor, Message request, byte[] startKey, byte[] endKey,\n      R responsePrototype)", "modifiers": "@Override public", "return": "Map<byte[], R>", "signature": "Map<byte[], R> batchCoprocessorService(\n      MethodDescriptor methodDescriptor, Message request, byte[] startKey, byte[] endKey,\n      R responsePrototype)", "full_signature": "@Override public Map<byte[], R> batchCoprocessorService(\n      MethodDescriptor methodDescriptor, Message request, byte[] startKey, byte[] endKey,\n      R responsePrototype)", "class_method_signature": "TransactionAwareHTable.batchCoprocessorService(\n      MethodDescriptor methodDescriptor, Message request, byte[] startKey, byte[] endKey,\n      R responsePrototype)", "testcase": false, "constructor": false}, {"identifier": "batchCoprocessorService", "parameters": "(MethodDescriptor methodDescriptor,\n      Message request, byte[] startKey, byte[] endKey, R responsePrototype, Callback<R> callback)", "modifiers": "@Override public", "return": "void", "signature": "void batchCoprocessorService(MethodDescriptor methodDescriptor,\n      Message request, byte[] startKey, byte[] endKey, R responsePrototype, Callback<R> callback)", "full_signature": "@Override public void batchCoprocessorService(MethodDescriptor methodDescriptor,\n      Message request, byte[] startKey, byte[] endKey, R responsePrototype, Callback<R> callback)", "class_method_signature": "TransactionAwareHTable.batchCoprocessorService(MethodDescriptor methodDescriptor,\n      Message request, byte[] startKey, byte[] endKey, R responsePrototype, Callback<R> callback)", "testcase": false, "constructor": false}, {"identifier": "setAutoFlush", "parameters": "(boolean autoFlush)", "modifiers": "@Override public", "return": "void", "signature": "void setAutoFlush(boolean autoFlush)", "full_signature": "@Override public void setAutoFlush(boolean autoFlush)", "class_method_signature": "TransactionAwareHTable.setAutoFlush(boolean autoFlush)", "testcase": false, "constructor": false}, {"identifier": "setAutoFlush", "parameters": "(boolean autoFlush, boolean clearBufferOnFail)", "modifiers": "@Override public", "return": "void", "signature": "void setAutoFlush(boolean autoFlush, boolean clearBufferOnFail)", "full_signature": "@Override public void setAutoFlush(boolean autoFlush, boolean clearBufferOnFail)", "class_method_signature": "TransactionAwareHTable.setAutoFlush(boolean autoFlush, boolean clearBufferOnFail)", "testcase": false, "constructor": false}, {"identifier": "setAutoFlushTo", "parameters": "(boolean autoFlush)", "modifiers": "@Override public", "return": "void", "signature": "void setAutoFlushTo(boolean autoFlush)", "full_signature": "@Override public void setAutoFlushTo(boolean autoFlush)", "class_method_signature": "TransactionAwareHTable.setAutoFlushTo(boolean autoFlush)", "testcase": false, "constructor": false}, {"identifier": "getWriteBufferSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getWriteBufferSize()", "full_signature": "@Override public long getWriteBufferSize()", "class_method_signature": "TransactionAwareHTable.getWriteBufferSize()", "testcase": false, "constructor": false}, {"identifier": "setWriteBufferSize", "parameters": "(long writeBufferSize)", "modifiers": "@Override public", "return": "void", "signature": "void setWriteBufferSize(long writeBufferSize)", "full_signature": "@Override public void setWriteBufferSize(long writeBufferSize)", "class_method_signature": "TransactionAwareHTable.setWriteBufferSize(long writeBufferSize)", "testcase": false, "constructor": false}, {"identifier": "transactionalizeAction", "parameters": "(Get get)", "modifiers": "private", "return": "Get", "signature": "Get transactionalizeAction(Get get)", "full_signature": "private Get transactionalizeAction(Get get)", "class_method_signature": "TransactionAwareHTable.transactionalizeAction(Get get)", "testcase": false, "constructor": false}, {"identifier": "transactionalizeAction", "parameters": "(Scan scan)", "modifiers": "private", "return": "Scan", "signature": "Scan transactionalizeAction(Scan scan)", "full_signature": "private Scan transactionalizeAction(Scan scan)", "class_method_signature": "TransactionAwareHTable.transactionalizeAction(Scan scan)", "testcase": false, "constructor": false}, {"identifier": "transactionalizeAction", "parameters": "(Put put)", "modifiers": "private", "return": "Put", "signature": "Put transactionalizeAction(Put put)", "full_signature": "private Put transactionalizeAction(Put put)", "class_method_signature": "TransactionAwareHTable.transactionalizeAction(Put put)", "testcase": false, "constructor": false}, {"identifier": "transactionalizeAction", "parameters": "(Delete delete)", "modifiers": "private", "return": "Delete", "signature": "Delete transactionalizeAction(Delete delete)", "full_signature": "private Delete transactionalizeAction(Delete delete)", "class_method_signature": "TransactionAwareHTable.transactionalizeAction(Delete delete)", "testcase": false, "constructor": false}, {"identifier": "transactionalizeActions", "parameters": "(List<? extends Row> actions)", "modifiers": "private", "return": "List<? extends Row>", "signature": "List<? extends Row> transactionalizeActions(List<? extends Row> actions)", "full_signature": "private List<? extends Row> transactionalizeActions(List<? extends Row> actions)", "class_method_signature": "TransactionAwareHTable.transactionalizeActions(List<? extends Row> actions)", "testcase": false, "constructor": false}, {"identifier": "addToOperation", "parameters": "(OperationWithAttributes op, Transaction tx)", "modifiers": "public", "return": "void", "signature": "void addToOperation(OperationWithAttributes op, Transaction tx)", "full_signature": "public void addToOperation(OperationWithAttributes op, Transaction tx)", "class_method_signature": "TransactionAwareHTable.addToOperation(OperationWithAttributes op, Transaction tx)", "testcase": false, "constructor": false}], "file": "tephra-hbase-compat-0.98/src/main/java/co/cask/tephra/hbase98/TransactionAwareHTable.java"}, "focal_method": {"identifier": "get", "parameters": "(Get get)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n  public Result get(Get get) throws IOException {\n    if (tx == null) {\n      throw new IOException(\"Transaction not started\");\n    }\n    return hTable.get(transactionalizeAction(get));\n  }", "signature": "Result get(Get get)", "full_signature": "@Override public Result get(Get get)", "class_method_signature": "TransactionAwareHTable.get(Get get)", "testcase": false, "constructor": false, "invocations": ["get", "transactionalizeAction"]}, "repository": {"repo_id": 21894018, "url": "https://github.com/cdapio/tephra", "language": "Java", "is_fork": false, "fork_count": 43, "stargazer_count": 157, "size": 1415, "license": "licensed"}}