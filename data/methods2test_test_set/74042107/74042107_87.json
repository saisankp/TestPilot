{"test_class": {"identifier": "ScenarioTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Scenario scenario;", "modifier": "private", "type": "Scenario", "declarator": "scenario", "var_name": "scenario"}, {"original_string": "private AtomicInteger counter;", "modifier": "private", "type": "AtomicInteger", "declarator": "counter", "var_name": "counter"}, {"original_string": "private ProductionSite fakeSite;", "modifier": "private", "type": "ProductionSite", "declarator": "fakeSite", "var_name": "fakeSite"}], "file": "src/osip-model/src/test/java/edu/kit/pse/osip/core/model/behavior/ScenarioTest.java"}, "test_case": {"identifier": "testAddPause", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddPause() {\n        CompletableFuture<Boolean> future1 = new CompletableFuture<>();\n        CompletableFuture<Boolean> future2 = new CompletableFuture<>();\n\n        scenario.appendRunnable(productionSite -> future1.complete(Boolean.TRUE));\n        scenario.addPause(500);\n        scenario.appendRunnable(productionSite -> future2.complete(Boolean.TRUE));\n        scenario.setProductionSite(fakeSite);\n        scenario.startScenario();\n\n        try {\n            assertTrue(future1.get(100, TimeUnit.MILLISECONDS));\n            assertFalse(future2.isDone());\n            assertTrue(scenario.isRunning());\n        } catch (InterruptedException | ExecutionException | TimeoutException ex) {\n            fail(\"CompletableFuture.get() failed: \" + ex.getMessage());\n        }\n\n        try {\n            sleep(300);\n        } catch (InterruptedException ex) {\n            System.err.println(\"Sleep failed in ScenarioTest: \" + ex.getMessage());\n        }\n        assertFalse(future2.isDone());\n        assertTrue(scenario.isRunning());\n\n        try {\n            assertTrue(future2.get(300, TimeUnit.MILLISECONDS));\n            sleep(50);\n            assertFalse(scenario.isRunning());\n        } catch (InterruptedException | ExecutionException | TimeoutException ex) {\n            fail(\"CompletableFuture.get() failed: \" + ex.getMessage());\n        }\n    }", "signature": "void testAddPause()", "full_signature": "@Test public void testAddPause()", "class_method_signature": "ScenarioTest.testAddPause()", "testcase": true, "constructor": false, "invocations": ["appendRunnable", "complete", "addPause", "appendRunnable", "complete", "setProductionSite", "startScenario", "assertTrue", "get", "assertFalse", "isDone", "assertTrue", "isRunning", "fail", "getMessage", "sleep", "println", "getMessage", "assertFalse", "isDone", "assertTrue", "isRunning", "assertTrue", "get", "sleep", "assertFalse", "isRunning", "fail", "getMessage"]}, "focal_class": {"identifier": "Scenario", "superclass": "extends Observable", "interfaces": "implements Runnable", "fields": [{"original_string": "private List<ThrowingConsumer<ProductionSite>> commands = new LinkedList<>();", "modifier": "private", "type": "List<ThrowingConsumer<ProductionSite>>", "declarator": "commands = new LinkedList<>()", "var_name": "commands"}, {"original_string": "private Thread thread;", "modifier": "private", "type": "Thread", "declarator": "thread", "var_name": "thread"}, {"original_string": "private ProductionSite productionSite;", "modifier": "private", "type": "ProductionSite", "declarator": "productionSite", "var_name": "productionSite"}, {"original_string": "private boolean stop = false;", "modifier": "private", "type": "boolean", "declarator": "stop = false", "var_name": "stop"}, {"original_string": "private Runnable finishedListener;", "modifier": "private", "type": "Runnable", "declarator": "finishedListener", "var_name": "finishedListener"}, {"original_string": "private boolean repeat;", "modifier": "private", "type": "boolean", "declarator": "repeat", "var_name": "repeat"}], "methods": [{"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Scenario.run()", "testcase": false, "constructor": false}, {"identifier": "appendRunnable", "parameters": "(Consumer<ProductionSite> runnable)", "modifiers": "public", "return": "void", "signature": "void appendRunnable(Consumer<ProductionSite> runnable)", "full_signature": "public void appendRunnable(Consumer<ProductionSite> runnable)", "class_method_signature": "Scenario.appendRunnable(Consumer<ProductionSite> runnable)", "testcase": false, "constructor": false}, {"identifier": "addPause", "parameters": "(int length)", "modifiers": "public", "return": "void", "signature": "void addPause(int length)", "full_signature": "public void addPause(int length)", "class_method_signature": "Scenario.addPause(int length)", "testcase": false, "constructor": false}, {"identifier": "startScenario", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startScenario()", "full_signature": "public void startScenario()", "class_method_signature": "Scenario.startScenario()", "testcase": false, "constructor": false}, {"identifier": "cancelScenario", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cancelScenario()", "full_signature": "public void cancelScenario()", "class_method_signature": "Scenario.cancelScenario()", "testcase": false, "constructor": false}, {"identifier": "isRunning", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRunning()", "full_signature": "public boolean isRunning()", "class_method_signature": "Scenario.isRunning()", "testcase": false, "constructor": false}, {"identifier": "setProductionSite", "parameters": "(ProductionSite productionSite)", "modifiers": "public", "return": "void", "signature": "void setProductionSite(ProductionSite productionSite)", "full_signature": "public void setProductionSite(ProductionSite productionSite)", "class_method_signature": "Scenario.setProductionSite(ProductionSite productionSite)", "testcase": false, "constructor": false}, {"identifier": "setScenarioFinishedListener", "parameters": "(Runnable listener)", "modifiers": "public", "return": "void", "signature": "void setScenarioFinishedListener(Runnable listener)", "full_signature": "public void setScenarioFinishedListener(Runnable listener)", "class_method_signature": "Scenario.setScenarioFinishedListener(Runnable listener)", "testcase": false, "constructor": false}, {"identifier": "setRepeat", "parameters": "(boolean repeat)", "modifiers": "public", "return": "void", "signature": "void setRepeat(boolean repeat)", "full_signature": "public void setRepeat(boolean repeat)", "class_method_signature": "Scenario.setRepeat(boolean repeat)", "testcase": false, "constructor": false}], "file": "src/osip-model/src/main/java/edu/kit/pse/osip/core/model/behavior/Scenario.java"}, "focal_method": {"identifier": "addPause", "parameters": "(int length)", "modifiers": "public", "return": "void", "body": "public void addPause(int length) {\n        commands.add(productionSite1 -> sleep(length));\n    }", "signature": "void addPause(int length)", "full_signature": "public void addPause(int length)", "class_method_signature": "Scenario.addPause(int length)", "testcase": false, "constructor": false, "invocations": ["add", "sleep"]}, "repository": {"repo_id": 74042107, "url": "https://github.com/ByteHamster/PSE", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 18396, "license": "licensed"}}