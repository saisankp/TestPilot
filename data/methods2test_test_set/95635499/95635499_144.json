{"test_class": {"identifier": "DerivateTransformDistanceTest", "superclass": "", "interfaces": "", "fields": [], "file": "JAICore/jaicore-basic/src/test/java/ai/libs/jaicore/basic/metric/DerivateTransformDistanceTest.java"}, "test_case": {"identifier": "testCorrectnessForDistanceCalculation2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCorrectnessForDistanceCalculation2() {\n\t\t// Input.\n\t\tdouble[] timeSeries1 = { 1, 2, 3, 4, 5 }; // transform { -6.0833, -5.6666667, -4, -0.6666667, 6.41666667 },\n\t\t\t\t\t\t\t\t\t\t\t\t\t// derivate { 1, 1, 1, 1}\n\t\tdouble[] timeSeries2 = { 2, 2, 2, 2, 2 }; // transform { -4.166667, -1.666667, 0, 1.666667, 4.166667 }, derivate\n\t\t\t\t\t\t\t\t\t\t\t\t\t// { 0, 0, 0, 0}\n\t\tdouble a = 0.5;\n\t\tdouble b = 0.25;\n\t\tdouble c = 0.25;\n\t\tADerivateFilter derivate = new BackwardDifferenceDerivate();\n\t\tIVectorTransform transform = new HilbertTransform();\n\t\tIDistanceMetric euclideanDistance = new EuclideanDistance();\n\n\t\t// Expectation.\n\t\tdouble expectation = a * Math.sqrt(15) + b * Math.sqrt(4) + c * 6.79562;\n\n\t\tDerivateTransformDistance dtd = new DerivateTransformDistance(a, b, c, derivate, transform, euclideanDistance);\n\t\tdouble distance = dtd.distance(timeSeries1, timeSeries2);\n\n\t\tassertEquals(expectation, distance, 1.0E-5);\n\t}", "signature": "void testCorrectnessForDistanceCalculation2()", "full_signature": "@Test public void testCorrectnessForDistanceCalculation2()", "class_method_signature": "DerivateTransformDistanceTest.testCorrectnessForDistanceCalculation2()", "testcase": true, "constructor": false, "invocations": ["sqrt", "sqrt", "distance", "assertEquals"]}, "focal_class": {"identifier": "DerivateTransformDistance", "superclass": "", "interfaces": "implements IDistanceMetric", "fields": [{"original_string": "private double a;", "modifier": "private", "type": "double", "declarator": "a", "var_name": "a"}, {"original_string": "private double b;", "modifier": "private", "type": "double", "declarator": "b", "var_name": "b"}, {"original_string": "private double c;", "modifier": "private", "type": "double", "declarator": "c", "var_name": "c"}, {"original_string": "private ADerivateFilter derivate;", "modifier": "private", "type": "ADerivateFilter", "declarator": "derivate", "var_name": "derivate"}, {"original_string": "private IVectorTransform transform;", "modifier": "private", "type": "IVectorTransform", "declarator": "transform", "var_name": "transform"}, {"original_string": "private IDistanceMetric timeSeriesDistance;", "modifier": "private", "type": "IDistanceMetric", "declarator": "timeSeriesDistance", "var_name": "timeSeriesDistance"}, {"original_string": "private IDistanceMetric derivateDistance;", "modifier": "private", "type": "IDistanceMetric", "declarator": "derivateDistance", "var_name": "derivateDistance"}, {"original_string": "private IDistanceMetric transformDistance;", "modifier": "private", "type": "IDistanceMetric", "declarator": "transformDistance", "var_name": "transformDistance"}], "methods": [{"identifier": "DerivateTransformDistance", "parameters": "(final double a, final double b, final double c, final ADerivateFilter derivate, final IVectorTransform transform, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance,\n\t\t\tfinal IDistanceMetric transformDistance)", "modifiers": "public", "return": "", "signature": " DerivateTransformDistance(final double a, final double b, final double c, final ADerivateFilter derivate, final IVectorTransform transform, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance,\n\t\t\tfinal IDistanceMetric transformDistance)", "full_signature": "public  DerivateTransformDistance(final double a, final double b, final double c, final ADerivateFilter derivate, final IVectorTransform transform, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance,\n\t\t\tfinal IDistanceMetric transformDistance)", "class_method_signature": "DerivateTransformDistance.DerivateTransformDistance(final double a, final double b, final double c, final ADerivateFilter derivate, final IVectorTransform transform, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance,\n\t\t\tfinal IDistanceMetric transformDistance)", "testcase": false, "constructor": true}, {"identifier": "DerivateTransformDistance", "parameters": "(final double a, final double b, final double c, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance, final IDistanceMetric transformDistance)", "modifiers": "public", "return": "", "signature": " DerivateTransformDistance(final double a, final double b, final double c, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance, final IDistanceMetric transformDistance)", "full_signature": "public  DerivateTransformDistance(final double a, final double b, final double c, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance, final IDistanceMetric transformDistance)", "class_method_signature": "DerivateTransformDistance.DerivateTransformDistance(final double a, final double b, final double c, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance, final IDistanceMetric transformDistance)", "testcase": false, "constructor": true}, {"identifier": "DerivateTransformDistance", "parameters": "(final double a, final double b, final double c, final ADerivateFilter derivate, final IVectorTransform transform, final IDistanceMetric distance)", "modifiers": "public", "return": "", "signature": " DerivateTransformDistance(final double a, final double b, final double c, final ADerivateFilter derivate, final IVectorTransform transform, final IDistanceMetric distance)", "full_signature": "public  DerivateTransformDistance(final double a, final double b, final double c, final ADerivateFilter derivate, final IVectorTransform transform, final IDistanceMetric distance)", "class_method_signature": "DerivateTransformDistance.DerivateTransformDistance(final double a, final double b, final double c, final ADerivateFilter derivate, final IVectorTransform transform, final IDistanceMetric distance)", "testcase": false, "constructor": true}, {"identifier": "DerivateTransformDistance", "parameters": "(final double a, final double b, final double c, final IDistanceMetric distance)", "modifiers": "public", "return": "", "signature": " DerivateTransformDistance(final double a, final double b, final double c, final IDistanceMetric distance)", "full_signature": "public  DerivateTransformDistance(final double a, final double b, final double c, final IDistanceMetric distance)", "class_method_signature": "DerivateTransformDistance.DerivateTransformDistance(final double a, final double b, final double c, final IDistanceMetric distance)", "testcase": false, "constructor": true}, {"identifier": "distance", "parameters": "(final double[] a, final double[] b)", "modifiers": "@Override public", "return": "double", "signature": "double distance(final double[] a, final double[] b)", "full_signature": "@Override public double distance(final double[] a, final double[] b)", "class_method_signature": "DerivateTransformDistance.distance(final double[] a, final double[] b)", "testcase": false, "constructor": false}, {"identifier": "setA", "parameters": "(final double a)", "modifiers": "public", "return": "void", "signature": "void setA(final double a)", "full_signature": "public void setA(final double a)", "class_method_signature": "DerivateTransformDistance.setA(final double a)", "testcase": false, "constructor": false}, {"identifier": "setB", "parameters": "(final double b)", "modifiers": "public", "return": "void", "signature": "void setB(final double b)", "full_signature": "public void setB(final double b)", "class_method_signature": "DerivateTransformDistance.setB(final double b)", "testcase": false, "constructor": false}, {"identifier": "setC", "parameters": "(final double c)", "modifiers": "public", "return": "void", "signature": "void setC(final double c)", "full_signature": "public void setC(final double c)", "class_method_signature": "DerivateTransformDistance.setC(final double c)", "testcase": false, "constructor": false}, {"identifier": "getA", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA()", "full_signature": "public double getA()", "class_method_signature": "DerivateTransformDistance.getA()", "testcase": false, "constructor": false}, {"identifier": "getB", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getB()", "full_signature": "public double getB()", "class_method_signature": "DerivateTransformDistance.getB()", "testcase": false, "constructor": false}, {"identifier": "getC", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getC()", "full_signature": "public double getC()", "class_method_signature": "DerivateTransformDistance.getC()", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-basic/src/main/java/ai/libs/jaicore/basic/metric/DerivateTransformDistance.java"}, "focal_method": {"identifier": "distance", "parameters": "(final double[] a, final double[] b)", "modifiers": "@Override public", "return": "double", "body": "@Override\n\tpublic double distance(final double[] a, final double[] b) {\n\t\tdouble[] derivateA = this.derivate.transform(a);\n\t\tdouble[] derivateB = this.derivate.transform(b);\n\t\tdouble[] transformA = this.transform.transform(a);\n\t\tdouble[] transformB = this.transform.transform(b);\n\n\t\treturn this.a * this.timeSeriesDistance.distance(a, b) + this.b * this.derivateDistance.distance(derivateA, derivateB) + this.c * this.transformDistance.distance(transformA, transformB);\n\t}", "signature": "double distance(final double[] a, final double[] b)", "full_signature": "@Override public double distance(final double[] a, final double[] b)", "class_method_signature": "DerivateTransformDistance.distance(final double[] a, final double[] b)", "testcase": false, "constructor": false, "invocations": ["transform", "transform", "transform", "transform", "distance", "distance", "distance"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}