{"test_class": {"identifier": "WebConfigurerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WebConfigurer webConfigurer;", "modifier": "private", "type": "WebConfigurer", "declarator": "webConfigurer", "var_name": "webConfigurer"}, {"original_string": "private MockServletContext servletContext;", "modifier": "private", "type": "MockServletContext", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "private MockEnvironment env;", "modifier": "private", "type": "MockEnvironment", "declarator": "env", "var_name": "env"}, {"original_string": "private JHipsterProperties props;", "modifier": "private", "type": "JHipsterProperties", "declarator": "props", "var_name": "props"}, {"original_string": "private MetricRegistry metricRegistry;", "modifier": "private", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}], "file": "gamecraft-pipeline-manager/src/test/java/com/gamecraft/config/WebConfigurerTest.java"}, "test_case": {"identifier": "testCustomizeServletContainer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCustomizeServletContainer() {\n        env.setActiveProfiles(JHipsterConstants.SPRING_PROFILE_PRODUCTION);\n        UndertowEmbeddedServletContainerFactory container = new UndertowEmbeddedServletContainerFactory();\n        webConfigurer.customize(container);\n        assertThat(container.getMimeMappings().get(\"abs\")).isEqualTo(\"audio/x-mpeg\");\n        assertThat(container.getMimeMappings().get(\"html\")).isEqualTo(\"text/html;charset=utf-8\");\n        assertThat(container.getMimeMappings().get(\"json\")).isEqualTo(\"text/html;charset=utf-8\");\n\n        Builder builder = Undertow.builder();\n        container.getBuilderCustomizers().forEach(c -> c.customize(builder));\n        OptionMap.Builder serverOptions = (OptionMap.Builder) ReflectionTestUtils.getField(builder, \"serverOptions\");\n        assertThat(serverOptions.getMap().get(UndertowOptions.ENABLE_HTTP2)).isNull();\n    }", "signature": "void testCustomizeServletContainer()", "full_signature": "@Test public void testCustomizeServletContainer()", "class_method_signature": "WebConfigurerTest.testCustomizeServletContainer()", "testcase": true, "constructor": false, "invocations": ["setActiveProfiles", "customize", "isEqualTo", "assertThat", "get", "getMimeMappings", "isEqualTo", "assertThat", "get", "getMimeMappings", "isEqualTo", "assertThat", "get", "getMimeMappings", "builder", "forEach", "getBuilderCustomizers", "customize", "getField", "isNull", "assertThat", "get", "getMap"]}, "focal_class": {"identifier": "WebConfigurer", "superclass": "", "interfaces": "implements ServletContextInitializer, EmbeddedServletContainerCustomizer", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(WebConfigurer.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(WebConfigurer.class)", "var_name": "log"}, {"original_string": "private final Environment env;", "modifier": "private final", "type": "Environment", "declarator": "env", "var_name": "env"}, {"original_string": "private final JHipsterProperties jHipsterProperties;", "modifier": "private final", "type": "JHipsterProperties", "declarator": "jHipsterProperties", "var_name": "jHipsterProperties"}, {"original_string": "private final HazelcastInstance hazelcastInstance;", "modifier": "private final", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}, {"original_string": "private MetricRegistry metricRegistry;", "modifier": "private", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}], "methods": [{"identifier": "WebConfigurer", "parameters": "(Environment env, JHipsterProperties jHipsterProperties, HazelcastInstance hazelcastInstance)", "modifiers": "public", "return": "", "signature": " WebConfigurer(Environment env, JHipsterProperties jHipsterProperties, HazelcastInstance hazelcastInstance)", "full_signature": "public  WebConfigurer(Environment env, JHipsterProperties jHipsterProperties, HazelcastInstance hazelcastInstance)", "class_method_signature": "WebConfigurer.WebConfigurer(Environment env, JHipsterProperties jHipsterProperties, HazelcastInstance hazelcastInstance)", "testcase": false, "constructor": true}, {"identifier": "onStartup", "parameters": "(ServletContext servletContext)", "modifiers": "@Override public", "return": "void", "signature": "void onStartup(ServletContext servletContext)", "full_signature": "@Override public void onStartup(ServletContext servletContext)", "class_method_signature": "WebConfigurer.onStartup(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "customize", "parameters": "(ConfigurableEmbeddedServletContainer container)", "modifiers": "@Override public", "return": "void", "signature": "void customize(ConfigurableEmbeddedServletContainer container)", "full_signature": "@Override public void customize(ConfigurableEmbeddedServletContainer container)", "class_method_signature": "WebConfigurer.customize(ConfigurableEmbeddedServletContainer container)", "testcase": false, "constructor": false}, {"identifier": "initMetrics", "parameters": "(ServletContext servletContext, EnumSet<DispatcherType> disps)", "modifiers": "private", "return": "void", "signature": "void initMetrics(ServletContext servletContext, EnumSet<DispatcherType> disps)", "full_signature": "private void initMetrics(ServletContext servletContext, EnumSet<DispatcherType> disps)", "class_method_signature": "WebConfigurer.initMetrics(ServletContext servletContext, EnumSet<DispatcherType> disps)", "testcase": false, "constructor": false}, {"identifier": "corsFilter", "parameters": "()", "modifiers": "@Bean public", "return": "CorsFilter", "signature": "CorsFilter corsFilter()", "full_signature": "@Bean public CorsFilter corsFilter()", "class_method_signature": "WebConfigurer.corsFilter()", "testcase": false, "constructor": false}, {"identifier": "initH2Console", "parameters": "(ServletContext servletContext)", "modifiers": "private", "return": "void", "signature": "void initH2Console(ServletContext servletContext)", "full_signature": "private void initH2Console(ServletContext servletContext)", "class_method_signature": "WebConfigurer.initH2Console(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "setMetricRegistry", "parameters": "(MetricRegistry metricRegistry)", "modifiers": "@Autowired(required = false) public", "return": "void", "signature": "void setMetricRegistry(MetricRegistry metricRegistry)", "full_signature": "@Autowired(required = false) public void setMetricRegistry(MetricRegistry metricRegistry)", "class_method_signature": "WebConfigurer.setMetricRegistry(MetricRegistry metricRegistry)", "testcase": false, "constructor": false}], "file": "gamecraft-pipeline-manager/src/main/java/com/gamecraft/config/WebConfigurer.java"}, "focal_method": {"identifier": "customize", "parameters": "(ConfigurableEmbeddedServletContainer container)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void customize(ConfigurableEmbeddedServletContainer container) {\n        MimeMappings mappings = new MimeMappings(MimeMappings.DEFAULT);\n        // IE issue, see https://github.com/jhipster/generator-jhipster/pull/711\n        mappings.add(\"html\", MediaType.TEXT_HTML_VALUE + \";charset=utf-8\");\n        // CloudFoundry issue, see https://github.com/cloudfoundry/gorouter/issues/64\n        mappings.add(\"json\", MediaType.TEXT_HTML_VALUE + \";charset=utf-8\");\n        container.setMimeMappings(mappings);\n\n        /*\n         * Enable HTTP/2 for Undertow - https://twitter.com/ankinson/status/829256167700492288\n         * HTTP/2 requires HTTPS, so HTTP requests will fallback to HTTP/1.1.\n         * See the JHipsterProperties class and your application-*.yml configuration files\n         * for more information.\n         */\n        if (jHipsterProperties.getHttp().getVersion().equals(JHipsterProperties.Http.Version.V_2_0) &&\n            container instanceof UndertowEmbeddedServletContainerFactory) {\n\n            ((UndertowEmbeddedServletContainerFactory) container)\n                .addBuilderCustomizers(builder ->\n                    builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true));\n        }\n    }", "signature": "void customize(ConfigurableEmbeddedServletContainer container)", "full_signature": "@Override public void customize(ConfigurableEmbeddedServletContainer container)", "class_method_signature": "WebConfigurer.customize(ConfigurableEmbeddedServletContainer container)", "testcase": false, "constructor": false, "invocations": ["add", "add", "setMimeMappings", "equals", "getVersion", "getHttp", "addBuilderCustomizers", "setServerOption"]}, "repository": {"repo_id": 106404296, "url": "https://github.com/iMartinezMateu/gamecraft", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 6, "size": 2528, "license": "licensed"}}