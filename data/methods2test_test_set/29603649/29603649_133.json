{"test_class": {"identifier": "AppLogControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String JSON_NAME = \"files\";", "modifier": "private static final", "type": "String", "declarator": "JSON_NAME = \"files\"", "var_name": "JSON_NAME"}, {"original_string": "private static final String NOT_IMPORTANT = \"\";", "modifier": "private static final", "type": "String", "declarator": "NOT_IMPORTANT = \"\"", "var_name": "NOT_IMPORTANT"}, {"original_string": "private static final String CONTENT_DISPOSITION = \"Content-Disposition\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_DISPOSITION = \"Content-Disposition\"", "var_name": "CONTENT_DISPOSITION"}, {"original_string": "private static final String ATTACHMENT_TEMPLATE = \"attachment; filename=%s\";", "modifier": "private static final", "type": "String", "declarator": "ATTACHMENT_TEMPLATE = \"attachment; filename=%s\"", "var_name": "ATTACHMENT_TEMPLATE"}, {"original_string": "@Mock\n    private LogFileProvider logFileProvider;", "modifier": "@Mock\n    private", "type": "LogFileProvider", "declarator": "logFileProvider", "var_name": "logFileProvider"}, {"original_string": "@InjectMocks\n    private AppLogController underTest;", "modifier": "@InjectMocks\n    private", "type": "AppLogController", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-message-search/modules/wilma-message-search-webapp/src/test/java/com/epam/wilma/message/search/web/controller/AppLogControllerTest.java"}, "test_case": {"identifier": "testGetLogFilesShouldRespondWithLogFilesWithJsonName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetLogFilesShouldRespondWithLogFilesWithJsonName() {\n        //GIVEN\n        Map<String, Collection<String>> expected = new HashMap<>();\n        Collection<String> fileNames = new ArrayList<>();\n        fileNames.add(\"a\");\n        expected.put(JSON_NAME, fileNames);\n        given(logFileProvider.getLogFileNames()).willReturn(fileNames);\n        //WHEN\n        Map<String, Collection<String>> result = underTest.getLogFiles();\n        //THEN\n        assertEquals(expected, result);\n    }", "signature": "void testGetLogFilesShouldRespondWithLogFilesWithJsonName()", "full_signature": "@Test public void testGetLogFilesShouldRespondWithLogFilesWithJsonName()", "class_method_signature": "AppLogControllerTest.testGetLogFilesShouldRespondWithLogFilesWithJsonName()", "testcase": true, "constructor": false, "invocations": ["add", "put", "willReturn", "given", "getLogFileNames", "getLogFiles", "assertEquals"]}, "focal_class": {"identifier": "AppLogController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String JSON_NAME = \"files\";", "modifier": "private static final", "type": "String", "declarator": "JSON_NAME = \"files\"", "var_name": "JSON_NAME"}, {"original_string": "private static final String CONTENT_DISPOSITION = \"Content-Disposition\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_DISPOSITION = \"Content-Disposition\"", "var_name": "CONTENT_DISPOSITION"}, {"original_string": "private static final String ATTACHMENT_TEMPLATE = \"attachment; filename=%s\";", "modifier": "private static final", "type": "String", "declarator": "ATTACHMENT_TEMPLATE = \"attachment; filename=%s\"", "var_name": "ATTACHMENT_TEMPLATE"}, {"original_string": "@Autowired\n    private LogFileProvider logFileProvider;", "modifier": "@Autowired\n    private", "type": "LogFileProvider", "declarator": "logFileProvider", "var_name": "logFileProvider"}], "methods": [{"identifier": "applog", "parameters": "()", "modifiers": "@RequestMapping(value = \"/applog\", method = RequestMethod.GET) public", "return": "String", "signature": "String applog()", "full_signature": "@RequestMapping(value = \"/applog\", method = RequestMethod.GET) public String applog()", "class_method_signature": "AppLogController.applog()", "testcase": false, "constructor": false}, {"identifier": "getLogFiles", "parameters": "()", "modifiers": "@ResponseBody @RequestMapping(value = \"/logs\", method = {RequestMethod.GET, RequestMethod.POST}) public", "return": "Map<String, Collection<String>>", "signature": "Map<String, Collection<String>> getLogFiles()", "full_signature": "@ResponseBody @RequestMapping(value = \"/logs\", method = {RequestMethod.GET, RequestMethod.POST}) public Map<String, Collection<String>> getLogFiles()", "class_method_signature": "AppLogController.getLogFiles()", "testcase": false, "constructor": false}, {"identifier": "getLogFileContent", "parameters": "(@PathVariable(\"fileName\") final String fileName,\n            @RequestParam(value = \"source\", defaultValue = \"false\") final boolean source,\n            @RequestHeader(value = \"User-Agent\", defaultValue = \"\") final String userAgent)", "modifiers": "@RequestMapping(value = \"/logs/{fileName:.+}\", method = {RequestMethod.GET, RequestMethod.POST}) public", "return": "ResponseEntity<String>", "signature": "ResponseEntity<String> getLogFileContent(@PathVariable(\"fileName\") final String fileName,\n            @RequestParam(value = \"source\", defaultValue = \"false\") final boolean source,\n            @RequestHeader(value = \"User-Agent\", defaultValue = \"\") final String userAgent)", "full_signature": "@RequestMapping(value = \"/logs/{fileName:.+}\", method = {RequestMethod.GET, RequestMethod.POST}) public ResponseEntity<String> getLogFileContent(@PathVariable(\"fileName\") final String fileName,\n            @RequestParam(value = \"source\", defaultValue = \"false\") final boolean source,\n            @RequestHeader(value = \"User-Agent\", defaultValue = \"\") final String userAgent)", "class_method_signature": "AppLogController.getLogFileContent(@PathVariable(\"fileName\") final String fileName,\n            @RequestParam(value = \"source\", defaultValue = \"false\") final boolean source,\n            @RequestHeader(value = \"User-Agent\", defaultValue = \"\") final String userAgent)", "testcase": false, "constructor": false}, {"identifier": "convertLineBreaksIfOnWindows", "parameters": "(final String body, final String userAgent)", "modifiers": "private", "return": "String", "signature": "String convertLineBreaksIfOnWindows(final String body, final String userAgent)", "full_signature": "private String convertLineBreaksIfOnWindows(final String body, final String userAgent)", "class_method_signature": "AppLogController.convertLineBreaksIfOnWindows(final String body, final String userAgent)", "testcase": false, "constructor": false}, {"identifier": "userIsOnWindows", "parameters": "(final String userAgent)", "modifiers": "private", "return": "boolean", "signature": "boolean userIsOnWindows(final String userAgent)", "full_signature": "private boolean userIsOnWindows(final String userAgent)", "class_method_signature": "AppLogController.userIsOnWindows(final String userAgent)", "testcase": false, "constructor": false}], "file": "wilma-message-search/modules/wilma-message-search-webapp/src/main/java/com/epam/wilma/message/search/web/controller/AppLogController.java"}, "focal_method": {"identifier": "getLogFiles", "parameters": "()", "modifiers": "@ResponseBody @RequestMapping(value = \"/logs\", method = {RequestMethod.GET, RequestMethod.POST}) public", "return": "Map<String, Collection<String>>", "body": "@ResponseBody\n    @RequestMapping(value = \"/logs\", method = {RequestMethod.GET, RequestMethod.POST})\n    public Map<String, Collection<String>> getLogFiles() {\n        Map<String, Collection<String>> jsonResponse = new HashMap<>();\n        jsonResponse.put(JSON_NAME, logFileProvider.getLogFileNames());\n        return jsonResponse;\n    }", "signature": "Map<String, Collection<String>> getLogFiles()", "full_signature": "@ResponseBody @RequestMapping(value = \"/logs\", method = {RequestMethod.GET, RequestMethod.POST}) public Map<String, Collection<String>> getLogFiles()", "class_method_signature": "AppLogController.getLogFiles()", "testcase": false, "constructor": false, "invocations": ["put", "getLogFileNames"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}