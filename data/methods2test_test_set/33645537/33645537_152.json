{"test_class": {"identifier": "BinaryTreeInOrderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BinaryTreeInOrder binaryTreeInOrder;", "modifier": "private", "type": "BinaryTreeInOrder", "declarator": "binaryTreeInOrder", "var_name": "binaryTreeInOrder"}], "file": "algs/src/test/java/com/github/pedrovgs/problem15/BinaryTreeInOrderTest.java"}, "test_case": {"identifier": "shouldNotAcceptNullBinaryNodesRecursive", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void shouldNotAcceptNullBinaryNodesRecursive() {\n    binaryTreeInOrder.getRecursive(null);\n  }", "signature": "void shouldNotAcceptNullBinaryNodesRecursive()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullBinaryNodesRecursive()", "class_method_signature": "BinaryTreeInOrderTest.shouldNotAcceptNullBinaryNodesRecursive()", "testcase": true, "constructor": false, "invocations": ["getRecursive"]}, "focal_class": {"identifier": "BinaryTreeInOrder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getRecursive", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode<Integer>>", "signature": "List<BinaryNode<Integer>> getRecursive(BinaryNode root)", "full_signature": "public List<BinaryNode<Integer>> getRecursive(BinaryNode root)", "class_method_signature": "BinaryTreeInOrder.getRecursive(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getInner", "parameters": "(BinaryNode<Integer> root)", "modifiers": "private", "return": "List<BinaryNode<Integer>>", "signature": "List<BinaryNode<Integer>> getInner(BinaryNode<Integer> root)", "full_signature": "private List<BinaryNode<Integer>> getInner(BinaryNode<Integer> root)", "class_method_signature": "BinaryTreeInOrder.getInner(BinaryNode<Integer> root)", "testcase": false, "constructor": false}, {"identifier": "getIterative", "parameters": "(BinaryNode<Integer> root)", "modifiers": "public", "return": "List<BinaryNode<Integer>>", "signature": "List<BinaryNode<Integer>> getIterative(BinaryNode<Integer> root)", "full_signature": "public List<BinaryNode<Integer>> getIterative(BinaryNode<Integer> root)", "class_method_signature": "BinaryTreeInOrder.getIterative(BinaryNode<Integer> root)", "testcase": false, "constructor": false}, {"identifier": "validateBinaryNode", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "void", "signature": "void validateBinaryNode(BinaryNode root)", "full_signature": "private void validateBinaryNode(BinaryNode root)", "class_method_signature": "BinaryTreeInOrder.validateBinaryNode(BinaryNode root)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem15/BinaryTreeInOrder.java"}, "focal_method": {"identifier": "getRecursive", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode<Integer>>", "body": "public List<BinaryNode<Integer>> getRecursive(BinaryNode root) {\n    validateBinaryNode(root);\n\n    return getInner(root);\n  }", "signature": "List<BinaryNode<Integer>> getRecursive(BinaryNode root)", "full_signature": "public List<BinaryNode<Integer>> getRecursive(BinaryNode root)", "class_method_signature": "BinaryTreeInOrder.getRecursive(BinaryNode root)", "testcase": false, "constructor": false, "invocations": ["validateBinaryNode", "getInner"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}