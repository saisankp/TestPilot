{"test_class": {"identifier": "DynamoDBStatusCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private DynamoDBClientFetcher dynamoDBClientFetcher;", "modifier": "@Mock private", "type": "DynamoDBClientFetcher", "declarator": "dynamoDBClientFetcher", "var_name": "dynamoDBClientFetcher"}, {"original_string": "@Mock private AmazonDynamoDB amazonDynamoDB;", "modifier": "@Mock private", "type": "AmazonDynamoDB", "declarator": "amazonDynamoDB", "var_name": "amazonDynamoDB"}, {"original_string": "@Mock private AWSCredentialsProviderImpl awsCredentialsProvider;", "modifier": "@Mock private", "type": "AWSCredentialsProviderImpl", "declarator": "awsCredentialsProvider", "var_name": "awsCredentialsProvider"}, {"original_string": "@Mock private ListTablesResult listTablesResult;", "modifier": "@Mock private", "type": "ListTablesResult", "declarator": "listTablesResult", "var_name": "listTablesResult"}, {"original_string": "@Mock private PrivateKeyStore keyStore;", "modifier": "@Mock private", "type": "PrivateKeyStore", "declarator": "keyStore", "var_name": "keyStore"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/DynamoDBStatusCheckerTest.java"}, "test_case": {"identifier": "testClientNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClientNull() throws IOException {\n        String tableName = \"testTable\";\n        // Mock getting client failed (returns null)\n        when(dynamoDBClientFetcher.getDynamoDBClient(any(), any())).thenReturn(null);\n        DynamoDBStatusCheckerTestClass dynamoDBStatusChecker = new DynamoDBStatusCheckerTestClass(tableName);\n\n        try {\n            dynamoDBStatusChecker.check();\n            fail();\n        } catch (StatusCheckException ex) {\n            assertNull(ex.getMessage());\n            assertEquals(500, ex.getCode());\n        }\n\n        Mockito.verify(amazonDynamoDB, times(0)).shutdown();\n        Mockito.verify(awsCredentialsProvider, times(0)).close();\n    }", "signature": "void testClientNull()", "full_signature": "@Test public void testClientNull()", "class_method_signature": "DynamoDBStatusCheckerTest.testClientNull()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getDynamoDBClient", "any", "any", "check", "fail", "assertNull", "getMessage", "assertEquals", "getCode", "shutdown", "verify", "times", "close", "verify", "times"]}, "focal_class": {"identifier": "DynamoDBStatusChecker", "superclass": "", "interfaces": "implements StatusChecker", "fields": [{"original_string": "private final String tableName;", "modifier": "private final", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "private final PrivateKeyStore keyStore;", "modifier": "private final", "type": "PrivateKeyStore", "declarator": "keyStore", "var_name": "keyStore"}], "methods": [{"identifier": "DynamoDBStatusChecker", "parameters": "(String tableName, PrivateKeyStore keyStore)", "modifiers": "public", "return": "", "signature": " DynamoDBStatusChecker(String tableName, PrivateKeyStore keyStore)", "full_signature": "public  DynamoDBStatusChecker(String tableName, PrivateKeyStore keyStore)", "class_method_signature": "DynamoDBStatusChecker.DynamoDBStatusChecker(String tableName, PrivateKeyStore keyStore)", "testcase": false, "constructor": true}, {"identifier": "check", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void check()", "full_signature": "@Override public void check()", "class_method_signature": "DynamoDBStatusChecker.check()", "testcase": false, "constructor": false}, {"identifier": "getDynamoDBClientFetcher", "parameters": "()", "modifiers": "", "return": "DynamoDBClientFetcher", "signature": "DynamoDBClientFetcher getDynamoDBClientFetcher()", "full_signature": " DynamoDBClientFetcher getDynamoDBClientFetcher()", "class_method_signature": "DynamoDBStatusChecker.getDynamoDBClientFetcher()", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBStatusChecker.java"}, "focal_method": {"identifier": "check", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void check() throws StatusCheckException {\n        DynamoDBClientAndCredentials clientAndCreds = null;\n        try {\n            // Get DynamoDB client and temp credentials (if required)\n            DynamoDBClientFetcher dynamoDBClientFetcher = getDynamoDBClientFetcher();\n            clientAndCreds = dynamoDBClientFetcher.getDynamoDBClient(null, keyStore);\n            AmazonDynamoDB amazonDynamoDB = clientAndCreds.getAmazonDynamoDB();\n\n            // Get list of tables and verify our table appears\n            boolean tableFound = amazonDynamoDB.listTables().getTableNames().stream()\n                    .anyMatch(fetchedTableName -> fetchedTableName.equals(tableName));\n\n            if (!tableFound) {\n                throw new StatusCheckException(HttpStatus.SC_OK, \"Table named \" + tableName + \" wasn't found in DynamoDB\");\n            }\n        } catch (StatusCheckException ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new StatusCheckException(ex);\n        } finally {\n            // Close resources\n            if (clientAndCreds != null) {\n                try {\n                    if (clientAndCreds.getAmazonDynamoDB() != null) {\n                        clientAndCreds.getAmazonDynamoDB().shutdown();\n                    }\n                    if (clientAndCreds.getAwsCredentialsProvider() != null) {\n                        clientAndCreds.getAwsCredentialsProvider().close();\n                    }\n                } catch (IOException ignored) {\n\n                }\n            }\n        }\n    }", "signature": "void check()", "full_signature": "@Override public void check()", "class_method_signature": "DynamoDBStatusChecker.check()", "testcase": false, "constructor": false, "invocations": ["getDynamoDBClientFetcher", "getDynamoDBClient", "getAmazonDynamoDB", "anyMatch", "stream", "getTableNames", "listTables", "equals", "getAmazonDynamoDB", "shutdown", "getAmazonDynamoDB", "getAwsCredentialsProvider", "close", "getAwsCredentialsProvider"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}