{"test_class": {"identifier": "IOUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String TEXT = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\";", "modifier": "private static", "type": "String", "declarator": "TEXT = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\"", "var_name": "TEXT"}, {"original_string": "private InputStream is;", "modifier": "private", "type": "InputStream", "declarator": "is", "var_name": "is"}, {"original_string": "private OutputStream os;", "modifier": "private", "type": "OutputStream", "declarator": "os", "var_name": "os"}, {"original_string": "private Reader reader;", "modifier": "private", "type": "Reader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private Writer writer;", "modifier": "private", "type": "Writer", "declarator": "writer", "var_name": "writer"}], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/IOUtilsTest.java"}, "test_case": {"identifier": "testWriteLines", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteLines() throws Exception {\n        IOUtils.writeLines(os, new String[]{TEXT});\n        ByteArrayOutputStream bos = (ByteArrayOutputStream) os;\n        assertThat(new String(bos.toByteArray()), equalTo(TEXT + System.lineSeparator()));\n    }", "signature": "void testWriteLines()", "full_signature": "@Test public void testWriteLines()", "class_method_signature": "IOUtilsTest.testWriteLines()", "testcase": true, "constructor": false, "invocations": ["writeLines", "assertThat", "toByteArray", "equalTo", "lineSeparator"]}, "focal_class": {"identifier": "IOUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int BUFFER_SIZE = 1024 * 8;", "modifier": "private static final", "type": "int", "declarator": "BUFFER_SIZE = 1024 * 8", "var_name": "BUFFER_SIZE"}, {"original_string": "public static final int EOF = -1;", "modifier": "public static final", "type": "int", "declarator": "EOF = -1", "var_name": "EOF"}], "methods": [{"identifier": "IOUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " IOUtils()", "full_signature": "private  IOUtils()", "class_method_signature": "IOUtils.IOUtils()", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(InputStream is, OutputStream os)", "modifiers": "public static", "return": "long", "signature": "long write(InputStream is, OutputStream os)", "full_signature": "public static long write(InputStream is, OutputStream os)", "class_method_signature": "IOUtils.write(InputStream is, OutputStream os)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(InputStream is, OutputStream os, int bufferSize)", "modifiers": "public static", "return": "long", "signature": "long write(InputStream is, OutputStream os, int bufferSize)", "full_signature": "public static long write(InputStream is, OutputStream os, int bufferSize)", "class_method_signature": "IOUtils.write(InputStream is, OutputStream os, int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final InputStream input, final OutputStream output, final byte[] buffer)", "modifiers": "public static", "return": "long", "signature": "long write(final InputStream input, final OutputStream output, final byte[] buffer)", "full_signature": "public static long write(final InputStream input, final OutputStream output, final byte[] buffer)", "class_method_signature": "IOUtils.write(final InputStream input, final OutputStream output, final byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(Reader reader)", "modifiers": "public static", "return": "String", "signature": "String read(Reader reader)", "full_signature": "public static String read(Reader reader)", "class_method_signature": "IOUtils.read(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Writer writer, String string)", "modifiers": "public static", "return": "long", "signature": "long write(Writer writer, String string)", "full_signature": "public static long write(Writer writer, String string)", "class_method_signature": "IOUtils.write(Writer writer, String string)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Reader reader, Writer writer)", "modifiers": "public static", "return": "long", "signature": "long write(Reader reader, Writer writer)", "full_signature": "public static long write(Reader reader, Writer writer)", "class_method_signature": "IOUtils.write(Reader reader, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Reader reader, Writer writer, int bufferSize)", "modifiers": "public static", "return": "long", "signature": "long write(Reader reader, Writer writer, int bufferSize)", "full_signature": "public static long write(Reader reader, Writer writer, int bufferSize)", "class_method_signature": "IOUtils.write(Reader reader, Writer writer, int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "readLines", "parameters": "(File file)", "modifiers": "public static", "return": "String[]", "signature": "String[] readLines(File file)", "full_signature": "public static String[] readLines(File file)", "class_method_signature": "IOUtils.readLines(File file)", "testcase": false, "constructor": false}, {"identifier": "readLines", "parameters": "(InputStream is)", "modifiers": "public static", "return": "String[]", "signature": "String[] readLines(InputStream is)", "full_signature": "public static String[] readLines(InputStream is)", "class_method_signature": "IOUtils.readLines(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "writeLines", "parameters": "(OutputStream os, String[] lines)", "modifiers": "public static", "return": "void", "signature": "void writeLines(OutputStream os, String[] lines)", "full_signature": "public static void writeLines(OutputStream os, String[] lines)", "class_method_signature": "IOUtils.writeLines(OutputStream os, String[] lines)", "testcase": false, "constructor": false}, {"identifier": "writeLines", "parameters": "(File file, String[] lines)", "modifiers": "public static", "return": "void", "signature": "void writeLines(File file, String[] lines)", "full_signature": "public static void writeLines(File file, String[] lines)", "class_method_signature": "IOUtils.writeLines(File file, String[] lines)", "testcase": false, "constructor": false}, {"identifier": "appendLines", "parameters": "(File file, String[] lines)", "modifiers": "public static", "return": "void", "signature": "void appendLines(File file, String[] lines)", "full_signature": "public static void appendLines(File file, String[] lines)", "class_method_signature": "IOUtils.appendLines(File file, String[] lines)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java"}, "focal_method": {"identifier": "writeLines", "parameters": "(OutputStream os, String[] lines)", "modifiers": "public static", "return": "void", "body": "public static void writeLines(OutputStream os, String[] lines) throws IOException {\n        try (PrintWriter writer = new PrintWriter(new OutputStreamWriter(os))) {\n            for (String line : lines) {\n                writer.println(line);\n            }\n            writer.flush();\n        }\n    }", "signature": "void writeLines(OutputStream os, String[] lines)", "full_signature": "public static void writeLines(OutputStream os, String[] lines)", "class_method_signature": "IOUtils.writeLines(OutputStream os, String[] lines)", "testcase": false, "constructor": false, "invocations": ["println", "flush"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}