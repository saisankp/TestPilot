{"test_class": {"identifier": "OntologyRepositoryCacheTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private OntologyRepositoryCache cache;", "modifier": "private", "type": "OntologyRepositoryCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private OrmFactory<Dataset> datasetFactory = getRequiredOrmFactory(Dataset.class);", "modifier": "private", "type": "OrmFactory<Dataset>", "declarator": "datasetFactory = getRequiredOrmFactory(Dataset.class)", "var_name": "datasetFactory"}, {"original_string": "private IRI timestampIRI;", "modifier": "private", "type": "IRI", "declarator": "timestampIRI", "var_name": "timestampIRI"}, {"original_string": "private Model ontNoImportsModel;", "modifier": "private", "type": "Model", "declarator": "ontNoImportsModel", "var_name": "ontNoImportsModel"}, {"original_string": "private Model ontOneImportModel;", "modifier": "private", "type": "Model", "declarator": "ontOneImportModel", "var_name": "ontOneImportModel"}, {"original_string": "private Model ontMultipleImportsModel;", "modifier": "private", "type": "Model", "declarator": "ontMultipleImportsModel", "var_name": "ontMultipleImportsModel"}, {"original_string": "private Model import1Model;", "modifier": "private", "type": "Model", "declarator": "import1Model", "var_name": "import1Model"}, {"original_string": "private Model import2Model;", "modifier": "private", "type": "Model", "declarator": "import2Model", "var_name": "import2Model"}, {"original_string": "private Model import3Model;", "modifier": "private", "type": "Model", "declarator": "import3Model", "var_name": "import3Model"}, {"original_string": "private IRI ontNoImportsIRI;", "modifier": "private", "type": "IRI", "declarator": "ontNoImportsIRI", "var_name": "ontNoImportsIRI"}, {"original_string": "private IRI ontOneImportIRI;", "modifier": "private", "type": "IRI", "declarator": "ontOneImportIRI", "var_name": "ontOneImportIRI"}, {"original_string": "private IRI ontMultipleImportsIRI;", "modifier": "private", "type": "IRI", "declarator": "ontMultipleImportsIRI", "var_name": "ontMultipleImportsIRI"}, {"original_string": "private IRI import1IRI;", "modifier": "private", "type": "IRI", "declarator": "import1IRI", "var_name": "import1IRI"}, {"original_string": "private IRI import2IRI;", "modifier": "private", "type": "IRI", "declarator": "import2IRI", "var_name": "import2IRI"}, {"original_string": "private IRI import3IRI;", "modifier": "private", "type": "IRI", "declarator": "import3IRI", "var_name": "import3IRI"}, {"original_string": "private IRI ontNoImportsSdNgIRI;", "modifier": "private", "type": "IRI", "declarator": "ontNoImportsSdNgIRI", "var_name": "ontNoImportsSdNgIRI"}, {"original_string": "private IRI ontOneImportSdNgIRI;", "modifier": "private", "type": "IRI", "declarator": "ontOneImportSdNgIRI", "var_name": "ontOneImportSdNgIRI"}, {"original_string": "private IRI ontMultipleImportsSdNgIRI;", "modifier": "private", "type": "IRI", "declarator": "ontMultipleImportsSdNgIRI", "var_name": "ontMultipleImportsSdNgIRI"}, {"original_string": "private IRI import1SdNgIRI;", "modifier": "private", "type": "IRI", "declarator": "import1SdNgIRI", "var_name": "import1SdNgIRI"}, {"original_string": "private IRI import2SdNgIRI;", "modifier": "private", "type": "IRI", "declarator": "import2SdNgIRI", "var_name": "import2SdNgIRI"}, {"original_string": "private IRI import3SdNgIRI;", "modifier": "private", "type": "IRI", "declarator": "import3SdNgIRI", "var_name": "import3SdNgIRI"}, {"original_string": "private String key1;", "modifier": "private", "type": "String", "declarator": "key1", "var_name": "key1"}, {"original_string": "private String key2;", "modifier": "private", "type": "String", "declarator": "key2", "var_name": "key2"}, {"original_string": "private String key3;", "modifier": "private", "type": "String", "declarator": "key3", "var_name": "key3"}, {"original_string": "private static final String SYSTEM_DEFAULT_NG_SUFFIX = \"_system_dng\";", "modifier": "private static final", "type": "String", "declarator": "SYSTEM_DEFAULT_NG_SUFFIX = \"_system_dng\"", "var_name": "SYSTEM_DEFAULT_NG_SUFFIX"}, {"original_string": "@Mock\n    private Ontology ontNoImports;", "modifier": "@Mock\n    private", "type": "Ontology", "declarator": "ontNoImports", "var_name": "ontNoImports"}, {"original_string": "@Mock\n    private Ontology ontOneImport;", "modifier": "@Mock\n    private", "type": "Ontology", "declarator": "ontOneImport", "var_name": "ontOneImport"}, {"original_string": "@Mock\n    private Ontology ontMultipleImports;", "modifier": "@Mock\n    private", "type": "Ontology", "declarator": "ontMultipleImports", "var_name": "ontMultipleImports"}, {"original_string": "@Mock\n    private Ontology import1;", "modifier": "@Mock\n    private", "type": "Ontology", "declarator": "import1", "var_name": "import1"}, {"original_string": "@Mock\n    private Ontology import2;", "modifier": "@Mock\n    private", "type": "Ontology", "declarator": "import2", "var_name": "import2"}, {"original_string": "@Mock\n    private Ontology import3;", "modifier": "@Mock\n    private", "type": "Ontology", "declarator": "import3", "var_name": "import3"}, {"original_string": "@Mock\n    private OntologyId ontIdNoImports;", "modifier": "@Mock\n    private", "type": "OntologyId", "declarator": "ontIdNoImports", "var_name": "ontIdNoImports"}, {"original_string": "@Mock\n    private OntologyId ontIdOneImport;", "modifier": "@Mock\n    private", "type": "OntologyId", "declarator": "ontIdOneImport", "var_name": "ontIdOneImport"}, {"original_string": "@Mock\n    private OntologyId ontIdMultipleImports;", "modifier": "@Mock\n    private", "type": "OntologyId", "declarator": "ontIdMultipleImports", "var_name": "ontIdMultipleImports"}, {"original_string": "@Mock\n    private OntologyId import1Id;", "modifier": "@Mock\n    private", "type": "OntologyId", "declarator": "import1Id", "var_name": "import1Id"}, {"original_string": "@Mock\n    private OntologyId import2Id;", "modifier": "@Mock\n    private", "type": "OntologyId", "declarator": "import2Id", "var_name": "import2Id"}, {"original_string": "@Mock\n    private OntologyId import3Id;", "modifier": "@Mock\n    private", "type": "OntologyId", "declarator": "import3Id", "var_name": "import3Id"}, {"original_string": "@Mock\n    private RepositoryConfig repositoryConfig;", "modifier": "@Mock\n    private", "type": "RepositoryConfig", "declarator": "repositoryConfig", "var_name": "repositoryConfig"}, {"original_string": "@Mock\n    private SesameTransformer sesameTransformer;", "modifier": "@Mock\n    private", "type": "SesameTransformer", "declarator": "sesameTransformer", "var_name": "sesameTransformer"}, {"original_string": "@Mock\n    private OntologyManager ontologyManager;", "modifier": "@Mock\n    private", "type": "OntologyManager", "declarator": "ontologyManager", "var_name": "ontologyManager"}, {"original_string": "@Mock\n    private CacheManager cacheManager;", "modifier": "@Mock\n    private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "@Mock\n    private DatasetManager datasetManager;", "modifier": "@Mock\n    private", "type": "DatasetManager", "declarator": "datasetManager", "var_name": "datasetManager"}, {"original_string": "@Mock\n    private Configuration configuration;", "modifier": "@Mock\n    private", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}], "file": "com.mobi.cache.impl.repository/src/test/java/com/mobi/cache/impl/repository/jcache/OntologyRepositoryCacheTest.java"}, "test_case": {"identifier": "invokeAllTest", "parameters": "()", "modifiers": "@Test(expected = UnsupportedOperationException.class) public", "return": "void", "body": "@Test(expected = UnsupportedOperationException.class)\n    public void invokeAllTest() {\n        cache.invokeAll(null, null, null, null, null);\n    }", "signature": "void invokeAllTest()", "full_signature": "@Test(expected = UnsupportedOperationException.class) public void invokeAllTest()", "class_method_signature": "OntologyRepositoryCacheTest.invokeAllTest()", "testcase": true, "constructor": false, "invocations": ["invokeAll"]}, "focal_class": {"identifier": "OntologyRepositoryCache", "superclass": "extends AbstractDatasetRepositoryCache<String, Ontology>", "interfaces": "", "fields": [{"original_string": "private final Logger LOG = LoggerFactory.getLogger(OntologyRepositoryCache.class);", "modifier": "private final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(OntologyRepositoryCache.class)", "var_name": "LOG"}, {"original_string": "private OntologyManager ontologyManager;", "modifier": "private", "type": "OntologyManager", "declarator": "ontologyManager", "var_name": "ontologyManager"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final CacheManager cacheManager;", "modifier": "private final", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "private final Configuration configuration;", "modifier": "private final", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private volatile boolean closed;", "modifier": "private volatile", "type": "boolean", "declarator": "closed", "var_name": "closed"}], "methods": [{"identifier": "OntologyRepositoryCache", "parameters": "(String name, Repository repository, CacheManager cacheManager,\n                                   Configuration configuration)", "modifiers": "public", "return": "", "signature": " OntologyRepositoryCache(String name, Repository repository, CacheManager cacheManager,\n                                   Configuration configuration)", "full_signature": "public  OntologyRepositoryCache(String name, Repository repository, CacheManager cacheManager,\n                                   Configuration configuration)", "class_method_signature": "OntologyRepositoryCache.OntologyRepositoryCache(String name, Repository repository, CacheManager cacheManager,\n                                   Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "setOntologyManager", "parameters": "(OntologyManager ontologyManager)", "modifiers": "public", "return": "void", "signature": "void setOntologyManager(OntologyManager ontologyManager)", "full_signature": "public void setOntologyManager(OntologyManager ontologyManager)", "class_method_signature": "OntologyRepositoryCache.setOntologyManager(OntologyManager ontologyManager)", "testcase": false, "constructor": false}, {"identifier": "setValueFactory", "parameters": "(ValueFactory vf)", "modifiers": "public", "return": "void", "signature": "void setValueFactory(ValueFactory vf)", "full_signature": "public void setValueFactory(ValueFactory vf)", "class_method_signature": "OntologyRepositoryCache.setValueFactory(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setModelFactory", "parameters": "(ModelFactory mf)", "modifiers": "public", "return": "void", "signature": "void setModelFactory(ModelFactory mf)", "full_signature": "public void setModelFactory(ModelFactory mf)", "class_method_signature": "OntologyRepositoryCache.setModelFactory(ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "setDatasetFactory", "parameters": "(DatasetFactory datasetFactory)", "modifiers": "public", "return": "void", "signature": "void setDatasetFactory(DatasetFactory datasetFactory)", "full_signature": "public void setDatasetFactory(DatasetFactory datasetFactory)", "class_method_signature": "OntologyRepositoryCache.setDatasetFactory(DatasetFactory datasetFactory)", "testcase": false, "constructor": false}, {"identifier": "setDatasetManager", "parameters": "(DatasetManager datasetManager)", "modifiers": "public", "return": "void", "signature": "void setDatasetManager(DatasetManager datasetManager)", "full_signature": "public void setDatasetManager(DatasetManager datasetManager)", "class_method_signature": "OntologyRepositoryCache.setDatasetManager(DatasetManager datasetManager)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "@Override public", "return": "Ontology", "signature": "Ontology get(String key)", "full_signature": "@Override public Ontology get(String key)", "class_method_signature": "OntologyRepositoryCache.get(String key)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "(Set<? extends String> keys)", "modifiers": "@Override public", "return": "Map<String, Ontology>", "signature": "Map<String, Ontology> getAll(Set<? extends String> keys)", "full_signature": "@Override public Map<String, Ontology> getAll(Set<? extends String> keys)", "class_method_signature": "OntologyRepositoryCache.getAll(Set<? extends String> keys)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(String key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(String key)", "full_signature": "@Override public boolean containsKey(String key)", "class_method_signature": "OntologyRepositoryCache.containsKey(String key)", "testcase": false, "constructor": false}, {"identifier": "loadAll", "parameters": "(Set<? extends String> keys, boolean replaceExistingValues,\n                        CompletionListener completionListener)", "modifiers": "@Override public", "return": "void", "signature": "void loadAll(Set<? extends String> keys, boolean replaceExistingValues,\n                        CompletionListener completionListener)", "full_signature": "@Override public void loadAll(Set<? extends String> keys, boolean replaceExistingValues,\n                        CompletionListener completionListener)", "class_method_signature": "OntologyRepositoryCache.loadAll(Set<? extends String> keys, boolean replaceExistingValues,\n                        CompletionListener completionListener)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, Ontology ontology)", "modifiers": "@Override public", "return": "void", "signature": "void put(String key, Ontology ontology)", "full_signature": "@Override public void put(String key, Ontology ontology)", "class_method_signature": "OntologyRepositoryCache.put(String key, Ontology ontology)", "testcase": false, "constructor": false}, {"identifier": "getAndPut", "parameters": "(String key, Ontology ontology)", "modifiers": "@Override public", "return": "Ontology", "signature": "Ontology getAndPut(String key, Ontology ontology)", "full_signature": "@Override public Ontology getAndPut(String key, Ontology ontology)", "class_method_signature": "OntologyRepositoryCache.getAndPut(String key, Ontology ontology)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(Map<? extends String, ? extends Ontology> map)", "modifiers": "@Override public", "return": "void", "signature": "void putAll(Map<? extends String, ? extends Ontology> map)", "full_signature": "@Override public void putAll(Map<? extends String, ? extends Ontology> map)", "class_method_signature": "OntologyRepositoryCache.putAll(Map<? extends String, ? extends Ontology> map)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(String key, Ontology ontology)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean putIfAbsent(String key, Ontology ontology)", "full_signature": "@Override public boolean putIfAbsent(String key, Ontology ontology)", "class_method_signature": "OntologyRepositoryCache.putIfAbsent(String key, Ontology ontology)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(String key)", "full_signature": "@Override public boolean remove(String key)", "class_method_signature": "OntologyRepositoryCache.remove(String key)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String key, Ontology ontology)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(String key, Ontology ontology)", "full_signature": "@Override public boolean remove(String key, Ontology ontology)", "class_method_signature": "OntologyRepositoryCache.remove(String key, Ontology ontology)", "testcase": false, "constructor": false}, {"identifier": "getAndRemove", "parameters": "(String key)", "modifiers": "@Override public", "return": "Ontology", "signature": "Ontology getAndRemove(String key)", "full_signature": "@Override public Ontology getAndRemove(String key)", "class_method_signature": "OntologyRepositoryCache.getAndRemove(String key)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String key, Ontology ontology, Ontology newOntology)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean replace(String key, Ontology ontology, Ontology newOntology)", "full_signature": "@Override public boolean replace(String key, Ontology ontology, Ontology newOntology)", "class_method_signature": "OntologyRepositoryCache.replace(String key, Ontology ontology, Ontology newOntology)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String key, Ontology ontology)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean replace(String key, Ontology ontology)", "full_signature": "@Override public boolean replace(String key, Ontology ontology)", "class_method_signature": "OntologyRepositoryCache.replace(String key, Ontology ontology)", "testcase": false, "constructor": false}, {"identifier": "getAndReplace", "parameters": "(String key, Ontology ontology)", "modifiers": "@Override public", "return": "Ontology", "signature": "Ontology getAndReplace(String key, Ontology ontology)", "full_signature": "@Override public Ontology getAndReplace(String key, Ontology ontology)", "class_method_signature": "OntologyRepositoryCache.getAndReplace(String key, Ontology ontology)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Set<? extends String> set)", "modifiers": "@Override public", "return": "void", "signature": "void removeAll(Set<? extends String> set)", "full_signature": "@Override public void removeAll(Set<? extends String> set)", "class_method_signature": "OntologyRepositoryCache.removeAll(Set<? extends String> set)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeAll()", "full_signature": "@Override public void removeAll()", "class_method_signature": "OntologyRepositoryCache.removeAll()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "OntologyRepositoryCache.clear()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "(Class<C> clazz)", "modifiers": "@Override public", "return": "C", "signature": "C getConfiguration(Class<C> clazz)", "full_signature": "@Override public C getConfiguration(Class<C> clazz)", "class_method_signature": "OntologyRepositoryCache.getConfiguration(Class<C> clazz)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(String key, EntryProcessor<String, Ontology, T> entryProcessor, Object... objects)", "modifiers": "@Override public", "return": "T", "signature": "T invoke(String key, EntryProcessor<String, Ontology, T> entryProcessor, Object... objects)", "full_signature": "@Override public T invoke(String key, EntryProcessor<String, Ontology, T> entryProcessor, Object... objects)", "class_method_signature": "OntologyRepositoryCache.invoke(String key, EntryProcessor<String, Ontology, T> entryProcessor, Object... objects)", "testcase": false, "constructor": false}, {"identifier": "invokeAll", "parameters": "(Set<? extends String> set,\n                                                              EntryProcessor<String, Ontology, T> entryProcessor,\n                                                              Object... objects)", "modifiers": "@Override public", "return": "Map<String, EntryProcessorResult<T>>", "signature": "Map<String, EntryProcessorResult<T>> invokeAll(Set<? extends String> set,\n                                                              EntryProcessor<String, Ontology, T> entryProcessor,\n                                                              Object... objects)", "full_signature": "@Override public Map<String, EntryProcessorResult<T>> invokeAll(Set<? extends String> set,\n                                                              EntryProcessor<String, Ontology, T> entryProcessor,\n                                                              Object... objects)", "class_method_signature": "OntologyRepositoryCache.invokeAll(Set<? extends String> set,\n                                                              EntryProcessor<String, Ontology, T> entryProcessor,\n                                                              Object... objects)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "OntologyRepositoryCache.getName()", "testcase": false, "constructor": false}, {"identifier": "getCacheManager", "parameters": "()", "modifiers": "@Override public", "return": "CacheManager", "signature": "CacheManager getCacheManager()", "full_signature": "@Override public CacheManager getCacheManager()", "class_method_signature": "OntologyRepositoryCache.getCacheManager()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "OntologyRepositoryCache.close()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "@Override public boolean isClosed()", "class_method_signature": "OntologyRepositoryCache.isClosed()", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "(Class<T> clazz)", "modifiers": "@Override public", "return": "T", "signature": "T unwrap(Class<T> clazz)", "full_signature": "@Override public T unwrap(Class<T> clazz)", "class_method_signature": "OntologyRepositoryCache.unwrap(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "registerCacheEntryListener", "parameters": "(CacheEntryListenerConfiguration<String,\n            Ontology> cacheEntryListenerConfiguration)", "modifiers": "@Override public", "return": "void", "signature": "void registerCacheEntryListener(CacheEntryListenerConfiguration<String,\n            Ontology> cacheEntryListenerConfiguration)", "full_signature": "@Override public void registerCacheEntryListener(CacheEntryListenerConfiguration<String,\n            Ontology> cacheEntryListenerConfiguration)", "class_method_signature": "OntologyRepositoryCache.registerCacheEntryListener(CacheEntryListenerConfiguration<String,\n            Ontology> cacheEntryListenerConfiguration)", "testcase": false, "constructor": false}, {"identifier": "deregisterCacheEntryListener", "parameters": "(CacheEntryListenerConfiguration<String,\n            Ontology> cacheEntryListenerConfiguration)", "modifiers": "@Override public", "return": "void", "signature": "void deregisterCacheEntryListener(CacheEntryListenerConfiguration<String,\n            Ontology> cacheEntryListenerConfiguration)", "full_signature": "@Override public void deregisterCacheEntryListener(CacheEntryListenerConfiguration<String,\n            Ontology> cacheEntryListenerConfiguration)", "class_method_signature": "OntologyRepositoryCache.deregisterCacheEntryListener(CacheEntryListenerConfiguration<String,\n            Ontology> cacheEntryListenerConfiguration)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Cache.Entry<String, Ontology>>", "signature": "Iterator<Cache.Entry<String, Ontology>> iterator()", "full_signature": "@Override public Iterator<Cache.Entry<String, Ontology>> iterator()", "class_method_signature": "OntologyRepositoryCache.iterator()", "testcase": false, "constructor": false}, {"identifier": "getValueFromRepo", "parameters": "(DatasetConnection dsConn, String key)", "modifiers": "private", "return": "Ontology", "signature": "Ontology getValueFromRepo(DatasetConnection dsConn, String key)", "full_signature": "private Ontology getValueFromRepo(DatasetConnection dsConn, String key)", "class_method_signature": "OntologyRepositoryCache.getValueFromRepo(DatasetConnection dsConn, String key)", "testcase": false, "constructor": false}, {"identifier": "putValueInRepo", "parameters": "(Ontology ontology, IRI ontNamedGraphIRI, DatasetConnection dsConn)", "modifiers": "private", "return": "void", "signature": "void putValueInRepo(Ontology ontology, IRI ontNamedGraphIRI, DatasetConnection dsConn)", "full_signature": "private void putValueInRepo(Ontology ontology, IRI ontNamedGraphIRI, DatasetConnection dsConn)", "class_method_signature": "OntologyRepositoryCache.putValueInRepo(Ontology ontology, IRI ontNamedGraphIRI, DatasetConnection dsConn)", "testcase": false, "constructor": false}, {"identifier": "removeValueFromRepo", "parameters": "(IRI datasetIRI)", "modifiers": "private", "return": "boolean", "signature": "boolean removeValueFromRepo(IRI datasetIRI)", "full_signature": "private boolean removeValueFromRepo(IRI datasetIRI)", "class_method_signature": "OntologyRepositoryCache.removeValueFromRepo(IRI datasetIRI)", "testcase": false, "constructor": false}, {"identifier": "cacheEntryFor", "parameters": "(K key, V value)", "modifiers": "private static", "return": "Cache.Entry<K, V>", "signature": "Cache.Entry<K, V> cacheEntryFor(K key, V value)", "full_signature": "private static Cache.Entry<K, V> cacheEntryFor(K key, V value)", "class_method_signature": "OntologyRepositoryCache.cacheEntryFor(K key, V value)", "testcase": false, "constructor": false}], "file": "com.mobi.cache.impl.repository/src/main/java/com/mobi/cache/impl/repository/jcache/OntologyRepositoryCache.java"}, "focal_method": {"identifier": "invokeAll", "parameters": "(Set<? extends String> set,\n                                                              EntryProcessor<String, Ontology, T> entryProcessor,\n                                                              Object... objects)", "modifiers": "@Override public", "return": "Map<String, EntryProcessorResult<T>>", "body": "@Override\n    public <T> Map<String, EntryProcessorResult<T>> invokeAll(Set<? extends String> set,\n                                                              EntryProcessor<String, Ontology, T> entryProcessor,\n                                                              Object... objects) {\n        throw new UnsupportedOperationException(\"Invoke not supported in implementation.\");\n    }", "signature": "Map<String, EntryProcessorResult<T>> invokeAll(Set<? extends String> set,\n                                                              EntryProcessor<String, Ontology, T> entryProcessor,\n                                                              Object... objects)", "full_signature": "@Override public Map<String, EntryProcessorResult<T>> invokeAll(Set<? extends String> set,\n                                                              EntryProcessor<String, Ontology, T> entryProcessor,\n                                                              Object... objects)", "class_method_signature": "OntologyRepositoryCache.invokeAll(Set<? extends String> set,\n                                                              EntryProcessor<String, Ontology, T> entryProcessor,\n                                                              Object... objects)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}