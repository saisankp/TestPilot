{"test_class": {"identifier": "FixBondOrdersToolTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private static FixBondOrdersTool fbot;", "modifier": "private static", "type": "FixBondOrdersTool", "declarator": "fbot", "var_name": "fbot"}], "file": "legacy/src/test/java/org/openscience/cdk/smiles/FixBondOrdersToolTest.java"}, "test_case": {"identifier": "testPyrrole_Silent", "parameters": "()", "modifiers": "@Test(timeout = 1000) public", "return": "void", "body": "@Test(timeout = 1000)\n    public void testPyrrole_Silent() throws Exception {\n        String smiles = \"c2ccc3n([H])c1ccccc1c3(c2)\";\n        SmilesParser smilesParser = new SmilesParser(SilentChemObjectBuilder.getInstance());\n        smilesParser.kekulise(false);\n        IAtomContainer molecule = smilesParser.parseSmiles(smiles);\n        AtomContainerManipulator.setSingleOrDoubleFlags(molecule);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n\n        molecule = fbot.kekuliseAromaticRings(molecule);\n        Assert.assertNotNull(molecule);\n        molecule = (IAtomContainer) AtomContainerManipulator.removeHydrogens(molecule);\n        int doubleBondCount = 0;\n        for (int i = 0; i < molecule.getBondCount(); i++) {\n            IBond bond = molecule.getBond(i);\n            Assert.assertTrue(bond.getFlag(CDKConstants.ISAROMATIC));\n            if (bond.getOrder() == Order.DOUBLE) doubleBondCount++;\n        }\n        Assert.assertEquals(6, doubleBondCount);\n    }", "signature": "void testPyrrole_Silent()", "full_signature": "@Test(timeout = 1000) public void testPyrrole_Silent()", "class_method_signature": "FixBondOrdersToolTest.testPyrrole_Silent()", "testcase": true, "constructor": false, "invocations": ["getInstance", "kekulise", "parseSmiles", "setSingleOrDoubleFlags", "percieveAtomTypesAndConfigureAtoms", "kekuliseAromaticRings", "assertNotNull", "removeHydrogens", "getBondCount", "getBond", "assertTrue", "getFlag", "getOrder", "assertEquals"]}, "focal_class": {"identifier": "FixBondOrdersTool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private boolean interrupted;", "modifier": "private", "type": "boolean", "declarator": "interrupted", "var_name": "interrupted"}], "methods": [{"identifier": "FixBondOrdersTool", "parameters": "()", "modifiers": "public", "return": "", "signature": " FixBondOrdersTool()", "full_signature": "public  FixBondOrdersTool()", "class_method_signature": "FixBondOrdersTool.FixBondOrdersTool()", "testcase": false, "constructor": true}, {"identifier": "kekuliseAromaticRings", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer kekuliseAromaticRings(IAtomContainer molecule)", "full_signature": "public IAtomContainer kekuliseAromaticRings(IAtomContainer molecule)", "class_method_signature": "FixBondOrdersTool.kekuliseAromaticRings(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "removeExtraRings", "parameters": "(IAtomContainer m)", "modifiers": "private", "return": "IRingSet", "signature": "IRingSet removeExtraRings(IAtomContainer m)", "full_signature": "private IRingSet removeExtraRings(IAtomContainer m)", "class_method_signature": "FixBondOrdersTool.removeExtraRings(IAtomContainer m)", "testcase": false, "constructor": false}, {"identifier": "getRingSystem", "parameters": "(IAtomContainer mol, IRingSet ringSet)", "modifiers": "private", "return": "List<Integer[]>", "signature": "List<Integer[]> getRingSystem(IAtomContainer mol, IRingSet ringSet)", "full_signature": "private List<Integer[]> getRingSystem(IAtomContainer mol, IRingSet ringSet)", "class_method_signature": "FixBondOrdersTool.getRingSystem(IAtomContainer mol, IRingSet ringSet)", "testcase": false, "constructor": false}, {"identifier": "assignRingGroups", "parameters": "(List<Integer[]> rBondsArray)", "modifiers": "private", "return": "List<List<Integer>>", "signature": "List<List<Integer>> assignRingGroups(List<Integer[]> rBondsArray)", "full_signature": "private List<List<Integer>> assignRingGroups(List<Integer[]> rBondsArray)", "class_method_signature": "FixBondOrdersTool.assignRingGroups(List<Integer[]> rBondsArray)", "testcase": false, "constructor": false}, {"identifier": "combineGroups", "parameters": "(List<List<Integer>> ringGroups)", "modifiers": "private", "return": "Boolean", "signature": "Boolean combineGroups(List<List<Integer>> ringGroups)", "full_signature": "private Boolean combineGroups(List<List<Integer>> ringGroups)", "class_method_signature": "FixBondOrdersTool.combineGroups(List<List<Integer>> ringGroups)", "testcase": false, "constructor": false}, {"identifier": "setAllRingBondsSingleOrder", "parameters": "(List<Integer> ringGroup, IRingSet ringSet)", "modifiers": "private", "return": "Boolean", "signature": "Boolean setAllRingBondsSingleOrder(List<Integer> ringGroup, IRingSet ringSet)", "full_signature": "private Boolean setAllRingBondsSingleOrder(List<Integer> ringGroup, IRingSet ringSet)", "class_method_signature": "FixBondOrdersTool.setAllRingBondsSingleOrder(List<Integer> ringGroup, IRingSet ringSet)", "testcase": false, "constructor": false}, {"identifier": "getAtomNosForRingGroup", "parameters": "(IAtomContainer molecule, List<Integer> ringGroup, IRingSet ringSet)", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> getAtomNosForRingGroup(IAtomContainer molecule, List<Integer> ringGroup, IRingSet ringSet)", "full_signature": "private List<Integer> getAtomNosForRingGroup(IAtomContainer molecule, List<Integer> ringGroup, IRingSet ringSet)", "class_method_signature": "FixBondOrdersTool.getAtomNosForRingGroup(IAtomContainer molecule, List<Integer> ringGroup, IRingSet ringSet)", "testcase": false, "constructor": false}, {"identifier": "getBondNosForRingGroup", "parameters": "(IAtomContainer molecule, List<Integer> ringGroup, IRingSet ringSet)", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> getBondNosForRingGroup(IAtomContainer molecule, List<Integer> ringGroup, IRingSet ringSet)", "full_signature": "private List<Integer> getBondNosForRingGroup(IAtomContainer molecule, List<Integer> ringGroup, IRingSet ringSet)", "class_method_signature": "FixBondOrdersTool.getBondNosForRingGroup(IAtomContainer molecule, List<Integer> ringGroup, IRingSet ringSet)", "testcase": false, "constructor": false}, {"identifier": "getAtomNoPairsForRingGroup", "parameters": "(IAtomContainer molecule, List<Integer> bondsToCheck)", "modifiers": "private", "return": "List<Integer[]>", "signature": "List<Integer[]> getAtomNoPairsForRingGroup(IAtomContainer molecule, List<Integer> bondsToCheck)", "full_signature": "private List<Integer[]> getAtomNoPairsForRingGroup(IAtomContainer molecule, List<Integer> bondsToCheck)", "class_method_signature": "FixBondOrdersTool.getAtomNoPairsForRingGroup(IAtomContainer molecule, List<Integer> bondsToCheck)", "testcase": false, "constructor": false}, {"identifier": "getFreeValenciesForRingGroup", "parameters": "(IAtomContainer molecule, List<Integer> atomsToCheck, Matrix M,\n            IRingSet rs)", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> getFreeValenciesForRingGroup(IAtomContainer molecule, List<Integer> atomsToCheck, Matrix M,\n            IRingSet rs)", "full_signature": "private List<Integer> getFreeValenciesForRingGroup(IAtomContainer molecule, List<Integer> atomsToCheck, Matrix M,\n            IRingSet rs)", "class_method_signature": "FixBondOrdersTool.getFreeValenciesForRingGroup(IAtomContainer molecule, List<Integer> atomsToCheck, Matrix M,\n            IRingSet rs)", "testcase": false, "constructor": false}, {"identifier": "solveMatrix", "parameters": "(Matrix M, List<Integer> atomNos, List<Integer> bondNos, List<Integer> freeValencies,\n            List<Integer[]> atomNoPairs, List<Integer> bondOrder)", "modifiers": "private", "return": "Boolean", "signature": "Boolean solveMatrix(Matrix M, List<Integer> atomNos, List<Integer> bondNos, List<Integer> freeValencies,\n            List<Integer[]> atomNoPairs, List<Integer> bondOrder)", "full_signature": "private Boolean solveMatrix(Matrix M, List<Integer> atomNos, List<Integer> bondNos, List<Integer> freeValencies,\n            List<Integer[]> atomNoPairs, List<Integer> bondOrder)", "class_method_signature": "FixBondOrdersTool.solveMatrix(Matrix M, List<Integer> atomNos, List<Integer> bondNos, List<Integer> freeValencies,\n            List<Integer[]> atomNoPairs, List<Integer> bondOrder)", "testcase": false, "constructor": false}, {"identifier": "setInterrupted", "parameters": "(boolean interrupted)", "modifiers": "public", "return": "void", "signature": "void setInterrupted(boolean interrupted)", "full_signature": "public void setInterrupted(boolean interrupted)", "class_method_signature": "FixBondOrdersTool.setInterrupted(boolean interrupted)", "testcase": false, "constructor": false}, {"identifier": "isInterrupted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInterrupted()", "full_signature": "public boolean isInterrupted()", "class_method_signature": "FixBondOrdersTool.isInterrupted()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smiles/FixBondOrdersTool.java"}, "focal_method": {"identifier": "kekuliseAromaticRings", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "IAtomContainer", "body": "public IAtomContainer kekuliseAromaticRings(IAtomContainer molecule) throws CDKException {\n        IAtomContainer mNew = null;\n        try {\n            mNew = (IAtomContainer) molecule.clone();\n        } catch (Exception e) {\n            throw new CDKException(\"Failed to clone source molecule\");\n        }\n\n        IRingSet ringSet;\n\n        try {\n            ringSet = removeExtraRings(mNew);\n        } catch (CDKException x) {\n            throw x;\n        } catch (Exception x) {\n            throw new CDKException(\"failure in SSSRFinder.findAllRings\", x);\n        }\n\n        if (ringSet == null) {\n            throw new CDKException(\"failure in SSSRFinder.findAllRings\");\n        }\n\n        //We need to establish which rings share bonds and set up sets of such interdependant rings\n        List<Integer[]> rBondsArray = null;\n        List<List<Integer>> ringGroups = null;\n\n        //Start by getting a list (same dimensions and ordering as ringset) of all the ring bond numbers in the reduced ring set\n        rBondsArray = getRingSystem(mNew, ringSet);\n        //Now find out which share a bond and assign them accordingly to groups\n        ringGroups = assignRingGroups(rBondsArray);\n\n        //Loop through each group of rings checking all choices of double bond combis and seeing if you can get a\n        //proper molecule.\n        for (int i = 0; i < ringGroups.size(); i++) {\n\n            //Set all ring bonds with single order to allow Matrix solving to work\n            setAllRingBondsSingleOrder(ringGroups.get(i), ringSet);\n\n            //Set up  lists of atoms, bonds and atom pairs for this ringGroup\n            List<Integer> atomNos = null;\n            atomNos = getAtomNosForRingGroup(mNew, ringGroups.get(i), ringSet);\n\n            List<Integer> bondNos = null;\n            bondNos = getBondNosForRingGroup(mNew, ringGroups.get(i), ringSet);\n\n            //Array of same dimensions as bondNos (cols in Matrix)\n            List<Integer[]> atomNoPairs = null;\n            atomNoPairs = getAtomNoPairsForRingGroup(mNew, bondNos);\n\n            //Set up ajacency Matrix\n            Matrix M = new Matrix(atomNos.size(), bondNos.size());\n            for (int x = 0; x < M.getRows(); x++) {\n                for (int y = 0; y < M.getCols(); y++) {\n                    if (Objects.equals(atomNos.get(x), atomNoPairs.get(y)[0])) {\n                        M.set(x, y, 1);\n                    } else {\n                        if (Objects.equals(atomNos.get(x), atomNoPairs.get(y)[1])) {\n                            M.set(x, y, 1);\n                        } else {\n                            M.set(x, y, 0);\n                        }\n                    }\n                }\n            }\n\n            //Array of same dimensions as atomNos (rows in Matrix)\n            List<Integer> freeValencies = null;\n            freeValencies = getFreeValenciesForRingGroup(mNew, atomNos, M, ringSet);\n\n            //Array of \"answers\"\n            List<Integer> bondOrders = new ArrayList<Integer>();\n            for (int j = 0; j < bondNos.size(); j++) {\n                bondOrders.add(0);\n            }\n\n            if (solveMatrix(M, atomNos, bondNos, freeValencies, atomNoPairs, bondOrders)) {\n                for (int j = 0; j < bondOrders.size(); j++) {\n                    mNew.getBond(bondNos.get(j)).setOrder(\n                            bondOrders.get(j) == 1 ? IBond.Order.SINGLE : IBond.Order.DOUBLE);\n                }\n            } else {\n                //                TODO Put any failure code here\n            }\n        }\n        return mNew;\n    }", "signature": "IAtomContainer kekuliseAromaticRings(IAtomContainer molecule)", "full_signature": "public IAtomContainer kekuliseAromaticRings(IAtomContainer molecule)", "class_method_signature": "FixBondOrdersTool.kekuliseAromaticRings(IAtomContainer molecule)", "testcase": false, "constructor": false, "invocations": ["clone", "removeExtraRings", "getRingSystem", "assignRingGroups", "size", "setAllRingBondsSingleOrder", "get", "getAtomNosForRingGroup", "get", "getBondNosForRingGroup", "get", "getAtomNoPairsForRingGroup", "size", "size", "getRows", "getCols", "equals", "get", "get", "set", "equals", "get", "get", "set", "set", "getFreeValenciesForRingGroup", "size", "add", "solveMatrix", "size", "setOrder", "getBond", "get", "get"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}