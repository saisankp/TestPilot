{"test_class": {"identifier": "SeedGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/SeedGeneratorTest.java"}, "test_case": {"identifier": "testGenerate_SizeSeeding", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerate_SizeSeeding() throws Exception {\n\n        IAtomContainer m1 = mock(IAtomContainer.class);\n        IAtomContainer m2 = mock(IAtomContainer.class);\n\n        AtomEncoder encoder = mock(AtomEncoder.class);\n        SeedGenerator generator = new SeedGenerator(encoder);\n\n        IAtom c1 = mock(IAtom.class);\n        IAtom c2 = mock(IAtom.class);\n        IAtom c3 = mock(IAtom.class);\n        IAtom c4 = mock(IAtom.class);\n        IAtom c5 = mock(IAtom.class);\n        IAtom c6 = mock(IAtom.class);\n\n        when(m1.getAtomCount()).thenReturn(5);\n        when(m1.getAtom(0)).thenReturn(c1);\n        when(m1.getAtom(1)).thenReturn(c2);\n        when(m1.getAtom(2)).thenReturn(c3);\n        when(m1.getAtom(3)).thenReturn(c4);\n        when(m1.getAtom(4)).thenReturn(c5);\n\n        when(m2.getAtomCount()).thenReturn(6);\n        when(m2.getAtom(0)).thenReturn(c1);\n        when(m2.getAtom(1)).thenReturn(c2);\n        when(m2.getAtom(2)).thenReturn(c3);\n        when(m2.getAtom(3)).thenReturn(c4);\n        when(m2.getAtom(4)).thenReturn(c5);\n        when(m2.getAtom(5)).thenReturn(c6);\n\n        when(encoder.encode(c1, m1)).thenReturn(42);\n        when(encoder.encode(c2, m1)).thenReturn(42);\n        when(encoder.encode(c3, m1)).thenReturn(42);\n        when(encoder.encode(c4, m1)).thenReturn(42);\n        when(encoder.encode(c5, m1)).thenReturn(42);\n\n        when(encoder.encode(c1, m2)).thenReturn(42);\n        when(encoder.encode(c2, m2)).thenReturn(42);\n        when(encoder.encode(c3, m2)).thenReturn(42);\n        when(encoder.encode(c4, m2)).thenReturn(42);\n        when(encoder.encode(c5, m2)).thenReturn(42);\n        when(encoder.encode(c6, m2)).thenReturn(42);\n\n        long[] v1 = generator.generate(m1);\n        long[] v2 = generator.generate(m2);\n\n        verify(m1, times(1)).getAtomCount();\n        verify(m2, times(1)).getAtomCount();\n\n        verify(m1, times(5)).getAtom(anyInt());\n        verify(m2, times(6)).getAtom(anyInt());\n\n        verify(encoder, times(1)).encode(c1, m1);\n        verify(encoder, times(1)).encode(c2, m1);\n        verify(encoder, times(1)).encode(c3, m1);\n        verify(encoder, times(1)).encode(c4, m1);\n        verify(encoder, times(1)).encode(c5, m1);\n\n        verify(encoder, times(1)).encode(c1, m2);\n        verify(encoder, times(1)).encode(c2, m2);\n        verify(encoder, times(1)).encode(c3, m2);\n        verify(encoder, times(1)).encode(c4, m2);\n        verify(encoder, times(1)).encode(c5, m2);\n        verify(encoder, times(1)).encode(c6, m2);\n\n        // check the value were different (due to molecule size)\n        assertThat(v1.length, is(5));\n        assertThat(v2.length, is(6));\n        for (int i = 0; i < v1.length; i++) {\n            assertThat(v1[i], is(not(v2[i])));\n        }\n\n        verifyNoMoreInteractions(m1, m2, c1, c2, c3, c4, c5, c6, encoder);\n\n    }", "signature": "void testGenerate_SizeSeeding()", "full_signature": "@Test public void testGenerate_SizeSeeding()", "class_method_signature": "SeedGeneratorTest.testGenerate_SizeSeeding()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "getAtomCount", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtomCount", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "encode", "thenReturn", "when", "encode", "thenReturn", "when", "encode", "thenReturn", "when", "encode", "thenReturn", "when", "encode", "thenReturn", "when", "encode", "thenReturn", "when", "encode", "thenReturn", "when", "encode", "thenReturn", "when", "encode", "thenReturn", "when", "encode", "thenReturn", "when", "encode", "generate", "generate", "getAtomCount", "verify", "times", "getAtomCount", "verify", "times", "getAtom", "verify", "times", "anyInt", "getAtom", "verify", "times", "anyInt", "encode", "verify", "times", "encode", "verify", "times", "encode", "verify", "times", "encode", "verify", "times", "encode", "verify", "times", "encode", "verify", "times", "encode", "verify", "times", "encode", "verify", "times", "encode", "verify", "times", "encode", "verify", "times", "encode", "verify", "times", "assertThat", "is", "assertThat", "is", "assertThat", "is", "not", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "SeedGenerator", "superclass": "extends AbstractHashGenerator", "interfaces": "implements AtomHashGenerator", "fields": [{"original_string": "private final AtomEncoder     encoder;", "modifier": "private final", "type": "AtomEncoder", "declarator": "encoder", "var_name": "encoder"}, {"original_string": "private final AtomSuppression suppression;", "modifier": "private final", "type": "AtomSuppression", "declarator": "suppression", "var_name": "suppression"}], "methods": [{"identifier": "SeedGenerator", "parameters": "(AtomEncoder encoder)", "modifiers": "public", "return": "", "signature": " SeedGenerator(AtomEncoder encoder)", "full_signature": "public  SeedGenerator(AtomEncoder encoder)", "class_method_signature": "SeedGenerator.SeedGenerator(AtomEncoder encoder)", "testcase": false, "constructor": true}, {"identifier": "SeedGenerator", "parameters": "(AtomEncoder encoder, AtomSuppression suppression)", "modifiers": "public", "return": "", "signature": " SeedGenerator(AtomEncoder encoder, AtomSuppression suppression)", "full_signature": "public  SeedGenerator(AtomEncoder encoder, AtomSuppression suppression)", "class_method_signature": "SeedGenerator.SeedGenerator(AtomEncoder encoder, AtomSuppression suppression)", "testcase": false, "constructor": true}, {"identifier": "SeedGenerator", "parameters": "(AtomEncoder encoder, Pseudorandom pseudorandom, AtomSuppression suppression)", "modifiers": "", "return": "", "signature": " SeedGenerator(AtomEncoder encoder, Pseudorandom pseudorandom, AtomSuppression suppression)", "full_signature": "  SeedGenerator(AtomEncoder encoder, Pseudorandom pseudorandom, AtomSuppression suppression)", "class_method_signature": "SeedGenerator.SeedGenerator(AtomEncoder encoder, Pseudorandom pseudorandom, AtomSuppression suppression)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "long[]", "signature": "long[] generate(IAtomContainer container)", "full_signature": "@Override public long[] generate(IAtomContainer container)", "class_method_signature": "SeedGenerator.generate(IAtomContainer container)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/SeedGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "long[]", "body": "@Override\n    public long[] generate(IAtomContainer container) {\n\n        Suppressed suppressed = suppression.suppress(container);\n\n        int n = container.getAtomCount();\n        int m = n - suppressed.count(); // number of non-suppressed vertices\n        int seed = m > 1 ? 9803 % m : 1;\n\n        long[] hashes = new long[n];\n\n        for (int i = 0; i < n; i++) {\n            hashes[i] = distribute(seed * encoder.encode(container.getAtom(i), container));\n        }\n        return hashes;\n    }", "signature": "long[] generate(IAtomContainer container)", "full_signature": "@Override public long[] generate(IAtomContainer container)", "class_method_signature": "SeedGenerator.generate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["suppress", "getAtomCount", "count", "distribute", "encode", "getAtom"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}