{"test_class": {"identifier": "BusinessAdminTasksPreprocessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    IdentityProvider identityProvider;", "modifier": "@Mock", "type": "IdentityProvider", "declarator": "identityProvider", "var_name": "identityProvider"}, {"original_string": "@Mock\n    UserGroupCallback userGroupCallback;", "modifier": "@Mock", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}, {"original_string": "@Mock\n    DataSetMetadata metaData;", "modifier": "@Mock", "type": "DataSetMetadata", "declarator": "metaData", "var_name": "metaData"}, {"original_string": "DataSetLookup dataSetLookup;", "modifier": "", "type": "DataSetLookup", "declarator": "dataSetLookup", "var_name": "dataSetLookup"}, {"original_string": "BusinessAdminTasksPreprocessor preprocessor;", "modifier": "", "type": "BusinessAdminTasksPreprocessor", "declarator": "preprocessor", "var_name": "preprocessor"}], "file": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/query/preprocessor/BusinessAdminTasksPreprocessorTest.java"}, "test_case": {"identifier": "testQueryByUserBusinessAdmin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testQueryByUserBusinessAdmin() {\n        dataSetLookup = spy(new DataSetLookup());\n        String role1 = \"role1\";\n        String role2 = \"role2\";\n        String userId = \"admin\";\n\n        when(userGroupCallback.getGroupsForUser(userId)).thenReturn(Arrays.asList(role1,\n                                                                                  role2));\n        when(identityProvider.getName()).thenReturn(userId);\n\n        preprocessor.preprocess(dataSetLookup);\n\n        verifyNoMoreInteractions(dataSetLookup);\n        assertNull(dataSetLookup.getFirstFilterOp());\n    }", "signature": "void testQueryByUserBusinessAdmin()", "full_signature": "@Test public void testQueryByUserBusinessAdmin()", "class_method_signature": "BusinessAdminTasksPreprocessorTest.testQueryByUserBusinessAdmin()", "testcase": true, "constructor": false, "invocations": ["spy", "thenReturn", "when", "getGroupsForUser", "asList", "thenReturn", "when", "getName", "preprocess", "verifyNoMoreInteractions", "assertNull", "getFirstFilterOp"]}, "focal_class": {"identifier": "BusinessAdminTasksPreprocessor", "superclass": "extends UserTasksPreprocessor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BusinessAdminTasksPreprocessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BusinessAdminTasksPreprocessor.class)", "var_name": "LOGGER"}, {"original_string": "public static final String ADMIN_USER = System.getProperty(\"org.jbpm.ht.admin.user\",\n                                                               \"Administrator\");", "modifier": "public static final", "type": "String", "declarator": "ADMIN_USER = System.getProperty(\"org.jbpm.ht.admin.user\",\n                                                               \"Administrator\")", "var_name": "ADMIN_USER"}, {"original_string": "public static final String ADMIN_GROUP = System.getProperty(\"org.jbpm.ht.admin.group\",\n                                                                \"Administrators\");", "modifier": "public static final", "type": "String", "declarator": "ADMIN_GROUP = System.getProperty(\"org.jbpm.ht.admin.group\",\n                                                                \"Administrators\")", "var_name": "ADMIN_GROUP"}, {"original_string": "private IdentityProvider identityProvider;", "modifier": "private", "type": "IdentityProvider", "declarator": "identityProvider", "var_name": "identityProvider"}, {"original_string": "private UserGroupCallback userGroupCallback;", "modifier": "private", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}], "methods": [{"identifier": "BusinessAdminTasksPreprocessor", "parameters": "(IdentityProvider identityProvider,\n                                          UserGroupCallback userGroupCallback,\n                                          DataSetMetadata metadata)", "modifiers": "public", "return": "", "signature": " BusinessAdminTasksPreprocessor(IdentityProvider identityProvider,\n                                          UserGroupCallback userGroupCallback,\n                                          DataSetMetadata metadata)", "full_signature": "public  BusinessAdminTasksPreprocessor(IdentityProvider identityProvider,\n                                          UserGroupCallback userGroupCallback,\n                                          DataSetMetadata metadata)", "class_method_signature": "BusinessAdminTasksPreprocessor.BusinessAdminTasksPreprocessor(IdentityProvider identityProvider,\n                                          UserGroupCallback userGroupCallback,\n                                          DataSetMetadata metadata)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "(DataSetLookup lookup)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "void", "signature": "void preprocess(DataSetLookup lookup)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public void preprocess(DataSetLookup lookup)", "class_method_signature": "BusinessAdminTasksPreprocessor.preprocess(DataSetLookup lookup)", "testcase": false, "constructor": false}], "file": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/BusinessAdminTasksPreprocessor.java"}, "focal_method": {"identifier": "preprocess", "parameters": "(DataSetLookup lookup)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "void", "body": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    public void preprocess(DataSetLookup lookup) {\n        if (identityProvider == null || userGroupCallback == null) {\n            return;\n        }\n\n        if (ADMIN_USER.equals(identityProvider.getName())) {\n            return;\n        }\n\n        final List<String> groups = Optional.ofNullable(userGroupCallback.getGroupsForUser(identityProvider.getName())).orElse(new ArrayList<>());\n        if (groups.stream().filter(s -> s.equals(ADMIN_GROUP)).findFirst().isPresent()) {\n            return;\n        }\n\n        final List<Comparable> orgEntities = new ArrayList<>(groups);\n        orgEntities.add(identityProvider.getName());\n        final ColumnFilter columnFilter = equalsTo(COLUMN_ORGANIZATIONAL_ENTITY,\n                                                   orgEntities);\n        LOGGER.debug(\"Adding column filter: {}\",\n                     columnFilter);\n\n        if (lookup.getFirstFilterOp() != null) {\n            lookup.getFirstFilterOp().addFilterColumn(columnFilter);\n        } else {\n            DataSetFilter filter = new DataSetFilter();\n            filter.addFilterColumn(columnFilter);\n            lookup.addOperation(filter);\n        }\n\n        super.preprocess(lookup);\n    }", "signature": "void preprocess(DataSetLookup lookup)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public void preprocess(DataSetLookup lookup)", "class_method_signature": "BusinessAdminTasksPreprocessor.preprocess(DataSetLookup lookup)", "testcase": false, "constructor": false, "invocations": ["equals", "getName", "orElse", "ofNullable", "getGroupsForUser", "getName", "isPresent", "findFirst", "filter", "stream", "equals", "add", "getName", "equalsTo", "debug", "getFirstFilterOp", "addFilterColumn", "getFirstFilterOp", "addFilterColumn", "addOperation", "preprocess"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}