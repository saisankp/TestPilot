{"test_class": {"identifier": "MethodLoggingAdviceTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private MethodLoggingAdvice methodLoggingAdvice;", "modifier": "@Autowired\n    private", "type": "MethodLoggingAdvice", "declarator": "methodLoggingAdvice", "var_name": "methodLoggingAdvice"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/MethodLoggingAdviceTest.java"}, "test_case": {"identifier": "testLogMethodTimeClassSuppressLogging", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLogMethodTimeClassSuppressLogging() throws Throwable\n    {\n        // Invoke the advice which shouldn't log the method time because the class is annotated with SuppressLogging.\n        methodLoggingAdvice.logMethodBeingInvoked(new MockProceedingJoinPointClassSuppressLogging());\n    }", "signature": "void testLogMethodTimeClassSuppressLogging()", "full_signature": "@Test public void testLogMethodTimeClassSuppressLogging()", "class_method_signature": "MethodLoggingAdviceTest.testLogMethodTimeClassSuppressLogging()", "testcase": true, "constructor": false, "invocations": ["logMethodBeingInvoked"]}, "focal_class": {"identifier": "MethodLoggingAdvice", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(MethodLoggingAdvice.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MethodLoggingAdvice.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "operationsMethods", "parameters": "()", "modifiers": "@Pointcut(\"execution(* org.finra.herd.dao.*Operations.*(..))\") protected", "return": "void", "signature": "void operationsMethods()", "full_signature": "@Pointcut(\"execution(* org.finra.herd.dao.*Operations.*(..))\") protected void operationsMethods()", "class_method_signature": "MethodLoggingAdvice.operationsMethods()", "testcase": false, "constructor": false}, {"identifier": "logMethodBeingInvoked", "parameters": "(ProceedingJoinPoint pjp)", "modifiers": "@Around(\"operationsMethods()\") public", "return": "Object", "signature": "Object logMethodBeingInvoked(ProceedingJoinPoint pjp)", "full_signature": "@Around(\"operationsMethods()\") public Object logMethodBeingInvoked(ProceedingJoinPoint pjp)", "class_method_signature": "MethodLoggingAdvice.logMethodBeingInvoked(ProceedingJoinPoint pjp)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/MethodLoggingAdvice.java"}, "focal_method": {"identifier": "logMethodBeingInvoked", "parameters": "(ProceedingJoinPoint pjp)", "modifiers": "@Around(\"operationsMethods()\") public", "return": "Object", "body": "@Around(\"operationsMethods()\")\n    public Object logMethodBeingInvoked(ProceedingJoinPoint pjp) throws Throwable\n    {\n        // Get the target class being called.\n        Class<?> targetClass = pjp.getTarget().getClass();\n\n        // Get the target method being called.\n        MethodSignature targetMethodSignature = (MethodSignature) pjp.getSignature();\n        Method targetMethod = targetMethodSignature.getMethod();\n        if (targetMethod.getDeclaringClass().isInterface())\n        {\n            // Get the underlying implementation if we are given an interface.\n            targetMethod = pjp.getTarget().getClass().getMethod(pjp.getSignature().getName(), targetMethod.getParameterTypes());\n        }\n\n        // Only log the method if the class and method aren't suppressing logging and the log level is debug.\n        if ((AnnotationUtils.findAnnotation(targetClass, SuppressLogging.class) == null) &&\n            (AnnotationUtils.findAnnotation(targetMethod, SuppressLogging.class) == null) && (LOGGER.isDebugEnabled()))\n        {\n            LOGGER.debug(\"javaMethod=\\\"{}.{}\\\"\", targetClass.getName(), targetMethodSignature.getName());\n        }\n\n        // Proceed to the join point (i.e. call the method and let it return).\n        return pjp.proceed();\n    }", "signature": "Object logMethodBeingInvoked(ProceedingJoinPoint pjp)", "full_signature": "@Around(\"operationsMethods()\") public Object logMethodBeingInvoked(ProceedingJoinPoint pjp)", "class_method_signature": "MethodLoggingAdvice.logMethodBeingInvoked(ProceedingJoinPoint pjp)", "testcase": false, "constructor": false, "invocations": ["getClass", "getTarget", "getSignature", "getMethod", "isInterface", "getDeclaringClass", "getMethod", "getClass", "getTarget", "getName", "getSignature", "getParameterTypes", "findAnnotation", "findAnnotation", "isDebugEnabled", "debug", "getName", "getName", "proceed"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}