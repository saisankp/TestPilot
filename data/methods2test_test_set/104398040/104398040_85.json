{"test_class": {"identifier": "InsertLineTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/operations/text/InsertLineTest.java"}, "test_case": {"identifier": "invalidLineNumberTest1", "parameters": "()", "modifiers": "@Test(expectedExceptions = TransformationDefinitionException.class, expectedExceptionsMessageRegExp = \"Line number cannot be negative or zero\") public", "return": "void", "body": "@Test(expectedExceptions = TransformationDefinitionException.class, expectedExceptionsMessageRegExp = \"Line number cannot be negative or zero\")\n    public void invalidLineNumberTest1() {\n        InsertLine insertLine = new InsertLine(\"   color: yellow\").relative(\"/src/main/resources/dogs.yaml\");\n        insertLine.setLineNumber(-1);\n    }", "signature": "void invalidLineNumberTest1()", "full_signature": "@Test(expectedExceptions = TransformationDefinitionException.class, expectedExceptionsMessageRegExp = \"Line number cannot be negative or zero\") public void invalidLineNumberTest1()", "class_method_signature": "InsertLineTest.invalidLineNumberTest1()", "testcase": true, "constructor": false, "invocations": ["relative", "setLineNumber"]}, "focal_class": {"identifier": "InsertLine", "superclass": "extends TransformationOperation<InsertLine>", "interfaces": "", "fields": [{"original_string": "private static final String DESCRIPTION = \"Insert new line(s) into %s\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Insert new line(s) into %s\"", "var_name": "DESCRIPTION"}, {"original_string": "private InsertionMode insertionMode = InsertionMode.CONCAT;", "modifier": "private", "type": "InsertionMode", "declarator": "insertionMode = InsertionMode.CONCAT", "var_name": "insertionMode"}, {"original_string": "private String newLine;", "modifier": "private", "type": "String", "declarator": "newLine", "var_name": "newLine"}, {"original_string": "private Integer lineNumber = null;", "modifier": "private", "type": "Integer", "declarator": "lineNumber = null", "var_name": "lineNumber"}, {"original_string": "private String regex = null;", "modifier": "private", "type": "String", "declarator": "regex = null", "var_name": "regex"}], "methods": [{"identifier": "InsertLine", "parameters": "()", "modifiers": "public", "return": "", "signature": " InsertLine()", "full_signature": "public  InsertLine()", "class_method_signature": "InsertLine.InsertLine()", "testcase": false, "constructor": true}, {"identifier": "InsertLine", "parameters": "(String newLine)", "modifiers": "public", "return": "", "signature": " InsertLine(String newLine)", "full_signature": "public  InsertLine(String newLine)", "class_method_signature": "InsertLine.InsertLine(String newLine)", "testcase": false, "constructor": true}, {"identifier": "InsertLine", "parameters": "(String newLine, Integer lineNumber)", "modifiers": "public", "return": "", "signature": " InsertLine(String newLine, Integer lineNumber)", "full_signature": "public  InsertLine(String newLine, Integer lineNumber)", "class_method_signature": "InsertLine.InsertLine(String newLine, Integer lineNumber)", "testcase": false, "constructor": true}, {"identifier": "InsertLine", "parameters": "(String newLine, String regex)", "modifiers": "public", "return": "", "signature": " InsertLine(String newLine, String regex)", "full_signature": "public  InsertLine(String newLine, String regex)", "class_method_signature": "InsertLine.InsertLine(String newLine, String regex)", "testcase": false, "constructor": true}, {"identifier": "setInsertionMode", "parameters": "(InsertionMode insertionMode)", "modifiers": "public", "return": "InsertLine", "signature": "InsertLine setInsertionMode(InsertionMode insertionMode)", "full_signature": "public InsertLine setInsertionMode(InsertionMode insertionMode)", "class_method_signature": "InsertLine.setInsertionMode(InsertionMode insertionMode)", "testcase": false, "constructor": false}, {"identifier": "setNewLine", "parameters": "(String newLine)", "modifiers": "public", "return": "InsertLine", "signature": "InsertLine setNewLine(String newLine)", "full_signature": "public InsertLine setNewLine(String newLine)", "class_method_signature": "InsertLine.setNewLine(String newLine)", "testcase": false, "constructor": false}, {"identifier": "setLineNumber", "parameters": "(Integer lineNumber)", "modifiers": "public", "return": "InsertLine", "signature": "InsertLine setLineNumber(Integer lineNumber)", "full_signature": "public InsertLine setLineNumber(Integer lineNumber)", "class_method_signature": "InsertLine.setLineNumber(Integer lineNumber)", "testcase": false, "constructor": false}, {"identifier": "setRegex", "parameters": "(String regex)", "modifiers": "public", "return": "InsertLine", "signature": "InsertLine setRegex(String regex)", "full_signature": "public InsertLine setRegex(String regex)", "class_method_signature": "InsertLine.setRegex(String regex)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "InsertLine.getDescription()", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected", "return": "TOExecutionResult", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "InsertLine.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}, {"identifier": "insertAtSpecificLine", "parameters": "(BufferedReader reader, BufferedWriter writer, String eol)", "modifiers": "private", "return": "TOExecutionResult", "signature": "TOExecutionResult insertAtSpecificLine(BufferedReader reader, BufferedWriter writer, String eol)", "full_signature": "private TOExecutionResult insertAtSpecificLine(BufferedReader reader, BufferedWriter writer, String eol)", "class_method_signature": "InsertLine.insertAtSpecificLine(BufferedReader reader, BufferedWriter writer, String eol)", "testcase": false, "constructor": false}, {"identifier": "insertRegex", "parameters": "(BufferedReader reader, BufferedWriter writer, boolean firstOnly, boolean insertAfter, String eol)", "modifiers": "private", "return": "TOExecutionResult", "signature": "TOExecutionResult insertRegex(BufferedReader reader, BufferedWriter writer, boolean firstOnly, boolean insertAfter, String eol)", "full_signature": "private TOExecutionResult insertRegex(BufferedReader reader, BufferedWriter writer, boolean firstOnly, boolean insertAfter, String eol)", "class_method_signature": "InsertLine.insertRegex(BufferedReader reader, BufferedWriter writer, boolean firstOnly, boolean insertAfter, String eol)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(BufferedReader reader, BufferedWriter writer, String eol)", "modifiers": "private", "return": "TOExecutionResult", "signature": "TOExecutionResult concat(BufferedReader reader, BufferedWriter writer, String eol)", "full_signature": "private TOExecutionResult concat(BufferedReader reader, BufferedWriter writer, String eol)", "class_method_signature": "InsertLine.concat(BufferedReader reader, BufferedWriter writer, String eol)", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/operations/text/InsertLine.java"}, "focal_method": {"identifier": "setLineNumber", "parameters": "(Integer lineNumber)", "modifiers": "public", "return": "InsertLine", "body": "public InsertLine setLineNumber(Integer lineNumber) {\n        checkForNull(\"Line Number\", lineNumber);\n        if(lineNumber <= 0){\n            throw new TransformationDefinitionException(\"Line number cannot be negative or zero\");\n        }\n        this.lineNumber = lineNumber;\n        setInsertionMode(InsertionMode.LINE_NUMBER);\n        return this;\n    }", "signature": "InsertLine setLineNumber(Integer lineNumber)", "full_signature": "public InsertLine setLineNumber(Integer lineNumber)", "class_method_signature": "InsertLine.setLineNumber(Integer lineNumber)", "testcase": false, "constructor": false, "invocations": ["checkForNull", "setInsertionMode"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}