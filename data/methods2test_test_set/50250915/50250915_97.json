{"test_class": {"identifier": "BlueJiraIssueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public JenkinsRule j = new JenkinsRule();", "modifier": "@Rule\n    public", "type": "JenkinsRule", "declarator": "j = new JenkinsRule()", "var_name": "j"}], "file": "blueocean-jira/src/test/java/io/jenkins/blueocean/service/embedded/jira/BlueJiraIssueTest.java"}, "test_case": {"identifier": "findIssueKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findIssueKeys() throws MalformedURLException {\n        Pattern issuePattern = JiraSite.DEFAULT_ISSUE_PATTERN;\n        Assert.assertEquals(Sets.newHashSet(\"JENKINS-43400\"), BlueJiraIssue.findIssueKeys(\"[JENKINS-43400] Print the error to the build log rather than\", issuePattern));\n        Assert.assertEquals(Sets.newHashSet(\"JENKINS-43400\"), BlueJiraIssue.findIssueKeys(\"JENKINS-43400 Print the error to the build log rather than\", issuePattern));\n        Assert.assertEquals(Sets.newHashSet(\"JENKINS-43400\"), BlueJiraIssue.findIssueKeys(\"foo/JENKINS-43400 Print the error to the build log rather than\", issuePattern));\n        Assert.assertEquals(Sets.newHashSet(\"TEST-123\", \"EXAMPLE-123\", \"JENKINS-43400\"), BlueJiraIssue.findIssueKeys(\"foo/JENKINS-43400 TEST-123 [EXAMPLE-123] Print the error to the build log rather than\", issuePattern));\n    }", "signature": "void findIssueKeys()", "full_signature": "@Test public void findIssueKeys()", "class_method_signature": "BlueJiraIssueTest.findIssueKeys()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "newHashSet", "findIssueKeys", "assertEquals", "newHashSet", "findIssueKeys", "assertEquals", "newHashSet", "findIssueKeys", "assertEquals", "newHashSet", "findIssueKeys"]}, "focal_class": {"identifier": "BlueJiraIssue", "superclass": "extends BlueIssue", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(BlueJiraIssue.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(BlueJiraIssue.class.getName())", "var_name": "LOGGER"}, {"original_string": "private final String issueKey;", "modifier": "private final", "type": "String", "declarator": "issueKey", "var_name": "issueKey"}, {"original_string": "private final String issueURL;", "modifier": "private final", "type": "String", "declarator": "issueURL", "var_name": "issueURL"}], "methods": [{"identifier": "BlueJiraIssue", "parameters": "(String issueKey, String issueURL)", "modifiers": "public", "return": "", "signature": " BlueJiraIssue(String issueKey, String issueURL)", "full_signature": "public  BlueJiraIssue(String issueKey, String issueURL)", "class_method_signature": "BlueJiraIssue.BlueJiraIssue(String issueKey, String issueURL)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "BlueJiraIssue.getId()", "testcase": false, "constructor": false}, {"identifier": "getURL", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getURL()", "full_signature": "@Override public String getURL()", "class_method_signature": "BlueJiraIssue.getURL()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "BlueJiraIssue.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BlueJiraIssue.hashCode()", "testcase": false, "constructor": false}, {"identifier": "findIssueKeys", "parameters": "(String input, Pattern pattern)", "modifiers": "static", "return": "Collection<String>", "signature": "Collection<String> findIssueKeys(String input, Pattern pattern)", "full_signature": "static Collection<String> findIssueKeys(String input, Pattern pattern)", "class_method_signature": "BlueJiraIssue.findIssueKeys(String input, Pattern pattern)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(@Nonnull JiraSite site, @Nullable JiraIssue issue)", "modifiers": "@CheckForNull static", "return": "BlueIssue", "signature": "BlueIssue create(@Nonnull JiraSite site, @Nullable JiraIssue issue)", "full_signature": "@CheckForNull static BlueIssue create(@Nonnull JiraSite site, @Nullable JiraIssue issue)", "class_method_signature": "BlueJiraIssue.create(@Nonnull JiraSite site, @Nullable JiraIssue issue)", "testcase": false, "constructor": false}], "file": "blueocean-jira/src/main/java/io/jenkins/blueocean/service/embedded/jira/BlueJiraIssue.java"}, "focal_method": {"identifier": "findIssueKeys", "parameters": "(String input, Pattern pattern)", "modifiers": "static", "return": "Collection<String>", "body": "static Collection<String> findIssueKeys(String input, Pattern pattern) {\n        Matcher m = pattern.matcher(input);\n        Set<String> issues = new HashSet();\n        while (m.find()) {\n            if (m.groupCount() >= 1) {\n                String id = m.group(1);\n                issues.add(id);\n            }\n        }\n        return issues;\n    }", "signature": "Collection<String> findIssueKeys(String input, Pattern pattern)", "full_signature": "static Collection<String> findIssueKeys(String input, Pattern pattern)", "class_method_signature": "BlueJiraIssue.findIssueKeys(String input, Pattern pattern)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "groupCount", "group", "add"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}