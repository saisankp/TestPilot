{"test_class": {"identifier": "ScenarioParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/osip-core/src/test/java/edu/kit/pse/osip/core/io/files/ScenarioParserTest.java"}, "test_case": {"identifier": "testCommandArgumentCount", "parameters": "()", "modifiers": "@Test(expected = ParserException.class) public", "return": "void", "body": "@Test(expected = ParserException.class)\n    public void testCommandArgumentCount() throws ParserException {\n        ScenarioParser parser = new ScenarioParser(\"delay(5, 10);\");\n        parser.readScenario();\n    }", "signature": "void testCommandArgumentCount()", "full_signature": "@Test(expected = ParserException.class) public void testCommandArgumentCount()", "class_method_signature": "ScenarioParserTest.testCommandArgumentCount()", "testcase": true, "constructor": false, "invocations": ["readScenario"]}, "focal_class": {"identifier": "ScenarioParser", "superclass": "extends ExtendedParser", "interfaces": "", "fields": [{"original_string": "private HashMap<String, CommandAction> commands = new HashMap<>();", "modifier": "private", "type": "HashMap<String, CommandAction>", "declarator": "commands = new HashMap<>()", "var_name": "commands"}, {"original_string": "protected Scenario scenario = new Scenario();", "modifier": "protected", "type": "Scenario", "declarator": "scenario = new Scenario()", "var_name": "scenario"}], "methods": [{"identifier": "ScenarioParser", "parameters": "(String toParse)", "modifiers": "public", "return": "", "signature": " ScenarioParser(String toParse)", "full_signature": "public  ScenarioParser(String toParse)", "class_method_signature": "ScenarioParser.ScenarioParser(String toParse)", "testcase": false, "constructor": true}, {"identifier": "readScenario", "parameters": "()", "modifiers": "public final", "return": "Scenario", "signature": "Scenario readScenario()", "full_signature": "public final Scenario readScenario()", "class_method_signature": "ScenarioParser.readScenario()", "testcase": false, "constructor": false}, {"identifier": "skipUtf8Bom", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void skipUtf8Bom()", "full_signature": "private void skipUtf8Bom()", "class_method_signature": "ScenarioParser.skipUtf8Bom()", "testcase": false, "constructor": false}, {"identifier": "readStatement", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void readStatement()", "full_signature": "public final void readStatement()", "class_method_signature": "ScenarioParser.readStatement()", "testcase": false, "constructor": false}, {"identifier": "readAlphabetic", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String readAlphabetic()", "full_signature": "private String readAlphabetic()", "class_method_signature": "ScenarioParser.readAlphabetic()", "testcase": false, "constructor": false}, {"identifier": "checkArgumentCount", "parameters": "(ArrayList<Float> parameters, int required)", "modifiers": "private", "return": "void", "signature": "void checkArgumentCount(ArrayList<Float> parameters, int required)", "full_signature": "private void checkArgumentCount(ArrayList<Float> parameters, int required)", "class_method_signature": "ScenarioParser.checkArgumentCount(ArrayList<Float> parameters, int required)", "testcase": false, "constructor": false}, {"identifier": "addCommands", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addCommands()", "full_signature": "private void addCommands()", "class_method_signature": "ScenarioParser.addCommands()", "testcase": false, "constructor": false}], "file": "src/osip-core/src/main/java/edu/kit/pse/osip/core/io/files/ScenarioParser.java"}, "focal_method": {"identifier": "readScenario", "parameters": "()", "modifiers": "public final", "return": "Scenario", "body": "public final Scenario readScenario() throws ParserException {\n        skipUtf8Bom();\n        while (available()) {\n            int lastPosition = -1;\n            while (available() && lastPosition != currentPosition) {\n                lastPosition = currentPosition;\n                skipWhitespaces();\n                skipComments();\n            }\n            if (available()) {\n                readStatement();\n            }\n        }\n        return scenario;\n    }", "signature": "Scenario readScenario()", "full_signature": "public final Scenario readScenario()", "class_method_signature": "ScenarioParser.readScenario()", "testcase": false, "constructor": false, "invocations": ["skipUtf8Bom", "available", "available", "skipWhitespaces", "skipComments", "available", "readStatement"]}, "repository": {"repo_id": 74042107, "url": "https://github.com/ByteHamster/PSE", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 18396, "license": "licensed"}}