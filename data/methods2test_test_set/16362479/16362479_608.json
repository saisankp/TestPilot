{"test_class": {"identifier": "ShardManagerGetSnapshotReplyActorTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "private static final MemberName MEMBER_1 = MemberName.forName(\"member-1\");", "modifier": "private static final", "type": "MemberName", "declarator": "MEMBER_1 = MemberName.forName(\"member-1\")", "var_name": "MEMBER_1"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/shardmanager/ShardManagerGetSnapshotReplyActorTest.java"}, "test_case": {"identifier": "testGetSnapshotFailureReply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSnapshotFailureReply() {\n        TestKit kit = new TestKit(getSystem());\n\n        ActorRef replyActor = getSystem().actorOf(ShardManagerGetSnapshotReplyActor.props(\n                Arrays.asList(\"shard1\", \"shard2\"), \"config\", null, kit.getRef(), \"shard-manager\",\n                FiniteDuration.create(100, TimeUnit.SECONDS)), \"testGetSnapshotFailureReply\");\n\n        kit.watch(replyActor);\n\n        replyActor.tell(new GetSnapshotReply(ShardIdentifier.create(\"shard1\", MEMBER_1, \"config\").toString(),\n                Snapshot.create(ByteState.of(new byte[]{1,2,3}), Collections.<ReplicatedLogEntry>emptyList(),\n                        2, 1, 2, 1, 1, \"member-1\", null)), ActorRef.noSender());\n\n        replyActor.tell(new Failure(new RuntimeException()), ActorRef.noSender());\n\n        kit.expectMsgClass(Failure.class);\n        kit.expectTerminated(replyActor);\n    }", "signature": "void testGetSnapshotFailureReply()", "full_signature": "@Test public void testGetSnapshotFailureReply()", "class_method_signature": "ShardManagerGetSnapshotReplyActorTest.testGetSnapshotFailureReply()", "testcase": true, "constructor": false, "invocations": ["getSystem", "actorOf", "getSystem", "props", "asList", "getRef", "create", "watch", "tell", "toString", "create", "create", "of", "emptyList", "noSender", "tell", "noSender", "expectMsgClass", "expectTerminated"]}, "focal_class": {"identifier": "ShardManagerGetSnapshotReplyActor", "superclass": "extends UntypedAbstractActor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ShardManagerGetSnapshotReplyActor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ShardManagerGetSnapshotReplyActor.class)", "var_name": "LOG"}, {"original_string": "private final Set<String> remainingShardNames;", "modifier": "private final", "type": "Set<String>", "declarator": "remainingShardNames", "var_name": "remainingShardNames"}, {"original_string": "private final Params params;", "modifier": "private final", "type": "Params", "declarator": "params", "var_name": "params"}, {"original_string": "private final List<ShardSnapshot> shardSnapshots = new ArrayList<>();", "modifier": "private final", "type": "List<ShardSnapshot>", "declarator": "shardSnapshots = new ArrayList<>()", "var_name": "shardSnapshots"}], "methods": [{"identifier": "ShardManagerGetSnapshotReplyActor", "parameters": "(final Params params)", "modifiers": "private", "return": "", "signature": " ShardManagerGetSnapshotReplyActor(final Params params)", "full_signature": "private  ShardManagerGetSnapshotReplyActor(final Params params)", "class_method_signature": "ShardManagerGetSnapshotReplyActor.ShardManagerGetSnapshotReplyActor(final Params params)", "testcase": false, "constructor": true}, {"identifier": "onReceive", "parameters": "(final Object message)", "modifiers": "@Override public", "return": "void", "signature": "void onReceive(final Object message)", "full_signature": "@Override public void onReceive(final Object message)", "class_method_signature": "ShardManagerGetSnapshotReplyActor.onReceive(final Object message)", "testcase": false, "constructor": false}, {"identifier": "onGetSnapshotReply", "parameters": "(final GetSnapshotReply getSnapshotReply)", "modifiers": "private", "return": "void", "signature": "void onGetSnapshotReply(final GetSnapshotReply getSnapshotReply)", "full_signature": "private void onGetSnapshotReply(final GetSnapshotReply getSnapshotReply)", "class_method_signature": "ShardManagerGetSnapshotReplyActor.onGetSnapshotReply(final GetSnapshotReply getSnapshotReply)", "testcase": false, "constructor": false}, {"identifier": "props", "parameters": "(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "modifiers": "public static", "return": "Props", "signature": "Props props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "full_signature": "public static Props props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "class_method_signature": "ShardManagerGetSnapshotReplyActor.props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/shardmanager/ShardManagerGetSnapshotReplyActor.java"}, "focal_method": {"identifier": "props", "parameters": "(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "modifiers": "public static", "return": "Props", "body": "public static Props props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout) {\n        return Props.create(ShardManagerGetSnapshotReplyActor.class, new Params(shardNames, datastoreType,\n                shardManagerSnapshot, replyToActor, id, receiveTimeout));\n    }", "signature": "Props props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "full_signature": "public static Props props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "class_method_signature": "ShardManagerGetSnapshotReplyActor.props(final Collection<String> shardNames, final String datastoreType,\n            final ShardManagerSnapshot shardManagerSnapshot, final ActorRef replyToActor, final String id,\n            final FiniteDuration receiveTimeout)", "testcase": false, "constructor": false, "invocations": ["create"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}