{"test_class": {"identifier": "PolymorphicResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static RestxServerRule server = new RestxServerRule();", "modifier": "@ClassRule\n    public static", "type": "RestxServerRule", "declarator": "server = new RestxServerRule()", "var_name": "server"}], "file": "restx-samplest/src/test/java/samplest/core/PolymorphicResourceTest.java"}, "test_case": {"identifier": "should_post_A", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_post_A() throws Exception {\n        HttpTestClient httpTestClient = HttpTestClient.withBaseUrl(\"http://localhost:8080\");\n        httpTestClient = server.client();\n        HttpRequest httpRequest = httpTestClient.authenticatedAs(\"admin\")\n                .POST(\"/api/polymorphic\")\n                .contentType(\"application/json\")\n                .send(\"{\\\"@class\\\":\\\".PolymorphicResource$A\\\",\\\"a\\\":\\\"a3\\\"}\");\n        assertThat(httpRequest.code()).isEqualTo(200);\n        assertThat(httpRequest.body().trim()).isEqualTo(\"{\\n\" +\n                \"  \\\"@class\\\" : \\\".PolymorphicResource$A\\\",\\n\" +\n                \"  \\\"a\\\" : \\\"a3\\\"\\n\" +\n                \"}\");\n    }", "signature": "void should_post_A()", "full_signature": "@Test public void should_post_A()", "class_method_signature": "PolymorphicResourceTest.should_post_A()", "testcase": true, "constructor": false, "invocations": ["withBaseUrl", "client", "send", "contentType", "POST", "authenticatedAs", "isEqualTo", "assertThat", "code", "isEqualTo", "assertThat", "trim", "body"]}, "focal_class": {"identifier": "PolymorphicResource", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "bytype", "parameters": "(String type)", "modifiers": "@GET(\"/polymorphic/single/{type}\") public", "return": "A", "signature": "A bytype(String type)", "full_signature": "@GET(\"/polymorphic/single/{type}\") public A bytype(String type)", "class_method_signature": "PolymorphicResource.bytype(String type)", "testcase": false, "constructor": false}, {"identifier": "findAllByType", "parameters": "(String type)", "modifiers": "@GET(\"/polymorphic/list/{type}\") public", "return": "Iterable<A>", "signature": "Iterable<A> findAllByType(String type)", "full_signature": "@GET(\"/polymorphic/list/{type}\") public Iterable<A> findAllByType(String type)", "class_method_signature": "PolymorphicResource.findAllByType(String type)", "testcase": false, "constructor": false}, {"identifier": "post", "parameters": "(A a)", "modifiers": "@POST(\"/polymorphic\") public", "return": "A", "signature": "A post(A a)", "full_signature": "@POST(\"/polymorphic\") public A post(A a)", "class_method_signature": "PolymorphicResource.post(A a)", "testcase": false, "constructor": false}], "file": "restx-samplest/src/main/java/samplest/core/PolymorphicResource.java"}, "focal_method": {"identifier": "post", "parameters": "(A a)", "modifiers": "@POST(\"/polymorphic\") public", "return": "A", "body": "@POST(\"/polymorphic\")\n    public A post(A a) {\n        return a;\n    }", "signature": "A post(A a)", "full_signature": "@POST(\"/polymorphic\") public A post(A a)", "class_method_signature": "PolymorphicResource.post(A a)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}