{"test_class": {"identifier": "TestProportionalCapacityPreemptionPolicy", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final long TS = 3141592653L;", "modifier": "static final", "type": "long", "declarator": "TS = 3141592653L", "var_name": "TS"}, {"original_string": "int appAlloc = 0;", "modifier": "", "type": "int", "declarator": "appAlloc = 0", "var_name": "appAlloc"}, {"original_string": "boolean setAMContainer = false;", "modifier": "", "type": "boolean", "declarator": "setAMContainer = false", "var_name": "setAMContainer"}, {"original_string": "boolean setLabeledContainer = false;", "modifier": "", "type": "boolean", "declarator": "setLabeledContainer = false", "var_name": "setLabeledContainer"}, {"original_string": "float setAMResourcePercent = 0.0f;", "modifier": "", "type": "float", "declarator": "setAMResourcePercent = 0.0f", "var_name": "setAMResourcePercent"}, {"original_string": "Random rand = null;", "modifier": "", "type": "Random", "declarator": "rand = null", "var_name": "rand"}, {"original_string": "Clock mClock = null;", "modifier": "", "type": "Clock", "declarator": "mClock = null", "var_name": "mClock"}, {"original_string": "Configuration conf = null;", "modifier": "", "type": "Configuration", "declarator": "conf = null", "var_name": "conf"}, {"original_string": "CapacityScheduler mCS = null;", "modifier": "", "type": "CapacityScheduler", "declarator": "mCS = null", "var_name": "mCS"}, {"original_string": "RMContext rmContext = null;", "modifier": "", "type": "RMContext", "declarator": "rmContext = null", "var_name": "rmContext"}, {"original_string": "RMNodeLabelsManager lm = null;", "modifier": "", "type": "RMNodeLabelsManager", "declarator": "lm = null", "var_name": "lm"}, {"original_string": "CapacitySchedulerConfiguration schedConf = null;", "modifier": "", "type": "CapacitySchedulerConfiguration", "declarator": "schedConf = null", "var_name": "schedConf"}, {"original_string": "EventHandler<SchedulerEvent> mDisp = null;", "modifier": "", "type": "EventHandler<SchedulerEvent>", "declarator": "mDisp = null", "var_name": "mDisp"}, {"original_string": "ResourceCalculator rc = new DefaultResourceCalculator();", "modifier": "", "type": "ResourceCalculator", "declarator": "rc = new DefaultResourceCalculator()", "var_name": "rc"}, {"original_string": "Resource clusterResources = null;", "modifier": "", "type": "Resource", "declarator": "clusterResources = null", "var_name": "clusterResources"}, {"original_string": "final ApplicationAttemptId appA = ApplicationAttemptId.newInstance(\n      ApplicationId.newInstance(TS, 0), 0);", "modifier": "final", "type": "ApplicationAttemptId", "declarator": "appA = ApplicationAttemptId.newInstance(\n      ApplicationId.newInstance(TS, 0), 0)", "var_name": "appA"}, {"original_string": "final ApplicationAttemptId appB = ApplicationAttemptId.newInstance(\n      ApplicationId.newInstance(TS, 1), 0);", "modifier": "final", "type": "ApplicationAttemptId", "declarator": "appB = ApplicationAttemptId.newInstance(\n      ApplicationId.newInstance(TS, 1), 0)", "var_name": "appB"}, {"original_string": "final ApplicationAttemptId appC = ApplicationAttemptId.newInstance(\n      ApplicationId.newInstance(TS, 2), 0);", "modifier": "final", "type": "ApplicationAttemptId", "declarator": "appC = ApplicationAttemptId.newInstance(\n      ApplicationId.newInstance(TS, 2), 0)", "var_name": "appC"}, {"original_string": "final ApplicationAttemptId appD = ApplicationAttemptId.newInstance(\n      ApplicationId.newInstance(TS, 3), 0);", "modifier": "final", "type": "ApplicationAttemptId", "declarator": "appD = ApplicationAttemptId.newInstance(\n      ApplicationId.newInstance(TS, 3), 0)", "var_name": "appD"}, {"original_string": "final ApplicationAttemptId appE = ApplicationAttemptId.newInstance(\n      ApplicationId.newInstance(TS, 4), 0);", "modifier": "final", "type": "ApplicationAttemptId", "declarator": "appE = ApplicationAttemptId.newInstance(\n      ApplicationId.newInstance(TS, 4), 0)", "var_name": "appE"}, {"original_string": "final ApplicationAttemptId appF = ApplicationAttemptId.newInstance(\n      ApplicationId.newInstance(TS, 4), 0);", "modifier": "final", "type": "ApplicationAttemptId", "declarator": "appF = ApplicationAttemptId.newInstance(\n      ApplicationId.newInstance(TS, 4), 0)", "var_name": "appF"}, {"original_string": "final ArgumentCaptor<ContainerPreemptEvent> evtCaptor =\n    ArgumentCaptor.forClass(ContainerPreemptEvent.class);", "modifier": "final", "type": "ArgumentCaptor<ContainerPreemptEvent>", "declarator": "evtCaptor =\n    ArgumentCaptor.forClass(ContainerPreemptEvent.class)", "var_name": "evtCaptor"}, {"original_string": "@Rule public TestName name = new TestName();", "modifier": "@Rule public", "type": "TestName", "declarator": "name = new TestName()", "var_name": "name"}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/TestProportionalCapacityPreemptionPolicy.java"}, "test_case": {"identifier": "testHierarchical", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHierarchical() {\n    int[][] qData = new int[][] {\n      //  /    A   B   C    D   E   F\n      { 200, 100, 50, 50, 100, 10, 90 },  // abs\n      { 200, 200, 200, 200, 200, 200, 200 },  // maxCap\n      { 200, 110, 60, 50,  90, 90,  0 },  // used\n      {  10,   0,  0,  0,  10,  0, 10 },  // pending\n      {   0,   0,  0,  0,   0,  0,  0 },  // reserved\n      {   4,   2,  1,  1,   2,  1,  1 },  // apps\n      {  -1,  -1,  1,  1,  -1,  1,  1 },  // req granularity\n      {   2,   2,  0,  0,   2,  0,  0 },  // subqueues\n    };\n    ProportionalCapacityPreemptionPolicy policy = buildPolicy(qData);\n    policy.editSchedule();\n    // verify capacity taken from A1, not B1 despite B1 being far over\n    // its absolute guaranteed capacity\n    verify(mDisp, times(9)).handle(argThat(new IsPreemptionRequestFor(appA)));\n  }", "signature": "void testHierarchical()", "full_signature": "@Test public void testHierarchical()", "class_method_signature": "TestProportionalCapacityPreemptionPolicy.testHierarchical()", "testcase": true, "constructor": false, "invocations": ["buildPolicy", "editSchedule", "handle", "verify", "times", "argThat"]}, "focal_class": {"identifier": "ProportionalCapacityPreemptionPolicy", "superclass": "", "interfaces": "implements SchedulingEditPolicy", "fields": [{"original_string": "private static final Log LOG =\n    LogFactory.getLog(ProportionalCapacityPreemptionPolicy.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG =\n    LogFactory.getLog(ProportionalCapacityPreemptionPolicy.class)", "var_name": "LOG"}, {"original_string": "public static final String OBSERVE_ONLY =\n      \"yarn.resourcemanager.monitor.capacity.preemption.observe_only\";", "modifier": "public static final", "type": "String", "declarator": "OBSERVE_ONLY =\n      \"yarn.resourcemanager.monitor.capacity.preemption.observe_only\"", "var_name": "OBSERVE_ONLY"}, {"original_string": "public static final String MONITORING_INTERVAL =\n      \"yarn.resourcemanager.monitor.capacity.preemption.monitoring_interval\";", "modifier": "public static final", "type": "String", "declarator": "MONITORING_INTERVAL =\n      \"yarn.resourcemanager.monitor.capacity.preemption.monitoring_interval\"", "var_name": "MONITORING_INTERVAL"}, {"original_string": "public static final String WAIT_TIME_BEFORE_KILL =\n      \"yarn.resourcemanager.monitor.capacity.preemption.max_wait_before_kill\";", "modifier": "public static final", "type": "String", "declarator": "WAIT_TIME_BEFORE_KILL =\n      \"yarn.resourcemanager.monitor.capacity.preemption.max_wait_before_kill\"", "var_name": "WAIT_TIME_BEFORE_KILL"}, {"original_string": "public static final String TOTAL_PREEMPTION_PER_ROUND =\n      \"yarn.resourcemanager.monitor.capacity.preemption.total_preemption_per_round\";", "modifier": "public static final", "type": "String", "declarator": "TOTAL_PREEMPTION_PER_ROUND =\n      \"yarn.resourcemanager.monitor.capacity.preemption.total_preemption_per_round\"", "var_name": "TOTAL_PREEMPTION_PER_ROUND"}, {"original_string": "public static final String MAX_IGNORED_OVER_CAPACITY =\n    \"yarn.resourcemanager.monitor.capacity.preemption.max_ignored_over_capacity\";", "modifier": "public static final", "type": "String", "declarator": "MAX_IGNORED_OVER_CAPACITY =\n    \"yarn.resourcemanager.monitor.capacity.preemption.max_ignored_over_capacity\"", "var_name": "MAX_IGNORED_OVER_CAPACITY"}, {"original_string": "public static final String NATURAL_TERMINATION_FACTOR =\n      \"yarn.resourcemanager.monitor.capacity.preemption.natural_termination_factor\";", "modifier": "public static final", "type": "String", "declarator": "NATURAL_TERMINATION_FACTOR =\n      \"yarn.resourcemanager.monitor.capacity.preemption.natural_termination_factor\"", "var_name": "NATURAL_TERMINATION_FACTOR"}, {"original_string": "private RMContext rmContext;", "modifier": "private", "type": "RMContext", "declarator": "rmContext", "var_name": "rmContext"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private double maxIgnoredOverCapacity;", "modifier": "private", "type": "double", "declarator": "maxIgnoredOverCapacity", "var_name": "maxIgnoredOverCapacity"}, {"original_string": "private long maxWaitTime;", "modifier": "private", "type": "long", "declarator": "maxWaitTime", "var_name": "maxWaitTime"}, {"original_string": "private CapacityScheduler scheduler;", "modifier": "private", "type": "CapacityScheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private long monitoringInterval;", "modifier": "private", "type": "long", "declarator": "monitoringInterval", "var_name": "monitoringInterval"}, {"original_string": "private final Map<RMContainer,Long> preempted =\n    new HashMap<RMContainer,Long>();", "modifier": "private final", "type": "Map<RMContainer,Long>", "declarator": "preempted =\n    new HashMap<RMContainer,Long>()", "var_name": "preempted"}, {"original_string": "private ResourceCalculator rc;", "modifier": "private", "type": "ResourceCalculator", "declarator": "rc", "var_name": "rc"}, {"original_string": "private float percentageClusterPreemptionAllowed;", "modifier": "private", "type": "float", "declarator": "percentageClusterPreemptionAllowed", "var_name": "percentageClusterPreemptionAllowed"}, {"original_string": "private double naturalTerminationFactor;", "modifier": "private", "type": "double", "declarator": "naturalTerminationFactor", "var_name": "naturalTerminationFactor"}, {"original_string": "private boolean observeOnly;", "modifier": "private", "type": "boolean", "declarator": "observeOnly", "var_name": "observeOnly"}, {"original_string": "private Map<NodeId, Set<String>> labels;", "modifier": "private", "type": "Map<NodeId, Set<String>>", "declarator": "labels", "var_name": "labels"}], "methods": [{"identifier": "ProportionalCapacityPreemptionPolicy", "parameters": "()", "modifiers": "public", "return": "", "signature": " ProportionalCapacityPreemptionPolicy()", "full_signature": "public  ProportionalCapacityPreemptionPolicy()", "class_method_signature": "ProportionalCapacityPreemptionPolicy.ProportionalCapacityPreemptionPolicy()", "testcase": false, "constructor": true}, {"identifier": "ProportionalCapacityPreemptionPolicy", "parameters": "(Configuration config,\n      RMContext context, CapacityScheduler scheduler)", "modifiers": "public", "return": "", "signature": " ProportionalCapacityPreemptionPolicy(Configuration config,\n      RMContext context, CapacityScheduler scheduler)", "full_signature": "public  ProportionalCapacityPreemptionPolicy(Configuration config,\n      RMContext context, CapacityScheduler scheduler)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.ProportionalCapacityPreemptionPolicy(Configuration config,\n      RMContext context, CapacityScheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "ProportionalCapacityPreemptionPolicy", "parameters": "(Configuration config,\n      RMContext context, CapacityScheduler scheduler, Clock clock)", "modifiers": "public", "return": "", "signature": " ProportionalCapacityPreemptionPolicy(Configuration config,\n      RMContext context, CapacityScheduler scheduler, Clock clock)", "full_signature": "public  ProportionalCapacityPreemptionPolicy(Configuration config,\n      RMContext context, CapacityScheduler scheduler, Clock clock)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.ProportionalCapacityPreemptionPolicy(Configuration config,\n      RMContext context, CapacityScheduler scheduler, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Configuration config, RMContext context,\n      PreemptableResourceScheduler sched)", "modifiers": "public", "return": "void", "signature": "void init(Configuration config, RMContext context,\n      PreemptableResourceScheduler sched)", "full_signature": "public void init(Configuration config, RMContext context,\n      PreemptableResourceScheduler sched)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.init(Configuration config, RMContext context,\n      PreemptableResourceScheduler sched)", "testcase": false, "constructor": false}, {"identifier": "getResourceCalculator", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "ResourceCalculator", "signature": "ResourceCalculator getResourceCalculator()", "full_signature": "@VisibleForTesting public ResourceCalculator getResourceCalculator()", "class_method_signature": "ProportionalCapacityPreemptionPolicy.getResourceCalculator()", "testcase": false, "constructor": false}, {"identifier": "editSchedule", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void editSchedule()", "full_signature": "@Override public void editSchedule()", "class_method_signature": "ProportionalCapacityPreemptionPolicy.editSchedule()", "testcase": false, "constructor": false}, {"identifier": "setNodeLabels", "parameters": "(Map<NodeId, Set<String>> nodelabels)", "modifiers": "public", "return": "void", "signature": "void setNodeLabels(Map<NodeId, Set<String>> nodelabels)", "full_signature": "public void setNodeLabels(Map<NodeId, Set<String>> nodelabels)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.setNodeLabels(Map<NodeId, Set<String>> nodelabels)", "testcase": false, "constructor": false}, {"identifier": "getNonLabeledResources", "parameters": "(Resource clusterResources)", "modifiers": "private", "return": "Resource", "signature": "Resource getNonLabeledResources(Resource clusterResources)", "full_signature": "private Resource getNonLabeledResources(Resource clusterResources)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.getNonLabeledResources(Resource clusterResources)", "testcase": false, "constructor": false}, {"identifier": "containerBasedPreemptOrKill", "parameters": "(CSQueue root,\n      Resource clusterResources)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void containerBasedPreemptOrKill(CSQueue root,\n      Resource clusterResources)", "full_signature": "@SuppressWarnings(\"unchecked\") private void containerBasedPreemptOrKill(CSQueue root,\n      Resource clusterResources)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.containerBasedPreemptOrKill(CSQueue root,\n      Resource clusterResources)", "testcase": false, "constructor": false}, {"identifier": "recursivelyComputeIdealAssignment", "parameters": "(\n      TempQueue root, Resource totalPreemptionAllowed)", "modifiers": "private", "return": "List<TempQueue>", "signature": "List<TempQueue> recursivelyComputeIdealAssignment(\n      TempQueue root, Resource totalPreemptionAllowed)", "full_signature": "private List<TempQueue> recursivelyComputeIdealAssignment(\n      TempQueue root, Resource totalPreemptionAllowed)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.recursivelyComputeIdealAssignment(\n      TempQueue root, Resource totalPreemptionAllowed)", "testcase": false, "constructor": false}, {"identifier": "computeIdealResourceDistribution", "parameters": "(ResourceCalculator rc,\n      List<TempQueue> queues, Resource totalPreemptionAllowed, Resource tot_guarant)", "modifiers": "private", "return": "void", "signature": "void computeIdealResourceDistribution(ResourceCalculator rc,\n      List<TempQueue> queues, Resource totalPreemptionAllowed, Resource tot_guarant)", "full_signature": "private void computeIdealResourceDistribution(ResourceCalculator rc,\n      List<TempQueue> queues, Resource totalPreemptionAllowed, Resource tot_guarant)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.computeIdealResourceDistribution(ResourceCalculator rc,\n      List<TempQueue> queues, Resource totalPreemptionAllowed, Resource tot_guarant)", "testcase": false, "constructor": false}, {"identifier": "computeFixpointAllocation", "parameters": "(ResourceCalculator rc,\n      Resource tot_guarant, Collection<TempQueue> qAlloc, Resource unassigned, \n      boolean ignoreGuarantee)", "modifiers": "private", "return": "void", "signature": "void computeFixpointAllocation(ResourceCalculator rc,\n      Resource tot_guarant, Collection<TempQueue> qAlloc, Resource unassigned, \n      boolean ignoreGuarantee)", "full_signature": "private void computeFixpointAllocation(ResourceCalculator rc,\n      Resource tot_guarant, Collection<TempQueue> qAlloc, Resource unassigned, \n      boolean ignoreGuarantee)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.computeFixpointAllocation(ResourceCalculator rc,\n      Resource tot_guarant, Collection<TempQueue> qAlloc, Resource unassigned, \n      boolean ignoreGuarantee)", "testcase": false, "constructor": false}, {"identifier": "getMostUnderservedQueues", "parameters": "(\n      PriorityQueue<TempQueue> orderedByNeed, TQComparator tqComparator)", "modifiers": "protected", "return": "Collection<TempQueue>", "signature": "Collection<TempQueue> getMostUnderservedQueues(\n      PriorityQueue<TempQueue> orderedByNeed, TQComparator tqComparator)", "full_signature": "protected Collection<TempQueue> getMostUnderservedQueues(\n      PriorityQueue<TempQueue> orderedByNeed, TQComparator tqComparator)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.getMostUnderservedQueues(\n      PriorityQueue<TempQueue> orderedByNeed, TQComparator tqComparator)", "testcase": false, "constructor": false}, {"identifier": "resetCapacity", "parameters": "(ResourceCalculator rc, Resource clusterResource,\n      Collection<TempQueue> queues, boolean ignoreGuar)", "modifiers": "private", "return": "void", "signature": "void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      Collection<TempQueue> queues, boolean ignoreGuar)", "full_signature": "private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      Collection<TempQueue> queues, boolean ignoreGuar)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      Collection<TempQueue> queues, boolean ignoreGuar)", "testcase": false, "constructor": false}, {"identifier": "getContainersToPreempt", "parameters": "(\n      List<TempQueue> queues, Resource clusterResource)", "modifiers": "private", "return": "Map<ApplicationAttemptId,Set<RMContainer>>", "signature": "Map<ApplicationAttemptId,Set<RMContainer>> getContainersToPreempt(\n      List<TempQueue> queues, Resource clusterResource)", "full_signature": "private Map<ApplicationAttemptId,Set<RMContainer>> getContainersToPreempt(\n      List<TempQueue> queues, Resource clusterResource)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.getContainersToPreempt(\n      List<TempQueue> queues, Resource clusterResource)", "testcase": false, "constructor": false}, {"identifier": "preemptAMContainers", "parameters": "(Resource clusterResource,\n      Map<ApplicationAttemptId, Set<RMContainer>> preemptMap,\n      List<RMContainer> skippedAMContainerlist, Resource resToObtain,\n      Resource skippedAMSize, Resource maxAMCapacityForThisQueue)", "modifiers": "private", "return": "void", "signature": "void preemptAMContainers(Resource clusterResource,\n      Map<ApplicationAttemptId, Set<RMContainer>> preemptMap,\n      List<RMContainer> skippedAMContainerlist, Resource resToObtain,\n      Resource skippedAMSize, Resource maxAMCapacityForThisQueue)", "full_signature": "private void preemptAMContainers(Resource clusterResource,\n      Map<ApplicationAttemptId, Set<RMContainer>> preemptMap,\n      List<RMContainer> skippedAMContainerlist, Resource resToObtain,\n      Resource skippedAMSize, Resource maxAMCapacityForThisQueue)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.preemptAMContainers(Resource clusterResource,\n      Map<ApplicationAttemptId, Set<RMContainer>> preemptMap,\n      List<RMContainer> skippedAMContainerlist, Resource resToObtain,\n      Resource skippedAMSize, Resource maxAMCapacityForThisQueue)", "testcase": false, "constructor": false}, {"identifier": "preemptFrom", "parameters": "(FiCaSchedulerApp app,\n      Resource clusterResource, Resource rsrcPreempt,\n      List<RMContainer> skippedAMContainerlist, Resource skippedAMSize)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Set<RMContainer>", "signature": "Set<RMContainer> preemptFrom(FiCaSchedulerApp app,\n      Resource clusterResource, Resource rsrcPreempt,\n      List<RMContainer> skippedAMContainerlist, Resource skippedAMSize)", "full_signature": "@SuppressWarnings(\"unchecked\") private Set<RMContainer> preemptFrom(FiCaSchedulerApp app,\n      Resource clusterResource, Resource rsrcPreempt,\n      List<RMContainer> skippedAMContainerlist, Resource skippedAMSize)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.preemptFrom(FiCaSchedulerApp app,\n      Resource clusterResource, Resource rsrcPreempt,\n      List<RMContainer> skippedAMContainerlist, Resource skippedAMSize)", "testcase": false, "constructor": false}, {"identifier": "isLabeledContainer", "parameters": "(RMContainer c)", "modifiers": "private", "return": "boolean", "signature": "boolean isLabeledContainer(RMContainer c)", "full_signature": "private boolean isLabeledContainer(RMContainer c)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.isLabeledContainer(RMContainer c)", "testcase": false, "constructor": false}, {"identifier": "sortContainers", "parameters": "(List<RMContainer> containers)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void sortContainers(List<RMContainer> containers)", "full_signature": "@VisibleForTesting static void sortContainers(List<RMContainer> containers)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.sortContainers(List<RMContainer> containers)", "testcase": false, "constructor": false}, {"identifier": "getMonitoringInterval", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getMonitoringInterval()", "full_signature": "@Override public long getMonitoringInterval()", "class_method_signature": "ProportionalCapacityPreemptionPolicy.getMonitoringInterval()", "testcase": false, "constructor": false}, {"identifier": "getPolicyName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPolicyName()", "full_signature": "@Override public String getPolicyName()", "class_method_signature": "ProportionalCapacityPreemptionPolicy.getPolicyName()", "testcase": false, "constructor": false}, {"identifier": "cloneQueues", "parameters": "(CSQueue root, Resource clusterResources)", "modifiers": "private", "return": "TempQueue", "signature": "TempQueue cloneQueues(CSQueue root, Resource clusterResources)", "full_signature": "private TempQueue cloneQueues(CSQueue root, Resource clusterResources)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.cloneQueues(CSQueue root, Resource clusterResources)", "testcase": false, "constructor": false}, {"identifier": "logToCSV", "parameters": "(List<TempQueue> unorderedqueues)", "modifiers": "private", "return": "void", "signature": "void logToCSV(List<TempQueue> unorderedqueues)", "full_signature": "private void logToCSV(List<TempQueue> unorderedqueues)", "class_method_signature": "ProportionalCapacityPreemptionPolicy.logToCSV(List<TempQueue> unorderedqueues)", "testcase": false, "constructor": false}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java"}, "focal_method": {"identifier": "editSchedule", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void editSchedule() {\n    CSQueue root = scheduler.getRootQueue();\n    Resource clusterResources = Resources.clone(scheduler.getClusterResource());\n    clusterResources = getNonLabeledResources(clusterResources);\n    setNodeLabels(scheduler.getRMContext().getNodeLabelManager()\n        .getNodeLabels());\n    containerBasedPreemptOrKill(root, clusterResources);\n  }", "signature": "void editSchedule()", "full_signature": "@Override public void editSchedule()", "class_method_signature": "ProportionalCapacityPreemptionPolicy.editSchedule()", "testcase": false, "constructor": false, "invocations": ["getRootQueue", "clone", "getClusterResource", "getNonLabeledResources", "setNodeLabels", "getNodeLabels", "getNodeLabelManager", "getRMContext", "containerBasedPreemptOrKill"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}