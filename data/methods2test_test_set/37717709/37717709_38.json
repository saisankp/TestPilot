{"test_class": {"identifier": "TestTextSenderThread", "superclass": "", "interfaces": "implements TextListener", "fields": [{"original_string": "private static final int MAX_WAIT = 1000;", "modifier": "private static final", "type": "int", "declarator": "MAX_WAIT = 1000", "var_name": "MAX_WAIT"}, {"original_string": "private static final int PORT = 5354;", "modifier": "private static final", "type": "int", "declarator": "PORT = 5354", "var_name": "PORT"}, {"original_string": "private TextServer server;", "modifier": "private", "type": "TextServer", "declarator": "server", "var_name": "server"}, {"original_string": "private TextSenderThread sender;", "modifier": "private", "type": "TextSenderThread", "declarator": "sender", "var_name": "sender"}, {"original_string": "private final Object lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "private SsmlDocument receivedObject;", "modifier": "private", "type": "SsmlDocument", "declarator": "receivedObject", "var_name": "receivedObject"}], "file": "org.jvoicexml.implementation.text/src/test/java/org/jvoicexml/implementation/text/TestTextSenderThread.java"}, "test_case": {"identifier": "testSendData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSendData() throws Exception {\n        final String test1 = \"test1\";\n        final SpeakableSsmlText speakable1 = new SpeakableSsmlText(test1,\n                Locale.US);\n        sender.sendData(speakable1);\n        synchronized (lock) {\n            lock.wait(MAX_WAIT);\n        }\n        assertEquals(speakable1.getDocument(), receivedObject);\n    }", "signature": "void testSendData()", "full_signature": "@Test public void testSendData()", "class_method_signature": "TestTextSenderThread.testSendData()", "testcase": true, "constructor": false, "invocations": ["sendData", "wait", "assertEquals", "getDocument"]}, "focal_class": {"identifier": "TextSenderThread", "superclass": "extends Thread", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger\n            .getLogger(TextSenderThread.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger\n            .getLogger(TextSenderThread.class)", "var_name": "LOGGER"}, {"original_string": "private final Socket socket;", "modifier": "private final", "type": "Socket", "declarator": "socket", "var_name": "socket"}, {"original_string": "private final TextTelephony telephony;", "modifier": "private final", "type": "TextTelephony", "declarator": "telephony", "var_name": "telephony"}, {"original_string": "private final BlockingQueue<PendingMessage> messages;", "modifier": "private final", "type": "BlockingQueue<PendingMessage>", "declarator": "messages", "var_name": "messages"}, {"original_string": "private int sequenceNumber;", "modifier": "private", "type": "int", "declarator": "sequenceNumber", "var_name": "sequenceNumber"}, {"original_string": "private final Object lock;", "modifier": "private final", "type": "Object", "declarator": "lock", "var_name": "lock"}, {"original_string": "private boolean acknowledgeBye;", "modifier": "private", "type": "boolean", "declarator": "acknowledgeBye", "var_name": "acknowledgeBye"}, {"original_string": "private boolean sending;", "modifier": "private", "type": "boolean", "declarator": "sending", "var_name": "sending"}], "methods": [{"identifier": "TextSenderThread", "parameters": "(final Socket asyncSocket,\n            final TextTelephony textTelephony)", "modifiers": "", "return": "", "signature": " TextSenderThread(final Socket asyncSocket,\n            final TextTelephony textTelephony)", "full_signature": "  TextSenderThread(final Socket asyncSocket,\n            final TextTelephony textTelephony)", "class_method_signature": "TextSenderThread.TextSenderThread(final Socket asyncSocket,\n            final TextTelephony textTelephony)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "TextSenderThread.run()", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(final PendingMessage pending)", "modifiers": "private", "return": "void", "signature": "void sendMessage(final PendingMessage pending)", "full_signature": "private void sendMessage(final PendingMessage pending)", "class_method_signature": "TextSenderThread.sendMessage(final PendingMessage pending)", "testcase": false, "constructor": false}, {"identifier": "waitSenderTerminated", "parameters": "()", "modifiers": "", "return": "void", "signature": "void waitSenderTerminated()", "full_signature": " void waitSenderTerminated()", "class_method_signature": "TextSenderThread.waitSenderTerminated()", "testcase": false, "constructor": false}, {"identifier": "sendData", "parameters": "(final SpeakableText speakable)", "modifiers": "public", "return": "void", "signature": "void sendData(final SpeakableText speakable)", "full_signature": "public void sendData(final SpeakableText speakable)", "class_method_signature": "TextSenderThread.sendData(final SpeakableText speakable)", "testcase": false, "constructor": false}, {"identifier": "sendExpectingInput", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sendExpectingInput()", "full_signature": "public void sendExpectingInput()", "class_method_signature": "TextSenderThread.sendExpectingInput()", "testcase": false, "constructor": false}, {"identifier": "sendClosedInput", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sendClosedInput()", "full_signature": "public void sendClosedInput()", "class_method_signature": "TextSenderThread.sendClosedInput()", "testcase": false, "constructor": false}, {"identifier": "sendBye", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sendBye()", "full_signature": "public void sendBye()", "class_method_signature": "TextSenderThread.sendBye()", "testcase": false, "constructor": false}, {"identifier": "sendAck", "parameters": "(final TextMessage message)", "modifiers": "public", "return": "void", "signature": "void sendAck(final TextMessage message)", "full_signature": "public void sendAck(final TextMessage message)", "class_method_signature": "TextSenderThread.sendAck(final TextMessage message)", "testcase": false, "constructor": false}, {"identifier": "isSending", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSending()", "full_signature": "public boolean isSending()", "class_method_signature": "TextSenderThread.isSending()", "testcase": false, "constructor": false}], "file": "org.jvoicexml.implementation.text/src/main/java/org/jvoicexml/implementation/text/TextSenderThread.java"}, "focal_method": {"identifier": "sendData", "parameters": "(final SpeakableText speakable)", "modifiers": "public", "return": "void", "body": "public void sendData(final SpeakableText speakable) {\n        final String ssml = speakable.getSpeakableText();\n        final TextMessage message = TextMessage.newBuilder()\n                .setType(TextMessageType.SSML).setData(ssml)\n                .setSequenceNumber(sequenceNumber++).build();\n        final PendingMessage pending = new PendingMessage(message, speakable);\n        messages.add(pending);\n    }", "signature": "void sendData(final SpeakableText speakable)", "full_signature": "public void sendData(final SpeakableText speakable)", "class_method_signature": "TextSenderThread.sendData(final SpeakableText speakable)", "testcase": false, "constructor": false, "invocations": ["getSpeakableText", "build", "setSequenceNumber", "setData", "setType", "newBuilder", "add"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}