{"test_class": {"identifier": "LogicalNodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "model/rql/src/test/java/org/eclipse/ditto/model/rql/predicates/ast/LogicalNodeTest.java"}, "test_case": {"identifier": "validToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validToString() {\n        assertThat(new LogicalNode(\"and\").toString()).startsWith(\"LogicalNode \");\n    }", "signature": "void validToString()", "full_signature": "@Test public void validToString()", "class_method_signature": "LogicalNodeTest.validToString()", "testcase": true, "constructor": false, "invocations": ["startsWith", "assertThat", "toString"]}, "focal_class": {"identifier": "LogicalNode", "superclass": "extends SuperNode", "interfaces": "", "fields": [{"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final Type type;", "modifier": "private final", "type": "Type", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "LogicalNode", "parameters": "(final String name)", "modifiers": "public", "return": "", "signature": " LogicalNode(final String name)", "full_signature": "public  LogicalNode(final String name)", "class_method_signature": "LogicalNode.LogicalNode(final String name)", "testcase": false, "constructor": true}, {"identifier": "LogicalNode", "parameters": "(final Type type)", "modifiers": "public", "return": "", "signature": " LogicalNode(final Type type)", "full_signature": "public  LogicalNode(final Type type)", "class_method_signature": "LogicalNode.LogicalNode(final Type type)", "testcase": false, "constructor": true}, {"identifier": "LogicalNode", "parameters": "(final Type type, final Node... subNodes)", "modifiers": "public", "return": "", "signature": " LogicalNode(final Type type, final Node... subNodes)", "full_signature": "public  LogicalNode(final Type type, final Node... subNodes)", "class_method_signature": "LogicalNode.LogicalNode(final Type type, final Node... subNodes)", "testcase": false, "constructor": true}, {"identifier": "LogicalNode", "parameters": "(final Type type, final Collection<Node> subNodes)", "modifiers": "public", "return": "", "signature": " LogicalNode(final Type type, final Collection<Node> subNodes)", "full_signature": "public  LogicalNode(final Type type, final Collection<Node> subNodes)", "class_method_signature": "LogicalNode.LogicalNode(final Type type, final Collection<Node> subNodes)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "LogicalNode.getName()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Type", "signature": "Type getType()", "full_signature": "public Type getType()", "class_method_signature": "LogicalNode.getType()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(final PredicateVisitor predicateVisitor)", "modifiers": "@Override public", "return": "void", "signature": "void accept(final PredicateVisitor predicateVisitor)", "full_signature": "@Override public void accept(final PredicateVisitor predicateVisitor)", "class_method_signature": "LogicalNode.accept(final PredicateVisitor predicateVisitor)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LogicalNode.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@SuppressWarnings(\"squid:S109\") @Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@SuppressWarnings(\"squid:S109\") @Override public int hashCode()", "class_method_signature": "LogicalNode.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@SuppressWarnings(\"squid:MethodCyclomaticComplexity\") @Override public", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@SuppressWarnings(\"squid:MethodCyclomaticComplexity\") @Override public boolean equals(final Object obj)", "class_method_signature": "LogicalNode.equals(final Object obj)", "testcase": false, "constructor": false}], "file": "model/rql/src/main/java/org/eclipse/ditto/model/rql/predicates/ast/LogicalNode.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        return \"LogicalNode [name=\" + name + \", type=\" + type + \", children=\" + getChildren() + \"]\";\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LogicalNode.toString()", "testcase": false, "constructor": false, "invocations": ["getChildren"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}