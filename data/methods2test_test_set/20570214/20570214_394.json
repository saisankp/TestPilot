{"test_class": {"identifier": "AesCmacKeyManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/mac/AesCmacKeyManagerTest.java"}, "test_case": {"identifier": "testAes256CmacTemplate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAes256CmacTemplate() throws Exception {\n    KeyTemplate template = AesCmacKeyManager.aes256CmacTemplate();\n    assertThat(template.getTypeUrl()).isEqualTo(new AesCmacKeyManager().getKeyType());\n    assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.TINK);\n    AesCmacKeyFormat format =\n        AesCmacKeyFormat.parseFrom(template.getValue(), ExtensionRegistryLite.getEmptyRegistry());\n\n    assertThat(format.getKeySize()).isEqualTo(32);\n    assertThat(format.getParams().getTagSize()).isEqualTo(16);\n  }", "signature": "void testAes256CmacTemplate()", "full_signature": "@Test public void testAes256CmacTemplate()", "class_method_signature": "AesCmacKeyManagerTest.testAes256CmacTemplate()", "testcase": true, "constructor": false, "invocations": ["aes256CmacTemplate", "isEqualTo", "assertThat", "getTypeUrl", "getKeyType", "isEqualTo", "assertThat", "getOutputPrefixType", "parseFrom", "getValue", "getEmptyRegistry", "isEqualTo", "assertThat", "getKeySize", "isEqualTo", "assertThat", "getTagSize", "getParams"]}, "focal_class": {"identifier": "AesCmacKeyManager", "superclass": "extends KeyTypeManager<AesCmacKey>", "interfaces": "", "fields": [{"original_string": "private static final int VERSION = 0;", "modifier": "private static final", "type": "int", "declarator": "VERSION = 0", "var_name": "VERSION"}, {"original_string": "private static final int KEY_SIZE_IN_BYTES = 32;", "modifier": "private static final", "type": "int", "declarator": "KEY_SIZE_IN_BYTES = 32", "var_name": "KEY_SIZE_IN_BYTES"}, {"original_string": "private static final int MIN_TAG_SIZE_IN_BYTES = 10;", "modifier": "private static final", "type": "int", "declarator": "MIN_TAG_SIZE_IN_BYTES = 10", "var_name": "MIN_TAG_SIZE_IN_BYTES"}, {"original_string": "private static final int MAX_TAG_SIZE_IN_BYTES = 16;", "modifier": "private static final", "type": "int", "declarator": "MAX_TAG_SIZE_IN_BYTES = 16", "var_name": "MAX_TAG_SIZE_IN_BYTES"}], "methods": [{"identifier": "AesCmacKeyManager", "parameters": "()", "modifiers": "", "return": "", "signature": " AesCmacKeyManager()", "full_signature": "  AesCmacKeyManager()", "class_method_signature": "AesCmacKeyManager.AesCmacKeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "AesCmacKeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "AesCmacKeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "AesCmacKeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(AesCmacKey key)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(AesCmacKey key)", "full_signature": "@Override public void validateKey(AesCmacKey key)", "class_method_signature": "AesCmacKeyManager.validateKey(AesCmacKey key)", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "AesCmacKey", "signature": "AesCmacKey parseKey(ByteString byteString)", "full_signature": "@Override public AesCmacKey parseKey(ByteString byteString)", "class_method_signature": "AesCmacKeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "validateParams", "parameters": "(AesCmacParams params)", "modifiers": "private static", "return": "void", "signature": "void validateParams(AesCmacParams params)", "full_signature": "private static void validateParams(AesCmacParams params)", "class_method_signature": "AesCmacKeyManager.validateParams(AesCmacParams params)", "testcase": false, "constructor": false}, {"identifier": "validateSize", "parameters": "(int size)", "modifiers": "private static", "return": "void", "signature": "void validateSize(int size)", "full_signature": "private static void validateSize(int size)", "class_method_signature": "AesCmacKeyManager.validateSize(int size)", "testcase": false, "constructor": false}, {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<AesCmacKeyFormat, AesCmacKey>", "signature": "KeyFactory<AesCmacKeyFormat, AesCmacKey> keyFactory()", "full_signature": "@Override public KeyFactory<AesCmacKeyFormat, AesCmacKey> keyFactory()", "class_method_signature": "AesCmacKeyManager.keyFactory()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(boolean newKeyAllowed)", "modifiers": "public static", "return": "void", "signature": "void register(boolean newKeyAllowed)", "full_signature": "public static void register(boolean newKeyAllowed)", "class_method_signature": "AesCmacKeyManager.register(boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "aes256CmacTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate aes256CmacTemplate()", "full_signature": "public static final KeyTemplate aes256CmacTemplate()", "class_method_signature": "AesCmacKeyManager.aes256CmacTemplate()", "testcase": false, "constructor": false}, {"identifier": "rawAes256CmacTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate rawAes256CmacTemplate()", "full_signature": "public static final KeyTemplate rawAes256CmacTemplate()", "class_method_signature": "AesCmacKeyManager.rawAes256CmacTemplate()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/mac/AesCmacKeyManager.java"}, "focal_method": {"identifier": "aes256CmacTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "body": "public static final KeyTemplate aes256CmacTemplate() {\n    AesCmacKeyFormat format =\n        AesCmacKeyFormat.newBuilder()\n            .setKeySize(32)\n            .setParams(AesCmacParams.newBuilder().setTagSize(16).build())\n            .build();\n    return KeyTemplate.create(\n        new AesCmacKeyManager().getKeyType(),\n        format.toByteArray(),\n        KeyTemplate.OutputPrefixType.TINK);\n  }", "signature": "KeyTemplate aes256CmacTemplate()", "full_signature": "public static final KeyTemplate aes256CmacTemplate()", "class_method_signature": "AesCmacKeyManager.aes256CmacTemplate()", "testcase": false, "constructor": false, "invocations": ["build", "setParams", "setKeySize", "newBuilder", "build", "setTagSize", "newBuilder", "create", "getKeyType", "toByteArray"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}