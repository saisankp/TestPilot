{"test_class": {"identifier": "ServletContextImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SessionStorage sessionStorage;", "modifier": "private", "type": "SessionStorage", "declarator": "sessionStorage", "var_name": "sessionStorage"}, {"original_string": "private ServletContextImpl servletContext;", "modifier": "private", "type": "ServletContextImpl", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "private HttpServletResponseImpl response;", "modifier": "private", "type": "HttpServletResponseImpl", "declarator": "response", "var_name": "response"}], "file": "http/src/test/java/ro/polak/http/servlet/impl/ServletContextImplTest.java"}, "test_case": {"identifier": "shouldRemoveExpiredSession", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRemoveExpiredSession() throws IOException {\n        HttpSessionImpl session = new HttpSessionImpl(\"123\", System.currentTimeMillis());\n        session.setLastAccessedTime(System.currentTimeMillis() - session.getMaxInactiveInterval() * 1000 - 1);\n        when(sessionStorage.getSession(\"123\")).thenReturn(session);\n        HttpSessionImpl sessionRead = servletContext.getSession(\"123\");\n        verify(sessionStorage, times(1)).removeSession(session);\n        assertThat(sessionRead, is(nullValue()));\n    }", "signature": "void shouldRemoveExpiredSession()", "full_signature": "@Test public void shouldRemoveExpiredSession()", "class_method_signature": "ServletContextImplTest.shouldRemoveExpiredSession()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "setLastAccessedTime", "currentTimeMillis", "getMaxInactiveInterval", "thenReturn", "when", "getSession", "getSession", "removeSession", "verify", "times", "assertThat", "is", "nullValue"]}, "focal_class": {"identifier": "ServletContextImpl", "superclass": "", "interfaces": "implements ServletContext", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(ServletContextImpl.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(ServletContextImpl.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static final int MS_IN_SECOND = 1000;", "modifier": "private static final", "type": "int", "declarator": "MS_IN_SECOND = 1000", "var_name": "MS_IN_SECOND"}, {"original_string": "public static final int MAX_AGE_IN_PAST = -100;", "modifier": "public static final", "type": "int", "declarator": "MAX_AGE_IN_PAST = -100", "var_name": "MAX_AGE_IN_PAST"}, {"original_string": "private final ServerConfig serverConfig;", "modifier": "private final", "type": "ServerConfig", "declarator": "serverConfig", "var_name": "serverConfig"}, {"original_string": "private final SessionStorage sessionStorage;", "modifier": "private final", "type": "SessionStorage", "declarator": "sessionStorage", "var_name": "sessionStorage"}, {"original_string": "private final String contextPath;", "modifier": "private final", "type": "String", "declarator": "contextPath", "var_name": "contextPath"}, {"original_string": "private final List<ServletMapping> servletMappings;", "modifier": "private final", "type": "List<ServletMapping>", "declarator": "servletMappings", "var_name": "servletMappings"}, {"original_string": "private final List<FilterMapping> filterMappings;", "modifier": "private final", "type": "List<FilterMapping>", "declarator": "filterMappings", "var_name": "filterMappings"}, {"original_string": "private final Map<String, Object> attributes;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "attributes", "var_name": "attributes"}], "methods": [{"identifier": "ServletContextImpl", "parameters": "(final String contextPath,\n                              final List<ServletMapping> servletMappings,\n                              final List<FilterMapping> filterMappings,\n                              final Map<String, Object> attributes,\n                              final ServerConfig serverConfig,\n                              final SessionStorage sessionStorage)", "modifiers": "public", "return": "", "signature": " ServletContextImpl(final String contextPath,\n                              final List<ServletMapping> servletMappings,\n                              final List<FilterMapping> filterMappings,\n                              final Map<String, Object> attributes,\n                              final ServerConfig serverConfig,\n                              final SessionStorage sessionStorage)", "full_signature": "public  ServletContextImpl(final String contextPath,\n                              final List<ServletMapping> servletMappings,\n                              final List<FilterMapping> filterMappings,\n                              final Map<String, Object> attributes,\n                              final ServerConfig serverConfig,\n                              final SessionStorage sessionStorage)", "class_method_signature": "ServletContextImpl.ServletContextImpl(final String contextPath,\n                              final List<ServletMapping> servletMappings,\n                              final List<FilterMapping> filterMappings,\n                              final Map<String, Object> attributes,\n                              final ServerConfig serverConfig,\n                              final SessionStorage sessionStorage)", "testcase": false, "constructor": true}, {"identifier": "getMimeType", "parameters": "(final String file)", "modifiers": "@Override public", "return": "String", "signature": "String getMimeType(final String file)", "full_signature": "@Override public String getMimeType(final String file)", "class_method_signature": "ServletContextImpl.getMimeType(final String file)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(final String name, final Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setAttribute(final String name, final Object value)", "full_signature": "@Override public void setAttribute(final String name, final Object value)", "class_method_signature": "ServletContextImpl.setAttribute(final String name, final Object value)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(final String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getAttribute(final String name)", "full_signature": "@Override public Object getAttribute(final String name)", "class_method_signature": "ServletContextImpl.getAttribute(final String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeNames", "parameters": "()", "modifiers": "@Override public", "return": "Enumeration", "signature": "Enumeration getAttributeNames()", "full_signature": "@Override public Enumeration getAttributeNames()", "class_method_signature": "ServletContextImpl.getAttributeNames()", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "(final String id)", "modifiers": "public", "return": "HttpSessionImpl", "signature": "HttpSessionImpl getSession(final String id)", "full_signature": "public HttpSessionImpl getSession(final String id)", "class_method_signature": "ServletContextImpl.getSession(final String id)", "testcase": false, "constructor": false}, {"identifier": "createNewSession", "parameters": "()", "modifiers": "public", "return": "HttpSessionImpl", "signature": "HttpSessionImpl createNewSession()", "full_signature": "public HttpSessionImpl createNewSession()", "class_method_signature": "ServletContextImpl.createNewSession()", "testcase": false, "constructor": false}, {"identifier": "handleSession", "parameters": "(final HttpSessionImpl session, final HttpServletResponseImpl response)", "modifiers": "public", "return": "void", "signature": "void handleSession(final HttpSessionImpl session, final HttpServletResponseImpl response)", "full_signature": "public void handleSession(final HttpSessionImpl session, final HttpServletResponseImpl response)", "class_method_signature": "ServletContextImpl.handleSession(final HttpSessionImpl session, final HttpServletResponseImpl response)", "testcase": false, "constructor": false}, {"identifier": "isSessionExpired", "parameters": "(final HttpSessionImpl session)", "modifiers": "private", "return": "boolean", "signature": "boolean isSessionExpired(final HttpSessionImpl session)", "full_signature": "private boolean isSessionExpired(final HttpSessionImpl session)", "class_method_signature": "ServletContextImpl.isSessionExpired(final HttpSessionImpl session)", "testcase": false, "constructor": false}, {"identifier": "getServletMappings", "parameters": "()", "modifiers": "@Override public", "return": "List<ServletMapping>", "signature": "List<ServletMapping> getServletMappings()", "full_signature": "@Override public List<ServletMapping> getServletMappings()", "class_method_signature": "ServletContextImpl.getServletMappings()", "testcase": false, "constructor": false}, {"identifier": "getFilterMappings", "parameters": "()", "modifiers": "@Override public", "return": "List<FilterMapping>", "signature": "List<FilterMapping> getFilterMappings()", "full_signature": "@Override public List<FilterMapping> getFilterMappings()", "class_method_signature": "ServletContextImpl.getFilterMappings()", "testcase": false, "constructor": false}, {"identifier": "getContextPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getContextPath()", "full_signature": "@Override public String getContextPath()", "class_method_signature": "ServletContextImpl.getContextPath()", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/servlet/impl/ServletContextImpl.java"}, "focal_method": {"identifier": "getSession", "parameters": "(final String id)", "modifiers": "public", "return": "HttpSessionImpl", "body": "public HttpSessionImpl getSession(final String id) {\n        HttpSessionImpl session = null;\n\n        try {\n            session = sessionStorage.getSession(id);\n            if (session != null) {\n                session.setServletContext(this);\n\n                if (isSessionExpired(session)) {\n                    sessionStorage.removeSession(session);\n                    LOGGER.log(Level.FINE, \"Removed expired session {0}\",\n                            new Object[]{session.getId()});\n                    session = null;\n                }\n            }\n\n        } catch (IOException e) {\n        }\n\n        return session;\n    }", "signature": "HttpSessionImpl getSession(final String id)", "full_signature": "public HttpSessionImpl getSession(final String id)", "class_method_signature": "ServletContextImpl.getSession(final String id)", "testcase": false, "constructor": false, "invocations": ["getSession", "setServletContext", "isSessionExpired", "removeSession", "log", "getId"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}