{"test_class": {"identifier": "CommandLinesInterpretorTest", "superclass": "", "interfaces": "", "fields": [], "file": "elrond-api/src/test/java/network/elrond/api/CommandLinesInterpretorTest.java"}, "test_case": {"identifier": "testDisplayHelp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDisplayHelp(){\n        CommandLinesInterpretor.displayHelp();\n    }", "signature": "void testDisplayHelp()", "full_signature": "@Test public void testDisplayHelp()", "class_method_signature": "CommandLinesInterpretorTest.testDisplayHelp()", "testcase": true, "constructor": false, "invocations": ["displayHelp"]}, "focal_class": {"identifier": "CommandLinesInterpretor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(CommandLinesInterpretor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(CommandLinesInterpretor.class)", "var_name": "logger"}], "methods": [{"identifier": "interpretCommandLines", "parameters": "(String[] args)", "modifiers": "public static", "return": "ResponseObject", "signature": "ResponseObject interpretCommandLines(String[] args)", "full_signature": "public static ResponseObject interpretCommandLines(String[] args)", "class_method_signature": "CommandLinesInterpretor.interpretCommandLines(String[] args)", "testcase": false, "constructor": false}, {"identifier": "GenerateCommandFile", "parameters": "(List<String> configs)", "modifiers": "private static", "return": "String", "signature": "String GenerateCommandFile(List<String> configs)", "full_signature": "private static String GenerateCommandFile(List<String> configs)", "class_method_signature": "CommandLinesInterpretor.GenerateCommandFile(List<String> configs)", "testcase": false, "constructor": false}, {"identifier": "GenerateConfigFiles", "parameters": "(Map<Integer,List<String>> shardPrivateKeys)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> GenerateConfigFiles(Map<Integer,List<String>> shardPrivateKeys)", "full_signature": "private static List<String> GenerateConfigFiles(Map<Integer,List<String>> shardPrivateKeys)", "class_method_signature": "CommandLinesInterpretor.GenerateConfigFiles(Map<Integer,List<String>> shardPrivateKeys)", "testcase": false, "constructor": false}, {"identifier": "GeneratePrivateKeysPerShard", "parameters": "(Integer nrShards, Integer nodesPerShard, Map<Integer, List<String>> shardPrivateKeys)", "modifiers": "public static", "return": "void", "signature": "void GeneratePrivateKeysPerShard(Integer nrShards, Integer nodesPerShard, Map<Integer, List<String>> shardPrivateKeys)", "full_signature": "public static void GeneratePrivateKeysPerShard(Integer nrShards, Integer nodesPerShard, Map<Integer, List<String>> shardPrivateKeys)", "class_method_signature": "CommandLinesInterpretor.GeneratePrivateKeysPerShard(Integer nrShards, Integer nodesPerShard, Map<Integer, List<String>> shardPrivateKeys)", "testcase": false, "constructor": false}, {"identifier": "isHelpArgument", "parameters": "(String arg)", "modifiers": "static", "return": "boolean", "signature": "boolean isHelpArgument(String arg)", "full_signature": "static boolean isHelpArgument(String arg)", "class_method_signature": "CommandLinesInterpretor.isHelpArgument(String arg)", "testcase": false, "constructor": false}, {"identifier": "isConfig", "parameters": "(String arg)", "modifiers": "static", "return": "boolean", "signature": "boolean isConfig(String arg)", "full_signature": "static boolean isConfig(String arg)", "class_method_signature": "CommandLinesInterpretor.isConfig(String arg)", "testcase": false, "constructor": false}, {"identifier": "isGenerate", "parameters": "(String arg)", "modifiers": "static", "return": "boolean", "signature": "boolean isGenerate(String arg)", "full_signature": "static boolean isGenerate(String arg)", "class_method_signature": "CommandLinesInterpretor.isGenerate(String arg)", "testcase": false, "constructor": false}, {"identifier": "isKeyValuePair", "parameters": "(String arg)", "modifiers": "static", "return": "boolean", "signature": "boolean isKeyValuePair(String arg)", "full_signature": "static boolean isKeyValuePair(String arg)", "class_method_signature": "CommandLinesInterpretor.isKeyValuePair(String arg)", "testcase": false, "constructor": false}, {"identifier": "displayHelp", "parameters": "()", "modifiers": "static", "return": "void", "signature": "void displayHelp()", "full_signature": "static void displayHelp()", "class_method_signature": "CommandLinesInterpretor.displayHelp()", "testcase": false, "constructor": false}, {"identifier": "parseFileProperties", "parameters": "(String configFileName)", "modifiers": "static", "return": "Map<String, Object>", "signature": "Map<String, Object> parseFileProperties(String configFileName)", "full_signature": "static Map<String, Object> parseFileProperties(String configFileName)", "class_method_signature": "CommandLinesInterpretor.parseFileProperties(String configFileName)", "testcase": false, "constructor": false}], "file": "elrond-api/src/main/java/network/elrond/api/CommandLinesInterpretor.java"}, "focal_method": {"identifier": "displayHelp", "parameters": "()", "modifiers": "static", "return": "void", "body": "static void displayHelp(){\n        System.out.println(\"ElrondApiApplication\");\n        System.out.println(\"============================================================================================\");\n        System.out.println(\" usage:\");\n        System.out.println(\" [no arguments] :  Starts the node in default configuration\");\n        System.out.println(\"                   access http://127.0.0.1:8080/swagger-ui.html to start the node OR\");\n        System.out.println(\"                   start the UI app\");\n        System.out.println(\" -h --h -H --H -help -HELP --help --HELP :  Display this help message\");\n        System.out.println(\" -config=configfile.cfg :  Loads the config file from disk and automatically starts the node\");\n        System.out.println(\" -config=configfile.cfg -generate=nrShards;nodesInShard;autoStart:  Loads the config file from disk and generates scripts for nrShards x nodesInShardInstances\");\n        System.out.println();\n        System.out.println(\"Sample of a config file:\");\n        System.out.println(\"------------------------\");\n        System.out.println(\"node_name=elrond-node-1\");\n        System.out.println(\"port=4001\");\n        System.out.println(\"master_peer_port=4000\");\n        System.out.println(\"peer_ip=127.0.0.1\");\n        System.out.println(\"node_private_key=00e073884464d8d887568d6e4e66344db01334436c817bce17653eaf3e428b6ef5\");\n        System.out.println(\"startup_type=START_FROM_SCRATCH\");\n        System.out.println(\"blockchain_path=elrond-node-1\");\n        System.out.println(\"blockchain_restore_path=elrond-node-1\");\n        System.out.println();\n        System.out.println(\"Variants for above config lines:\");\n        System.out.println(\"--------------------------------\");\n        System.out.println(\"node_name=AUTO    => will generate an unique name in format elrond-node-\" + UUID.randomUUID().toString());\n        System.out.println(\"node_private_key=AUTO    => will generate an unique private key\");\n        System.out.println(\"startup_type=\" + Arrays.stream(BootstrapType.values()).\n                map(val -> val.toString()).\n                collect(Collectors.toList()));\n        System.out.println(\"blockchain_path=AUTO    => will get the node's name\");\n        System.out.println(\"blockchain_restore_path=AUTO    => will get the node's name\");\n    }", "signature": "void displayHelp()", "full_signature": "static void displayHelp()", "class_method_signature": "CommandLinesInterpretor.displayHelp()", "testcase": false, "constructor": false, "invocations": ["println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "toString", "randomUUID", "println", "println", "collect", "map", "stream", "values", "toString", "toList", "println", "println"]}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}