{"test_class": {"identifier": "WorkerThreadFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<Long> endedThreads ;", "modifier": "", "type": "List<Long>", "declarator": "endedThreads", "var_name": "endedThreads"}], "file": "worker/worker-manager/score-worker-manager-impl/src/test/java/io/cloudslang/worker/management/services/WorkerThreadFactoryTest.java"}, "test_case": {"identifier": "testNewThread", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewThread() throws Exception {\n        Assert.assertTrue(endedThreads.isEmpty());\n\n        WorkerThreadFactory factory = new WorkerThreadFactory(\"worker1\");\n        Thread thread1 = factory.newThread(new simpleCmd(1L));\n        Thread thread2 = factory.newThread(new simpleCmd(2L));\n\n        Assert.assertNotSame(thread1.getName(),thread2.getName());\n\n        thread1.start();\n        thread2.start();\n\n        while(thread1.isAlive() || thread2.isAlive()){}\n\n        Assert.assertEquals(2,endedThreads.size());\n        Assert.assertEquals(3,endedThreads.get(0)+endedThreads.get(1));\n    }", "signature": "void testNewThread()", "full_signature": "@Test public void testNewThread()", "class_method_signature": "WorkerThreadFactoryTest.testNewThread()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "newThread", "newThread", "assertNotSame", "getName", "getName", "start", "start", "isAlive", "isAlive", "assertEquals", "size", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "WorkerThreadFactory", "superclass": "", "interfaces": "implements ThreadFactory", "fields": [{"original_string": "private int index;", "modifier": "private", "type": "int", "declarator": "index", "var_name": "index"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "WorkerThreadFactory", "parameters": "(String commonName)", "modifiers": "public", "return": "", "signature": " WorkerThreadFactory(String commonName)", "full_signature": "public  WorkerThreadFactory(String commonName)", "class_method_signature": "WorkerThreadFactory.WorkerThreadFactory(String commonName)", "testcase": false, "constructor": true}, {"identifier": "newThread", "parameters": "(final Runnable command)", "modifiers": "public", "return": "Thread", "signature": "Thread newThread(final Runnable command)", "full_signature": "public Thread newThread(final Runnable command)", "class_method_signature": "WorkerThreadFactory.newThread(final Runnable command)", "testcase": false, "constructor": false}, {"identifier": "getThreadIDX", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getThreadIDX()", "full_signature": "private int getThreadIDX()", "class_method_signature": "WorkerThreadFactory.getThreadIDX()", "testcase": false, "constructor": false}], "file": "worker/worker-manager/score-worker-manager-impl/src/main/java/io/cloudslang/worker/management/services/WorkerThreadFactory.java"}, "focal_method": {"identifier": "newThread", "parameters": "(final Runnable command)", "modifiers": "public", "return": "Thread", "body": "public Thread newThread(final Runnable command) {\n        return new Thread(new Runnable() {\n            public void run() {\n                command.run();\n            }\n        }, name + \"-\" + getThreadIDX());\n    }", "signature": "Thread newThread(final Runnable command)", "full_signature": "public Thread newThread(final Runnable command)", "class_method_signature": "WorkerThreadFactory.newThread(final Runnable command)", "testcase": false, "constructor": false, "invocations": ["run", "getThreadIDX"]}, "repository": {"repo_id": 28394156, "url": "https://github.com/CloudSlang/score", "stars": 76, "created": "12/23/2014 11:19:26 AM +00:00", "updates": "2020-01-27T14:36:32+00:00", "fork": "False", "license": "licensed"}}