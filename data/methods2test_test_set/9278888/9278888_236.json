{"test_class": {"identifier": "KafkaStreamsTracingTest", "superclass": "extends KafkaStreamsTest", "interfaces": "", "fields": [], "file": "instrumentation/kafka-streams/src/test/java/brave/kafka/streams/KafkaStreamsTracingTest.java"}, "test_case": {"identifier": "nextSpan_should_create_span_if_no_headers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void nextSpan_should_create_span_if_no_headers() {\n    ProcessorContext fakeProcessorContext = processorContextSupplier.apply(new RecordHeaders());\n    assertThat(kafkaStreamsTracing.nextSpan(fakeProcessorContext)).isNotNull();\n  }", "signature": "void nextSpan_should_create_span_if_no_headers()", "full_signature": "@Test public void nextSpan_should_create_span_if_no_headers()", "class_method_signature": "KafkaStreamsTracingTest.nextSpan_should_create_span_if_no_headers()", "testcase": true, "constructor": false, "invocations": ["apply", "isNotNull", "assertThat", "nextSpan"]}, "focal_class": {"identifier": "KafkaStreamsTracing", "superclass": "", "interfaces": "", "fields": [{"original_string": "final KafkaTracing kafkaTracing;", "modifier": "final", "type": "KafkaTracing", "declarator": "kafkaTracing", "var_name": "kafkaTracing"}, {"original_string": "final Tracer tracer;", "modifier": "final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "final Extractor<Headers> extractor;", "modifier": "final", "type": "Extractor<Headers>", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "final Injector<Headers> injector;", "modifier": "final", "type": "Injector<Headers>", "declarator": "injector", "var_name": "injector"}, {"original_string": "final Set<String> propagationKeys;", "modifier": "final", "type": "Set<String>", "declarator": "propagationKeys", "var_name": "propagationKeys"}, {"original_string": "final TraceContextOrSamplingFlags emptyExtraction;", "modifier": "final", "type": "TraceContextOrSamplingFlags", "declarator": "emptyExtraction", "var_name": "emptyExtraction"}], "methods": [{"identifier": "KafkaStreamsTracing", "parameters": "(Builder builder)", "modifiers": "", "return": "", "signature": " KafkaStreamsTracing(Builder builder)", "full_signature": "  KafkaStreamsTracing(Builder builder)", "class_method_signature": "KafkaStreamsTracing.KafkaStreamsTracing(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(Tracing tracing)", "modifiers": "public static", "return": "KafkaStreamsTracing", "signature": "KafkaStreamsTracing create(Tracing tracing)", "full_signature": "public static KafkaStreamsTracing create(Tracing tracing)", "class_method_signature": "KafkaStreamsTracing.create(Tracing tracing)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(MessagingTracing messagingTracing)", "modifiers": "public static", "return": "KafkaStreamsTracing", "signature": "KafkaStreamsTracing create(MessagingTracing messagingTracing)", "full_signature": "public static KafkaStreamsTracing create(MessagingTracing messagingTracing)", "class_method_signature": "KafkaStreamsTracing.create(MessagingTracing messagingTracing)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(KafkaTracing kafkaTracing)", "modifiers": "public static", "return": "KafkaStreamsTracing", "signature": "KafkaStreamsTracing create(KafkaTracing kafkaTracing)", "full_signature": "public static KafkaStreamsTracing create(KafkaTracing kafkaTracing)", "class_method_signature": "KafkaStreamsTracing.create(KafkaTracing kafkaTracing)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "(Tracing tracing)", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder(Tracing tracing)", "full_signature": "public static Builder newBuilder(Tracing tracing)", "class_method_signature": "KafkaStreamsTracing.newBuilder(Tracing tracing)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "(MessagingTracing messagingTracing)", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder(MessagingTracing messagingTracing)", "full_signature": "public static Builder newBuilder(MessagingTracing messagingTracing)", "class_method_signature": "KafkaStreamsTracing.newBuilder(MessagingTracing messagingTracing)", "testcase": false, "constructor": false}, {"identifier": "kafkaClientSupplier", "parameters": "()", "modifiers": "public", "return": "KafkaClientSupplier", "signature": "KafkaClientSupplier kafkaClientSupplier()", "full_signature": "public KafkaClientSupplier kafkaClientSupplier()", "class_method_signature": "KafkaStreamsTracing.kafkaClientSupplier()", "testcase": false, "constructor": false}, {"identifier": "kafkaStreams", "parameters": "(Topology topology, Properties streamsConfig)", "modifiers": "public", "return": "KafkaStreams", "signature": "KafkaStreams kafkaStreams(Topology topology, Properties streamsConfig)", "full_signature": "public KafkaStreams kafkaStreams(Topology topology, Properties streamsConfig)", "class_method_signature": "KafkaStreamsTracing.kafkaStreams(Topology topology, Properties streamsConfig)", "testcase": false, "constructor": false}, {"identifier": "processor", "parameters": "(String spanName,\n    ProcessorSupplier<K, V> processorSupplier)", "modifiers": "public", "return": "ProcessorSupplier<K, V>", "signature": "ProcessorSupplier<K, V> processor(String spanName,\n    ProcessorSupplier<K, V> processorSupplier)", "full_signature": "public ProcessorSupplier<K, V> processor(String spanName,\n    ProcessorSupplier<K, V> processorSupplier)", "class_method_signature": "KafkaStreamsTracing.processor(String spanName,\n    ProcessorSupplier<K, V> processorSupplier)", "testcase": false, "constructor": false}, {"identifier": "transformer", "parameters": "(String spanName,\n    TransformerSupplier<K, V, R> transformerSupplier)", "modifiers": "public", "return": "TransformerSupplier<K, V, R>", "signature": "TransformerSupplier<K, V, R> transformer(String spanName,\n    TransformerSupplier<K, V, R> transformerSupplier)", "full_signature": "public TransformerSupplier<K, V, R> transformer(String spanName,\n    TransformerSupplier<K, V, R> transformerSupplier)", "class_method_signature": "KafkaStreamsTracing.transformer(String spanName,\n    TransformerSupplier<K, V, R> transformerSupplier)", "testcase": false, "constructor": false}, {"identifier": "valueTransformer", "parameters": "(String spanName,\n    ValueTransformerSupplier<V, VR> valueTransformerSupplier)", "modifiers": "public", "return": "ValueTransformerSupplier<V, VR>", "signature": "ValueTransformerSupplier<V, VR> valueTransformer(String spanName,\n    ValueTransformerSupplier<V, VR> valueTransformerSupplier)", "full_signature": "public ValueTransformerSupplier<V, VR> valueTransformer(String spanName,\n    ValueTransformerSupplier<V, VR> valueTransformerSupplier)", "class_method_signature": "KafkaStreamsTracing.valueTransformer(String spanName,\n    ValueTransformerSupplier<V, VR> valueTransformerSupplier)", "testcase": false, "constructor": false}, {"identifier": "valueTransformerWithKey", "parameters": "(\n    String spanName,\n    ValueTransformerWithKeySupplier<K, V, VR> valueTransformerWithKeySupplier)", "modifiers": "public", "return": "ValueTransformerWithKeySupplier<K, V, VR>", "signature": "ValueTransformerWithKeySupplier<K, V, VR> valueTransformerWithKey(\n    String spanName,\n    ValueTransformerWithKeySupplier<K, V, VR> valueTransformerWithKeySupplier)", "full_signature": "public ValueTransformerWithKeySupplier<K, V, VR> valueTransformerWithKey(\n    String spanName,\n    ValueTransformerWithKeySupplier<K, V, VR> valueTransformerWithKeySupplier)", "class_method_signature": "KafkaStreamsTracing.valueTransformerWithKey(\n    String spanName,\n    ValueTransformerWithKeySupplier<K, V, VR> valueTransformerWithKeySupplier)", "testcase": false, "constructor": false}, {"identifier": "foreach", "parameters": "(String spanName, ForeachAction<K, V> action)", "modifiers": "public", "return": "ProcessorSupplier<K, V>", "signature": "ProcessorSupplier<K, V> foreach(String spanName, ForeachAction<K, V> action)", "full_signature": "public ProcessorSupplier<K, V> foreach(String spanName, ForeachAction<K, V> action)", "class_method_signature": "KafkaStreamsTracing.foreach(String spanName, ForeachAction<K, V> action)", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "(String spanName,\n    ForeachAction<K, V> action)", "modifiers": "public", "return": "ValueTransformerWithKeySupplier<K, V, V>", "signature": "ValueTransformerWithKeySupplier<K, V, V> peek(String spanName,\n    ForeachAction<K, V> action)", "full_signature": "public ValueTransformerWithKeySupplier<K, V, V> peek(String spanName,\n    ForeachAction<K, V> action)", "class_method_signature": "KafkaStreamsTracing.peek(String spanName,\n    ForeachAction<K, V> action)", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "(String spanName)", "modifiers": "public", "return": "ValueTransformerWithKeySupplier<K, V, V>", "signature": "ValueTransformerWithKeySupplier<K, V, V> mark(String spanName)", "full_signature": "public ValueTransformerWithKeySupplier<K, V, V> mark(String spanName)", "class_method_signature": "KafkaStreamsTracing.mark(String spanName)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(String spanName,\n    KeyValueMapper<K, V, KeyValue<KR, VR>> mapper)", "modifiers": "public", "return": "TransformerSupplier<K, V, KeyValue<KR, VR>>", "signature": "TransformerSupplier<K, V, KeyValue<KR, VR>> map(String spanName,\n    KeyValueMapper<K, V, KeyValue<KR, VR>> mapper)", "full_signature": "public TransformerSupplier<K, V, KeyValue<KR, VR>> map(String spanName,\n    KeyValueMapper<K, V, KeyValue<KR, VR>> mapper)", "class_method_signature": "KafkaStreamsTracing.map(String spanName,\n    KeyValueMapper<K, V, KeyValue<KR, VR>> mapper)", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(\n    String spanName,\n    KeyValueMapper<K, V, Iterable<KeyValue<KR, VR>>> mapper)", "modifiers": "public", "return": "TransformerSupplier<K, V, Iterable<KeyValue<KR, VR>>>", "signature": "TransformerSupplier<K, V, Iterable<KeyValue<KR, VR>>> flatMap(\n    String spanName,\n    KeyValueMapper<K, V, Iterable<KeyValue<KR, VR>>> mapper)", "full_signature": "public TransformerSupplier<K, V, Iterable<KeyValue<KR, VR>>> flatMap(\n    String spanName,\n    KeyValueMapper<K, V, Iterable<KeyValue<KR, VR>>> mapper)", "class_method_signature": "KafkaStreamsTracing.flatMap(\n    String spanName,\n    KeyValueMapper<K, V, Iterable<KeyValue<KR, VR>>> mapper)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(String spanName,\n    Predicate<K, V> predicate)", "modifiers": "public", "return": "TransformerSupplier<K, V, KeyValue<K, V>>", "signature": "TransformerSupplier<K, V, KeyValue<K, V>> filter(String spanName,\n    Predicate<K, V> predicate)", "full_signature": "public TransformerSupplier<K, V, KeyValue<K, V>> filter(String spanName,\n    Predicate<K, V> predicate)", "class_method_signature": "KafkaStreamsTracing.filter(String spanName,\n    Predicate<K, V> predicate)", "testcase": false, "constructor": false}, {"identifier": "filterNot", "parameters": "(String spanName,\n    Predicate<K, V> predicate)", "modifiers": "public", "return": "TransformerSupplier<K, V, KeyValue<K, V>>", "signature": "TransformerSupplier<K, V, KeyValue<K, V>> filterNot(String spanName,\n    Predicate<K, V> predicate)", "full_signature": "public TransformerSupplier<K, V, KeyValue<K, V>> filterNot(String spanName,\n    Predicate<K, V> predicate)", "class_method_signature": "KafkaStreamsTracing.filterNot(String spanName,\n    Predicate<K, V> predicate)", "testcase": false, "constructor": false}, {"identifier": "markAsFiltered", "parameters": "(String spanName,\n    Predicate<K, V> predicate)", "modifiers": "public", "return": "ValueTransformerWithKeySupplier<K, V, V>", "signature": "ValueTransformerWithKeySupplier<K, V, V> markAsFiltered(String spanName,\n    Predicate<K, V> predicate)", "full_signature": "public ValueTransformerWithKeySupplier<K, V, V> markAsFiltered(String spanName,\n    Predicate<K, V> predicate)", "class_method_signature": "KafkaStreamsTracing.markAsFiltered(String spanName,\n    Predicate<K, V> predicate)", "testcase": false, "constructor": false}, {"identifier": "markAsNotFiltered", "parameters": "(String spanName,\n    Predicate<K, V> predicate)", "modifiers": "public", "return": "ValueTransformerWithKeySupplier<K, V, V>", "signature": "ValueTransformerWithKeySupplier<K, V, V> markAsNotFiltered(String spanName,\n    Predicate<K, V> predicate)", "full_signature": "public ValueTransformerWithKeySupplier<K, V, V> markAsNotFiltered(String spanName,\n    Predicate<K, V> predicate)", "class_method_signature": "KafkaStreamsTracing.markAsNotFiltered(String spanName,\n    Predicate<K, V> predicate)", "testcase": false, "constructor": false}, {"identifier": "mapValues", "parameters": "(String spanName,\n    ValueMapperWithKey<K, V, VR> mapper)", "modifiers": "public", "return": "ValueTransformerWithKeySupplier<K, V, VR>", "signature": "ValueTransformerWithKeySupplier<K, V, VR> mapValues(String spanName,\n    ValueMapperWithKey<K, V, VR> mapper)", "full_signature": "public ValueTransformerWithKeySupplier<K, V, VR> mapValues(String spanName,\n    ValueMapperWithKey<K, V, VR> mapper)", "class_method_signature": "KafkaStreamsTracing.mapValues(String spanName,\n    ValueMapperWithKey<K, V, VR> mapper)", "testcase": false, "constructor": false}, {"identifier": "mapValues", "parameters": "(String spanName,\n    ValueMapper<V, VR> mapper)", "modifiers": "public", "return": "ValueTransformerSupplier<V, VR>", "signature": "ValueTransformerSupplier<V, VR> mapValues(String spanName,\n    ValueMapper<V, VR> mapper)", "full_signature": "public ValueTransformerSupplier<V, VR> mapValues(String spanName,\n    ValueMapper<V, VR> mapper)", "class_method_signature": "KafkaStreamsTracing.mapValues(String spanName,\n    ValueMapper<V, VR> mapper)", "testcase": false, "constructor": false}, {"identifier": "addTags", "parameters": "(ProcessorContext processorContext, SpanCustomizer result)", "modifiers": "static", "return": "void", "signature": "void addTags(ProcessorContext processorContext, SpanCustomizer result)", "full_signature": "static void addTags(ProcessorContext processorContext, SpanCustomizer result)", "class_method_signature": "KafkaStreamsTracing.addTags(ProcessorContext processorContext, SpanCustomizer result)", "testcase": false, "constructor": false}, {"identifier": "nextSpan", "parameters": "(ProcessorContext context)", "modifiers": "", "return": "Span", "signature": "Span nextSpan(ProcessorContext context)", "full_signature": " Span nextSpan(ProcessorContext context)", "class_method_signature": "KafkaStreamsTracing.nextSpan(ProcessorContext context)", "testcase": false, "constructor": false}, {"identifier": "clearHeaders", "parameters": "(Headers headers)", "modifiers": "", "return": "void", "signature": "void clearHeaders(Headers headers)", "full_signature": " void clearHeaders(Headers headers)", "class_method_signature": "KafkaStreamsTracing.clearHeaders(Headers headers)", "testcase": false, "constructor": false}], "file": "instrumentation/kafka-streams/src/main/java/brave/kafka/streams/KafkaStreamsTracing.java"}, "focal_method": {"identifier": "nextSpan", "parameters": "(ProcessorContext context)", "modifiers": "", "return": "Span", "body": "Span nextSpan(ProcessorContext context) {\n    TraceContextOrSamplingFlags extracted = extractor.extract(context.headers());\n    // Clear any propagation keys present in the headers\n    if (!extracted.equals(emptyExtraction)) {\n      clearHeaders(context.headers());\n    }\n    Span result = tracer.nextSpan(extracted);\n    if (!result.isNoop()) {\n      addTags(context, result);\n    }\n    return result;\n  }", "signature": "Span nextSpan(ProcessorContext context)", "full_signature": " Span nextSpan(ProcessorContext context)", "class_method_signature": "KafkaStreamsTracing.nextSpan(ProcessorContext context)", "testcase": false, "constructor": false, "invocations": ["extract", "headers", "equals", "clearHeaders", "headers", "nextSpan", "isNoop", "addTags"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}