{"test_class": {"identifier": "FileUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FileUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FileUtilsTest.class)", "var_name": "logger"}], "file": "karate-core/src/test/java/com/intuit/karate/FileUtilsTest.java"}, "test_case": {"identifier": "testToStringBytes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToStringBytes() {\n        final byte[] bytes = {102, 111, 111, 98, 97, 114};\n        assertEquals(\"foobar\", FileUtils.toString(bytes));\n        assertNull(FileUtils.toString((byte[]) null));\n    }", "signature": "void testToStringBytes()", "full_signature": "@Test public void testToStringBytes()", "class_method_signature": "FileUtilsTest.testToStringBytes()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "assertNull", "toString"]}, "focal_class": {"identifier": "FileUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(FileUtils.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FileUtils.class)", "var_name": "LOGGER"}, {"original_string": "public static final Charset UTF8 = StandardCharsets.UTF_8;", "modifier": "public static final", "type": "Charset", "declarator": "UTF8 = StandardCharsets.UTF_8", "var_name": "UTF8"}, {"original_string": "public static final byte[] EMPTY_BYTES = new byte[]{};", "modifier": "public static final", "type": "byte[]", "declarator": "EMPTY_BYTES = new byte[]{}", "var_name": "EMPTY_BYTES"}, {"original_string": "private static final String CLASSPATH = \"classpath\";", "modifier": "private static final", "type": "String", "declarator": "CLASSPATH = \"classpath\"", "var_name": "CLASSPATH"}, {"original_string": "public static final String CLASSPATH_COLON = CLASSPATH + \":\";", "modifier": "public static final", "type": "String", "declarator": "CLASSPATH_COLON = CLASSPATH + \":\"", "var_name": "CLASSPATH_COLON"}, {"original_string": "private static final String DOT_FEATURE = \".feature\";", "modifier": "private static final", "type": "String", "declarator": "DOT_FEATURE = \".feature\"", "var_name": "DOT_FEATURE"}, {"original_string": "public static final String THIS_COLON = \"this:\";", "modifier": "public static final", "type": "String", "declarator": "THIS_COLON = \"this:\"", "var_name": "THIS_COLON"}, {"original_string": "public static final String FILE_COLON = \"file:\";", "modifier": "public static final", "type": "String", "declarator": "FILE_COLON = \"file:\"", "var_name": "FILE_COLON"}, {"original_string": "public static final String SRC_TEST_JAVA = \"src/test/java\";", "modifier": "public static final", "type": "String", "declarator": "SRC_TEST_JAVA = \"src/test/java\"", "var_name": "SRC_TEST_JAVA"}, {"original_string": "public static final String SRC_TEST_RESOURCES = \"src/test/resources\";", "modifier": "public static final", "type": "String", "declarator": "SRC_TEST_RESOURCES = \"src/test/resources\"", "var_name": "SRC_TEST_RESOURCES"}, {"original_string": "private static final String UNKNOWN = \"(unknown)\";", "modifier": "private static final", "type": "String", "declarator": "UNKNOWN = \"(unknown)\"", "var_name": "UNKNOWN"}, {"original_string": "private static final Map<URI, FileSystem> FILE_SYSTEM_CACHE = new HashMap();", "modifier": "private static final", "type": "Map<URI, FileSystem>", "declarator": "FILE_SYSTEM_CACHE = new HashMap()", "var_name": "FILE_SYSTEM_CACHE"}], "methods": [{"identifier": "FileUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileUtils()", "full_signature": "private  FileUtils()", "class_method_signature": "FileUtils.FileUtils()", "testcase": false, "constructor": true}, {"identifier": "isClassPath", "parameters": "(String text)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isClassPath(String text)", "full_signature": "public static final boolean isClassPath(String text)", "class_method_signature": "FileUtils.isClassPath(String text)", "testcase": false, "constructor": false}, {"identifier": "isFilePath", "parameters": "(String text)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isFilePath(String text)", "full_signature": "public static final boolean isFilePath(String text)", "class_method_signature": "FileUtils.isFilePath(String text)", "testcase": false, "constructor": false}, {"identifier": "isThisPath", "parameters": "(String text)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isThisPath(String text)", "full_signature": "public static final boolean isThisPath(String text)", "class_method_signature": "FileUtils.isThisPath(String text)", "testcase": false, "constructor": false}, {"identifier": "isJsonFile", "parameters": "(String text)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isJsonFile(String text)", "full_signature": "public static final boolean isJsonFile(String text)", "class_method_signature": "FileUtils.isJsonFile(String text)", "testcase": false, "constructor": false}, {"identifier": "isJavaScriptFile", "parameters": "(String text)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isJavaScriptFile(String text)", "full_signature": "public static final boolean isJavaScriptFile(String text)", "class_method_signature": "FileUtils.isJavaScriptFile(String text)", "testcase": false, "constructor": false}, {"identifier": "isYamlFile", "parameters": "(String text)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isYamlFile(String text)", "full_signature": "public static final boolean isYamlFile(String text)", "class_method_signature": "FileUtils.isYamlFile(String text)", "testcase": false, "constructor": false}, {"identifier": "isXmlFile", "parameters": "(String text)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isXmlFile(String text)", "full_signature": "public static final boolean isXmlFile(String text)", "class_method_signature": "FileUtils.isXmlFile(String text)", "testcase": false, "constructor": false}, {"identifier": "isTextFile", "parameters": "(String text)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isTextFile(String text)", "full_signature": "public static final boolean isTextFile(String text)", "class_method_signature": "FileUtils.isTextFile(String text)", "testcase": false, "constructor": false}, {"identifier": "isCsvFile", "parameters": "(String text)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isCsvFile(String text)", "full_signature": "public static final boolean isCsvFile(String text)", "class_method_signature": "FileUtils.isCsvFile(String text)", "testcase": false, "constructor": false}, {"identifier": "isGraphQlFile", "parameters": "(String text)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isGraphQlFile(String text)", "full_signature": "public static final boolean isGraphQlFile(String text)", "class_method_signature": "FileUtils.isGraphQlFile(String text)", "testcase": false, "constructor": false}, {"identifier": "isFeatureFile", "parameters": "(String text)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isFeatureFile(String text)", "full_signature": "public static final boolean isFeatureFile(String text)", "class_method_signature": "FileUtils.isFeatureFile(String text)", "testcase": false, "constructor": false}, {"identifier": "readFile", "parameters": "(String text, ScenarioContext context)", "modifiers": "public static", "return": "ScriptValue", "signature": "ScriptValue readFile(String text, ScenarioContext context)", "full_signature": "public static ScriptValue readFile(String text, ScenarioContext context)", "class_method_signature": "FileUtils.readFile(String text, ScenarioContext context)", "testcase": false, "constructor": false}, {"identifier": "removePrefix", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String removePrefix(String text)", "full_signature": "public static String removePrefix(String text)", "class_method_signature": "FileUtils.removePrefix(String text)", "testcase": false, "constructor": false}, {"identifier": "parsePathAndTags", "parameters": "(String text)", "modifiers": "private static", "return": "StringUtils.Pair", "signature": "StringUtils.Pair parsePathAndTags(String text)", "full_signature": "private static StringUtils.Pair parsePathAndTags(String text)", "class_method_signature": "FileUtils.parsePathAndTags(String text)", "testcase": false, "constructor": false}, {"identifier": "parseFeatureAndCallTag", "parameters": "(String path)", "modifiers": "public static", "return": "Feature", "signature": "Feature parseFeatureAndCallTag(String path)", "full_signature": "public static Feature parseFeatureAndCallTag(String path)", "class_method_signature": "FileUtils.parseFeatureAndCallTag(String path)", "testcase": false, "constructor": false}, {"identifier": "toResource", "parameters": "(String path, ScenarioContext context)", "modifiers": "public static", "return": "Resource", "signature": "Resource toResource(String path, ScenarioContext context)", "full_signature": "public static Resource toResource(String path, ScenarioContext context)", "class_method_signature": "FileUtils.toResource(String path, ScenarioContext context)", "testcase": false, "constructor": false}, {"identifier": "readFileAsString", "parameters": "(String path, ScenarioContext context)", "modifiers": "public static", "return": "String", "signature": "String readFileAsString(String path, ScenarioContext context)", "full_signature": "public static String readFileAsString(String path, ScenarioContext context)", "class_method_signature": "FileUtils.readFileAsString(String path, ScenarioContext context)", "testcase": false, "constructor": false}, {"identifier": "readFileAsStream", "parameters": "(String path, ScenarioContext context)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream readFileAsStream(String path, ScenarioContext context)", "full_signature": "public static InputStream readFileAsStream(String path, ScenarioContext context)", "class_method_signature": "FileUtils.readFileAsStream(String path, ScenarioContext context)", "testcase": false, "constructor": false}, {"identifier": "toPackageQualifiedName", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String toPackageQualifiedName(String path)", "full_signature": "public static String toPackageQualifiedName(String path)", "class_method_signature": "FileUtils.toPackageQualifiedName(String path)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(File file)", "modifiers": "public static", "return": "String", "signature": "String toString(File file)", "full_signature": "public static String toString(File file)", "class_method_signature": "FileUtils.toString(File file)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(InputStream is)", "modifiers": "public static", "return": "String", "signature": "String toString(InputStream is)", "full_signature": "public static String toString(InputStream is)", "class_method_signature": "FileUtils.toString(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "toPrettyString", "parameters": "(String raw)", "modifiers": "public static", "return": "String", "signature": "String toPrettyString(String raw)", "full_signature": "public static String toPrettyString(String raw)", "class_method_signature": "FileUtils.toPrettyString(String raw)", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(InputStream is)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toBytes(InputStream is)", "full_signature": "public static byte[] toBytes(InputStream is)", "class_method_signature": "FileUtils.toBytes(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "toByteStream", "parameters": "(InputStream is)", "modifiers": "private static", "return": "ByteArrayOutputStream", "signature": "ByteArrayOutputStream toByteStream(InputStream is)", "full_signature": "private static ByteArrayOutputStream toByteStream(InputStream is)", "class_method_signature": "FileUtils.toByteStream(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toString(byte[] bytes)", "full_signature": "public static String toString(byte[] bytes)", "class_method_signature": "FileUtils.toString(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(String string)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toBytes(String string)", "full_signature": "public static byte[] toBytes(String string)", "class_method_signature": "FileUtils.toBytes(String string)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(File src, File dest)", "modifiers": "public static", "return": "void", "signature": "void copy(File src, File dest)", "full_signature": "public static void copy(File src, File dest)", "class_method_signature": "FileUtils.copy(File src, File dest)", "testcase": false, "constructor": false}, {"identifier": "writeToFile", "parameters": "(File file, byte[] data)", "modifiers": "public static", "return": "void", "signature": "void writeToFile(File file, byte[] data)", "full_signature": "public static void writeToFile(File file, byte[] data)", "class_method_signature": "FileUtils.writeToFile(File file, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "writeToFile", "parameters": "(File file, String data)", "modifiers": "public static", "return": "void", "signature": "void writeToFile(File file, String data)", "full_signature": "public static void writeToFile(File file, String data)", "class_method_signature": "FileUtils.writeToFile(File file, String data)", "testcase": false, "constructor": false}, {"identifier": "toInputStream", "parameters": "(String text)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream toInputStream(String text)", "full_signature": "public static InputStream toInputStream(String text)", "class_method_signature": "FileUtils.toInputStream(String text)", "testcase": false, "constructor": false}, {"identifier": "removeFileExtension", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String removeFileExtension(String path)", "full_signature": "public static String removeFileExtension(String path)", "class_method_signature": "FileUtils.removeFileExtension(String path)", "testcase": false, "constructor": false}, {"identifier": "replaceFileExtension", "parameters": "(String path, String extension)", "modifiers": "public static", "return": "String", "signature": "String replaceFileExtension(String path, String extension)", "full_signature": "public static String replaceFileExtension(String path, String extension)", "class_method_signature": "FileUtils.replaceFileExtension(String path, String extension)", "testcase": false, "constructor": false}, {"identifier": "getKarateVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getKarateVersion()", "full_signature": "public static String getKarateVersion()", "class_method_signature": "FileUtils.getKarateVersion()", "testcase": false, "constructor": false}, {"identifier": "renameFileIfZeroBytes", "parameters": "(String fileName)", "modifiers": "public static", "return": "void", "signature": "void renameFileIfZeroBytes(String fileName)", "full_signature": "public static void renameFileIfZeroBytes(String fileName)", "class_method_signature": "FileUtils.renameFileIfZeroBytes(String fileName)", "testcase": false, "constructor": false}, {"identifier": "toStandardPath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String toStandardPath(String path)", "full_signature": "public static String toStandardPath(String path)", "class_method_signature": "FileUtils.toStandardPath(String path)", "testcase": false, "constructor": false}, {"identifier": "toRelativeClassPath", "parameters": "(Path path, ClassLoader cl)", "modifiers": "public static", "return": "String", "signature": "String toRelativeClassPath(Path path, ClassLoader cl)", "full_signature": "public static String toRelativeClassPath(Path path, ClassLoader cl)", "class_method_signature": "FileUtils.toRelativeClassPath(Path path, ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "getDirContaining", "parameters": "(Class clazz)", "modifiers": "public static", "return": "File", "signature": "File getDirContaining(Class clazz)", "full_signature": "public static File getDirContaining(Class clazz)", "class_method_signature": "FileUtils.getDirContaining(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "getPathContaining", "parameters": "(Class clazz)", "modifiers": "public static", "return": "Path", "signature": "Path getPathContaining(Class clazz)", "full_signature": "public static Path getPathContaining(Class clazz)", "class_method_signature": "FileUtils.getPathContaining(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "packageAsPath", "parameters": "(Class clazz)", "modifiers": "private static", "return": "String", "signature": "String packageAsPath(Class clazz)", "full_signature": "private static String packageAsPath(Class clazz)", "class_method_signature": "FileUtils.packageAsPath(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "getFileRelativeTo", "parameters": "(Class clazz, String path)", "modifiers": "public static", "return": "File", "signature": "File getFileRelativeTo(Class clazz, String path)", "full_signature": "public static File getFileRelativeTo(Class clazz, String path)", "class_method_signature": "FileUtils.getFileRelativeTo(Class clazz, String path)", "testcase": false, "constructor": false}, {"identifier": "toRelativeClassPath", "parameters": "(Class clazz)", "modifiers": "public static", "return": "String", "signature": "String toRelativeClassPath(Class clazz)", "full_signature": "public static String toRelativeClassPath(Class clazz)", "class_method_signature": "FileUtils.toRelativeClassPath(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "fromRelativeClassPath", "parameters": "(String relativePath, ClassLoader cl)", "modifiers": "public static", "return": "Path", "signature": "Path fromRelativeClassPath(String relativePath, ClassLoader cl)", "full_signature": "public static Path fromRelativeClassPath(String relativePath, ClassLoader cl)", "class_method_signature": "FileUtils.fromRelativeClassPath(String relativePath, ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "fromRelativeClassPath", "parameters": "(String relativePath, Path parentPath)", "modifiers": "public static", "return": "Path", "signature": "Path fromRelativeClassPath(String relativePath, Path parentPath)", "full_signature": "public static Path fromRelativeClassPath(String relativePath, Path parentPath)", "class_method_signature": "FileUtils.fromRelativeClassPath(String relativePath, Path parentPath)", "testcase": false, "constructor": false}, {"identifier": "scanForFeatureFilesOnClassPath", "parameters": "(ClassLoader cl)", "modifiers": "public static", "return": "List<Resource>", "signature": "List<Resource> scanForFeatureFilesOnClassPath(ClassLoader cl)", "full_signature": "public static List<Resource> scanForFeatureFilesOnClassPath(ClassLoader cl)", "class_method_signature": "FileUtils.scanForFeatureFilesOnClassPath(ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "scanForFeatureFiles", "parameters": "(List<String> paths, ClassLoader cl)", "modifiers": "public static", "return": "List<Resource>", "signature": "List<Resource> scanForFeatureFiles(List<String> paths, ClassLoader cl)", "full_signature": "public static List<Resource> scanForFeatureFiles(List<String> paths, ClassLoader cl)", "class_method_signature": "FileUtils.scanForFeatureFiles(List<String> paths, ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "scanForFeatureFiles", "parameters": "(List<String> paths, Class clazz)", "modifiers": "public static", "return": "List<Resource>", "signature": "List<Resource> scanForFeatureFiles(List<String> paths, Class clazz)", "full_signature": "public static List<Resource> scanForFeatureFiles(List<String> paths, Class clazz)", "class_method_signature": "FileUtils.scanForFeatureFiles(List<String> paths, Class clazz)", "testcase": false, "constructor": false}, {"identifier": "isJarPath", "parameters": "(URI uri)", "modifiers": "public static", "return": "boolean", "signature": "boolean isJarPath(URI uri)", "full_signature": "public static boolean isJarPath(URI uri)", "class_method_signature": "FileUtils.isJarPath(URI uri)", "testcase": false, "constructor": false}, {"identifier": "urlToPath", "parameters": "(URL url, String relativePath)", "modifiers": "public static", "return": "Path", "signature": "Path urlToPath(URL url, String relativePath)", "full_signature": "public static Path urlToPath(URL url, String relativePath)", "class_method_signature": "FileUtils.urlToPath(URL url, String relativePath)", "testcase": false, "constructor": false}, {"identifier": "getAllClassPathUrls", "parameters": "(ClassLoader classLoader)", "modifiers": "public static", "return": "List<URL>", "signature": "List<URL> getAllClassPathUrls(ClassLoader classLoader)", "full_signature": "public static List<URL> getAllClassPathUrls(ClassLoader classLoader)", "class_method_signature": "FileUtils.getAllClassPathUrls(ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getFileSystem", "parameters": "(URI uri)", "modifiers": "private static", "return": "FileSystem", "signature": "FileSystem getFileSystem(URI uri)", "full_signature": "private static FileSystem getFileSystem(URI uri)", "class_method_signature": "FileUtils.getFileSystem(URI uri)", "testcase": false, "constructor": false}, {"identifier": "scanForFeatureFiles", "parameters": "(boolean classpath, String searchPath, ClassLoader cl)", "modifiers": "public static", "return": "List<Resource>", "signature": "List<Resource> scanForFeatureFiles(boolean classpath, String searchPath, ClassLoader cl)", "full_signature": "public static List<Resource> scanForFeatureFiles(boolean classpath, String searchPath, ClassLoader cl)", "class_method_signature": "FileUtils.scanForFeatureFiles(boolean classpath, String searchPath, ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "collectFeatureFiles", "parameters": "(URL url, String searchPath, List<Resource> files)", "modifiers": "private static", "return": "void", "signature": "void collectFeatureFiles(URL url, String searchPath, List<Resource> files)", "full_signature": "private static void collectFeatureFiles(URL url, String searchPath, List<Resource> files)", "class_method_signature": "FileUtils.collectFeatureFiles(URL url, String searchPath, List<Resource> files)", "testcase": false, "constructor": false}, {"identifier": "getBuildDir", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getBuildDir()", "full_signature": "public static String getBuildDir()", "class_method_signature": "FileUtils.getBuildDir()", "testcase": false, "constructor": false}, {"identifier": "isOsWindows", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isOsWindows()", "full_signature": "public static boolean isOsWindows()", "class_method_signature": "FileUtils.isOsWindows()", "testcase": false, "constructor": false}, {"identifier": "isOsMacOsX", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isOsMacOsX()", "full_signature": "public static boolean isOsMacOsX()", "class_method_signature": "FileUtils.isOsMacOsX()", "testcase": false, "constructor": false}, {"identifier": "getOsName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getOsName()", "full_signature": "public static String getOsName()", "class_method_signature": "FileUtils.getOsName()", "testcase": false, "constructor": false}, {"identifier": "getOsType", "parameters": "()", "modifiers": "public static", "return": "OsType", "signature": "OsType getOsType()", "full_signature": "public static OsType getOsType()", "class_method_signature": "FileUtils.getOsType()", "testcase": false, "constructor": false}, {"identifier": "getOsType", "parameters": "(String name)", "modifiers": "public static", "return": "OsType", "signature": "OsType getOsType(String name)", "full_signature": "public static OsType getOsType(String name)", "class_method_signature": "FileUtils.getOsType(String name)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/FileUtils.java"}, "focal_method": {"identifier": "toString", "parameters": "(File file)", "modifiers": "public static", "return": "String", "body": "public static String toString(File file) {\n        try {\n            return toString(new FileInputStream(file));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "String toString(File file)", "full_signature": "public static String toString(File file)", "class_method_signature": "FileUtils.toString(File file)", "testcase": false, "constructor": false, "invocations": ["toString"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}