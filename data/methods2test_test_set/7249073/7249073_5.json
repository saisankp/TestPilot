{"test_class": {"identifier": "TestLists", "superclass": "", "interfaces": "", "fields": [], "file": "kiji-mapreduce/src/test/java/org/kiji/mapreduce/util/TestLists.java"}, "test_case": {"identifier": "testMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMap() {\n    List<Integer> inputs = new ArrayList<Integer>();\n    inputs.add(Integer.valueOf(3));\n    inputs.add(Integer.valueOf(42));\n\n    List<Integer> expected = new ArrayList<Integer>();\n    expected.add(Integer.valueOf(6));\n    expected.add(Integer.valueOf(84));\n\n    // Use a 'times 2' mapper.\n    List<Integer> actuals = Lists.map(inputs, new Lists.Func<Integer, Integer>() {\n      @Override\n      public Integer eval(Integer in) {\n        return Integer.valueOf(2 * in.intValue());\n      }\n    });\n\n    assertTrue(expected.equals(actuals));\n  }", "signature": "void testMap()", "full_signature": "@Test public void testMap()", "class_method_signature": "TestLists.testMap()", "testcase": true, "constructor": false, "invocations": ["add", "valueOf", "add", "valueOf", "add", "valueOf", "add", "valueOf", "map", "valueOf", "intValue", "assertTrue", "equals"]}, "focal_class": {"identifier": "Lists", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Lists", "parameters": "()", "modifiers": "private", "return": "", "signature": " Lists()", "full_signature": "private  Lists()", "class_method_signature": "Lists.Lists()", "testcase": false, "constructor": true}, {"identifier": "foldLeft", "parameters": "(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "modifiers": "public static", "return": "Y", "signature": "Y foldLeft(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "full_signature": "public static Y foldLeft(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "class_method_signature": "Lists.foldLeft(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "testcase": false, "constructor": false}, {"identifier": "foldRight", "parameters": "(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "modifiers": "public static", "return": "Y", "signature": "Y foldRight(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "full_signature": "public static Y foldRight(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "class_method_signature": "Lists.foldRight(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(List<X> inputs, Func<? super X, ? extends Y> mapper)", "modifiers": "public static", "return": "List<Y>", "signature": "List<Y> map(List<X> inputs, Func<? super X, ? extends Y> mapper)", "full_signature": "public static List<Y> map(List<X> inputs, Func<? super X, ? extends Y> mapper)", "class_method_signature": "Lists.map(List<X> inputs, Func<? super X, ? extends Y> mapper)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(List<X> inputs, Class<X> klazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "X[]", "signature": "X[] toArray(List<X> inputs, Class<X> klazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static X[] toArray(List<X> inputs, Class<X> klazz)", "class_method_signature": "Lists.toArray(List<X> inputs, Class<X> klazz)", "testcase": false, "constructor": false}, {"identifier": "distinct", "parameters": "(List<X> inputs)", "modifiers": "public static", "return": "List<X>", "signature": "List<X> distinct(List<X> inputs)", "full_signature": "public static List<X> distinct(List<X> inputs)", "class_method_signature": "Lists.distinct(List<X> inputs)", "testcase": false, "constructor": false}], "file": "kiji-mapreduce/src/main/java/org/kiji/mapreduce/util/Lists.java"}, "focal_method": {"identifier": "map", "parameters": "(List<X> inputs, Func<? super X, ? extends Y> mapper)", "modifiers": "public static", "return": "List<Y>", "body": "public static <X, Y> List<Y> map(List<X> inputs, Func<? super X, ? extends Y> mapper) {\n    if (null == inputs) {\n      return null;\n    } else if (inputs.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    List<Y> out = new ArrayList<Y>();\n    for (X in : inputs) {\n      out.add(mapper.eval(in));\n    }\n\n    return out;\n  }", "signature": "List<Y> map(List<X> inputs, Func<? super X, ? extends Y> mapper)", "full_signature": "public static List<Y> map(List<X> inputs, Func<? super X, ? extends Y> mapper)", "class_method_signature": "Lists.map(List<X> inputs, Func<? super X, ? extends Y> mapper)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "emptyList", "add", "eval"]}, "repository": {"repo_id": 7249073, "url": "https://github.com/kijiproject/kiji-mapreduce", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 12, "size": 5029, "license": "licensed"}}