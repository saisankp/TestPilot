{"test_class": {"identifier": "XMLUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String testXml = new StringBuilder(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\")\n        .append(\"<parentNode>\")\n        .append(\"<childNode>\").append(\"1\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"2\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"3\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"true\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"false\").append(\"</childNode>\")\n        .append(\"</parentNode>\").toString();", "modifier": "", "type": "String", "declarator": "testXml = new StringBuilder(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\")\n        .append(\"<parentNode>\")\n        .append(\"<childNode>\").append(\"1\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"2\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"3\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"true\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"false\").append(\"</childNode>\")\n        .append(\"</parentNode>\").toString()", "var_name": "testXml"}], "file": "gdp-common-utilities/src/test/java/gov/usgs/cida/gdp/utilities/XMLUtilsTest.java"}, "test_case": {"identifier": "transformXMLTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void transformXMLTest() throws FileNotFoundException, TransformerConfigurationException, TransformerException {\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        String fileSeparator = System.getProperty(\"file.separator\");\n        URL xmlFileLocation = cl.getResource(\"Sample_Files\"+fileSeparator+\"XSLT\"+fileSeparator+\"sample.xml\");\n        URL xsltFileLocation = cl.getResource(\"Sample_Files\"+fileSeparator+\"XSLT\"+fileSeparator+\"sample.xsl\");\n        File sampleXMLFile = null;\n        File xsltFile = null;\n        try {\n            sampleXMLFile = new File(xmlFileLocation.toURI());\n            xsltFile = new File(xsltFileLocation.toURI());\n        } catch (URISyntaxException e) {\n            assertTrue(\"Exception encountered: \" + e.getMessage(), false);\n        }\n        \n        assertTrue(sampleXMLFile.exists());\n        assertTrue(xsltFile.exists());\n        \n        FileInputStream xmlFis = new FileInputStream(sampleXMLFile);\n        FileInputStream xslFis = new FileInputStream(xsltFile);\n        String result = XMLUtils.transformXML(xmlFis, xslFis);\n        assertTrue(result != null);\n        assertTrue(result.contains(\"Input: FEATURE_ATTRIBUTE_NAME\"));\n        assertTrue(result.contains(\"Data: 1999-12-30T00:00:00.000Z\"));\n        assertTrue(result.contains(\"Input: FEATURE_COLLECTION\"));\n        assertTrue(result.contains(\"< Complex Value Reference (not shown) >\"));\n        assertTrue(result.contains(\"Mime Type: text/csv\"));\n    }", "signature": "void transformXMLTest()", "full_signature": "@Test public void transformXMLTest()", "class_method_signature": "XMLUtilsTest.transformXMLTest()", "testcase": true, "constructor": false, "invocations": ["getContextClassLoader", "currentThread", "getProperty", "getResource", "getResource", "toURI", "toURI", "assertTrue", "getMessage", "assertTrue", "exists", "assertTrue", "exists", "transformXML", "assertTrue", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "XMLUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static org.slf4j.Logger log = LoggerFactory.getLogger(XMLUtils.class);", "modifier": "private static", "type": "org.slf4j.Logger", "declarator": "log = LoggerFactory.getLogger(XMLUtils.class)", "var_name": "log"}], "methods": [{"identifier": "XMLUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " XMLUtils()", "full_signature": "private  XMLUtils()", "class_method_signature": "XMLUtils.XMLUtils()", "testcase": false, "constructor": true}, {"identifier": "transformXML", "parameters": "(final InputStream xml, final InputStream xslt)", "modifiers": "public static", "return": "String", "signature": "String transformXML(final InputStream xml, final InputStream xslt)", "full_signature": "public static String transformXML(final InputStream xml, final InputStream xslt)", "class_method_signature": "XMLUtils.transformXML(final InputStream xml, final InputStream xslt)", "testcase": false, "constructor": false}, {"identifier": "createPrettyXML", "parameters": "(Document document)", "modifiers": "public static", "return": "String", "signature": "String createPrettyXML(Document document)", "full_signature": "public static String createPrettyXML(Document document)", "class_method_signature": "XMLUtils.createPrettyXML(Document document)", "testcase": false, "constructor": false}, {"identifier": "createXPathExpression", "parameters": "(final String expression)", "modifiers": "public static", "return": "XPathExpression", "signature": "XPathExpression createXPathExpression(final String expression)", "full_signature": "public static XPathExpression createXPathExpression(final String expression)", "class_method_signature": "XMLUtils.createXPathExpression(final String expression)", "testcase": false, "constructor": false}, {"identifier": "createBooleanUsingXPathExpression", "parameters": "(String expression, String xml)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean createBooleanUsingXPathExpression(String expression, String xml)", "full_signature": "public static Boolean createBooleanUsingXPathExpression(String expression, String xml)", "class_method_signature": "XMLUtils.createBooleanUsingXPathExpression(String expression, String xml)", "testcase": false, "constructor": false}, {"identifier": "createNodeListUsingXPathExpression", "parameters": "(String expression, String xml)", "modifiers": "public static", "return": "NodeList", "signature": "NodeList createNodeListUsingXPathExpression(String expression, String xml)", "full_signature": "public static NodeList createNodeListUsingXPathExpression(String expression, String xml)", "class_method_signature": "XMLUtils.createNodeListUsingXPathExpression(String expression, String xml)", "testcase": false, "constructor": false}, {"identifier": "createNodeUsingXPathExpression", "parameters": "(String expression, String xml)", "modifiers": "public static", "return": "Node", "signature": "Node createNodeUsingXPathExpression(String expression, String xml)", "full_signature": "public static Node createNodeUsingXPathExpression(String expression, String xml)", "class_method_signature": "XMLUtils.createNodeUsingXPathExpression(String expression, String xml)", "testcase": false, "constructor": false}], "file": "gdp-common-utilities/src/main/java/gov/usgs/cida/gdp/utilities/XMLUtils.java"}, "focal_method": {"identifier": "transformXML", "parameters": "(final InputStream xml, final InputStream xslt)", "modifiers": "public static", "return": "String", "body": "public static String transformXML(final InputStream xml, final InputStream xslt) throws TransformerConfigurationException, TransformerException {\n        TransformerFactory tFact = TransformerFactory.newInstance();\n        Transformer transformer = tFact.newTransformer(new StreamSource(xslt));\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        transformer.transform(\n                new StreamSource(xml),\n                new StreamResult(bos)\n            );\n        String transformedXML = bos.toString();\n        return transformedXML;\n    }", "signature": "String transformXML(final InputStream xml, final InputStream xslt)", "full_signature": "public static String transformXML(final InputStream xml, final InputStream xslt)", "class_method_signature": "XMLUtils.transformXML(final InputStream xml, final InputStream xslt)", "testcase": false, "constructor": false, "invocations": ["newInstance", "newTransformer", "transform", "toString"]}, "repository": {"repo_id": 11799031, "url": "https://github.com/USGS-CIDA/geo-data-portal", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 9, "size": 178468, "license": "licensed"}}