{"test_class": {"identifier": "ArimaModelBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/arima/ArimaModelBuilderTest.java"}, "test_case": {"identifier": "testMeanNonStationary", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testMeanNonStationary() {\n        SarimaSpecification spec = new SarimaSpecification(12);\n        spec.airline();\n        SarimaModel arima = new SarimaModel(spec);\n        arima.setBTheta(1, -.9);\n        arima.setTheta(1, -.6);\n        ArimaModelBuilder builder = new ArimaModelBuilder();\n //       builder.setDistribution(new T());\n        double[] x = builder.generate(arima, 0.05, 300);\n        GlsSarimaMonitor monitor = new GlsSarimaMonitor(null);\n        RegArimaModel reg = new RegArimaModel(arima, new DataBlock(x));\n        reg.setMeanCorrection(true);\n        RegArimaEstimation rslt = monitor.optimize(reg);\n        System.out.println(rslt.model.getArima().getMA());\n        System.out.println(rslt.likelihood.getB()[0]);\n         for (int i = 0; i < x.length; ++i) {\n            System.out.println(x[i]);\n        }\n   }", "signature": "void testMeanNonStationary()", "full_signature": "@Test @Ignore public void testMeanNonStationary()", "class_method_signature": "ArimaModelBuilderTest.testMeanNonStationary()", "testcase": true, "constructor": false, "invocations": ["airline", "setBTheta", "setTheta", "generate", "setMeanCorrection", "optimize", "println", "getMA", "getArima", "println", "getB", "println"]}, "focal_class": {"identifier": "ArimaModelBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int m_ndrop = 0;", "modifier": "private", "type": "int", "declarator": "m_ndrop = 0", "var_name": "m_ndrop"}, {"original_string": "private double m_startmean = 100;", "modifier": "private", "type": "double", "declarator": "m_startmean = 100", "var_name": "m_startmean"}, {"original_string": "private double m_startstdev = 10;", "modifier": "private", "type": "double", "declarator": "m_startstdev = 10", "var_name": "m_startstdev"}, {"original_string": "private static IRandomNumberGenerator RNG = XorshiftRNG.fromSystemNanoTime();", "modifier": "private static", "type": "IRandomNumberGenerator", "declarator": "RNG = XorshiftRNG.fromSystemNanoTime()", "var_name": "RNG"}, {"original_string": "private IDistribution m_dist=new Normal();", "modifier": "private", "type": "IDistribution", "declarator": "m_dist=new Normal()", "var_name": "m_dist"}, {"original_string": "private IRandomNumberGenerator rng = RNG;", "modifier": "private", "type": "IRandomNumberGenerator", "declarator": "rng = RNG", "var_name": "rng"}], "methods": [{"identifier": "ArimaModelBuilder", "parameters": "()", "modifiers": "public", "return": "", "signature": " ArimaModelBuilder()", "full_signature": "public  ArimaModelBuilder()", "class_method_signature": "ArimaModelBuilder.ArimaModelBuilder()", "testcase": false, "constructor": true}, {"identifier": "setStartMean", "parameters": "(double m)", "modifiers": "public", "return": "void", "signature": "void setStartMean(double m)", "full_signature": "public void setStartMean(double m)", "class_method_signature": "ArimaModelBuilder.setStartMean(double m)", "testcase": false, "constructor": false}, {"identifier": "setStartStdev", "parameters": "(double e)", "modifiers": "public", "return": "void", "signature": "void setStartStdev(double e)", "full_signature": "public void setStartStdev(double e)", "class_method_signature": "ArimaModelBuilder.setStartStdev(double e)", "testcase": false, "constructor": false}, {"identifier": "setDropCount", "parameters": "(int n)", "modifiers": "public", "return": "void", "signature": "void setDropCount(int n)", "full_signature": "public void setDropCount(int n)", "class_method_signature": "ArimaModelBuilder.setDropCount(int n)", "testcase": false, "constructor": false}, {"identifier": "getStartMean", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getStartMean()", "full_signature": "public double getStartMean()", "class_method_signature": "ArimaModelBuilder.getStartMean()", "testcase": false, "constructor": false}, {"identifier": "getStartStdev", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getStartStdev()", "full_signature": "public double getStartStdev()", "class_method_signature": "ArimaModelBuilder.getStartStdev()", "testcase": false, "constructor": false}, {"identifier": "getDropCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDropCount()", "full_signature": "public int getDropCount()", "class_method_signature": "ArimaModelBuilder.getDropCount()", "testcase": false, "constructor": false}, {"identifier": "setRandomNumberGenerator", "parameters": "(IRandomNumberGenerator rng)", "modifiers": "public", "return": "void", "signature": "void setRandomNumberGenerator(IRandomNumberGenerator rng)", "full_signature": "public void setRandomNumberGenerator(IRandomNumberGenerator rng)", "class_method_signature": "ArimaModelBuilder.setRandomNumberGenerator(IRandomNumberGenerator rng)", "testcase": false, "constructor": false}, {"identifier": "getRandomNumberGenerator", "parameters": "()", "modifiers": "public", "return": "IRandomNumberGenerator", "signature": "IRandomNumberGenerator getRandomNumberGenerator()", "full_signature": "public IRandomNumberGenerator getRandomNumberGenerator()", "class_method_signature": "ArimaModelBuilder.getRandomNumberGenerator()", "testcase": false, "constructor": false}, {"identifier": "getDistribution", "parameters": "()", "modifiers": "public", "return": "IDistribution", "signature": "IDistribution getDistribution()", "full_signature": "public IDistribution getDistribution()", "class_method_signature": "ArimaModelBuilder.getDistribution()", "testcase": false, "constructor": false}, {"identifier": "setDistribution", "parameters": "(IDistribution dist)", "modifiers": "public", "return": "void", "signature": "void setDistribution(IDistribution dist)", "full_signature": "public void setDistribution(IDistribution dist)", "class_method_signature": "ArimaModelBuilder.setDistribution(IDistribution dist)", "testcase": false, "constructor": false}, {"identifier": "createModel", "parameters": "(final Polynomial AR, final Polynomial MA,\n            final double var)", "modifiers": "public", "return": "ArimaModel", "signature": "ArimaModel createModel(final Polynomial AR, final Polynomial MA,\n            final double var)", "full_signature": "public ArimaModel createModel(final Polynomial AR, final Polynomial MA,\n            final double var)", "class_method_signature": "ArimaModelBuilder.createModel(final Polynomial AR, final Polynomial MA,\n            final double var)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(final IArimaModel arima, final int n)", "modifiers": "public", "return": "double[]", "signature": "double[] generate(final IArimaModel arima, final int n)", "full_signature": "public double[] generate(final IArimaModel arima, final int n)", "class_method_signature": "ArimaModelBuilder.generate(final IArimaModel arima, final int n)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(final IArimaModel arima, final double mean, final int n)", "modifiers": "public", "return": "double[]", "signature": "double[] generate(final IArimaModel arima, final double mean, final int n)", "full_signature": "public double[] generate(final IArimaModel arima, final double mean, final int n)", "class_method_signature": "ArimaModelBuilder.generate(final IArimaModel arima, final double mean, final int n)", "testcase": false, "constructor": false}, {"identifier": "generateStationary", "parameters": "(final IArimaModel starima, final int n)", "modifiers": "public", "return": "double[]", "signature": "double[] generateStationary(final IArimaModel starima, final int n)", "full_signature": "public double[] generateStationary(final IArimaModel starima, final int n)", "class_method_signature": "ArimaModelBuilder.generateStationary(final IArimaModel starima, final int n)", "testcase": false, "constructor": false}, {"identifier": "generateStationary", "parameters": "(final IArimaModel starima, final double mean, final int n)", "modifiers": "public", "return": "double[]", "signature": "double[] generateStationary(final IArimaModel starima, final double mean, final int n)", "full_signature": "public double[] generateStationary(final IArimaModel starima, final double mean, final int n)", "class_method_signature": "ArimaModelBuilder.generateStationary(final IArimaModel starima, final double mean, final int n)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/arima/ArimaModelBuilder.java"}, "focal_method": {"identifier": "generate", "parameters": "(final IArimaModel arima, final int n)", "modifiers": "public", "return": "double[]", "body": "public double[] generate(final IArimaModel arima, final int n) {\n        return generate(arima, 0, n);\n    }", "signature": "double[] generate(final IArimaModel arima, final int n)", "full_signature": "public double[] generate(final IArimaModel arima, final int n)", "class_method_signature": "ArimaModelBuilder.generate(final IArimaModel arima, final int n)", "testcase": false, "constructor": false, "invocations": ["generate"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}