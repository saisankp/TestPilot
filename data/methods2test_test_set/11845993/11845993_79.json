{"test_class": {"identifier": "DoubleValueConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ValueConverter<Double> converter = DoubleValueConverter.INSTANCE;", "modifier": "private final", "type": "ValueConverter<Double>", "declarator": "converter = DoubleValueConverter.INSTANCE", "var_name": "converter"}], "file": "stagemonitor-configuration/src/test/java/org/stagemonitor/configuration/converter/DoubleValueConverterTest.java"}, "test_case": {"identifier": "testConvertComma", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testConvertComma() throws Exception {\n\t\tassertEquals(3.1415, converter.convert(\"3,1415\"), 0);\n\t}", "signature": "void testConvertComma()", "full_signature": "@Test public void testConvertComma()", "class_method_signature": "DoubleValueConverterTest.testConvertComma()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "convert"]}, "focal_class": {"identifier": "DoubleValueConverter", "superclass": "extends AbstractValueConverter<Double>", "interfaces": "", "fields": [{"original_string": "public static final ValueConverter<Double> INSTANCE = new DoubleValueConverter();", "modifier": "public static final", "type": "ValueConverter<Double>", "declarator": "INSTANCE = new DoubleValueConverter()", "var_name": "INSTANCE"}], "methods": [{"identifier": "DoubleValueConverter", "parameters": "()", "modifiers": "private", "return": "", "signature": " DoubleValueConverter()", "full_signature": "private  DoubleValueConverter()", "class_method_signature": "DoubleValueConverter.DoubleValueConverter()", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(String s)", "modifiers": "@Override public", "return": "Double", "signature": "Double convert(String s)", "full_signature": "@Override public Double convert(String s)", "class_method_signature": "DoubleValueConverter.convert(String s)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Double value)", "modifiers": "@Override public", "return": "String", "signature": "String toString(Double value)", "full_signature": "@Override public String toString(Double value)", "class_method_signature": "DoubleValueConverter.toString(Double value)", "testcase": false, "constructor": false}], "file": "stagemonitor-configuration/src/main/java/org/stagemonitor/configuration/converter/DoubleValueConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(String s)", "modifiers": "@Override public", "return": "Double", "body": "@Override\n\tpublic Double convert(String s) {\n\t\ttry {\n\t\t\treturn Double.valueOf(s.replace(',', '.'));\n\t\t} catch (RuntimeException e) {\n\t\t\tthrow new IllegalArgumentException(\"Can't convert '\" + s + \"' to Double.\", e);\n\t\t}\n\t}", "signature": "Double convert(String s)", "full_signature": "@Override public Double convert(String s)", "class_method_signature": "DoubleValueConverter.convert(String s)", "testcase": false, "constructor": false, "invocations": ["valueOf", "replace"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}