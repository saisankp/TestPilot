{"test_class": {"identifier": "MailNotificationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MailNotification mailNotification;", "modifier": "private", "type": "MailNotification", "declarator": "mailNotification", "var_name": "mailNotification"}, {"original_string": "private NotificationServiceConfiguration configuration;", "modifier": "private", "type": "NotificationServiceConfiguration", "declarator": "configuration", "var_name": "configuration"}], "file": "infra/notification/mail/src/test/java/notification/mail/MailNotificationTest.java"}, "test_case": {"identifier": "testAddFileEvent_Should_When", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddFileEvent_Should_When() throws Exception {\n        mailNotification.sendNotification(configuration, FileEventNotification.Type.ADD, \"Thibaut\", Arrays.asList(new MockFile(\"0\", \"File1\"), new MockFile(\"1\", \"File2\")), Collections.emptyMap());\n        mailNotification.sendNotification(configuration, FileEventNotification.Type.DELETE, \"Thibaut\", Arrays.asList(new MockFile(\"0\", \"File1\"), new MockFile(\"1\", \"File2\")), Collections.emptyMap());\n        mailNotification.sendNotification(configuration, FileEventNotification.Type.SHARE_WITH, \"Thibaut\", Arrays.asList(new MockFile(\"0\", \"File1\"), new MockFile(\"1\", \"File2\")), Collections.singletonMap(\"Maxime\", Permission.GET));\n    }", "signature": "void testAddFileEvent_Should_When()", "full_signature": "@Test public void testAddFileEvent_Should_When()", "class_method_signature": "MailNotificationTest.testAddFileEvent_Should_When()", "testcase": true, "constructor": false, "invocations": ["sendNotification", "asList", "emptyMap", "sendNotification", "asList", "emptyMap", "sendNotification", "asList", "singletonMap"]}, "focal_class": {"identifier": "MailNotification", "superclass": "", "interfaces": "implements NotificationService", "fields": [{"original_string": "private static String EMAIL_SETTING = \"email\";", "modifier": "private static", "type": "String", "declarator": "EMAIL_SETTING = \"email\"", "var_name": "EMAIL_SETTING"}, {"original_string": "private final Session session;", "modifier": "private final", "type": "Session", "declarator": "session", "var_name": "session"}], "methods": [{"identifier": "getServiceId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getServiceId()", "full_signature": "@Override public String getServiceId()", "class_method_signature": "MailNotification.getServiceId()", "testcase": false, "constructor": false}, {"identifier": "MailNotification", "parameters": "(final String username, final String password)", "modifiers": "public", "return": "", "signature": " MailNotification(final String username, final String password)", "full_signature": "public  MailNotification(final String username, final String password)", "class_method_signature": "MailNotification.MailNotification(final String username, final String password)", "testcase": false, "constructor": true}, {"identifier": "sendNotification", "parameters": "(NotificationServiceConfiguration serviceConfiguration, FileEventNotification.Type type, String userId, List<File> files, Map<String, Permission> sharedUsersIdWithPermission)", "modifiers": "@Override public", "return": "void", "signature": "void sendNotification(NotificationServiceConfiguration serviceConfiguration, FileEventNotification.Type type, String userId, List<File> files, Map<String, Permission> sharedUsersIdWithPermission)", "full_signature": "@Override public void sendNotification(NotificationServiceConfiguration serviceConfiguration, FileEventNotification.Type type, String userId, List<File> files, Map<String, Permission> sharedUsersIdWithPermission)", "class_method_signature": "MailNotification.sendNotification(NotificationServiceConfiguration serviceConfiguration, FileEventNotification.Type type, String userId, List<File> files, Map<String, Permission> sharedUsersIdWithPermission)", "testcase": false, "constructor": false}, {"identifier": "sendMailNotification", "parameters": "(String emailToSend, String messageEvent)", "modifiers": "private", "return": "void", "signature": "void sendMailNotification(String emailToSend, String messageEvent)", "full_signature": "private void sendMailNotification(String emailToSend, String messageEvent)", "class_method_signature": "MailNotification.sendMailNotification(String emailToSend, String messageEvent)", "testcase": false, "constructor": false}, {"identifier": "displayFiles", "parameters": "(List<File> files)", "modifiers": "private", "return": "String", "signature": "String displayFiles(List<File> files)", "full_signature": "private String displayFiles(List<File> files)", "class_method_signature": "MailNotification.displayFiles(List<File> files)", "testcase": false, "constructor": false}, {"identifier": "displayFiles", "parameters": "(File file)", "modifiers": "private", "return": "String", "signature": "String displayFiles(File file)", "full_signature": "private String displayFiles(File file)", "class_method_signature": "MailNotification.displayFiles(File file)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Collection var0, String var1)", "modifiers": "private static", "return": "String", "signature": "String join(Collection var0, String var1)", "full_signature": "private static String join(Collection var0, String var1)", "class_method_signature": "MailNotification.join(Collection var0, String var1)", "testcase": false, "constructor": false}], "file": "infra/notification/mail/src/main/java/notification/mail/MailNotification.java"}, "focal_method": {"identifier": "sendNotification", "parameters": "(NotificationServiceConfiguration serviceConfiguration, FileEventNotification.Type type, String userId, List<File> files, Map<String, Permission> sharedUsersIdWithPermission)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void sendNotification(NotificationServiceConfiguration serviceConfiguration, FileEventNotification.Type type, String userId, List<File> files, Map<String, Permission> sharedUsersIdWithPermission) {\n        MailConfigurationParser configurationParser = new MailConfigurationParser(serviceConfiguration);\n        String emailToSend = configurationParser.getMail();\n\n        if (type == FileEventNotification.Type.SHARE_WITH) {\n            sendMailNotification(emailToSend, userId + \" share file: \" + displayFiles(files) + \" with \" + sharedUsersIdWithPermission.toString());\n        } else {\n            sendMailNotification(emailToSend, userId + \" \" + type.name() + \" file(s): \" + displayFiles(files));\n        }\n    }", "signature": "void sendNotification(NotificationServiceConfiguration serviceConfiguration, FileEventNotification.Type type, String userId, List<File> files, Map<String, Permission> sharedUsersIdWithPermission)", "full_signature": "@Override public void sendNotification(NotificationServiceConfiguration serviceConfiguration, FileEventNotification.Type type, String userId, List<File> files, Map<String, Permission> sharedUsersIdWithPermission)", "class_method_signature": "MailNotification.sendNotification(NotificationServiceConfiguration serviceConfiguration, FileEventNotification.Type type, String userId, List<File> files, Map<String, Permission> sharedUsersIdWithPermission)", "testcase": false, "constructor": false, "invocations": ["getMail", "sendMailNotification", "displayFiles", "toString", "sendMailNotification", "name", "displayFiles"]}, "repository": {"repo_id": 51772967, "url": "https://github.com/moifort/play-with-hexagonal-architecture", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 53, "size": 7748, "license": "licensed"}}