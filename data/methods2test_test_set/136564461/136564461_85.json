{"test_class": {"identifier": "Ed25519PublicKeyDelegateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PublicKeyDelegate delegate = new Ed25519PublicKeyDelegate(HashAlgorithm.KECCAK_512);", "modifier": "private", "type": "PublicKeyDelegate", "declarator": "delegate = new Ed25519PublicKeyDelegate(HashAlgorithm.KECCAK_512)", "var_name": "delegate"}], "file": "eddsa/src/test/java/io/moatwel/crypto/eddsa/ed25519/Ed25519PublicKeyDelegateTest.java"}, "test_case": {"identifier": "success_GeneratePublicKeySeed_via_KECCAK_512_from_byte_array_1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void success_GeneratePublicKeySeed_via_KECCAK_512_from_byte_array_1() {\n        PrivateKey privateKey = PrivateKeyEd25519.fromBytes(new byte[32]);\n\n        byte[] seed = delegate.generatePublicKeySeed(privateKey);\n\n        byte[] value = new byte[]{70, 46, -23, 118, -119, 9, 22, -27, 79, -88, 37, -46, 107,\n                -35, 2, 53, -11, -21, 91, 106, 20, 60, 25, -102, -80, -82, 94, -23, 50, -114, 8, -50};\n\n        assertThat(HexEncoder.getString(value), is(\"462ee976890916e54fa825d26bdd0235f5eb5b6a143c199ab0ae5ee9328e08ce\"));\n        assertThat(seed, is(value));\n        assertThat(HexEncoder.getString(seed), is(\"462ee976890916e54fa825d26bdd0235f5eb5b6a143c199ab0ae5ee9328e08ce\"));\n    }", "signature": "void success_GeneratePublicKeySeed_via_KECCAK_512_from_byte_array_1()", "full_signature": "@Test public void success_GeneratePublicKeySeed_via_KECCAK_512_from_byte_array_1()", "class_method_signature": "Ed25519PublicKeyDelegateTest.success_GeneratePublicKeySeed_via_KECCAK_512_from_byte_array_1()", "testcase": true, "constructor": false, "invocations": ["fromBytes", "generatePublicKeySeed", "assertThat", "getString", "is", "assertThat", "is", "assertThat", "getString", "is"]}, "focal_class": {"identifier": "Ed25519PublicKeyDelegate", "superclass": "", "interfaces": "implements PublicKeyDelegate", "fields": [{"original_string": "private static final Curve25519 CURVE = Curve25519.getInstance();", "modifier": "private static final", "type": "Curve25519", "declarator": "CURVE = Curve25519.getInstance()", "var_name": "CURVE"}, {"original_string": "private final HashAlgorithm hashAlgorithm;", "modifier": "private final", "type": "HashAlgorithm", "declarator": "hashAlgorithm", "var_name": "hashAlgorithm"}], "methods": [{"identifier": "Ed25519PublicKeyDelegate", "parameters": "(HashAlgorithm hashAlgorithm)", "modifiers": "public", "return": "", "signature": " Ed25519PublicKeyDelegate(HashAlgorithm hashAlgorithm)", "full_signature": "public  Ed25519PublicKeyDelegate(HashAlgorithm hashAlgorithm)", "class_method_signature": "Ed25519PublicKeyDelegate.Ed25519PublicKeyDelegate(HashAlgorithm hashAlgorithm)", "testcase": false, "constructor": true}, {"identifier": "generatePublicKeySeed", "parameters": "(PrivateKey privateKey)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] generatePublicKeySeed(PrivateKey privateKey)", "full_signature": "@Override public byte[] generatePublicKeySeed(PrivateKey privateKey)", "class_method_signature": "Ed25519PublicKeyDelegate.generatePublicKeySeed(PrivateKey privateKey)", "testcase": false, "constructor": false}, {"identifier": "hashPrivateKey", "parameters": "(PrivateKey privateKey)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] hashPrivateKey(PrivateKey privateKey)", "full_signature": "@Override public byte[] hashPrivateKey(PrivateKey privateKey)", "class_method_signature": "Ed25519PublicKeyDelegate.hashPrivateKey(PrivateKey privateKey)", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/crypto/eddsa/ed25519/Ed25519PublicKeyDelegate.java"}, "focal_method": {"identifier": "generatePublicKeySeed", "parameters": "(PrivateKey privateKey)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n    public byte[] generatePublicKeySeed(PrivateKey privateKey) {\n        if (!(privateKey instanceof PrivateKeyEd25519)) {\n            throw new IllegalArgumentException(\"Public key on Curve25519 must be \" +\n                    CURVE.getPublicKeyByteLength() + \" byte length. Length: \" + privateKey.getRaw().length);\n        }\n\n        BigInteger s = privateKey.getScalarSeed(this);\n\n        Point point = CURVE.getBasePoint().scalarMultiply(s);\n        return point.encode().getValue();\n    }", "signature": "byte[] generatePublicKeySeed(PrivateKey privateKey)", "full_signature": "@Override public byte[] generatePublicKeySeed(PrivateKey privateKey)", "class_method_signature": "Ed25519PublicKeyDelegate.generatePublicKeySeed(PrivateKey privateKey)", "testcase": false, "constructor": false, "invocations": ["getPublicKeyByteLength", "getRaw", "getScalarSeed", "scalarMultiply", "getBasePoint", "getValue", "encode"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}