{"test_class": {"identifier": "SocketAnalyzerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long TIMEOUT = 3;", "modifier": "private static final", "type": "long", "declarator": "TIMEOUT = 3", "var_name": "TIMEOUT"}], "file": "lighty-core/lighty-common/src/test/java/io/lighty/core/common/SocketAnalyzerTest.java"}, "test_case": {"identifier": "socketAnalyzerAwaitPortSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void socketAnalyzerAwaitPortSuccess() throws IOException {\n        ServerSocket blockingSocket = null;\n        try {\n            final int availablePort = findAvailablePort();\n            blockingSocket = new ServerSocket(availablePort);\n            Assert.assertFalse(SocketAnalyzer.awaitPortAvailable(availablePort, TIMEOUT, TimeUnit.SECONDS));\n        } catch (InterruptedException | IOException e) {\n            Assert.fail(\"SocketAnalyzer test failed.\", e);\n        } finally {\n            if (blockingSocket != null) {\n                blockingSocket.close();\n            }\n        }\n    }", "signature": "void socketAnalyzerAwaitPortSuccess()", "full_signature": "@Test public void socketAnalyzerAwaitPortSuccess()", "class_method_signature": "SocketAnalyzerTest.socketAnalyzerAwaitPortSuccess()", "testcase": true, "constructor": false, "invocations": ["findAvailablePort", "assertFalse", "awaitPortAvailable", "fail", "close"]}, "focal_class": {"identifier": "SocketAnalyzer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SocketAnalyzer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SocketAnalyzer.class)", "var_name": "LOG"}, {"original_string": "private static final int SOCKET_PORT_WAIT_TIME = 500;", "modifier": "private static final", "type": "int", "declarator": "SOCKET_PORT_WAIT_TIME = 500", "var_name": "SOCKET_PORT_WAIT_TIME"}], "methods": [{"identifier": "SocketAnalyzer", "parameters": "()", "modifiers": "private", "return": "", "signature": " SocketAnalyzer()", "full_signature": "private  SocketAnalyzer()", "class_method_signature": "SocketAnalyzer.SocketAnalyzer()", "testcase": false, "constructor": true}, {"identifier": "awaitPortAvailable", "parameters": "(final int port, final long timeout, final TimeUnit timeUnit)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean awaitPortAvailable(final int port, final long timeout, final TimeUnit timeUnit)", "full_signature": "public static Boolean awaitPortAvailable(final int port, final long timeout, final TimeUnit timeUnit)", "class_method_signature": "SocketAnalyzer.awaitPortAvailable(final int port, final long timeout, final TimeUnit timeUnit)", "testcase": false, "constructor": false}], "file": "lighty-core/lighty-common/src/main/java/io/lighty/core/common/SocketAnalyzer.java"}, "focal_method": {"identifier": "awaitPortAvailable", "parameters": "(final int port, final long timeout, final TimeUnit timeUnit)", "modifiers": "public static", "return": "Boolean", "body": "public static Boolean awaitPortAvailable(final int port, final long timeout, final TimeUnit timeUnit)\n            throws InterruptedException {\n\n        final long expectedEndTime = System.nanoTime() + timeUnit.toNanos(timeout);\n\n        while (System.nanoTime() <= expectedEndTime) {\n            LOG.debug(\"Check if port {} is available\", port);\n            try (ServerSocket serverSocket = new ServerSocket(port)) {\n                LOG.debug(\"Port {} available\", port);\n                return true;\n            } catch (IOException e) {\n                LOG.info(\"Port {} is not available - Awaiting port availability 1s\", port);\n                Thread.sleep(SOCKET_PORT_WAIT_TIME);\n            }\n        }\n\n        return false;\n    }", "signature": "Boolean awaitPortAvailable(final int port, final long timeout, final TimeUnit timeUnit)", "full_signature": "public static Boolean awaitPortAvailable(final int port, final long timeout, final TimeUnit timeUnit)", "class_method_signature": "SocketAnalyzer.awaitPortAvailable(final int port, final long timeout, final TimeUnit timeUnit)", "testcase": false, "constructor": false, "invocations": ["nanoTime", "toNanos", "nanoTime", "debug", "debug", "info", "sleep"]}, "repository": {"repo_id": 132660065, "url": "https://github.com/PantheonTechnologies/lighty-core", "stars": 45, "created": "5/8/2018 8:16:54 PM +00:00", "updates": "2020-01-22T13:46:21+00:00", "fork": "False", "license": "licensed"}}