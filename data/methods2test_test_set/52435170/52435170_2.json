{"test_class": {"identifier": "MongoDbDecoratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private TestInvocation invocation;", "modifier": "@Mock\n    private", "type": "TestInvocation", "declarator": "invocation", "var_name": "invocation"}, {"original_string": "@Mock\n    private ExecutionContext ctx;", "modifier": "@Mock\n    private", "type": "ExecutionContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "@Mock\n    private MongoDatabase mongoDataBase;", "modifier": "@Mock\n    private", "type": "MongoDatabase", "declarator": "mongoDataBase", "var_name": "mongoDataBase"}, {"original_string": "@Mock\n    private MongoClient mongoClient;", "modifier": "@Mock\n    private", "type": "MongoClient", "declarator": "mongoClient", "var_name": "mongoClient"}, {"original_string": "@Mock\n    private MongoDbFeatureExecutor executor;", "modifier": "@Mock\n    private", "type": "MongoDbFeatureExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "@Mock\n    private Configuration configuration;", "modifier": "@Mock\n    private", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "@Mock\n    private ConfigurationRegistry configRegistry;", "modifier": "@Mock\n    private", "type": "ConfigurationRegistry", "declarator": "configRegistry", "var_name": "configRegistry"}, {"original_string": "private MongoDbDecorator decorator;", "modifier": "private", "type": "MongoDbDecorator", "declarator": "decorator", "var_name": "decorator"}], "file": "mongodb/src/test/java/eu/drus/jpa/unit/mongodb/MongoDbDecoratorTest.java"}, "test_case": {"identifier": "testMongoClientIsClosedEvenIfExecuteAfterTestFails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMongoClientIsClosedEvenIfExecuteAfterTestFails() throws Throwable {\n        // GIVEN\n        when(invocation.getException()).thenReturn(Optional.of(new Exception()));\n        doThrow(RuntimeException.class).when(executor).executeAfterTest(any(MongoDatabase.class), anyBoolean());\n\n        // WHEN\n        try {\n            decorator.afterTest(invocation);\n            fail(\"Exception expected\");\n        } catch (final Exception e) {\n            // expected\n        }\n\n        // THEN\n        verifyZeroInteractions(mongoClient);\n    }", "signature": "void testMongoClientIsClosedEvenIfExecuteAfterTestFails()", "full_signature": "@Test public void testMongoClientIsClosedEvenIfExecuteAfterTestFails()", "class_method_signature": "MongoDbDecoratorTest.testMongoClientIsClosedEvenIfExecuteAfterTestFails()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getException", "of", "executeAfterTest", "when", "doThrow", "any", "anyBoolean", "afterTest", "fail", "verifyZeroInteractions"]}, "focal_class": {"identifier": "MongoDbDecorator", "superclass": "", "interfaces": "implements TestMethodDecorator", "fields": [{"original_string": "private ConfigurationRegistry configurationRegistry = new ConfigurationRegistry();", "modifier": "private", "type": "ConfigurationRegistry", "declarator": "configurationRegistry = new ConfigurationRegistry()", "var_name": "configurationRegistry"}], "methods": [{"identifier": "getPriority", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPriority()", "full_signature": "@Override public int getPriority()", "class_method_signature": "MongoDbDecorator.getPriority()", "testcase": false, "constructor": false}, {"identifier": "beforeTest", "parameters": "(final TestInvocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void beforeTest(final TestInvocation invocation)", "full_signature": "@Override public void beforeTest(final TestInvocation invocation)", "class_method_signature": "MongoDbDecorator.beforeTest(final TestInvocation invocation)", "testcase": false, "constructor": false}, {"identifier": "afterTest", "parameters": "(final TestInvocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void afterTest(final TestInvocation invocation)", "full_signature": "@Override public void afterTest(final TestInvocation invocation)", "class_method_signature": "MongoDbDecorator.afterTest(final TestInvocation invocation)", "testcase": false, "constructor": false}, {"identifier": "isConfigurationSupported", "parameters": "(final ExecutionContext ctx)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConfigurationSupported(final ExecutionContext ctx)", "full_signature": "@Override public boolean isConfigurationSupported(final ExecutionContext ctx)", "class_method_signature": "MongoDbDecorator.isConfigurationSupported(final ExecutionContext ctx)", "testcase": false, "constructor": false}], "file": "mongodb/src/main/java/eu/drus/jpa/unit/mongodb/MongoDbDecorator.java"}, "focal_method": {"identifier": "afterTest", "parameters": "(final TestInvocation invocation)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void afterTest(final TestInvocation invocation) throws Exception {\n        final ExecutionContext context = invocation.getContext();\n\n        final MongoDatabase mongoDb = (MongoDatabase) context.getData(Constants.KEY_MONGO_DB);\n        final MongoDbFeatureExecutor dbFeatureExecutor = (MongoDbFeatureExecutor) context.getData(Constants.KEY_FEATURE_EXECUTOR);\n        context.storeData(Constants.KEY_MONGO_DB, null);\n        context.storeData(Constants.KEY_FEATURE_EXECUTOR, null);\n\n        dbFeatureExecutor.executeAfterTest(mongoDb, invocation.getException().isPresent());\n    }", "signature": "void afterTest(final TestInvocation invocation)", "full_signature": "@Override public void afterTest(final TestInvocation invocation)", "class_method_signature": "MongoDbDecorator.afterTest(final TestInvocation invocation)", "testcase": false, "constructor": false, "invocations": ["getContext", "getData", "getData", "storeData", "storeData", "executeAfterTest", "isPresent", "getException"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}