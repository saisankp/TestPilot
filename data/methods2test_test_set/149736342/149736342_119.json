{"test_class": {"identifier": "NumericTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte[] HEX_RANGE_ARRAY = new byte[] {\n            asByte(0x0, 0x1),\n            asByte(0x2, 0x3),\n            asByte(0x4, 0x5),\n            asByte(0x6, 0x7),\n            asByte(0x8, 0x9),\n            asByte(0xa, 0xb),\n            asByte(0xc, 0xd),\n            asByte(0xe, 0xf)\n    };", "modifier": "private static final", "type": "byte[]", "declarator": "HEX_RANGE_ARRAY = new byte[] {\n            asByte(0x0, 0x1),\n            asByte(0x2, 0x3),\n            asByte(0x4, 0x5),\n            asByte(0x6, 0x7),\n            asByte(0x8, 0x9),\n            asByte(0xa, 0xb),\n            asByte(0xc, 0xd),\n            asByte(0xe, 0xf)\n    }", "var_name": "HEX_RANGE_ARRAY"}, {"original_string": "private static final String HEX_RANGE_STRING = \"0x0123456789abcdef\";", "modifier": "private static final", "type": "String", "declarator": "HEX_RANGE_STRING = \"0x0123456789abcdef\"", "var_name": "HEX_RANGE_STRING"}], "file": "utils/src/test/java/org/web3j/utils/NumericTest.java"}, "test_case": {"identifier": "testQuantityDecodeLeadingZeroException", "parameters": "()", "modifiers": "@Ignore @Test(expected = MessageDecodingException.class) public", "return": "void", "body": "@Ignore\n    @Test(expected = MessageDecodingException.class)\n    public void testQuantityDecodeLeadingZeroException() {\n        Numeric.decodeQuantity(\"0x0400\");\n    }", "signature": "void testQuantityDecodeLeadingZeroException()", "full_signature": "@Ignore @Test(expected = MessageDecodingException.class) public void testQuantityDecodeLeadingZeroException()", "class_method_signature": "NumericTest.testQuantityDecodeLeadingZeroException()", "testcase": true, "constructor": false, "invocations": ["decodeQuantity"]}, "focal_class": {"identifier": "Numeric", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HEX_PREFIX = \"0x\";", "modifier": "private static final", "type": "String", "declarator": "HEX_PREFIX = \"0x\"", "var_name": "HEX_PREFIX"}], "methods": [{"identifier": "Numeric", "parameters": "()", "modifiers": "private", "return": "", "signature": " Numeric()", "full_signature": "private  Numeric()", "class_method_signature": "Numeric.Numeric()", "testcase": false, "constructor": true}, {"identifier": "encodeQuantity", "parameters": "(BigInteger value)", "modifiers": "public static", "return": "String", "signature": "String encodeQuantity(BigInteger value)", "full_signature": "public static String encodeQuantity(BigInteger value)", "class_method_signature": "Numeric.encodeQuantity(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "decodeQuantity", "parameters": "(String value)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger decodeQuantity(String value)", "full_signature": "public static BigInteger decodeQuantity(String value)", "class_method_signature": "Numeric.decodeQuantity(String value)", "testcase": false, "constructor": false}, {"identifier": "isValidHexQuantity", "parameters": "(String value)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidHexQuantity(String value)", "full_signature": "private static boolean isValidHexQuantity(String value)", "class_method_signature": "Numeric.isValidHexQuantity(String value)", "testcase": false, "constructor": false}, {"identifier": "cleanHexPrefix", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String cleanHexPrefix(String input)", "full_signature": "public static String cleanHexPrefix(String input)", "class_method_signature": "Numeric.cleanHexPrefix(String input)", "testcase": false, "constructor": false}, {"identifier": "prependHexPrefix", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String prependHexPrefix(String input)", "full_signature": "public static String prependHexPrefix(String input)", "class_method_signature": "Numeric.prependHexPrefix(String input)", "testcase": false, "constructor": false}, {"identifier": "containsHexPrefix", "parameters": "(String input)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsHexPrefix(String input)", "full_signature": "public static boolean containsHexPrefix(String input)", "class_method_signature": "Numeric.containsHexPrefix(String input)", "testcase": false, "constructor": false}, {"identifier": "toBigInt", "parameters": "(byte[] value, int offset, int length)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger toBigInt(byte[] value, int offset, int length)", "full_signature": "public static BigInteger toBigInt(byte[] value, int offset, int length)", "class_method_signature": "Numeric.toBigInt(byte[] value, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "toBigInt", "parameters": "(byte[] value)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger toBigInt(byte[] value)", "full_signature": "public static BigInteger toBigInt(byte[] value)", "class_method_signature": "Numeric.toBigInt(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "toBigInt", "parameters": "(String hexValue)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger toBigInt(String hexValue)", "full_signature": "public static BigInteger toBigInt(String hexValue)", "class_method_signature": "Numeric.toBigInt(String hexValue)", "testcase": false, "constructor": false}, {"identifier": "toBigIntNoPrefix", "parameters": "(String hexValue)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger toBigIntNoPrefix(String hexValue)", "full_signature": "public static BigInteger toBigIntNoPrefix(String hexValue)", "class_method_signature": "Numeric.toBigIntNoPrefix(String hexValue)", "testcase": false, "constructor": false}, {"identifier": "toHexStringWithPrefix", "parameters": "(BigInteger value)", "modifiers": "public static", "return": "String", "signature": "String toHexStringWithPrefix(BigInteger value)", "full_signature": "public static String toHexStringWithPrefix(BigInteger value)", "class_method_signature": "Numeric.toHexStringWithPrefix(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "toHexStringNoPrefix", "parameters": "(BigInteger value)", "modifiers": "public static", "return": "String", "signature": "String toHexStringNoPrefix(BigInteger value)", "full_signature": "public static String toHexStringNoPrefix(BigInteger value)", "class_method_signature": "Numeric.toHexStringNoPrefix(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "toHexStringNoPrefix", "parameters": "(byte[] input)", "modifiers": "public static", "return": "String", "signature": "String toHexStringNoPrefix(byte[] input)", "full_signature": "public static String toHexStringNoPrefix(byte[] input)", "class_method_signature": "Numeric.toHexStringNoPrefix(byte[] input)", "testcase": false, "constructor": false}, {"identifier": "toHexStringWithPrefixZeroPadded", "parameters": "(BigInteger value, int size)", "modifiers": "public static", "return": "String", "signature": "String toHexStringWithPrefixZeroPadded(BigInteger value, int size)", "full_signature": "public static String toHexStringWithPrefixZeroPadded(BigInteger value, int size)", "class_method_signature": "Numeric.toHexStringWithPrefixZeroPadded(BigInteger value, int size)", "testcase": false, "constructor": false}, {"identifier": "toHexStringWithPrefixSafe", "parameters": "(BigInteger value)", "modifiers": "public static", "return": "String", "signature": "String toHexStringWithPrefixSafe(BigInteger value)", "full_signature": "public static String toHexStringWithPrefixSafe(BigInteger value)", "class_method_signature": "Numeric.toHexStringWithPrefixSafe(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "toHexStringNoPrefixZeroPadded", "parameters": "(BigInteger value, int size)", "modifiers": "public static", "return": "String", "signature": "String toHexStringNoPrefixZeroPadded(BigInteger value, int size)", "full_signature": "public static String toHexStringNoPrefixZeroPadded(BigInteger value, int size)", "class_method_signature": "Numeric.toHexStringNoPrefixZeroPadded(BigInteger value, int size)", "testcase": false, "constructor": false}, {"identifier": "toHexStringZeroPadded", "parameters": "(BigInteger value, int size, boolean withPrefix)", "modifiers": "private static", "return": "String", "signature": "String toHexStringZeroPadded(BigInteger value, int size, boolean withPrefix)", "full_signature": "private static String toHexStringZeroPadded(BigInteger value, int size, boolean withPrefix)", "class_method_signature": "Numeric.toHexStringZeroPadded(BigInteger value, int size, boolean withPrefix)", "testcase": false, "constructor": false}, {"identifier": "toBytesPadded", "parameters": "(BigInteger value, int length)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toBytesPadded(BigInteger value, int length)", "full_signature": "public static byte[] toBytesPadded(BigInteger value, int length)", "class_method_signature": "Numeric.toBytesPadded(BigInteger value, int length)", "testcase": false, "constructor": false}, {"identifier": "hexStringToByteArray", "parameters": "(String input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hexStringToByteArray(String input)", "full_signature": "public static byte[] hexStringToByteArray(String input)", "class_method_signature": "Numeric.hexStringToByteArray(String input)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte[] input, int offset, int length, boolean withPrefix)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte[] input, int offset, int length, boolean withPrefix)", "full_signature": "public static String toHexString(byte[] input, int offset, int length, boolean withPrefix)", "class_method_signature": "Numeric.toHexString(byte[] input, int offset, int length, boolean withPrefix)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte[] input)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte[] input)", "full_signature": "public static String toHexString(byte[] input)", "class_method_signature": "Numeric.toHexString(byte[] input)", "testcase": false, "constructor": false}, {"identifier": "asByte", "parameters": "(int m, int n)", "modifiers": "public static", "return": "byte", "signature": "byte asByte(int m, int n)", "full_signature": "public static byte asByte(int m, int n)", "class_method_signature": "Numeric.asByte(int m, int n)", "testcase": false, "constructor": false}, {"identifier": "isIntegerValue", "parameters": "(BigDecimal value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIntegerValue(BigDecimal value)", "full_signature": "public static boolean isIntegerValue(BigDecimal value)", "class_method_signature": "Numeric.isIntegerValue(BigDecimal value)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/org/web3j/utils/Numeric.java"}, "focal_method": {"identifier": "decodeQuantity", "parameters": "(String value)", "modifiers": "public static", "return": "BigInteger", "body": "public static BigInteger decodeQuantity(String value) {\n        if (!isValidHexQuantity(value)) {\n            throw new MessageDecodingException(\"Value must be in format 0x[1-9]+[0-9]* or 0x0\");\n        }\n        try {\n            return new BigInteger(value.substring(2), 16);\n        } catch (NumberFormatException e) {\n            throw new MessageDecodingException(\"Negative \", e);\n        }\n    }", "signature": "BigInteger decodeQuantity(String value)", "full_signature": "public static BigInteger decodeQuantity(String value)", "class_method_signature": "Numeric.decodeQuantity(String value)", "testcase": false, "constructor": false, "invocations": ["isValidHexQuantity", "substring"]}, "repository": {"repo_id": 149736342, "url": "https://github.com/BrahmaOS/brahmaos-web3j", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 1779, "license": "licensed"}}