{"test_class": {"identifier": "AsciidocConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Asciidoctor asciidoctor = Asciidoctor.Factory.create();", "modifier": "private", "type": "Asciidoctor", "declarator": "asciidoctor = Asciidoctor.Factory.create()", "var_name": "asciidoctor"}, {"original_string": "@Parameterized.Parameter\n    public String asciidocFile;", "modifier": "@Parameterized.Parameter\n    public", "type": "String", "declarator": "asciidocFile", "var_name": "asciidocFile"}], "file": "swagger2markup-asciidoc/src/test/java/io/github/swagger2markup/adoc/AsciidocConverterTest.java"}, "test_case": {"identifier": "converts_asciidoc_to_asciidoc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void converts_asciidoc_to_asciidoc() throws IOException {\n        //Given\n        String originalAsciiDoc = IOUtils.toString(getClass().getResourceAsStream(\"/asciidoc/original/\" + asciidocFile), StandardCharsets.UTF_8);\n        String expectedAsciiDoc = IOUtils.toString(getClass().getResourceAsStream(\"/asciidoc/expected/\" + asciidocFile), StandardCharsets.UTF_8);\n\n        //When\n        asciidoctor.javaConverterRegistry().register(AsciidocConverter.class, AsciidocConverter.NAME);\n        String result = asciidoctor.convert(originalAsciiDoc, OptionsBuilder.options().backend(AsciidocConverter.NAME).headerFooter(false).asMap());\n\n        //Then\n        assertEquals(expectedAsciiDoc, result);\n    }", "signature": "void converts_asciidoc_to_asciidoc()", "full_signature": "@Test public void converts_asciidoc_to_asciidoc()", "class_method_signature": "AsciidocConverterTest.converts_asciidoc_to_asciidoc()", "testcase": true, "constructor": false, "invocations": ["toString", "getResourceAsStream", "getClass", "toString", "getResourceAsStream", "getClass", "register", "javaConverterRegistry", "convert", "asMap", "headerFooter", "backend", "options", "assertEquals"]}, "focal_class": {"identifier": "AsciidocConverter", "superclass": "extends StringConverter", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "public static final String NAME = \"adoc\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"adoc\"", "var_name": "NAME"}, {"original_string": "private final Pattern emptyLineOrStartWith = Pattern.compile(\"(?m)^\\\\s*(?:\\\\r?\\\\n)|(?m)^\\\\s+\");", "modifier": "private final", "type": "Pattern", "declarator": "emptyLineOrStartWith = Pattern.compile(\"(?m)^\\\\s*(?:\\\\r?\\\\n)|(?m)^\\\\s+\")", "var_name": "emptyLineOrStartWith"}, {"original_string": "private final Pattern coListItemIdPattern = Pattern.compile(\".*-(\\\\d+)\");", "modifier": "private final", "type": "Pattern", "declarator": "coListItemIdPattern = Pattern.compile(\".*-(\\\\d+)\")", "var_name": "coListItemIdPattern"}, {"original_string": "private final Pattern tableColumnsStylePattern = Pattern.compile(\"((\\\\d+)\\\\*)?([<^>])?(\\\\.[<^>])?(\\\\d+)?([adehlmsv])?\");", "modifier": "private final", "type": "Pattern", "declarator": "tableColumnsStylePattern = Pattern.compile(\"((\\\\d+)\\\\*)?([<^>])?(\\\\.[<^>])?(\\\\d+)?([adehlmsv])?\")", "var_name": "tableColumnsStylePattern"}, {"original_string": "private static final java.util.List<String> attributeToExclude = Arrays.asList(\n            \"localtime\",\n            \"filetype\",\n            \"asciidoctor-version\",\n            \"doctime\",\n            \"localyear\",\n            \"docdate\",\n            \"localdate\",\n            \"localdatetime\",\n            \"docdatetime\",\n            \"backend\",\n            \"basebackend\",\n            \"doctitle\",\n            \"docyear\"\n    );", "modifier": "private static final", "type": "java.util.List<String>", "declarator": "attributeToExclude = Arrays.asList(\n            \"localtime\",\n            \"filetype\",\n            \"asciidoctor-version\",\n            \"doctime\",\n            \"localyear\",\n            \"docdate\",\n            \"localdate\",\n            \"localdatetime\",\n            \"docdatetime\",\n            \"backend\",\n            \"basebackend\",\n            \"doctitle\",\n            \"docyear\"\n    )", "var_name": "attributeToExclude"}, {"original_string": "private static final String[] supportedUrlSchemes = new String[]{\n            \"http\",\n            \"https\",\n            \"ftp\",\n            \"irc\",\n            \"mailto\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "supportedUrlSchemes = new String[]{\n            \"http\",\n            \"https\",\n            \"ftp\",\n            \"irc\",\n            \"mailto\"\n    }", "var_name": "supportedUrlSchemes"}], "methods": [{"identifier": "AsciidocConverter", "parameters": "(String backend, Map<String, Object> opts)", "modifiers": "public", "return": "", "signature": " AsciidocConverter(String backend, Map<String, Object> opts)", "full_signature": "public  AsciidocConverter(String backend, Map<String, Object> opts)", "class_method_signature": "AsciidocConverter.AsciidocConverter(String backend, Map<String, Object> opts)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(ContentNode node, String transform, Map<Object, Object> opts)", "modifiers": "@Override public", "return": "String", "signature": "String convert(ContentNode node, String transform, Map<Object, Object> opts)", "full_signature": "@Override public String convert(ContentNode node, String transform, Map<Object, Object> opts)", "class_method_signature": "AsciidocConverter.convert(ContentNode node, String transform, Map<Object, Object> opts)", "testcase": false, "constructor": false}, {"identifier": "convertEmbedded", "parameters": "(Document node)", "modifiers": "", "return": "String", "signature": "String convertEmbedded(Document node)", "full_signature": " String convertEmbedded(Document node)", "class_method_signature": "AsciidocConverter.convertEmbedded(Document node)", "testcase": false, "constructor": false}, {"identifier": "appendAuthors", "parameters": "(StringBuilder sb, Map<String, Object> attributes)", "modifiers": "private", "return": "void", "signature": "void appendAuthors(StringBuilder sb, Map<String, Object> attributes)", "full_signature": "private void appendAuthors(StringBuilder sb, Map<String, Object> attributes)", "class_method_signature": "AsciidocConverter.appendAuthors(StringBuilder sb, Map<String, Object> attributes)", "testcase": false, "constructor": false}, {"identifier": "appendDocumentAttributes", "parameters": "(StringBuilder sb, Map<String, Object> attributes)", "modifiers": "private", "return": "void", "signature": "void appendDocumentAttributes(StringBuilder sb, Map<String, Object> attributes)", "full_signature": "private void appendDocumentAttributes(StringBuilder sb, Map<String, Object> attributes)", "class_method_signature": "AsciidocConverter.appendDocumentAttributes(StringBuilder sb, Map<String, Object> attributes)", "testcase": false, "constructor": false}, {"identifier": "appendRevisionDetails", "parameters": "(StringBuilder sb, Map<String, Object> attributes)", "modifiers": "private", "return": "void", "signature": "void appendRevisionDetails(StringBuilder sb, Map<String, Object> attributes)", "full_signature": "private void appendRevisionDetails(StringBuilder sb, Map<String, Object> attributes)", "class_method_signature": "AsciidocConverter.appendRevisionDetails(StringBuilder sb, Map<String, Object> attributes)", "testcase": false, "constructor": false}, {"identifier": "getAuthorDetail", "parameters": "(Map<String, Object> attributes, String authorKey, String emailKey)", "modifiers": "private", "return": "String", "signature": "String getAuthorDetail(Map<String, Object> attributes, String authorKey, String emailKey)", "full_signature": "private String getAuthorDetail(Map<String, Object> attributes, String authorKey, String emailKey)", "class_method_signature": "AsciidocConverter.getAuthorDetail(Map<String, Object> attributes, String authorKey, String emailKey)", "testcase": false, "constructor": false}, {"identifier": "convertInlineAnchor", "parameters": "(PhraseNode node)", "modifiers": "private", "return": "String", "signature": "String convertInlineAnchor(PhraseNode node)", "full_signature": "private String convertInlineAnchor(PhraseNode node)", "class_method_signature": "AsciidocConverter.convertInlineAnchor(PhraseNode node)", "testcase": false, "constructor": false}, {"identifier": "convertAdmonition", "parameters": "(Block node)", "modifiers": "private", "return": "String", "signature": "String convertAdmonition(Block node)", "full_signature": "private String convertAdmonition(Block node)", "class_method_signature": "AsciidocConverter.convertAdmonition(Block node)", "testcase": false, "constructor": false}, {"identifier": "convertInlineQuoted", "parameters": "(PhraseNode node)", "modifiers": "private", "return": "String", "signature": "String convertInlineQuoted(PhraseNode node)", "full_signature": "private String convertInlineQuoted(PhraseNode node)", "class_method_signature": "AsciidocConverter.convertInlineQuoted(PhraseNode node)", "testcase": false, "constructor": false}, {"identifier": "convertFloatingTitle", "parameters": "(StructuralNode node)", "modifiers": "private", "return": "String", "signature": "String convertFloatingTitle(StructuralNode node)", "full_signature": "private String convertFloatingTitle(StructuralNode node)", "class_method_signature": "AsciidocConverter.convertFloatingTitle(StructuralNode node)", "testcase": false, "constructor": false}, {"identifier": "convertExample", "parameters": "(Block node)", "modifiers": "private", "return": "String", "signature": "String convertExample(Block node)", "full_signature": "private String convertExample(Block node)", "class_method_signature": "AsciidocConverter.convertExample(Block node)", "testcase": false, "constructor": false}, {"identifier": "convertInlineButton", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertInlineButton(ContentNode node)", "full_signature": "private String convertInlineButton(ContentNode node)", "class_method_signature": "AsciidocConverter.convertInlineButton(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertInlineCallout", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertInlineCallout(ContentNode node)", "full_signature": "private String convertInlineCallout(ContentNode node)", "class_method_signature": "AsciidocConverter.convertInlineCallout(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertInlineBreak", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertInlineBreak(ContentNode node)", "full_signature": "private String convertInlineBreak(ContentNode node)", "class_method_signature": "AsciidocConverter.convertInlineBreak(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertInlineFootnote", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertInlineFootnote(ContentNode node)", "full_signature": "private String convertInlineFootnote(ContentNode node)", "class_method_signature": "AsciidocConverter.convertInlineFootnote(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertInlineImage", "parameters": "(PhraseNode node)", "modifiers": "private", "return": "String", "signature": "String convertInlineImage(PhraseNode node)", "full_signature": "private String convertInlineImage(PhraseNode node)", "class_method_signature": "AsciidocConverter.convertInlineImage(PhraseNode node)", "testcase": false, "constructor": false}, {"identifier": "convertInlineIndexTerm", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertInlineIndexTerm(ContentNode node)", "full_signature": "private String convertInlineIndexTerm(ContentNode node)", "class_method_signature": "AsciidocConverter.convertInlineIndexTerm(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertInlineKbd", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertInlineKbd(ContentNode node)", "full_signature": "private String convertInlineKbd(ContentNode node)", "class_method_signature": "AsciidocConverter.convertInlineKbd(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertInlineMenu", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertInlineMenu(ContentNode node)", "full_signature": "private String convertInlineMenu(ContentNode node)", "class_method_signature": "AsciidocConverter.convertInlineMenu(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertOpen", "parameters": "(StructuralNode node)", "modifiers": "private", "return": "String", "signature": "String convertOpen(StructuralNode node)", "full_signature": "private String convertOpen(StructuralNode node)", "class_method_signature": "AsciidocConverter.convertOpen(StructuralNode node)", "testcase": false, "constructor": false}, {"identifier": "convertPageBreak", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertPageBreak(ContentNode node)", "full_signature": "private String convertPageBreak(ContentNode node)", "class_method_signature": "AsciidocConverter.convertPageBreak(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertQuote", "parameters": "(StructuralNode node)", "modifiers": "private", "return": "String", "signature": "String convertQuote(StructuralNode node)", "full_signature": "private String convertQuote(StructuralNode node)", "class_method_signature": "AsciidocConverter.convertQuote(StructuralNode node)", "testcase": false, "constructor": false}, {"identifier": "convertSidebar", "parameters": "(StructuralNode node)", "modifiers": "private", "return": "String", "signature": "String convertSidebar(StructuralNode node)", "full_signature": "private String convertSidebar(StructuralNode node)", "class_method_signature": "AsciidocConverter.convertSidebar(StructuralNode node)", "testcase": false, "constructor": false}, {"identifier": "convertStem", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertStem(ContentNode node)", "full_signature": "private String convertStem(ContentNode node)", "class_method_signature": "AsciidocConverter.convertStem(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertThematicBreak", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertThematicBreak(ContentNode node)", "full_signature": "private String convertThematicBreak(ContentNode node)", "class_method_signature": "AsciidocConverter.convertThematicBreak(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertVerse", "parameters": "(StructuralNode node)", "modifiers": "private", "return": "String", "signature": "String convertVerse(StructuralNode node)", "full_signature": "private String convertVerse(StructuralNode node)", "class_method_signature": "AsciidocConverter.convertVerse(StructuralNode node)", "testcase": false, "constructor": false}, {"identifier": "convertVideo", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertVideo(ContentNode node)", "full_signature": "private String convertVideo(ContentNode node)", "class_method_signature": "AsciidocConverter.convertVideo(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertToc", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertToc(ContentNode node)", "full_signature": "private String convertToc(ContentNode node)", "class_method_signature": "AsciidocConverter.convertToc(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertPass", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertPass(ContentNode node)", "full_signature": "private String convertPass(ContentNode node)", "class_method_signature": "AsciidocConverter.convertPass(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertAudio", "parameters": "(ContentNode node)", "modifiers": "private", "return": "String", "signature": "String convertAudio(ContentNode node)", "full_signature": "private String convertAudio(ContentNode node)", "class_method_signature": "AsciidocConverter.convertAudio(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "convertCell", "parameters": "(Cell node)", "modifiers": "private", "return": "String", "signature": "String convertCell(Cell node)", "full_signature": "private String convertCell(Cell node)", "class_method_signature": "AsciidocConverter.convertCell(Cell node)", "testcase": false, "constructor": false}, {"identifier": "convertRow", "parameters": "(Row node, java.util.List<TableCellStyle> columnStyles, String delimiterTableCell)", "modifiers": "private", "return": "String", "signature": "String convertRow(Row node, java.util.List<TableCellStyle> columnStyles, String delimiterTableCell)", "full_signature": "private String convertRow(Row node, java.util.List<TableCellStyle> columnStyles, String delimiterTableCell)", "class_method_signature": "AsciidocConverter.convertRow(Row node, java.util.List<TableCellStyle> columnStyles, String delimiterTableCell)", "testcase": false, "constructor": false}, {"identifier": "convertTable", "parameters": "(Table node)", "modifiers": "private", "return": "String", "signature": "String convertTable(Table node)", "full_signature": "private String convertTable(Table node)", "class_method_signature": "AsciidocConverter.convertTable(Table node)", "testcase": false, "constructor": false}, {"identifier": "isInnerTable", "parameters": "(ContentNode node)", "modifiers": "private", "return": "boolean", "signature": "boolean isInnerTable(ContentNode node)", "full_signature": "private boolean isInnerTable(ContentNode node)", "class_method_signature": "AsciidocConverter.isInnerTable(ContentNode node)", "testcase": false, "constructor": false}, {"identifier": "appendRows", "parameters": "(java.util.List<Row> rows, StringBuilder sb, java.util.List<TableCellStyle> columnStyles, String delimiterTableCell)", "modifiers": "private", "return": "void", "signature": "void appendRows(java.util.List<Row> rows, StringBuilder sb, java.util.List<TableCellStyle> columnStyles, String delimiterTableCell)", "full_signature": "private void appendRows(java.util.List<Row> rows, StringBuilder sb, java.util.List<TableCellStyle> columnStyles, String delimiterTableCell)", "class_method_signature": "AsciidocConverter.appendRows(java.util.List<Row> rows, StringBuilder sb, java.util.List<TableCellStyle> columnStyles, String delimiterTableCell)", "testcase": false, "constructor": false}, {"identifier": "convertDescriptionList", "parameters": "(DescriptionList node)", "modifiers": "private", "return": "String", "signature": "String convertDescriptionList(DescriptionList node)", "full_signature": "private String convertDescriptionList(DescriptionList node)", "class_method_signature": "AsciidocConverter.convertDescriptionList(DescriptionList node)", "testcase": false, "constructor": false}, {"identifier": "convertDescriptionListEntry", "parameters": "(DescriptionListEntry node, int level, Boolean descriptionOnNewLine)", "modifiers": "private", "return": "String", "signature": "String convertDescriptionListEntry(DescriptionListEntry node, int level, Boolean descriptionOnNewLine)", "full_signature": "private String convertDescriptionListEntry(DescriptionListEntry node, int level, Boolean descriptionOnNewLine)", "class_method_signature": "AsciidocConverter.convertDescriptionListEntry(DescriptionListEntry node, int level, Boolean descriptionOnNewLine)", "testcase": false, "constructor": false}, {"identifier": "convertListing", "parameters": "(Block node)", "modifiers": "private", "return": "String", "signature": "String convertListing(Block node)", "full_signature": "private String convertListing(Block node)", "class_method_signature": "AsciidocConverter.convertListing(Block node)", "testcase": false, "constructor": false}, {"identifier": "convertUList", "parameters": "(List node)", "modifiers": "private", "return": "String", "signature": "String convertUList(List node)", "full_signature": "private String convertUList(List node)", "class_method_signature": "AsciidocConverter.convertUList(List node)", "testcase": false, "constructor": false}, {"identifier": "convertOList", "parameters": "(List node)", "modifiers": "private", "return": "String", "signature": "String convertOList(List node)", "full_signature": "private String convertOList(List node)", "class_method_signature": "AsciidocConverter.convertOList(List node)", "testcase": false, "constructor": false}, {"identifier": "convertCoList", "parameters": "(List node)", "modifiers": "private", "return": "String", "signature": "String convertCoList(List node)", "full_signature": "private String convertCoList(List node)", "class_method_signature": "AsciidocConverter.convertCoList(List node)", "testcase": false, "constructor": false}, {"identifier": "convertListItem", "parameters": "(ListItem node)", "modifiers": "private", "return": "String", "signature": "String convertListItem(ListItem node)", "full_signature": "private String convertListItem(ListItem node)", "class_method_signature": "AsciidocConverter.convertListItem(ListItem node)", "testcase": false, "constructor": false}, {"identifier": "convertList", "parameters": "(List node)", "modifiers": "private", "return": "String", "signature": "String convertList(List node)", "full_signature": "private String convertList(List node)", "class_method_signature": "AsciidocConverter.convertList(List node)", "testcase": false, "constructor": false}, {"identifier": "convertPreamble", "parameters": "(StructuralNode node)", "modifiers": "private", "return": "String", "signature": "String convertPreamble(StructuralNode node)", "full_signature": "private String convertPreamble(StructuralNode node)", "class_method_signature": "AsciidocConverter.convertPreamble(StructuralNode node)", "testcase": false, "constructor": false}, {"identifier": "convertImage", "parameters": "(StructuralNode node)", "modifiers": "private", "return": "String", "signature": "String convertImage(StructuralNode node)", "full_signature": "private String convertImage(StructuralNode node)", "class_method_signature": "AsciidocConverter.convertImage(StructuralNode node)", "testcase": false, "constructor": false}, {"identifier": "convertLiteral", "parameters": "(StructuralNode node)", "modifiers": "private", "return": "String", "signature": "String convertLiteral(StructuralNode node)", "full_signature": "private String convertLiteral(StructuralNode node)", "class_method_signature": "AsciidocConverter.convertLiteral(StructuralNode node)", "testcase": false, "constructor": false}, {"identifier": "convertParagraph", "parameters": "(StructuralNode node)", "modifiers": "private", "return": "String", "signature": "String convertParagraph(StructuralNode node)", "full_signature": "private String convertParagraph(StructuralNode node)", "class_method_signature": "AsciidocConverter.convertParagraph(StructuralNode node)", "testcase": false, "constructor": false}, {"identifier": "convertSection", "parameters": "(Section node)", "modifiers": "private", "return": "String", "signature": "String convertSection(Section node)", "full_signature": "private String convertSection(Section node)", "class_method_signature": "AsciidocConverter.convertSection(Section node)", "testcase": false, "constructor": false}, {"identifier": "append_link_constraint_attrs", "parameters": "(ContentNode node, java.util.List<String> attrs)", "modifiers": "private", "return": "void", "signature": "void append_link_constraint_attrs(ContentNode node, java.util.List<String> attrs)", "full_signature": "private void append_link_constraint_attrs(ContentNode node, java.util.List<String> attrs)", "class_method_signature": "AsciidocConverter.append_link_constraint_attrs(ContentNode node, java.util.List<String> attrs)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(int count, String with)", "modifiers": "private", "return": "String", "signature": "String repeat(int count, String with)", "full_signature": "private String repeat(int count, String with)", "class_method_signature": "AsciidocConverter.repeat(int count, String with)", "testcase": false, "constructor": false}, {"identifier": "appendChildBlocks", "parameters": "(StructuralNode parentNode, StringBuilder sb)", "modifiers": "private", "return": "void", "signature": "void appendChildBlocks(StructuralNode parentNode, StringBuilder sb)", "full_signature": "private void appendChildBlocks(StructuralNode parentNode, StringBuilder sb)", "class_method_signature": "AsciidocConverter.appendChildBlocks(StructuralNode parentNode, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "appendChildBlocks", "parameters": "(StructuralNode parentNode, StringBuilder sb, boolean addTrailingLineSeparator)", "modifiers": "private", "return": "void", "signature": "void appendChildBlocks(StructuralNode parentNode, StringBuilder sb, boolean addTrailingLineSeparator)", "full_signature": "private void appendChildBlocks(StructuralNode parentNode, StringBuilder sb, boolean addTrailingLineSeparator)", "class_method_signature": "AsciidocConverter.appendChildBlocks(StructuralNode parentNode, StringBuilder sb, boolean addTrailingLineSeparator)", "testcase": false, "constructor": false}, {"identifier": "appendTrailingNewLine", "parameters": "(StringBuilder sb)", "modifiers": "private", "return": "void", "signature": "void appendTrailingNewLine(StringBuilder sb)", "full_signature": "private void appendTrailingNewLine(StringBuilder sb)", "class_method_signature": "AsciidocConverter.appendTrailingNewLine(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "appendId", "parameters": "(StructuralNode node, StringBuilder sb)", "modifiers": "private", "return": "void", "signature": "void appendId(StructuralNode node, StringBuilder sb)", "full_signature": "private void appendId(StructuralNode node, StringBuilder sb)", "class_method_signature": "AsciidocConverter.appendId(StructuralNode node, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "appendSource", "parameters": "(Block node, StringBuilder sb)", "modifiers": "private", "return": "void", "signature": "void appendSource(Block node, StringBuilder sb)", "full_signature": "private void appendSource(Block node, StringBuilder sb)", "class_method_signature": "AsciidocConverter.appendSource(Block node, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "appendTitle", "parameters": "(StructuralNode node, StringBuilder sb)", "modifiers": "private", "return": "void", "signature": "void appendTitle(StructuralNode node, StringBuilder sb)", "full_signature": "private void appendTitle(StructuralNode node, StringBuilder sb)", "class_method_signature": "AsciidocConverter.appendTitle(StructuralNode node, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "appendStyle", "parameters": "(StructuralNode node, StringBuilder sb)", "modifiers": "private", "return": "void", "signature": "void appendStyle(StructuralNode node, StringBuilder sb)", "full_signature": "private void appendStyle(StructuralNode node, StringBuilder sb)", "class_method_signature": "AsciidocConverter.appendStyle(StructuralNode node, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "appendRoles", "parameters": "(StructuralNode node, StringBuilder sb)", "modifiers": "private", "return": "void", "signature": "void appendRoles(StructuralNode node, StringBuilder sb)", "full_signature": "private void appendRoles(StructuralNode node, StringBuilder sb)", "class_method_signature": "AsciidocConverter.appendRoles(StructuralNode node, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "appendAttributeTo", "parameters": "(StructuralNode node, java.util.List<String> attrs, String name)", "modifiers": "private", "return": "void", "signature": "void appendAttributeTo(StructuralNode node, java.util.List<String> attrs, String name)", "full_signature": "private void appendAttributeTo(StructuralNode node, java.util.List<String> attrs, String name)", "class_method_signature": "AsciidocConverter.appendAttributeTo(StructuralNode node, java.util.List<String> attrs, String name)", "testcase": false, "constructor": false}], "file": "swagger2markup-asciidoc/src/main/java/io/github/swagger2markup/adoc/AsciidocConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(ContentNode node, String transform, Map<Object, Object> opts)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String convert(ContentNode node, String transform, Map<Object, Object> opts) {\n        if (null == transform) {\n            transform = node.getNodeName();\n        }\n        switch (transform) {\n            case \"inline_quoted\":\n                return convertInlineQuoted((PhraseNode) node);\n            case \"paragraph\":\n                return convertParagraph((StructuralNode) node);\n            case \"inline_anchor\":\n                return convertInlineAnchor((PhraseNode) node);\n            case \"section\":\n                return convertSection((Section) node);\n            case \"listing\":\n                return convertListing((Block) node);\n            case \"literal\":\n                return convertLiteral((StructuralNode) node);\n            case \"ulist\":\n                return convertUList((List) node);\n            case \"olist\":\n                return convertOList((List) node);\n            case \"dlist\":\n                return convertDescriptionList((DescriptionList) node);\n            case \"admonition\":\n                return convertAdmonition((Block) node);\n            case \"colist\":\n                return convertCoList((List) node);\n            case \"embedded\":\n            case \"document\":\n                return convertEmbedded((Document) node);\n            case \"example\":\n                return convertExample((Block) node);\n            case \"floating_title\":\n                return convertFloatingTitle((StructuralNode) node);\n            case \"image\":\n                return convertImage((StructuralNode) node);\n            case \"inline_break\":\n                return convertInlineBreak(node);\n            case \"inline_button\":\n                return convertInlineButton(node);\n            case \"inline_callout\":\n                return convertInlineCallout(node);\n            case \"inline_footnote\":\n                return convertInlineFootnote(node);\n            case \"inline_image\":\n                return convertInlineImage((PhraseNode) node);\n            case \"inline_indexterm\":\n                return convertInlineIndexTerm(node);\n            case \"inline_kbd\":\n                return convertInlineKbd(node);\n            case \"inline_menu\":\n                return convertInlineMenu(node);\n            case \"open\":\n                return convertOpen((StructuralNode) node);\n            case \"page_break\":\n                return convertPageBreak(node);\n            case \"preamble\":\n                return convertPreamble((StructuralNode) node);\n            case \"quote\":\n                return convertQuote((StructuralNode) node);\n            case \"sidebar\":\n                return convertSidebar((StructuralNode) node);\n            case \"stem\":\n                return convertStem(node);\n            case \"table\":\n                return convertTable((Table) node);\n            case \"thematic_break\":\n                return convertThematicBreak(node);\n            case \"verse\":\n                return convertVerse((StructuralNode) node);\n            case \"video\":\n                return convertVideo(node);\n            case \"toc\":\n                return convertToc(node);\n            case \"pass\":\n                return convertPass(node);\n            case \"audio\":\n                return convertAudio(node);\n            // didn't exist on html converter\n            case \"list\":\n                return convertList((List) node);\n            case \"list_item\":\n                return convertListItem((ListItem) node);\n            default:\n                logger.debug(\"Don't know how to convert transform: [\" + transform + \"] Node: \" + node);\n                return null;\n        }\n    }", "signature": "String convert(ContentNode node, String transform, Map<Object, Object> opts)", "full_signature": "@Override public String convert(ContentNode node, String transform, Map<Object, Object> opts)", "class_method_signature": "AsciidocConverter.convert(ContentNode node, String transform, Map<Object, Object> opts)", "testcase": false, "constructor": false, "invocations": ["getNodeName", "convertInlineQuoted", "convertParagraph", "convertInlineAnchor", "convertSection", "convertListing", "convertLiteral", "convertUList", "convertOList", "convertDescriptionList", "convertAdmonition", "convertCoList", "convertEmbedded", "convertExample", "convertFloatingTitle", "convertImage", "convertInlineBreak", "convertInlineButton", "convertInlineCallout", "convertInlineFootnote", "convertInlineImage", "convertInlineIndexTerm", "convertInlineKbd", "convertInlineMenu", "convertOpen", "convertPageBreak", "convertPreamble", "convertQuote", "convertSidebar", "convertStem", "convertTable", "convertThematicBreak", "convertVerse", "convertVideo", "convertToc", "convertPass", "convertAudio", "convertList", "convertListItem", "debug"]}, "repository": {"repo_id": 30644093, "url": "https://github.com/Swagger2Markup/swagger2markup", "language": "Java", "is_fork": false, "fork_count": 340, "stargazer_count": 2130, "size": 5225, "license": "licensed"}}