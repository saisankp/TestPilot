{"test_class": {"identifier": "InTokenResolverTest", "superclass": "extends AbstractTokenResolverTest", "interfaces": "", "fields": [], "file": "dal-jdbc/src/test/java/org/unidal/dal/jdbc/query/token/resolver/InTokenResolverTest.java"}, "test_case": {"identifier": "testInArrayParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testInArrayParameter() throws Exception {\n      QueryDef query = new QueryDef(\"test\", UserEntity.class, QueryType.SELECT, \"<IN>${user-id-array}</IN>\");\n      User user = new User();\n      QueryContext ctx = getSelectContext(query, user, null);\n      long[] userIdArray = new long[] { 1L, 2L, 3L, 4L };\n\n      user.setUserIdArray(userIdArray);\n      Assert.assertEquals(false, ctx.isWithinInToken());\n      m_queryResolver.resolve(ctx);\n      Assert.assertEquals(\"(?,?,?,?)\", ctx.getSqlStatement());\n      Assert.assertEquals(1, ctx.getParameters().size());\n      Assert.assertEquals(userIdArray, getParameterValue(ctx, 0));\n      Assert.assertEquals(false, ctx.isWithinInToken());\n   }", "signature": "void testInArrayParameter()", "full_signature": "@Test public void testInArrayParameter()", "class_method_signature": "InTokenResolverTest.testInArrayParameter()", "testcase": true, "constructor": false, "invocations": ["getSelectContext", "setUserIdArray", "assertEquals", "isWithinInToken", "resolve", "assertEquals", "getSqlStatement", "assertEquals", "size", "getParameters", "assertEquals", "getParameterValue", "assertEquals", "isWithinInToken"]}, "focal_class": {"identifier": "InTokenResolver", "superclass": "", "interfaces": "implements TokenResolver", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "InTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false}], "file": "dal-jdbc/src/main/java/org/unidal/dal/jdbc/query/token/resolver/InTokenResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "body": "public String resolve(Token token, QueryContext ctx) {\n      if (token.getType() != TokenType.IN) {\n         throw new DalRuntimeException(\"Internal error: only IN token is supported by \" + getClass());\n      }\n\n      if (token instanceof StartTagToken) {\n         if (ctx.isWithinInToken()) {\n            throw new DalRuntimeException(\"IN token can't be nested\");\n         }\n\n         ctx.setWithinInToken(true);\n         return \"(\";\n      } else if (token instanceof EndTagToken) {\n         ctx.setWithinInToken(false);\n         return \")\";\n      } else {\n         throw new DalRuntimeException(\"Internal error: IN token can only be used as <IN> or </IN>\");\n      }\n   }", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "InTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false, "invocations": ["getType", "getClass", "isWithinInToken", "setWithinInToken", "setWithinInToken"]}, "repository": {"repo_id": 6627230, "url": "https://github.com/unidal/frameworks", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 100, "size": 3009, "license": "licensed"}}