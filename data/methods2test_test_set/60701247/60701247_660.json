{"test_class": {"identifier": "BitmapDecoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "profilers/testSrc/com/android/tools/profilers/memory/adapters/BitmapDecoderTest.java"}, "test_case": {"identifier": "dataProviderTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void dataProviderTest() {\n    final String BITMAP_CLASS_NAME = \"android.graphics.Bitmap\";\n    final String BYTES_CLASS_NAME = \"byte[]\";\n\n    FakeCaptureObject fakeCaptureObject = new FakeCaptureObject.Builder().build();\n\n    FakeInstanceObject bitmapInstance = new FakeInstanceObject.Builder(fakeCaptureObject, 1, BITMAP_CLASS_NAME)\n      .setFields(Arrays.asList(\"mBuffer\", \"mIsMutable\", \"mWidth\", \"mHeight\")).build();\n    bitmapInstance\n      .setFieldValue(\"mBuffer\", ARRAY,\n                     new FakeInstanceObject.Builder(fakeCaptureObject, 2, BYTES_CLASS_NAME).setValueType(ARRAY)\n                       .setArray(BYTE, new byte[]{0, 0, 0, 0, 0, 0, 0, 0,}, 8).build())\n      .setFieldValue(\"mWidth\", INT, 2)\n      .setFieldValue(\"mHeight\", INT, 1)\n      .setFieldValue(\"mIsMutable\", BOOLEAN, false);\n\n    FakeInstanceObject badBitmapInstance1 = new FakeInstanceObject.Builder(fakeCaptureObject, 1, BITMAP_CLASS_NAME)\n      .setFields(Arrays.asList(\"mBuffer\", \"mIsMutable\", \"mWidth\", \"mHeight\")).build();\n    bitmapInstance // dimension larger than buffer\n      .setFieldValue(\"mBuffer\", ARRAY,\n                     new FakeInstanceObject.Builder(fakeCaptureObject, 2, BYTES_CLASS_NAME).setValueType(ARRAY)\n                       .setArray(BYTE, new byte[]{0, 0, 0, 0, 0, 0, 0, 0,}, 8).build())\n      .setFieldValue(\"mWidth\", INT, 3)\n      .setFieldValue(\"mHeight\", INT, 1)\n      .setFieldValue(\"mIsMutable\", BOOLEAN, false);\n\n    FakeInstanceObject badBitmapInstance2 = new FakeInstanceObject.Builder(fakeCaptureObject, 1, BITMAP_CLASS_NAME)\n      .setFields(Arrays.asList(\"mBuffer\", \"mIsMutable\", \"mWidth\", \"mHeight\")).build();\n    bitmapInstance // MIA fields\n      .setFieldValue(\"mBuffer\", ARRAY,\n                     new FakeInstanceObject.Builder(fakeCaptureObject, 2, BYTES_CLASS_NAME).setValueType(ARRAY)\n                       .setArray(BYTE, new byte[]{0, 0, 0, 0, 0, 0, 0, 0,}, 8).build())\n      .setFieldValue(\"mWidth\", INT, 2)\n      .setFieldValue(\"mIsMutable\", BOOLEAN, false);\n\n    fakeCaptureObject.addInstanceObjects(ImmutableSet.of(bitmapInstance, badBitmapInstance1, badBitmapInstance2));\n\n    BitmapDecoder.BitmapDataProvider dataProvider = AndroidBitmapDataProvider.createDecoder(bitmapInstance);\n    assertNotNull(dataProvider);\n    assertNotNull(BitmapDecoder.getBitmap(dataProvider));\n    assertNull(AndroidBitmapDataProvider.createDecoder(badBitmapInstance1));\n    assertNull(AndroidBitmapDataProvider.createDecoder(badBitmapInstance2));\n  }", "signature": "void dataProviderTest()", "full_signature": "@Test public void dataProviderTest()", "class_method_signature": "BitmapDecoderTest.dataProviderTest()", "testcase": true, "constructor": false, "invocations": ["build", "build", "setFields", "asList", "setFieldValue", "setFieldValue", "setFieldValue", "setFieldValue", "build", "setArray", "setValueType", "build", "setFields", "asList", "setFieldValue", "setFieldValue", "setFieldValue", "setFieldValue", "build", "setArray", "setValueType", "build", "setFields", "asList", "setFieldValue", "setFieldValue", "setFieldValue", "build", "setArray", "setValueType", "addInstanceObjects", "of", "createDecoder", "assertNotNull", "assertNotNull", "getBitmap", "assertNull", "createDecoder", "assertNull", "createDecoder"]}, "focal_class": {"identifier": "BitmapDecoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Map<PixelFormat, BitmapExtractor> SUPPORTED_FORMATS = ImmutableMap.of(\n    PixelFormat.ARGB_8888, new ARGB8888_BitmapExtractor(),\n    PixelFormat.RGB_565, new RGB565_BitmapExtractor(),\n    PixelFormat.ALPHA_8, new ALPHA8_BitmapExtractor());", "modifier": "protected static final", "type": "Map<PixelFormat, BitmapExtractor>", "declarator": "SUPPORTED_FORMATS = ImmutableMap.of(\n    PixelFormat.ARGB_8888, new ARGB8888_BitmapExtractor(),\n    PixelFormat.RGB_565, new RGB565_BitmapExtractor(),\n    PixelFormat.ALPHA_8, new ALPHA8_BitmapExtractor())", "var_name": "SUPPORTED_FORMATS"}], "methods": [{"identifier": "getBitmap", "parameters": "(@NotNull BitmapDataProvider dataProvider)", "modifiers": "@Nullable public static", "return": "BufferedImage", "signature": "BufferedImage getBitmap(@NotNull BitmapDataProvider dataProvider)", "full_signature": "@Nullable public static BufferedImage getBitmap(@NotNull BitmapDataProvider dataProvider)", "class_method_signature": "BitmapDecoder.getBitmap(@NotNull BitmapDataProvider dataProvider)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/memory/adapters/BitmapDecoder.java"}, "focal_method": {"identifier": "getBitmap", "parameters": "(@NotNull BitmapDataProvider dataProvider)", "modifiers": "@Nullable public static", "return": "BufferedImage", "body": "@Nullable\n  public static BufferedImage getBitmap(@NotNull BitmapDataProvider dataProvider) {\n    PixelFormat config = dataProvider.getBitmapConfigName();\n    if (config == null) {\n      return null;\n    }\n\n    BitmapExtractor bitmapExtractor = SUPPORTED_FORMATS.get(config);\n    if (bitmapExtractor == null) {\n      return null;\n    }\n\n    Dimension size = dataProvider.getDimension();\n    if (size == null) {\n      return null;\n    }\n\n    return bitmapExtractor.getImage(size.width, size.height, dataProvider.getPixelBytes(size));\n  }", "signature": "BufferedImage getBitmap(@NotNull BitmapDataProvider dataProvider)", "full_signature": "@Nullable public static BufferedImage getBitmap(@NotNull BitmapDataProvider dataProvider)", "class_method_signature": "BitmapDecoder.getBitmap(@NotNull BitmapDataProvider dataProvider)", "testcase": false, "constructor": false, "invocations": ["getBitmapConfigName", "get", "getDimension", "getImage", "getPixelBytes"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}