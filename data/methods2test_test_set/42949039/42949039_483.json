{"test_class": {"identifier": "BusinessObjectDataRetryStoragePolicyTransitionHelperTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/BusinessObjectDataRetryStoragePolicyTransitionHelperTest.java"}, "test_case": {"identifier": "testRetryStoragePolicyTransitionStorageUnitHasNoStorageFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRetryStoragePolicyTransitionStorageUnitHasNoStorageFiles()\n    {\n        // Create a business object data key.\n        BusinessObjectDataKey businessObjectDataKey =\n            new BusinessObjectDataKey(BDEF_NAMESPACE, BDEF_NAME, FORMAT_USAGE_CODE, FORMAT_FILE_TYPE_CODE, FORMAT_VERSION, PARTITION_VALUE, SUBPARTITION_VALUES,\n                DATA_VERSION);\n\n        // Create a storage policy key.\n        StoragePolicyKey storagePolicyKey = new StoragePolicyKey(STORAGE_POLICY_NAMESPACE_CD, STORAGE_POLICY_NAME);\n\n        // Create database entities required for testing.\n        BusinessObjectDataEntity businessObjectDataEntity = businessObjectDataServiceTestHelper\n            .createDatabaseEntitiesForRetryStoragePolicyTransitionTesting(businessObjectDataKey, storagePolicyKey, STORAGE_NAME, S3_BUCKET_NAME,\n                StorageUnitStatusEntity.ARCHIVING);\n\n        // Get the storage unit entity.\n        StorageUnitEntity storageUnitEntity = storageUnitDaoHelper.getStorageUnitEntity(STORAGE_NAME, businessObjectDataEntity);\n\n        // Remove storage files from the storage unit.\n        storageUnitEntity.getStorageFiles().clear();\n\n        // Try to execute a before step for the retry storage policy transition when storage unit has no storage files.\n        try\n        {\n            businessObjectDataRetryStoragePolicyTransitionHelper\n                .retryStoragePolicyTransition(businessObjectDataKey, new BusinessObjectDataRetryStoragePolicyTransitionRequest(storagePolicyKey));\n            fail();\n        }\n        catch (IllegalArgumentException e)\n        {\n            assertEquals(String.format(\"Business object data has no storage files registered in \\\"%s\\\" storage. Business object data: {%s}\", STORAGE_NAME,\n                businessObjectDataServiceTestHelper.getExpectedBusinessObjectDataKeyAsString(businessObjectDataKey)), e.getMessage());\n        }\n    }", "signature": "void testRetryStoragePolicyTransitionStorageUnitHasNoStorageFiles()", "full_signature": "@Test public void testRetryStoragePolicyTransitionStorageUnitHasNoStorageFiles()", "class_method_signature": "BusinessObjectDataRetryStoragePolicyTransitionHelperTest.testRetryStoragePolicyTransitionStorageUnitHasNoStorageFiles()", "testcase": true, "constructor": false, "invocations": ["createDatabaseEntitiesForRetryStoragePolicyTransitionTesting", "getStorageUnitEntity", "clear", "getStorageFiles", "retryStoragePolicyTransition", "fail", "assertEquals", "format", "getExpectedBusinessObjectDataKeyAsString", "getMessage"]}, "focal_class": {"identifier": "BusinessObjectDataRetryStoragePolicyTransitionHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BusinessObjectDataRetryStoragePolicyTransitionHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BusinessObjectDataRetryStoragePolicyTransitionHelper.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private AwsHelper awsHelper;", "modifier": "@Autowired\n    private", "type": "AwsHelper", "declarator": "awsHelper", "var_name": "awsHelper"}, {"original_string": "@Autowired\n    private BusinessObjectDataDaoHelper businessObjectDataDaoHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataDaoHelper", "declarator": "businessObjectDataDaoHelper", "var_name": "businessObjectDataDaoHelper"}, {"original_string": "@Autowired\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    private S3KeyPrefixHelper s3KeyPrefixHelper;", "modifier": "@Autowired\n    private", "type": "S3KeyPrefixHelper", "declarator": "s3KeyPrefixHelper", "var_name": "s3KeyPrefixHelper"}, {"original_string": "@Autowired\n    private SqsDao sqsDao;", "modifier": "@Autowired\n    private", "type": "SqsDao", "declarator": "sqsDao", "var_name": "sqsDao"}, {"original_string": "@Autowired\n    private StoragePolicyDaoHelper storagePolicyDaoHelper;", "modifier": "@Autowired\n    private", "type": "StoragePolicyDaoHelper", "declarator": "storagePolicyDaoHelper", "var_name": "storagePolicyDaoHelper"}, {"original_string": "@Autowired\n    private StoragePolicyHelper storagePolicyHelper;", "modifier": "@Autowired\n    private", "type": "StoragePolicyHelper", "declarator": "storagePolicyHelper", "var_name": "storagePolicyHelper"}, {"original_string": "@Autowired\n    private StorageUnitDao storageUnitDao;", "modifier": "@Autowired\n    private", "type": "StorageUnitDao", "declarator": "storageUnitDao", "var_name": "storageUnitDao"}, {"original_string": "@Autowired\n    private StorageUnitDaoHelper storageUnitDaoHelper;", "modifier": "@Autowired\n    private", "type": "StorageUnitDaoHelper", "declarator": "storageUnitDaoHelper", "var_name": "storageUnitDaoHelper"}], "methods": [{"identifier": "retryStoragePolicyTransition", "parameters": "(BusinessObjectDataKey businessObjectDataKey,\n        BusinessObjectDataRetryStoragePolicyTransitionRequest request)", "modifiers": "public", "return": "BusinessObjectData", "signature": "BusinessObjectData retryStoragePolicyTransition(BusinessObjectDataKey businessObjectDataKey,\n        BusinessObjectDataRetryStoragePolicyTransitionRequest request)", "full_signature": "public BusinessObjectData retryStoragePolicyTransition(BusinessObjectDataKey businessObjectDataKey,\n        BusinessObjectDataRetryStoragePolicyTransitionRequest request)", "class_method_signature": "BusinessObjectDataRetryStoragePolicyTransitionHelper.retryStoragePolicyTransition(BusinessObjectDataKey businessObjectDataKey,\n        BusinessObjectDataRetryStoragePolicyTransitionRequest request)", "testcase": false, "constructor": false}, {"identifier": "sendStoragePolicySelectionSqsMessage", "parameters": "(String sqsQueueName, StoragePolicySelection storagePolicySelection)", "modifiers": "protected", "return": "void", "signature": "void sendStoragePolicySelectionSqsMessage(String sqsQueueName, StoragePolicySelection storagePolicySelection)", "full_signature": "protected void sendStoragePolicySelectionSqsMessage(String sqsQueueName, StoragePolicySelection storagePolicySelection)", "class_method_signature": "BusinessObjectDataRetryStoragePolicyTransitionHelper.sendStoragePolicySelectionSqsMessage(String sqsQueueName, StoragePolicySelection storagePolicySelection)", "testcase": false, "constructor": false}, {"identifier": "getStorageUnit", "parameters": "(BusinessObjectDataEntity businessObjectDataEntity, StorageEntity storageEntity)", "modifiers": "private", "return": "StorageUnitEntity", "signature": "StorageUnitEntity getStorageUnit(BusinessObjectDataEntity businessObjectDataEntity, StorageEntity storageEntity)", "full_signature": "private StorageUnitEntity getStorageUnit(BusinessObjectDataEntity businessObjectDataEntity, StorageEntity storageEntity)", "class_method_signature": "BusinessObjectDataRetryStoragePolicyTransitionHelper.getStorageUnit(BusinessObjectDataEntity businessObjectDataEntity, StorageEntity storageEntity)", "testcase": false, "constructor": false}, {"identifier": "validateBusinessObjectDataRetryStoragePolicyTransitionRequest", "parameters": "(BusinessObjectDataRetryStoragePolicyTransitionRequest request)", "modifiers": "private", "return": "void", "signature": "void validateBusinessObjectDataRetryStoragePolicyTransitionRequest(BusinessObjectDataRetryStoragePolicyTransitionRequest request)", "full_signature": "private void validateBusinessObjectDataRetryStoragePolicyTransitionRequest(BusinessObjectDataRetryStoragePolicyTransitionRequest request)", "class_method_signature": "BusinessObjectDataRetryStoragePolicyTransitionHelper.validateBusinessObjectDataRetryStoragePolicyTransitionRequest(BusinessObjectDataRetryStoragePolicyTransitionRequest request)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/BusinessObjectDataRetryStoragePolicyTransitionHelper.java"}, "focal_method": {"identifier": "retryStoragePolicyTransition", "parameters": "(BusinessObjectDataKey businessObjectDataKey,\n        BusinessObjectDataRetryStoragePolicyTransitionRequest request)", "modifiers": "public", "return": "BusinessObjectData", "body": "public BusinessObjectData retryStoragePolicyTransition(BusinessObjectDataKey businessObjectDataKey,\n        BusinessObjectDataRetryStoragePolicyTransitionRequest request)\n    {\n        // Validate and trim the business object data key.\n        businessObjectDataHelper.validateBusinessObjectDataKey(businessObjectDataKey, true, true);\n\n        // Validate and trim the request.\n        validateBusinessObjectDataRetryStoragePolicyTransitionRequest(request);\n\n        // Retrieve the business object data and ensure it exists.\n        BusinessObjectDataEntity businessObjectDataEntity = businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey);\n\n        // Retrieve and ensure that a storage policy exists with the specified key.\n        StoragePolicyEntity storagePolicyEntity = storagePolicyDaoHelper.getStoragePolicyEntityByKey(request.getStoragePolicyKey());\n\n        // Validate that storage policy filter matches this business object data, except for the storage.\n        Assert.isTrue((storagePolicyEntity.getBusinessObjectDefinition() == null ||\n            storagePolicyEntity.getBusinessObjectDefinition().equals(businessObjectDataEntity.getBusinessObjectFormat().getBusinessObjectDefinition())) &&\n            (StringUtils.isBlank(storagePolicyEntity.getUsage()) ||\n                storagePolicyEntity.getUsage().equalsIgnoreCase(businessObjectDataEntity.getBusinessObjectFormat().getUsage())) &&\n            (storagePolicyEntity.getFileType() == null ||\n                storagePolicyEntity.getFileType().equals(businessObjectDataEntity.getBusinessObjectFormat().getFileType())), String\n            .format(\"Business object data does not match storage policy filter. \" + \"Storage policy: {%s}, business object data: {%s}\",\n                storagePolicyHelper.storagePolicyKeyAndVersionToString(request.getStoragePolicyKey(), storagePolicyEntity.getVersion()),\n                businessObjectDataHelper.businessObjectDataEntityAltKeyToString(businessObjectDataEntity)));\n\n        // Validate the storage policy filter storage.\n        storagePolicyDaoHelper.validateStoragePolicyFilterStorage(storagePolicyEntity.getStorage());\n\n        // Retrieve and validate a storage unit for this business object data.\n        StorageUnitEntity storageUnitEntity = getStorageUnit(businessObjectDataEntity, storagePolicyEntity.getStorage());\n\n        // Get S3 key prefix for this business object data.\n        String s3KeyPrefix = s3KeyPrefixHelper\n            .buildS3KeyPrefix(storagePolicyEntity.getStorage(), storageUnitEntity.getBusinessObjectData().getBusinessObjectFormat(), businessObjectDataKey);\n\n        // Validate that we have storage files registered in the storage.\n        Assert.isTrue(CollectionUtils.isNotEmpty(storageUnitEntity.getStorageFiles()), String\n            .format(\"Business object data has no storage files registered in \\\"%s\\\" storage. Business object data: {%s}\",\n                storageUnitEntity.getStorage().getName(), businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));\n\n        // Validate that this storage does not have any other registered storage files that\n        // start with the S3 key prefix, but belong to other business object data instances.\n        storageUnitDaoHelper.validateNoExplicitlyRegisteredSubPartitionInStorageForBusinessObjectData(storageUnitEntity.getStorage(),\n            businessObjectDataEntity.getBusinessObjectFormat(), businessObjectDataKey, s3KeyPrefix);\n\n        // Get the SQS queue name from the system configuration.\n        String sqsQueueName = configurationHelper.getProperty(ConfigurationValue.STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE_NAME);\n\n        // Throw IllegalStateException if SQS queue name is not defined.\n        if (StringUtils.isBlank(sqsQueueName))\n        {\n            throw new IllegalStateException(String.format(\"SQS queue name not found. Ensure the \\\"%s\\\" configuration entry is configured.\",\n                ConfigurationValue.STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE_NAME.getKey()));\n        }\n\n        // Create a storage policy selection.\n        StoragePolicySelection storagePolicySelection =\n            new StoragePolicySelection(businessObjectDataKey, storagePolicyHelper.getStoragePolicyKey(storagePolicyEntity), storagePolicyEntity.getVersion());\n\n        // Executes SQS specific steps needed to retry a storage policy transition.\n        sendStoragePolicySelectionSqsMessage(sqsQueueName, storagePolicySelection);\n\n        // Create and return the business object data object from the entity.\n        return businessObjectDataHelper.createBusinessObjectDataFromEntity(businessObjectDataEntity);\n    }", "signature": "BusinessObjectData retryStoragePolicyTransition(BusinessObjectDataKey businessObjectDataKey,\n        BusinessObjectDataRetryStoragePolicyTransitionRequest request)", "full_signature": "public BusinessObjectData retryStoragePolicyTransition(BusinessObjectDataKey businessObjectDataKey,\n        BusinessObjectDataRetryStoragePolicyTransitionRequest request)", "class_method_signature": "BusinessObjectDataRetryStoragePolicyTransitionHelper.retryStoragePolicyTransition(BusinessObjectDataKey businessObjectDataKey,\n        BusinessObjectDataRetryStoragePolicyTransitionRequest request)", "testcase": false, "constructor": false, "invocations": ["validateBusinessObjectDataKey", "validateBusinessObjectDataRetryStoragePolicyTransitionRequest", "getBusinessObjectDataEntity", "getStoragePolicyEntityByKey", "getStoragePolicyKey", "isTrue", "getBusinessObjectDefinition", "equals", "getBusinessObjectDefinition", "getBusinessObjectDefinition", "getBusinessObjectFormat", "isBlank", "getUsage", "equalsIgnoreCase", "getUsage", "getUsage", "getBusinessObjectFormat", "getFileType", "equals", "getFileType", "getFileType", "getBusinessObjectFormat", "format", "storagePolicyKeyAndVersionToString", "getStoragePolicyKey", "getVersion", "businessObjectDataEntityAltKeyToString", "validateStoragePolicyFilterStorage", "getStorage", "getStorageUnit", "getStorage", "buildS3KeyPrefix", "getStorage", "getBusinessObjectFormat", "getBusinessObjectData", "isTrue", "isNotEmpty", "getStorageFiles", "format", "getName", "getStorage", "businessObjectDataKeyToString", "validateNoExplicitlyRegisteredSubPartitionInStorageForBusinessObjectData", "getStorage", "getBusinessObjectFormat", "getProperty", "isBlank", "format", "getKey", "getStoragePolicyKey", "getVersion", "sendStoragePolicySelectionSqsMessage", "createBusinessObjectDataFromEntity"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}