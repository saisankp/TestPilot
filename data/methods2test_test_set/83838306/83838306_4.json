{"test_class": {"identifier": "FeatureValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "outland-feature-server/src/test/java/outland/feature/server/features/FeatureValidatorTest.java"}, "test_case": {"identifier": "validateFeatureThrowingStringMismatchedOptionIds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void validateFeatureThrowingStringMismatchedOptionIds() {\n\n    OptionCollection.Builder existing = OptionCollection.newBuilder()\n        .setOption(OptionType.string)\n        .addItems(FeatureOption.newBuilder().setValue(\"red\").setKey(\"opt-red\").setWeight(3000).setId(\"r\"))\n        .addItems(FeatureOption.newBuilder().setValue(\"green\").setKey(\"opt-green\").setWeight(2000).setId(\"g\"))\n        .addItems(FeatureOption.newBuilder().setValue(\"blue\").setKey(\"opt-blue\").setWeight(5000).setId(\"b\"));\n\n\n    OptionCollection.Builder update = OptionCollection.newBuilder()\n        .setOption(OptionType.string)\n        .addItems(FeatureOption.newBuilder().setValue(\"red\").setKey(\"opt-red\").setWeight(3000).setId(\"r\"))\n        .addItems(FeatureOption.newBuilder().setValue(\"green\").setKey(\"opt-green\").setWeight(2000).setId(\"g\"))\n        .addItems(FeatureOption.newBuilder().setValue(\"blue\").setKey(\"opt-blue\").setWeight(5000).setId(\"b\"))\n        // option id y is not already existing\n        .addItems(FeatureOption.newBuilder().setValue(\"yello\").setKey(\"opt-yello\").setWeight(5000).setId(\"y\"))\n        ;\n\n\n    try {\n      new FeatureValidator().validateOptionIdsForUpdate(existing.build(), update.build());\n      fail();\n    } catch (ServiceException e) {\n      assertEquals(422, e.problem().status());\n      assertSame(\"option_ids_mismatch\", e.problem().title());\n    }\n  }", "signature": "void validateFeatureThrowingStringMismatchedOptionIds()", "full_signature": "@Test public void validateFeatureThrowingStringMismatchedOptionIds()", "class_method_signature": "FeatureValidatorTest.validateFeatureThrowingStringMismatchedOptionIds()", "testcase": true, "constructor": false, "invocations": ["addItems", "addItems", "addItems", "setOption", "newBuilder", "setId", "setWeight", "setKey", "setValue", "newBuilder", "setId", "setWeight", "setKey", "setValue", "newBuilder", "setId", "setWeight", "setKey", "setValue", "newBuilder", "addItems", "addItems", "addItems", "addItems", "setOption", "newBuilder", "setId", "setWeight", "setKey", "setValue", "newBuilder", "setId", "setWeight", "setKey", "setValue", "newBuilder", "setId", "setWeight", "setKey", "setValue", "newBuilder", "setId", "setWeight", "setKey", "setValue", "newBuilder", "validateOptionIdsForUpdate", "build", "build", "fail", "assertEquals", "status", "problem", "assertSame", "title", "problem"]}, "focal_class": {"identifier": "FeatureValidator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "validateFeatureUpdateThrowing", "parameters": "(Feature feature)", "modifiers": "", "return": "void", "signature": "void validateFeatureUpdateThrowing(Feature feature)", "full_signature": " void validateFeatureUpdateThrowing(Feature feature)", "class_method_signature": "FeatureValidator.validateFeatureUpdateThrowing(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "validateFeatureRegistrationThrowing", "parameters": "(Feature feature)", "modifiers": "", "return": "void", "signature": "void validateFeatureRegistrationThrowing(Feature feature)", "full_signature": " void validateFeatureRegistrationThrowing(Feature feature)", "class_method_signature": "FeatureValidator.validateFeatureRegistrationThrowing(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "validateOwner", "parameters": "(Owner owner)", "modifiers": "", "return": "void", "signature": "void validateOwner(Owner owner)", "full_signature": " void validateOwner(Owner owner)", "class_method_signature": "FeatureValidator.validateOwner(Owner owner)", "testcase": false, "constructor": false}, {"identifier": "validateFeatureDataMergeCandidates", "parameters": "(FeatureData existing, FeatureData incoming)", "modifiers": "", "return": "void", "signature": "void validateFeatureDataMergeCandidates(FeatureData existing, FeatureData incoming)", "full_signature": " void validateFeatureDataMergeCandidates(FeatureData existing, FeatureData incoming)", "class_method_signature": "FeatureValidator.validateFeatureDataMergeCandidates(FeatureData existing, FeatureData incoming)", "testcase": false, "constructor": false}, {"identifier": "validateFeatureDataNewCandidateThrowing", "parameters": "(Feature existingFeature, NamespaceFeature incoming)", "modifiers": "", "return": "void", "signature": "void validateFeatureDataNewCandidateThrowing(Feature existingFeature, NamespaceFeature incoming)", "full_signature": " void validateFeatureDataNewCandidateThrowing(Feature existingFeature, NamespaceFeature incoming)", "class_method_signature": "FeatureValidator.validateFeatureDataNewCandidateThrowing(Feature existingFeature, NamespaceFeature incoming)", "testcase": false, "constructor": false}, {"identifier": "validateFeatureDataUpdateCandidateThrowing", "parameters": "(\n      Feature existingFeature, NamespaceFeature incoming)", "modifiers": "", "return": "void", "signature": "void validateFeatureDataUpdateCandidateThrowing(\n      Feature existingFeature, NamespaceFeature incoming)", "full_signature": " void validateFeatureDataUpdateCandidateThrowing(\n      Feature existingFeature, NamespaceFeature incoming)", "class_method_signature": "FeatureValidator.validateFeatureDataUpdateCandidateThrowing(\n      Feature existingFeature, NamespaceFeature incoming)", "testcase": false, "constructor": false}, {"identifier": "validateOptionIdsForUpdate", "parameters": "(OptionCollection existing, OptionCollection update)", "modifiers": "", "return": "void", "signature": "void validateOptionIdsForUpdate(OptionCollection existing, OptionCollection update)", "full_signature": " void validateOptionIdsForUpdate(OptionCollection existing, OptionCollection update)", "class_method_signature": "FeatureValidator.validateOptionIdsForUpdate(OptionCollection existing, OptionCollection update)", "testcase": false, "constructor": false}, {"identifier": "validateOptionsThrowing", "parameters": "(OptionCollection options)", "modifiers": "", "return": "void", "signature": "void validateOptionsThrowing(OptionCollection options)", "full_signature": " void validateOptionsThrowing(OptionCollection options)", "class_method_signature": "FeatureValidator.validateOptionsThrowing(OptionCollection options)", "testcase": false, "constructor": false}, {"identifier": "validateBooleanOptionsThrowing", "parameters": "(OptionCollection options)", "modifiers": "private", "return": "void", "signature": "void validateBooleanOptionsThrowing(OptionCollection options)", "full_signature": "private void validateBooleanOptionsThrowing(OptionCollection options)", "class_method_signature": "FeatureValidator.validateBooleanOptionsThrowing(OptionCollection options)", "testcase": false, "constructor": false}, {"identifier": "validateFeatureDataKeysMatch", "parameters": "(FeatureData existing, FeatureData update)", "modifiers": "private", "return": "void", "signature": "void validateFeatureDataKeysMatch(FeatureData existing, FeatureData update)", "full_signature": "private void validateFeatureDataKeysMatch(FeatureData existing, FeatureData update)", "class_method_signature": "FeatureValidator.validateFeatureDataKeysMatch(FeatureData existing, FeatureData update)", "testcase": false, "constructor": false}, {"identifier": "isBoolOption", "parameters": "(OptionCollection options)", "modifiers": "private", "return": "boolean", "signature": "boolean isBoolOption(OptionCollection options)", "full_signature": "private boolean isBoolOption(OptionCollection options)", "class_method_signature": "FeatureValidator.isBoolOption(OptionCollection options)", "testcase": false, "constructor": false}, {"identifier": "isStringOption", "parameters": "(OptionCollection options)", "modifiers": "private", "return": "boolean", "signature": "boolean isStringOption(OptionCollection options)", "full_signature": "private boolean isStringOption(OptionCollection options)", "class_method_signature": "FeatureValidator.isStringOption(OptionCollection options)", "testcase": false, "constructor": false}, {"identifier": "validateNamespaceFeaturesThrowing", "parameters": "(Feature feature)", "modifiers": "private", "return": "void", "signature": "void validateNamespaceFeaturesThrowing(Feature feature)", "full_signature": "private void validateNamespaceFeaturesThrowing(Feature feature)", "class_method_signature": "FeatureValidator.validateNamespaceFeaturesThrowing(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "validateStringOptionsThrowing", "parameters": "(OptionCollection options)", "modifiers": "private", "return": "void", "signature": "void validateStringOptionsThrowing(OptionCollection options)", "full_signature": "private void validateStringOptionsThrowing(OptionCollection options)", "class_method_signature": "FeatureValidator.validateStringOptionsThrowing(OptionCollection options)", "testcase": false, "constructor": false}, {"identifier": "validateKeysThrowing", "parameters": "(Feature feature)", "modifiers": "private", "return": "void", "signature": "void validateKeysThrowing(Feature feature)", "full_signature": "private void validateKeysThrowing(Feature feature)", "class_method_signature": "FeatureValidator.validateKeysThrowing(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "validateFeatureKeyThrowing", "parameters": "(String key, Problem no_key_for_feature)", "modifiers": "private", "return": "void", "signature": "void validateFeatureKeyThrowing(String key, Problem no_key_for_feature)", "full_signature": "private void validateFeatureKeyThrowing(String key, Problem no_key_for_feature)", "class_method_signature": "FeatureValidator.validateFeatureKeyThrowing(String key, Problem no_key_for_feature)", "testcase": false, "constructor": false}, {"identifier": "validateOwnerThrowing", "parameters": "(Feature feature)", "modifiers": "private", "return": "void", "signature": "void validateOwnerThrowing(Feature feature)", "full_signature": "private void validateOwnerThrowing(Feature feature)", "class_method_signature": "FeatureValidator.validateOwnerThrowing(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "validateWeightsThrowing", "parameters": "(OptionCollection options)", "modifiers": "private", "return": "void", "signature": "void validateWeightsThrowing(OptionCollection options)", "full_signature": "private void validateWeightsThrowing(OptionCollection options)", "class_method_signature": "FeatureValidator.validateWeightsThrowing(OptionCollection options)", "testcase": false, "constructor": false}, {"identifier": "validateOptionsHaveIdsThrowing", "parameters": "(Feature feature)", "modifiers": "private", "return": "void", "signature": "void validateOptionsHaveIdsThrowing(Feature feature)", "full_signature": "private void validateOptionsHaveIdsThrowing(Feature feature)", "class_method_signature": "FeatureValidator.validateOptionsHaveIdsThrowing(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "validateOptionsHaveIdsThrowing", "parameters": "(OptionCollection options)", "modifiers": "private", "return": "void", "signature": "void validateOptionsHaveIdsThrowing(OptionCollection options)", "full_signature": "private void validateOptionsHaveIdsThrowing(OptionCollection options)", "class_method_signature": "FeatureValidator.validateOptionsHaveIdsThrowing(OptionCollection options)", "testcase": false, "constructor": false}, {"identifier": "validateKeysMatch", "parameters": "(String existingFeatureKey, String incomingKey)", "modifiers": "private", "return": "void", "signature": "void validateKeysMatch(String existingFeatureKey, String incomingKey)", "full_signature": "private void validateKeysMatch(String existingFeatureKey, String incomingKey)", "class_method_signature": "FeatureValidator.validateKeysMatch(String existingFeatureKey, String incomingKey)", "testcase": false, "constructor": false}], "file": "outland-feature-server/src/main/java/outland/feature/server/features/FeatureValidator.java"}, "focal_method": {"identifier": "validateOptionIdsForUpdate", "parameters": "(OptionCollection existing, OptionCollection update)", "modifiers": "", "return": "void", "body": "void validateOptionIdsForUpdate(OptionCollection existing, OptionCollection update) {\n\n    if (update.getItemsCount() == 0) {\n      // no options sent in update, skip\n      return;\n    }\n\n    final Set<String> firstSet =\n        existing.getItemsList().stream().map(FeatureOption::getId).collect(Collectors.toSet());\n    final Set<String> secondSet =\n        update.getItemsList().stream().map(FeatureOption::getId).collect(Collectors.toSet());\n\n    if (!firstSet.equals(secondSet)) {\n      throw new ServiceException(\n          Problem.clientProblem(\"option_ids_mismatch\", \"option ids must be the same\",\n              422));\n    }\n  }", "signature": "void validateOptionIdsForUpdate(OptionCollection existing, OptionCollection update)", "full_signature": " void validateOptionIdsForUpdate(OptionCollection existing, OptionCollection update)", "class_method_signature": "FeatureValidator.validateOptionIdsForUpdate(OptionCollection existing, OptionCollection update)", "testcase": false, "constructor": false, "invocations": ["getItemsCount", "collect", "map", "stream", "getItemsList", "toSet", "collect", "map", "stream", "getItemsList", "toSet", "equals", "clientProblem"]}, "repository": {"repo_id": 83838306, "url": "https://github.com/dehora/outland", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 944, "license": "licensed"}}