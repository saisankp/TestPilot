{"test_class": {"identifier": "CsvParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-decisiontables/src/test/java/org/drools/decisiontable/parser/csv/CsvParserTest.java"}, "test_case": {"identifier": "testCsv", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCsv() {\n        final MockSheetListener listener = new MockSheetListener();\n        final CsvLineParser lineParser = new CsvLineParser();\n        final CsvParser parser = new CsvParser( listener,\n                                                lineParser );\n\n        parser.parseFile( getClass().getResourceAsStream( \"/data/TestCsv.csv\" ) );\n        assertEquals( \"A\",\n                      listener.getCell( 0,\n                                        0 ) );\n        assertEquals( \"B\",\n                      listener.getCell( 0,\n                                        1 ) );\n        assertEquals( \"\",\n                      listener.getCell( 2,\n                                        0 ) );\n        assertEquals( \"C\",\n                      listener.getCell( 1,\n                                        0 ) );\n        assertEquals( \"D\",\n                      listener.getCell( 1,\n                                        1 ) );\n        assertEquals( \"E\",\n                      listener.getCell( 1,\n                                        3 ) );\n\n    }", "signature": "void testCsv()", "full_signature": "@Test public void testCsv()", "class_method_signature": "CsvParserTest.testCsv()", "testcase": true, "constructor": false, "invocations": ["parseFile", "getResourceAsStream", "getClass", "assertEquals", "getCell", "assertEquals", "getCell", "assertEquals", "getCell", "assertEquals", "getCell", "assertEquals", "getCell", "assertEquals", "getCell"]}, "focal_class": {"identifier": "CsvParser", "superclass": "", "interfaces": "implements DecisionTableParser", "fields": [{"original_string": "private List<DataListener> _listeners;", "modifier": "private", "type": "List<DataListener>", "declarator": "_listeners", "var_name": "_listeners"}, {"original_string": "private CsvLineParser _lineParser;", "modifier": "private", "type": "CsvLineParser", "declarator": "_lineParser", "var_name": "_lineParser"}], "methods": [{"identifier": "CsvParser", "parameters": "(final DataListener listener,\n            final CsvLineParser lineParser)", "modifiers": "public", "return": "", "signature": " CsvParser(final DataListener listener,\n            final CsvLineParser lineParser)", "full_signature": "public  CsvParser(final DataListener listener,\n            final CsvLineParser lineParser)", "class_method_signature": "CsvParser.CsvParser(final DataListener listener,\n            final CsvLineParser lineParser)", "testcase": false, "constructor": true}, {"identifier": "CsvParser", "parameters": "(final List<DataListener> listeners, final CsvLineParser lineParser)", "modifiers": "public", "return": "", "signature": " CsvParser(final List<DataListener> listeners, final CsvLineParser lineParser)", "full_signature": "public  CsvParser(final List<DataListener> listeners, final CsvLineParser lineParser)", "class_method_signature": "CsvParser.CsvParser(final List<DataListener> listeners, final CsvLineParser lineParser)", "testcase": false, "constructor": true}, {"identifier": "parseFile", "parameters": "(final InputStream inStream)", "modifiers": "public", "return": "void", "signature": "void parseFile(final InputStream inStream)", "full_signature": "public void parseFile(final InputStream inStream)", "class_method_signature": "CsvParser.parseFile(final InputStream inStream)", "testcase": false, "constructor": false}, {"identifier": "parseFile", "parameters": "(final File file)", "modifiers": "public", "return": "void", "signature": "void parseFile(final File file)", "full_signature": "public void parseFile(final File file)", "class_method_signature": "CsvParser.parseFile(final File file)", "testcase": false, "constructor": false}, {"identifier": "startSheet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startSheet()", "full_signature": "private void startSheet()", "class_method_signature": "CsvParser.startSheet()", "testcase": false, "constructor": false}, {"identifier": "finishSheet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void finishSheet()", "full_signature": "private void finishSheet()", "class_method_signature": "CsvParser.finishSheet()", "testcase": false, "constructor": false}, {"identifier": "newRow", "parameters": "(final int row, final int numCells)", "modifiers": "private", "return": "void", "signature": "void newRow(final int row, final int numCells)", "full_signature": "private void newRow(final int row, final int numCells)", "class_method_signature": "CsvParser.newRow(final int row, final int numCells)", "testcase": false, "constructor": false}, {"identifier": "newCell", "parameters": "(final int row, final int column, final String value,\n            final int mergedColStart)", "modifiers": "private", "return": "void", "signature": "void newCell(final int row, final int column, final String value,\n            final int mergedColStart)", "full_signature": "private void newCell(final int row, final int column, final String value,\n            final int mergedColStart)", "class_method_signature": "CsvParser.newCell(final int row, final int column, final String value,\n            final int mergedColStart)", "testcase": false, "constructor": false}, {"identifier": "processRows", "parameters": "(final BufferedReader reader)", "modifiers": "private", "return": "void", "signature": "void processRows(final BufferedReader reader)", "full_signature": "private void processRows(final BufferedReader reader)", "class_method_signature": "CsvParser.processRows(final BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "calcCellText", "parameters": "(int startMergeCol, String cell)", "modifiers": "", "return": "String", "signature": "String calcCellText(int startMergeCol, String cell)", "full_signature": " String calcCellText(int startMergeCol, String cell)", "class_method_signature": "CsvParser.calcCellText(int startMergeCol, String cell)", "testcase": false, "constructor": false}, {"identifier": "calcStartMerge", "parameters": "(int startMergeCol, int col, String cell)", "modifiers": "", "return": "int", "signature": "int calcStartMerge(int startMergeCol, int col, String cell)", "full_signature": " int calcStartMerge(int startMergeCol, int col, String cell)", "class_method_signature": "CsvParser.calcStartMerge(int startMergeCol, int col, String cell)", "testcase": false, "constructor": false}], "file": "drools-decisiontables/src/main/java/org/drools/decisiontable/parser/csv/CsvParser.java"}, "focal_method": {"identifier": "parseFile", "parameters": "(final InputStream inStream)", "modifiers": "public", "return": "void", "body": "public void parseFile(final InputStream inStream) {\n        final BufferedReader reader = new BufferedReader(new InputStreamReader(inStream, IoUtils.UTF8_CHARSET));\n        try {\n            startSheet();\n            processRows(reader);\n            finishSheet();\n        } catch (final IOException e) {\n            throw new DecisionTableParseException(\n                    \"An error occurred reading the CSV data.\", e);\n        }\n    }", "signature": "void parseFile(final InputStream inStream)", "full_signature": "public void parseFile(final InputStream inStream)", "class_method_signature": "CsvParser.parseFile(final InputStream inStream)", "testcase": false, "constructor": false, "invocations": ["startSheet", "processRows", "finishSheet"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}