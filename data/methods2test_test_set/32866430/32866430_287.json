{"test_class": {"identifier": "AssignActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ApiDate NOW = ApiDate.now();", "modifier": "private static final", "type": "ApiDate", "declarator": "NOW = ApiDate.now()", "var_name": "NOW"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock KeywhizClient keywhizClient;", "modifier": "@Mock", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "AssignActionConfig assignActionConfig;", "modifier": "", "type": "AssignActionConfig", "declarator": "assignActionConfig", "var_name": "assignActionConfig"}, {"original_string": "AssignAction assignAction;", "modifier": "", "type": "AssignAction", "declarator": "assignAction", "var_name": "assignAction"}, {"original_string": "Group group = new Group(5, \"group\", null, null, null, null, null, null);", "modifier": "", "type": "Group", "declarator": "group = new Group(5, \"group\", null, null, null, null, null, null)", "var_name": "group"}, {"original_string": "GroupDetailResponse groupDetailResponse = GroupDetailResponse.fromGroup(group,\n      ImmutableList.<SanitizedSecret>of(), ImmutableList.<Client>of());", "modifier": "", "type": "GroupDetailResponse", "declarator": "groupDetailResponse = GroupDetailResponse.fromGroup(group,\n      ImmutableList.<SanitizedSecret>of(), ImmutableList.<Client>of())", "var_name": "groupDetailResponse"}, {"original_string": "Secret secret =\n      new Secret(16, \"secret\", null, () -> \"c2VjcmV0MQ==\", \"checksum\", NOW, null, NOW, null, null,\n          null, ImmutableMap.of(), 0, 1L, NOW, null);", "modifier": "", "type": "Secret", "declarator": "secret =\n      new Secret(16, \"secret\", null, () -> \"c2VjcmV0MQ==\", \"checksum\", NOW, null, NOW, null, null,\n          null, ImmutableMap.of(), 0, 1L, NOW, null)", "var_name": "secret"}, {"original_string": "SanitizedSecret sanitizedSecret = SanitizedSecret.fromSecret(secret);", "modifier": "", "type": "SanitizedSecret", "declarator": "sanitizedSecret = SanitizedSecret.fromSecret(secret)", "var_name": "sanitizedSecret"}], "file": "cli/src/test/java/keywhiz/cli/commands/AssignActionTest.java"}, "test_case": {"identifier": "assignValidatesGroupName", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void assignValidatesGroupName() throws Exception {\n    assignActionConfig.assignType = Arrays.asList(\"secret\");\n    assignActionConfig.name = \"General_Password\";\n    assignActionConfig.group = \"Invalid Name\";\n\n    assignAction.run();\n  }", "signature": "void assignValidatesGroupName()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void assignValidatesGroupName()", "class_method_signature": "AssignActionTest.assignValidatesGroupName()", "testcase": true, "constructor": false, "invocations": ["asList", "run"]}, "focal_class": {"identifier": "AssignAction", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AssignAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AssignAction.class)", "var_name": "logger"}, {"original_string": "private final AssignActionConfig assignActionConfig;", "modifier": "private final", "type": "AssignActionConfig", "declarator": "assignActionConfig", "var_name": "assignActionConfig"}, {"original_string": "private final KeywhizClient keywhizClient;", "modifier": "private final", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}], "methods": [{"identifier": "AssignAction", "parameters": "(AssignActionConfig assignActionConfig, KeywhizClient client)", "modifiers": "public", "return": "", "signature": " AssignAction(AssignActionConfig assignActionConfig, KeywhizClient client)", "full_signature": "public  AssignAction(AssignActionConfig assignActionConfig, KeywhizClient client)", "class_method_signature": "AssignAction.AssignAction(AssignActionConfig assignActionConfig, KeywhizClient client)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "AssignAction.run()", "testcase": false, "constructor": false}], "file": "cli/src/main/java/keywhiz/cli/commands/AssignAction.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override public void run() {\n    List<String> assignType = assignActionConfig.assignType;\n\n    if (assignType == null || assignType.isEmpty()) {\n      throw new IllegalArgumentException(\"Must specify a single type to assign.\");\n    }\n\n    if (assignActionConfig.name == null || !validName(assignActionConfig.name) ||\n        assignActionConfig.group == null || !validName(assignActionConfig.group)) {\n      throw new IllegalArgumentException(format(\"Invalid name, must match %s\", VALID_NAME_PATTERN));\n    }\n    Group group;\n    try {\n      group = keywhizClient.getGroupByName(assignActionConfig.group);\n    } catch (KeywhizClient.NotFoundException e) {\n      throw new AssertionError(\"Group doesn't exist.\");\n    } catch (IOException e) {\n      throw Throwables.propagate(e);\n    }\n\n    String type = assignType.get(0).toLowerCase().trim();\n    switch (type) {\n      case \"client\":\n        Client client = null;\n        boolean createClient = false;\n        try {\n          client = keywhizClient.getClientByName(assignActionConfig.name);\n        } catch (KeywhizClient.NotFoundException e) {\n          logger.info(\"Creating client '{}'.\", assignActionConfig.name);\n          createClient = true;\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n\n        if (createClient) {\n          try {\n            keywhizClient.createClient(assignActionConfig.name, \"\", \"\");\n            client = keywhizClient.getClientByName(assignActionConfig.name);\n          } catch (IOException e) {\n            throw Throwables.propagate(e);\n          }\n        }\n\n        try {\n          if (keywhizClient.groupDetailsForId(group.getId()).getClients().contains(client)) {\n            throw new AssertionError(\n                format(\"Client '%s' already assigned to group '%s'\", assignActionConfig.name,\n                    group.getName()));\n          }\n          logger.info(\"Enrolling client '{}' in group '{}'.\", client.getName(), group.getName());\n          keywhizClient.enrollClientInGroupByIds(client.getId(), group.getId());\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n        break;\n\n      case \"secret\":\n\n        try {\n          long groupId = group.getId();\n          SanitizedSecret sanitizedSecret =\n                keywhizClient.getSanitizedSecretByName(assignActionConfig.name);\n          if (keywhizClient.groupDetailsForId(groupId).getSecrets().contains(sanitizedSecret)) {\n            throw new AssertionError(\n                format(\"Secret '%s' already assigned to group '%s'\", assignActionConfig.name,\n                    group.getName()));\n          }\n          logger.info(\"Allowing group '{}' access to secret '{}'.\", group.getName(), sanitizedSecret.name());\n          keywhizClient.grantSecretToGroupByIds(sanitizedSecret.id(), groupId);\n        } catch (KeywhizClient.NotFoundException e) {\n          throw new AssertionError(\"Secret doesn't exist.\");\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"Invalid assign type specified: \" + type);\n    }\n  }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "AssignAction.run()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "validName", "validName", "format", "getGroupByName", "propagate", "trim", "toLowerCase", "get", "getClientByName", "info", "propagate", "createClient", "getClientByName", "propagate", "contains", "getClients", "groupDetailsForId", "getId", "format", "getName", "info", "getName", "getName", "enrollClientInGroupByIds", "getId", "getId", "propagate", "getId", "getSanitizedSecretByName", "contains", "getSecrets", "groupDetailsForId", "format", "getName", "info", "getName", "name", "grantSecretToGroupByIds", "id", "propagate"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}