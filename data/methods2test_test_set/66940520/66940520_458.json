{"test_class": {"identifier": "AnalyticsCacheSettingsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private SystemSettingManager systemSettingManager;", "modifier": "@Mock\n    private", "type": "SystemSettingManager", "declarator": "systemSettingManager", "var_name": "systemSettingManager"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = rule()", "var_name": "mockitoRule"}, {"original_string": "private AnalyticsCacheSettings analyticsCacheSettings;", "modifier": "private", "type": "AnalyticsCacheSettings", "declarator": "analyticsCacheSettings", "var_name": "analyticsCacheSettings"}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/cache/AnalyticsCacheSettingsTest.java"}, "test_case": {"identifier": "testWhenFixedExpirationTimeOrDefaultIsSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWhenFixedExpirationTimeOrDefaultIsSet()\n    {\n        // Given\n        final CacheStrategy aCacheStrategy = CACHE_10_MINUTES;\n\n        // When\n        when( systemSettingManager.getSystemSetting( CACHE_STRATEGY ) ).thenReturn( aCacheStrategy );\n        final long expirationTime = analyticsCacheSettings.fixedExpirationTimeOrDefault();\n\n        // Then\n        assertThat( expirationTime, is( valueOf( CACHE_10_MINUTES.toSeconds() ) ) );\n    }", "signature": "void testWhenFixedExpirationTimeOrDefaultIsSet()", "full_signature": "@Test public void testWhenFixedExpirationTimeOrDefaultIsSet()", "class_method_signature": "AnalyticsCacheSettingsTest.testWhenFixedExpirationTimeOrDefaultIsSet()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getSystemSetting", "fixedExpirationTimeOrDefault", "assertThat", "is", "valueOf", "toSeconds"]}, "focal_class": {"identifier": "AnalyticsCacheSettings", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SystemSettingManager systemSettingManager;", "modifier": "private final", "type": "SystemSettingManager", "declarator": "systemSettingManager", "var_name": "systemSettingManager"}], "methods": [{"identifier": "AnalyticsCacheSettings", "parameters": "( final SystemSettingManager systemSettingManager )", "modifiers": "public", "return": "", "signature": " AnalyticsCacheSettings( final SystemSettingManager systemSettingManager )", "full_signature": "public  AnalyticsCacheSettings( final SystemSettingManager systemSettingManager )", "class_method_signature": "AnalyticsCacheSettings.AnalyticsCacheSettings( final SystemSettingManager systemSettingManager )", "testcase": false, "constructor": true}, {"identifier": "isProgressiveCachingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isProgressiveCachingEnabled()", "full_signature": "public boolean isProgressiveCachingEnabled()", "class_method_signature": "AnalyticsCacheSettings.isProgressiveCachingEnabled()", "testcase": false, "constructor": false}, {"identifier": "isFixedCachingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFixedCachingEnabled()", "full_signature": "public boolean isFixedCachingEnabled()", "class_method_signature": "AnalyticsCacheSettings.isFixedCachingEnabled()", "testcase": false, "constructor": false}, {"identifier": "progressiveExpirationTimeOrDefault", "parameters": "( final Date dateBeforeToday )", "modifiers": "public", "return": "long", "signature": "long progressiveExpirationTimeOrDefault( final Date dateBeforeToday )", "full_signature": "public long progressiveExpirationTimeOrDefault( final Date dateBeforeToday )", "class_method_signature": "AnalyticsCacheSettings.progressiveExpirationTimeOrDefault( final Date dateBeforeToday )", "testcase": false, "constructor": false}, {"identifier": "fixedExpirationTimeOrDefault", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long fixedExpirationTimeOrDefault()", "full_signature": "public long fixedExpirationTimeOrDefault()", "class_method_signature": "AnalyticsCacheSettings.fixedExpirationTimeOrDefault()", "testcase": false, "constructor": false}, {"identifier": "isCachingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCachingEnabled()", "full_signature": "public boolean isCachingEnabled()", "class_method_signature": "AnalyticsCacheSettings.isCachingEnabled()", "testcase": false, "constructor": false}, {"identifier": "getProgressiveTtlFactorOrDefault", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getProgressiveTtlFactorOrDefault()", "full_signature": "private int getProgressiveTtlFactorOrDefault()", "class_method_signature": "AnalyticsCacheSettings.getProgressiveTtlFactorOrDefault()", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/cache/AnalyticsCacheSettings.java"}, "focal_method": {"identifier": "fixedExpirationTimeOrDefault", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long fixedExpirationTimeOrDefault()\n    {\n        final CacheStrategy cacheStrategy = (CacheStrategy) systemSettingManager.getSystemSetting( CACHE_STRATEGY );\n\n        if ( cacheStrategy != null && cacheStrategy.hasExpirationTimeSet() )\n        {\n            return cacheStrategy.toSeconds();\n        }\n        else\n        {\n            // Try to get a default value\n            final CacheStrategy defaultExpirationTime = (CacheStrategy) CACHE_STRATEGY.getDefaultValue();\n\n            if ( defaultExpirationTime.hasExpirationTimeSet() )\n            {\n                return defaultExpirationTime.toSeconds();\n            }\n            else\n            {\n                // Return ZERO (always expire)\n                return NO_CACHE.toSeconds();\n            }\n        }\n    }", "signature": "long fixedExpirationTimeOrDefault()", "full_signature": "public long fixedExpirationTimeOrDefault()", "class_method_signature": "AnalyticsCacheSettings.fixedExpirationTimeOrDefault()", "testcase": false, "constructor": false, "invocations": ["getSystemSetting", "hasExpirationTimeSet", "toSeconds", "getDefaultValue", "hasExpirationTimeSet", "toSeconds", "toSeconds"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}