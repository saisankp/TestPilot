{"test_class": {"identifier": "StudioProgressRunnerTest", "superclass": "extends BareTestFixtureTestCase", "interfaces": "", "fields": [{"original_string": "@Rule public TestRule runInEdt = (base, description) -> new Statement() {\n    @Override\n    public void evaluate() throws Throwable {\n      runInEdtAndWait(() -> base.evaluate());\n    }\n  };", "modifier": "@Rule public", "type": "TestRule", "declarator": "runInEdt = (base, description) -> new Statement() {\n    @Override\n    public void evaluate() throws Throwable {\n      runInEdtAndWait(() -> base.evaluate());\n    }\n  }", "var_name": "runInEdt"}], "file": "android/testSrc/com/android/tools/idea/sdk/progress/StudioProgressRunnerTest.java"}, "test_case": {"identifier": "testAsyncWithProgressNonUi", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAsyncWithProgressNonUi() throws Exception {\n    StudioProgressRunner runner = new StudioProgressRunner(false, false, \"test\", null);\n    Semaphore lock = new Semaphore(1);\n    lock.acquire();\n    ProgressRunner.ProgressRunnable runnable = (indicator, runner1) -> {\n      assertFalse(ApplicationManager.getApplication().isDispatchThread());\n      try {\n        lock.acquire();\n      }\n      catch (InterruptedException e) {\n        fail();\n      }\n    };\n\n    runner.runAsyncWithProgress(runnable, true);\n    lock.release();\n  }", "signature": "void testAsyncWithProgressNonUi()", "full_signature": "@Test public void testAsyncWithProgressNonUi()", "class_method_signature": "StudioProgressRunnerTest.testAsyncWithProgressNonUi()", "testcase": true, "constructor": false, "invocations": ["acquire", "assertFalse", "isDispatchThread", "getApplication", "acquire", "fail", "runAsyncWithProgress", "release"]}, "focal_class": {"identifier": "StudioProgressRunner", "superclass": "", "interfaces": "implements ProgressRunner", "fields": [{"original_string": "private boolean myModal;", "modifier": "private", "type": "boolean", "declarator": "myModal", "var_name": "myModal"}, {"original_string": "private final boolean myCancellable;", "modifier": "private final", "type": "boolean", "declarator": "myCancellable", "var_name": "myCancellable"}, {"original_string": "private final Project myProject;", "modifier": "private final", "type": "Project", "declarator": "myProject", "var_name": "myProject"}, {"original_string": "private final String myProgressTitle;", "modifier": "private final", "type": "String", "declarator": "myProgressTitle", "var_name": "myProgressTitle"}], "methods": [{"identifier": "StudioProgressRunner", "parameters": "(boolean modal,\n                              boolean cancellable,\n                              String progressTitle,\n                              @Nullable Project project)", "modifiers": "public", "return": "", "signature": " StudioProgressRunner(boolean modal,\n                              boolean cancellable,\n                              String progressTitle,\n                              @Nullable Project project)", "full_signature": "public  StudioProgressRunner(boolean modal,\n                              boolean cancellable,\n                              String progressTitle,\n                              @Nullable Project project)", "class_method_signature": "StudioProgressRunner.StudioProgressRunner(boolean modal,\n                              boolean cancellable,\n                              String progressTitle,\n                              @Nullable Project project)", "testcase": false, "constructor": true}, {"identifier": "runAsyncWithProgress", "parameters": "(@NotNull final ProgressRunnable r)", "modifiers": "@Override public", "return": "void", "signature": "void runAsyncWithProgress(@NotNull final ProgressRunnable r)", "full_signature": "@Override public void runAsyncWithProgress(@NotNull final ProgressRunnable r)", "class_method_signature": "StudioProgressRunner.runAsyncWithProgress(@NotNull final ProgressRunnable r)", "testcase": false, "constructor": false}, {"identifier": "runAsyncWithProgress", "parameters": "(@NotNull final ProgressRunnable r, boolean overrideTestMode)", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void runAsyncWithProgress(@NotNull final ProgressRunnable r, boolean overrideTestMode)", "full_signature": "@VisibleForTesting public void runAsyncWithProgress(@NotNull final ProgressRunnable r, boolean overrideTestMode)", "class_method_signature": "StudioProgressRunner.runAsyncWithProgress(@NotNull final ProgressRunnable r, boolean overrideTestMode)", "testcase": false, "constructor": false}, {"identifier": "runSyncWithProgress", "parameters": "(@NotNull final ProgressRunnable progressRunnable)", "modifiers": "@Override public", "return": "void", "signature": "void runSyncWithProgress(@NotNull final ProgressRunnable progressRunnable)", "full_signature": "@Override public void runSyncWithProgress(@NotNull final ProgressRunnable progressRunnable)", "class_method_signature": "StudioProgressRunner.runSyncWithProgress(@NotNull final ProgressRunnable progressRunnable)", "testcase": false, "constructor": false}, {"identifier": "doRunSync", "parameters": "(@NotNull ProgressIndicator indicator, @NotNull ProgressRunnable progressRunnable)", "modifiers": "private", "return": "void", "signature": "void doRunSync(@NotNull ProgressIndicator indicator, @NotNull ProgressRunnable progressRunnable)", "full_signature": "private void doRunSync(@NotNull ProgressIndicator indicator, @NotNull ProgressRunnable progressRunnable)", "class_method_signature": "StudioProgressRunner.doRunSync(@NotNull ProgressIndicator indicator, @NotNull ProgressRunnable progressRunnable)", "testcase": false, "constructor": false}, {"identifier": "runSyncWithoutProgress", "parameters": "(@NotNull Runnable r)", "modifiers": "@Override public", "return": "void", "signature": "void runSyncWithoutProgress(@NotNull Runnable r)", "full_signature": "@Override public void runSyncWithoutProgress(@NotNull Runnable r)", "class_method_signature": "StudioProgressRunner.runSyncWithoutProgress(@NotNull Runnable r)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/sdk/progress/StudioProgressRunner.java"}, "focal_method": {"identifier": "runAsyncWithProgress", "parameters": "(@NotNull final ProgressRunnable r)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void runAsyncWithProgress(@NotNull final ProgressRunnable r) {\n    runAsyncWithProgress(r, false);\n  }", "signature": "void runAsyncWithProgress(@NotNull final ProgressRunnable r)", "full_signature": "@Override public void runAsyncWithProgress(@NotNull final ProgressRunnable r)", "class_method_signature": "StudioProgressRunner.runAsyncWithProgress(@NotNull final ProgressRunnable r)", "testcase": false, "constructor": false, "invocations": ["runAsyncWithProgress"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}