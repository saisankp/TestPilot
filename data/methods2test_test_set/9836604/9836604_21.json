{"test_class": {"identifier": "AuthenticationManagerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AuthenticationManagerImpl authenticationManager;", "modifier": "", "type": "AuthenticationManagerImpl", "declarator": "authenticationManager", "var_name": "authenticationManager"}], "file": "ki4so-core/src/test/java/com/github/ebnew/ki4so/core/authentication/AuthenticationManagerImplTest.java"}, "test_case": {"identifier": "testAuthenticate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAuthenticate() {\n\t\t//\u6d4b\u8bd5\u60c5\u51b51\uff0c\u5f53\u4f20\u5165\u7684\u51ed\u636e\u4e3anull\u7684\u60c5\u51b5\uff0c\u5e94\u8be5\u629b\u51fa\u5f02\u5e38\u3002\n\t\ttry{\n\t\t\tauthenticationManager.authenticate(null);\n\t\t\tfail(\"\u5f53\u53c2\u6570\u4e3aNull\u5e94\u8be5\u629b\u51fa\u5f02\u5e38\u4fe1\u606f\");\n\t\t}catch (EmptyCredentialException e) {\n\t\t\t\n\t\t}\n\t\t\n\t\tCredential credential = Mockito.mock(Credential.class);\n\t\t\n\t\t//\u6d4b\u8bd5\u60c5\u51b52\uff0c\u6d4b\u8bd5\u5f53\u8ba4\u8bc1\u7ba1\u7406\u5668\u4e2d\u7684\u8ba4\u8bc1\u5904\u7406\u5668\u5217\u8868\u4e3anull\u7684\u60c5\u51b5\u3002\n\t\ttry{\n\t\t\tauthenticationManager.authenticate(credential);\n\t\t\tfail(\"\u5f53\u6ca1\u6709\u8ba4\u8bc1\u5904\u7406\u5668\u5e94\u8be5\u629b\u51fa\u5f02\u5e38\u4fe1\u606f\");\n\t\t}catch (UnsupportedCredentialsException e) {\n\t\t\t\n\t\t}\n\t\t\n\t\t//\u6d4b\u8bd5\u60c5\u51b53\uff0c\u6d4b\u8bd5\u5f53\u8ba4\u8bc1\u7ba1\u7406\u5668\u4e2d\u7684\u8ba4\u8bc1\u5904\u7406\u5668\u5217\u8868\u4e0d\u4e3anull\u4f46\u662f\u662f\u7a7a\u5217\u8868\u7684\u60c5\u51b5\u3002\n\t\tList<AuthenticationHandler> authenticationHandlers = null;\n\t\ttry{\n\t\t\tauthenticationHandlers = new ArrayList<AuthenticationHandler>();\n\t\t\tauthenticationManager.setAuthenticationHandlers(authenticationHandlers);\n\t\t\tauthenticationManager.authenticate(credential);\n\t\t\tfail(\"\u5f53\u6ca1\u6709\u8ba4\u8bc1\u5904\u7406\u5668\u5e94\u8be5\u629b\u51fa\u5f02\u5e38\u4fe1\u606f\");\n\t\t}catch (UnsupportedCredentialsException e) {\n\t\t\t\n\t\t}\n\t\t\n\t\t//\u6d4b\u8bd5\u60c5\u51b54\uff0c\u6d4b\u8bd5\u5f53\u8ba4\u8bc1\u7ba1\u7406\u5668\u4e2d\u7684\u8ba4\u8bc1\u5904\u7406\u5668\u5217\u8868\u4e0d\u4e3anull\uff0c\u5217\u8868\u6709\u4e00\u4e2a\u8ba4\u8bc1\u5904\u7406\u5668\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u8be5\u51ed\u636e\u7684\u60c5\u51b5\u3002\n\t\tAuthenticationHandler handler = Mockito.mock(AuthenticationHandler.class);\n\t\tMockito.when(handler.supports(credential)).thenReturn(false);\n\t\ttry{\n\t\t\tauthenticationHandlers = new ArrayList<AuthenticationHandler>();\n\t\t\tauthenticationHandlers.add(handler);\n\t\t\tauthenticationManager.setAuthenticationHandlers(authenticationHandlers);\n\t\t\tauthenticationManager.authenticate(credential);\n\t\t\tfail(\"\u5f53\u6ca1\u6709\u8ba4\u8bc1\u5904\u7406\u5668\u5e94\u8be5\u629b\u51fa\u5f02\u5e38\u4fe1\u606f\");\n\t\t}catch (UnsupportedCredentialsException e) {\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t//\u6d4b\u8bd5\u60c5\u51b55\uff0c\u6d4b\u8bd5\u5b58\u5728\u5408\u6cd5\u7684\u8ba4\u8bc1\u5904\u7406\u5668\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u65e0\u5408\u6cd5\u7684\u51ed\u636e\u8f6c\u6362\u5668\u3002\n\t\thandler = Mockito.mock(AuthenticationHandler.class);\n\t\tMockito.when(handler.supports(credential)).thenReturn(true);\n\t\tMockito.when(handler.authenticate(credential)).thenReturn(true);\n\t\ttry{\n\t\t\tauthenticationHandlers = new ArrayList<AuthenticationHandler>();\n\t\t\tauthenticationHandlers.add(handler);\n\t\t\tauthenticationManager.setAuthenticationHandlers(authenticationHandlers);\n\t\t\tauthenticationManager.authenticate(credential);\n\t\t\tfail(\"\u5f53\u6ca1\u6709\u51ed\u636e\u8f6c\u6362\u5668\u5e94\u8be5\u629b\u51fa\u5f02\u5e38\u4fe1\u606f\");\n\t\t}catch (UnsupportedCredentialsException e) {\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t//\u6d4b\u8bd5\u60c5\u51b56\uff0c\u6d4b\u8bd5\u5b58\u5728\u5408\u6cd5\u7684\u8ba4\u8bc1\u5904\u7406\u5668\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u51ed\u636e\u8f6c\u6362\u5668\u5217\u8868\u4e0d\u4e3a\u7a7a\uff0c\u4f46\u662f\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4e3a\u7a7a\u3002\n\t\tList<CredentialToPrincipalResolver> resolvers = new ArrayList<CredentialToPrincipalResolver>();\n\t\thandler = Mockito.mock(AuthenticationHandler.class);\n\t\tMockito.when(handler.supports(credential)).thenReturn(true);\n\t\tMockito.when(handler.authenticate(credential)).thenReturn(true);\n\t\ttry{\n\t\t\tauthenticationHandlers = new ArrayList<AuthenticationHandler>();\n\t\t\tauthenticationHandlers.add(handler);\n\t\t\tauthenticationManager.setAuthenticationHandlers(authenticationHandlers);\n\t\t\tauthenticationManager.setCredentialToPrincipalResolvers(resolvers);\n\t\t\tauthenticationManager.authenticate(credential);\n\t\t\tfail(\"\u5f53\u6ca1\u6709\u51ed\u636e\u8f6c\u6362\u5668\u5e94\u8be5\u629b\u51fa\u5f02\u5e38\u4fe1\u606f\");\n\t\t}catch (UnsupportedCredentialsException e) {\n\t\t\t\n\t\t}\n\t\t\n\t\t//\u6d4b\u8bd5\u60c5\u51b57\uff0c\u6d4b\u8bd5\u5b58\u5728\u5408\u6cd5\u7684\u8ba4\u8bc1\u5904\u7406\u5668\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u51ed\u636e\u8f6c\u6362\u5668\u5217\u8868\u4e0d\u4e3a\u7a7a\uff0c\u4f46\u662f\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4e0d\u4e3a\u7a7a\uff0c\u8ba4\u8bc1\u540e\u5904\u7406\u5668\u5bf9\u8c61\u662f\u7a7a\u3002\n\t\thandler = Mockito.mock(AuthenticationHandler.class);\n\t\tMockito.when(handler.supports(credential)).thenReturn(true);\n\t\tMockito.when(handler.authenticate(credential)).thenReturn(true);\n\t\tCredentialToPrincipalResolver resolver = Mockito.mock(CredentialToPrincipalResolver.class);\n\t\tPrincipal principal = Mockito.mock(Principal.class);\n\t\tMockito.when(resolver.supports(credential)).thenReturn(true);\n\t\tMockito.when(resolver.resolvePrincipal(credential)).thenReturn(principal);\n\t\ttry{\n\t\t\tauthenticationHandlers = new ArrayList<AuthenticationHandler>();\n\t\t\tauthenticationHandlers.add(handler);\n\t\t\tauthenticationManager.setAuthenticationHandlers(authenticationHandlers);\n\t\t\tresolvers = new ArrayList<CredentialToPrincipalResolver>();\n\t\t\tresolvers.add(resolver);\n\t\t\tauthenticationManager.setCredentialToPrincipalResolvers(resolvers);\n\t\t\tauthenticationManager.authenticate(credential);\n\t\t\tfail(\"\u5f53\u6ca1\u6709\u8ba4\u8bc1\u540e\u5904\u7406\u5668\u5e94\u8be5\u629b\u51fa\u5f02\u5e38\u4fe1\u606f\");\n\t\t}catch (NoAuthenticationPostHandlerException e) {\n\t\t\t\n\t\t}\n\t\t\n\t\t//\u6d4b\u8bd5\u60c5\u51b58\uff0c\u6d4b\u8bd5\u5b58\u5728\u5408\u6cd5\u7684\u8ba4\u8bc1\u5904\u7406\u5668\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u51ed\u636e\u8f6c\u6362\u5668\u5217\u8868\u4e0d\u4e3a\u7a7a\uff0c\u4f46\u662f\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4e0d\u4e3a\u7a7a\uff0c\u8ba4\u8bc1\u540e\u5904\u7406\u5668\u5bf9\u8c61\u4e0d\u662f\u7a7a\u3002\n\t\thandler = Mockito.mock(AuthenticationHandler.class);\n\t\tMockito.when(handler.supports(credential)).thenReturn(true);\n\t\tMockito.when(handler.authenticate(credential)).thenReturn(true);\n\t\tresolver = Mockito.mock(CredentialToPrincipalResolver.class);\n\t\tprincipal = Mockito.mock(Principal.class);\n\t\tMockito.when(resolver.supports(credential)).thenReturn(true);\n\t\tMockito.when(resolver.resolvePrincipal(credential)).thenReturn(principal);\n\t\tAuthenticationPostHandler authenticationPostHandler = Mockito.mock(AuthenticationPostHandler.class);\n\t\tAuthentication authentication = Mockito.mock(Authentication.class);\n\t\tMockito.when(authenticationPostHandler.postAuthentication(credential, principal)).thenReturn(authentication);\n\t\tauthenticationHandlers = new ArrayList<AuthenticationHandler>();\n\t\tauthenticationHandlers.add(handler);\n\t\tauthenticationManager.setAuthenticationHandlers(authenticationHandlers);\n\t\tresolvers = new ArrayList<CredentialToPrincipalResolver>();\n\t\tresolvers.add(resolver);\n\t\tauthenticationManager.setCredentialToPrincipalResolvers(resolvers);\n\t\tauthenticationManager.setAuthenticationPostHandler(authenticationPostHandler);\n\t\tauthenticationManager.authenticate(credential);\n\t}", "signature": "void testAuthenticate()", "full_signature": "@Test public void testAuthenticate()", "class_method_signature": "AuthenticationManagerImplTest.testAuthenticate()", "testcase": true, "constructor": false, "invocations": ["authenticate", "fail", "mock", "authenticate", "fail", "setAuthenticationHandlers", "authenticate", "fail", "mock", "thenReturn", "when", "supports", "add", "setAuthenticationHandlers", "authenticate", "fail", "mock", "thenReturn", "when", "supports", "thenReturn", "when", "authenticate", "add", "setAuthenticationHandlers", "authenticate", "fail", "mock", "thenReturn", "when", "supports", "thenReturn", "when", "authenticate", "add", "setAuthenticationHandlers", "setCredentialToPrincipalResolvers", "authenticate", "fail", "mock", "thenReturn", "when", "supports", "thenReturn", "when", "authenticate", "mock", "mock", "thenReturn", "when", "supports", "thenReturn", "when", "resolvePrincipal", "add", "setAuthenticationHandlers", "add", "setCredentialToPrincipalResolvers", "authenticate", "fail", "mock", "thenReturn", "when", "supports", "thenReturn", "when", "authenticate", "mock", "mock", "thenReturn", "when", "supports", "thenReturn", "when", "resolvePrincipal", "mock", "mock", "thenReturn", "when", "postAuthentication", "add", "setAuthenticationHandlers", "add", "setCredentialToPrincipalResolvers", "setAuthenticationPostHandler", "authenticate"]}, "focal_class": {"identifier": "AuthenticationManagerImpl", "superclass": "", "interfaces": "implements AuthenticationManager", "fields": [{"original_string": "private List<AuthenticationHandler> authenticationHandlers;", "modifier": "private", "type": "List<AuthenticationHandler>", "declarator": "authenticationHandlers", "var_name": "authenticationHandlers"}, {"original_string": "private List<CredentialToPrincipalResolver> credentialToPrincipalResolvers;", "modifier": "private", "type": "List<CredentialToPrincipalResolver>", "declarator": "credentialToPrincipalResolvers", "var_name": "credentialToPrincipalResolvers"}, {"original_string": "private AuthenticationPostHandler authenticationPostHandler;", "modifier": "private", "type": "AuthenticationPostHandler", "declarator": "authenticationPostHandler", "var_name": "authenticationPostHandler"}], "methods": [{"identifier": "setAuthenticationPostHandler", "parameters": "(\n\t\t\tAuthenticationPostHandler authenticationPostHandler)", "modifiers": "public", "return": "void", "signature": "void setAuthenticationPostHandler(\n\t\t\tAuthenticationPostHandler authenticationPostHandler)", "full_signature": "public void setAuthenticationPostHandler(\n\t\t\tAuthenticationPostHandler authenticationPostHandler)", "class_method_signature": "AuthenticationManagerImpl.setAuthenticationPostHandler(\n\t\t\tAuthenticationPostHandler authenticationPostHandler)", "testcase": false, "constructor": false}, {"identifier": "setCredentialToPrincipalResolvers", "parameters": "(\n\t\t\tList<CredentialToPrincipalResolver> credentialToPrincipalResolvers)", "modifiers": "public", "return": "void", "signature": "void setCredentialToPrincipalResolvers(\n\t\t\tList<CredentialToPrincipalResolver> credentialToPrincipalResolvers)", "full_signature": "public void setCredentialToPrincipalResolvers(\n\t\t\tList<CredentialToPrincipalResolver> credentialToPrincipalResolvers)", "class_method_signature": "AuthenticationManagerImpl.setCredentialToPrincipalResolvers(\n\t\t\tList<CredentialToPrincipalResolver> credentialToPrincipalResolvers)", "testcase": false, "constructor": false}, {"identifier": "setAuthenticationHandlers", "parameters": "(\n\t\t\tList<AuthenticationHandler> authenticationHandlers)", "modifiers": "public", "return": "void", "signature": "void setAuthenticationHandlers(\n\t\t\tList<AuthenticationHandler> authenticationHandlers)", "full_signature": "public void setAuthenticationHandlers(\n\t\t\tList<AuthenticationHandler> authenticationHandlers)", "class_method_signature": "AuthenticationManagerImpl.setAuthenticationHandlers(\n\t\t\tList<AuthenticationHandler> authenticationHandlers)", "testcase": false, "constructor": false}, {"identifier": "AuthenticationManagerImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " AuthenticationManagerImpl()", "full_signature": "public  AuthenticationManagerImpl()", "class_method_signature": "AuthenticationManagerImpl.AuthenticationManagerImpl()", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "(Credential credential)", "modifiers": "public", "return": "Authentication", "signature": "Authentication authenticate(Credential credential)", "full_signature": "public Authentication authenticate(Credential credential)", "class_method_signature": "AuthenticationManagerImpl.authenticate(Credential credential)", "testcase": false, "constructor": false}], "file": "ki4so-core/src/main/java/com/github/ebnew/ki4so/core/authentication/AuthenticationManagerImpl.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(Credential credential)", "modifiers": "public", "return": "Authentication", "body": "public Authentication authenticate(Credential credential) throws InvalidCredentialException{\n\t\t//\u662f\u5426\u627e\u5230\u652f\u6301\u7684\u51ed\u636e\u8ba4\u8bc1\u5904\u7406\u5668\u3002\n\t\tboolean foundSupported = false;\n\t\t//\u662f\u5426\u8ba4\u8bc1\u901a\u8fc7\u3002\n        boolean authenticated = false;\n\t\t//\u82e5\u51ed\u636e\u4e3a\u7a7a\uff0c\u5219\u8dd1\u51fa\u5f02\u5e38\u3002\n\t\tif(credential==null){\n\t\t\tthrow new EmptyCredentialException();\n\t\t}\n\t\t\n\t\t//\u521d\u59cb\u5316\u7684\u8ba4\u8bc1\u5f02\u5e38\u4fe1\u606f\u3002\n\t\tAuthenticationException unAuthSupportedHandlerException = InvalidCredentialException.INSTANCE; \n\t\t\n\t\t//\u5faa\u73af\u8c03\u7528\u6240\u6709\u7684\u8ba4\u8bc1\u5904\u7406\u5668\u3002\n\t\tif(authenticationHandlers!=null && authenticationHandlers.size()>0){\n\t\t\tfor(AuthenticationHandler handler:authenticationHandlers){\n\t\t\t\t//\u8ba4\u8bc1\u5904\u7406\u5668\u662f\u5426\u652f\u6301\u8be5\u51ed\u636e\u3002\n\t\t\t\tif(handler.supports(credential)){\n\t\t\t\t\tfoundSupported = true;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tauthenticated = handler.authenticate(credential);\n\t\t\t\t\t\t//\u82e5\u8ba4\u8bc1\u6210\u529f\uff0c\u5219\u8df3\u51fa\u5faa\u73af\u3002\n\t\t\t\t\t\tif(authenticated){\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}catch (AuthenticationException e) {\n\t\t\t\t\t\tunAuthSupportedHandlerException = e;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//\u672a\u627e\u5230\u652f\u6301\u7684\u8ba4\u8bc1\u5904\u7406\u5668\u3002\n\t\tif(!foundSupported){\n\t\t\tthrow new UnsupportedCredentialsException();\n\t\t}\n\t\t\n\t\t//\u82e5\u672a\u8ba4\u8bc1\u901a\u8fc7\uff0c\u5219\u629b\u51fa\u6700\u540e\u4e00\u4e2a\u5f02\u5e38\u4fe1\u606f\u3002\n\t\tif(!authenticated){\n\t\t\tthrow unAuthSupportedHandlerException;\n\t\t}\n\t\t\n\t\tPrincipal principal = null;\n\t\t//\u521d\u59cb\u5316\u662f\u5426\u627e\u5230\u5408\u9002\u7684\u51ed\u636e\u8f6c\u6362\u5668\u3002\n\t\tfoundSupported = false;\n\t\t//\u5faa\u73af\u8c03\u7528\u6240\u6709\u7684\u7528\u6237\u51ed\u636e\u89e3\u6790\u5668\u3002\n\t\tif(credentialToPrincipalResolvers!=null && credentialToPrincipalResolvers.size()>0){\n\t\t\tfor(CredentialToPrincipalResolver resolver:credentialToPrincipalResolvers){\n\t\t\t\t//\u7528\u6237\u51ed\u636e\u89e3\u6790\u5668\u662f\u5426\u652f\u6301\u8be5\u51ed\u636e\u3002\n\t\t\t\tif(resolver.supports(credential)){\n\t\t\t\t\tfoundSupported = true;\n\t\t\t\t\tprincipal = resolver.resolvePrincipal(credential);\n\t\t\t\t\t//\u82e5\u89e3\u6790\u6210\u529f\uff0c\u5219\u8df3\u51fa\u5faa\u73af\u3002\n\t\t\t\t\tif(principal!=null){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//\u672a\u627e\u5230\u652f\u6301\u7684\u7528\u6237\u51ed\u636e\u89e3\u6790\u5668\u3002\n\t\tif(!foundSupported){\n\t\t\tthrow new UnsupportedCredentialsException();\n\t\t}\n\t\t//\u82e5\u8ba4\u8bc1\u540e\u5904\u7406\u5668\u5bf9\u8c61\u4e3a\u7a7a\uff0c\u5219\u629b\u51fa\u5f02\u5e38\u3002\n\t\tif(authenticationPostHandler==null){\n\t\t\tthrow new NoAuthenticationPostHandlerException();\n\t\t}\n\t\t\n\t\t//\u4ea4\u7531\u8ba4\u8bc1\u540e\u5904\u7406\u5668\u8fdb\u884c\u5904\u7406\u3002\n\t\treturn authenticationPostHandler.postAuthentication(credential, principal);\n\t}", "signature": "Authentication authenticate(Credential credential)", "full_signature": "public Authentication authenticate(Credential credential)", "class_method_signature": "AuthenticationManagerImpl.authenticate(Credential credential)", "testcase": false, "constructor": false, "invocations": ["size", "supports", "authenticate", "size", "supports", "resolvePrincipal", "postAuthentication"]}, "repository": {"repo_id": 9836604, "url": "https://github.com/ebnew/ki4so", "language": "Java", "is_fork": false, "fork_count": 84, "stargazer_count": 100, "size": 4421, "license": "licensed"}}