{"test_class": {"identifier": "MvnDependencyTreeAnalyzerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AntennaContext antennaContextMock;", "modifier": "@Mock\n    private", "type": "AntennaContext", "declarator": "antennaContextMock", "var_name": "antennaContextMock"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}], "file": "modules/maven/src/test/java/org/eclipse/sw360/antenna/maven/workflow/analyzers/MvnDependencyTreeAnalyzerTest.java"}, "test_case": {"identifier": "testProjectIsAnalyzedCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProjectIsAnalyzedCorrectly() {\n        MvnDependencyTreeAnalyzer analyzer = new MvnDependencyTreeAnalyzer();\n\n        analyzer.setAntennaContext(antennaContextMock);\n\n        when(antennaContextMock.getGeneric(WrappedDependencyNodes.class))\n                .thenReturn(Optional.of(getNodes(1)));\n\n        WorkflowStepResult result = analyzer.yield();\n\n        assertThat(result.getArtifacts()).hasSize(1);\n\n        Artifact actualArtifact = result.getArtifacts().iterator().next();\n        Artifact expectedArtifact = getExpectedArtifact(0);\n\n        assertThat(actualArtifact.getAnalysisSource()).isEqualTo(expectedArtifact.getAnalysisSource());\n        assertThat(actualArtifact.askFor(ArtifactMatchingMetadata.class).get().getMatchState())\n                .isEqualTo(expectedArtifact.askFor(ArtifactMatchingMetadata.class).get().getMatchState());\n        assertThat(actualArtifact.getArtifactIdentifiers())\n                .isEqualTo(expectedArtifact.getArtifactIdentifiers());\n    }", "signature": "void testProjectIsAnalyzedCorrectly()", "full_signature": "@Test public void testProjectIsAnalyzedCorrectly()", "class_method_signature": "MvnDependencyTreeAnalyzerTest.testProjectIsAnalyzedCorrectly()", "testcase": true, "constructor": false, "invocations": ["setAntennaContext", "thenReturn", "when", "getGeneric", "of", "getNodes", "yield", "hasSize", "assertThat", "getArtifacts", "next", "iterator", "getArtifacts", "getExpectedArtifact", "isEqualTo", "assertThat", "getAnalysisSource", "getAnalysisSource", "isEqualTo", "assertThat", "getMatchState", "get", "askFor", "getMatchState", "get", "askFor", "isEqualTo", "assertThat", "getArtifactIdentifiers", "getArtifactIdentifiers"]}, "focal_class": {"identifier": "MvnDependencyTreeAnalyzer", "superclass": "extends AbstractAnalyzer", "interfaces": "", "fields": [], "methods": [{"identifier": "MvnDependencyTreeAnalyzer", "parameters": "()", "modifiers": "public", "return": "", "signature": " MvnDependencyTreeAnalyzer()", "full_signature": "public  MvnDependencyTreeAnalyzer()", "class_method_signature": "MvnDependencyTreeAnalyzer.MvnDependencyTreeAnalyzer()", "testcase": false, "constructor": true}, {"identifier": "yield", "parameters": "()", "modifiers": "@Override public", "return": "WorkflowStepResult", "signature": "WorkflowStepResult yield()", "full_signature": "@Override public WorkflowStepResult yield()", "class_method_signature": "MvnDependencyTreeAnalyzer.yield()", "testcase": false, "constructor": false}, {"identifier": "getArtifactFromNode", "parameters": "(DependencyNode node)", "modifiers": "private", "return": "Artifact", "signature": "Artifact getArtifactFromNode(DependencyNode node)", "full_signature": "private Artifact getArtifactFromNode(DependencyNode node)", "class_method_signature": "MvnDependencyTreeAnalyzer.getArtifactFromNode(DependencyNode node)", "testcase": false, "constructor": false}, {"identifier": "getMavenCoordinate", "parameters": "(DependencyNode node)", "modifiers": "private", "return": "Coordinate", "signature": "Coordinate getMavenCoordinate(DependencyNode node)", "full_signature": "private Coordinate getMavenCoordinate(DependencyNode node)", "class_method_signature": "MvnDependencyTreeAnalyzer.getMavenCoordinate(DependencyNode node)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "MvnDependencyTreeAnalyzer.getName()", "testcase": false, "constructor": false}], "file": "modules/maven/src/main/java/org/eclipse/sw360/antenna/maven/workflow/analyzers/MvnDependencyTreeAnalyzer.java"}, "focal_method": {"identifier": "yield", "parameters": "()", "modifiers": "@Override public", "return": "WorkflowStepResult", "body": "@Override\n    public WorkflowStepResult yield() {\n\n        Optional<WrappedDependencyNodes> wrappedProjectsOptional = context.getGeneric(WrappedDependencyNodes.class);\n\n        if (!wrappedProjectsOptional.isPresent()) {\n            throw new ExecutionException(\"No Maven dependency tree was provided for analysis.\");\n        }\n\n        List<DependencyNode> projectList = wrappedProjectsOptional.get().getDependencyNodes();\n\n        final List<Artifact> collect = projectList.stream()\n                .map(this::getArtifactFromNode)\n                .collect(Collectors.toList());\n\n        return new WorkflowStepResult(collect);\n    }", "signature": "WorkflowStepResult yield()", "full_signature": "@Override public WorkflowStepResult yield()", "class_method_signature": "MvnDependencyTreeAnalyzer.yield()", "testcase": false, "constructor": false, "invocations": ["getGeneric", "isPresent", "getDependencyNodes", "get", "collect", "map", "stream", "toList"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}