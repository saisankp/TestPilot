{"test_class": {"identifier": "EmmaSemanticInterpretationExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EMMA_NAMESPACE = \"http://www.w3.org/2003/04/emma\";", "modifier": "private static final", "type": "String", "declarator": "EMMA_NAMESPACE = \"http://www.w3.org/2003/04/emma\"", "var_name": "EMMA_NAMESPACE"}], "file": "org.jvoicexml.callmanager.mmi/src/test/java/org/jvoicexml/callmanager/mmi/xml/EmmaSemanticInterpretationExtractorTest.java"}, "test_case": {"identifier": "testSimple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSimple() throws Exception {\n        final Mmi mmi = new Mmi();\n        final ExtensionNotification notification = new ExtensionNotification();\n        mmi.setExtensionNotification(notification);\n        notification.setContext(UUID.randomUUID().toString());\n        notification.setRequestId(\"42\");\n        notification.setSource(\"fromhere\");\n        notification.setTarget(\"tothere\");\n        final AnyComplexType any = new AnyComplexType();\n        notification.setData(any);\n        final DocumentBuilderFactory factory = DocumentBuilderFactory\n                .newInstance();\n        factory.setNamespaceAware(true);\n        final DocumentBuilder builder = factory.newDocumentBuilder();\n        final Document document = builder.newDocument();\n        final Element emma = document.createElementNS(EMMA_NAMESPACE,\n                \"emma:emma\");\n        emma.setAttribute(\"version\", \"1.0\");\n        document.appendChild(emma);\n        final Element interpretation = document.createElementNS(EMMA_NAMESPACE,\n                \"emma:interpretation\");\n        interpretation.setAttribute(\"id\", \"dummy\");\n        interpretation\n                .setAttributeNS(EMMA_NAMESPACE, \"emma:medium\", \"acoustic\");\n        any.addContent(emma);\n        interpretation.setAttributeNS(EMMA_NAMESPACE, \"emma:mode\", \"mmi\");\n        float confidence = 0.4f;\n        interpretation.setAttributeNS(EMMA_NAMESPACE, \"emma:confidence\",\n                Float.toString(confidence));\n        final String tokens = \"this is a test\";\n        interpretation.setAttributeNS(EMMA_NAMESPACE, \"emma:tokens\",\n                tokens);\n        emma.appendChild(interpretation);\n        final JAXBContext context = JAXBContext.newInstance(Mmi.class);\n        Marshaller marshaller = context.createMarshaller();\n        final EmmaSemanticInterpretationExtractor extractor = new EmmaSemanticInterpretationExtractor();\n        marshaller.marshal(mmi, extractor);\n        final RecognitionResult result = extractor.getRecognitonResult();\n        Assert.assertEquals(tokens, result.getUtterance());\n        Assert.assertEquals(confidence, result.getConfidence(), .001);\n    }", "signature": "void testSimple()", "full_signature": "@Test public void testSimple()", "class_method_signature": "EmmaSemanticInterpretationExtractorTest.testSimple()", "testcase": true, "constructor": false, "invocations": ["setExtensionNotification", "setContext", "toString", "randomUUID", "setRequestId", "setSource", "setTarget", "setData", "newInstance", "setNamespaceAware", "newDocumentBuilder", "newDocument", "createElementNS", "setAttribute", "appendChild", "createElementNS", "setAttribute", "setAttributeNS", "addContent", "setAttributeNS", "setAttributeNS", "toString", "setAttributeNS", "appendChild", "newInstance", "createMarshaller", "marshal", "getRecognitonResult", "assertEquals", "getUtterance", "assertEquals", "getConfidence"]}, "focal_class": {"identifier": "EmmaSemanticInterpretationExtractor", "superclass": "", "interfaces": "implements ContentHandler", "fields": [{"original_string": "private static final String EMMA_NAMESPACE = \"http://www.w3.org/2003/04/emma\";", "modifier": "private static final", "type": "String", "declarator": "EMMA_NAMESPACE = \"http://www.w3.org/2003/04/emma\"", "var_name": "EMMA_NAMESPACE"}, {"original_string": "private boolean inEmma;", "modifier": "private", "type": "boolean", "declarator": "inEmma", "var_name": "inEmma"}, {"original_string": "private float confidence;", "modifier": "private", "type": "float", "declarator": "confidence", "var_name": "confidence"}, {"original_string": "private String utterance;", "modifier": "private", "type": "String", "declarator": "utterance", "var_name": "utterance"}, {"original_string": "private Object interpretation;", "modifier": "private", "type": "Object", "declarator": "interpretation", "var_name": "interpretation"}, {"original_string": "private final Map<String, Object> interpretations;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "interpretations", "var_name": "interpretations"}, {"original_string": "private final Stack<String> interpretationTagNames;", "modifier": "private final", "type": "Stack<String>", "declarator": "interpretationTagNames", "var_name": "interpretationTagNames"}, {"original_string": "private StringBuilder text;", "modifier": "private", "type": "StringBuilder", "declarator": "text", "var_name": "text"}, {"original_string": "private Map<String, Object> currentAssignments;", "modifier": "private", "type": "Map<String, Object>", "declarator": "currentAssignments", "var_name": "currentAssignments"}, {"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private final ScriptableObject scope;", "modifier": "private final", "type": "ScriptableObject", "declarator": "scope", "var_name": "scope"}], "methods": [{"identifier": "EmmaSemanticInterpretationExtractor", "parameters": "()", "modifiers": "public", "return": "", "signature": " EmmaSemanticInterpretationExtractor()", "full_signature": "public  EmmaSemanticInterpretationExtractor()", "class_method_signature": "EmmaSemanticInterpretationExtractor.EmmaSemanticInterpretationExtractor()", "testcase": false, "constructor": true}, {"identifier": "getRecognitonResult", "parameters": "()", "modifiers": "public", "return": "MMIRecognitionResult", "signature": "MMIRecognitionResult getRecognitonResult()", "full_signature": "public MMIRecognitionResult getRecognitonResult()", "class_method_signature": "EmmaSemanticInterpretationExtractor.getRecognitonResult()", "testcase": false, "constructor": false}, {"identifier": "setDocumentLocator", "parameters": "(Locator locator)", "modifiers": "@Override public", "return": "void", "signature": "void setDocumentLocator(Locator locator)", "full_signature": "@Override public void setDocumentLocator(Locator locator)", "class_method_signature": "EmmaSemanticInterpretationExtractor.setDocumentLocator(Locator locator)", "testcase": false, "constructor": false}, {"identifier": "startDocument", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startDocument()", "full_signature": "@Override public void startDocument()", "class_method_signature": "EmmaSemanticInterpretationExtractor.startDocument()", "testcase": false, "constructor": false}, {"identifier": "endDocument", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endDocument()", "full_signature": "@Override public void endDocument()", "class_method_signature": "EmmaSemanticInterpretationExtractor.endDocument()", "testcase": false, "constructor": false}, {"identifier": "startPrefixMapping", "parameters": "(String prefix, String uri)", "modifiers": "@Override public", "return": "void", "signature": "void startPrefixMapping(String prefix, String uri)", "full_signature": "@Override public void startPrefixMapping(String prefix, String uri)", "class_method_signature": "EmmaSemanticInterpretationExtractor.startPrefixMapping(String prefix, String uri)", "testcase": false, "constructor": false}, {"identifier": "endPrefixMapping", "parameters": "(String prefix)", "modifiers": "@Override public", "return": "void", "signature": "void endPrefixMapping(String prefix)", "full_signature": "@Override public void endPrefixMapping(String prefix)", "class_method_signature": "EmmaSemanticInterpretationExtractor.endPrefixMapping(String prefix)", "testcase": false, "constructor": false}, {"identifier": "startElement", "parameters": "(String uri, String localName, String qName,\n            Attributes atts)", "modifiers": "@Override public", "return": "void", "signature": "void startElement(String uri, String localName, String qName,\n            Attributes atts)", "full_signature": "@Override public void startElement(String uri, String localName, String qName,\n            Attributes atts)", "class_method_signature": "EmmaSemanticInterpretationExtractor.startElement(String uri, String localName, String qName,\n            Attributes atts)", "testcase": false, "constructor": false}, {"identifier": "endElement", "parameters": "(String uri, String localName, String qName)", "modifiers": "@Override public", "return": "void", "signature": "void endElement(String uri, String localName, String qName)", "full_signature": "@Override public void endElement(String uri, String localName, String qName)", "class_method_signature": "EmmaSemanticInterpretationExtractor.endElement(String uri, String localName, String qName)", "testcase": false, "constructor": false}, {"identifier": "addAssignment", "parameters": "(final String key, final String value)", "modifiers": "private", "return": "void", "signature": "void addAssignment(final String key, final String value)", "full_signature": "private void addAssignment(final String key, final String value)", "class_method_signature": "EmmaSemanticInterpretationExtractor.addAssignment(final String key, final String value)", "testcase": false, "constructor": false}, {"identifier": "getText", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getText()", "full_signature": "private String getText()", "class_method_signature": "EmmaSemanticInterpretationExtractor.getText()", "testcase": false, "constructor": false}, {"identifier": "evaluateInterpretations", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object evaluateInterpretations()", "full_signature": "private Object evaluateInterpretations()", "class_method_signature": "EmmaSemanticInterpretationExtractor.evaluateInterpretations()", "testcase": false, "constructor": false}, {"identifier": "evaluateAssignments", "parameters": "(final String variable)", "modifiers": "private", "return": "Object", "signature": "Object evaluateAssignments(final String variable)", "full_signature": "private Object evaluateAssignments(final String variable)", "class_method_signature": "EmmaSemanticInterpretationExtractor.evaluateAssignments(final String variable)", "testcase": false, "constructor": false}, {"identifier": "createObject", "parameters": "(final String variable)", "modifiers": "private", "return": "Object", "signature": "Object createObject(final String variable)", "full_signature": "private Object createObject(final String variable)", "class_method_signature": "EmmaSemanticInterpretationExtractor.createObject(final String variable)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(final String variable, final Object value)", "modifiers": "private", "return": "Object", "signature": "Object assign(final String variable, final Object value)", "full_signature": "private Object assign(final String variable, final Object value)", "class_method_signature": "EmmaSemanticInterpretationExtractor.assign(final String variable, final Object value)", "testcase": false, "constructor": false}, {"identifier": "characters", "parameters": "(char[] ch, int start, int length)", "modifiers": "@Override public", "return": "void", "signature": "void characters(char[] ch, int start, int length)", "full_signature": "@Override public void characters(char[] ch, int start, int length)", "class_method_signature": "EmmaSemanticInterpretationExtractor.characters(char[] ch, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "ignorableWhitespace", "parameters": "(char[] ch, int start, int length)", "modifiers": "@Override public", "return": "void", "signature": "void ignorableWhitespace(char[] ch, int start, int length)", "full_signature": "@Override public void ignorableWhitespace(char[] ch, int start, int length)", "class_method_signature": "EmmaSemanticInterpretationExtractor.ignorableWhitespace(char[] ch, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "processingInstruction", "parameters": "(String target, String data)", "modifiers": "@Override public", "return": "void", "signature": "void processingInstruction(String target, String data)", "full_signature": "@Override public void processingInstruction(String target, String data)", "class_method_signature": "EmmaSemanticInterpretationExtractor.processingInstruction(String target, String data)", "testcase": false, "constructor": false}, {"identifier": "skippedEntity", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void skippedEntity(String name)", "full_signature": "@Override public void skippedEntity(String name)", "class_method_signature": "EmmaSemanticInterpretationExtractor.skippedEntity(String name)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.callmanager.mmi/src/main/java/org/jvoicexml/callmanager/mmi/xml/EmmaSemanticInterpretationExtractor.java"}, "focal_method": {"identifier": "getRecognitonResult", "parameters": "()", "modifiers": "public", "return": "MMIRecognitionResult", "body": "public MMIRecognitionResult getRecognitonResult() {\n        return new MMIRecognitionResult(utterance, interpretation, confidence);\n    }", "signature": "MMIRecognitionResult getRecognitonResult()", "full_signature": "public MMIRecognitionResult getRecognitonResult()", "class_method_signature": "EmmaSemanticInterpretationExtractor.getRecognitonResult()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}