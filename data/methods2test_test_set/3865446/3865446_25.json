{"test_class": {"identifier": "SimpleGrayCodeBinaryRepresentationTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected SimpleGrayCodeBinaryRepresentation representation;", "modifier": "protected", "type": "SimpleGrayCodeBinaryRepresentation", "declarator": "representation", "var_name": "representation"}, {"original_string": "protected SimpleBinaryGenomeDescriptor descriptor;", "modifier": "protected", "type": "SimpleBinaryGenomeDescriptor", "declarator": "descriptor", "var_name": "descriptor"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/representations/genotype/SimpleGrayCodeBinaryRepresentationTest.java"}, "test_case": {"identifier": "testDecodeGenomeToBinary1", "parameters": "()", "modifiers": "@Test //tests correct conversion of multiple gray variables into binary notation public", "return": "void", "body": "@Test\n    //tests correct conversion of multiple gray variables into binary notation\n    public void testDecodeGenomeToBinary1(){\n        boolean[] gray = new boolean[]{\n                true, true, true, true, true, true,\n                true, true,\n                true, false, false, false,\n                false, false, false, true, false, true, false, true, false, true\n        };\n        assertEquals((6+2+4+10), gray.length);\n        this.representation.genome = gray;\n        boolean[] result = this.representation.decodeGenomeToBinary();\n\n        assertEquals((6+2+4+10), result.length);\n        boolean[] binary = new boolean[]{\n                true, false, true, false, true, false,\n                true, false,\n                true, true, true, true,\n                false, false, false, true, true, false, false, true, true, false\n        };\n        assertEquals(binary.length, result.length);\n        // Assert does not have assertArrayEquals for boolean[]...\n        for (int i = 0; i < binary.length; i++){\n            Assert.assertEquals(\"in step \" + i, binary[i], result[i]);\n        }\n    }", "signature": "void testDecodeGenomeToBinary1()", "full_signature": "@Test //tests correct conversion of multiple gray variables into binary notation public void testDecodeGenomeToBinary1()", "class_method_signature": "SimpleGrayCodeBinaryRepresentationTest.testDecodeGenomeToBinary1()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "decodeGenomeToBinary", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "SimpleGrayCodeBinaryRepresentation", "superclass": "extends SimpleBinaryRepresentation", "interfaces": "", "fields": [], "methods": [{"identifier": "SimpleGrayCodeBinaryRepresentation", "parameters": "(SimpleBinaryGenomeDescriptor descriptor)", "modifiers": "public", "return": "", "signature": " SimpleGrayCodeBinaryRepresentation(SimpleBinaryGenomeDescriptor descriptor)", "full_signature": "public  SimpleGrayCodeBinaryRepresentation(SimpleBinaryGenomeDescriptor descriptor)", "class_method_signature": "SimpleGrayCodeBinaryRepresentation.SimpleGrayCodeBinaryRepresentation(SimpleBinaryGenomeDescriptor descriptor)", "testcase": false, "constructor": true}, {"identifier": "SimpleGrayCodeBinaryRepresentation", "parameters": "(SimpleGrayCodeBinaryRepresentation second)", "modifiers": "public", "return": "", "signature": " SimpleGrayCodeBinaryRepresentation(SimpleGrayCodeBinaryRepresentation second)", "full_signature": "public  SimpleGrayCodeBinaryRepresentation(SimpleGrayCodeBinaryRepresentation second)", "class_method_signature": "SimpleGrayCodeBinaryRepresentation.SimpleGrayCodeBinaryRepresentation(SimpleGrayCodeBinaryRepresentation second)", "testcase": false, "constructor": true}, {"identifier": "decodeGenomeToBinary", "parameters": "()", "modifiers": "@Override protected", "return": "boolean[]", "signature": "boolean[] decodeGenomeToBinary()", "full_signature": "@Override protected boolean[] decodeGenomeToBinary()", "class_method_signature": "SimpleGrayCodeBinaryRepresentation.decodeGenomeToBinary()", "testcase": false, "constructor": false}, {"identifier": "encodeBinaryGenome", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void encodeBinaryGenome()", "full_signature": "@Override protected void encodeBinaryGenome()", "class_method_signature": "SimpleGrayCodeBinaryRepresentation.encodeBinaryGenome()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "@Override public", "return": "Representation", "signature": "Representation copy()", "full_signature": "@Override public Representation copy()", "class_method_signature": "SimpleGrayCodeBinaryRepresentation.copy()", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/representations/genotype/SimpleGrayCodeBinaryRepresentation.java"}, "focal_method": {"identifier": "decodeGenomeToBinary", "parameters": "()", "modifiers": "@Override protected", "return": "boolean[]", "body": "@Override\n    protected boolean[] decodeGenomeToBinary() {\n        boolean[] binaryGenome = new boolean[this.genome.length];\n        int index = 0; // index in entire genome; stored from MSB to LSB\n        for (int variable = 0; variable < this.descriptor.numVariables; variable++){\n            binaryGenome[index] = this.genome[index++]; // MSB bit of every variable is preserved\n            for (int i = 1; i < this.descriptor.variablesLengths[variable]; i++){\n                binaryGenome[index] = binaryGenome[index-1] ^ this.genome[index++];\n            }\n        }\n\n        return binaryGenome;\n    }", "signature": "boolean[] decodeGenomeToBinary()", "full_signature": "@Override protected boolean[] decodeGenomeToBinary()", "class_method_signature": "SimpleGrayCodeBinaryRepresentation.decodeGenomeToBinary()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}