{"test_class": {"identifier": "PopupPresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final boolean WITH_FLOURISH = true;", "modifier": "static final", "type": "boolean", "declarator": "WITH_FLOURISH = true", "var_name": "WITH_FLOURISH"}, {"original_string": "static final boolean WITHOUT_FLOURISH = false;", "modifier": "static final", "type": "boolean", "declarator": "WITHOUT_FLOURISH = false", "var_name": "WITHOUT_FLOURISH"}, {"original_string": "@Mock Popup<Parcelable, String> view;", "modifier": "@Mock", "type": "Popup<Parcelable, String>", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock Context context;", "modifier": "@Mock", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "MortarScope root;", "modifier": "", "type": "MortarScope", "declarator": "root", "var_name": "root"}, {"original_string": "MortarScope activityScope;", "modifier": "", "type": "MortarScope", "declarator": "activityScope", "var_name": "activityScope"}, {"original_string": "TestPopupPresenter presenter;", "modifier": "", "type": "TestPopupPresenter", "declarator": "presenter", "var_name": "presenter"}], "file": "mortar/src/test/java/mortar/PopupPresenterTest.java"}, "test_case": {"identifier": "takeViewDoesNotShowView", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void takeViewDoesNotShowView() {\n    presenter.takeView(view);\n    verify(view, never()).show(any(Parcelable.class), anyBoolean(), any(TestPopupPresenter.class));\n  }", "signature": "void takeViewDoesNotShowView()", "full_signature": "@Test public void takeViewDoesNotShowView()", "class_method_signature": "PopupPresenterTest.takeViewDoesNotShowView()", "testcase": true, "constructor": false, "invocations": ["takeView", "show", "verify", "never", "any", "anyBoolean", "any"]}, "focal_class": {"identifier": "PopupPresenter", "superclass": "extends Presenter<Popup<D, R>>", "interfaces": "", "fields": [{"original_string": "private static final boolean WITH_FLOURISH = true;", "modifier": "private static final", "type": "boolean", "declarator": "WITH_FLOURISH = true", "var_name": "WITH_FLOURISH"}, {"original_string": "private final String whatToShowKey;", "modifier": "private final", "type": "String", "declarator": "whatToShowKey", "var_name": "whatToShowKey"}, {"original_string": "private D whatToShow;", "modifier": "private", "type": "D", "declarator": "whatToShow", "var_name": "whatToShow"}], "methods": [{"identifier": "PopupPresenter", "parameters": "(String customStateKey)", "modifiers": "protected", "return": "", "signature": " PopupPresenter(String customStateKey)", "full_signature": "protected  PopupPresenter(String customStateKey)", "class_method_signature": "PopupPresenter.PopupPresenter(String customStateKey)", "testcase": false, "constructor": true}, {"identifier": "PopupPresenter", "parameters": "()", "modifiers": "protected", "return": "", "signature": " PopupPresenter()", "full_signature": "protected  PopupPresenter()", "class_method_signature": "PopupPresenter.PopupPresenter()", "testcase": false, "constructor": true}, {"identifier": "showing", "parameters": "()", "modifiers": "public", "return": "D", "signature": "D showing()", "full_signature": "public D showing()", "class_method_signature": "PopupPresenter.showing()", "testcase": false, "constructor": false}, {"identifier": "show", "parameters": "(D info)", "modifiers": "public", "return": "void", "signature": "void show(D info)", "full_signature": "public void show(D info)", "class_method_signature": "PopupPresenter.show(D info)", "testcase": false, "constructor": false}, {"identifier": "dismiss", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dismiss()", "full_signature": "public void dismiss()", "class_method_signature": "PopupPresenter.dismiss()", "testcase": false, "constructor": false}, {"identifier": "onDismissed", "parameters": "(R result)", "modifiers": "public final", "return": "void", "signature": "void onDismissed(R result)", "full_signature": "public final void onDismissed(R result)", "class_method_signature": "PopupPresenter.onDismissed(R result)", "testcase": false, "constructor": false}, {"identifier": "onPopupResult", "parameters": "(R result)", "modifiers": "abstract protected", "return": "void", "signature": "void onPopupResult(R result)", "full_signature": "abstract protected void onPopupResult(R result)", "class_method_signature": "PopupPresenter.onPopupResult(R result)", "testcase": false, "constructor": false}, {"identifier": "extractBundleService", "parameters": "(Popup<D, R> view)", "modifiers": "@Override protected", "return": "BundleService", "signature": "BundleService extractBundleService(Popup<D, R> view)", "full_signature": "@Override protected BundleService extractBundleService(Popup<D, R> view)", "class_method_signature": "PopupPresenter.extractBundleService(Popup<D, R> view)", "testcase": false, "constructor": false}, {"identifier": "dropView", "parameters": "(Popup<D, R> view)", "modifiers": "@Override public", "return": "void", "signature": "void dropView(Popup<D, R> view)", "full_signature": "@Override public void dropView(Popup<D, R> view)", "class_method_signature": "PopupPresenter.dropView(Popup<D, R> view)", "testcase": false, "constructor": false}, {"identifier": "onLoad", "parameters": "(Bundle savedInstanceState)", "modifiers": "@Override public", "return": "void", "signature": "void onLoad(Bundle savedInstanceState)", "full_signature": "@Override public void onLoad(Bundle savedInstanceState)", "class_method_signature": "PopupPresenter.onLoad(Bundle savedInstanceState)", "testcase": false, "constructor": false}, {"identifier": "onSave", "parameters": "(Bundle outState)", "modifiers": "@Override public", "return": "void", "signature": "void onSave(Bundle outState)", "full_signature": "@Override public void onSave(Bundle outState)", "class_method_signature": "PopupPresenter.onSave(Bundle outState)", "testcase": false, "constructor": false}, {"identifier": "onExitScope", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onExitScope()", "full_signature": "@Override public void onExitScope()", "class_method_signature": "PopupPresenter.onExitScope()", "testcase": false, "constructor": false}], "file": "mortar/src/main/java/mortar/PopupPresenter.java"}, "focal_method": {"identifier": "show", "parameters": "(D info)", "modifiers": "public", "return": "void", "body": "public void show(D info) {\n    if (whatToShow == info || whatToShow != null && whatToShow.equals(info)) {\n      // It's very likely this is a button bounce\n      // http://stackoverflow.com/questions/2886407/dealing-with-rapid-tapping-on-buttons\n      return;\n    }\n\n    whatToShow = info;\n    if (!hasView()) return;\n    getView().show(whatToShow, WITH_FLOURISH, this);\n  }", "signature": "void show(D info)", "full_signature": "public void show(D info)", "class_method_signature": "PopupPresenter.show(D info)", "testcase": false, "constructor": false, "invocations": ["equals", "hasView", "show", "getView"]}, "repository": {"repo_id": 14247776, "url": "https://github.com/square/mortar", "language": "Java", "is_fork": false, "fork_count": 172, "stargazer_count": 2189, "size": 884, "license": "licensed"}}