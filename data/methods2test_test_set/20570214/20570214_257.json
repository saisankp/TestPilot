{"test_class": {"identifier": "EngineFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/EngineFactoryTest.java"}, "test_case": {"identifier": "testIsReuseable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIsReuseable() throws Exception {\n    EngineFactory.CIPHER.getInstance(\"AES\");\n    EngineFactory.CIPHER.getInstance(\"AES\");\n    EngineFactory.CIPHER.getInstance(\"AES\");\n    // didn't throw\n  }", "signature": "void testIsReuseable()", "full_signature": "@Test public void testIsReuseable()", "class_method_signature": "EngineFactoryTest.testIsReuseable()", "testcase": true, "constructor": false, "invocations": ["getInstance", "getInstance", "getInstance"]}, "focal_class": {"identifier": "EngineFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(EngineFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(EngineFactory.class.getName())", "var_name": "logger"}, {"original_string": "private static final List<Provider> defaultPolicy;", "modifier": "private static final", "type": "List<Provider>", "declarator": "defaultPolicy", "var_name": "defaultPolicy"}, {"original_string": "private static final boolean DEFAULT_LET_FALLBACK = true;", "modifier": "private static final", "type": "boolean", "declarator": "DEFAULT_LET_FALLBACK = true", "var_name": "DEFAULT_LET_FALLBACK"}, {"original_string": "public static final EngineFactory<EngineWrapper.TCipher, Cipher> CIPHER =\n      new EngineFactory<>(new EngineWrapper.TCipher());", "modifier": "public static final", "type": "EngineFactory<EngineWrapper.TCipher, Cipher>", "declarator": "CIPHER =\n      new EngineFactory<>(new EngineWrapper.TCipher())", "var_name": "CIPHER"}, {"original_string": "public static final EngineFactory<EngineWrapper.TMac, Mac> MAC =\n      new EngineFactory<>(new EngineWrapper.TMac());", "modifier": "public static final", "type": "EngineFactory<EngineWrapper.TMac, Mac>", "declarator": "MAC =\n      new EngineFactory<>(new EngineWrapper.TMac())", "var_name": "MAC"}, {"original_string": "public static final EngineFactory<EngineWrapper.TSignature, Signature> SIGNATURE =\n      new EngineFactory<>(new EngineWrapper.TSignature());", "modifier": "public static final", "type": "EngineFactory<EngineWrapper.TSignature, Signature>", "declarator": "SIGNATURE =\n      new EngineFactory<>(new EngineWrapper.TSignature())", "var_name": "SIGNATURE"}, {"original_string": "public static final EngineFactory<EngineWrapper.TMessageDigest, MessageDigest> MESSAGE_DIGEST =\n      new EngineFactory<>(new EngineWrapper.TMessageDigest());", "modifier": "public static final", "type": "EngineFactory<EngineWrapper.TMessageDigest, MessageDigest>", "declarator": "MESSAGE_DIGEST =\n      new EngineFactory<>(new EngineWrapper.TMessageDigest())", "var_name": "MESSAGE_DIGEST"}, {"original_string": "public static final EngineFactory<EngineWrapper.TKeyAgreement, KeyAgreement> KEY_AGREEMENT =\n      new EngineFactory<>(new EngineWrapper.TKeyAgreement());", "modifier": "public static final", "type": "EngineFactory<EngineWrapper.TKeyAgreement, KeyAgreement>", "declarator": "KEY_AGREEMENT =\n      new EngineFactory<>(new EngineWrapper.TKeyAgreement())", "var_name": "KEY_AGREEMENT"}, {"original_string": "public static final EngineFactory<EngineWrapper.TKeyPairGenerator, KeyPairGenerator>\n      KEY_PAIR_GENERATOR = new EngineFactory<>(new EngineWrapper.TKeyPairGenerator());", "modifier": "public static final", "type": "EngineFactory<EngineWrapper.TKeyPairGenerator, KeyPairGenerator>", "declarator": "KEY_PAIR_GENERATOR = new EngineFactory<>(new EngineWrapper.TKeyPairGenerator())", "var_name": "KEY_PAIR_GENERATOR"}, {"original_string": "public static final EngineFactory<EngineWrapper.TKeyFactory, KeyFactory> KEY_FACTORY =\n      new EngineFactory<>(new EngineWrapper.TKeyFactory());", "modifier": "public static final", "type": "EngineFactory<EngineWrapper.TKeyFactory, KeyFactory>", "declarator": "KEY_FACTORY =\n      new EngineFactory<>(new EngineWrapper.TKeyFactory())", "var_name": "KEY_FACTORY"}, {"original_string": "private T_WRAPPER instanceBuilder;", "modifier": "private", "type": "T_WRAPPER", "declarator": "instanceBuilder", "var_name": "instanceBuilder"}, {"original_string": "private List<Provider> policy;", "modifier": "private", "type": "List<Provider>", "declarator": "policy", "var_name": "policy"}, {"original_string": "private boolean letFallback;", "modifier": "private", "type": "boolean", "declarator": "letFallback", "var_name": "letFallback"}], "methods": [{"identifier": "getCustomCipherProvider", "parameters": "(\n      boolean letFallbackToDefault, String... providerNames)", "modifiers": "public static final", "return": "EngineFactory<EngineWrapper.TCipher, Cipher>", "signature": "EngineFactory<EngineWrapper.TCipher, Cipher> getCustomCipherProvider(\n      boolean letFallbackToDefault, String... providerNames)", "full_signature": "public static final EngineFactory<EngineWrapper.TCipher, Cipher> getCustomCipherProvider(\n      boolean letFallbackToDefault, String... providerNames)", "class_method_signature": "EngineFactory.getCustomCipherProvider(\n      boolean letFallbackToDefault, String... providerNames)", "testcase": false, "constructor": false}, {"identifier": "getCustomMacProvider", "parameters": "(\n      boolean letFallbackToDefault, String... providerNames)", "modifiers": "public static final", "return": "EngineFactory<EngineWrapper.TMac, Mac>", "signature": "EngineFactory<EngineWrapper.TMac, Mac> getCustomMacProvider(\n      boolean letFallbackToDefault, String... providerNames)", "full_signature": "public static final EngineFactory<EngineWrapper.TMac, Mac> getCustomMacProvider(\n      boolean letFallbackToDefault, String... providerNames)", "class_method_signature": "EngineFactory.getCustomMacProvider(\n      boolean letFallbackToDefault, String... providerNames)", "testcase": false, "constructor": false}, {"identifier": "getCustomSignatureProvider", "parameters": "(\n      boolean letFallbackToDefault, String... providerNames)", "modifiers": "public static final", "return": "EngineFactory<EngineWrapper.TSignature, Signature>", "signature": "EngineFactory<EngineWrapper.TSignature, Signature> getCustomSignatureProvider(\n      boolean letFallbackToDefault, String... providerNames)", "full_signature": "public static final EngineFactory<EngineWrapper.TSignature, Signature> getCustomSignatureProvider(\n      boolean letFallbackToDefault, String... providerNames)", "class_method_signature": "EngineFactory.getCustomSignatureProvider(\n      boolean letFallbackToDefault, String... providerNames)", "testcase": false, "constructor": false}, {"identifier": "getCustomMessageDigestProvider", "parameters": "(boolean letFallbackToDefault, String... providerNames)", "modifiers": "public static final", "return": "EngineFactory<EngineWrapper.TMessageDigest, MessageDigest>", "signature": "EngineFactory<EngineWrapper.TMessageDigest, MessageDigest> getCustomMessageDigestProvider(boolean letFallbackToDefault, String... providerNames)", "full_signature": "public static final EngineFactory<EngineWrapper.TMessageDigest, MessageDigest> getCustomMessageDigestProvider(boolean letFallbackToDefault, String... providerNames)", "class_method_signature": "EngineFactory.getCustomMessageDigestProvider(boolean letFallbackToDefault, String... providerNames)", "testcase": false, "constructor": false}, {"identifier": "getCustomKeyAgreementProvider", "parameters": "(boolean letFallbackToDefault, String... providerNames)", "modifiers": "public static final", "return": "EngineFactory<EngineWrapper.TKeyAgreement, KeyAgreement>", "signature": "EngineFactory<EngineWrapper.TKeyAgreement, KeyAgreement> getCustomKeyAgreementProvider(boolean letFallbackToDefault, String... providerNames)", "full_signature": "public static final EngineFactory<EngineWrapper.TKeyAgreement, KeyAgreement> getCustomKeyAgreementProvider(boolean letFallbackToDefault, String... providerNames)", "class_method_signature": "EngineFactory.getCustomKeyAgreementProvider(boolean letFallbackToDefault, String... providerNames)", "testcase": false, "constructor": false}, {"identifier": "getCustomKeyPairGeneratorProvider", "parameters": "(boolean letFallbackToDefault, String... providerNames)", "modifiers": "public static final", "return": "EngineFactory<EngineWrapper.TKeyPairGenerator, KeyPairGenerator>", "signature": "EngineFactory<EngineWrapper.TKeyPairGenerator, KeyPairGenerator> getCustomKeyPairGeneratorProvider(boolean letFallbackToDefault, String... providerNames)", "full_signature": "public static final EngineFactory<EngineWrapper.TKeyPairGenerator, KeyPairGenerator> getCustomKeyPairGeneratorProvider(boolean letFallbackToDefault, String... providerNames)", "class_method_signature": "EngineFactory.getCustomKeyPairGeneratorProvider(boolean letFallbackToDefault, String... providerNames)", "testcase": false, "constructor": false}, {"identifier": "getCustomKeyFactoryProvider", "parameters": "(boolean letFallbackToDefault, String... providerNames)", "modifiers": "public static final", "return": "EngineFactory<EngineWrapper.TKeyFactory, KeyFactory>", "signature": "EngineFactory<EngineWrapper.TKeyFactory, KeyFactory> getCustomKeyFactoryProvider(boolean letFallbackToDefault, String... providerNames)", "full_signature": "public static final EngineFactory<EngineWrapper.TKeyFactory, KeyFactory> getCustomKeyFactoryProvider(boolean letFallbackToDefault, String... providerNames)", "class_method_signature": "EngineFactory.getCustomKeyFactoryProvider(boolean letFallbackToDefault, String... providerNames)", "testcase": false, "constructor": false}, {"identifier": "toProviderList", "parameters": "(String... providerNames)", "modifiers": "public static", "return": "List<Provider>", "signature": "List<Provider> toProviderList(String... providerNames)", "full_signature": "public static List<Provider> toProviderList(String... providerNames)", "class_method_signature": "EngineFactory.toProviderList(String... providerNames)", "testcase": false, "constructor": false}, {"identifier": "EngineFactory", "parameters": "(T_WRAPPER instanceBuilder)", "modifiers": "public", "return": "", "signature": " EngineFactory(T_WRAPPER instanceBuilder)", "full_signature": "public  EngineFactory(T_WRAPPER instanceBuilder)", "class_method_signature": "EngineFactory.EngineFactory(T_WRAPPER instanceBuilder)", "testcase": false, "constructor": true}, {"identifier": "EngineFactory", "parameters": "(T_WRAPPER instanceBuilder, List<Provider> policy)", "modifiers": "public", "return": "", "signature": " EngineFactory(T_WRAPPER instanceBuilder, List<Provider> policy)", "full_signature": "public  EngineFactory(T_WRAPPER instanceBuilder, List<Provider> policy)", "class_method_signature": "EngineFactory.EngineFactory(T_WRAPPER instanceBuilder, List<Provider> policy)", "testcase": false, "constructor": true}, {"identifier": "EngineFactory", "parameters": "(T_WRAPPER instanceBuilder, List<Provider> policy, boolean letFallback)", "modifiers": "public", "return": "", "signature": " EngineFactory(T_WRAPPER instanceBuilder, List<Provider> policy, boolean letFallback)", "full_signature": "public  EngineFactory(T_WRAPPER instanceBuilder, List<Provider> policy, boolean letFallback)", "class_method_signature": "EngineFactory.EngineFactory(T_WRAPPER instanceBuilder, List<Provider> policy, boolean letFallback)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(String algorithm)", "modifiers": "public", "return": "T_ENGINE", "signature": "T_ENGINE getInstance(String algorithm)", "full_signature": "public T_ENGINE getInstance(String algorithm)", "class_method_signature": "EngineFactory.getInstance(String algorithm)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/EngineFactory.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(String algorithm)", "modifiers": "public", "return": "T_ENGINE", "body": "public T_ENGINE getInstance(String algorithm) throws GeneralSecurityException {\n    Exception cause = null;\n    for (Provider provider : this.policy) {\n      try {\n        return this.instanceBuilder.getInstance(algorithm, provider);\n      } catch (Exception e) {\n        if (cause == null) {\n          cause = e;\n        }\n      }\n    }\n    if (letFallback) {\n      return this.instanceBuilder.getInstance(algorithm, null);\n    }\n    throw new GeneralSecurityException(\"No good Provider found.\", cause);\n  }", "signature": "T_ENGINE getInstance(String algorithm)", "full_signature": "public T_ENGINE getInstance(String algorithm)", "class_method_signature": "EngineFactory.getInstance(String algorithm)", "testcase": false, "constructor": false, "invocations": ["getInstance", "getInstance"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}