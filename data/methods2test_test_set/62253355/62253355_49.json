{"test_class": {"identifier": "DefaultValueConverterRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected ValueFactory valueFactory = new ValueFactoryService();", "modifier": "protected", "type": "ValueFactory", "declarator": "valueFactory = new ValueFactoryService()", "var_name": "valueFactory"}], "file": "rdf-orm/com.mobi.rdf.orm/src/test/java/com/mobi/rdf/orm/conversion/impl/DefaultValueConverterRegistryTest.java"}, "test_case": {"identifier": "testBoxify", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBoxify() {\n        TestCase.assertEquals(Integer.class, DefaultValueConverterRegistry.boxify(int.class));\n        TestCase.assertEquals(Byte.class, DefaultValueConverterRegistry.boxify(byte.class));\n        TestCase.assertEquals(Short.class, DefaultValueConverterRegistry.boxify(short.class));\n        TestCase.assertEquals(Long.class, DefaultValueConverterRegistry.boxify(long.class));\n        TestCase.assertEquals(Double.class, DefaultValueConverterRegistry.boxify(double.class));\n        TestCase.assertEquals(Float.class, DefaultValueConverterRegistry.boxify(float.class));\n        TestCase.assertEquals(Boolean.class, DefaultValueConverterRegistry.boxify(boolean.class));\n        TestCase.assertEquals(Character.class, DefaultValueConverterRegistry.boxify(char.class));\n    }", "signature": "void testBoxify()", "full_signature": "@Test public void testBoxify()", "class_method_signature": "DefaultValueConverterRegistryTest.testBoxify()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "boxify", "assertEquals", "boxify", "assertEquals", "boxify", "assertEquals", "boxify", "assertEquals", "boxify", "assertEquals", "boxify", "assertEquals", "boxify", "assertEquals", "boxify"]}, "focal_class": {"identifier": "DefaultValueConverterRegistry", "superclass": "", "interfaces": "implements ValueConverterRegistry", "fields": [{"original_string": "private static final ForkJoinPool JOIN_POOL = new ForkJoinPool(Runtime.getRuntime().availableProcessors());", "modifier": "private static final", "type": "ForkJoinPool", "declarator": "JOIN_POOL = new ForkJoinPool(Runtime.getRuntime().availableProcessors())", "var_name": "JOIN_POOL"}, {"original_string": "private static final Map<Class<?>, Class<?>> boxifyMap = new HashMap<>();", "modifier": "private static final", "type": "Map<Class<?>, Class<?>>", "declarator": "boxifyMap = new HashMap<>()", "var_name": "boxifyMap"}, {"original_string": "private final Map<Class<?>, List<ValueConverter<?>>> registry = new HashMap<>();", "modifier": "private final", "type": "Map<Class<?>, List<ValueConverter<?>>>", "declarator": "registry = new HashMap<>()", "var_name": "registry"}], "methods": [{"identifier": "boxify", "parameters": "(final Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") protected static", "return": "Class<T>", "signature": "Class<T> boxify(final Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") protected static Class<T> boxify(final Class<T> type)", "class_method_signature": "DefaultValueConverterRegistry.boxify(final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "convertValue", "parameters": "(final Value value, final Thing thing, final Class<T> desiredType)", "modifiers": "@Override public", "return": "T", "signature": "T convertValue(final Value value, final Thing thing, final Class<T> desiredType)", "full_signature": "@Override public T convertValue(final Value value, final Thing thing, final Class<T> desiredType)", "class_method_signature": "DefaultValueConverterRegistry.convertValue(final Value value, final Thing thing, final Class<T> desiredType)", "testcase": false, "constructor": false}, {"identifier": "convertType", "parameters": "(T type, Thing thing)", "modifiers": "@Override public", "return": "Value", "signature": "Value convertType(T type, Thing thing)", "full_signature": "@Override public Value convertType(T type, Thing thing)", "class_method_signature": "DefaultValueConverterRegistry.convertType(T type, Thing thing)", "testcase": false, "constructor": false}, {"identifier": "convertValues", "parameters": "(Set<Value> values, Thing thing, Class<T> desiredType)", "modifiers": "@Override public", "return": "Set<T>", "signature": "Set<T> convertValues(Set<Value> values, Thing thing, Class<T> desiredType)", "full_signature": "@Override public Set<T> convertValues(Set<Value> values, Thing thing, Class<T> desiredType)", "class_method_signature": "DefaultValueConverterRegistry.convertValues(Set<Value> values, Thing thing, Class<T> desiredType)", "testcase": false, "constructor": false}, {"identifier": "convertTypes", "parameters": "(Set<T> types, Thing thing)", "modifiers": "@Override public", "return": "Set<Value>", "signature": "Set<Value> convertTypes(Set<T> types, Thing thing)", "full_signature": "@Override public Set<Value> convertTypes(Set<T> types, Thing thing)", "class_method_signature": "DefaultValueConverterRegistry.convertTypes(Set<T> types, Thing thing)", "testcase": false, "constructor": false}, {"identifier": "getValueConverter", "parameters": "(final Class<T> type)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "ValueConverter<T>", "signature": "ValueConverter<T> getValueConverter(final Class<T> type)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public ValueConverter<T> getValueConverter(final Class<T> type)", "class_method_signature": "DefaultValueConverterRegistry.getValueConverter(final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "registerValueConverter", "parameters": "(final ValueConverter<T> converter)", "modifiers": "@Override @Reference(multiple = true, dynamic = true, unbind = \"unregisterValueConverter\") public", "return": "void", "signature": "void registerValueConverter(final ValueConverter<T> converter)", "full_signature": "@Override @Reference(multiple = true, dynamic = true, unbind = \"unregisterValueConverter\") public void registerValueConverter(final ValueConverter<T> converter)", "class_method_signature": "DefaultValueConverterRegistry.registerValueConverter(final ValueConverter<T> converter)", "testcase": false, "constructor": false}, {"identifier": "unregisterValueConverter", "parameters": "(final ValueConverter<T> converter)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterValueConverter(final ValueConverter<T> converter)", "full_signature": "@Override public void unregisterValueConverter(final ValueConverter<T> converter)", "class_method_signature": "DefaultValueConverterRegistry.unregisterValueConverter(final ValueConverter<T> converter)", "testcase": false, "constructor": false}], "file": "rdf-orm/com.mobi.rdf.orm/src/main/java/com/mobi/rdf/orm/conversion/impl/DefaultValueConverterRegistry.java"}, "focal_method": {"identifier": "boxify", "parameters": "(final Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") protected static", "return": "Class<T>", "body": "@SuppressWarnings(\"unchecked\")\n    protected static <T> Class<T> boxify(final Class<T> type) {\n        if (type.isPrimitive() && boxifyMap.containsKey(type)) {\n            return (Class<T>) boxifyMap.get(type);\n        } else {\n            return type;\n        }\n    }", "signature": "Class<T> boxify(final Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") protected static Class<T> boxify(final Class<T> type)", "class_method_signature": "DefaultValueConverterRegistry.boxify(final Class<T> type)", "testcase": false, "constructor": false, "invocations": ["isPrimitive", "containsKey", "get"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}