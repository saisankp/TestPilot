{"test_class": {"identifier": "AsyncWorkItemHandlerTest", "superclass": "extends AbstractExecutorBaseTest", "interfaces": "", "fields": [{"original_string": "private PoolingDataSourceWrapper pds;", "modifier": "private", "type": "PoolingDataSourceWrapper", "declarator": "pds", "var_name": "pds"}, {"original_string": "private UserGroupCallback userGroupCallback;", "modifier": "private", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}, {"original_string": "private RuntimeManager manager;", "modifier": "private", "type": "RuntimeManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private EntityManagerFactory emf = null;", "modifier": "private", "type": "EntityManagerFactory", "declarator": "emf = null", "var_name": "emf"}, {"original_string": "private EntityManagerFactory emfErrors = null;", "modifier": "private", "type": "EntityManagerFactory", "declarator": "emfErrors = null", "var_name": "emfErrors"}], "file": "jbpm-services/jbpm-executor/src/test/java/org/jbpm/executor/impl/wih/AsyncWorkItemHandlerTest.java"}, "test_case": {"identifier": "testRunProcessWithAsyncHandlerDuplicatedRegister", "parameters": "()", "modifiers": "@Test(timeout=10000) public", "return": "void", "body": "@Test(timeout=10000)\n    public void testRunProcessWithAsyncHandlerDuplicatedRegister() throws Exception {\n        final NodeLeftCountDownProcessEventListener countDownListener = new NodeLeftCountDownProcessEventListener(\"Task 1\", 1);\n        RuntimeEnvironment environment = RuntimeEnvironmentBuilder.Factory.get().newDefaultBuilder()\n                .userGroupCallback(userGroupCallback)\n                .addAsset(ResourceFactory.newClassPathResource(\"BPMN2-ScriptTask.bpmn2\"), ResourceType.BPMN2)\n                .registerableItemsFactory(new DefaultRegisterableItemsFactory() {\n\n                    @Override\n                    public Map<String, WorkItemHandler> getWorkItemHandlers(RuntimeEngine runtime) {\n\n                        Map<String, WorkItemHandler> handlers = super.getWorkItemHandlers(runtime);\n                        handlers.put(\"async\", new AsyncWorkItemHandler(executorService, \"org.jbpm.executor.commands.PrintOutCommand\"));\n                        return handlers;\n                    }\n                    @Override\n                    public List<ProcessEventListener> getProcessEventListeners( RuntimeEngine runtime) {\n                        List<ProcessEventListener> listeners = super.getProcessEventListeners(runtime);\n                        listeners.add(countDownListener);\n                        return listeners;\n                    }\n                })\n                .get();\n        \n        manager = RuntimeManagerFactory.Factory.get().newSingletonRuntimeManager(environment); \n        assertNotNull(manager);\n        \n        RuntimeEngine runtime = manager.getRuntimeEngine(EmptyContext.get());\n        KieSession ksession = runtime.getKieSession();\n        assertNotNull(ksession);       \n        \n        ProcessInstance processInstance = ksession.startProcess(\"ScriptTask\");\n        assertEquals(ProcessInstance.STATE_ACTIVE, processInstance.getState());\n        \n        countDownListener.waitTillCompleted();\n        \n        processInstance = runtime.getKieSession().getProcessInstance(processInstance.getId());\n        assertNull(processInstance);\n        \n        manager.close();\n        \n        manager = RuntimeManagerFactory.Factory.get().newSingletonRuntimeManager(environment);\n\n    }", "signature": "void testRunProcessWithAsyncHandlerDuplicatedRegister()", "full_signature": "@Test(timeout=10000) public void testRunProcessWithAsyncHandlerDuplicatedRegister()", "class_method_signature": "AsyncWorkItemHandlerTest.testRunProcessWithAsyncHandlerDuplicatedRegister()", "testcase": true, "constructor": false, "invocations": ["get", "registerableItemsFactory", "addAsset", "userGroupCallback", "newDefaultBuilder", "get", "newClassPathResource", "getWorkItemHandlers", "put", "getProcessEventListeners", "add", "newSingletonRuntimeManager", "get", "assertNotNull", "getRuntimeEngine", "get", "getKieSession", "assertNotNull", "startProcess", "assertEquals", "getState", "waitTillCompleted", "getProcessInstance", "getKieSession", "getId", "assertNull", "close", "newSingletonRuntimeManager", "get"]}, "focal_class": {"identifier": "AsyncWorkItemHandler", "superclass": "", "interfaces": "implements WorkItemHandler, Cacheable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AsyncWorkItemHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AsyncWorkItemHandler.class)", "var_name": "logger"}, {"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private String commandClass;", "modifier": "private", "type": "String", "declarator": "commandClass", "var_name": "commandClass"}], "methods": [{"identifier": "AsyncWorkItemHandler", "parameters": "(ExecutorService executorService)", "modifiers": "public", "return": "", "signature": " AsyncWorkItemHandler(ExecutorService executorService)", "full_signature": "public  AsyncWorkItemHandler(ExecutorService executorService)", "class_method_signature": "AsyncWorkItemHandler.AsyncWorkItemHandler(ExecutorService executorService)", "testcase": false, "constructor": true}, {"identifier": "AsyncWorkItemHandler", "parameters": "(ExecutorService executorService, String commandClass)", "modifiers": "public", "return": "", "signature": " AsyncWorkItemHandler(ExecutorService executorService, String commandClass)", "full_signature": "public  AsyncWorkItemHandler(ExecutorService executorService, String commandClass)", "class_method_signature": "AsyncWorkItemHandler.AsyncWorkItemHandler(ExecutorService executorService, String commandClass)", "testcase": false, "constructor": true}, {"identifier": "AsyncWorkItemHandler", "parameters": "(Object executorService, String commandClass)", "modifiers": "public", "return": "", "signature": " AsyncWorkItemHandler(Object executorService, String commandClass)", "full_signature": "public  AsyncWorkItemHandler(Object executorService, String commandClass)", "class_method_signature": "AsyncWorkItemHandler.AsyncWorkItemHandler(Object executorService, String commandClass)", "testcase": false, "constructor": true}, {"identifier": "executeWorkItem", "parameters": "(WorkItem workItem, WorkItemManager manager)", "modifiers": "@Override public", "return": "void", "signature": "void executeWorkItem(WorkItem workItem, WorkItemManager manager)", "full_signature": "@Override public void executeWorkItem(WorkItem workItem, WorkItemManager manager)", "class_method_signature": "AsyncWorkItemHandler.executeWorkItem(WorkItem workItem, WorkItemManager manager)", "testcase": false, "constructor": false}, {"identifier": "abortWorkItem", "parameters": "(WorkItem workItem, WorkItemManager manager)", "modifiers": "@Override public", "return": "void", "signature": "void abortWorkItem(WorkItem workItem, WorkItemManager manager)", "full_signature": "@Override public void abortWorkItem(WorkItem workItem, WorkItemManager manager)", "class_method_signature": "AsyncWorkItemHandler.abortWorkItem(WorkItem workItem, WorkItemManager manager)", "testcase": false, "constructor": false}, {"identifier": "buildBusinessKey", "parameters": "(WorkItem workItem)", "modifiers": "protected", "return": "String", "signature": "String buildBusinessKey(WorkItem workItem)", "full_signature": "protected String buildBusinessKey(WorkItem workItem)", "class_method_signature": "AsyncWorkItemHandler.buildBusinessKey(WorkItem workItem)", "testcase": false, "constructor": false}, {"identifier": "getProcessInstanceId", "parameters": "(WorkItem workItem)", "modifiers": "protected", "return": "long", "signature": "long getProcessInstanceId(WorkItem workItem)", "full_signature": "protected long getProcessInstanceId(WorkItem workItem)", "class_method_signature": "AsyncWorkItemHandler.getProcessInstanceId(WorkItem workItem)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AsyncWorkItemHandler.close()", "testcase": false, "constructor": false}], "file": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/impl/wih/AsyncWorkItemHandler.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void close() {\n        //no-op\n    }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AsyncWorkItemHandler.close()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}