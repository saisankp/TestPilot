{"test_class": {"identifier": "StringsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Locale TURKEY_LOCALE = getTurkeyLocale();", "modifier": "private static final", "type": "Locale", "declarator": "TURKEY_LOCALE = getTurkeyLocale()", "var_name": "TURKEY_LOCALE"}, {"original_string": "private Locale defaultLocale;", "modifier": "private", "type": "Locale", "declarator": "defaultLocale", "var_name": "defaultLocale"}], "file": "processor/src/test/java/org/mapstruct/ap/internal/util/StringsTest.java"}, "test_case": {"identifier": "capitalizeTurkish", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void capitalizeTurkish() {\n        Locale.setDefault( TURKEY_LOCALE );\n        String international = Strings.capitalize( \"international\" );\n        assertThat( international ).isEqualTo( \"International\" );\n    }", "signature": "void capitalizeTurkish()", "full_signature": "@Test public void capitalizeTurkish()", "class_method_signature": "StringsTest.capitalizeTurkish()", "testcase": true, "constructor": false, "invocations": ["setDefault", "capitalize", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "Strings", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> KEYWORDS = asSet(\n        \"abstract\",\n        \"continue\",\n        \"for\",\n        \"new\",\n        \"switch\",\n        \"assert\",\n        \"default\",\n        \"goto\",\n        \"package\",\n        \"synchronized\",\n        \"boolean\",\n        \"do\",\n        \"if\",\n        \"private\",\n        \"this\",\n        \"break\",\n        \"double\",\n        \"implements\",\n        \"protected\",\n        \"throw\",\n        \"byte\",\n        \"else\",\n        \"import\",\n        \"public\",\n        \"throws\",\n        \"case\",\n        \"enum\",\n        \"instanceof\",\n        \"return\",\n        \"transient\",\n        \"catch\",\n        \"extends\",\n        \"int\",\n        \"short\",\n        \"try\",\n        \"char\",\n        \"final\",\n        \"interface\",\n        \"static\",\n        \"void\",\n        \"class\",\n        \"finally\",\n        \"long\",\n        \"strictfp\",\n        \"volatile\",\n        \"const\",\n        \"float\",\n        \"native\",\n        \"super\",\n        \"while\"\n    );", "modifier": "private static final", "type": "Set<String>", "declarator": "KEYWORDS = asSet(\n        \"abstract\",\n        \"continue\",\n        \"for\",\n        \"new\",\n        \"switch\",\n        \"assert\",\n        \"default\",\n        \"goto\",\n        \"package\",\n        \"synchronized\",\n        \"boolean\",\n        \"do\",\n        \"if\",\n        \"private\",\n        \"this\",\n        \"break\",\n        \"double\",\n        \"implements\",\n        \"protected\",\n        \"throw\",\n        \"byte\",\n        \"else\",\n        \"import\",\n        \"public\",\n        \"throws\",\n        \"case\",\n        \"enum\",\n        \"instanceof\",\n        \"return\",\n        \"transient\",\n        \"catch\",\n        \"extends\",\n        \"int\",\n        \"short\",\n        \"try\",\n        \"char\",\n        \"final\",\n        \"interface\",\n        \"static\",\n        \"void\",\n        \"class\",\n        \"finally\",\n        \"long\",\n        \"strictfp\",\n        \"volatile\",\n        \"const\",\n        \"float\",\n        \"native\",\n        \"super\",\n        \"while\"\n    )", "var_name": "KEYWORDS"}, {"original_string": "private static final char UNDERSCORE = '_';", "modifier": "private static final", "type": "char", "declarator": "UNDERSCORE = '_'", "var_name": "UNDERSCORE"}], "methods": [{"identifier": "Strings", "parameters": "()", "modifiers": "private", "return": "", "signature": " Strings()", "full_signature": "private  Strings()", "class_method_signature": "Strings.Strings()", "testcase": false, "constructor": true}, {"identifier": "capitalize", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String capitalize(String string)", "full_signature": "public static String capitalize(String string)", "class_method_signature": "Strings.capitalize(String string)", "testcase": false, "constructor": false}, {"identifier": "decapitalize", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String decapitalize(String string)", "full_signature": "public static String decapitalize(String string)", "class_method_signature": "Strings.decapitalize(String string)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Iterable<?> iterable, String separator)", "modifiers": "public static", "return": "String", "signature": "String join(Iterable<?> iterable, String separator)", "full_signature": "public static String join(Iterable<?> iterable, String separator)", "class_method_signature": "Strings.join(Iterable<?> iterable, String separator)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Iterable<T> iterable, String separator, Extractor<T, String> extractor)", "modifiers": "public static", "return": "String", "signature": "String join(Iterable<T> iterable, String separator, Extractor<T, String> extractor)", "full_signature": "public static String join(Iterable<T> iterable, String separator, Extractor<T, String> extractor)", "class_method_signature": "Strings.join(Iterable<T> iterable, String separator, Extractor<T, String> extractor)", "testcase": false, "constructor": false}, {"identifier": "joinAndCamelize", "parameters": "(Iterable<?> iterable)", "modifiers": "public static", "return": "String", "signature": "String joinAndCamelize(Iterable<?> iterable)", "full_signature": "public static String joinAndCamelize(Iterable<?> iterable)", "class_method_signature": "Strings.joinAndCamelize(Iterable<?> iterable)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(String string)", "full_signature": "public static boolean isEmpty(String string)", "class_method_signature": "Strings.isEmpty(String string)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(String string)", "full_signature": "public static boolean isNotEmpty(String string)", "class_method_signature": "Strings.isNotEmpty(String string)", "testcase": false, "constructor": false}, {"identifier": "getSafeVariableName", "parameters": "(String name, String... existingVariableNames)", "modifiers": "public static", "return": "String", "signature": "String getSafeVariableName(String name, String... existingVariableNames)", "full_signature": "public static String getSafeVariableName(String name, String... existingVariableNames)", "class_method_signature": "Strings.getSafeVariableName(String name, String... existingVariableNames)", "testcase": false, "constructor": false}, {"identifier": "getSafeVariableName", "parameters": "(String name, Collection<String> existingVariableNames)", "modifiers": "public static", "return": "String", "signature": "String getSafeVariableName(String name, Collection<String> existingVariableNames)", "full_signature": "public static String getSafeVariableName(String name, Collection<String> existingVariableNames)", "class_method_signature": "Strings.getSafeVariableName(String name, Collection<String> existingVariableNames)", "testcase": false, "constructor": false}, {"identifier": "sanitizeIdentifierName", "parameters": "(String identifier)", "modifiers": "public static", "return": "String", "signature": "String sanitizeIdentifierName(String identifier)", "full_signature": "public static String sanitizeIdentifierName(String identifier)", "class_method_signature": "Strings.sanitizeIdentifierName(String identifier)", "testcase": false, "constructor": false}, {"identifier": "stubPropertyName", "parameters": "(String fullyQualifiedName)", "modifiers": "public static", "return": "String", "signature": "String stubPropertyName(String fullyQualifiedName)", "full_signature": "public static String stubPropertyName(String fullyQualifiedName)", "class_method_signature": "Strings.stubPropertyName(String fullyQualifiedName)", "testcase": false, "constructor": false}, {"identifier": "extractParts", "parameters": "(String name)", "modifiers": "static", "return": "Iterable<String>", "signature": "Iterable<String> extractParts(String name)", "full_signature": "static Iterable<String> extractParts(String name)", "class_method_signature": "Strings.extractParts(String name)", "testcase": false, "constructor": false}, {"identifier": "getMostSimilarWord", "parameters": "(String word, Collection<String> similarWords)", "modifiers": "public static", "return": "String", "signature": "String getMostSimilarWord(String word, Collection<String> similarWords)", "full_signature": "public static String getMostSimilarWord(String word, Collection<String> similarWords)", "class_method_signature": "Strings.getMostSimilarWord(String word, Collection<String> similarWords)", "testcase": false, "constructor": false}, {"identifier": "levenshteinDistance", "parameters": "(String s, String t)", "modifiers": "private static", "return": "int", "signature": "int levenshteinDistance(String s, String t)", "full_signature": "private static int levenshteinDistance(String s, String t)", "class_method_signature": "Strings.levenshteinDistance(String s, String t)", "testcase": false, "constructor": false}], "file": "processor/src/main/java/org/mapstruct/ap/internal/util/Strings.java"}, "focal_method": {"identifier": "capitalize", "parameters": "(String string)", "modifiers": "public static", "return": "String", "body": "public static String capitalize(String string) {\n        return string == null ? null : string.substring( 0, 1 ).toUpperCase( Locale.ROOT ) + string.substring( 1 );\n    }", "signature": "String capitalize(String string)", "full_signature": "public static String capitalize(String string)", "class_method_signature": "Strings.capitalize(String string)", "testcase": false, "constructor": false, "invocations": ["toUpperCase", "substring", "substring"]}, "repository": {"repo_id": 4470435, "url": "https://github.com/mapstruct/mapstruct", "stars": 2319, "created": "5/28/2012 12:42:42 PM +00:00", "updates": "2020-01-27T19:16:09+00:00", "fork": "False", "license": "licensed"}}