{"test_class": {"identifier": "IgnoreMissingValuesConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "JavaElasticSearchExperiment/src/test/java/csv/converter/IgnoreMissingValuesConverterTest.java"}, "test_case": {"identifier": "returns_null_if_value_is_missing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void returns_null_if_value_is_missing() throws Exception {\n\n        IgnoreMissingValuesConverter converter = new IgnoreMissingValuesConverter(\"M\", \"m\");\n\n        Assert.assertEquals(null, converter.convert(\"\"));\n        Assert.assertEquals(null, converter.convert(\"M\"));\n        Assert.assertEquals(null, converter.convert(\"m\"));\n\n        Assert.assertEquals(1.0f, converter.convert(\"1.0\"), 1e-3);\n    }", "signature": "void returns_null_if_value_is_missing()", "full_signature": "@Test public void returns_null_if_value_is_missing()", "class_method_signature": "IgnoreMissingValuesConverterTest.returns_null_if_value_is_missing()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "convert", "assertEquals", "convert", "assertEquals", "convert", "assertEquals", "convert"]}, "focal_class": {"identifier": "IgnoreMissingValuesConverter", "superclass": "", "interfaces": "implements ITypeConverter<Float>", "fields": [{"original_string": "private List<String> missingValueRepresentation;", "modifier": "private", "type": "List<String>", "declarator": "missingValueRepresentation", "var_name": "missingValueRepresentation"}], "methods": [{"identifier": "IgnoreMissingValuesConverter", "parameters": "(String... missingValueRepresentation)", "modifiers": "public", "return": "", "signature": " IgnoreMissingValuesConverter(String... missingValueRepresentation)", "full_signature": "public  IgnoreMissingValuesConverter(String... missingValueRepresentation)", "class_method_signature": "IgnoreMissingValuesConverter.IgnoreMissingValuesConverter(String... missingValueRepresentation)", "testcase": false, "constructor": true}, {"identifier": "IgnoreMissingValuesConverter", "parameters": "(List<String> missingValueRepresentation)", "modifiers": "public", "return": "", "signature": " IgnoreMissingValuesConverter(List<String> missingValueRepresentation)", "full_signature": "public  IgnoreMissingValuesConverter(List<String> missingValueRepresentation)", "class_method_signature": "IgnoreMissingValuesConverter.IgnoreMissingValuesConverter(List<String> missingValueRepresentation)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(final String s)", "modifiers": "@Override public", "return": "Float", "signature": "Float convert(final String s)", "full_signature": "@Override public Float convert(final String s)", "class_method_signature": "IgnoreMissingValuesConverter.convert(final String s)", "testcase": false, "constructor": false}, {"identifier": "getTargetType", "parameters": "()", "modifiers": "@Override public", "return": "Type", "signature": "Type getTargetType()", "full_signature": "@Override public Type getTargetType()", "class_method_signature": "IgnoreMissingValuesConverter.getTargetType()", "testcase": false, "constructor": false}], "file": "JavaElasticSearchExperiment/src/main/java/csv/converter/IgnoreMissingValuesConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(final String s)", "modifiers": "@Override public", "return": "Float", "body": "@Override\n    public Float convert(final String s) {\n\n        if(StringUtils.isNullOrWhiteSpace(s)) {\n            return null;\n        }\n\n        boolean isMissingValue = missingValueRepresentation\n                .stream()\n                .anyMatch(x -> x.equals(s));\n\n        if(isMissingValue) {\n            return null;\n        }\n\n        return Float.parseFloat(s);\n    }", "signature": "Float convert(final String s)", "full_signature": "@Override public Float convert(final String s)", "class_method_signature": "IgnoreMissingValuesConverter.convert(final String s)", "testcase": false, "constructor": false, "invocations": ["isNullOrWhiteSpace", "anyMatch", "stream", "equals", "parseFloat"]}, "repository": {"repo_id": 58314354, "url": "https://github.com/bytefish/JavaElasticSearchExperiment", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 292, "license": "licensed"}}