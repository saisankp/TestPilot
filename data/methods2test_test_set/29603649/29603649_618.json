{"test_class": {"identifier": "ClassNameMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FOLDER_NAME = \"a folder\";", "modifier": "private static final", "type": "String", "declarator": "FOLDER_NAME = \"a folder\"", "var_name": "FOLDER_NAME"}, {"original_string": "private static final File FOLDER = new File(FOLDER_NAME);", "modifier": "private static final", "type": "File", "declarator": "FOLDER = new File(FOLDER_NAME)", "var_name": "FOLDER"}, {"original_string": "@Mock\n    private FileUtils fileUtils;", "modifier": "@Mock\n    private", "type": "FileUtils", "declarator": "fileUtils", "var_name": "fileUtils"}, {"original_string": "@Mock\n    private JavaClassFactory javaClassFactory;", "modifier": "@Mock\n    private", "type": "JavaClassFactory", "declarator": "javaClassFactory", "var_name": "javaClassFactory"}, {"original_string": "@Mock\n    private JavaClass javaClass;", "modifier": "@Mock\n    private", "type": "JavaClass", "declarator": "javaClass", "var_name": "javaClass"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@InjectMocks\n    private ClassNameMapper underTest;", "modifier": "@InjectMocks\n    private", "type": "ClassNameMapper", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/dom/parser/node/helper/ClassNameMapperTest.java"}, "test_case": {"identifier": "testInitializeWithInvalidClassListShouldThrowClassFormatException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitializeWithInvalidClassListShouldThrowClassFormatException() throws IOException {\n        //GIVEN\n        List<String> list = new ArrayList<>();\n        list.add(FOLDER_NAME);\n        Collection<File> filesInFolder = new ArrayList<>();\n        File invalidClass = new File(\"InvalidClass.class\");\n        filesInFolder.add(invalidClass);\n        given(fileUtils.listFiles(FOLDER)).willReturn(filesInFolder);\n        given(javaClassFactory.createJavaClass(invalidClass)).willThrow(new ClassFormatException());\n        Whitebox.setInternalState(underTest, \"logger\", logger);\n        //WHEN\n        underTest.initialize(list);\n        //THEN\n        verify(logger).info(Mockito.anyString(), Mockito.any(ClassFormatException.class));\n    }", "signature": "void testInitializeWithInvalidClassListShouldThrowClassFormatException()", "full_signature": "@Test public void testInitializeWithInvalidClassListShouldThrowClassFormatException()", "class_method_signature": "ClassNameMapperTest.testInitializeWithInvalidClassListShouldThrowClassFormatException()", "testcase": true, "constructor": false, "invocations": ["add", "add", "willReturn", "given", "listFiles", "willThrow", "given", "createJavaClass", "setInternalState", "initialize", "info", "verify", "anyString", "any"]}, "focal_class": {"identifier": "ClassNameMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DOT = \"\\\\.\";", "modifier": "private static final", "type": "String", "declarator": "DOT = \"\\\\.\"", "var_name": "DOT"}, {"original_string": "private static final String EXCEPTION = \"Failed to process class file: \";", "modifier": "private static final", "type": "String", "declarator": "EXCEPTION = \"Failed to process class file: \"", "var_name": "EXCEPTION"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(ClassNameMapper.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClassNameMapper.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private FileUtils fileUtils;", "modifier": "@Autowired\n    private", "type": "FileUtils", "declarator": "fileUtils", "var_name": "fileUtils"}, {"original_string": "@Autowired\n    private JavaClassFactory javaClassFactory;", "modifier": "@Autowired\n    private", "type": "JavaClassFactory", "declarator": "javaClassFactory", "var_name": "javaClassFactory"}, {"original_string": "private final Map<String, String> simpleNameToFullName;", "modifier": "private final", "type": "Map<String, String>", "declarator": "simpleNameToFullName", "var_name": "simpleNameToFullName"}], "methods": [{"identifier": "ClassNameMapper", "parameters": "()", "modifiers": "public", "return": "", "signature": " ClassNameMapper()", "full_signature": "public  ClassNameMapper()", "class_method_signature": "ClassNameMapper.ClassNameMapper()", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(final List<String> everyPathAsString)", "modifiers": "public", "return": "void", "signature": "void initialize(final List<String> everyPathAsString)", "full_signature": "public void initialize(final List<String> everyPathAsString)", "class_method_signature": "ClassNameMapper.initialize(final List<String> everyPathAsString)", "testcase": false, "constructor": false}, {"identifier": "addClassNamesFromFolder", "parameters": "(final String folderPath)", "modifiers": "private", "return": "void", "signature": "void addClassNamesFromFolder(final String folderPath)", "full_signature": "private void addClassNamesFromFolder(final String folderPath)", "class_method_signature": "ClassNameMapper.addClassNamesFromFolder(final String folderPath)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final String simpleClassName, final String fullClassName)", "modifiers": "public", "return": "void", "signature": "void put(final String simpleClassName, final String fullClassName)", "full_signature": "public void put(final String simpleClassName, final String fullClassName)", "class_method_signature": "ClassNameMapper.put(final String simpleClassName, final String fullClassName)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final String simpleClassName)", "modifiers": "public", "return": "String", "signature": "String get(final String simpleClassName)", "full_signature": "public String get(final String simpleClassName)", "class_method_signature": "ClassNameMapper.get(final String simpleClassName)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/dom/parser/node/helper/ClassNameMapper.java"}, "focal_method": {"identifier": "initialize", "parameters": "(final List<String> everyPathAsString)", "modifiers": "public", "return": "void", "body": "public void initialize(final List<String> everyPathAsString) {\n        for (String resourcePath : everyPathAsString) {\n            addClassNamesFromFolder(resourcePath);\n        }\n    }", "signature": "void initialize(final List<String> everyPathAsString)", "full_signature": "public void initialize(final List<String> everyPathAsString)", "class_method_signature": "ClassNameMapper.initialize(final List<String> everyPathAsString)", "testcase": false, "constructor": false, "invocations": ["addClassNamesFromFolder"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}