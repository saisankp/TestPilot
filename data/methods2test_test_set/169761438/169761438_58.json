{"test_class": {"identifier": "RoleControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ROLE_URL = \"/Role/\";", "modifier": "private static final", "type": "String", "declarator": "ROLE_URL = \"/Role/\"", "var_name": "ROLE_URL"}, {"original_string": "@Autowired\n\tprivate WebApplicationContext wac;", "modifier": "@Autowired\n\tprivate", "type": "WebApplicationContext", "declarator": "wac", "var_name": "wac"}, {"original_string": "@Autowired\n\tprivate Filter springSecurityFilterChain;", "modifier": "@Autowired\n\tprivate", "type": "Filter", "declarator": "springSecurityFilterChain", "var_name": "springSecurityFilterChain"}, {"original_string": "@Resource\n\tprivate DtoMapper dozerMapper;", "modifier": "@Resource\n\tprivate", "type": "DtoMapper", "declarator": "dozerMapper", "var_name": "dozerMapper"}, {"original_string": "@Resource\n\tprivate OadrUserService oadrUserService;", "modifier": "@Resource\n\tprivate", "type": "OadrUserService", "declarator": "oadrUserService", "var_name": "oadrUserService"}, {"original_string": "@Resource\n\tprivate OadrAppService oadrAppService;", "modifier": "@Resource\n\tprivate", "type": "OadrAppService", "declarator": "oadrAppService", "var_name": "oadrAppService"}, {"original_string": "@Resource\n\tprivate VenService venService;", "modifier": "@Resource\n\tprivate", "type": "VenService", "declarator": "venService", "var_name": "venService"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private OadrUser adminUser = null;", "modifier": "private", "type": "OadrUser", "declarator": "adminUser = null", "var_name": "adminUser"}, {"original_string": "private OadrApp appUser = null;", "modifier": "private", "type": "OadrApp", "declarator": "appUser = null", "var_name": "appUser"}, {"original_string": "private Ven venUser = null;", "modifier": "private", "type": "Ven", "declarator": "venUser = null", "var_name": "venUser"}, {"original_string": "private UserRequestPostProcessor admin = SecurityMockMvcRequestPostProcessors.user(\"admin\").roles(\"ADMIN\");", "modifier": "private", "type": "UserRequestPostProcessor", "declarator": "admin = SecurityMockMvcRequestPostProcessors.user(\"admin\").roles(\"ADMIN\")", "var_name": "admin"}, {"original_string": "private UserRequestPostProcessor user = SecurityMockMvcRequestPostProcessors.user(\"user\").roles(\"USER\");", "modifier": "private", "type": "UserRequestPostProcessor", "declarator": "user = SecurityMockMvcRequestPostProcessors.user(\"user\").roles(\"USER\")", "var_name": "user"}, {"original_string": "private UserRequestPostProcessor ven = SecurityMockMvcRequestPostProcessors.user(\"ven\").roles(\"VEN\");", "modifier": "private", "type": "UserRequestPostProcessor", "declarator": "ven = SecurityMockMvcRequestPostProcessors.user(\"ven\").roles(\"VEN\")", "var_name": "ven"}], "file": "OpenADRServerVTNCommon/src/test/java/com/avob/openadr/server/common/vtn/controller/RoleControllerTest.java"}, "test_case": {"identifier": "getUserRoleTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getUserRoleTest() throws Exception {\n\t\tthis.mockMvc.perform(\n\t\t\t\tMockMvcRequestBuilders.post(ROLE_URL + \"admin\").header(\"Content-Type\", \"application/json\").with(user))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.FORBIDDEN_403));\n\t\t\n\t\tthis.mockMvc.perform(\n\t\t\t\tMockMvcRequestBuilders.post(ROLE_URL + \"admin\").header(\"Content-Type\", \"application/json\").with(ven))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.FORBIDDEN_403));\n\n\t\tthis.mockMvc.perform(MockMvcRequestBuilders.post(ROLE_URL + \"mouaiccool\")\n\t\t\t\t.header(\"Content-Type\", \"application/json\").with(admin))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.NOT_FOUND_404));\n\n\t\tMvcResult andReturn = this.mockMvc.perform(\n\t\t\t\tMockMvcRequestBuilders.post(ROLE_URL + \"admin\").header(\"Content-Type\", \"application/json\").with(admin))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.OK_200)).andReturn();\n\t\tassertTrue(andReturn.getResponse().getContentAsString().contains(\"ROLE_ADMIN\"));\n\t\tassertTrue(andReturn.getResponse().getContentAsString().contains(\"ROLE_USER\"));\n\n\t\tandReturn = this.mockMvc.perform(\n\t\t\t\tMockMvcRequestBuilders.post(ROLE_URL + \"app\").header(\"Content-Type\", \"application/json\").with(admin))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.OK_200)).andReturn();\n\t\tassertTrue(andReturn.getResponse().getContentAsString().contains(\"ROLE_APP\"));\n\t\tassertTrue(andReturn.getResponse().getContentAsString().contains(\"ROLE_DEVICE_MANAGER\"));\n\n\t\tandReturn = this.mockMvc.perform(\n\t\t\t\tMockMvcRequestBuilders.post(ROLE_URL + \"ven\").header(\"Content-Type\", \"application/json\").with(admin))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.OK_200)).andReturn();\n\t\tassertTrue(andReturn.getResponse().getContentAsString().contains(\"ROLE_VEN\"));\n\t}", "signature": "void getUserRoleTest()", "full_signature": "@Test public void getUserRoleTest()", "class_method_signature": "RoleControllerTest.getUserRoleTest()", "testcase": true, "constructor": false, "invocations": ["andExpect", "perform", "with", "header", "post", "is", "status", "andExpect", "perform", "with", "header", "post", "is", "status", "andExpect", "perform", "with", "header", "post", "is", "status", "andReturn", "andExpect", "perform", "with", "header", "post", "is", "status", "assertTrue", "contains", "getContentAsString", "getResponse", "assertTrue", "contains", "getContentAsString", "getResponse", "andReturn", "andExpect", "perform", "with", "header", "post", "is", "status", "assertTrue", "contains", "getContentAsString", "getResponse", "assertTrue", "contains", "getContentAsString", "getResponse", "andReturn", "andExpect", "perform", "with", "header", "post", "is", "status", "assertTrue", "contains", "getContentAsString", "getResponse"]}, "focal_class": {"identifier": "RoleController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RoleController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RoleController.class)", "var_name": "LOGGER"}, {"original_string": "@Resource\n\tprivate AbstractUserDao abstractUserDao;", "modifier": "@Resource\n\tprivate", "type": "AbstractUserDao", "declarator": "abstractUserDao", "var_name": "abstractUserDao"}], "methods": [{"identifier": "getUserRole", "parameters": "(@PathVariable(\"username\") String username, HttpServletResponse response)", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN') or hasRole('ROLE_DEVICE_MANAGER') or hasRole('ROLE_DRPROGRAM') or hasRole('ROLE_VTN') or hasRole('ROLE_XMPP')\") @RequestMapping(value = \"/{username}\", method = RequestMethod.POST) @ResponseBody public", "return": "List<String>", "signature": "List<String> getUserRole(@PathVariable(\"username\") String username, HttpServletResponse response)", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN') or hasRole('ROLE_DEVICE_MANAGER') or hasRole('ROLE_DRPROGRAM') or hasRole('ROLE_VTN') or hasRole('ROLE_XMPP')\") @RequestMapping(value = \"/{username}\", method = RequestMethod.POST) @ResponseBody public List<String> getUserRole(@PathVariable(\"username\") String username, HttpServletResponse response)", "class_method_signature": "RoleController.getUserRole(@PathVariable(\"username\") String username, HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "OpenADRServerVTNCommon/src/main/java/com/avob/openadr/server/common/vtn/controller/RoleController.java"}, "focal_method": {"identifier": "getUserRole", "parameters": "(@PathVariable(\"username\") String username, HttpServletResponse response)", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN') or hasRole('ROLE_DEVICE_MANAGER') or hasRole('ROLE_DRPROGRAM') or hasRole('ROLE_VTN') or hasRole('ROLE_XMPP')\") @RequestMapping(value = \"/{username}\", method = RequestMethod.POST) @ResponseBody public", "return": "List<String>", "body": "@PreAuthorize(\"hasRole('ROLE_ADMIN') or hasRole('ROLE_DEVICE_MANAGER') or hasRole('ROLE_DRPROGRAM') or hasRole('ROLE_VTN') or hasRole('ROLE_XMPP')\")\n\t@RequestMapping(value = \"/{username}\", method = RequestMethod.POST)\n\t@ResponseBody\n\tpublic List<String> getUserRole(@PathVariable(\"username\") String username, HttpServletResponse response) {\n\t\tAbstractUser user = abstractUserDao.findOneByUsername(username);\n\t\tList<String> roles = new ArrayList<>();\n\t\tif (user == null) {\n\t\t\tresponse.setStatus(HttpStatus.NOT_FOUND_404);\n\t\t\treturn roles;\n\t\t}\n\t\troles = user.getRoles();\n\n\t\tif (user instanceof Ven) {\n\t\t\troles.add(\"ROLE_VEN\");\n\t\t} else if (user instanceof OadrUser) {\n\t\t\troles.add(\"ROLE_USER\");\n\t\t} else if (user instanceof OadrApp) {\n\t\t\troles.add(\"ROLE_APP\");\n\t\t}\n\n\t\tLOGGER.info(user.toString() + \" roles: \" + roles.toString());\n\n\t\treturn roles;\n\t}", "signature": "List<String> getUserRole(@PathVariable(\"username\") String username, HttpServletResponse response)", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN') or hasRole('ROLE_DEVICE_MANAGER') or hasRole('ROLE_DRPROGRAM') or hasRole('ROLE_VTN') or hasRole('ROLE_XMPP')\") @RequestMapping(value = \"/{username}\", method = RequestMethod.POST) @ResponseBody public List<String> getUserRole(@PathVariable(\"username\") String username, HttpServletResponse response)", "class_method_signature": "RoleController.getUserRole(@PathVariable(\"username\") String username, HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["findOneByUsername", "setStatus", "getRoles", "add", "add", "add", "info", "toString", "toString"]}, "repository": {"repo_id": 169761438, "url": "https://github.com/avob/OpenADR", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 55915, "license": "licensed"}}