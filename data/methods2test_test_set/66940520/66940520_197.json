{"test_class": {"identifier": "DefaultVisualizationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AnalyticalObjectStore<Visualization> visualizationStore;", "modifier": "@Mock\n    private", "type": "AnalyticalObjectStore<Visualization>", "declarator": "visualizationStore", "var_name": "visualizationStore"}, {"original_string": "@Mock\n    private AnalyticsService analyticsService;", "modifier": "@Mock\n    private", "type": "AnalyticsService", "declarator": "analyticsService", "var_name": "analyticsService"}, {"original_string": "@Mock\n    private OrganisationUnitService organisationUnitService;", "modifier": "@Mock\n    private", "type": "OrganisationUnitService", "declarator": "organisationUnitService", "var_name": "organisationUnitService"}, {"original_string": "@Mock\n    private CurrentUserService currentUserService;", "modifier": "@Mock\n    private", "type": "CurrentUserService", "declarator": "currentUserService", "var_name": "currentUserService"}, {"original_string": "@Mock\n    private I18nManager i18nManager;", "modifier": "@Mock\n    private", "type": "I18nManager", "declarator": "i18nManager", "var_name": "i18nManager"}, {"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}, {"original_string": "private DefaultVisualizationService defaultVisualizationService;", "modifier": "private", "type": "DefaultVisualizationService", "declarator": "defaultVisualizationService", "var_name": "defaultVisualizationService"}], "file": "dhis-2/dhis-services/dhis-service-reporting/src/test/java/org/hisp/dhis/visualization/impl/DefaultVisualizationServiceTest.java"}, "test_case": {"identifier": "getVisualizationGridByUserWhenItHasOrganisationUnitLevels", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getVisualizationGridByUserWhenItHasOrganisationUnitLevels()\n    {\n        // Given\n        final String anyVisualizationUid = \"adbet5RTs\";\n        final Date anyRelativePeriodDate = new Date();\n        final String anyOrganisationUnitUid = \"ouiRzW5e\";\n        final User userStub = userStub();\n        final List<Integer> orgUnitLevels = asList( 1, 2 );\n        final List<OrganisationUnit> orgUnits = asList( new OrganisationUnit() );\n        final Map<String, Object> valueMap = valueMapStub();\n\n        final Visualization visualizationStub = visualizationStub( \"abc123xy\" );\n        visualizationStub.setOrganisationUnitLevels( orgUnitLevels );\n        visualizationStub.setOrganisationUnits( orgUnits );\n        final Visualization visualizationSpy = spy( visualizationStub );\n\n        // When\n        when( visualizationStore.getByUid( anyVisualizationUid ) ).thenReturn( visualizationSpy );\n        when( analyticsService.getAggregatedDataValueMapping( visualizationSpy ) ).thenReturn( valueMap );\n        final Grid expectedGrid = defaultVisualizationService.getVisualizationGridByUser( anyVisualizationUid,\n            anyRelativePeriodDate, anyOrganisationUnitUid, userStub );\n\n        // Then\n        assertThat( expectedGrid.getRows(), hasSize( 1 ) );\n        assertThat( expectedGrid.getRows().get( 0 ), hasSize( 7 ) );\n        assertThat( expectedGrid.getRows().get( 0 ), hasItem( \"abc123xy\" ) );\n        assertThat( expectedGrid.getHeaders(), hasSize( 7 ) );\n        assertThat( expectedGrid.getMetaColumnIndexes(), hasSize( 7 ) );\n        assertThatHeadersAreTheExpectedOnes( expectedGrid );\n\n        verify( organisationUnitService, times( 1 ) ).getOrganisationUnitsAtLevels( orgUnitLevels, orgUnits );\n        verify( visualizationSpy, times( 1 ) ).clearTransientState();\n    }", "signature": "void getVisualizationGridByUserWhenItHasOrganisationUnitLevels()", "full_signature": "@Test public void getVisualizationGridByUserWhenItHasOrganisationUnitLevels()", "class_method_signature": "DefaultVisualizationServiceTest.getVisualizationGridByUserWhenItHasOrganisationUnitLevels()", "testcase": true, "constructor": false, "invocations": ["userStub", "asList", "asList", "valueMapStub", "visualizationStub", "setOrganisationUnitLevels", "setOrganisationUnits", "spy", "thenReturn", "when", "getByUid", "thenReturn", "when", "getAggregatedDataValueMapping", "getVisualizationGridByUser", "assertThat", "getRows", "hasSize", "assertThat", "get", "getRows", "hasSize", "assertThat", "get", "getRows", "hasItem", "assertThat", "getHeaders", "hasSize", "assertThat", "getMetaColumnIndexes", "hasSize", "assertThatHeadersAreTheExpectedOnes", "getOrganisationUnitsAtLevels", "verify", "times", "clearTransientState", "verify", "times"]}, "focal_class": {"identifier": "DefaultVisualizationService", "superclass": "extends\n    GenericAnalyticalObjectService<Visualization>", "interfaces": "implements\n    VisualizationService", "fields": [{"original_string": "private final AnalyticalObjectStore<Visualization> visualizationStore;", "modifier": "private final", "type": "AnalyticalObjectStore<Visualization>", "declarator": "visualizationStore", "var_name": "visualizationStore"}, {"original_string": "private final AnalyticsService analyticsService;", "modifier": "private final", "type": "AnalyticsService", "declarator": "analyticsService", "var_name": "analyticsService"}, {"original_string": "private final OrganisationUnitService organisationUnitService;", "modifier": "private final", "type": "OrganisationUnitService", "declarator": "organisationUnitService", "var_name": "organisationUnitService"}, {"original_string": "private final CurrentUserService currentUserService;", "modifier": "private final", "type": "CurrentUserService", "declarator": "currentUserService", "var_name": "currentUserService"}, {"original_string": "private final I18nManager i18nManager;", "modifier": "private final", "type": "I18nManager", "declarator": "i18nManager", "var_name": "i18nManager"}], "methods": [{"identifier": "DefaultVisualizationService", "parameters": "( final AnalyticsService analyticsService,\n        @Qualifier( \"org.hisp.dhis.visualization.generic.VisualizationStore\" )\n        final AnalyticalObjectStore<Visualization> visualizationStore,\n        final OrganisationUnitService organisationUnitService, final CurrentUserService currentUserService,\n        final I18nManager i18nManager )", "modifiers": "public", "return": "", "signature": " DefaultVisualizationService( final AnalyticsService analyticsService,\n        @Qualifier( \"org.hisp.dhis.visualization.generic.VisualizationStore\" )\n        final AnalyticalObjectStore<Visualization> visualizationStore,\n        final OrganisationUnitService organisationUnitService, final CurrentUserService currentUserService,\n        final I18nManager i18nManager )", "full_signature": "public  DefaultVisualizationService( final AnalyticsService analyticsService,\n        @Qualifier( \"org.hisp.dhis.visualization.generic.VisualizationStore\" )\n        final AnalyticalObjectStore<Visualization> visualizationStore,\n        final OrganisationUnitService organisationUnitService, final CurrentUserService currentUserService,\n        final I18nManager i18nManager )", "class_method_signature": "DefaultVisualizationService.DefaultVisualizationService( final AnalyticsService analyticsService,\n        @Qualifier( \"org.hisp.dhis.visualization.generic.VisualizationStore\" )\n        final AnalyticalObjectStore<Visualization> visualizationStore,\n        final OrganisationUnitService organisationUnitService, final CurrentUserService currentUserService,\n        final I18nManager i18nManager )", "testcase": false, "constructor": true}, {"identifier": "getAnalyticalObjectStore", "parameters": "()", "modifiers": "@Override protected", "return": "AnalyticalObjectStore<Visualization>", "signature": "AnalyticalObjectStore<Visualization> getAnalyticalObjectStore()", "full_signature": "@Override protected AnalyticalObjectStore<Visualization> getAnalyticalObjectStore()", "class_method_signature": "DefaultVisualizationService.getAnalyticalObjectStore()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "( final Visualization visualization )", "modifiers": "@Override @Transactional public", "return": "long", "signature": "long save( final Visualization visualization )", "full_signature": "@Override @Transactional public long save( final Visualization visualization )", "class_method_signature": "DefaultVisualizationService.save( final Visualization visualization )", "testcase": false, "constructor": false}, {"identifier": "loadVisualization", "parameters": "( final long id )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "Visualization", "signature": "Visualization loadVisualization( final long id )", "full_signature": "@Override @Transactional( readOnly = true ) public Visualization loadVisualization( final long id )", "class_method_signature": "DefaultVisualizationService.loadVisualization( final long id )", "testcase": false, "constructor": false}, {"identifier": "loadVisualization", "parameters": "( final String uid )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "Visualization", "signature": "Visualization loadVisualization( final String uid )", "full_signature": "@Override @Transactional( readOnly = true ) public Visualization loadVisualization( final String uid )", "class_method_signature": "DefaultVisualizationService.loadVisualization( final String uid )", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "( final Visualization visualization )", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void delete( final Visualization visualization )", "full_signature": "@Override @Transactional public void delete( final Visualization visualization )", "class_method_signature": "DefaultVisualizationService.delete( final Visualization visualization )", "testcase": false, "constructor": false}, {"identifier": "getVisualizationGrid", "parameters": "( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "Grid", "signature": "Grid getVisualizationGrid( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid )", "full_signature": "@Override @Transactional( readOnly = true ) public Grid getVisualizationGrid( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid )", "class_method_signature": "DefaultVisualizationService.getVisualizationGrid( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid )", "testcase": false, "constructor": false}, {"identifier": "getVisualizationGridByUser", "parameters": "( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid, final User user )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "Grid", "signature": "Grid getVisualizationGridByUser( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid, final User user )", "full_signature": "@Override @Transactional( readOnly = true ) public Grid getVisualizationGridByUser( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid, final User user )", "class_method_signature": "DefaultVisualizationService.getVisualizationGridByUser( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid, final User user )", "testcase": false, "constructor": false}, {"identifier": "getVisualizationNoAcl", "parameters": "( final String uid )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "Visualization", "signature": "Visualization getVisualizationNoAcl( final String uid )", "full_signature": "@Override @Transactional( readOnly = true ) public Visualization getVisualizationNoAcl( final String uid )", "class_method_signature": "DefaultVisualizationService.getVisualizationNoAcl( final String uid )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-reporting/src/main/java/org/hisp/dhis/visualization/impl/DefaultVisualizationService.java"}, "focal_method": {"identifier": "getVisualizationGridByUser", "parameters": "( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid, final User user )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "Grid", "body": "@Override\n    @Transactional( readOnly = true )\n    public Grid getVisualizationGridByUser( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid, final User user )\n    {\n        Visualization visualization = loadVisualization( uid );\n        final boolean hasPermission = visualization != null;\n\n        if ( hasPermission )\n        {\n            I18nFormat format = i18nManager.getI18nFormat();\n            OrganisationUnit organisationUnit = organisationUnitService.getOrganisationUnit( organisationUnitUid );\n\n            List<OrganisationUnit> atLevels = new ArrayList<>();\n            List<OrganisationUnit> inGroups = new ArrayList<>();\n\n            if ( visualization.hasOrganisationUnitLevels() )\n            {\n                atLevels.addAll( organisationUnitService.getOrganisationUnitsAtLevels(\n                    visualization.getOrganisationUnitLevels(), visualization.getOrganisationUnits() ) );\n            }\n\n            if ( visualization.hasItemOrganisationUnitGroups() )\n            {\n                inGroups.addAll( organisationUnitService.getOrganisationUnits(\n                    visualization.getItemOrganisationUnitGroups(), visualization.getOrganisationUnits() ) );\n            }\n\n            visualization.init( user, relativePeriodDate, organisationUnit, atLevels, inGroups, format );\n\n            Map<String, Object> valueMap = analyticsService.getAggregatedDataValueMapping( visualization );\n\n            Grid visualizationGrid = visualization.getGrid( new ListGrid(), valueMap, SHORTNAME, true );\n\n            visualization.clearTransientState();\n\n            return visualizationGrid;\n        }\n        else\n        {\n            return new ListGrid();\n        }\n    }", "signature": "Grid getVisualizationGridByUser( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid, final User user )", "full_signature": "@Override @Transactional( readOnly = true ) public Grid getVisualizationGridByUser( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid, final User user )", "class_method_signature": "DefaultVisualizationService.getVisualizationGridByUser( final String uid, final Date relativePeriodDate,\n        final String organisationUnitUid, final User user )", "testcase": false, "constructor": false, "invocations": ["loadVisualization", "getI18nFormat", "getOrganisationUnit", "hasOrganisationUnitLevels", "addAll", "getOrganisationUnitsAtLevels", "getOrganisationUnitLevels", "getOrganisationUnits", "hasItemOrganisationUnitGroups", "addAll", "getOrganisationUnits", "getItemOrganisationUnitGroups", "getOrganisationUnits", "init", "getAggregatedDataValueMapping", "getGrid", "clearTransientState"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}