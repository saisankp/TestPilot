{"test_class": {"identifier": "PopulationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int K = 10;", "modifier": "public static final", "type": "int", "declarator": "K = 10", "var_name": "K"}, {"original_string": "Population population;", "modifier": "", "type": "Population", "declarator": "population", "var_name": "population"}, {"original_string": "private static final double PRECISION = 0.00000001;", "modifier": "private static final", "type": "double", "declarator": "PRECISION = 0.00000001", "var_name": "PRECISION"}, {"original_string": "Function<Chromosome, Double> fitnessFunction = (Chromosome ch) -> ch.getGene(0) + ch.getGene(1);", "modifier": "", "type": "Function<Chromosome, Double>", "declarator": "fitnessFunction = (Chromosome ch) -> ch.getGene(0) + ch.getGene(1)", "var_name": "fitnessFunction"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/util/genetic/PopulationTest.java"}, "test_case": {"identifier": "getTotalFitness", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getTotalFitness() {\n        double res = population.getTotalFitness();\n        Assert.assertEquals(res, Double.NaN, PRECISION);\n\n        population.calculateFitnessForAll(fitnessFunction);\n        res = population.getTotalFitness();\n        Assert.assertEquals(res, 9900.0, PRECISION);\n    }", "signature": "void getTotalFitness()", "full_signature": "@Test public void getTotalFitness()", "class_method_signature": "PopulationTest.getTotalFitness()", "testcase": true, "constructor": false, "invocations": ["getTotalFitness", "assertEquals", "calculateFitnessForAll", "getTotalFitness", "assertEquals"]}, "focal_class": {"identifier": "Population", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Chromosome[] chromosomes;", "modifier": "private", "type": "Chromosome[]", "declarator": "chromosomes", "var_name": "chromosomes"}, {"original_string": "private BitSet fitnessCalculatedFlags;", "modifier": "private", "type": "BitSet", "declarator": "fitnessCalculatedFlags", "var_name": "fitnessCalculatedFlags"}], "methods": [{"identifier": "Population", "parameters": "(int size)", "modifiers": "public", "return": "", "signature": " Population(int size)", "full_signature": "public  Population(int size)", "class_method_signature": "Population.Population(int size)", "testcase": false, "constructor": true}, {"identifier": "getChromosome", "parameters": "(int idx)", "modifiers": "public", "return": "Chromosome", "signature": "Chromosome getChromosome(int idx)", "full_signature": "public Chromosome getChromosome(int idx)", "class_method_signature": "Population.getChromosome(int idx)", "testcase": false, "constructor": false}, {"identifier": "calculateFitnessForChromosome", "parameters": "(int idx, Function<Chromosome, Double> fitnessFunction)", "modifiers": "public", "return": "double", "signature": "double calculateFitnessForChromosome(int idx, Function<Chromosome, Double> fitnessFunction)", "full_signature": "public double calculateFitnessForChromosome(int idx, Function<Chromosome, Double> fitnessFunction)", "class_method_signature": "Population.calculateFitnessForChromosome(int idx, Function<Chromosome, Double> fitnessFunction)", "testcase": false, "constructor": false}, {"identifier": "calculateFitnessForAll", "parameters": "(Function<Chromosome, Double> fitnessFunction)", "modifiers": "public", "return": "void", "signature": "void calculateFitnessForAll(Function<Chromosome, Double> fitnessFunction)", "full_signature": "public void calculateFitnessForAll(Function<Chromosome, Double> fitnessFunction)", "class_method_signature": "Population.calculateFitnessForAll(Function<Chromosome, Double> fitnessFunction)", "testcase": false, "constructor": false}, {"identifier": "setChromosome", "parameters": "(int idx, Chromosome chromosome)", "modifiers": "public", "return": "void", "signature": "void setChromosome(int idx, Chromosome chromosome)", "full_signature": "public void setChromosome(int idx, Chromosome chromosome)", "class_method_signature": "Population.setChromosome(int idx, Chromosome chromosome)", "testcase": false, "constructor": false}, {"identifier": "getChromosome", "parameters": "(Integer idx)", "modifiers": "public", "return": "Chromosome", "signature": "Chromosome getChromosome(Integer idx)", "full_signature": "public Chromosome getChromosome(Integer idx)", "class_method_signature": "Population.getChromosome(Integer idx)", "testcase": false, "constructor": false}, {"identifier": "selectBestKChromosome", "parameters": "(int k)", "modifiers": "public", "return": "Chromosome[]", "signature": "Chromosome[] selectBestKChromosome(int k)", "full_signature": "public Chromosome[] selectBestKChromosome(int k)", "class_method_signature": "Population.selectBestKChromosome(int k)", "testcase": false, "constructor": false}, {"identifier": "getTotalFitness", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTotalFitness()", "full_signature": "public double getTotalFitness()", "class_method_signature": "Population.getTotalFitness()", "testcase": false, "constructor": false}, {"identifier": "getAverageFitness", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAverageFitness()", "full_signature": "public double getAverageFitness()", "class_method_signature": "Population.getAverageFitness()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Population.size()", "testcase": false, "constructor": false}, {"identifier": "setFitness", "parameters": "(Integer idx, Double fitness)", "modifiers": "public", "return": "void", "signature": "void setFitness(Integer idx, Double fitness)", "full_signature": "public void setFitness(Integer idx, Double fitness)", "class_method_signature": "Population.setFitness(Integer idx, Double fitness)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/util/genetic/Population.java"}, "focal_method": {"identifier": "getTotalFitness", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double getTotalFitness() {\n        if (fitnessCalculatedFlags.cardinality() == chromosomes.length) {\n            double totalFitness = 0.0;\n\n            for (int i = 0; i < chromosomes.length; i++)\n                totalFitness += chromosomes[i].getFitness();\n\n            return totalFitness;\n        }\n        return Double.NaN;\n    }", "signature": "double getTotalFitness()", "full_signature": "public double getTotalFitness()", "class_method_signature": "Population.getTotalFitness()", "testcase": false, "constructor": false, "invocations": ["cardinality", "getFitness"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}