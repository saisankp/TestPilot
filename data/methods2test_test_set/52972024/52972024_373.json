{"test_class": {"identifier": "PluginInMemoryDBTasksTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}], "file": "CoreFeatures/Database-in-memory-plugins/PluginInMemoryDBTasks/src/test/java/info/smart_tools/smartactors/database_in_memory_plugins/in_memory_db_tasks_plugin/PluginInMemoryDBTasksTest.java"}, "test_case": {"identifier": "checkPluginExceptionOnPluginLoad", "parameters": "()", "modifiers": "@Test(expected = PluginException.class) public", "return": "void", "body": "@Test(expected = PluginException.class)\n    public void checkPluginExceptionOnPluginLoad()\n            throws Exception {\n        IBootstrap<IBootstrapItem<String>> bootstrap = mock(IBootstrap.class);\n        IPlugin plugin = new PluginInMemoryDBTasks(bootstrap);\n        doThrow(Exception.class).when(bootstrap).add(any(IBootstrapItem.class));\n        plugin.load();\n        fail();\n    }", "signature": "void checkPluginExceptionOnPluginLoad()", "full_signature": "@Test(expected = PluginException.class) public void checkPluginExceptionOnPluginLoad()", "class_method_signature": "PluginInMemoryDBTasksTest.checkPluginExceptionOnPluginLoad()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "when", "doThrow", "any", "load", "fail"]}, "focal_class": {"identifier": "PluginInMemoryDBTasks", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "PluginInMemoryDBTasks", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " PluginInMemoryDBTasks(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  PluginInMemoryDBTasks(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "PluginInMemoryDBTasks.PluginInMemoryDBTasks(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "PluginInMemoryDBTasks.load()", "testcase": false, "constructor": false}, {"identifier": "registerUpsertTask", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerUpsertTask()", "full_signature": "private void registerUpsertTask()", "class_method_signature": "PluginInMemoryDBTasks.registerUpsertTask()", "testcase": false, "constructor": false}, {"identifier": "registerCreateCollectionTask", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerCreateCollectionTask()", "full_signature": "private void registerCreateCollectionTask()", "class_method_signature": "PluginInMemoryDBTasks.registerCreateCollectionTask()", "testcase": false, "constructor": false}, {"identifier": "registerGetByIdTask", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerGetByIdTask()", "full_signature": "private void registerGetByIdTask()", "class_method_signature": "PluginInMemoryDBTasks.registerGetByIdTask()", "testcase": false, "constructor": false}, {"identifier": "registerSearchTask", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerSearchTask()", "full_signature": "private void registerSearchTask()", "class_method_signature": "PluginInMemoryDBTasks.registerSearchTask()", "testcase": false, "constructor": false}, {"identifier": "registerDeleteTask", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerDeleteTask()", "full_signature": "private void registerDeleteTask()", "class_method_signature": "PluginInMemoryDBTasks.registerDeleteTask()", "testcase": false, "constructor": false}, {"identifier": "registerCountTask", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerCountTask()", "full_signature": "private void registerCountTask()", "class_method_signature": "PluginInMemoryDBTasks.registerCountTask()", "testcase": false, "constructor": false}, {"identifier": "registerInsertTask", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerInsertTask()", "full_signature": "private void registerInsertTask()", "class_method_signature": "PluginInMemoryDBTasks.registerInsertTask()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database-in-memory-plugins/PluginInMemoryDBTasks/src/main/java/info/smart_tools/smartactors/database_in_memory_plugins/in_memory_db_tasks_plugin/PluginInMemoryDBTasks.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n\n        try {\n            BootstrapItem item = new BootstrapItem(\"InMemoryDBTasksPlugin\");\n            item\n//                    .after(\"IOC\")\n//                    .after(\"IFieldPlugin\")\n                    .after(\"InMemoryDatabase\")\n                    .process(() -> {\n                        try {\n                            registerCreateCollectionTask();\n                            registerUpsertTask();\n                            registerInsertTask();\n                            registerGetByIdTask();\n                            registerSearchTask();\n                            registerDeleteTask();\n                            registerCountTask();\n                        } catch (ResolutionException e) {\n                            throw new ActionExecuteException(\"Can't resolve fields for db task.\", e);\n                        } catch (InvalidArgumentException e) {\n                            throw new ActionExecuteException(\"Can't create strategy for db task.\", e);\n                        } catch (RegistrationException e) {\n                            throw new ActionExecuteException(\"Can't register strategy for db task.\", e);\n                        }\n                    });\n            bootstrap.add(item);\n        } catch (Exception e) {\n            throw new PluginException(\"Can't get BootstrapItem.\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "PluginInMemoryDBTasks.load()", "testcase": false, "constructor": false, "invocations": ["process", "after", "registerCreateCollectionTask", "registerUpsertTask", "registerInsertTask", "registerGetByIdTask", "registerSearchTask", "registerDeleteTask", "registerCountTask", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}