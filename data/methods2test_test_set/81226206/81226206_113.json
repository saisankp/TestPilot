{"test_class": {"identifier": "DriverElementTest", "superclass": "", "interfaces": "", "fields": [], "file": "karate-core/src/test/java/com/intuit/karate/driver/DriverElementTest.java"}, "test_case": {"identifier": "testToJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToJson() {\n        JsonUtils.toJsonDoc(\"{}\");\n        Element de = DriverElement.locatorExists(null, \"foo\");\n        List list = Collections.singletonList(de);\n        ScriptValue sv = new ScriptValue(list);\n        sv.getAsString();\n    }", "signature": "void testToJson()", "full_signature": "@Test public void testToJson()", "class_method_signature": "DriverElementTest.testToJson()", "testcase": true, "constructor": false, "invocations": ["toJsonDoc", "locatorExists", "singletonList", "getAsString"]}, "focal_class": {"identifier": "DriverElement", "superclass": "", "interfaces": "implements Element", "fields": [{"original_string": "private final Driver driver;", "modifier": "private final", "type": "Driver", "declarator": "driver", "var_name": "driver"}, {"original_string": "private final String locator;", "modifier": "private final", "type": "String", "declarator": "locator", "var_name": "locator"}, {"original_string": "private Boolean exists;", "modifier": "private", "type": "Boolean", "declarator": "exists", "var_name": "exists"}], "methods": [{"identifier": "DriverElement", "parameters": "(Driver driver, String locator, Boolean exists)", "modifiers": "private", "return": "", "signature": " DriverElement(Driver driver, String locator, Boolean exists)", "full_signature": "private  DriverElement(Driver driver, String locator, Boolean exists)", "class_method_signature": "DriverElement.DriverElement(Driver driver, String locator, Boolean exists)", "testcase": false, "constructor": true}, {"identifier": "locatorExists", "parameters": "(Driver driver, String locator)", "modifiers": "public static", "return": "Element", "signature": "Element locatorExists(Driver driver, String locator)", "full_signature": "public static Element locatorExists(Driver driver, String locator)", "class_method_signature": "DriverElement.locatorExists(Driver driver, String locator)", "testcase": false, "constructor": false}, {"identifier": "locatorUnknown", "parameters": "(Driver driver, String locator)", "modifiers": "public static", "return": "Element", "signature": "Element locatorUnknown(Driver driver, String locator)", "full_signature": "public static Element locatorUnknown(Driver driver, String locator)", "class_method_signature": "DriverElement.locatorUnknown(Driver driver, String locator)", "testcase": false, "constructor": false}, {"identifier": "getLocator", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLocator()", "full_signature": "@Override public String getLocator()", "class_method_signature": "DriverElement.getLocator()", "testcase": false, "constructor": false}, {"identifier": "isPresent", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPresent()", "full_signature": "@Override public boolean isPresent()", "class_method_signature": "DriverElement.isPresent()", "testcase": false, "constructor": false}, {"identifier": "setExists", "parameters": "(Boolean exists)", "modifiers": "public", "return": "void", "signature": "void setExists(Boolean exists)", "full_signature": "public void setExists(Boolean exists)", "class_method_signature": "DriverElement.setExists(Boolean exists)", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getPosition()", "full_signature": "@Override public Map<String, Object> getPosition()", "class_method_signature": "DriverElement.getPosition()", "testcase": false, "constructor": false}, {"identifier": "screenshot", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] screenshot()", "full_signature": "@Override public byte[] screenshot()", "class_method_signature": "DriverElement.screenshot()", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEnabled()", "full_signature": "@Override public boolean isEnabled()", "class_method_signature": "DriverElement.isEnabled()", "testcase": false, "constructor": false}, {"identifier": "highlight", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element highlight()", "full_signature": "@Override public Element highlight()", "class_method_signature": "DriverElement.highlight()", "testcase": false, "constructor": false}, {"identifier": "focus", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element focus()", "full_signature": "@Override public Element focus()", "class_method_signature": "DriverElement.focus()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element clear()", "full_signature": "@Override public Element clear()", "class_method_signature": "DriverElement.clear()", "testcase": false, "constructor": false}, {"identifier": "click", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element click()", "full_signature": "@Override public Element click()", "class_method_signature": "DriverElement.click()", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element submit()", "full_signature": "@Override public Element submit()", "class_method_signature": "DriverElement.submit()", "testcase": false, "constructor": false}, {"identifier": "mouse", "parameters": "()", "modifiers": "@Override public", "return": "Mouse", "signature": "Mouse mouse()", "full_signature": "@Override public Mouse mouse()", "class_method_signature": "DriverElement.mouse()", "testcase": false, "constructor": false}, {"identifier": "input", "parameters": "(String value)", "modifiers": "@Override public", "return": "Element", "signature": "Element input(String value)", "full_signature": "@Override public Element input(String value)", "class_method_signature": "DriverElement.input(String value)", "testcase": false, "constructor": false}, {"identifier": "input", "parameters": "(String[] values)", "modifiers": "@Override public", "return": "Element", "signature": "Element input(String[] values)", "full_signature": "@Override public Element input(String[] values)", "class_method_signature": "DriverElement.input(String[] values)", "testcase": false, "constructor": false}, {"identifier": "input", "parameters": "(String[] values, int delay)", "modifiers": "@Override public", "return": "Element", "signature": "Element input(String[] values, int delay)", "full_signature": "@Override public Element input(String[] values, int delay)", "class_method_signature": "DriverElement.input(String[] values, int delay)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(String text)", "modifiers": "@Override public", "return": "Element", "signature": "Element select(String text)", "full_signature": "@Override public Element select(String text)", "class_method_signature": "DriverElement.select(String text)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(int index)", "modifiers": "@Override public", "return": "Element", "signature": "Element select(int index)", "full_signature": "@Override public Element select(int index)", "class_method_signature": "DriverElement.select(int index)", "testcase": false, "constructor": false}, {"identifier": "switchFrame", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element switchFrame()", "full_signature": "@Override public Element switchFrame()", "class_method_signature": "DriverElement.switchFrame()", "testcase": false, "constructor": false}, {"identifier": "delay", "parameters": "(int millis)", "modifiers": "@Override public", "return": "Element", "signature": "Element delay(int millis)", "full_signature": "@Override public Element delay(int millis)", "class_method_signature": "DriverElement.delay(int millis)", "testcase": false, "constructor": false}, {"identifier": "retry", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element retry()", "full_signature": "@Override public Element retry()", "class_method_signature": "DriverElement.retry()", "testcase": false, "constructor": false}, {"identifier": "retry", "parameters": "(int count)", "modifiers": "@Override public", "return": "Element", "signature": "Element retry(int count)", "full_signature": "@Override public Element retry(int count)", "class_method_signature": "DriverElement.retry(int count)", "testcase": false, "constructor": false}, {"identifier": "retry", "parameters": "(Integer count, Integer interval)", "modifiers": "@Override public", "return": "Element", "signature": "Element retry(Integer count, Integer interval)", "full_signature": "@Override public Element retry(Integer count, Integer interval)", "class_method_signature": "DriverElement.retry(Integer count, Integer interval)", "testcase": false, "constructor": false}, {"identifier": "waitFor", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element waitFor()", "full_signature": "@Override public Element waitFor()", "class_method_signature": "DriverElement.waitFor()", "testcase": false, "constructor": false}, {"identifier": "waitForText", "parameters": "(String text)", "modifiers": "@Override public", "return": "Element", "signature": "Element waitForText(String text)", "full_signature": "@Override public Element waitForText(String text)", "class_method_signature": "DriverElement.waitForText(String text)", "testcase": false, "constructor": false}, {"identifier": "waitUntil", "parameters": "(String expression)", "modifiers": "@Override public", "return": "Element", "signature": "Element waitUntil(String expression)", "full_signature": "@Override public Element waitUntil(String expression)", "class_method_signature": "DriverElement.waitUntil(String expression)", "testcase": false, "constructor": false}, {"identifier": "script", "parameters": "(String expression)", "modifiers": "@Override public", "return": "Object", "signature": "Object script(String expression)", "full_signature": "@Override public Object script(String expression)", "class_method_signature": "DriverElement.script(String expression)", "testcase": false, "constructor": false}, {"identifier": "thisLocator", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String thisLocator()", "full_signature": "private String thisLocator()", "class_method_signature": "DriverElement.thisLocator()", "testcase": false, "constructor": false}, {"identifier": "optional", "parameters": "(String locator)", "modifiers": "@Override public", "return": "Element", "signature": "Element optional(String locator)", "full_signature": "@Override public Element optional(String locator)", "class_method_signature": "DriverElement.optional(String locator)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String locator)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(String locator)", "full_signature": "@Override public boolean exists(String locator)", "class_method_signature": "DriverElement.exists(String locator)", "testcase": false, "constructor": false}, {"identifier": "locate", "parameters": "(String locator)", "modifiers": "@Override public", "return": "Element", "signature": "Element locate(String locator)", "full_signature": "@Override public Element locate(String locator)", "class_method_signature": "DriverElement.locate(String locator)", "testcase": false, "constructor": false}, {"identifier": "locateAll", "parameters": "(String locator)", "modifiers": "@Override public", "return": "List<Element>", "signature": "List<Element> locateAll(String locator)", "full_signature": "@Override public List<Element> locateAll(String locator)", "class_method_signature": "DriverElement.locateAll(String locator)", "testcase": false, "constructor": false}, {"identifier": "refsToElements", "parameters": "(List<String> refs)", "modifiers": "private", "return": "List<Element>", "signature": "List<Element> refsToElements(List<String> refs)", "full_signature": "private List<Element> refsToElements(List<String> refs)", "class_method_signature": "DriverElement.refsToElements(List<String> refs)", "testcase": false, "constructor": false}, {"identifier": "attribute", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "signature": "String attribute(String name)", "full_signature": "@Override public String attribute(String name)", "class_method_signature": "DriverElement.attribute(String name)", "testcase": false, "constructor": false}, {"identifier": "property", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "signature": "String property(String name)", "full_signature": "@Override public String property(String name)", "class_method_signature": "DriverElement.property(String name)", "testcase": false, "constructor": false}, {"identifier": "getHtml", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getHtml()", "full_signature": "@Override public String getHtml()", "class_method_signature": "DriverElement.getHtml()", "testcase": false, "constructor": false}, {"identifier": "setHtml", "parameters": "(String html)", "modifiers": "@Override public", "return": "void", "signature": "void setHtml(String html)", "full_signature": "@Override public void setHtml(String html)", "class_method_signature": "DriverElement.setHtml(String html)", "testcase": false, "constructor": false}, {"identifier": "getText", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getText()", "full_signature": "@Override public String getText()", "class_method_signature": "DriverElement.getText()", "testcase": false, "constructor": false}, {"identifier": "setText", "parameters": "(String text)", "modifiers": "@Override public", "return": "void", "signature": "void setText(String text)", "full_signature": "@Override public void setText(String text)", "class_method_signature": "DriverElement.setText(String text)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getValue()", "full_signature": "@Override public String getValue()", "class_method_signature": "DriverElement.getValue()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(String value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(String value)", "full_signature": "@Override public void setValue(String value)", "class_method_signature": "DriverElement.setValue(String value)", "testcase": false, "constructor": false}, {"identifier": "relationLocator", "parameters": "(String relation)", "modifiers": "private", "return": "Element", "signature": "Element relationLocator(String relation)", "full_signature": "private Element relationLocator(String relation)", "class_method_signature": "DriverElement.relationLocator(String relation)", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element getParent()", "full_signature": "@Override public Element getParent()", "class_method_signature": "DriverElement.getParent()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "@Override public", "return": "List<Element>", "signature": "List<Element> getChildren()", "full_signature": "@Override public List<Element> getChildren()", "class_method_signature": "DriverElement.getChildren()", "testcase": false, "constructor": false}, {"identifier": "getFirstChild", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element getFirstChild()", "full_signature": "@Override public Element getFirstChild()", "class_method_signature": "DriverElement.getFirstChild()", "testcase": false, "constructor": false}, {"identifier": "getLastChild", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element getLastChild()", "full_signature": "@Override public Element getLastChild()", "class_method_signature": "DriverElement.getLastChild()", "testcase": false, "constructor": false}, {"identifier": "getPreviousSibling", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element getPreviousSibling()", "full_signature": "@Override public Element getPreviousSibling()", "class_method_signature": "DriverElement.getPreviousSibling()", "testcase": false, "constructor": false}, {"identifier": "getNextSibling", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element getNextSibling()", "full_signature": "@Override public Element getNextSibling()", "class_method_signature": "DriverElement.getNextSibling()", "testcase": false, "constructor": false}, {"identifier": "rightOf", "parameters": "()", "modifiers": "@Override public", "return": "Finder", "signature": "Finder rightOf()", "full_signature": "@Override public Finder rightOf()", "class_method_signature": "DriverElement.rightOf()", "testcase": false, "constructor": false}, {"identifier": "leftOf", "parameters": "()", "modifiers": "@Override public", "return": "Finder", "signature": "Finder leftOf()", "full_signature": "@Override public Finder leftOf()", "class_method_signature": "DriverElement.leftOf()", "testcase": false, "constructor": false}, {"identifier": "above", "parameters": "()", "modifiers": "@Override public", "return": "Finder", "signature": "Finder above()", "full_signature": "@Override public Finder above()", "class_method_signature": "DriverElement.above()", "testcase": false, "constructor": false}, {"identifier": "below", "parameters": "()", "modifiers": "@Override public", "return": "Finder", "signature": "Finder below()", "full_signature": "@Override public Finder below()", "class_method_signature": "DriverElement.below()", "testcase": false, "constructor": false}, {"identifier": "near", "parameters": "()", "modifiers": "@Override public", "return": "Finder", "signature": "Finder near()", "full_signature": "@Override public Finder near()", "class_method_signature": "DriverElement.near()", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/driver/DriverElement.java"}, "focal_method": {"identifier": "locatorExists", "parameters": "(Driver driver, String locator)", "modifiers": "public static", "return": "Element", "body": "public static Element locatorExists(Driver driver, String locator) {\n        return new DriverElement(driver, locator, true);\n    }", "signature": "Element locatorExists(Driver driver, String locator)", "full_signature": "public static Element locatorExists(Driver driver, String locator)", "class_method_signature": "DriverElement.locatorExists(Driver driver, String locator)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}