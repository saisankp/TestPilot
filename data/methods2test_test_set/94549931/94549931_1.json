{"test_class": {"identifier": "MainTest", "superclass": "", "interfaces": "", "fields": [], "file": "blobit-cli/src/test/java/org/blobit/cli/MainTest.java"}, "test_case": {"identifier": "testSetZk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetZk() throws Exception {\n        CommandCreateBucket cl = Main.parseCommandLine(new String[]{\"createbucket\", \"--bucket\", \"foo\",\n            \"--zk\", \"localhost:1234\"});\n        System.out.println(\"res:\" + cl);\n        assertEquals(\"foo\", cl.bucket);\n        assertEquals(\"localhost:1234\", cl.zk);\n    }", "signature": "void testSetZk()", "full_signature": "@Test public void testSetZk()", "class_method_signature": "MainTest.testSetZk()", "testcase": true, "constructor": false, "invocations": ["parseCommandLine", "println", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "Main", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "main", "parameters": "(String... args)", "modifiers": "public static", "return": "void", "signature": "void main(String... args)", "full_signature": "public static void main(String... args)", "class_method_signature": "Main.main(String... args)", "testcase": false, "constructor": false}, {"identifier": "parseCommandLine", "parameters": "(String[] args)", "modifiers": "public static", "return": "T", "signature": "T parseCommandLine(String[] args)", "full_signature": "public static T parseCommandLine(String[] args)", "class_method_signature": "Main.parseCommandLine(String[] args)", "testcase": false, "constructor": false}], "file": "blobit-cli/src/main/java/org/blobit/cli/Main.java"}, "focal_method": {"identifier": "parseCommandLine", "parameters": "(String[] args)", "modifiers": "public static", "return": "T", "body": "public static <T extends AbstractCommand> T parseCommandLine(String[] args) throws Exception {\n        CommandContext cm = new CommandContext();\n        JCommander jc = JCommander.newBuilder()\n                .programName(\"blobit.sh\")\n                .addObject(cm)\n                .addCommand(\"createbucket\", new CommandCreateBucket(cm))\n                .addCommand(\"deletebucket\", new CommandDeleteBucket(cm))\n                .addCommand(\"gcbucket\", new CommandGcBucket(cm))\n                .addCommand(\"listbuckets\", new CommandListBuckets(cm))\n                .addCommand(\"put\", new CommandPut(cm))\n                .addCommand(\"get\", new CommandGet(cm))\n                .addCommand(\"stat\", new CommandStat(cm))\n                .addCommand(\"ls\", new CommandLs(cm))\n                .addCommand(\"help\", new CommandHelp(cm))\n                .build();\n        cm.jCommander = jc;\n        try {\n            jc.parse(args);\n        } catch (ParameterException err) {\n            System.out.println(\"Error: \" + err.getMessage());\n            return (T) new CommandHelp(cm);\n        }\n        if (jc.getParsedCommand() == null) {\n            return (T) new CommandHelp(cm);\n        }\n        return (T) jc.getCommands().get(jc.getParsedCommand()).getObjects().get(0);\n    }", "signature": "T parseCommandLine(String[] args)", "full_signature": "public static T parseCommandLine(String[] args)", "class_method_signature": "Main.parseCommandLine(String[] args)", "testcase": false, "constructor": false, "invocations": ["build", "addCommand", "addCommand", "addCommand", "addCommand", "addCommand", "addCommand", "addCommand", "addCommand", "addCommand", "addObject", "programName", "newBuilder", "parse", "println", "getMessage", "getParsedCommand", "get", "getObjects", "get", "getCommands", "getParsedCommand"]}, "repository": {"repo_id": 94549931, "url": "https://github.com/diennea/blobit", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 15, "size": 1058, "license": "licensed"}}