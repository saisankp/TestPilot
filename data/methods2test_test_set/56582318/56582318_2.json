{"test_class": {"identifier": "CollectionsUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "geoxygene-util/src/test/java/fr/ign/cogit/geoxygene/util/CollectionsUtilTest.java"}, "test_case": {"identifier": "testGetEditDistance2Lists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetEditDistance2Lists() {\n    List<Integer> list1 = new ArrayList<Integer>();\n    list1.add(1);\n    list1.add(2);\n    list1.add(3);\n    List<Integer> list2 = new ArrayList<Integer>();\n    list2.add(1);\n    list2.add(2);\n    list2.add(3);\n    List<Integer> list3 = new ArrayList<Integer>();\n    list3.add(2);\n    list3.add(2);\n    list3.add(3);\n    List<Integer> list4 = new ArrayList<Integer>();\n    list4.add(2);\n    list4.add(1);\n    list4.add(3);\n    List<Integer> list5 = new ArrayList<Integer>();\n    list5.add(2);\n    list5.add(1);\n    list5.add(2);\n    System.out.println(CollectionsUtil.getEditDistance2Lists(list1, list2));\n    System.out.println(CollectionsUtil.getEditDistance2Lists(list1, list3));\n    System.out.println(CollectionsUtil.getEditDistance2Lists(list1, list4));\n    System.out.println(CollectionsUtil.getEditDistance2Lists(list1, list5));\n    Assert.assertTrue(CollectionsUtil.getEditDistance2Lists(list1, list2) == 0);\n    Assert.assertTrue(CollectionsUtil.getEditDistance2Lists(list1, list3) == 1);\n    Assert.assertTrue(CollectionsUtil.getEditDistance2Lists(list1, list4) == 2);\n    Assert.assertTrue(CollectionsUtil.getEditDistance2Lists(list1, list5) == 2);\n  }", "signature": "void testGetEditDistance2Lists()", "full_signature": "@Test public void testGetEditDistance2Lists()", "class_method_signature": "CollectionsUtilTest.testGetEditDistance2Lists()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "println", "getEditDistance2Lists", "println", "getEditDistance2Lists", "println", "getEditDistance2Lists", "println", "getEditDistance2Lists", "assertTrue", "getEditDistance2Lists", "assertTrue", "getEditDistance2Lists", "assertTrue", "getEditDistance2Lists", "assertTrue", "getEditDistance2Lists"]}, "focal_class": {"identifier": "CollectionsUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "sortByValue", "parameters": "(\n      Map<K, V> map)", "modifiers": "public static", "return": "LinkedHashMap<K, V>", "signature": "LinkedHashMap<K, V> sortByValue(\n      Map<K, V> map)", "full_signature": "public static LinkedHashMap<K, V> sortByValue(\n      Map<K, V> map)", "class_method_signature": "CollectionsUtil.sortByValue(\n      Map<K, V> map)", "testcase": false, "constructor": false}, {"identifier": "sortByValueDescending", "parameters": "(\n      Map<K, V> map)", "modifiers": "public static", "return": "LinkedHashMap<K, V>", "signature": "LinkedHashMap<K, V> sortByValueDescending(\n      Map<K, V> map)", "full_signature": "public static LinkedHashMap<K, V> sortByValueDescending(\n      Map<K, V> map)", "class_method_signature": "CollectionsUtil.sortByValueDescending(\n      Map<K, V> map)", "testcase": false, "constructor": false}, {"identifier": "getHammingDistance2Lists", "parameters": "(List<? extends Object> list1,\n      List<? extends Object> list2)", "modifiers": "public static", "return": "int", "signature": "int getHammingDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "full_signature": "public static int getHammingDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "class_method_signature": "CollectionsUtil.getHammingDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "testcase": false, "constructor": false}, {"identifier": "getHammingDistance2DiffLists", "parameters": "(List<? extends Object> list1,\n      List<? extends Object> list2)", "modifiers": "public static", "return": "int", "signature": "int getHammingDistance2DiffLists(List<? extends Object> list1,\n      List<? extends Object> list2)", "full_signature": "public static int getHammingDistance2DiffLists(List<? extends Object> list1,\n      List<? extends Object> list2)", "class_method_signature": "CollectionsUtil.getHammingDistance2DiffLists(List<? extends Object> list1,\n      List<? extends Object> list2)", "testcase": false, "constructor": false}, {"identifier": "getEditDistance2Lists", "parameters": "(List<? extends Object> list1,\n      List<? extends Object> list2)", "modifiers": "public static", "return": "int", "signature": "int getEditDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "full_signature": "public static int getEditDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "class_method_signature": "CollectionsUtil.getEditDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "testcase": false, "constructor": false}, {"identifier": "getJaroWinklerDistance2Lists", "parameters": "(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor)", "modifiers": "public static", "return": "double", "signature": "double getJaroWinklerDistance2Lists(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor)", "full_signature": "public static double getJaroWinklerDistance2Lists(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor)", "class_method_signature": "CollectionsUtil.getJaroWinklerDistance2Lists(\n      List<? extends Object> list1, List<? extends Object> list2,\n      double scalingFactor)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(List<? extends Object> list1,\n      List<? extends Object> list2)", "modifiers": "private static", "return": "int[]", "signature": "int[] matches(List<? extends Object> list1,\n      List<? extends Object> list2)", "full_signature": "private static int[] matches(List<? extends Object> list1,\n      List<? extends Object> list2)", "class_method_signature": "CollectionsUtil.matches(List<? extends Object> list1,\n      List<? extends Object> list2)", "testcase": false, "constructor": false}], "file": "geoxygene-util/src/main/java/fr/ign/cogit/geoxygene/util/CollectionsUtil.java"}, "focal_method": {"identifier": "getEditDistance2Lists", "parameters": "(List<? extends Object> list1,\n      List<? extends Object> list2)", "modifiers": "public static", "return": "int", "body": "public static int getEditDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2) {\n    // For all i and j, d[i][j] will hold the Levenshtein (edit) distance\n    // between\n    // the first i characters of s and the first j characters of t.\n    // Note that d has (m+1) x (n+1) values.\n    int[][] d = new int[list1.size() + 1][list2.size() + 1];\n\n    for (int i = 0; i < list1.size() + 1; i++) {\n      // the distance of any first string to an empty second string\n      // (transforming the string of the first i characters of s into\n      // the empty string requires i deletions)\n      d[i][0] = i;\n    }\n    for (int i = 0; i < list2.size() + 1; i++) {\n      // the distance of any second string to an empty first string\n      d[0][i] = i;\n    }\n    for (int j = 1; j < list2.size() + 1; j++) {\n      for (int i = 1; i < list1.size() + 1; i++) {\n        if (list1.get(i - 1).equals(list2.get(j - 1))) {\n          // no operation required\n          d[i][j] = d[i - 1][j - 1];\n        } else {\n          // d[i][j] is the minimum between a deletion, an insertion, or a\n          // substitution\n          d[i][j] = Math.min(d[i - 1][j] + 1,\n              Math.min(d[i][j - 1] + 1, d[i - 1][j - 1] + 1));\n        }\n      }\n    }\n    return d[list1.size()][list2.size()];\n  }", "signature": "int getEditDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "full_signature": "public static int getEditDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "class_method_signature": "CollectionsUtil.getEditDistance2Lists(List<? extends Object> list1,\n      List<? extends Object> list2)", "testcase": false, "constructor": false, "invocations": ["size", "size", "size", "size", "size", "size", "equals", "get", "get", "min", "min", "size", "size"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}