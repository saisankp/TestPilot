{"test_class": {"identifier": "ConfigManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/config/ConfigManagerTest.java"}, "test_case": {"identifier": "loadPrefixedConfigItems_singlePrefix", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void loadPrefixedConfigItems_singlePrefix() throws IOException, ConfigKeysNotRecognisedException {\n        Builder builder = new Builder(new String[]{});\n\n        ConfigManager configManager = builder.loadConfigFromResourceOrFile(\n                ImmutableList.of(\"src/test/prefixes-test-config-file.properties\"),\n                ImmutableSet.of(TestConfig.class, TestConfigDummy.class))\n                .build();\n\n        Config<TestConfig> testConfig = configManager.getConfig(TestConfig.class);\n\n        // Default (initial) config values.\n        assertThat(testConfig.getValue(TestConfig.FOO).asInt()).isEqualTo(1);\n        assertThat(testConfig.getValue(TestConfig.BAR).asInt()).isEqualTo(2);\n\n        Config<TestConfig> prefixedConfig = testConfig.getPrefixedConfigItems(\"Prefix1\");\n\n        // Enum keys for prefixed config items. Note that keys with a different Prefix (e.g. BAZ) will still appear in getValues.\n        assertThat(prefixedConfig.getValues().keySet()).isEqualTo(ImmutableSet.of(\n                TestConfig.FOO,\n                TestConfig.BAR,\n                TestConfig.BAZ));\n\n        // Get values for prefixed config files.\n        assertThat(prefixedConfig.getValue(TestConfig.FOO).asInt()).isEqualTo(3);\n        assertThat(prefixedConfig.getValue(TestConfig.BAR).asInt()).isEqualTo(4);\n        assertThat(prefixedConfig.areKeyAndValueDefined(TestConfig.BAZ)).isFalse();\n    }", "signature": "void loadPrefixedConfigItems_singlePrefix()", "full_signature": "@Test void loadPrefixedConfigItems_singlePrefix()", "class_method_signature": "ConfigManagerTest.loadPrefixedConfigItems_singlePrefix()", "testcase": true, "constructor": false, "invocations": ["build", "loadConfigFromResourceOrFile", "of", "of", "getConfig", "isEqualTo", "assertThat", "asInt", "getValue", "isEqualTo", "assertThat", "asInt", "getValue", "getPrefixedConfigItems", "isEqualTo", "assertThat", "keySet", "getValues", "of", "isEqualTo", "assertThat", "asInt", "getValue", "isEqualTo", "assertThat", "asInt", "getValue", "isFalse", "assertThat", "areKeyAndValueDefined"]}, "focal_class": {"identifier": "ConfigManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final CLISetup commandLineArgs;", "modifier": "public final", "type": "CLISetup", "declarator": "commandLineArgs", "var_name": "commandLineArgs"}, {"original_string": "private final ImmutableMap<Class<? extends Enum<?>>, Config<?>> config;", "modifier": "private final", "type": "ImmutableMap<Class<? extends Enum<?>>, Config<?>>", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "ConfigManager", "parameters": "(CLISetup commandLineArgs, ImmutableMap<Class<? extends Enum<?>>, Config<?>> config)", "modifiers": "private", "return": "", "signature": " ConfigManager(CLISetup commandLineArgs, ImmutableMap<Class<? extends Enum<?>>, Config<?>> config)", "full_signature": "private  ConfigManager(CLISetup commandLineArgs, ImmutableMap<Class<? extends Enum<?>>, Config<?>> config)", "class_method_signature": "ConfigManager.ConfigManager(CLISetup commandLineArgs, ImmutableMap<Class<? extends Enum<?>>, Config<?>> config)", "testcase": false, "constructor": true}, {"identifier": "getConfig", "parameters": "(Class<E> clazz)", "modifiers": "@SuppressWarnings({\"unchecked\"}) //Effectively checked on insert (see the Builder below) public", "return": "Config<E>", "signature": "Config<E> getConfig(Class<E> clazz)", "full_signature": "@SuppressWarnings({\"unchecked\"}) //Effectively checked on insert (see the Builder below) public Config<E> getConfig(Class<E> clazz)", "class_method_signature": "ConfigManager.getConfig(Class<E> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllConfig", "parameters": "()", "modifiers": "public", "return": "ImmutableCollection<Config<?>>", "signature": "ImmutableCollection<Config<?>> getAllConfig()", "full_signature": "public ImmutableCollection<Config<?>> getAllConfig()", "class_method_signature": "ConfigManager.getAllConfig()", "testcase": false, "constructor": false}, {"identifier": "getPrefixBiasedConfigManager", "parameters": "(String prefix)", "modifiers": "public", "return": "ConfigManager", "signature": "ConfigManager getPrefixBiasedConfigManager(String prefix)", "full_signature": "public ConfigManager getPrefixBiasedConfigManager(String prefix)", "class_method_signature": "ConfigManager.getPrefixBiasedConfigManager(String prefix)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/config/ConfigManager.java"}, "focal_method": {"identifier": "getConfig", "parameters": "(Class<E> clazz)", "modifiers": "@SuppressWarnings({\"unchecked\"}) //Effectively checked on insert (see the Builder below) public", "return": "Config<E>", "body": "@SuppressWarnings({\"unchecked\"}) //Effectively checked on insert (see the Builder below)\n    public <E extends Enum<E>> Config<E> getConfig(Class<E> clazz) {\n        return (Config<E>) Preconditions.checkNotNull(config.get(clazz), \"No config loaded for root: %s\", clazz.getSimpleName());\n    }", "signature": "Config<E> getConfig(Class<E> clazz)", "full_signature": "@SuppressWarnings({\"unchecked\"}) //Effectively checked on insert (see the Builder below) public Config<E> getConfig(Class<E> clazz)", "class_method_signature": "ConfigManager.getConfig(Class<E> clazz)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "get", "getSimpleName"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}