{"test_class": {"identifier": "ContourProcessTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOL = 1.0e-6;", "modifier": "private static final", "type": "double", "declarator": "TOL = 1.0e-6", "var_name": "TOL"}, {"original_string": "private static final GridCoverageFactory covFactory = CoverageFactoryFinder.getGridCoverageFactory(null);", "modifier": "private static final", "type": "GridCoverageFactory", "declarator": "covFactory = CoverageFactoryFinder.getGridCoverageFactory(null)", "var_name": "covFactory"}, {"original_string": "private ContourProcess process;", "modifier": "private", "type": "ContourProcess", "declarator": "process", "var_name": "process"}], "file": "modules/unsupported/process-raster/src/test/java/org/geotools/process/raster/ContourProcessTest.java"}, "test_case": {"identifier": "singleContourInVerticalGradient", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void singleContourInVerticalGradient() {\n        final int COVERAGE_COLS = 10;\n        final int COVERAGE_ROWS = 2;\n        \n        final double CELL_SIZE = 100;\n        \n        final ReferencedEnvelope WORLD = new ReferencedEnvelope(\n                1000, 1000 + COVERAGE_COLS * CELL_SIZE, \n                5000, 5000 + COVERAGE_ROWS * CELL_SIZE, null);\n        \n        final float DATA_MIN = 100;\n        final float DATA_MAX = 200;\n        \n        GridCoverage2D cov = createVerticalGradient(\n                COVERAGE_ROWS, COVERAGE_COLS, WORLD, DATA_MIN, DATA_MAX);\n        \n        final double levelValue = (DATA_MIN + DATA_MAX) / 2; \n        \n        SimpleFeatureCollection fc = process.execute(\n                cov, 0, new double[] {levelValue}, null, null, null, null, null);\n\n        // Should be a single contour\n        assertEquals(1, fc.size());\n        \n        SimpleFeatureIterator iter = fc.features();\n        SimpleFeature feature = null;\n        try {\n            feature = iter.next();\n        } finally {\n            iter.close();\n        }\n        \n        // Check contour value\n        Double value = (Double) feature.getAttribute(\"value\");\n        assertEquals(levelValue, value, TOL);\n                \n        LineString contour = (LineString) feature.getDefaultGeometry();\n        Coordinate[] coords = contour.getCoordinates();\n                \n        // Contour should have had co-linear vertices removed by default\n        assertEquals(2, coords.length);\n                \n        // Contour end-point X ordinates should be within half cell-width of\n        // coverage X extrema\n        double minX = Math.min(coords[0].x, coords[1].x);\n        assertEquals(WORLD.getMinX(), minX, CELL_SIZE / 2 + TOL);\n        double maxX = Math.max(coords[0].x, coords[1].x);\n        assertEquals(WORLD.getMaxX(), maxX, CELL_SIZE / 2 + TOL);\n                \n        // Contour Y ordinate should be at mid-Y of coverage and\n        // contour should be horizontal\n        double expectedY = (WORLD.getMinY() + WORLD.getMaxY()) / 2;\n        assertEquals(expectedY, coords[0].y, TOL);\n        assertEquals(expectedY, coords[1].y, TOL);\n    }", "signature": "void singleContourInVerticalGradient()", "full_signature": "@Test public void singleContourInVerticalGradient()", "class_method_signature": "ContourProcessTest.singleContourInVerticalGradient()", "testcase": true, "constructor": false, "invocations": ["createVerticalGradient", "execute", "assertEquals", "size", "features", "next", "close", "getAttribute", "assertEquals", "getDefaultGeometry", "getCoordinates", "assertEquals", "min", "assertEquals", "getMinX", "max", "assertEquals", "getMaxX", "getMinY", "getMaxY", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "ContourProcess", "superclass": "", "interfaces": "implements RasterProcess", "fields": [{"original_string": "private static final InternationalString NO_DATA = Vocabulary\n            .formatInternational(VocabularyKeys.NODATA);", "modifier": "private static final", "type": "InternationalString", "declarator": "NO_DATA = Vocabulary\n            .formatInternational(VocabularyKeys.NODATA)", "var_name": "NO_DATA"}], "methods": [{"identifier": "process", "parameters": "(GridCoverage2D gc2d, Integer band,\n            double[] levels, Double interval, Boolean simplify, Boolean smooth, Geometry roi,\n            ProgressListener progressListener)", "modifiers": "public static", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection process(GridCoverage2D gc2d, Integer band,\n            double[] levels, Double interval, Boolean simplify, Boolean smooth, Geometry roi,\n            ProgressListener progressListener)", "full_signature": "public static SimpleFeatureCollection process(GridCoverage2D gc2d, Integer band,\n            double[] levels, Double interval, Boolean simplify, Boolean smooth, Geometry roi,\n            ProgressListener progressListener)", "class_method_signature": "ContourProcess.process(GridCoverage2D gc2d, Integer band,\n            double[] levels, Double interval, Boolean simplify, Boolean smooth, Geometry roi,\n            ProgressListener progressListener)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"band\", description = \"Name of band to use for values to be contoured\", min = 0, max = 1) Integer band,\n            @DescribeParameter(name = \"levels\", description = \"Values of levels at which to generate contours\") double[] levels,\n            @DescribeParameter(name = \"interval\", description = \"Interval between contour values (ignored if levels parameter is supplied)\", min = 0, minValue = 0) Double interval,\n            @DescribeParameter(name = \"simplify\", description = \"Indicates whether contour lines are simplified\", min = 0) Boolean simplify,\n            @DescribeParameter(name = \"smooth\", description = \"Indicates whether contour lines are smoothed using Bezier smoothing\", min = 0) Boolean smooth,\n            @DescribeParameter(name = \"roi\", description = \"Geometry delineating the region of interest (in raster coordinate system)\", min = 0) Geometry roi,\n            ProgressListener progressListener)", "modifiers": "@DescribeResult(name = \"result\", description = \"Contour line features. Contour level is in value attribute.\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"band\", description = \"Name of band to use for values to be contoured\", min = 0, max = 1) Integer band,\n            @DescribeParameter(name = \"levels\", description = \"Values of levels at which to generate contours\") double[] levels,\n            @DescribeParameter(name = \"interval\", description = \"Interval between contour values (ignored if levels parameter is supplied)\", min = 0, minValue = 0) Double interval,\n            @DescribeParameter(name = \"simplify\", description = \"Indicates whether contour lines are simplified\", min = 0) Boolean simplify,\n            @DescribeParameter(name = \"smooth\", description = \"Indicates whether contour lines are smoothed using Bezier smoothing\", min = 0) Boolean smooth,\n            @DescribeParameter(name = \"roi\", description = \"Geometry delineating the region of interest (in raster coordinate system)\", min = 0) Geometry roi,\n            ProgressListener progressListener)", "full_signature": "@DescribeResult(name = \"result\", description = \"Contour line features. Contour level is in value attribute.\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"band\", description = \"Name of band to use for values to be contoured\", min = 0, max = 1) Integer band,\n            @DescribeParameter(name = \"levels\", description = \"Values of levels at which to generate contours\") double[] levels,\n            @DescribeParameter(name = \"interval\", description = \"Interval between contour values (ignored if levels parameter is supplied)\", min = 0, minValue = 0) Double interval,\n            @DescribeParameter(name = \"simplify\", description = \"Indicates whether contour lines are simplified\", min = 0) Boolean simplify,\n            @DescribeParameter(name = \"smooth\", description = \"Indicates whether contour lines are smoothed using Bezier smoothing\", min = 0) Boolean smooth,\n            @DescribeParameter(name = \"roi\", description = \"Geometry delineating the region of interest (in raster coordinate system)\", min = 0) Geometry roi,\n            ProgressListener progressListener)", "class_method_signature": "ContourProcess.execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"band\", description = \"Name of band to use for values to be contoured\", min = 0, max = 1) Integer band,\n            @DescribeParameter(name = \"levels\", description = \"Values of levels at which to generate contours\") double[] levels,\n            @DescribeParameter(name = \"interval\", description = \"Interval between contour values (ignored if levels parameter is supplied)\", min = 0, minValue = 0) Double interval,\n            @DescribeParameter(name = \"simplify\", description = \"Indicates whether contour lines are simplified\", min = 0) Boolean simplify,\n            @DescribeParameter(name = \"smooth\", description = \"Indicates whether contour lines are smoothed using Bezier smoothing\", min = 0) Boolean smooth,\n            @DescribeParameter(name = \"roi\", description = \"Geometry delineating the region of interest (in raster coordinate system)\", min = 0) Geometry roi,\n            ProgressListener progressListener)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-raster/src/main/java/org/geotools/process/raster/ContourProcess.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"band\", description = \"Name of band to use for values to be contoured\", min = 0, max = 1) Integer band,\n            @DescribeParameter(name = \"levels\", description = \"Values of levels at which to generate contours\") double[] levels,\n            @DescribeParameter(name = \"interval\", description = \"Interval between contour values (ignored if levels parameter is supplied)\", min = 0, minValue = 0) Double interval,\n            @DescribeParameter(name = \"simplify\", description = \"Indicates whether contour lines are simplified\", min = 0) Boolean simplify,\n            @DescribeParameter(name = \"smooth\", description = \"Indicates whether contour lines are smoothed using Bezier smoothing\", min = 0) Boolean smooth,\n            @DescribeParameter(name = \"roi\", description = \"Geometry delineating the region of interest (in raster coordinate system)\", min = 0) Geometry roi,\n            ProgressListener progressListener)", "modifiers": "@DescribeResult(name = \"result\", description = \"Contour line features. Contour level is in value attribute.\") public", "return": "SimpleFeatureCollection", "body": "@DescribeResult(name = \"result\", description = \"Contour line features.  Contour level is in value attribute.\")\n    public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"band\", description = \"Name of band to use for values to be contoured\", min = 0, max = 1) Integer band,\n            @DescribeParameter(name = \"levels\", description = \"Values of levels at which to generate contours\") double[] levels,\n            @DescribeParameter(name = \"interval\", description = \"Interval between contour values (ignored if levels parameter is supplied)\", min = 0, minValue = 0) Double interval,\n            @DescribeParameter(name = \"simplify\", description = \"Indicates whether contour lines are simplified\", min = 0) Boolean simplify,\n            @DescribeParameter(name = \"smooth\", description = \"Indicates whether contour lines are smoothed using Bezier smoothing\", min = 0) Boolean smooth,\n            @DescribeParameter(name = \"roi\", description = \"Geometry delineating the region of interest (in raster coordinate system)\", min = 0) Geometry roi,\n            ProgressListener progressListener) throws ProcessException {\n\n        //\n        // initial checks\n        //\n        if (gc2d == null) {\n            throw new ProcessException(\"Invalid input, source grid coverage should be not null\");\n        }\n        if (band != null && (band < 0 || band >= gc2d.getNumSampleDimensions())) {\n            throw new ProcessException(\"Invalid input, invalid band number:\" + band);\n        }\n        boolean hasValues = !(levels == null || levels.length == 0);\n        if (!hasValues && interval == null) {\n            throw new ProcessException(\"One between interval and values must be valid\");\n\n        }\n\n        // switch to geophisics if necessary\n        gc2d = gc2d.view(ViewType.GEOPHYSICS);\n\n        //\n        // GRID TO WORLD preparation\n        //\n        final AffineTransform mt2D = (AffineTransform) gc2d.getGridGeometry().getGridToCRS2D(\n                PixelOrientation.CENTER);\n\n        // get the list of nodata, if any\n        List<Object> noDataList = new ArrayList<Object>();\n        for (GridSampleDimension sd : gc2d.getSampleDimensions()) {\n            // grab all the explicit nodata\n            final double[] sdNoData = sd.getNoDataValues();\n            if (sdNoData != null) {\n                for (double nodata : sdNoData) {\n                    noDataList.add(nodata);\n                }\n            }\n\n            // handle also readers setting up nodata in a category with a specific name\n            if (sd.getCategories() != null) {\n                for (Category cat : sd.getCategories()) {\n                    if (cat.getName().equals(NO_DATA)) {\n                        final NumberRange<? extends Number> catRange = cat.getRange();\n                        if (!Double.isNaN(catRange.getMinimum())) {\n                            if (catRange.getMinimum() == catRange.getMaximum()) {\n                                noDataList.add(catRange.getMinimum());\n                            } else {\n                                Range<Double> noData = new Range<Double>(catRange.getMinimum(),\n                                        catRange.isMinIncluded(), catRange.getMaximum(),\n                                        catRange.isMaxIncluded());\n                                noDataList.add(noData);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // get the rendered image\n        final RenderedImage raster = gc2d.getRenderedImage();\n\n        // perform jai operation\n        ParameterBlockJAI pb = new ParameterBlockJAI(\"Contour\");\n        pb.setSource(\"source0\", raster);\n\n        if (roi != null) {\n            pb.setParameter(\"roi\", CoverageUtilities.prepareROI(roi, mt2D));\n        }\n        \n        if (band != null) {\n            pb.setParameter(\"band\", band);\n        }\n        \n        if (levels != null && levels.length > 0) {\n            final ArrayList<Double> elements = new ArrayList<Double>(levels.length);\n            for (double level : levels)\n                elements.add(level);\n            pb.setParameter(\"levels\", elements);\n        } else {\n            pb.setParameter(\"interval\", interval);\n        }\n        \n        if (simplify != null) {\n            pb.setParameter(\"simplify\", simplify);\n        }\n        \n        if (smooth != null) {\n            pb.setParameter(\"smooth\", smooth);\n        }\n        \n        if (!noDataList.isEmpty()) {\n            pb.setParameter(\"nodata\", noDataList);\n        }\n\n        final RenderedOp dest = JAI.create(\"Contour\", pb);\n        @SuppressWarnings(\"unchecked\")\n        final Collection<LineString> prop = (Collection<LineString>) dest\n                .getProperty(ContourDescriptor.CONTOUR_PROPERTY_NAME);\n\n        // wrap as a feature collection and return\n        final SimpleFeatureType schema = CoverageUtilities\n                .createFeatureType(gc2d, LineString.class);\n        final SimpleFeatureBuilder builder = new SimpleFeatureBuilder(schema);\n        int i = 0;\n        final ListFeatureCollection featureCollection = new ListFeatureCollection(schema);\n        final AffineTransformation jtsTransformation = new AffineTransformation(mt2D.getScaleX(),\n                mt2D.getShearX(), mt2D.getTranslateX(), mt2D.getShearY(), mt2D.getScaleY(),\n                mt2D.getTranslateY());\n        for (LineString line : prop) {\n\n            // get value\n            Double value = (Double) line.getUserData();\n            line.setUserData(null);\n            // filter coordinates in place\n            line.apply(jtsTransformation);\n\n            // create feature and add to list\n            builder.set(\"the_geom\", line);\n            builder.set(\"value\", value);\n\n            featureCollection.add(builder.buildFeature(String.valueOf(i++)));\n\n        }\n\n        // return value\n\n        return featureCollection;\n\n    }", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"band\", description = \"Name of band to use for values to be contoured\", min = 0, max = 1) Integer band,\n            @DescribeParameter(name = \"levels\", description = \"Values of levels at which to generate contours\") double[] levels,\n            @DescribeParameter(name = \"interval\", description = \"Interval between contour values (ignored if levels parameter is supplied)\", min = 0, minValue = 0) Double interval,\n            @DescribeParameter(name = \"simplify\", description = \"Indicates whether contour lines are simplified\", min = 0) Boolean simplify,\n            @DescribeParameter(name = \"smooth\", description = \"Indicates whether contour lines are smoothed using Bezier smoothing\", min = 0) Boolean smooth,\n            @DescribeParameter(name = \"roi\", description = \"Geometry delineating the region of interest (in raster coordinate system)\", min = 0) Geometry roi,\n            ProgressListener progressListener)", "full_signature": "@DescribeResult(name = \"result\", description = \"Contour line features. Contour level is in value attribute.\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"band\", description = \"Name of band to use for values to be contoured\", min = 0, max = 1) Integer band,\n            @DescribeParameter(name = \"levels\", description = \"Values of levels at which to generate contours\") double[] levels,\n            @DescribeParameter(name = \"interval\", description = \"Interval between contour values (ignored if levels parameter is supplied)\", min = 0, minValue = 0) Double interval,\n            @DescribeParameter(name = \"simplify\", description = \"Indicates whether contour lines are simplified\", min = 0) Boolean simplify,\n            @DescribeParameter(name = \"smooth\", description = \"Indicates whether contour lines are smoothed using Bezier smoothing\", min = 0) Boolean smooth,\n            @DescribeParameter(name = \"roi\", description = \"Geometry delineating the region of interest (in raster coordinate system)\", min = 0) Geometry roi,\n            ProgressListener progressListener)", "class_method_signature": "ContourProcess.execute(\n            @DescribeParameter(name = \"data\", description = \"Input raster\") GridCoverage2D gc2d,\n            @DescribeParameter(name = \"band\", description = \"Name of band to use for values to be contoured\", min = 0, max = 1) Integer band,\n            @DescribeParameter(name = \"levels\", description = \"Values of levels at which to generate contours\") double[] levels,\n            @DescribeParameter(name = \"interval\", description = \"Interval between contour values (ignored if levels parameter is supplied)\", min = 0, minValue = 0) Double interval,\n            @DescribeParameter(name = \"simplify\", description = \"Indicates whether contour lines are simplified\", min = 0) Boolean simplify,\n            @DescribeParameter(name = \"smooth\", description = \"Indicates whether contour lines are smoothed using Bezier smoothing\", min = 0) Boolean smooth,\n            @DescribeParameter(name = \"roi\", description = \"Geometry delineating the region of interest (in raster coordinate system)\", min = 0) Geometry roi,\n            ProgressListener progressListener)", "testcase": false, "constructor": false, "invocations": ["getNumSampleDimensions", "view", "getGridToCRS2D", "getGridGeometry", "getSampleDimensions", "getNoDataValues", "add", "getCategories", "getCategories", "equals", "getName", "getRange", "isNaN", "getMinimum", "getMinimum", "getMaximum", "add", "getMinimum", "getMinimum", "isMinIncluded", "getMaximum", "isMaxIncluded", "add", "getRenderedImage", "setSource", "setParameter", "prepareROI", "setParameter", "add", "setParameter", "setParameter", "setParameter", "setParameter", "isEmpty", "setParameter", "create", "getProperty", "createFeatureType", "getScaleX", "getShearX", "getTranslateX", "getShearY", "getScaleY", "getTranslateY", "getUserData", "setUserData", "apply", "set", "set", "add", "buildFeature", "valueOf"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}