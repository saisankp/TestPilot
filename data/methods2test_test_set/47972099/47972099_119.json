{"test_class": {"identifier": "TupleTypeInfoTest", "superclass": "extends TestLogger", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/api/java/typeutils/TupleTypeInfoTest.java"}, "test_case": {"identifier": "testTupleTypeInfoEquality", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testTupleTypeInfoEquality() {\n\t\tTupleTypeInfo<Tuple2<Integer, String>> tupleTypeInfo1 = new TupleTypeInfo<>(\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tTupleTypeInfo<Tuple2<Integer, String>> tupleTypeInfo2 = new TupleTypeInfo<>(\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tAssert.assertEquals(tupleTypeInfo1, tupleTypeInfo2);\n\t\tAssert.assertEquals(tupleTypeInfo1.hashCode(), tupleTypeInfo2.hashCode());\n\t}", "signature": "void testTupleTypeInfoEquality()", "full_signature": "@Test public void testTupleTypeInfoEquality()", "class_method_signature": "TupleTypeInfoTest.testTupleTypeInfoEquality()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "assertEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "TupleTypeInfo", "superclass": "extends TupleTypeInfoBase<T>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "protected final String[] fieldNames;", "modifier": "protected final", "type": "String[]", "declarator": "fieldNames", "var_name": "fieldNames"}], "methods": [{"identifier": "TupleTypeInfo", "parameters": "(TypeInformation<?>... types)", "modifiers": "@SuppressWarnings(\"unchecked\") @PublicEvolving public", "return": "", "signature": " TupleTypeInfo(TypeInformation<?>... types)", "full_signature": "@SuppressWarnings(\"unchecked\") @PublicEvolving public  TupleTypeInfo(TypeInformation<?>... types)", "class_method_signature": "TupleTypeInfo.TupleTypeInfo(TypeInformation<?>... types)", "testcase": false, "constructor": true}, {"identifier": "TupleTypeInfo", "parameters": "(Class<T> tupleType, TypeInformation<?>... types)", "modifiers": "@PublicEvolving public", "return": "", "signature": " TupleTypeInfo(Class<T> tupleType, TypeInformation<?>... types)", "full_signature": "@PublicEvolving public  TupleTypeInfo(Class<T> tupleType, TypeInformation<?>... types)", "class_method_signature": "TupleTypeInfo.TupleTypeInfo(Class<T> tupleType, TypeInformation<?>... types)", "testcase": false, "constructor": true}, {"identifier": "getFieldNames", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "String[]", "signature": "String[] getFieldNames()", "full_signature": "@Override @PublicEvolving public String[] getFieldNames()", "class_method_signature": "TupleTypeInfo.getFieldNames()", "testcase": false, "constructor": false}, {"identifier": "getFieldIndex", "parameters": "(String fieldName)", "modifiers": "@Override @PublicEvolving public", "return": "int", "signature": "int getFieldIndex(String fieldName)", "full_signature": "@Override @PublicEvolving public int getFieldIndex(String fieldName)", "class_method_signature": "TupleTypeInfo.getFieldIndex(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "createSerializer", "parameters": "(ExecutionConfig executionConfig)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override @PublicEvolving public", "return": "TupleSerializer<T>", "signature": "TupleSerializer<T> createSerializer(ExecutionConfig executionConfig)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override @PublicEvolving public TupleSerializer<T> createSerializer(ExecutionConfig executionConfig)", "class_method_signature": "TupleTypeInfo.createSerializer(ExecutionConfig executionConfig)", "testcase": false, "constructor": false}, {"identifier": "createTypeComparatorBuilder", "parameters": "()", "modifiers": "@Override protected", "return": "TypeComparatorBuilder<T>", "signature": "TypeComparatorBuilder<T> createTypeComparatorBuilder()", "full_signature": "@Override protected TypeComparatorBuilder<T> createTypeComparatorBuilder()", "class_method_signature": "TupleTypeInfo.createTypeComparatorBuilder()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TupleTypeInfo.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canEqual(Object obj)", "full_signature": "@Override public boolean canEqual(Object obj)", "class_method_signature": "TupleTypeInfo.canEqual(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TupleTypeInfo.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TupleTypeInfo.toString()", "testcase": false, "constructor": false}, {"identifier": "getBasicTupleTypeInfo", "parameters": "(Class<?>... basicTypes)", "modifiers": "@PublicEvolving public static", "return": "TupleTypeInfo<X>", "signature": "TupleTypeInfo<X> getBasicTupleTypeInfo(Class<?>... basicTypes)", "full_signature": "@PublicEvolving public static TupleTypeInfo<X> getBasicTupleTypeInfo(Class<?>... basicTypes)", "class_method_signature": "TupleTypeInfo.getBasicTupleTypeInfo(Class<?>... basicTypes)", "testcase": false, "constructor": false}, {"identifier": "getBasicAndBasicValueTupleTypeInfo", "parameters": "(Class<?>... basicTypes)", "modifiers": "@SuppressWarnings(\"unchecked\") @PublicEvolving public static", "return": "TupleTypeInfo<X>", "signature": "TupleTypeInfo<X> getBasicAndBasicValueTupleTypeInfo(Class<?>... basicTypes)", "full_signature": "@SuppressWarnings(\"unchecked\") @PublicEvolving public static TupleTypeInfo<X> getBasicAndBasicValueTupleTypeInfo(Class<?>... basicTypes)", "class_method_signature": "TupleTypeInfo.getBasicAndBasicValueTupleTypeInfo(Class<?>... basicTypes)", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/java/typeutils/TupleTypeInfo.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int hashCode() {\n\t\treturn 31 * super.hashCode() + Arrays.hashCode(fieldNames);\n\t}", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TupleTypeInfo.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode", "hashCode"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}