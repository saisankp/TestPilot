{"test_class": {"identifier": "InstrumentedTimingCollectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MetricRegistry registry = new MetricRegistry();", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = new MetricRegistry()", "var_name": "registry"}], "file": "metrics-jdbi/src/test/java/com/codahale/metrics/jdbi/InstrumentedTimingCollectorTest.java"}, "test_case": {"identifier": "updatesTimerForShortContextClassStrategy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void updatesTimerForShortContextClassStrategy() throws Exception {\n        final StatementNameStrategy strategy = new ShortNameStrategy(\"jdbi\");\n        final InstrumentedTimingCollector collector = new InstrumentedTimingCollector(registry,\n                                                                                      strategy);\n        final StatementContext ctx = mock(StatementContext.class);\n        doReturn(\"SELECT 1\").when(ctx).getRawSql();\n        doReturn(getClass().getName()).when(ctx).getAttribute(NameStrategies.STATEMENT_CLASS);\n        doReturn(\"updatesTimerForShortContextClassStrategy\").when(ctx)\n                .getAttribute(NameStrategies.STATEMENT_NAME);\n\n        collector.collect(TimeUnit.SECONDS.toNanos(3), ctx);\n\n        final String name = strategy.getStatementName(ctx);\n        final Timer timer = registry.timer(name);\n\n        assertThat(name)\n                .isEqualTo(name(\"jdbi\",\n                                getClass().getSimpleName(),\n                                \"updatesTimerForShortContextClassStrategy\"));\n        assertThat(timer.getSnapshot().getMax())\n                .isEqualTo(3000000000L);\n    }", "signature": "void updatesTimerForShortContextClassStrategy()", "full_signature": "@Test public void updatesTimerForShortContextClassStrategy()", "class_method_signature": "InstrumentedTimingCollectorTest.updatesTimerForShortContextClassStrategy()", "testcase": true, "constructor": false, "invocations": ["mock", "getRawSql", "when", "doReturn", "getAttribute", "when", "doReturn", "getName", "getClass", "getAttribute", "when", "doReturn", "collect", "toNanos", "getStatementName", "timer", "isEqualTo", "assertThat", "name", "getSimpleName", "getClass", "isEqualTo", "assertThat", "getMax", "getSnapshot"]}, "focal_class": {"identifier": "InstrumentedTimingCollector", "superclass": "", "interfaces": "implements TimingCollector", "fields": [{"original_string": "private final MetricRegistry registry;", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private final StatementNameStrategy statementNameStrategy;", "modifier": "private final", "type": "StatementNameStrategy", "declarator": "statementNameStrategy", "var_name": "statementNameStrategy"}], "methods": [{"identifier": "InstrumentedTimingCollector", "parameters": "(MetricRegistry registry)", "modifiers": "public", "return": "", "signature": " InstrumentedTimingCollector(MetricRegistry registry)", "full_signature": "public  InstrumentedTimingCollector(MetricRegistry registry)", "class_method_signature": "InstrumentedTimingCollector.InstrumentedTimingCollector(MetricRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedTimingCollector", "parameters": "(MetricRegistry registry,\n                                       StatementNameStrategy statementNameStrategy)", "modifiers": "public", "return": "", "signature": " InstrumentedTimingCollector(MetricRegistry registry,\n                                       StatementNameStrategy statementNameStrategy)", "full_signature": "public  InstrumentedTimingCollector(MetricRegistry registry,\n                                       StatementNameStrategy statementNameStrategy)", "class_method_signature": "InstrumentedTimingCollector.InstrumentedTimingCollector(MetricRegistry registry,\n                                       StatementNameStrategy statementNameStrategy)", "testcase": false, "constructor": true}, {"identifier": "collect", "parameters": "(long elapsedTime, StatementContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void collect(long elapsedTime, StatementContext ctx)", "full_signature": "@Override public void collect(long elapsedTime, StatementContext ctx)", "class_method_signature": "InstrumentedTimingCollector.collect(long elapsedTime, StatementContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getTimer", "parameters": "(StatementContext ctx)", "modifiers": "private", "return": "Timer", "signature": "Timer getTimer(StatementContext ctx)", "full_signature": "private Timer getTimer(StatementContext ctx)", "class_method_signature": "InstrumentedTimingCollector.getTimer(StatementContext ctx)", "testcase": false, "constructor": false}], "file": "metrics-jdbi/src/main/java/com/codahale/metrics/jdbi/InstrumentedTimingCollector.java"}, "focal_method": {"identifier": "collect", "parameters": "(long elapsedTime, StatementContext ctx)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void collect(long elapsedTime, StatementContext ctx) {\n        final Timer timer = getTimer(ctx);\n        timer.update(elapsedTime, TimeUnit.NANOSECONDS);\n    }", "signature": "void collect(long elapsedTime, StatementContext ctx)", "full_signature": "@Override public void collect(long elapsedTime, StatementContext ctx)", "class_method_signature": "InstrumentedTimingCollector.collect(long elapsedTime, StatementContext ctx)", "testcase": false, "constructor": false, "invocations": ["getTimer", "update"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}