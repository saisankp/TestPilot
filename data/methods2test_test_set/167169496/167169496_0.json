{"test_class": {"identifier": "AutoServicesTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/ji/core/AutoServicesTest.java"}, "test_case": {"identifier": "should_get_classes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_get_classes() {\n        assertThat(AutoServices.classesAnnotated(Foo.class), is(List.arrayList(Bar.class.getName())));\n    }", "signature": "void should_get_classes()", "full_signature": "@Test public void should_get_classes()", "class_method_signature": "AutoServicesTest.should_get_classes()", "testcase": true, "constructor": false, "invocations": ["assertThat", "classesAnnotated", "is", "arrayList", "getName"]}, "focal_class": {"identifier": "AutoServices", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "classesAnnotated", "parameters": "(java.lang.Class<?> cls)", "modifiers": "static", "return": "List<String>", "signature": "List<String> classesAnnotated(java.lang.Class<?> cls)", "full_signature": "static List<String> classesAnnotated(java.lang.Class<?> cls)", "class_method_signature": "AutoServices.classesAnnotated(java.lang.Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "classAnnotated", "parameters": "(java.lang.Class<?> cls, ClassLoader loader)", "modifiers": "static", "return": "List<String>", "signature": "List<String> classAnnotated(java.lang.Class<?> cls, ClassLoader loader)", "full_signature": "static List<String> classAnnotated(java.lang.Class<?> cls, ClassLoader loader)", "class_method_signature": "AutoServices.classAnnotated(java.lang.Class<?> cls, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "resources", "parameters": "(ClassLoader loader, String name)", "modifiers": "private static", "return": "P2<String, Validation<IOException, ArrayList<URL>>>", "signature": "P2<String, Validation<IOException, ArrayList<URL>>> resources(ClassLoader loader, String name)", "full_signature": "private static P2<String, Validation<IOException, ArrayList<URL>>> resources(ClassLoader loader, String name)", "class_method_signature": "AutoServices.resources(ClassLoader loader, String name)", "testcase": false, "constructor": false}, {"identifier": "accumulate", "parameters": "()", "modifiers": "private static", "return": "F<BufferedReader, IO<IterV<String, List<String>>>>", "signature": "F<BufferedReader, IO<IterV<String, List<String>>>> accumulate()", "full_signature": "private static F<BufferedReader, IO<IterV<String, List<String>>>> accumulate()", "class_method_signature": "AutoServices.accumulate()", "testcase": false, "constructor": false}, {"identifier": "step", "parameters": "(List<A> acc)", "modifiers": "private static", "return": "F<Input<A>, IterV<A, List<A>>>", "signature": "F<Input<A>, IterV<A, List<A>>> step(List<A> acc)", "full_signature": "private static F<Input<A>, IterV<A, List<A>>> step(List<A> acc)", "class_method_signature": "AutoServices.step(List<A> acc)", "testcase": false, "constructor": false}, {"identifier": "AutoServices", "parameters": "()", "modifiers": "private", "return": "", "signature": " AutoServices()", "full_signature": "private  AutoServices()", "class_method_signature": "AutoServices.AutoServices()", "testcase": false, "constructor": true}], "file": "core/src/main/java/ji/core/AutoServices.java"}, "focal_method": {"identifier": "classesAnnotated", "parameters": "(java.lang.Class<?> cls)", "modifiers": "static", "return": "List<String>", "body": "static List<String> classesAnnotated(java.lang.Class<?> cls) {\n        return classAnnotated(cls, cls.getClassLoader());\n    }", "signature": "List<String> classesAnnotated(java.lang.Class<?> cls)", "full_signature": "static List<String> classesAnnotated(java.lang.Class<?> cls)", "class_method_signature": "AutoServices.classesAnnotated(java.lang.Class<?> cls)", "testcase": false, "constructor": false, "invocations": ["classAnnotated", "getClassLoader"]}, "repository": {"repo_id": 167169496, "url": "https://github.com/jiboard/ji", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 109, "license": "licensed"}}