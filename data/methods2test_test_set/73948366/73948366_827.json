{"test_class": {"identifier": "X509RoleCertRequestTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/X509RoleCertRequestTest.java"}, "test_case": {"identifier": "testGetRequestedRoleListNoRolesURI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRequestedRoleListNoRolesURI() throws IOException {\n\n        Path path = Paths.get(\"src/test/resources/spiffe_role.csr\");\n        String csr = new String(Files.readAllBytes(path));\n        X509RoleCertRequest certReq = new X509RoleCertRequest(csr);\n        assertNull(certReq.getRequestedRoleList());\n    }", "signature": "void testGetRequestedRoleListNoRolesURI()", "full_signature": "@Test public void testGetRequestedRoleListNoRolesURI()", "class_method_signature": "X509RoleCertRequestTest.testGetRequestedRoleListNoRolesURI()", "testcase": true, "constructor": false, "invocations": ["get", "readAllBytes", "assertNull", "getRequestedRoleList"]}, "focal_class": {"identifier": "X509RoleCertRequest", "superclass": "extends X509CertRequest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(X509RoleCertRequest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(X509RoleCertRequest.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "X509RoleCertRequest", "parameters": "(String csr)", "modifiers": "public", "return": "", "signature": " X509RoleCertRequest(String csr)", "full_signature": "public  X509RoleCertRequest(String csr)", "class_method_signature": "X509RoleCertRequest.X509RoleCertRequest(String csr)", "testcase": false, "constructor": true}, {"identifier": "getRequestedRoleList", "parameters": "()", "modifiers": "public", "return": "Map<String, String[]>", "signature": "Map<String, String[]> getRequestedRoleList()", "full_signature": "public Map<String, String[]> getRequestedRoleList()", "class_method_signature": "X509RoleCertRequest.getRequestedRoleList()", "testcase": false, "constructor": false}, {"identifier": "validateAndExtractRoleName", "parameters": "(Set<String> roles, final String domainName)", "modifiers": "", "return": "String", "signature": "String validateAndExtractRoleName(Set<String> roles, final String domainName)", "full_signature": " String validateAndExtractRoleName(Set<String> roles, final String domainName)", "class_method_signature": "X509RoleCertRequest.validateAndExtractRoleName(Set<String> roles, final String domainName)", "testcase": false, "constructor": false}, {"identifier": "validateProxyUserUri", "parameters": "(final String proxyUser)", "modifiers": "", "return": "boolean", "signature": "boolean validateProxyUserUri(final String proxyUser)", "full_signature": " boolean validateProxyUserUri(final String proxyUser)", "class_method_signature": "X509RoleCertRequest.validateProxyUserUri(final String proxyUser)", "testcase": false, "constructor": false}, {"identifier": "validateEmail", "parameters": "(final String principal)", "modifiers": "", "return": "boolean", "signature": "boolean validateEmail(final String principal)", "full_signature": " boolean validateEmail(final String principal)", "class_method_signature": "X509RoleCertRequest.validateEmail(final String principal)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues)", "modifiers": "public", "return": "boolean", "signature": "boolean validate(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues)", "full_signature": "public boolean validate(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues)", "class_method_signature": "X509RoleCertRequest.validate(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final String principal, final String proxyUser,\n            Set<String> validCertSubjectOrgValues)", "modifiers": "public", "return": "boolean", "signature": "boolean validate(final String principal, final String proxyUser,\n            Set<String> validCertSubjectOrgValues)", "full_signature": "public boolean validate(final String principal, final String proxyUser,\n            Set<String> validCertSubjectOrgValues)", "class_method_signature": "X509RoleCertRequest.validate(final String principal, final String proxyUser,\n            Set<String> validCertSubjectOrgValues)", "testcase": false, "constructor": false}, {"identifier": "validateIPAddress", "parameters": "(X509Certificate cert, final String ip)", "modifiers": "public", "return": "boolean", "signature": "boolean validateIPAddress(X509Certificate cert, final String ip)", "full_signature": "public boolean validateIPAddress(X509Certificate cert, final String ip)", "class_method_signature": "X509RoleCertRequest.validateIPAddress(X509Certificate cert, final String ip)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/X509RoleCertRequest.java"}, "focal_method": {"identifier": "getRequestedRoleList", "parameters": "()", "modifiers": "public", "return": "Map<String, String[]>", "body": "public Map<String, String[]> getRequestedRoleList() {\n\n        // first extract the URI list from the request\n\n        if (uris == null || uris.isEmpty()) {\n            return null;\n        }\n\n        Map<String, List<String>> domainRoles = new HashMap<>();\n\n        // the format of our URIs is:\n        // athenz://role/<domainName>/<roleName>\n\n        for (String uri : uris) {\n\n            if (!uri.toLowerCase().startsWith(ZTSConsts.ZTS_CERT_ROLE_URI)) {\n                continue;\n            }\n\n            final String roleUri = uri.substring(ZTSConsts.ZTS_CERT_ROLE_URI.length());\n            int idx = roleUri.indexOf('/');\n            if (idx == -1) {\n                if (LOGGER.isDebugEnabled()) {\n                    LOGGER.debug(\"Invalid role name '{}' in CSR\", uri);\n                }\n                return null;\n            }\n\n            final String domainName = roleUri.substring(0, idx);\n            List<String> rolesForDomain = domainRoles.get(domainName);\n            if (rolesForDomain == null) {\n                rolesForDomain = new ArrayList<>();\n                domainRoles.put(domainName, rolesForDomain);\n            }\n            rolesForDomain.add(roleUri.substring(idx + 1));\n        }\n\n        if (domainRoles.isEmpty()) {\n            return null;\n        }\n\n        Map<String, String[]> roles = new HashMap<>();\n        for (String domainName : domainRoles.keySet()) {\n            roles.put(domainName, domainRoles.get(domainName).toArray(new String[0]));\n        }\n\n        return roles;\n    }", "signature": "Map<String, String[]> getRequestedRoleList()", "full_signature": "public Map<String, String[]> getRequestedRoleList()", "class_method_signature": "X509RoleCertRequest.getRequestedRoleList()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "startsWith", "toLowerCase", "substring", "length", "indexOf", "isDebugEnabled", "debug", "substring", "get", "put", "add", "substring", "isEmpty", "keySet", "put", "toArray", "get"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}