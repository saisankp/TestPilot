{"test_class": {"identifier": "InstrumentedAppenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String METRIC_NAME_PREFIX = \"org.apache.logging.log4j.core.Appender\";", "modifier": "public static final", "type": "String", "declarator": "METRIC_NAME_PREFIX = \"org.apache.logging.log4j.core.Appender\"", "var_name": "METRIC_NAME_PREFIX"}, {"original_string": "private final MetricRegistry registry = new MetricRegistry();", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = new MetricRegistry()", "var_name": "registry"}, {"original_string": "private final InstrumentedAppender appender = new InstrumentedAppender(registry);", "modifier": "private final", "type": "InstrumentedAppender", "declarator": "appender = new InstrumentedAppender(registry)", "var_name": "appender"}, {"original_string": "private final LogEvent event = mock(LogEvent.class);", "modifier": "private final", "type": "LogEvent", "declarator": "event = mock(LogEvent.class)", "var_name": "event"}], "file": "metrics-log4j2/src/test/java/com/codahale/metrics/log4j2/InstrumentedAppenderTest.java"}, "test_case": {"identifier": "metersWarnEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void metersWarnEvents() {\n        when(event.getLevel()).thenReturn(Level.WARN);\n\n        appender.append(event);\n\n        assertThat(registry.meter(METRIC_NAME_PREFIX + \".all\").getCount())\n                .isEqualTo(1);\n\n        assertThat(registry.meter(METRIC_NAME_PREFIX + \".warn\").getCount())\n                .isEqualTo(1);\n    }", "signature": "void metersWarnEvents()", "full_signature": "@Test public void metersWarnEvents()", "class_method_signature": "InstrumentedAppenderTest.metersWarnEvents()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getLevel", "append", "isEqualTo", "assertThat", "getCount", "meter", "isEqualTo", "assertThat", "getCount", "meter"]}, "focal_class": {"identifier": "InstrumentedAppender", "superclass": "extends AbstractAppender", "interfaces": "", "fields": [{"original_string": "private transient final MetricRegistry registry;", "modifier": "private transient final", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private transient Meter all;", "modifier": "private transient", "type": "Meter", "declarator": "all", "var_name": "all"}, {"original_string": "private transient Meter trace;", "modifier": "private transient", "type": "Meter", "declarator": "trace", "var_name": "trace"}, {"original_string": "private transient Meter debug;", "modifier": "private transient", "type": "Meter", "declarator": "debug", "var_name": "debug"}, {"original_string": "private transient Meter info;", "modifier": "private transient", "type": "Meter", "declarator": "info", "var_name": "info"}, {"original_string": "private transient Meter warn;", "modifier": "private transient", "type": "Meter", "declarator": "warn", "var_name": "warn"}, {"original_string": "private transient Meter error;", "modifier": "private transient", "type": "Meter", "declarator": "error", "var_name": "error"}, {"original_string": "private transient Meter fatal;", "modifier": "private transient", "type": "Meter", "declarator": "fatal", "var_name": "fatal"}], "methods": [{"identifier": "InstrumentedAppender", "parameters": "(String registryName, Filter filter, Layout<? extends Serializable> layout, boolean ignoreExceptions)", "modifiers": "public", "return": "", "signature": " InstrumentedAppender(String registryName, Filter filter, Layout<? extends Serializable> layout, boolean ignoreExceptions)", "full_signature": "public  InstrumentedAppender(String registryName, Filter filter, Layout<? extends Serializable> layout, boolean ignoreExceptions)", "class_method_signature": "InstrumentedAppender.InstrumentedAppender(String registryName, Filter filter, Layout<? extends Serializable> layout, boolean ignoreExceptions)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedAppender", "parameters": "(String registryName)", "modifiers": "public", "return": "", "signature": " InstrumentedAppender(String registryName)", "full_signature": "public  InstrumentedAppender(String registryName)", "class_method_signature": "InstrumentedAppender.InstrumentedAppender(String registryName)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedAppender", "parameters": "(MetricRegistry registry)", "modifiers": "public", "return": "", "signature": " InstrumentedAppender(MetricRegistry registry)", "full_signature": "public  InstrumentedAppender(MetricRegistry registry)", "class_method_signature": "InstrumentedAppender.InstrumentedAppender(MetricRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedAppender", "parameters": "(MetricRegistry registry, Filter filter, Layout<? extends Serializable> layout, boolean ignoreExceptions)", "modifiers": "public", "return": "", "signature": " InstrumentedAppender(MetricRegistry registry, Filter filter, Layout<? extends Serializable> layout, boolean ignoreExceptions)", "full_signature": "public  InstrumentedAppender(MetricRegistry registry, Filter filter, Layout<? extends Serializable> layout, boolean ignoreExceptions)", "class_method_signature": "InstrumentedAppender.InstrumentedAppender(MetricRegistry registry, Filter filter, Layout<? extends Serializable> layout, boolean ignoreExceptions)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedAppender", "parameters": "(String appenderName, MetricRegistry registry)", "modifiers": "public", "return": "", "signature": " InstrumentedAppender(String appenderName, MetricRegistry registry)", "full_signature": "public  InstrumentedAppender(String appenderName, MetricRegistry registry)", "class_method_signature": "InstrumentedAppender.InstrumentedAppender(String appenderName, MetricRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "createAppender", "parameters": "(\n            @PluginAttribute(\"name\") String name,\n            @PluginAttribute(value = \"registryName\", defaultString = \"log4j2Metrics\") String registry)", "modifiers": "@PluginFactory public static", "return": "InstrumentedAppender", "signature": "InstrumentedAppender createAppender(\n            @PluginAttribute(\"name\") String name,\n            @PluginAttribute(value = \"registryName\", defaultString = \"log4j2Metrics\") String registry)", "full_signature": "@PluginFactory public static InstrumentedAppender createAppender(\n            @PluginAttribute(\"name\") String name,\n            @PluginAttribute(value = \"registryName\", defaultString = \"log4j2Metrics\") String registry)", "class_method_signature": "InstrumentedAppender.createAppender(\n            @PluginAttribute(\"name\") String name,\n            @PluginAttribute(value = \"registryName\", defaultString = \"log4j2Metrics\") String registry)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "InstrumentedAppender.start()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(LogEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void append(LogEvent event)", "full_signature": "@Override public void append(LogEvent event)", "class_method_signature": "InstrumentedAppender.append(LogEvent event)", "testcase": false, "constructor": false}], "file": "metrics-log4j2/src/main/java/com/codahale/metrics/log4j2/InstrumentedAppender.java"}, "focal_method": {"identifier": "append", "parameters": "(LogEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void append(LogEvent event) {\n        all.mark();\n        switch (event.getLevel().getStandardLevel()) {\n            case TRACE:\n                trace.mark();\n                break;\n            case DEBUG:\n                debug.mark();\n                break;\n            case INFO:\n                info.mark();\n                break;\n            case WARN:\n                warn.mark();\n                break;\n            case ERROR:\n                error.mark();\n                break;\n            case FATAL:\n                fatal.mark();\n                break;\n            default:\n                break;\n        }\n    }", "signature": "void append(LogEvent event)", "full_signature": "@Override public void append(LogEvent event)", "class_method_signature": "InstrumentedAppender.append(LogEvent event)", "testcase": false, "constructor": false, "invocations": ["mark", "getStandardLevel", "getLevel", "mark", "mark", "mark", "mark", "mark", "mark"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}