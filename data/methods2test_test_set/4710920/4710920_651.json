{"test_class": {"identifier": "CollectionUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/CollectionUtilsTest.java"}, "test_case": {"identifier": "testIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsEmpty() throws Exception {\n        assertThat(isEmpty(null), is(true));\n        assertThat(isEmpty(new HashSet()), is(true));\n        assertThat(isEmpty(emptyList()), is(true));\n    }", "signature": "void testIsEmpty()", "full_signature": "@Test public void testIsEmpty()", "class_method_signature": "CollectionUtilsTest.testIsEmpty()", "testcase": true, "constructor": false, "invocations": ["assertThat", "isEmpty", "is", "assertThat", "isEmpty", "is", "assertThat", "isEmpty", "emptyList", "is"]}, "focal_class": {"identifier": "CollectionUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Comparator<String> SIMPLE_NAME_COMPARATOR = new Comparator<String>() {\n        @Override\n        public int compare(String s1, String s2) {\n            if (s1 == null && s2 == null) {\n                return 0;\n            }\n            if (s1 == null) {\n                return -1;\n            }\n            if (s2 == null) {\n                return 1;\n            }\n            int i1 = s1.lastIndexOf('.');\n            if (i1 >= 0) {\n                s1 = s1.substring(i1 + 1);\n            }\n            int i2 = s2.lastIndexOf('.');\n            if (i2 >= 0) {\n                s2 = s2.substring(i2 + 1);\n            }\n            return s1.compareToIgnoreCase(s2);\n        }\n    };", "modifier": "private static final", "type": "Comparator<String>", "declarator": "SIMPLE_NAME_COMPARATOR = new Comparator<String>() {\n        @Override\n        public int compare(String s1, String s2) {\n            if (s1 == null && s2 == null) {\n                return 0;\n            }\n            if (s1 == null) {\n                return -1;\n            }\n            if (s2 == null) {\n                return 1;\n            }\n            int i1 = s1.lastIndexOf('.');\n            if (i1 >= 0) {\n                s1 = s1.substring(i1 + 1);\n            }\n            int i2 = s2.lastIndexOf('.');\n            if (i2 >= 0) {\n                s2 = s2.substring(i2 + 1);\n            }\n            return s1.compareToIgnoreCase(s2);\n        }\n    }", "var_name": "SIMPLE_NAME_COMPARATOR"}], "methods": [{"identifier": "CollectionUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " CollectionUtils()", "full_signature": "private  CollectionUtils()", "class_method_signature": "CollectionUtils.CollectionUtils()", "testcase": false, "constructor": true}, {"identifier": "sort", "parameters": "(List<T> list)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) public static", "return": "List<T>", "signature": "List<T> sort(List<T> list)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) public static List<T> sort(List<T> list)", "class_method_signature": "CollectionUtils.sort(List<T> list)", "testcase": false, "constructor": false}, {"identifier": "sortSimpleName", "parameters": "(List<String> list)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> sortSimpleName(List<String> list)", "full_signature": "public static List<String> sortSimpleName(List<String> list)", "class_method_signature": "CollectionUtils.sortSimpleName(List<String> list)", "testcase": false, "constructor": false}, {"identifier": "splitAll", "parameters": "(Map<String, List<String>> list, String separator)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> splitAll(Map<String, List<String>> list, String separator)", "full_signature": "public static Map<String, Map<String, String>> splitAll(Map<String, List<String>> list, String separator)", "class_method_signature": "CollectionUtils.splitAll(Map<String, List<String>> list, String separator)", "testcase": false, "constructor": false}, {"identifier": "joinAll", "parameters": "(Map<String, Map<String, String>> map, String separator)", "modifiers": "public static", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> joinAll(Map<String, Map<String, String>> map, String separator)", "full_signature": "public static Map<String, List<String>> joinAll(Map<String, Map<String, String>> map, String separator)", "class_method_signature": "CollectionUtils.joinAll(Map<String, Map<String, String>> map, String separator)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(List<String> list, String separator)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> split(List<String> list, String separator)", "full_signature": "public static Map<String, String> split(List<String> list, String separator)", "class_method_signature": "CollectionUtils.split(List<String> list, String separator)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Map<String, String> map, String separator)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> join(Map<String, String> map, String separator)", "full_signature": "public static List<String> join(Map<String, String> map, String separator)", "class_method_signature": "CollectionUtils.join(Map<String, String> map, String separator)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(List<String> list, String separator)", "modifiers": "public static", "return": "String", "signature": "String join(List<String> list, String separator)", "full_signature": "public static String join(List<String> list, String separator)", "class_method_signature": "CollectionUtils.join(List<String> list, String separator)", "testcase": false, "constructor": false}, {"identifier": "mapEquals", "parameters": "(Map<?, ?> map1, Map<?, ?> map2)", "modifiers": "public static", "return": "boolean", "signature": "boolean mapEquals(Map<?, ?> map1, Map<?, ?> map2)", "full_signature": "public static boolean mapEquals(Map<?, ?> map1, Map<?, ?> map2)", "class_method_signature": "CollectionUtils.mapEquals(Map<?, ?> map1, Map<?, ?> map2)", "testcase": false, "constructor": false}, {"identifier": "objectEquals", "parameters": "(Object obj1, Object obj2)", "modifiers": "private static", "return": "boolean", "signature": "boolean objectEquals(Object obj1, Object obj2)", "full_signature": "private static boolean objectEquals(Object obj1, Object obj2)", "class_method_signature": "CollectionUtils.objectEquals(Object obj1, Object obj2)", "testcase": false, "constructor": false}, {"identifier": "toStringMap", "parameters": "(String... pairs)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> toStringMap(String... pairs)", "full_signature": "public static Map<String, String> toStringMap(String... pairs)", "class_method_signature": "CollectionUtils.toStringMap(String... pairs)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(Object... pairs)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Map<K, V>", "signature": "Map<K, V> toMap(Object... pairs)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Map<K, V> toMap(Object... pairs)", "class_method_signature": "CollectionUtils.toMap(Object... pairs)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Collection<?> collection)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(Collection<?> collection)", "full_signature": "public static boolean isEmpty(Collection<?> collection)", "class_method_signature": "CollectionUtils.isEmpty(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(Collection<?> collection)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(Collection<?> collection)", "full_signature": "public static boolean isNotEmpty(Collection<?> collection)", "class_method_signature": "CollectionUtils.isNotEmpty(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "isEmptyMap", "parameters": "(Map map)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmptyMap(Map map)", "full_signature": "public static boolean isEmptyMap(Map map)", "class_method_signature": "CollectionUtils.isEmptyMap(Map map)", "testcase": false, "constructor": false}, {"identifier": "isNotEmptyMap", "parameters": "(Map map)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmptyMap(Map map)", "full_signature": "public static boolean isNotEmptyMap(Map map)", "class_method_signature": "CollectionUtils.isNotEmptyMap(Map map)", "testcase": false, "constructor": false}, {"identifier": "ofSet", "parameters": "(T... values)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> ofSet(T... values)", "full_signature": "public static Set<T> ofSet(T... values)", "class_method_signature": "CollectionUtils.ofSet(T... values)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "(Collection<?> collection)", "modifiers": "public static", "return": "int", "signature": "int size(Collection<?> collection)", "full_signature": "public static int size(Collection<?> collection)", "class_method_signature": "CollectionUtils.size(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Collection<?> one, Collection<?> another)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(Collection<?> one, Collection<?> another)", "full_signature": "public static boolean equals(Collection<?> one, Collection<?> another)", "class_method_signature": "CollectionUtils.equals(Collection<?> one, Collection<?> another)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Collection<T> collection, T... values)", "modifiers": "public static", "return": "int", "signature": "int addAll(Collection<T> collection, T... values)", "full_signature": "public static int addAll(Collection<T> collection, T... values)", "class_method_signature": "CollectionUtils.addAll(Collection<T> collection, T... values)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "(Collection<T> values)", "modifiers": "public static", "return": "T", "signature": "T first(Collection<T> values)", "full_signature": "public static T first(Collection<T> values)", "class_method_signature": "CollectionUtils.first(Collection<T> values)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java"}, "focal_method": {"identifier": "isEmpty", "parameters": "(Collection<?> collection)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isEmpty(Collection<?> collection) {\n        return collection == null || collection.isEmpty();\n    }", "signature": "boolean isEmpty(Collection<?> collection)", "full_signature": "public static boolean isEmpty(Collection<?> collection)", "class_method_signature": "CollectionUtils.isEmpty(Collection<?> collection)", "testcase": false, "constructor": false, "invocations": ["isEmpty"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}