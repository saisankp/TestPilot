{"test_class": {"identifier": "SymbolServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate SymbolRepository symbolRepo;", "modifier": "@Autowired\n\tprivate", "type": "SymbolRepository", "declarator": "symbolRepo", "var_name": "symbolRepo"}, {"original_string": "@Autowired\n\tprivate SymbolService symbolService;", "modifier": "@Autowired\n\tprivate", "type": "SymbolService", "declarator": "symbolService", "var_name": "symbolService"}], "file": "trading-common/src/test/java/fr/ymanvieu/trading/common/symbol/SymbolServiceTest.java"}, "test_case": {"identifier": "testAddSymbol_NotExistWithNotExistingCurrency", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddSymbol_NotExistWithNotExistingCurrency() {\n\t\t// given\n\t\tString code = \"TOTO\";\n\t\tString name = \"toto\";\n\t\tString currencyCode = \"XXX\";\n\n\t\t// when\n\t\tassertThatThrownBy(() -> symbolService.addSymbol(code, name, null, currencyCode))\n\t\t\t\t.hasRootCauseInstanceOf(EntityNotFoundException.class)\n\t\t\t\t.hasMessageContaining(\"Unable to find fr.ymanvieu.trading.common.symbol.entity.SymbolEntity with id XXX\");\n\t}", "signature": "void testAddSymbol_NotExistWithNotExistingCurrency()", "full_signature": "@Test public void testAddSymbol_NotExistWithNotExistingCurrency()", "class_method_signature": "SymbolServiceTest.testAddSymbol_NotExistWithNotExistingCurrency()", "testcase": true, "constructor": false, "invocations": ["hasMessageContaining", "hasRootCauseInstanceOf", "assertThatThrownBy", "addSymbol"]}, "focal_class": {"identifier": "SymbolService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate SymbolRepository symbolRepo;", "modifier": "@Autowired\n\tprivate", "type": "SymbolRepository", "declarator": "symbolRepo", "var_name": "symbolRepo"}, {"original_string": "@Autowired\n\tprivate FavoriteSymbolRepository favoriteSymbolRepository;", "modifier": "@Autowired\n\tprivate", "type": "FavoriteSymbolRepository", "declarator": "favoriteSymbolRepository", "var_name": "favoriteSymbolRepository"}, {"original_string": "@Autowired\n\tprivate SymbolMapper symbolMapper;", "modifier": "@Autowired\n\tprivate", "type": "SymbolMapper", "declarator": "symbolMapper", "var_name": "symbolMapper"}], "methods": [{"identifier": "addSymbol", "parameters": "(String code, String name, String countryFlag, String currencyCode)", "modifiers": "public", "return": "Symbol", "signature": "Symbol addSymbol(String code, String name, String countryFlag, String currencyCode)", "full_signature": "public Symbol addSymbol(String code, String name, String countryFlag, String currencyCode)", "class_method_signature": "SymbolService.addSymbol(String code, String name, String countryFlag, String currencyCode)", "testcase": false, "constructor": false}, {"identifier": "getForCode", "parameters": "(String code)", "modifiers": "public", "return": "Optional<Symbol>", "signature": "Optional<Symbol> getForCode(String code)", "full_signature": "public Optional<Symbol> getForCode(String code)", "class_method_signature": "SymbolService.getForCode(String code)", "testcase": false, "constructor": false}, {"identifier": "getForCodeWithNoCurrency", "parameters": "(String code)", "modifiers": "public", "return": "Optional<Symbol>", "signature": "Optional<Symbol> getForCodeWithNoCurrency(String code)", "full_signature": "public Optional<Symbol> getForCodeWithNoCurrency(String code)", "class_method_signature": "SymbolService.getForCodeWithNoCurrency(String code)", "testcase": false, "constructor": false}, {"identifier": "addFavoriteSymbol", "parameters": "(String fromSymbolCode, String toSymbolCode, String username)", "modifiers": "public", "return": "void", "signature": "void addFavoriteSymbol(String fromSymbolCode, String toSymbolCode, String username)", "full_signature": "public void addFavoriteSymbol(String fromSymbolCode, String toSymbolCode, String username)", "class_method_signature": "SymbolService.addFavoriteSymbol(String fromSymbolCode, String toSymbolCode, String username)", "testcase": false, "constructor": false}, {"identifier": "deleteFavoriteSymbol", "parameters": "(String fromSymbolCode, String toSymbolCode, String username)", "modifiers": "public", "return": "void", "signature": "void deleteFavoriteSymbol(String fromSymbolCode, String toSymbolCode, String username)", "full_signature": "public void deleteFavoriteSymbol(String fromSymbolCode, String toSymbolCode, String username)", "class_method_signature": "SymbolService.deleteFavoriteSymbol(String fromSymbolCode, String toSymbolCode, String username)", "testcase": false, "constructor": false}], "file": "trading-common/src/main/java/fr/ymanvieu/trading/common/symbol/SymbolService.java"}, "focal_method": {"identifier": "addSymbol", "parameters": "(String code, String name, String countryFlag, String currencyCode)", "modifiers": "public", "return": "Symbol", "body": "public Symbol addSymbol(String code, String name, String countryFlag, String currencyCode) {\n\t\trequireNonNull(code, \"code is null\");\n\t\trequireNonNull(name, \"name is null\");\n\t\t\n\t\tif(symbolRepo.existsById(code)) {\n\t\t\tthrow SymbolException.alreadyExists(code);\n\t\t}\n\n\t\tSymbolEntity se = new SymbolEntity(code);\n\t\tse.setName(name);\n\t\tse.setCountryFlag(countryFlag);\n\t\t\n\t\tif(currencyCode != null) {\n\t\t\tse.setCurrency(new SymbolEntity(currencyCode));\n\t\t}\n\n\t\treturn symbolMapper.mapToSymbol(symbolRepo.save(se));\n\t}", "signature": "Symbol addSymbol(String code, String name, String countryFlag, String currencyCode)", "full_signature": "public Symbol addSymbol(String code, String name, String countryFlag, String currencyCode)", "class_method_signature": "SymbolService.addSymbol(String code, String name, String countryFlag, String currencyCode)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "existsById", "alreadyExists", "setName", "setCountryFlag", "setCurrency", "mapToSymbol", "save"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}