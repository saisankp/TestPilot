{"test_class": {"identifier": "ExtendedParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/osip-core/src/test/java/edu/kit/pse/osip/core/io/files/ExtendedParserTest.java"}, "test_case": {"identifier": "testNumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNumber() throws ParserException {\n        ExtendedParser parser = new ExtendedParser(\"0\");\n        assertEquals(0f, parser.readNumber(), 0.0001);\n        \n        parser = new ExtendedParser(\"424242\");\n        assertEquals(424242f, parser.readNumber(), 0.0001);\n        \n        parser = new ExtendedParser(\"0.05\");\n        assertEquals(0.05f, parser.readNumber(), 0.0001);\n\n        parser = new ExtendedParser(\"45.67\");\n        assertEquals(45.67f, parser.readNumber(), 0.0001);\n    }", "signature": "void testNumber()", "full_signature": "@Test public void testNumber()", "class_method_signature": "ExtendedParserTest.testNumber()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "readNumber", "assertEquals", "readNumber", "assertEquals", "readNumber", "assertEquals", "readNumber"]}, "focal_class": {"identifier": "ExtendedParser", "superclass": "extends BaseParser", "interfaces": "", "fields": [{"original_string": "protected HashMap<String, Float> variables = new HashMap<>();", "modifier": "protected", "type": "HashMap<String, Float>", "declarator": "variables = new HashMap<>()", "var_name": "variables"}], "methods": [{"identifier": "ExtendedParser", "parameters": "(String toParse)", "modifiers": "public", "return": "", "signature": " ExtendedParser(String toParse)", "full_signature": "public  ExtendedParser(String toParse)", "class_method_signature": "ExtendedParser.ExtendedParser(String toParse)", "testcase": false, "constructor": true}, {"identifier": "readExpression", "parameters": "()", "modifiers": "protected final", "return": "float", "signature": "float readExpression()", "full_signature": "protected final float readExpression()", "class_method_signature": "ExtendedParser.readExpression()", "testcase": false, "constructor": false}, {"identifier": "readNumber", "parameters": "()", "modifiers": "protected final", "return": "float", "signature": "float readNumber()", "full_signature": "protected final float readNumber()", "class_method_signature": "ExtendedParser.readNumber()", "testcase": false, "constructor": false}, {"identifier": "readTerm", "parameters": "()", "modifiers": "protected final", "return": "float", "signature": "float readTerm()", "full_signature": "protected final float readTerm()", "class_method_signature": "ExtendedParser.readTerm()", "testcase": false, "constructor": false}, {"identifier": "readFactor", "parameters": "()", "modifiers": "protected final", "return": "float", "signature": "float readFactor()", "full_signature": "protected final float readFactor()", "class_method_signature": "ExtendedParser.readFactor()", "testcase": false, "constructor": false}], "file": "src/osip-core/src/main/java/edu/kit/pse/osip/core/io/files/ExtendedParser.java"}, "focal_method": {"identifier": "readNumber", "parameters": "()", "modifiers": "protected final", "return": "float", "body": "protected final float readNumber() throws ParserException {\n        float number = 0;\n        boolean charWasRead = false;\n        while (available() && Character.isDigit(peek())) {\n            charWasRead = true;\n            number *= 10;\n            number += pop() - 48;\n        }\n        if (!charWasRead) {\n            die(\"Expected number\");\n        }\n        if (available() && peek() == '.') {\n            check('.');\n            float factor = 0.1f;\n            charWasRead = false;\n            while (available() && Character.isDigit(peek())) {\n                charWasRead = true;\n                number += (pop() - 48) * factor;\n                factor /= 10;\n            }\n            if (!charWasRead) {\n                die(\"Expected number\");\n            }\n        }\n        return number;\n    }", "signature": "float readNumber()", "full_signature": "protected final float readNumber()", "class_method_signature": "ExtendedParser.readNumber()", "testcase": false, "constructor": false, "invocations": ["available", "isDigit", "peek", "pop", "die", "available", "peek", "check", "available", "isDigit", "peek", "pop", "die"]}, "repository": {"repo_id": 74042107, "url": "https://github.com/ByteHamster/PSE", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 18396, "license": "licensed"}}