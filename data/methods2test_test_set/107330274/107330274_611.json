{"test_class": {"identifier": "JobFunctionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Task REFERENCE_TASK = JobGenerator.batchTasks(JobGenerator.batchJobs(JobDescriptorGenerator.oneTaskBatchJobDescriptor()).getValue()).getValue();", "modifier": "private static final", "type": "Task", "declarator": "REFERENCE_TASK = JobGenerator.batchTasks(JobGenerator.batchJobs(JobDescriptorGenerator.oneTaskBatchJobDescriptor()).getValue()).getValue()", "var_name": "REFERENCE_TASK"}, {"original_string": "private final Clock clock = Clocks.system();", "modifier": "private final", "type": "Clock", "declarator": "clock = Clocks.system()", "var_name": "clock"}], "file": "titus-api/src/test/java/com/netflix/titus/api/jobmanager/model/job/JobFunctionsTest.java"}, "test_case": {"identifier": "testFindSoftConstraint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindSoftConstraint() {\n        Job<BatchJobExt> job = JobFunctions.appendSoftConstraint(JobGenerator.oneBatchJob(), \"MyConstraint\", \"good\");\n        assertThat(JobFunctions.findHardConstraint(job, \"myConstraint\")).isEmpty();\n        assertThat(JobFunctions.findSoftConstraint(job, \"myConstraint\")).contains(\"good\");\n    }", "signature": "void testFindSoftConstraint()", "full_signature": "@Test public void testFindSoftConstraint()", "class_method_signature": "JobFunctionsTest.testFindSoftConstraint()", "testcase": true, "constructor": false, "invocations": ["appendSoftConstraint", "oneBatchJob", "isEmpty", "assertThat", "findHardConstraint", "contains", "assertThat", "findSoftConstraint"]}, "focal_class": {"identifier": "JobFunctions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_APPLICATION = \"DEFAULT\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_APPLICATION = \"DEFAULT\"", "var_name": "DEFAULT_APPLICATION"}, {"original_string": "private static final DisruptionBudget NO_DISRUPTION_BUDGET_MARKER = DisruptionBudget.newBuilder()\n            .withDisruptionBudgetPolicy(SelfManagedDisruptionBudgetPolicy.newBuilder().build())\n            .withDisruptionBudgetRate(UnlimitedDisruptionBudgetRate.newBuilder().build())\n            .withContainerHealthProviders(Collections.emptyList())\n            .withTimeWindows(Collections.emptyList())\n            .build();", "modifier": "private static final", "type": "DisruptionBudget", "declarator": "NO_DISRUPTION_BUDGET_MARKER = DisruptionBudget.newBuilder()\n            .withDisruptionBudgetPolicy(SelfManagedDisruptionBudgetPolicy.newBuilder().build())\n            .withDisruptionBudgetRate(UnlimitedDisruptionBudgetRate.newBuilder().build())\n            .withContainerHealthProviders(Collections.emptyList())\n            .withTimeWindows(Collections.emptyList())\n            .build()", "var_name": "NO_DISRUPTION_BUDGET_MARKER"}], "methods": [{"identifier": "JobFunctions", "parameters": "()", "modifiers": "private", "return": "", "signature": " JobFunctions()", "full_signature": "private  JobFunctions()", "class_method_signature": "JobFunctions.JobFunctions()", "testcase": false, "constructor": true}, {"identifier": "getNoDisruptionBudgetMarker", "parameters": "()", "modifiers": "public static", "return": "DisruptionBudget", "signature": "DisruptionBudget getNoDisruptionBudgetMarker()", "full_signature": "public static DisruptionBudget getNoDisruptionBudgetMarker()", "class_method_signature": "JobFunctions.getNoDisruptionBudgetMarker()", "testcase": false, "constructor": false}, {"identifier": "getJobType", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "JobType", "signature": "JobType getJobType(Job<?> job)", "full_signature": "public static JobType getJobType(Job<?> job)", "class_method_signature": "JobFunctions.getJobType(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "getJobType", "parameters": "(JobDescriptor<?> jobDescriptor)", "modifiers": "public static", "return": "JobType", "signature": "JobType getJobType(JobDescriptor<?> jobDescriptor)", "full_signature": "public static JobType getJobType(JobDescriptor<?> jobDescriptor)", "class_method_signature": "JobFunctions.getJobType(JobDescriptor<?> jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "isBatchJob", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBatchJob(Job<?> job)", "full_signature": "public static boolean isBatchJob(Job<?> job)", "class_method_signature": "JobFunctions.isBatchJob(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "isBatchJob", "parameters": "(JobDescriptor<?> jobDescriptor)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBatchJob(JobDescriptor<?> jobDescriptor)", "full_signature": "public static boolean isBatchJob(JobDescriptor<?> jobDescriptor)", "class_method_signature": "JobFunctions.isBatchJob(JobDescriptor<?> jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "asBatchJob", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "Job<BatchJobExt>", "signature": "Job<BatchJobExt> asBatchJob(Job<?> job)", "full_signature": "public static Job<BatchJobExt> asBatchJob(Job<?> job)", "class_method_signature": "JobFunctions.asBatchJob(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "asBatchJob", "parameters": "(JobDescriptor<?> jobDescriptor)", "modifiers": "public static", "return": "JobDescriptor<BatchJobExt>", "signature": "JobDescriptor<BatchJobExt> asBatchJob(JobDescriptor<?> jobDescriptor)", "full_signature": "public static JobDescriptor<BatchJobExt> asBatchJob(JobDescriptor<?> jobDescriptor)", "class_method_signature": "JobFunctions.asBatchJob(JobDescriptor<?> jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "isServiceJob", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "boolean", "signature": "boolean isServiceJob(Job<?> job)", "full_signature": "public static boolean isServiceJob(Job<?> job)", "class_method_signature": "JobFunctions.isServiceJob(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "isServiceJob", "parameters": "(JobDescriptor<?> jobDescriptor)", "modifiers": "public static", "return": "boolean", "signature": "boolean isServiceJob(JobDescriptor<?> jobDescriptor)", "full_signature": "public static boolean isServiceJob(JobDescriptor<?> jobDescriptor)", "class_method_signature": "JobFunctions.isServiceJob(JobDescriptor<?> jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "isDisabled", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDisabled(Job<?> job)", "full_signature": "public static boolean isDisabled(Job<?> job)", "class_method_signature": "JobFunctions.isDisabled(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "asServiceJob", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "Job<ServiceJobExt>", "signature": "Job<ServiceJobExt> asServiceJob(Job<?> job)", "full_signature": "public static Job<ServiceJobExt> asServiceJob(Job<?> job)", "class_method_signature": "JobFunctions.asServiceJob(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "asServiceJob", "parameters": "(JobDescriptor<?> jobDescriptor)", "modifiers": "public static", "return": "JobDescriptor<ServiceJobExt>", "signature": "JobDescriptor<ServiceJobExt> asServiceJob(JobDescriptor<?> jobDescriptor)", "full_signature": "public static JobDescriptor<ServiceJobExt> asServiceJob(JobDescriptor<?> jobDescriptor)", "class_method_signature": "JobFunctions.asServiceJob(JobDescriptor<?> jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "getJobDesiredSize", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "int", "signature": "int getJobDesiredSize(Job<?> job)", "full_signature": "public static int getJobDesiredSize(Job<?> job)", "class_method_signature": "JobFunctions.getJobDesiredSize(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "isBatchTask", "parameters": "(Task task)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBatchTask(Task task)", "full_signature": "public static boolean isBatchTask(Task task)", "class_method_signature": "JobFunctions.isBatchTask(Task task)", "testcase": false, "constructor": false}, {"identifier": "isServiceTask", "parameters": "(Task task)", "modifiers": "public static", "return": "boolean", "signature": "boolean isServiceTask(Task task)", "full_signature": "public static boolean isServiceTask(Task task)", "class_method_signature": "JobFunctions.isServiceTask(Task task)", "testcase": false, "constructor": false}, {"identifier": "hasDisruptionBudget", "parameters": "(JobDescriptor<?> jobDescriptor)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasDisruptionBudget(JobDescriptor<?> jobDescriptor)", "full_signature": "public static boolean hasDisruptionBudget(JobDescriptor<?> jobDescriptor)", "class_method_signature": "JobFunctions.hasDisruptionBudget(JobDescriptor<?> jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "hasDisruptionBudget", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasDisruptionBudget(Job<?> job)", "full_signature": "public static boolean hasDisruptionBudget(Job<?> job)", "class_method_signature": "JobFunctions.hasDisruptionBudget(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "everStarted", "parameters": "(Task task)", "modifiers": "public static", "return": "boolean", "signature": "boolean everStarted(Task task)", "full_signature": "public static boolean everStarted(Task task)", "class_method_signature": "JobFunctions.everStarted(Task task)", "testcase": false, "constructor": false}, {"identifier": "changeJobStatus", "parameters": "(Job job, JobState jobState, String reasonCode)", "modifiers": "public static", "return": "Job", "signature": "Job changeJobStatus(Job job, JobState jobState, String reasonCode)", "full_signature": "public static Job changeJobStatus(Job job, JobState jobState, String reasonCode)", "class_method_signature": "JobFunctions.changeJobStatus(Job job, JobState jobState, String reasonCode)", "testcase": false, "constructor": false}, {"identifier": "changeJobStatus", "parameters": "(Job job, JobStatus status)", "modifiers": "public static", "return": "Job", "signature": "Job changeJobStatus(Job job, JobStatus status)", "full_signature": "public static Job changeJobStatus(Job job, JobStatus status)", "class_method_signature": "JobFunctions.changeJobStatus(Job job, JobStatus status)", "testcase": false, "constructor": false}, {"identifier": "changeBatchJobSize", "parameters": "(JobDescriptor<BatchJobExt> jobDescriptor, int size)", "modifiers": "public static", "return": "JobDescriptor<BatchJobExt>", "signature": "JobDescriptor<BatchJobExt> changeBatchJobSize(JobDescriptor<BatchJobExt> jobDescriptor, int size)", "full_signature": "public static JobDescriptor<BatchJobExt> changeBatchJobSize(JobDescriptor<BatchJobExt> jobDescriptor, int size)", "class_method_signature": "JobFunctions.changeBatchJobSize(JobDescriptor<BatchJobExt> jobDescriptor, int size)", "testcase": false, "constructor": false}, {"identifier": "filterOutGeneratedAttributes", "parameters": "(JobDescriptor<?> jobDescriptor)", "modifiers": "public static", "return": "JobDescriptor<?>", "signature": "JobDescriptor<?> filterOutGeneratedAttributes(JobDescriptor<?> jobDescriptor)", "full_signature": "public static JobDescriptor<?> filterOutGeneratedAttributes(JobDescriptor<?> jobDescriptor)", "class_method_signature": "JobFunctions.filterOutGeneratedAttributes(JobDescriptor<?> jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "appendJobDescriptorAttributes", "parameters": "(JobDescriptor<E> jobDescriptor,\n                                                                                              Map<String, ?> attributes)", "modifiers": "public static", "return": "JobDescriptor<E>", "signature": "JobDescriptor<E> appendJobDescriptorAttributes(JobDescriptor<E> jobDescriptor,\n                                                                                              Map<String, ?> attributes)", "full_signature": "public static JobDescriptor<E> appendJobDescriptorAttributes(JobDescriptor<E> jobDescriptor,\n                                                                                              Map<String, ?> attributes)", "class_method_signature": "JobFunctions.appendJobDescriptorAttributes(JobDescriptor<E> jobDescriptor,\n                                                                                              Map<String, ?> attributes)", "testcase": false, "constructor": false}, {"identifier": "appendJobDescriptorAttribute", "parameters": "(JobDescriptor<E> jobDescriptor,\n                                                                                             String attributeName,\n                                                                                             Object attributeValue)", "modifiers": "public static", "return": "JobDescriptor<E>", "signature": "JobDescriptor<E> appendJobDescriptorAttribute(JobDescriptor<E> jobDescriptor,\n                                                                                             String attributeName,\n                                                                                             Object attributeValue)", "full_signature": "public static JobDescriptor<E> appendJobDescriptorAttribute(JobDescriptor<E> jobDescriptor,\n                                                                                             String attributeName,\n                                                                                             Object attributeValue)", "class_method_signature": "JobFunctions.appendJobDescriptorAttribute(JobDescriptor<E> jobDescriptor,\n                                                                                             String attributeName,\n                                                                                             Object attributeValue)", "testcase": false, "constructor": false}, {"identifier": "appendContainerAttribute", "parameters": "(JobDescriptor<E> jobDescriptor,\n                                                                                         String attributeName,\n                                                                                         Object attributeValue)", "modifiers": "public static", "return": "JobDescriptor<E>", "signature": "JobDescriptor<E> appendContainerAttribute(JobDescriptor<E> jobDescriptor,\n                                                                                         String attributeName,\n                                                                                         Object attributeValue)", "full_signature": "public static JobDescriptor<E> appendContainerAttribute(JobDescriptor<E> jobDescriptor,\n                                                                                         String attributeName,\n                                                                                         Object attributeValue)", "class_method_signature": "JobFunctions.appendContainerAttribute(JobDescriptor<E> jobDescriptor,\n                                                                                         String attributeName,\n                                                                                         Object attributeValue)", "testcase": false, "constructor": false}, {"identifier": "appendContainerAttribute", "parameters": "(Job<E> job,\n                                                                               String attributeName,\n                                                                               Object attributeValue)", "modifiers": "public static", "return": "Job<E>", "signature": "Job<E> appendContainerAttribute(Job<E> job,\n                                                                               String attributeName,\n                                                                               Object attributeValue)", "full_signature": "public static Job<E> appendContainerAttribute(Job<E> job,\n                                                                               String attributeName,\n                                                                               Object attributeValue)", "class_method_signature": "JobFunctions.appendContainerAttribute(Job<E> job,\n                                                                               String attributeName,\n                                                                               Object attributeValue)", "testcase": false, "constructor": false}, {"identifier": "appendHardConstraint", "parameters": "(JobDescriptor<E> jobDescriptor,\n                                                                                     String name,\n                                                                                     String value)", "modifiers": "public static", "return": "JobDescriptor<E>", "signature": "JobDescriptor<E> appendHardConstraint(JobDescriptor<E> jobDescriptor,\n                                                                                     String name,\n                                                                                     String value)", "full_signature": "public static JobDescriptor<E> appendHardConstraint(JobDescriptor<E> jobDescriptor,\n                                                                                     String name,\n                                                                                     String value)", "class_method_signature": "JobFunctions.appendHardConstraint(JobDescriptor<E> jobDescriptor,\n                                                                                     String name,\n                                                                                     String value)", "testcase": false, "constructor": false}, {"identifier": "appendSoftConstraint", "parameters": "(JobDescriptor<E> jobDescriptor,\n                                                                                     String name,\n                                                                                     String value)", "modifiers": "public static", "return": "JobDescriptor<E>", "signature": "JobDescriptor<E> appendSoftConstraint(JobDescriptor<E> jobDescriptor,\n                                                                                     String name,\n                                                                                     String value)", "full_signature": "public static JobDescriptor<E> appendSoftConstraint(JobDescriptor<E> jobDescriptor,\n                                                                                     String name,\n                                                                                     String value)", "class_method_signature": "JobFunctions.appendSoftConstraint(JobDescriptor<E> jobDescriptor,\n                                                                                     String name,\n                                                                                     String value)", "testcase": false, "constructor": false}, {"identifier": "appendHardConstraint", "parameters": "(Job<E> job, String name, String value)", "modifiers": "public static", "return": "Job<E>", "signature": "Job<E> appendHardConstraint(Job<E> job, String name, String value)", "full_signature": "public static Job<E> appendHardConstraint(Job<E> job, String name, String value)", "class_method_signature": "JobFunctions.appendHardConstraint(Job<E> job, String name, String value)", "testcase": false, "constructor": false}, {"identifier": "appendSoftConstraint", "parameters": "(Job<E> job, String name, String value)", "modifiers": "public static", "return": "Job<E>", "signature": "Job<E> appendSoftConstraint(Job<E> job, String name, String value)", "full_signature": "public static Job<E> appendSoftConstraint(Job<E> job, String name, String value)", "class_method_signature": "JobFunctions.appendSoftConstraint(Job<E> job, String name, String value)", "testcase": false, "constructor": false}, {"identifier": "appendJobDescriptorAttribute", "parameters": "(Job<E> job,\n                                                                                   String attributeName,\n                                                                                   Object attributeValue)", "modifiers": "public static", "return": "Job<E>", "signature": "Job<E> appendJobDescriptorAttribute(Job<E> job,\n                                                                                   String attributeName,\n                                                                                   Object attributeValue)", "full_signature": "public static Job<E> appendJobDescriptorAttribute(Job<E> job,\n                                                                                   String attributeName,\n                                                                                   Object attributeValue)", "class_method_signature": "JobFunctions.appendJobDescriptorAttribute(Job<E> job,\n                                                                                   String attributeName,\n                                                                                   Object attributeValue)", "testcase": false, "constructor": false}, {"identifier": "findHardConstraint", "parameters": "(Job<E> job, String name)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> findHardConstraint(Job<E> job, String name)", "full_signature": "public static Optional<String> findHardConstraint(Job<E> job, String name)", "class_method_signature": "JobFunctions.findHardConstraint(Job<E> job, String name)", "testcase": false, "constructor": false}, {"identifier": "findSoftConstraint", "parameters": "(Job<E> job, String name)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> findSoftConstraint(Job<E> job, String name)", "full_signature": "public static Optional<String> findSoftConstraint(Job<E> job, String name)", "class_method_signature": "JobFunctions.findSoftConstraint(Job<E> job, String name)", "testcase": false, "constructor": false}, {"identifier": "findConstraint", "parameters": "(Map<String, String> constraints, String name)", "modifiers": "private static", "return": "Optional<String>", "signature": "Optional<String> findConstraint(Map<String, String> constraints, String name)", "full_signature": "private static Optional<String> findConstraint(Map<String, String> constraints, String name)", "class_method_signature": "JobFunctions.findConstraint(Map<String, String> constraints, String name)", "testcase": false, "constructor": false}, {"identifier": "appendTaskAttribute", "parameters": "(Task task, String attributeName, Object attributeValue)", "modifiers": "public static", "return": "Task", "signature": "Task appendTaskAttribute(Task task, String attributeName, Object attributeValue)", "full_signature": "public static Task appendTaskAttribute(Task task, String attributeName, Object attributeValue)", "class_method_signature": "JobFunctions.appendTaskAttribute(Task task, String attributeName, Object attributeValue)", "testcase": false, "constructor": false}, {"identifier": "changeBatchJobSize", "parameters": "(Job<BatchJobExt> job, int size)", "modifiers": "public static", "return": "Job<BatchJobExt>", "signature": "Job<BatchJobExt> changeBatchJobSize(Job<BatchJobExt> job, int size)", "full_signature": "public static Job<BatchJobExt> changeBatchJobSize(Job<BatchJobExt> job, int size)", "class_method_signature": "JobFunctions.changeBatchJobSize(Job<BatchJobExt> job, int size)", "testcase": false, "constructor": false}, {"identifier": "changeServiceJobCapacity", "parameters": "(JobDescriptor<ServiceJobExt> jobDescriptor, int size)", "modifiers": "public static", "return": "JobDescriptor<ServiceJobExt>", "signature": "JobDescriptor<ServiceJobExt> changeServiceJobCapacity(JobDescriptor<ServiceJobExt> jobDescriptor, int size)", "full_signature": "public static JobDescriptor<ServiceJobExt> changeServiceJobCapacity(JobDescriptor<ServiceJobExt> jobDescriptor, int size)", "class_method_signature": "JobFunctions.changeServiceJobCapacity(JobDescriptor<ServiceJobExt> jobDescriptor, int size)", "testcase": false, "constructor": false}, {"identifier": "changeServiceJobCapacity", "parameters": "(JobDescriptor<ServiceJobExt> jobDescriptor, Capacity capacity)", "modifiers": "public static", "return": "JobDescriptor<ServiceJobExt>", "signature": "JobDescriptor<ServiceJobExt> changeServiceJobCapacity(JobDescriptor<ServiceJobExt> jobDescriptor, Capacity capacity)", "full_signature": "public static JobDescriptor<ServiceJobExt> changeServiceJobCapacity(JobDescriptor<ServiceJobExt> jobDescriptor, Capacity capacity)", "class_method_signature": "JobFunctions.changeServiceJobCapacity(JobDescriptor<ServiceJobExt> jobDescriptor, Capacity capacity)", "testcase": false, "constructor": false}, {"identifier": "changeServiceJobCapacity", "parameters": "(Job<ServiceJobExt> job, Capacity capacity)", "modifiers": "public static", "return": "Job<ServiceJobExt>", "signature": "Job<ServiceJobExt> changeServiceJobCapacity(Job<ServiceJobExt> job, Capacity capacity)", "full_signature": "public static Job<ServiceJobExt> changeServiceJobCapacity(Job<ServiceJobExt> job, Capacity capacity)", "class_method_signature": "JobFunctions.changeServiceJobCapacity(Job<ServiceJobExt> job, Capacity capacity)", "testcase": false, "constructor": false}, {"identifier": "changeServiceJobCapacity", "parameters": "(Job<ServiceJobExt> job, CapacityAttributes capacityAttributes)", "modifiers": "public static", "return": "Job<ServiceJobExt>", "signature": "Job<ServiceJobExt> changeServiceJobCapacity(Job<ServiceJobExt> job, CapacityAttributes capacityAttributes)", "full_signature": "public static Job<ServiceJobExt> changeServiceJobCapacity(Job<ServiceJobExt> job, CapacityAttributes capacityAttributes)", "class_method_signature": "JobFunctions.changeServiceJobCapacity(Job<ServiceJobExt> job, CapacityAttributes capacityAttributes)", "testcase": false, "constructor": false}, {"identifier": "changeSecurityGroups", "parameters": "(JobDescriptor<E> jobDescriptor, List<String> securityGroups)", "modifiers": "public static", "return": "JobDescriptor<E>", "signature": "JobDescriptor<E> changeSecurityGroups(JobDescriptor<E> jobDescriptor, List<String> securityGroups)", "full_signature": "public static JobDescriptor<E> changeSecurityGroups(JobDescriptor<E> jobDescriptor, List<String> securityGroups)", "class_method_signature": "JobFunctions.changeSecurityGroups(JobDescriptor<E> jobDescriptor, List<String> securityGroups)", "testcase": false, "constructor": false}, {"identifier": "incrementJobDescriptorSize", "parameters": "(JobDescriptor<E> jobDescriptor, int delta)", "modifiers": "public static", "return": "JobDescriptor<E>", "signature": "JobDescriptor<E> incrementJobDescriptorSize(JobDescriptor<E> jobDescriptor, int delta)", "full_signature": "public static JobDescriptor<E> incrementJobDescriptorSize(JobDescriptor<E> jobDescriptor, int delta)", "class_method_signature": "JobFunctions.incrementJobDescriptorSize(JobDescriptor<E> jobDescriptor, int delta)", "testcase": false, "constructor": false}, {"identifier": "incrementJobSize", "parameters": "(Job<E> job, int delta)", "modifiers": "public static", "return": "Job<E>", "signature": "Job<E> incrementJobSize(Job<E> job, int delta)", "full_signature": "public static Job<E> incrementJobSize(Job<E> job, int delta)", "class_method_signature": "JobFunctions.incrementJobSize(Job<E> job, int delta)", "testcase": false, "constructor": false}, {"identifier": "changeJobEnabledStatus", "parameters": "(Job<ServiceJobExt> job, boolean enabled)", "modifiers": "public static", "return": "Job<ServiceJobExt>", "signature": "Job<ServiceJobExt> changeJobEnabledStatus(Job<ServiceJobExt> job, boolean enabled)", "full_signature": "public static Job<ServiceJobExt> changeJobEnabledStatus(Job<ServiceJobExt> job, boolean enabled)", "class_method_signature": "JobFunctions.changeJobEnabledStatus(Job<ServiceJobExt> job, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "changeServiceJobProcesses", "parameters": "(Job<ServiceJobExt> job, ServiceJobProcesses processes)", "modifiers": "public static", "return": "Job<ServiceJobExt>", "signature": "Job<ServiceJobExt> changeServiceJobProcesses(Job<ServiceJobExt> job, ServiceJobProcesses processes)", "full_signature": "public static Job<ServiceJobExt> changeServiceJobProcesses(Job<ServiceJobExt> job, ServiceJobProcesses processes)", "class_method_signature": "JobFunctions.changeServiceJobProcesses(Job<ServiceJobExt> job, ServiceJobProcesses processes)", "testcase": false, "constructor": false}, {"identifier": "changeTaskStatus", "parameters": "(Task task, TaskStatus status)", "modifiers": "public static", "return": "Task", "signature": "Task changeTaskStatus(Task task, TaskStatus status)", "full_signature": "public static Task changeTaskStatus(Task task, TaskStatus status)", "class_method_signature": "JobFunctions.changeTaskStatus(Task task, TaskStatus status)", "testcase": false, "constructor": false}, {"identifier": "changeTaskStatus", "parameters": "(Task task, TaskState taskState, String reasonCode, String reasonMessage, Clock clock)", "modifiers": "public static", "return": "Task", "signature": "Task changeTaskStatus(Task task, TaskState taskState, String reasonCode, String reasonMessage, Clock clock)", "full_signature": "public static Task changeTaskStatus(Task task, TaskState taskState, String reasonCode, String reasonMessage, Clock clock)", "class_method_signature": "JobFunctions.changeTaskStatus(Task task, TaskState taskState, String reasonCode, String reasonMessage, Clock clock)", "testcase": false, "constructor": false}, {"identifier": "fixArchivedTaskStatus", "parameters": "(Task task, Clock clock)", "modifiers": "public static", "return": "Task", "signature": "Task fixArchivedTaskStatus(Task task, Clock clock)", "full_signature": "public static Task fixArchivedTaskStatus(Task task, Clock clock)", "class_method_signature": "JobFunctions.fixArchivedTaskStatus(Task task, Clock clock)", "testcase": false, "constructor": false}, {"identifier": "addAllocatedResourcesToTask", "parameters": "(Task task, TaskStatus status, TwoLevelResource twoLevelResource, Map<String, String> taskContext)", "modifiers": "public static", "return": "Task", "signature": "Task addAllocatedResourcesToTask(Task task, TaskStatus status, TwoLevelResource twoLevelResource, Map<String, String> taskContext)", "full_signature": "public static Task addAllocatedResourcesToTask(Task task, TaskStatus status, TwoLevelResource twoLevelResource, Map<String, String> taskContext)", "class_method_signature": "JobFunctions.addAllocatedResourcesToTask(Task task, TaskStatus status, TwoLevelResource twoLevelResource, Map<String, String> taskContext)", "testcase": false, "constructor": false}, {"identifier": "withJobId", "parameters": "(String jobId)", "modifiers": "public static", "return": "Function<Job<E>, Job<E>>", "signature": "Function<Job<E>, Job<E>> withJobId(String jobId)", "full_signature": "public static Function<Job<E>, Job<E>> withJobId(String jobId)", "class_method_signature": "JobFunctions.withJobId(String jobId)", "testcase": false, "constructor": false}, {"identifier": "ofBatchSize", "parameters": "(int size)", "modifiers": "public static", "return": "Function<JobDescriptor<BatchJobExt>, JobDescriptor<BatchJobExt>>", "signature": "Function<JobDescriptor<BatchJobExt>, JobDescriptor<BatchJobExt>> ofBatchSize(int size)", "full_signature": "public static Function<JobDescriptor<BatchJobExt>, JobDescriptor<BatchJobExt>> ofBatchSize(int size)", "class_method_signature": "JobFunctions.ofBatchSize(int size)", "testcase": false, "constructor": false}, {"identifier": "ofServiceSize", "parameters": "(int size)", "modifiers": "public static", "return": "Function<JobDescriptor<ServiceJobExt>, JobDescriptor<ServiceJobExt>>", "signature": "Function<JobDescriptor<ServiceJobExt>, JobDescriptor<ServiceJobExt>> ofServiceSize(int size)", "full_signature": "public static Function<JobDescriptor<ServiceJobExt>, JobDescriptor<ServiceJobExt>> ofServiceSize(int size)", "class_method_signature": "JobFunctions.ofServiceSize(int size)", "testcase": false, "constructor": false}, {"identifier": "havingProvider", "parameters": "(String name, String... attributes)", "modifiers": "public static", "return": "Function<JobDescriptor<E>, JobDescriptor<E>>", "signature": "Function<JobDescriptor<E>, JobDescriptor<E>> havingProvider(String name, String... attributes)", "full_signature": "public static Function<JobDescriptor<E>, JobDescriptor<E>> havingProvider(String name, String... attributes)", "class_method_signature": "JobFunctions.havingProvider(String name, String... attributes)", "testcase": false, "constructor": false}, {"identifier": "withDisruptionBudget", "parameters": "(DisruptionBudget disruptionBudget)", "modifiers": "public static", "return": "Function<JobDescriptor<E>, JobDescriptor<E>>", "signature": "Function<JobDescriptor<E>, JobDescriptor<E>> withDisruptionBudget(DisruptionBudget disruptionBudget)", "full_signature": "public static Function<JobDescriptor<E>, JobDescriptor<E>> withDisruptionBudget(DisruptionBudget disruptionBudget)", "class_method_signature": "JobFunctions.withDisruptionBudget(DisruptionBudget disruptionBudget)", "testcase": false, "constructor": false}, {"identifier": "withJobDisruptionBudget", "parameters": "(DisruptionBudget disruptionBudget)", "modifiers": "public static", "return": "Function<Job<E>, Job<E>>", "signature": "Function<Job<E>, Job<E>> withJobDisruptionBudget(DisruptionBudget disruptionBudget)", "full_signature": "public static Function<Job<E>, Job<E>> withJobDisruptionBudget(DisruptionBudget disruptionBudget)", "class_method_signature": "JobFunctions.withJobDisruptionBudget(DisruptionBudget disruptionBudget)", "testcase": false, "constructor": false}, {"identifier": "taskStatusChangeBuilder", "parameters": "(Task task, TaskStatus status)", "modifiers": "private static", "return": "Task.TaskBuilder", "signature": "Task.TaskBuilder taskStatusChangeBuilder(Task task, TaskStatus status)", "full_signature": "private static Task.TaskBuilder taskStatusChangeBuilder(Task task, TaskStatus status)", "class_method_signature": "JobFunctions.taskStatusChangeBuilder(Task task, TaskStatus status)", "testcase": false, "constructor": false}, {"identifier": "retryerFrom", "parameters": "(RetryPolicy retryPolicy)", "modifiers": "public static", "return": "Retryer", "signature": "Retryer retryerFrom(RetryPolicy retryPolicy)", "full_signature": "public static Retryer retryerFrom(RetryPolicy retryPolicy)", "class_method_signature": "JobFunctions.retryerFrom(RetryPolicy retryPolicy)", "testcase": false, "constructor": false}, {"identifier": "retryer", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "Retryer", "signature": "Retryer retryer(Job<?> job)", "full_signature": "public static Retryer retryer(Job<?> job)", "class_method_signature": "JobFunctions.retryer(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "getRetryPolicy", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "RetryPolicy", "signature": "RetryPolicy getRetryPolicy(Job<?> job)", "full_signature": "public static RetryPolicy getRetryPolicy(Job<?> job)", "class_method_signature": "JobFunctions.getRetryPolicy(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "changeRetryPolicy", "parameters": "(JobDescriptor<E> input, RetryPolicy retryPolicy)", "modifiers": "public static", "return": "JobDescriptor<E>", "signature": "JobDescriptor<E> changeRetryPolicy(JobDescriptor<E> input, RetryPolicy retryPolicy)", "full_signature": "public static JobDescriptor<E> changeRetryPolicy(JobDescriptor<E> input, RetryPolicy retryPolicy)", "class_method_signature": "JobFunctions.changeRetryPolicy(JobDescriptor<E> input, RetryPolicy retryPolicy)", "testcase": false, "constructor": false}, {"identifier": "changeRetryLimit", "parameters": "(JobDescriptor<BatchJobExt> input, int retryLimit)", "modifiers": "public static", "return": "JobDescriptor<BatchJobExt>", "signature": "JobDescriptor<BatchJobExt> changeRetryLimit(JobDescriptor<BatchJobExt> input, int retryLimit)", "full_signature": "public static JobDescriptor<BatchJobExt> changeRetryLimit(JobDescriptor<BatchJobExt> input, int retryLimit)", "class_method_signature": "JobFunctions.changeRetryLimit(JobDescriptor<BatchJobExt> input, int retryLimit)", "testcase": false, "constructor": false}, {"identifier": "changeDisruptionBudget", "parameters": "(JobDescriptor<E> input, DisruptionBudget disruptionBudget)", "modifiers": "public static", "return": "JobDescriptor<E>", "signature": "JobDescriptor<E> changeDisruptionBudget(JobDescriptor<E> input, DisruptionBudget disruptionBudget)", "full_signature": "public static JobDescriptor<E> changeDisruptionBudget(JobDescriptor<E> input, DisruptionBudget disruptionBudget)", "class_method_signature": "JobFunctions.changeDisruptionBudget(JobDescriptor<E> input, DisruptionBudget disruptionBudget)", "testcase": false, "constructor": false}, {"identifier": "changeDisruptionBudget", "parameters": "(Job<E> input, DisruptionBudget disruptionBudget)", "modifiers": "public static", "return": "Job<E>", "signature": "Job<E> changeDisruptionBudget(Job<E> input, DisruptionBudget disruptionBudget)", "full_signature": "public static Job<E> changeDisruptionBudget(Job<E> input, DisruptionBudget disruptionBudget)", "class_method_signature": "JobFunctions.changeDisruptionBudget(Job<E> input, DisruptionBudget disruptionBudget)", "testcase": false, "constructor": false}, {"identifier": "updateJobAttributes", "parameters": "(Job<E> input, Map<String, String> attributes)", "modifiers": "public static", "return": "Job<E>", "signature": "Job<E> updateJobAttributes(Job<E> input, Map<String, String> attributes)", "full_signature": "public static Job<E> updateJobAttributes(Job<E> input, Map<String, String> attributes)", "class_method_signature": "JobFunctions.updateJobAttributes(Job<E> input, Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "deleteJobAttributes", "parameters": "(Job<E> input, Set<String> keys)", "modifiers": "public static", "return": "Job<E>", "signature": "Job<E> deleteJobAttributes(Job<E> input, Set<String> keys)", "full_signature": "public static Job<E> deleteJobAttributes(Job<E> input, Set<String> keys)", "class_method_signature": "JobFunctions.deleteJobAttributes(Job<E> input, Set<String> keys)", "testcase": false, "constructor": false}, {"identifier": "getTimeInState", "parameters": "(Task task, TaskState checkedState, Clock clock)", "modifiers": "public static", "return": "Optional<Long>", "signature": "Optional<Long> getTimeInState(Task task, TaskState checkedState, Clock clock)", "full_signature": "public static Optional<Long> getTimeInState(Task task, TaskState checkedState, Clock clock)", "class_method_signature": "JobFunctions.getTimeInState(Task task, TaskState checkedState, Clock clock)", "testcase": false, "constructor": false}, {"identifier": "moveTask", "parameters": "(String jobIdFrom, String jobIdTo, Task taskBefore)", "modifiers": "public static", "return": "Task", "signature": "Task moveTask(String jobIdFrom, String jobIdTo, Task taskBefore)", "full_signature": "public static Task moveTask(String jobIdFrom, String jobIdTo, Task taskBefore)", "class_method_signature": "JobFunctions.moveTask(String jobIdFrom, String jobIdTo, Task taskBefore)", "testcase": false, "constructor": false}, {"identifier": "containsExactlyTaskStates", "parameters": "(Task task, TaskState... expectedStates)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsExactlyTaskStates(Task task, TaskState... expectedStates)", "full_signature": "public static boolean containsExactlyTaskStates(Task task, TaskState... expectedStates)", "class_method_signature": "JobFunctions.containsExactlyTaskStates(Task task, TaskState... expectedStates)", "testcase": false, "constructor": false}, {"identifier": "findJobStatus", "parameters": "(Job<?> job, JobState checkedState)", "modifiers": "public static", "return": "Optional<JobStatus>", "signature": "Optional<JobStatus> findJobStatus(Job<?> job, JobState checkedState)", "full_signature": "public static Optional<JobStatus> findJobStatus(Job<?> job, JobState checkedState)", "class_method_signature": "JobFunctions.findJobStatus(Job<?> job, JobState checkedState)", "testcase": false, "constructor": false}, {"identifier": "findTaskStatus", "parameters": "(Task task, TaskState checkedState)", "modifiers": "public static", "return": "Optional<TaskStatus>", "signature": "Optional<TaskStatus> findTaskStatus(Task task, TaskState checkedState)", "full_signature": "public static Optional<TaskStatus> findTaskStatus(Task task, TaskState checkedState)", "class_method_signature": "JobFunctions.findTaskStatus(Task task, TaskState checkedState)", "testcase": false, "constructor": false}, {"identifier": "findStatusAfter", "parameters": "(Task task, TaskState before)", "modifiers": "public static", "return": "Optional<TaskStatus>", "signature": "Optional<TaskStatus> findStatusAfter(Task task, TaskState before)", "full_signature": "public static Optional<TaskStatus> findStatusAfter(Task task, TaskState before)", "class_method_signature": "JobFunctions.findStatusAfter(Task task, TaskState before)", "testcase": false, "constructor": false}, {"identifier": "getOpportunisticCpuCount", "parameters": "(Task task)", "modifiers": "public static", "return": "Optional<Integer>", "signature": "Optional<Integer> getOpportunisticCpuCount(Task task)", "full_signature": "public static Optional<Integer> getOpportunisticCpuCount(Task task)", "class_method_signature": "JobFunctions.getOpportunisticCpuCount(Task task)", "testcase": false, "constructor": false}, {"identifier": "getJobRuntimePrediction", "parameters": "(Job job)", "modifiers": "public static", "return": "Optional<Duration>", "signature": "Optional<Duration> getJobRuntimePrediction(Job job)", "full_signature": "public static Optional<Duration> getJobRuntimePrediction(Job job)", "class_method_signature": "JobFunctions.getJobRuntimePrediction(Job job)", "testcase": false, "constructor": false}, {"identifier": "getJobRuntimePrediction", "parameters": "(JobDescriptor jobDescriptor)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Optional<Duration>", "signature": "Optional<Duration> getJobRuntimePrediction(JobDescriptor jobDescriptor)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Optional<Duration> getJobRuntimePrediction(JobDescriptor jobDescriptor)", "class_method_signature": "JobFunctions.getJobRuntimePrediction(JobDescriptor jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "isOwnedByKubeScheduler", "parameters": "(Task task)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOwnedByKubeScheduler(Task task)", "full_signature": "public static boolean isOwnedByKubeScheduler(Task task)", "class_method_signature": "JobFunctions.isOwnedByKubeScheduler(Task task)", "testcase": false, "constructor": false}, {"identifier": "getEffectiveCapacityGroup", "parameters": "(Job job)", "modifiers": "public static", "return": "String", "signature": "String getEffectiveCapacityGroup(Job job)", "full_signature": "public static String getEffectiveCapacityGroup(Job job)", "class_method_signature": "JobFunctions.getEffectiveCapacityGroup(Job job)", "testcase": false, "constructor": false}], "file": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/JobFunctions.java"}, "focal_method": {"identifier": "findSoftConstraint", "parameters": "(Job<E> job, String name)", "modifiers": "public static", "return": "Optional<String>", "body": "public static <E extends JobDescriptorExt> Optional<String> findSoftConstraint(Job<E> job, String name) {\n        return findConstraint(job.getJobDescriptor().getContainer().getSoftConstraints(), name);\n    }", "signature": "Optional<String> findSoftConstraint(Job<E> job, String name)", "full_signature": "public static Optional<String> findSoftConstraint(Job<E> job, String name)", "class_method_signature": "JobFunctions.findSoftConstraint(Job<E> job, String name)", "testcase": false, "constructor": false, "invocations": ["findConstraint", "getSoftConstraints", "getContainer", "getJobDescriptor"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}