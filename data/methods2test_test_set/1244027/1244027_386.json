{"test_class": {"identifier": "InflectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Inflector inflector;", "modifier": "private", "type": "Inflector", "declarator": "inflector", "var_name": "inflector"}], "file": "modeshape-common/src/test/java/org/modeshape/common/text/InflectorTest.java"}, "test_case": {"identifier": "shouldOrdinalize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldOrdinalize() {\n        ordinalize(1, \"1st\");\n        ordinalize(2, \"2nd\");\n        ordinalize(3, \"3rd\");\n        ordinalize(4, \"4th\");\n        ordinalize(5, \"5th\");\n        ordinalize(6, \"6th\");\n        ordinalize(7, \"7th\");\n        ordinalize(8, \"8th\");\n        ordinalize(9, \"9th\");\n        ordinalize(10, \"10th\");\n        ordinalize(11, \"11th\");\n        ordinalize(12, \"12th\");\n        ordinalize(13, \"13th\");\n        ordinalize(14, \"14th\");\n        ordinalize(15, \"15th\");\n        ordinalize(16, \"16th\");\n        ordinalize(17, \"17th\");\n        ordinalize(18, \"18th\");\n        ordinalize(19, \"19th\");\n        ordinalize(20, \"20th\");\n        ordinalize(21, \"21st\");\n        ordinalize(22, \"22nd\");\n        ordinalize(23, \"23rd\");\n        ordinalize(24, \"24th\");\n        ordinalize(25, \"25th\");\n        ordinalize(26, \"26th\");\n        ordinalize(27, \"27th\");\n        ordinalize(28, \"28th\");\n        ordinalize(29, \"29th\");\n        ordinalize(30, \"30th\");\n        ordinalize(31, \"31st\");\n        ordinalize(32, \"32nd\");\n        ordinalize(33, \"33rd\");\n        ordinalize(34, \"34th\");\n        ordinalize(35, \"35th\");\n        ordinalize(36, \"36th\");\n        ordinalize(37, \"37th\");\n        ordinalize(38, \"38th\");\n        ordinalize(39, \"39th\");\n        ordinalize(100, \"100th\");\n        ordinalize(101, \"101st\");\n        ordinalize(102, \"102nd\");\n        ordinalize(103, \"103rd\");\n        ordinalize(104, \"104th\");\n        ordinalize(200, \"200th\");\n        ordinalize(201, \"201st\");\n        ordinalize(202, \"202nd\");\n        ordinalize(203, \"203rd\");\n        ordinalize(204, \"204th\");\n        ordinalize(1000, \"1000th\");\n        ordinalize(1001, \"1001st\");\n        ordinalize(1002, \"1002nd\");\n        ordinalize(1003, \"1003rd\");\n        ordinalize(1004, \"1004th\");\n        ordinalize(10000, \"10000th\");\n        ordinalize(10001, \"10001st\");\n        ordinalize(10002, \"10002nd\");\n        ordinalize(10003, \"10003rd\");\n        ordinalize(10004, \"10004th\");\n        ordinalize(100000, \"100000th\");\n        ordinalize(100001, \"100001st\");\n        ordinalize(100002, \"100002nd\");\n        ordinalize(100003, \"100003rd\");\n        ordinalize(100004, \"100004th\");\n    }", "signature": "void shouldOrdinalize()", "full_signature": "@Test public void shouldOrdinalize()", "class_method_signature": "InflectorTest.shouldOrdinalize()", "testcase": true, "constructor": false, "invocations": ["ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize", "ordinalize"]}, "focal_class": {"identifier": "Inflector", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Inflector INSTANCE = new Inflector();", "modifier": "protected static final", "type": "Inflector", "declarator": "INSTANCE = new Inflector()", "var_name": "INSTANCE"}, {"original_string": "private LinkedList<Rule> plurals = new LinkedList<Rule>();", "modifier": "private", "type": "LinkedList<Rule>", "declarator": "plurals = new LinkedList<Rule>()", "var_name": "plurals"}, {"original_string": "private LinkedList<Rule> singulars = new LinkedList<Rule>();", "modifier": "private", "type": "LinkedList<Rule>", "declarator": "singulars = new LinkedList<Rule>()", "var_name": "singulars"}, {"original_string": "private final Set<String> uncountables = new HashSet<String>();", "modifier": "private final", "type": "Set<String>", "declarator": "uncountables = new HashSet<String>()", "var_name": "uncountables"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static final", "return": "Inflector", "signature": "Inflector getInstance()", "full_signature": "public static final Inflector getInstance()", "class_method_signature": "Inflector.getInstance()", "testcase": false, "constructor": false}, {"identifier": "Inflector", "parameters": "()", "modifiers": "public", "return": "", "signature": " Inflector()", "full_signature": "public  Inflector()", "class_method_signature": "Inflector.Inflector()", "testcase": false, "constructor": true}, {"identifier": "Inflector", "parameters": "( Inflector original )", "modifiers": "protected", "return": "", "signature": " Inflector( Inflector original )", "full_signature": "protected  Inflector( Inflector original )", "class_method_signature": "Inflector.Inflector( Inflector original )", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Inflector", "signature": "Inflector clone()", "full_signature": "@Override public Inflector clone()", "class_method_signature": "Inflector.clone()", "testcase": false, "constructor": false}, {"identifier": "pluralize", "parameters": "( Object word )", "modifiers": "public", "return": "String", "signature": "String pluralize( Object word )", "full_signature": "public String pluralize( Object word )", "class_method_signature": "Inflector.pluralize( Object word )", "testcase": false, "constructor": false}, {"identifier": "pluralize", "parameters": "( Object word,\n                             int count )", "modifiers": "public", "return": "String", "signature": "String pluralize( Object word,\n                             int count )", "full_signature": "public String pluralize( Object word,\n                             int count )", "class_method_signature": "Inflector.pluralize( Object word,\n                             int count )", "testcase": false, "constructor": false}, {"identifier": "singularize", "parameters": "( Object word )", "modifiers": "public", "return": "String", "signature": "String singularize( Object word )", "full_signature": "public String singularize( Object word )", "class_method_signature": "Inflector.singularize( Object word )", "testcase": false, "constructor": false}, {"identifier": "lowerCamelCase", "parameters": "( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "modifiers": "public", "return": "String", "signature": "String lowerCamelCase( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "full_signature": "public String lowerCamelCase( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "class_method_signature": "Inflector.lowerCamelCase( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "testcase": false, "constructor": false}, {"identifier": "upperCamelCase", "parameters": "( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "modifiers": "public", "return": "String", "signature": "String upperCamelCase( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "full_signature": "public String upperCamelCase( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "class_method_signature": "Inflector.upperCamelCase( String lowerCaseAndUnderscoredWord,\n                                  char... delimiterChars )", "testcase": false, "constructor": false}, {"identifier": "camelCase", "parameters": "( String lowerCaseAndUnderscoredWord,\n                             boolean uppercaseFirstLetter,\n                             char... delimiterChars )", "modifiers": "public", "return": "String", "signature": "String camelCase( String lowerCaseAndUnderscoredWord,\n                             boolean uppercaseFirstLetter,\n                             char... delimiterChars )", "full_signature": "public String camelCase( String lowerCaseAndUnderscoredWord,\n                             boolean uppercaseFirstLetter,\n                             char... delimiterChars )", "class_method_signature": "Inflector.camelCase( String lowerCaseAndUnderscoredWord,\n                             boolean uppercaseFirstLetter,\n                             char... delimiterChars )", "testcase": false, "constructor": false}, {"identifier": "underscore", "parameters": "( String camelCaseWord,\n                              char... delimiterChars )", "modifiers": "public", "return": "String", "signature": "String underscore( String camelCaseWord,\n                              char... delimiterChars )", "full_signature": "public String underscore( String camelCaseWord,\n                              char... delimiterChars )", "class_method_signature": "Inflector.underscore( String camelCaseWord,\n                              char... delimiterChars )", "testcase": false, "constructor": false}, {"identifier": "capitalize", "parameters": "( String words )", "modifiers": "public", "return": "String", "signature": "String capitalize( String words )", "full_signature": "public String capitalize( String words )", "class_method_signature": "Inflector.capitalize( String words )", "testcase": false, "constructor": false}, {"identifier": "humanize", "parameters": "( String lowerCaseAndUnderscoredWords,\n                            String... removableTokens )", "modifiers": "public", "return": "String", "signature": "String humanize( String lowerCaseAndUnderscoredWords,\n                            String... removableTokens )", "full_signature": "public String humanize( String lowerCaseAndUnderscoredWords,\n                            String... removableTokens )", "class_method_signature": "Inflector.humanize( String lowerCaseAndUnderscoredWords,\n                            String... removableTokens )", "testcase": false, "constructor": false}, {"identifier": "titleCase", "parameters": "( String words,\n                             String... removableTokens )", "modifiers": "public", "return": "String", "signature": "String titleCase( String words,\n                             String... removableTokens )", "full_signature": "public String titleCase( String words,\n                             String... removableTokens )", "class_method_signature": "Inflector.titleCase( String words,\n                             String... removableTokens )", "testcase": false, "constructor": false}, {"identifier": "ordinalize", "parameters": "( int number )", "modifiers": "public", "return": "String", "signature": "String ordinalize( int number )", "full_signature": "public String ordinalize( int number )", "class_method_signature": "Inflector.ordinalize( int number )", "testcase": false, "constructor": false}, {"identifier": "isUncountable", "parameters": "( String word )", "modifiers": "public", "return": "boolean", "signature": "boolean isUncountable( String word )", "full_signature": "public boolean isUncountable( String word )", "class_method_signature": "Inflector.isUncountable( String word )", "testcase": false, "constructor": false}, {"identifier": "getUncountables", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getUncountables()", "full_signature": "public Set<String> getUncountables()", "class_method_signature": "Inflector.getUncountables()", "testcase": false, "constructor": false}, {"identifier": "addPluralize", "parameters": "( String rule,\n                              String replacement )", "modifiers": "public", "return": "void", "signature": "void addPluralize( String rule,\n                              String replacement )", "full_signature": "public void addPluralize( String rule,\n                              String replacement )", "class_method_signature": "Inflector.addPluralize( String rule,\n                              String replacement )", "testcase": false, "constructor": false}, {"identifier": "addSingularize", "parameters": "( String rule,\n                                String replacement )", "modifiers": "public", "return": "void", "signature": "void addSingularize( String rule,\n                                String replacement )", "full_signature": "public void addSingularize( String rule,\n                                String replacement )", "class_method_signature": "Inflector.addSingularize( String rule,\n                                String replacement )", "testcase": false, "constructor": false}, {"identifier": "addIrregular", "parameters": "( String singular,\n                              String plural )", "modifiers": "public", "return": "void", "signature": "void addIrregular( String singular,\n                              String plural )", "full_signature": "public void addIrregular( String singular,\n                              String plural )", "class_method_signature": "Inflector.addIrregular( String singular,\n                              String plural )", "testcase": false, "constructor": false}, {"identifier": "addUncountable", "parameters": "( String... words )", "modifiers": "public", "return": "void", "signature": "void addUncountable( String... words )", "full_signature": "public void addUncountable( String... words )", "class_method_signature": "Inflector.addUncountable( String... words )", "testcase": false, "constructor": false}, {"identifier": "replaceAllWithUppercase", "parameters": "( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase )", "modifiers": "protected static", "return": "String", "signature": "String replaceAllWithUppercase( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase )", "full_signature": "protected static String replaceAllWithUppercase( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase )", "class_method_signature": "Inflector.replaceAllWithUppercase( String input,\n                                                     String regex,\n                                                     int groupNumberToUppercase )", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Inflector.clear()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initialize()", "full_signature": "protected void initialize()", "class_method_signature": "Inflector.initialize()", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/text/Inflector.java"}, "focal_method": {"identifier": "ordinalize", "parameters": "( int number )", "modifiers": "public", "return": "String", "body": "public String ordinalize( int number ) {\n        int remainder = number % 100;\n        String numberStr = Integer.toString(number);\n        if (11 <= number && number <= 13) return numberStr + \"th\";\n        remainder = number % 10;\n        if (remainder == 1) return numberStr + \"st\";\n        if (remainder == 2) return numberStr + \"nd\";\n        if (remainder == 3) return numberStr + \"rd\";\n        return numberStr + \"th\";\n    }", "signature": "String ordinalize( int number )", "full_signature": "public String ordinalize( int number )", "class_method_signature": "Inflector.ordinalize( int number )", "testcase": false, "constructor": false, "invocations": ["toString"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}