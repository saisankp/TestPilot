{"test_class": {"identifier": "AnnotationInjectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "gsf-legacy/src/test/java/com/fatwire/gst/foundation/controller/action/AnnotationInjectorTest.java"}, "test_case": {"identifier": "testInject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInject() {\n        final Factory f = new Factory() {\n\n            @SuppressWarnings(\"unchecked\")\n            public <T> T getObject(final String name, final Class<T> type) {\n                return (T) name;\n            }\n\n        };\n        final Sample object = new Sample();\n        AnnotationInjector.inject(object, f);\n        assertEquals(\"me\", object.foo);\n        assertEquals(\"foot\", object.foot);\n\n    }", "signature": "void testInject()", "full_signature": "@Test public void testInject()", "class_method_signature": "AnnotationInjectorTest.testInject()", "testcase": true, "constructor": false, "invocations": ["inject", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "AnnotationInjector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(\"tools.gsf.legacy.controller.action.AnnotationInjector\");", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(\"tools.gsf.legacy.controller.action.AnnotationInjector\")", "var_name": "LOG"}], "methods": [{"identifier": "inject", "parameters": "(final Object object, final Factory factory)", "modifiers": "public static", "return": "void", "signature": "void inject(final Object object, final Factory factory)", "full_signature": "public static void inject(final Object object, final Factory factory)", "class_method_signature": "AnnotationInjector.inject(final Object object, final Factory factory)", "testcase": false, "constructor": false}, {"identifier": "findFieldsWithAnnotation", "parameters": "(final Object object,\n                                                   final Class<? extends Annotation> annnotationClass)", "modifiers": "public static", "return": "Field[]", "signature": "Field[] findFieldsWithAnnotation(final Object object,\n                                                   final Class<? extends Annotation> annnotationClass)", "full_signature": "public static Field[] findFieldsWithAnnotation(final Object object,\n                                                   final Class<? extends Annotation> annnotationClass)", "class_method_signature": "AnnotationInjector.findFieldsWithAnnotation(final Object object,\n                                                   final Class<? extends Annotation> annnotationClass)", "testcase": false, "constructor": false}, {"identifier": "injectIntoField", "parameters": "(final Object object, final Factory factory, final Field field)", "modifiers": "private static", "return": "void", "signature": "void injectIntoField(final Object object, final Factory factory, final Field field)", "full_signature": "private static void injectIntoField(final Object object, final Factory factory, final Field field)", "class_method_signature": "AnnotationInjector.injectIntoField(final Object object, final Factory factory, final Field field)", "testcase": false, "constructor": false}, {"identifier": "injectIntoMethod", "parameters": "(final Object object, final Factory factory, final Method method)", "modifiers": "private static", "return": "void", "signature": "void injectIntoMethod(final Object object, final Factory factory, final Method method)", "full_signature": "private static void injectIntoMethod(final Object object, final Factory factory, final Method method)", "class_method_signature": "AnnotationInjector.injectIntoMethod(final Object object, final Factory factory, final Method method)", "testcase": false, "constructor": false}], "file": "gsf-legacy/src/main/java/com/fatwire/gst/foundation/controller/action/AnnotationInjector.java"}, "focal_method": {"identifier": "inject", "parameters": "(final Object object, final Factory factory)", "modifiers": "public static", "return": "void", "body": "public static void inject(final Object object, final Factory factory) {\n        if (object == null) {\n            throw new IllegalArgumentException(\"object cannot be null.\");\n        }\n        if (factory == null) {\n            throw new IllegalArgumentException(\"factory cannot be null.\");\n        }\n        Class<?> c = object.getClass();\n        // first to all annotated public setter methods.\n        for (final Method method : c.getMethods()) {\n            if (method.isAnnotationPresent(InjectForRequest.class)) {\n                injectIntoMethod(object, factory, method);\n            }\n        }\n        // and then all annotated fields.\n        while (c != Object.class && c != null) {\n            for (final Field field : c.getDeclaredFields()) {\n                if (field.isAnnotationPresent(InjectForRequest.class)) {\n                    injectIntoField(object, factory, field);\n                }\n\n            }\n\n            c = c.getSuperclass();\n        }\n    }", "signature": "void inject(final Object object, final Factory factory)", "full_signature": "public static void inject(final Object object, final Factory factory)", "class_method_signature": "AnnotationInjector.inject(final Object object, final Factory factory)", "testcase": false, "constructor": false, "invocations": ["getClass", "getMethods", "isAnnotationPresent", "injectIntoMethod", "getDeclaredFields", "isAnnotationPresent", "injectIntoField", "getSuperclass"]}, "repository": {"repo_id": 4718003, "url": "https://github.com/dolfdijkstra/gst-foundation", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 13, "size": 149761, "license": "licensed"}}