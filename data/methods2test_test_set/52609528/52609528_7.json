{"test_class": {"identifier": "ValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockResourceStorage storage;", "modifier": "private", "type": "MockResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final String SCHEMA_ROOT = \"/foo/schemas/apis/\";", "modifier": "private final", "type": "String", "declarator": "SCHEMA_ROOT = \"/foo/schemas/apis/\"", "var_name": "SCHEMA_ROOT"}, {"original_string": "private Validator validator;", "modifier": "private", "type": "Validator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private final String SAMPLE_SCHEMA = \"{\\n\" +\n            \"\\t\\\"$schema\\\": \\\"http://json-schema.org/draft-04/schema#\\\",\\n\" +\n            \"\\t\\\"type\\\": \\\"object\\\",\\n\" +\n            \"\\t\\\"properties\\\": {\\n\" +\n            \"\\t\\t\\\"firstName\\\": {\\n\" +\n            \"\\t\\t\\t\\\"type\\\": \\\"string\\\"\\n\" +\n            \"\\t\\t},\\n\" +\n            \"\\t\\t\\\"lastName\\\": {\\n\" +\n            \"\\t\\t\\t\\\"type\\\": \\\"string\\\"\\n\" +\n            \"\\t\\t}\\n\" +\n            \"\\t},\\n\" +\n            \"\\t\\\"required\\\": [\\\"firstName\\\", \\\"lastName\\\"]\\n\" +\n            \"}\";", "modifier": "private final", "type": "String", "declarator": "SAMPLE_SCHEMA = \"{\\n\" +\n            \"\\t\\\"$schema\\\": \\\"http://json-schema.org/draft-04/schema#\\\",\\n\" +\n            \"\\t\\\"type\\\": \\\"object\\\",\\n\" +\n            \"\\t\\\"properties\\\": {\\n\" +\n            \"\\t\\t\\\"firstName\\\": {\\n\" +\n            \"\\t\\t\\t\\\"type\\\": \\\"string\\\"\\n\" +\n            \"\\t\\t},\\n\" +\n            \"\\t\\t\\\"lastName\\\": {\\n\" +\n            \"\\t\\t\\t\\\"type\\\": \\\"string\\\"\\n\" +\n            \"\\t\\t}\\n\" +\n            \"\\t},\\n\" +\n            \"\\t\\\"required\\\": [\\\"firstName\\\", \\\"lastName\\\"]\\n\" +\n            \"}\"", "var_name": "SAMPLE_SCHEMA"}, {"original_string": "private final String CONTENT_MATCHING_SAMPLE_SCHEMA = \"{\\n\" +\n            \"\\t\\\"firstName\\\": \\\"John\\\",\\n\" +\n            \"\\t\\\"lastName\\\": \\\"Doe\\\"\\n\" +\n            \"}\";", "modifier": "private final", "type": "String", "declarator": "CONTENT_MATCHING_SAMPLE_SCHEMA = \"{\\n\" +\n            \"\\t\\\"firstName\\\": \\\"John\\\",\\n\" +\n            \"\\t\\\"lastName\\\": \\\"Doe\\\"\\n\" +\n            \"}\"", "var_name": "CONTENT_MATCHING_SAMPLE_SCHEMA"}, {"original_string": "private final String CONTENT_NOT_MATCHING_SAMPLE_SCHEMA = \"{\\n\" +\n            \"\\t\\\"firstName\\\": \\\"John\\\",\\n\" +\n            \"\\t\\\"someOtherProperty\\\": \\\"Doe\\\"\\n\" +\n            \"}\";", "modifier": "private final", "type": "String", "declarator": "CONTENT_NOT_MATCHING_SAMPLE_SCHEMA = \"{\\n\" +\n            \"\\t\\\"firstName\\\": \\\"John\\\",\\n\" +\n            \"\\t\\\"someOtherProperty\\\": \\\"Doe\\\"\\n\" +\n            \"}\"", "var_name": "CONTENT_NOT_MATCHING_SAMPLE_SCHEMA"}], "file": "gateleen-validation/src/test/java/org/swisspush/gateleen/validation/ValidatorTest.java"}, "test_case": {"identifier": "testValidationWithNoSchema", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidationWithNoSchema(TestContext context){\n        // add Data for lowdash replacement\n        storage.putMockData(\"/foo/schemas/apis/foo/\",\"{\\\"foo\\\": [\\\"mediamessage\\\"]}\");\n        storage.putMockData(\"/foo/schemas/apis/foo/mediamessage/\",\"{\\\"mediamessage\\\": [\\\"v1\\\"]}\");\n        storage.putMockData(\"/foo/schemas/apis/foo/mediamessage/v1/\",\"{\\\"v1\\\": [\\\"output\\\"]}\");\n        storage.putMockData(\"/foo/schemas/apis/foo/mediamessage/v1/output/\",\"{\\\"output\\\": [\\\"front\\\"]}\");\n        // schema line missing\n\n        class GETValidationResourceRequest extends HttpServerRequestMock {\n            @Override public HttpMethod method() {\n                return HttpMethod.GET;\n            }\n            @Override public String uri() { return \"/foo/mediamessage/v1/output/front\";   }\n            @Override public String path() {\n                return \"/foo/mediamessage/v1/output/front\";\n            }\n        }\n\n        String type = \"GET/out\";\n        Buffer jsonBuffer = Buffer.buffer();\n        final SettableFuture<String> future = SettableFuture.create();\n        validator.validate(new GETValidationResourceRequest(), type, jsonBuffer, validationResult -> {\n            String message = validationResult.getMessage();\n            context.assertTrue(message.contains(\"Could not get path\"), message);\n            future.set(message);\n        });\n        context.assertTrue(future.isDone());\n    }", "signature": "void testValidationWithNoSchema(TestContext context)", "full_signature": "@Test public void testValidationWithNoSchema(TestContext context)", "class_method_signature": "ValidatorTest.testValidationWithNoSchema(TestContext context)", "testcase": true, "constructor": false, "invocations": ["putMockData", "putMockData", "putMockData", "putMockData", "buffer", "create", "validate", "getMessage", "assertTrue", "contains", "set", "assertTrue", "isDone"]}, "focal_class": {"identifier": "Validator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SCHEMA_DECLARATION = \"http://json-schema.org/draft-04/schema#\";", "modifier": "private static final", "type": "String", "declarator": "SCHEMA_DECLARATION = \"http://json-schema.org/draft-04/schema#\"", "var_name": "SCHEMA_DECLARATION"}, {"original_string": "private String schemaRoot;", "modifier": "private", "type": "String", "declarator": "schemaRoot", "var_name": "schemaRoot"}, {"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}], "methods": [{"identifier": "Validator", "parameters": "(ResourceStorage storage, String schemaRoot)", "modifiers": "public", "return": "", "signature": " Validator(ResourceStorage storage, String schemaRoot)", "full_signature": "public  Validator(ResourceStorage storage, String schemaRoot)", "class_method_signature": "Validator.Validator(ResourceStorage storage, String schemaRoot)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(HttpServerRequest req, String type, Buffer jsonBuffer, Handler<ValidationResult> callback)", "modifiers": "public", "return": "void", "signature": "void validate(HttpServerRequest req, String type, Buffer jsonBuffer, Handler<ValidationResult> callback)", "full_signature": "public void validate(HttpServerRequest req, String type, Buffer jsonBuffer, Handler<ValidationResult> callback)", "class_method_signature": "Validator.validate(HttpServerRequest req, String type, Buffer jsonBuffer, Handler<ValidationResult> callback)", "testcase": false, "constructor": false}, {"identifier": "doValidate", "parameters": "(final Buffer jsonBuffer, final String path, final String base, final String type, final String[] segments, final Logger log, final Handler<ValidationResult> callback)", "modifiers": "private", "return": "void", "signature": "void doValidate(final Buffer jsonBuffer, final String path, final String base, final String type, final String[] segments, final Logger log, final Handler<ValidationResult> callback)", "full_signature": "private void doValidate(final Buffer jsonBuffer, final String path, final String base, final String type, final String[] segments, final Logger log, final Handler<ValidationResult> callback)", "class_method_signature": "Validator.doValidate(final Buffer jsonBuffer, final String path, final String base, final String type, final String[] segments, final Logger log, final Handler<ValidationResult> callback)", "testcase": false, "constructor": false}, {"identifier": "validateRecursively", "parameters": "(JsonObject data, String[] newSegments, String base, Buffer jsonBuffer, String path, String type, Logger log, Handler<ValidationResult> callback)", "modifiers": "private", "return": "void", "signature": "void validateRecursively(JsonObject data, String[] newSegments, String base, Buffer jsonBuffer, String path, String type, Logger log, Handler<ValidationResult> callback)", "full_signature": "private void validateRecursively(JsonObject data, String[] newSegments, String base, Buffer jsonBuffer, String path, String type, Logger log, Handler<ValidationResult> callback)", "class_method_signature": "Validator.validateRecursively(JsonObject data, String[] newSegments, String base, Buffer jsonBuffer, String path, String type, Logger log, Handler<ValidationResult> callback)", "testcase": false, "constructor": false}, {"identifier": "validateStatic", "parameters": "(Buffer dataToBeValidated, String schemaAsString, Logger log)", "modifiers": "public static", "return": "ValidationResult", "signature": "ValidationResult validateStatic(Buffer dataToBeValidated, String schemaAsString, Logger log)", "full_signature": "public static ValidationResult validateStatic(Buffer dataToBeValidated, String schemaAsString, Logger log)", "class_method_signature": "Validator.validateStatic(Buffer dataToBeValidated, String schemaAsString, Logger log)", "testcase": false, "constructor": false}, {"identifier": "performValidation", "parameters": "(String dataString, JsonObject data, Logger log, String base, Buffer jsonBuffer, String type, String path, Handler<ValidationResult> callback)", "modifiers": "private static", "return": "void", "signature": "void performValidation(String dataString, JsonObject data, Logger log, String base, Buffer jsonBuffer, String type, String path, Handler<ValidationResult> callback)", "full_signature": "private static void performValidation(String dataString, JsonObject data, Logger log, String base, Buffer jsonBuffer, String type, String path, Handler<ValidationResult> callback)", "class_method_signature": "Validator.performValidation(String dataString, JsonObject data, Logger log, String base, Buffer jsonBuffer, String type, String path, Handler<ValidationResult> callback)", "testcase": false, "constructor": false}, {"identifier": "extractMessagesAsJson", "parameters": "(Set<ValidationMessage> valMsgs, Logger log)", "modifiers": "private static", "return": "JsonArray", "signature": "JsonArray extractMessagesAsJson(Set<ValidationMessage> valMsgs, Logger log)", "full_signature": "private static JsonArray extractMessagesAsJson(Set<ValidationMessage> valMsgs, Logger log)", "class_method_signature": "Validator.extractMessagesAsJson(Set<ValidationMessage> valMsgs, Logger log)", "testcase": false, "constructor": false}, {"identifier": "extractMessages", "parameters": "(Set<ValidationMessage> valMsgs)", "modifiers": "private static", "return": "String", "signature": "String extractMessages(Set<ValidationMessage> valMsgs)", "full_signature": "private static String extractMessages(Set<ValidationMessage> valMsgs)", "class_method_signature": "Validator.extractMessages(Set<ValidationMessage> valMsgs)", "testcase": false, "constructor": false}, {"identifier": "getReportAsString", "parameters": "(Set<ValidationMessage> valMsgs)", "modifiers": "private static", "return": "String", "signature": "String getReportAsString(Set<ValidationMessage> valMsgs)", "full_signature": "private static String getReportAsString(Set<ValidationMessage> valMsgs)", "class_method_signature": "Validator.getReportAsString(Set<ValidationMessage> valMsgs)", "testcase": false, "constructor": false}], "file": "gateleen-validation/src/main/java/org/swisspush/gateleen/validation/Validator.java"}, "focal_method": {"identifier": "validate", "parameters": "(HttpServerRequest req, String type, Buffer jsonBuffer, Handler<ValidationResult> callback)", "modifiers": "public", "return": "void", "body": "public void validate(HttpServerRequest req, String type, Buffer jsonBuffer, Handler<ValidationResult> callback) {\n\t\tfinal Logger log = RequestLoggerFactory.getLogger(Validator.class, req);\n\t\tif(!req.path().startsWith(schemaRoot)) {\n\t\t\tlog.debug(\"Validating request\");\n\t\t\tdoValidate(jsonBuffer, req.path(), schemaRoot, type, (req.path().replaceFirst(\"^/\", \"\")+\"/\"+type).split(\"/\"), log, callback);\n\t\t}\n\t}", "signature": "void validate(HttpServerRequest req, String type, Buffer jsonBuffer, Handler<ValidationResult> callback)", "full_signature": "public void validate(HttpServerRequest req, String type, Buffer jsonBuffer, Handler<ValidationResult> callback)", "class_method_signature": "Validator.validate(HttpServerRequest req, String type, Buffer jsonBuffer, Handler<ValidationResult> callback)", "testcase": false, "constructor": false, "invocations": ["getLogger", "startsWith", "path", "debug", "doValidate", "path", "split", "replaceFirst", "path"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}