{"test_class": {"identifier": "TestStreamFile", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Configuration CONF = new Configuration();", "modifier": "private", "type": "Configuration", "declarator": "CONF = new Configuration()", "var_name": "CONF"}, {"original_string": "private DFSClient clientMock = Mockito.mock(DFSClient.class);", "modifier": "private", "type": "DFSClient", "declarator": "clientMock = Mockito.mock(DFSClient.class)", "var_name": "clientMock"}, {"original_string": "private HttpServletRequest mockHttpServletRequest = \n    Mockito.mock(HttpServletRequest.class);", "modifier": "private", "type": "HttpServletRequest", "declarator": "mockHttpServletRequest = \n    Mockito.mock(HttpServletRequest.class)", "var_name": "mockHttpServletRequest"}, {"original_string": "private HttpServletResponse mockHttpServletResponse = \n    Mockito.mock(HttpServletResponse.class);", "modifier": "private", "type": "HttpServletResponse", "declarator": "mockHttpServletResponse = \n    Mockito.mock(HttpServletResponse.class)", "var_name": "mockHttpServletResponse"}, {"original_string": "private final ServletContext mockServletContext = \n    Mockito.mock(ServletContext.class);", "modifier": "private final", "type": "ServletContext", "declarator": "mockServletContext = \n    Mockito.mock(ServletContext.class)", "var_name": "mockServletContext"}, {"original_string": "StreamFile sfile = new StreamFile() {\n    private static final long serialVersionUID = -5513776238875189473L;\n  \n    public ServletContext getServletContext() {\n      return mockServletContext;\n    }\n  \n    @Override\n    protected DFSClient getDFSClient(HttpServletRequest request)\n      throws IOException, InterruptedException {\n      return clientMock;\n    }\n  };", "modifier": "", "type": "StreamFile", "declarator": "sfile = new StreamFile() {\n    private static final long serialVersionUID = -5513776238875189473L;\n  \n    public ServletContext getServletContext() {\n      return mockServletContext;\n    }\n  \n    @Override\n    protected DFSClient getDFSClient(HttpServletRequest request)\n      throws IOException, InterruptedException {\n      return clientMock;\n    }\n  }", "var_name": "sfile"}], "file": "adfs-hdfs-project/adfs-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestStreamFile.java"}, "test_case": {"identifier": "testSendPartialData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSendPartialData() throws IOException, InterruptedException {\n    FSInputStream in = new MockFSInputStream();\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n    // test if multiple ranges, then 416\n    { \n      List<InclusiveByteRange> ranges = strToRanges(\"0-,10-300\", 500);\n      MockHttpServletResponse response = new MockHttpServletResponse();\n      StreamFile.sendPartialData(in, os, response, 500, ranges);\n      assertEquals(\"Multiple ranges should result in a 416 error\",\n                   416, response.getStatus());\n    }\n                              \n    // test if no ranges, then 416\n    { \n      os.reset();\n      MockHttpServletResponse response = new MockHttpServletResponse();\n      StreamFile.sendPartialData(in, os, response, 500, null);\n      assertEquals(\"No ranges should result in a 416 error\",\n                   416, response.getStatus());\n    }\n\n    // test if invalid single range (out of bounds), then 416\n    { \n      List<InclusiveByteRange> ranges = strToRanges(\"600-800\", 500);\n      MockHttpServletResponse response = new MockHttpServletResponse();\n      StreamFile.sendPartialData(in, os, response, 500, ranges);\n      assertEquals(\"Single (but invalid) range should result in a 416\",\n                   416, response.getStatus());\n    }\n\n      \n    // test if one (valid) range, then 206\n    { \n      List<InclusiveByteRange> ranges = strToRanges(\"100-300\", 500);\n      MockHttpServletResponse response = new MockHttpServletResponse();\n      StreamFile.sendPartialData(in, os, response, 500, ranges);\n      assertEquals(\"Single (valid) range should result in a 206\",\n                   206, response.getStatus());\n      assertArrayEquals(\"Byte range from 100-300\",\n                        getOutputArray(100, 201),\n                        os.toByteArray());\n    }\n    \n  }", "signature": "void testSendPartialData()", "full_signature": "@Test public void testSendPartialData()", "class_method_signature": "TestStreamFile.testSendPartialData()", "testcase": true, "constructor": false, "invocations": ["strToRanges", "sendPartialData", "assertEquals", "getStatus", "reset", "sendPartialData", "assertEquals", "getStatus", "strToRanges", "sendPartialData", "assertEquals", "getStatus", "strToRanges", "sendPartialData", "assertEquals", "getStatus", "assertArrayEquals", "getOutputArray", "toByteArray"]}, "focal_class": {"identifier": "StreamFile", "superclass": "extends DfsServlet", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "public static final String CONTENT_LENGTH = \"Content-Length\";", "modifier": "public static final", "type": "String", "declarator": "CONTENT_LENGTH = \"Content-Length\"", "var_name": "CONTENT_LENGTH"}, {"original_string": "static InetSocketAddress nameNodeAddr;", "modifier": "static", "type": "InetSocketAddress", "declarator": "nameNodeAddr", "var_name": "nameNodeAddr"}, {"original_string": "static DataNode datanode = null;", "modifier": "static", "type": "DataNode", "declarator": "datanode = null", "var_name": "datanode"}], "methods": [{"identifier": "getDFSClient", "parameters": "(HttpServletRequest request)", "modifiers": "protected", "return": "DFSClient", "signature": "DFSClient getDFSClient(HttpServletRequest request)", "full_signature": "protected DFSClient getDFSClient(HttpServletRequest request)", "class_method_signature": "StreamFile.getDFSClient(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void doGet(HttpServletRequest request, HttpServletResponse response)", "full_signature": "@SuppressWarnings(\"unchecked\") public void doGet(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "StreamFile.doGet(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "sendPartialData", "parameters": "(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "modifiers": "static", "return": "void", "signature": "void sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "full_signature": "static void sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "class_method_signature": "StreamFile.sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "testcase": false, "constructor": false}, {"identifier": "copyFromOffset", "parameters": "(FSInputStream in, OutputStream out, long offset,\n      long count)", "modifiers": "static", "return": "void", "signature": "void copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count)", "full_signature": "static void copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count)", "class_method_signature": "StreamFile.copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count)", "testcase": false, "constructor": false}], "file": "adfs-hdfs-project/adfs-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StreamFile.java"}, "focal_method": {"identifier": "sendPartialData", "parameters": "(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "modifiers": "static", "return": "void", "body": "static void sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)\n      throws IOException {\n    if (ranges == null || ranges.size() != 1) {\n      response.setContentLength(0);\n      response.setStatus(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);\n      response.setHeader(\"Content-Range\",\n                InclusiveByteRange.to416HeaderRangeString(contentLength));\n    } else {\n      InclusiveByteRange singleSatisfiableRange = ranges.get(0);\n      long singleLength = singleSatisfiableRange.getSize(contentLength);\n      response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);\n      response.setHeader(\"Content-Range\", \n        singleSatisfiableRange.toHeaderRangeString(contentLength));\n      copyFromOffset(in, out,\n                     singleSatisfiableRange.getFirst(contentLength),\n                     singleLength);\n    }\n  }", "signature": "void sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "full_signature": "static void sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "class_method_signature": "StreamFile.sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "testcase": false, "constructor": false, "invocations": ["size", "setContentLength", "setStatus", "setHeader", "to416HeaderRangeString", "get", "getSize", "setStatus", "setHeader", "toHeaderRangeString", "copyFromOffset", "getFirst"]}, "repository": {"repo_id": 3937799, "url": "https://github.com/taobao/ADFS", "language": "Java", "is_fork": false, "fork_count": 50, "stargazer_count": 108, "size": 53300, "license": "licensed"}}