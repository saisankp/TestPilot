{"test_class": {"identifier": "JndiChangeNotifierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JndiChangeNotifier jndiChangeNotifier;", "modifier": "private", "type": "JndiChangeNotifier", "declarator": "jndiChangeNotifier", "var_name": "jndiChangeNotifier"}, {"original_string": "private AddressChangeListener addressChangeListener;", "modifier": "private", "type": "AddressChangeListener", "declarator": "addressChangeListener", "var_name": "addressChangeListener"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/util/jndi/JndiChangeNotifierTest.java"}, "test_case": {"identifier": "check", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void check() {\n        @SuppressWarnings(\"unchecked\")\n        List<InetSocketAddress> list = Mockito.mock(List.class);\n        JndiChangeNotifier spy = Mockito.spy(jndiChangeNotifier);\n        Mockito.when(spy.getAddresses()).thenReturn(list);\n\n        spy.check();\n        spy.check();\n        Mockito.verify(addressChangeListener, Mockito.only()).changeAddresses(list);\n    }", "signature": "void check()", "full_signature": "@Test public void check()", "class_method_signature": "JndiChangeNotifierTest.check()", "testcase": true, "constructor": false, "invocations": ["mock", "spy", "thenReturn", "when", "getAddresses", "check", "check", "changeAddresses", "verify", "only"]}, "focal_class": {"identifier": "JndiChangeNotifier", "superclass": "extends JndiAddressProvider", "interfaces": "implements AddressChangeNotifier, InitializingBean", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JndiChangeNotifier.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JndiChangeNotifier.class)", "var_name": "LOGGER"}, {"original_string": "@Getter\n    @Setter\n    private AddressChangeListener addressChangeListener;", "modifier": "@Getter\n    @Setter\n    private", "type": "AddressChangeListener", "declarator": "addressChangeListener", "var_name": "addressChangeListener"}, {"original_string": "private List<InetSocketAddress> currentAddrs;", "modifier": "private", "type": "List<InetSocketAddress>", "declarator": "currentAddrs", "var_name": "currentAddrs"}], "methods": [{"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "JndiChangeNotifier.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void check()", "full_signature": "public void check()", "class_method_signature": "JndiChangeNotifier.check()", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/util/jndi/JndiChangeNotifier.java"}, "focal_method": {"identifier": "check", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void check() {\n        List<InetSocketAddress> newAddrs = getAddresses();\n        if (newAddrs != null && !newAddrs.equals(currentAddrs)) {\n\n            if (addressChangeListener != null) {\n                currentAddrs = newAddrs;\n                addressChangeListener.changeAddresses(newAddrs);\n            } else {\n                LOGGER.error(\"Address change listener is null for JNDI key {}, cannot notify about new value {}\", getJndiKey(), newAddrs);\n            }\n        }\n    }", "signature": "void check()", "full_signature": "public void check()", "class_method_signature": "JndiChangeNotifier.check()", "testcase": false, "constructor": false, "invocations": ["getAddresses", "equals", "changeAddresses", "error", "getJndiKey"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}