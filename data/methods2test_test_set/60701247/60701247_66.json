{"test_class": {"identifier": "IssueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private NlComponent component1;", "modifier": "@Mock\n  private", "type": "NlComponent", "declarator": "component1", "var_name": "component1"}, {"original_string": "@Mock\n  private NlComponent component2;", "modifier": "@Mock\n  private", "type": "NlComponent", "declarator": "component2", "var_name": "component2"}], "file": "designer/testSrc/com/android/tools/idea/common/error/IssueTest.java"}, "test_case": {"identifier": "testNlLintIssueEqual", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNlLintIssueEqual() {\n    LintAnnotationsModel model = new LintAnnotationsModel();\n    NlComponent sameComponent = mock(NlComponent.class);\n    PsiElement startElement = mock(PsiElement.class);\n    PsiElement endElement = mock(PsiElement.class);\n    MockIssueFactory.addLintIssue(model, HighlightDisplayLevel.ERROR, sameComponent, startElement, endElement);\n    MockIssueFactory.addLintIssue(model, HighlightDisplayLevel.ERROR, sameComponent, startElement, endElement);\n    MockIssueFactory.addLintIssue(model, HighlightDisplayLevel.ERROR, sameComponent);\n    List<LintAnnotationsModel.IssueData> issues = model.getIssues();\n    Assert.assertEquals(new LintIssueProvider.LintIssueWrapper(issues.get(0)), new LintIssueProvider.LintIssueWrapper(issues.get(1)));\n    Assert.assertEquals(new LintIssueProvider.LintIssueWrapper(issues.get(0)).hashCode(),\n                        new LintIssueProvider.LintIssueWrapper(issues.get(1)).hashCode());\n    Assert.assertNotEquals(new LintIssueProvider.LintIssueWrapper(issues.get(0)), new LintIssueProvider.LintIssueWrapper(issues.get(2)));\n    Assert.assertNotEquals(new LintIssueProvider.LintIssueWrapper(issues.get(0)).hashCode(),\n                           new LintIssueProvider.LintIssueWrapper(issues.get(2)).hashCode());\n  }", "signature": "void testNlLintIssueEqual()", "full_signature": "@Test public void testNlLintIssueEqual()", "class_method_signature": "IssueTest.testNlLintIssueEqual()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "addLintIssue", "addLintIssue", "addLintIssue", "getIssues", "assertEquals", "get", "get", "assertEquals", "hashCode", "get", "hashCode", "get", "assertNotEquals", "get", "get", "assertNotEquals", "hashCode", "get", "hashCode", "get"]}, "focal_class": {"identifier": "Issue", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String EXECUTE_FIX = \"Execute Fix: \";", "modifier": "public static final", "type": "String", "declarator": "EXECUTE_FIX = \"Execute Fix: \"", "var_name": "EXECUTE_FIX"}], "methods": [{"identifier": "getSummary", "parameters": "()", "modifiers": "@NotNull public abstract", "return": "String", "signature": "String getSummary()", "full_signature": "@NotNull public abstract String getSummary()", "class_method_signature": "Issue.getSummary()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@NotNull public abstract", "return": "String", "signature": "String getDescription()", "full_signature": "@NotNull public abstract String getDescription()", "class_method_signature": "Issue.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getSeverity", "parameters": "()", "modifiers": "@NotNull public abstract", "return": "HighlightSeverity", "signature": "HighlightSeverity getSeverity()", "full_signature": "@NotNull public abstract HighlightSeverity getSeverity()", "class_method_signature": "Issue.getSeverity()", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "()", "modifiers": "@Nullable public abstract", "return": "NlComponent", "signature": "NlComponent getSource()", "full_signature": "@Nullable public abstract NlComponent getSource()", "class_method_signature": "Issue.getSource()", "testcase": false, "constructor": false}, {"identifier": "getCategory", "parameters": "()", "modifiers": "@NotNull public abstract", "return": "String", "signature": "String getCategory()", "full_signature": "@NotNull public abstract String getCategory()", "class_method_signature": "Issue.getCategory()", "testcase": false, "constructor": false}, {"identifier": "getHyperlinkListener", "parameters": "()", "modifiers": "@Nullable public", "return": "HyperlinkListener", "signature": "HyperlinkListener getHyperlinkListener()", "full_signature": "@Nullable public HyperlinkListener getHyperlinkListener()", "class_method_signature": "Issue.getHyperlinkListener()", "testcase": false, "constructor": false}, {"identifier": "getFixes", "parameters": "()", "modifiers": "@NotNull public", "return": "Stream<Fix>", "signature": "Stream<Fix> getFixes()", "full_signature": "@NotNull public Stream<Fix> getFixes()", "class_method_signature": "Issue.getFixes()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object object)", "full_signature": "@Override public boolean equals(Object object)", "class_method_signature": "Issue.equals(Object object)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Issue.hashCode()", "testcase": false, "constructor": false}], "file": "designer/src/com/android/tools/idea/common/error/Issue.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int hashCode() {\n    int result = 13;\n    result += 17 * getSeverity().hashCode();\n    result += 19 * getSummary().hashCode();\n    result += 23 * getDescription().hashCode();\n    result += 29 * getCategory().hashCode();\n    NlComponent source = getSource();\n    if (source != null) {\n      result += 31 * source.hashCode();\n    }\n    return result;\n  }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Issue.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode", "getSeverity", "hashCode", "getSummary", "hashCode", "getDescription", "hashCode", "getCategory", "getSource", "hashCode"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}