{"test_class": {"identifier": "ApolloDynamicConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SESSION_TIMEOUT_KEY = \"session\";", "modifier": "private static final", "type": "String", "declarator": "SESSION_TIMEOUT_KEY = \"session\"", "var_name": "SESSION_TIMEOUT_KEY"}, {"original_string": "private static final String DEFAULT_NAMESPACE = \"dubbo\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_NAMESPACE = \"dubbo\"", "var_name": "DEFAULT_NAMESPACE"}, {"original_string": "private static ApolloDynamicConfiguration apolloDynamicConfiguration;", "modifier": "private static", "type": "ApolloDynamicConfiguration", "declarator": "apolloDynamicConfiguration", "var_name": "apolloDynamicConfiguration"}, {"original_string": "private static URL url;", "modifier": "private static", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "@ClassRule\n    public static EmbeddedApollo embeddedApollo = new EmbeddedApollo();", "modifier": "@ClassRule\n    public static", "type": "EmbeddedApollo", "declarator": "embeddedApollo = new EmbeddedApollo()", "var_name": "embeddedApollo"}], "file": "dubbo-configcenter/dubbo-configcenter-apollo/src/test/java/org/apache/dubbo/configcenter/support/apollo/ApolloDynamicConfigurationTest.java"}, "test_case": {"identifier": "testGetInternalProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetInternalProperty() throws InterruptedException {\n        String mockKey = \"mockKey2\";\n        String mockValue = String.valueOf(new Random().nextInt());\n        putMockRuleData(mockKey, mockValue, DEFAULT_NAMESPACE);\n        TimeUnit.MILLISECONDS.sleep(1000);\n        apolloDynamicConfiguration = new ApolloDynamicConfiguration(url);\n        assertEquals(mockValue, apolloDynamicConfiguration.getInternalProperty(mockKey));\n\n        mockValue = \"mockValue2\";\n        System.setProperty(mockKey, mockValue);\n        assertEquals(mockValue, apolloDynamicConfiguration.getInternalProperty(mockKey));\n\n        mockKey = \"notExistKey\";\n        assertNull(apolloDynamicConfiguration.getInternalProperty(mockKey));\n    }", "signature": "void testGetInternalProperty()", "full_signature": "@Test public void testGetInternalProperty()", "class_method_signature": "ApolloDynamicConfigurationTest.testGetInternalProperty()", "testcase": true, "constructor": false, "invocations": ["valueOf", "nextInt", "putMockRuleData", "sleep", "assertEquals", "getInternalProperty", "setProperty", "assertEquals", "getInternalProperty", "assertNull", "getInternalProperty"]}, "focal_class": {"identifier": "ApolloDynamicConfiguration", "superclass": "", "interfaces": "implements DynamicConfiguration", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ApolloDynamicConfiguration.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ApolloDynamicConfiguration.class)", "var_name": "logger"}, {"original_string": "private static final String APOLLO_ENV_KEY = \"env\";", "modifier": "private static final", "type": "String", "declarator": "APOLLO_ENV_KEY = \"env\"", "var_name": "APOLLO_ENV_KEY"}, {"original_string": "private static final String APOLLO_ADDR_KEY = \"apollo.meta\";", "modifier": "private static final", "type": "String", "declarator": "APOLLO_ADDR_KEY = \"apollo.meta\"", "var_name": "APOLLO_ADDR_KEY"}, {"original_string": "private static final String APOLLO_CLUSTER_KEY = \"apollo.cluster\";", "modifier": "private static final", "type": "String", "declarator": "APOLLO_CLUSTER_KEY = \"apollo.cluster\"", "var_name": "APOLLO_CLUSTER_KEY"}, {"original_string": "private static final String APOLLO_PROTOCOL_PREFIX = \"http://\";", "modifier": "private static final", "type": "String", "declarator": "APOLLO_PROTOCOL_PREFIX = \"http://\"", "var_name": "APOLLO_PROTOCOL_PREFIX"}, {"original_string": "private static final String APOLLO_APPLICATION_KEY = \"application\";", "modifier": "private static final", "type": "String", "declarator": "APOLLO_APPLICATION_KEY = \"application\"", "var_name": "APOLLO_APPLICATION_KEY"}, {"original_string": "private static final String APOLLO_APPID_KEY = \"app.id\";", "modifier": "private static final", "type": "String", "declarator": "APOLLO_APPID_KEY = \"app.id\"", "var_name": "APOLLO_APPID_KEY"}, {"original_string": "private URL url;", "modifier": "private", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private Config dubboConfig;", "modifier": "private", "type": "Config", "declarator": "dubboConfig", "var_name": "dubboConfig"}, {"original_string": "private ConfigFile dubboConfigFile;", "modifier": "private", "type": "ConfigFile", "declarator": "dubboConfigFile", "var_name": "dubboConfigFile"}, {"original_string": "private ConcurrentMap<String, ApolloListener> listeners = new ConcurrentHashMap<>();", "modifier": "private", "type": "ConcurrentMap<String, ApolloListener>", "declarator": "listeners = new ConcurrentHashMap<>()", "var_name": "listeners"}], "methods": [{"identifier": "ApolloDynamicConfiguration", "parameters": "(URL url)", "modifiers": "", "return": "", "signature": " ApolloDynamicConfiguration(URL url)", "full_signature": "  ApolloDynamicConfiguration(URL url)", "class_method_signature": "ApolloDynamicConfiguration.ApolloDynamicConfiguration(URL url)", "testcase": false, "constructor": true}, {"identifier": "getAddressWithProtocolPrefix", "parameters": "(URL url)", "modifiers": "private", "return": "String", "signature": "String getAddressWithProtocolPrefix(URL url)", "full_signature": "private String getAddressWithProtocolPrefix(URL url)", "class_method_signature": "ApolloDynamicConfiguration.getAddressWithProtocolPrefix(URL url)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(String key, String group, ConfigurationListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(String key, String group, ConfigurationListener listener)", "full_signature": "@Override public void addListener(String key, String group, ConfigurationListener listener)", "class_method_signature": "ApolloDynamicConfiguration.addListener(String key, String group, ConfigurationListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(String key, String group, ConfigurationListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(String key, String group, ConfigurationListener listener)", "full_signature": "@Override public void removeListener(String key, String group, ConfigurationListener listener)", "class_method_signature": "ApolloDynamicConfiguration.removeListener(String key, String group, ConfigurationListener listener)", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "(String key, String group, long timeout)", "modifiers": "@Override public", "return": "String", "signature": "String getConfig(String key, String group, long timeout)", "full_signature": "@Override public String getConfig(String key, String group, long timeout)", "class_method_signature": "ApolloDynamicConfiguration.getConfig(String key, String group, long timeout)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "(String key, String group, long timeout)", "modifiers": "@Override public", "return": "String", "signature": "String getProperties(String key, String group, long timeout)", "full_signature": "@Override public String getProperties(String key, String group, long timeout)", "class_method_signature": "ApolloDynamicConfiguration.getProperties(String key, String group, long timeout)", "testcase": false, "constructor": false}, {"identifier": "getInternalProperty", "parameters": "(String key)", "modifiers": "@Override public", "return": "String", "signature": "String getInternalProperty(String key)", "full_signature": "@Override public String getInternalProperty(String key)", "class_method_signature": "ApolloDynamicConfiguration.getInternalProperty(String key)", "testcase": false, "constructor": false}, {"identifier": "createTargetListener", "parameters": "(String key, String group)", "modifiers": "private", "return": "ApolloListener", "signature": "ApolloListener createTargetListener(String key, String group)", "full_signature": "private ApolloListener createTargetListener(String key, String group)", "class_method_signature": "ApolloDynamicConfiguration.createTargetListener(String key, String group)", "testcase": false, "constructor": false}], "file": "dubbo-configcenter/dubbo-configcenter-apollo/src/main/java/org/apache/dubbo/configcenter/support/apollo/ApolloDynamicConfiguration.java"}, "focal_method": {"identifier": "getInternalProperty", "parameters": "(String key)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getInternalProperty(String key) {\n        return dubboConfig.getProperty(key, null);\n    }", "signature": "String getInternalProperty(String key)", "full_signature": "@Override public String getInternalProperty(String key)", "class_method_signature": "ApolloDynamicConfiguration.getInternalProperty(String key)", "testcase": false, "constructor": false, "invocations": ["getProperty"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}