{"test_class": {"identifier": "MetadataUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger log = LoggerFactory.getLogger(MetadataUtilTest.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "log = LoggerFactory.getLogger(MetadataUtilTest.class)", "var_name": "log"}, {"original_string": "private static File workDir;", "modifier": "private static", "type": "File", "declarator": "workDir", "var_name": "workDir"}, {"original_string": "private static final String tempDir = System.getProperty(\"java.io.tmpdir\");", "modifier": "private static final", "type": "String", "declarator": "tempDir = System.getProperty(\"java.io.tmpdir\")", "var_name": "tempDir"}, {"original_string": "private static String AExml = \"ne_AEmeta.xml\";", "modifier": "private static", "type": "String", "declarator": "AExml = \"ne_AEmeta.xml\"", "var_name": "AExml"}, {"original_string": "private static String CRxml = \"ne_CRmeta.xml\";", "modifier": "private static", "type": "String", "declarator": "CRxml = \"ne_CRmeta.xml\"", "var_name": "CRxml"}], "file": "coastal-hazards-portal/src/test/java/gov/usgs/cida/coastalhazards/rest/data/util/MetadataUtilTest.java"}, "test_case": {"identifier": "testGetCrsFromFgdcMetadata", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCrsFromFgdcMetadata() throws IOException {\n        System.out.println(\"getCrsFromFgdcMetadata\");\n        //spref is used to determine hte SRS\n\n        System.out.println(\"testGetBoundingBoxFromFgdcMetadataAE\");\n\n        //get the metadata from the test file as a string using this package to locate it ...\n        String packageName = this.getClass().getCanonicalName();\n        System.out.println(\"PackageName: \" + packageName); //PackageName: gov.usgs.cida.coastalhazards.rest.data.util.MetadataUtilTest\n        // this is where the test resource is located - gov.usgs.cida.coastalhazards.rest.data + /ne_AEmeta.xml\n        String replaced = packageName.replaceAll(\"[.]\", \"/\");\n        String[] names = replaced.split(\"/util/MetadataUtilTest\");\n        String packageNameShort = names[0];\n        String testFileFullName = packageNameShort + \"/\" + CRxml;\n\n        String metadataXml = loadResourceAsString(testFileFullName);\n\n        InputStream in = new ByteArrayInputStream(metadataXml.getBytes(\"UTF-8\"));\n        Metadata metadata = null;\n\n        // JAXB will require jaxb-api.jar and jaxb-impl.jar part of java 1.6. Much safer way to interrogate xml and maintain than regex\n        try {\n            //File file = new File(xmlFile);  // FYI: can also be done via file rather than inputStream\n            JAXBContext jaxbContext = JAXBContext.newInstance(Metadata.class);\n            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\n            metadata = (Metadata) jaxbUnmarshaller.unmarshal(in);\n\n        } catch (JAXBException e) {\n            e.printStackTrace();\n        }\n\n        assertNotNull(metadata);\n\n        //Spref spref = metadata.getSpref();\n        Horizsys horizsys = metadata.getSpref().getHorizsys();\n\n        assertNotNull(horizsys);\n\n        String expEllips = \"GRS 1980\";\n        String expHorizdn = \"North American Datum 1983\";\n        double expDenflat = 298.257222101;\n        double expSemiaxis = 6378137.0;\n\n        // part I\n        String ellips = horizsys.getGeodetic().getEllips();\n        String horizdn = horizsys.getGeodetic().getHorizdn();\n        double denflat = horizsys.getGeodetic().getDenflat();\n        double semiaxis = horizsys.getGeodetic().getSemiaxis();\n\n        assertTrue(expEllips.equalsIgnoreCase(ellips));\n        assertTrue(expHorizdn.equalsIgnoreCase(horizdn));\n        assertEquals(expDenflat, denflat, expDenflat - denflat);\n        assertEquals(expSemiaxis, semiaxis, expSemiaxis - semiaxis);\n        // part II\n        String mapprojn = horizsys.getPlanar().getMapproj().getMapprojn();\n        double feast = horizsys.getPlanar().getMapproj().getMapprojp().getFeast();\n        double fnorth = horizsys.getPlanar().getMapproj().getMapprojp().getFnorth();\n        double latprjo = horizsys.getPlanar().getMapproj().getMapprojp().getLatprjo();\n        double longcm = horizsys.getPlanar().getMapproj().getMapprojp().getLongcm();\n        double stdparll = horizsys.getPlanar().getMapproj().getMapprojp().getStdparll();\n\n        String expMapprojn = \"Albers Conical Equal Area\";\n        double expFeast = 0.0;\n        double expFnorth = 0.0;\n        double expLatprjo = 23.0;\n        double expLongcm = -96.0;\n        double expStdparll = 45.5; // the second of the two children\n\n        assertTrue(expMapprojn.equalsIgnoreCase(mapprojn));\n        assertEquals(expFeast, feast, expFeast - feast);\n        assertEquals(expFnorth, fnorth, expFnorth - fnorth);\n        assertEquals(expLatprjo, latprjo, expLatprjo - latprjo);\n        assertEquals(expLongcm, longcm, expLongcm - longcm);\n        assertEquals(expStdparll, stdparll, expStdparll - stdparll);\n        //CoordinateReferenceSystem expResult = null;\n        //CoordinateReferenceSystem result = MetadataUtil.getCrsFromFgdcMetadata(metadata);\n        //assertEquals(expResult, result);\n\n    }", "signature": "void testGetCrsFromFgdcMetadata()", "full_signature": "@Test public void testGetCrsFromFgdcMetadata()", "class_method_signature": "MetadataUtilTest.testGetCrsFromFgdcMetadata()", "testcase": true, "constructor": false, "invocations": ["println", "println", "getCanonicalName", "getClass", "println", "replaceAll", "split", "loadResourceAsString", "getBytes", "newInstance", "createUnmarshaller", "unmarshal", "printStackTrace", "assertNotNull", "getHorizsys", "getSpref", "assertNotNull", "getEllips", "getGeodetic", "getHorizdn", "getGeodetic", "getDenflat", "getGeodetic", "getSemiaxis", "getGeodetic", "assertTrue", "equalsIgnoreCase", "assertTrue", "equalsIgnoreCase", "assertEquals", "assertEquals", "getMapprojn", "getMapproj", "getPlanar", "getFeast", "getMapprojp", "getMapproj", "getPlanar", "getFnorth", "getMapprojp", "getMapproj", "getPlanar", "getLatprjo", "getMapprojp", "getMapproj", "getPlanar", "getLongcm", "getMapprojp", "getMapproj", "getPlanar", "getStdparll", "getMapprojp", "getMapproj", "getPlanar", "assertTrue", "equalsIgnoreCase", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "MetadataUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MetadataUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MetadataUtil.class)", "var_name": "log"}, {"original_string": "public static final String[] XML_PROLOG_PATTERNS = {\"<\\\\?xml[^>]*>\", \"<!DOCTYPE[^>]*>\"};", "modifier": "public static final", "type": "String[]", "declarator": "XML_PROLOG_PATTERNS = {\"<\\\\?xml[^>]*>\", \"<!DOCTYPE[^>]*>\"}", "var_name": "XML_PROLOG_PATTERNS"}], "methods": [{"identifier": "parseMetadataBody", "parameters": "(String postBody)", "modifiers": "public static", "return": "Document", "signature": "Document parseMetadataBody(String postBody)", "full_signature": "public static Document parseMetadataBody(String postBody)", "class_method_signature": "MetadataUtil.parseMetadataBody(String postBody)", "testcase": false, "constructor": false}, {"identifier": "parseMetadataXmlFile", "parameters": "(String postBody)", "modifiers": "public static", "return": "ParsedMetadata", "signature": "ParsedMetadata parseMetadataXmlFile(String postBody)", "full_signature": "public static ParsedMetadata parseMetadataXmlFile(String postBody)", "class_method_signature": "MetadataUtil.parseMetadataXmlFile(String postBody)", "testcase": false, "constructor": false}, {"identifier": "stripXMLProlog", "parameters": "(String xml)", "modifiers": "public static", "return": "String", "signature": "String stripXMLProlog(String xml)", "full_signature": "public static String stripXMLProlog(String xml)", "class_method_signature": "MetadataUtil.stripXMLProlog(String xml)", "testcase": false, "constructor": false}, {"identifier": "extractStringsFromCswDoc", "parameters": "(Document cswDoc, String path)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> extractStringsFromCswDoc(Document cswDoc, String path)", "full_signature": "public static List<String> extractStringsFromCswDoc(Document cswDoc, String path)", "class_method_signature": "MetadataUtil.extractStringsFromCswDoc(Document cswDoc, String path)", "testcase": false, "constructor": false}, {"identifier": "extractCollectionDateFromXml", "parameters": "(Document xml, String attr)", "modifiers": "public static", "return": "String", "signature": "String extractCollectionDateFromXml(Document xml, String attr)", "full_signature": "public static String extractCollectionDateFromXml(Document xml, String attr)", "class_method_signature": "MetadataUtil.extractCollectionDateFromXml(Document xml, String attr)", "testcase": false, "constructor": false}, {"identifier": "getBoundingBoxFromFgdcMetadata", "parameters": "(String inMetadata)", "modifiers": "public static", "return": "Bbox", "signature": "Bbox getBoundingBoxFromFgdcMetadata(String inMetadata)", "full_signature": "public static Bbox getBoundingBoxFromFgdcMetadata(String inMetadata)", "class_method_signature": "MetadataUtil.getBoundingBoxFromFgdcMetadata(String inMetadata)", "testcase": false, "constructor": false}, {"identifier": "getCrsFromFgdcMetadata", "parameters": "(String inMetadata)", "modifiers": "public static", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCrsFromFgdcMetadata(String inMetadata)", "full_signature": "public static CoordinateReferenceSystem getCrsFromFgdcMetadata(String inMetadata)", "class_method_signature": "MetadataUtil.getCrsFromFgdcMetadata(String inMetadata)", "testcase": false, "constructor": false}, {"identifier": "buildWkt", "parameters": "(CRSParameters parms)", "modifiers": "private static", "return": "String", "signature": "String buildWkt(CRSParameters parms)", "full_signature": "private static String buildWkt(CRSParameters parms)", "class_method_signature": "MetadataUtil.buildWkt(CRSParameters parms)", "testcase": false, "constructor": false}, {"identifier": "getParameterNode", "parameters": "(String name, double value)", "modifiers": "private static", "return": "String", "signature": "String getParameterNode(String name, double value)", "full_signature": "private static String getParameterNode(String name, double value)", "class_method_signature": "MetadataUtil.getParameterNode(String name, double value)", "testcase": false, "constructor": false}, {"identifier": "getResourcesFromXml", "parameters": "(Document doc, String path)", "modifiers": "public static", "return": "List<Publication>", "signature": "List<Publication> getResourcesFromXml(Document doc, String path)", "full_signature": "public static List<Publication> getResourcesFromXml(Document doc, String path)", "class_method_signature": "MetadataUtil.getResourcesFromXml(Document doc, String path)", "testcase": false, "constructor": false}], "file": "coastal-hazards-portal/src/main/java/gov/usgs/cida/coastalhazards/rest/data/util/MetadataUtil.java"}, "focal_method": {"identifier": "getCrsFromFgdcMetadata", "parameters": "(String inMetadata)", "modifiers": "public static", "return": "CoordinateReferenceSystem", "body": "public static CoordinateReferenceSystem getCrsFromFgdcMetadata(String inMetadata) throws FactoryException, JAXBException, UnsupportedEncodingException{\n        //create the WKT to instantiate a CRS object from org.geotools.referencing\n            \n            CRSParameters crsParms = new CRSParameters();\n            \n            Metadata metadata = null;\n            try {\n                    JAXBContext jaxbContext = JAXBContext.newInstance(Metadata.class);\n\n                    Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\n                    metadata = (Metadata) jaxbUnmarshaller.unmarshal(new ByteArrayInputStream(inMetadata.getBytes(\"UTF-8\")));               \n\n            }     catch (JAXBException e) { //schema used https: www.fgdc.gov/schemas/metadata/fgdc-std-001-1998-sect01.xsd\n                        log.error(\"Unable to parse xml file. Has the schema changed? https:www.fgdc.gov/schemas/metadata/fgdc-std-001-1998-sect01.xsd :\" + e.getMessage());\n                        throw e;\n            }  \n            \n            Horizsys horizsys = metadata.getSpref().getHorizsys();\n                            \n            String ellips = horizsys.getGeodetic().getEllips();\n            String horizdn = horizsys.getGeodetic().getHorizdn();\n            double denflat = horizsys.getGeodetic().getDenflat();\n            double semiaxis = horizsys.getGeodetic().getSemiaxis();\n            \n            String mapprojn = horizsys.getPlanar().getMapproj().getMapprojn();\n            double feast = horizsys.getPlanar().getMapproj().getMapprojp().getFeast();\n            double fnorth = horizsys.getPlanar().getMapproj().getMapprojp().getFnorth();\n            double latprjo = horizsys.getPlanar().getMapproj().getMapprojp().getLatprjo();\n            double longcm = horizsys.getPlanar().getMapproj().getMapprojp().getLongcm();\n            double stdparll = horizsys.getPlanar().getMapproj().getMapprojp().getStdparll();\n            \n            // these defaults were derived from the first 3 raster files meta-data CR, AE, PAE\n            // Hoping that these can be optional or located in future metadata in which case \n            // an if check should be performed and the value replaced if it doesn't match the default\n            String defaultGcs = \"GCS_North_American_1983\";\n            String defaultPrimeM = \"Greenwich\\\",0.0]\";\n            String defaultUnit = \"Degree\\\",0.0174532925199433]]\";\n            String defaultProjection = \"Albers\";\n            String defaultLengthUnit = \"Meter\";\n            double defaultLengthValue = 1.0;                \n            \n            crsParms.setEllips(ellips);\n            crsParms.setHorizdn(horizdn);\n            crsParms.setDenflat(denflat);\n            crsParms.setSemiaxis(semiaxis);\n            crsParms.setMapprojn(mapprojn);\n            crsParms.setFeast(feast);\n            crsParms.setFnorth(fnorth);\n            crsParms.setLatprjo(latprjo);\n            crsParms.setLongcm(longcm);\n            crsParms.setStdparll(stdparll);\n            \n            crsParms.setGcs(defaultGcs);\n            crsParms.setPrimeM(defaultPrimeM);\n            crsParms.setUnit(defaultUnit);\n            crsParms.setProjection(defaultProjection);\n            crsParms.setLengthUnit(defaultLengthUnit);\n            crsParms.setLengthValue(defaultLengthValue);\n                            \n            // to look up the EPSG code use Integer eCode = CRS.lookupEpsgCode(crs, true); yields 5070 and/or String idCode = CRS.lookupIdentifier(crs, true); yields EPSG:5070 \n            return CRS.parseWKT(buildWkt(crsParms));// same as FactoryFinder.getCRSFactory(null).createFromWKT(wkt);\n        }", "signature": "CoordinateReferenceSystem getCrsFromFgdcMetadata(String inMetadata)", "full_signature": "public static CoordinateReferenceSystem getCrsFromFgdcMetadata(String inMetadata)", "class_method_signature": "MetadataUtil.getCrsFromFgdcMetadata(String inMetadata)", "testcase": false, "constructor": false, "invocations": ["newInstance", "createUnmarshaller", "unmarshal", "getBytes", "error", "getMessage", "getHorizsys", "getSpref", "getEllips", "getGeodetic", "getHorizdn", "getGeodetic", "getDenflat", "getGeodetic", "getSemiaxis", "getGeodetic", "getMapprojn", "getMapproj", "getPlanar", "getFeast", "getMapprojp", "getMapproj", "getPlanar", "getFnorth", "getMapprojp", "getMapproj", "getPlanar", "getLatprjo", "getMapprojp", "getMapproj", "getPlanar", "getLongcm", "getMapprojp", "getMapproj", "getPlanar", "getStdparll", "getMapprojp", "getMapproj", "getPlanar", "setEllips", "setHorizdn", "setDenflat", "setSemiaxis", "setMapprojn", "setFeast", "setFnorth", "setLatprjo", "setLongcm", "setStdparll", "setGcs", "setPrimeM", "setUnit", "setProjection", "setLengthUnit", "setLengthValue", "parseWKT", "buildWkt"]}, "repository": {"repo_id": 6888625, "url": "https://github.com/USGS-CIDA/coastal-hazards", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 5, "size": 37212, "license": "licensed"}}