{"test_class": {"identifier": "InterpretationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Interpretation analyzedInterpretation;", "modifier": "private", "type": "Interpretation", "declarator": "analyzedInterpretation", "var_name": "analyzedInterpretation"}, {"original_string": "private Interpretation defaultInterpretation;", "modifier": "private", "type": "Interpretation", "declarator": "defaultInterpretation", "var_name": "defaultInterpretation"}, {"original_string": "private Linguistics.SentenceType sentenceType;", "modifier": "private", "type": "Linguistics.SentenceType", "declarator": "sentenceType", "var_name": "sentenceType"}, {"original_string": "private String sentence;", "modifier": "private", "type": "String", "declarator": "sentence", "var_name": "sentence"}, {"original_string": "private Triple triple;", "modifier": "private", "type": "Triple", "declarator": "triple", "var_name": "triple"}, {"original_string": "private List<Triple> triples;", "modifier": "private", "type": "List<Triple>", "declarator": "triples", "var_name": "triples"}, {"original_string": "private List<Triple> semTriples;", "modifier": "private", "type": "List<Triple>", "declarator": "semTriples", "var_name": "semTriples"}, {"original_string": "private List<String> tokens;", "modifier": "private", "type": "List<String>", "declarator": "tokens", "var_name": "tokens"}, {"original_string": "private String[] posTags;", "modifier": "private", "type": "String[]", "declarator": "posTags", "var_name": "posTags"}, {"original_string": "private String[] lemmas;", "modifier": "private", "type": "String[]", "declarator": "lemmas", "var_name": "lemmas"}, {"original_string": "private Entity entity;", "modifier": "private", "type": "Entity", "declarator": "entity", "var_name": "entity"}, {"original_string": "private Keyword keyword;", "modifier": "private", "type": "Keyword", "declarator": "keyword", "var_name": "keyword"}, {"original_string": "private List<Keyword> keywords;", "modifier": "private", "type": "List<Keyword>", "declarator": "keywords", "var_name": "keywords"}, {"original_string": "private String association;", "modifier": "private", "type": "String", "declarator": "association", "var_name": "association"}, {"original_string": "private Map<Linguistics.SemanticRole, String> pas;", "modifier": "private", "type": "Map<Linguistics.SemanticRole, String>", "declarator": "pas", "var_name": "pas"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private String celebrity;", "modifier": "private", "type": "String", "declarator": "celebrity", "var_name": "celebrity"}, {"original_string": "private boolean isRoboy ;", "modifier": "private", "type": "boolean", "declarator": "isRoboy", "var_name": "isRoboy"}, {"original_string": "private String objAnswer;", "modifier": "private", "type": "String", "declarator": "objAnswer", "var_name": "objAnswer"}, {"original_string": "private String predAnswer;", "modifier": "private", "type": "String", "declarator": "predAnswer", "var_name": "predAnswer"}, {"original_string": "private RoboyEmotion emotion;", "modifier": "private", "type": "RoboyEmotion", "declarator": "emotion", "var_name": "emotion"}, {"original_string": "private String intent;", "modifier": "private", "type": "String", "declarator": "intent", "var_name": "intent"}, {"original_string": "private String intentDistance;", "modifier": "private", "type": "String", "declarator": "intentDistance", "var_name": "intentDistance"}, {"original_string": "private String parse;", "modifier": "private", "type": "String", "declarator": "parse", "var_name": "parse"}, {"original_string": "private String underspecifiedQuestion;", "modifier": "private", "type": "String", "declarator": "underspecifiedQuestion", "var_name": "underspecifiedQuestion"}, {"original_string": "private String underspecifiedAnswer;", "modifier": "private", "type": "String", "declarator": "underspecifiedAnswer", "var_name": "underspecifiedAnswer"}, {"original_string": "private Linguistics.UtteranceSentiment sentiment;", "modifier": "private", "type": "Linguistics.UtteranceSentiment", "declarator": "sentiment", "var_name": "sentiment"}, {"original_string": "private Linguistics.ParsingOutcome parsingOutcome;", "modifier": "private", "type": "Linguistics.ParsingOutcome", "declarator": "parsingOutcome", "var_name": "parsingOutcome"}, {"original_string": "private String answer;", "modifier": "private", "type": "String", "declarator": "answer", "var_name": "answer"}], "file": "dialog/src/test/java/roboy/linguistics/sentenceanalysis/InterpretationTest.java"}, "test_case": {"identifier": "getPosTags", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getPosTags() {\n        assertArrayEquals(posTags, defaultInterpretation.getPosTags());\n        assertArrayEquals(defaultInterpretation.getPosTags(), analyzedInterpretation.getPosTags());\n    }", "signature": "void getPosTags()", "full_signature": "@Test public void getPosTags()", "class_method_signature": "InterpretationTest.getPosTags()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "getPosTags", "assertArrayEquals", "getPosTags", "getPosTags"]}, "focal_class": {"identifier": "Interpretation", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "private final Logger LOGGER = LogManager.getLogger();", "modifier": "private final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger()", "var_name": "LOGGER"}, {"original_string": "private SentenceType sentenceType = null;", "modifier": "private", "type": "SentenceType", "declarator": "sentenceType = null", "var_name": "sentenceType"}, {"original_string": "private String sentence = null;", "modifier": "private", "type": "String", "declarator": "sentence = null", "var_name": "sentence"}, {"original_string": "private List<Triple> triples = null;", "modifier": "private", "type": "List<Triple>", "declarator": "triples = null", "var_name": "triples"}, {"original_string": "private List<Triple> semTriples = null;", "modifier": "private", "type": "List<Triple>", "declarator": "semTriples = null", "var_name": "semTriples"}, {"original_string": "private List<String> tokens = null;", "modifier": "private", "type": "List<String>", "declarator": "tokens = null", "var_name": "tokens"}, {"original_string": "private String[] posTags = null;", "modifier": "private", "type": "String[]", "declarator": "posTags = null", "var_name": "posTags"}, {"original_string": "private String[] lemmas = null;", "modifier": "private", "type": "String[]", "declarator": "lemmas = null", "var_name": "lemmas"}, {"original_string": "private List<Keyword> keywords = null;", "modifier": "private", "type": "List<Keyword>", "declarator": "keywords = null", "var_name": "keywords"}, {"original_string": "private String association = null;", "modifier": "private", "type": "String", "declarator": "association = null", "var_name": "association"}, {"original_string": "private Map<SemanticRole, String> pas = null;", "modifier": "private", "type": "Map<SemanticRole, String>", "declarator": "pas = null", "var_name": "pas"}, {"original_string": "private String name = null;", "modifier": "private", "type": "String", "declarator": "name = null", "var_name": "name"}, {"original_string": "private String celebrity = null;", "modifier": "private", "type": "String", "declarator": "celebrity = null", "var_name": "celebrity"}, {"original_string": "private boolean isRoboy = false;", "modifier": "private", "type": "boolean", "declarator": "isRoboy = false", "var_name": "isRoboy"}, {"original_string": "private String objAnswer = null;", "modifier": "private", "type": "String", "declarator": "objAnswer = null", "var_name": "objAnswer"}, {"original_string": "private String predAnswer = null;", "modifier": "private", "type": "String", "declarator": "predAnswer = null", "var_name": "predAnswer"}, {"original_string": "private RoboyEmotion emotion = null;", "modifier": "private", "type": "RoboyEmotion", "declarator": "emotion = null", "var_name": "emotion"}, {"original_string": "private boolean profanity = false;", "modifier": "private", "type": "boolean", "declarator": "profanity = false", "var_name": "profanity"}, {"original_string": "private String intent = null;", "modifier": "private", "type": "String", "declarator": "intent = null", "var_name": "intent"}, {"original_string": "private String intentDistance = null;", "modifier": "private", "type": "String", "declarator": "intentDistance = null", "var_name": "intentDistance"}, {"original_string": "private UtteranceSentiment sentiment = null;", "modifier": "private", "type": "UtteranceSentiment", "declarator": "sentiment = null", "var_name": "sentiment"}, {"original_string": "private ParsingOutcome parsingOutcome = null;", "modifier": "private", "type": "ParsingOutcome", "declarator": "parsingOutcome = null", "var_name": "parsingOutcome"}, {"original_string": "private String parse = null;", "modifier": "private", "type": "String", "declarator": "parse = null", "var_name": "parse"}, {"original_string": "private String answer = null;", "modifier": "private", "type": "String", "declarator": "answer = null", "var_name": "answer"}, {"original_string": "private String underspecifiedQuestion = null;", "modifier": "private", "type": "String", "declarator": "underspecifiedQuestion = null", "var_name": "underspecifiedQuestion"}, {"original_string": "private String underspecifiedAnswer = null;", "modifier": "private", "type": "String", "declarator": "underspecifiedAnswer = null", "var_name": "underspecifiedAnswer"}, {"original_string": "private SemanticAnalysisLambda semanticAnalysisLambda = null;", "modifier": "private", "type": "SemanticAnalysisLambda", "declarator": "semanticAnalysisLambda = null", "var_name": "semanticAnalysisLambda"}], "methods": [{"identifier": "Interpretation", "parameters": "()", "modifiers": "public", "return": "", "signature": " Interpretation()", "full_signature": "public  Interpretation()", "class_method_signature": "Interpretation.Interpretation()", "testcase": false, "constructor": true}, {"identifier": "Interpretation", "parameters": "(String sentence)", "modifiers": "public", "return": "", "signature": " Interpretation(String sentence)", "full_signature": "public  Interpretation(String sentence)", "class_method_signature": "Interpretation.Interpretation(String sentence)", "testcase": false, "constructor": true}, {"identifier": "Interpretation", "parameters": "(String sentence, Interpretation interpretation)", "modifiers": "public", "return": "", "signature": " Interpretation(String sentence, Interpretation interpretation)", "full_signature": "public  Interpretation(String sentence, Interpretation interpretation)", "class_method_signature": "Interpretation.Interpretation(String sentence, Interpretation interpretation)", "testcase": false, "constructor": true}, {"identifier": "Interpretation", "parameters": "(SentenceType sentenceType, String sentence, Triple triple)", "modifiers": "public", "return": "", "signature": " Interpretation(SentenceType sentenceType, String sentence, Triple triple)", "full_signature": "public  Interpretation(SentenceType sentenceType, String sentence, Triple triple)", "class_method_signature": "Interpretation.Interpretation(SentenceType sentenceType, String sentence, Triple triple)", "testcase": false, "constructor": true}, {"identifier": "Interpretation", "parameters": "(Interpretation interpretation)", "modifiers": "public", "return": "", "signature": " Interpretation(Interpretation interpretation)", "full_signature": "public  Interpretation(Interpretation interpretation)", "class_method_signature": "Interpretation.Interpretation(Interpretation interpretation)", "testcase": false, "constructor": true}, {"identifier": "getSentenceType", "parameters": "()", "modifiers": "@Nullable public", "return": "SentenceType", "signature": "SentenceType getSentenceType()", "full_signature": "@Nullable public SentenceType getSentenceType()", "class_method_signature": "Interpretation.getSentenceType()", "testcase": false, "constructor": false}, {"identifier": "setSentenceType", "parameters": "(SentenceType sentenceType)", "modifiers": "public", "return": "void", "signature": "void setSentenceType(SentenceType sentenceType)", "full_signature": "public void setSentenceType(SentenceType sentenceType)", "class_method_signature": "Interpretation.setSentenceType(SentenceType sentenceType)", "testcase": false, "constructor": false}, {"identifier": "getSentence", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getSentence()", "full_signature": "@Nullable public String getSentence()", "class_method_signature": "Interpretation.getSentence()", "testcase": false, "constructor": false}, {"identifier": "setSentence", "parameters": "(String sentence)", "modifiers": "public", "return": "void", "signature": "void setSentence(String sentence)", "full_signature": "public void setSentence(String sentence)", "class_method_signature": "Interpretation.setSentence(String sentence)", "testcase": false, "constructor": false}, {"identifier": "getTriples", "parameters": "()", "modifiers": "@Nullable public", "return": "List<Triple>", "signature": "List<Triple> getTriples()", "full_signature": "@Nullable public List<Triple> getTriples()", "class_method_signature": "Interpretation.getTriples()", "testcase": false, "constructor": false}, {"identifier": "setTriples", "parameters": "(List<Triple> triple)", "modifiers": "public", "return": "void", "signature": "void setTriples(List<Triple> triple)", "full_signature": "public void setTriples(List<Triple> triple)", "class_method_signature": "Interpretation.setTriples(List<Triple> triple)", "testcase": false, "constructor": false}, {"identifier": "getTokens", "parameters": "()", "modifiers": "@Nullable public", "return": "List<String>", "signature": "List<String> getTokens()", "full_signature": "@Nullable public List<String> getTokens()", "class_method_signature": "Interpretation.getTokens()", "testcase": false, "constructor": false}, {"identifier": "setTokens", "parameters": "(List<String> tokens)", "modifiers": "public", "return": "void", "signature": "void setTokens(List<String> tokens)", "full_signature": "public void setTokens(List<String> tokens)", "class_method_signature": "Interpretation.setTokens(List<String> tokens)", "testcase": false, "constructor": false}, {"identifier": "getPosTags", "parameters": "()", "modifiers": "@Nullable public", "return": "String[]", "signature": "String[] getPosTags()", "full_signature": "@Nullable public String[] getPosTags()", "class_method_signature": "Interpretation.getPosTags()", "testcase": false, "constructor": false}, {"identifier": "setPosTags", "parameters": "(String[] posTags)", "modifiers": "public", "return": "void", "signature": "void setPosTags(String[] posTags)", "full_signature": "public void setPosTags(String[] posTags)", "class_method_signature": "Interpretation.setPosTags(String[] posTags)", "testcase": false, "constructor": false}, {"identifier": "getLemmas", "parameters": "()", "modifiers": "@Nullable public", "return": "String[]", "signature": "String[] getLemmas()", "full_signature": "@Nullable public String[] getLemmas()", "class_method_signature": "Interpretation.getLemmas()", "testcase": false, "constructor": false}, {"identifier": "setLemmas", "parameters": "(String[] lemmas)", "modifiers": "public", "return": "void", "signature": "void setLemmas(String[] lemmas)", "full_signature": "public void setLemmas(String[] lemmas)", "class_method_signature": "Interpretation.setLemmas(String[] lemmas)", "testcase": false, "constructor": false}, {"identifier": "getKeywords", "parameters": "()", "modifiers": "@Nullable public", "return": "List<Keyword>", "signature": "List<Keyword> getKeywords()", "full_signature": "@Nullable public List<Keyword> getKeywords()", "class_method_signature": "Interpretation.getKeywords()", "testcase": false, "constructor": false}, {"identifier": "setKeywords", "parameters": "(List<Keyword> keywords)", "modifiers": "public", "return": "void", "signature": "void setKeywords(List<Keyword> keywords)", "full_signature": "public void setKeywords(List<Keyword> keywords)", "class_method_signature": "Interpretation.setKeywords(List<Keyword> keywords)", "testcase": false, "constructor": false}, {"identifier": "addKeyword", "parameters": "(Keyword keyword)", "modifiers": "public", "return": "void", "signature": "void addKeyword(Keyword keyword)", "full_signature": "public void addKeyword(Keyword keyword)", "class_method_signature": "Interpretation.addKeyword(Keyword keyword)", "testcase": false, "constructor": false}, {"identifier": "getAssociation", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getAssociation()", "full_signature": "@Nullable public String getAssociation()", "class_method_signature": "Interpretation.getAssociation()", "testcase": false, "constructor": false}, {"identifier": "setAssociation", "parameters": "(String association)", "modifiers": "public", "return": "void", "signature": "void setAssociation(String association)", "full_signature": "public void setAssociation(String association)", "class_method_signature": "Interpretation.setAssociation(String association)", "testcase": false, "constructor": false}, {"identifier": "getPas", "parameters": "()", "modifiers": "@Nullable public", "return": "Map<SemanticRole, String>", "signature": "Map<SemanticRole, String> getPas()", "full_signature": "@Nullable public Map<SemanticRole, String> getPas()", "class_method_signature": "Interpretation.getPas()", "testcase": false, "constructor": false}, {"identifier": "setPas", "parameters": "(Map<SemanticRole, String> pas)", "modifiers": "public", "return": "void", "signature": "void setPas(Map<SemanticRole, String> pas)", "full_signature": "public void setPas(Map<SemanticRole, String> pas)", "class_method_signature": "Interpretation.setPas(Map<SemanticRole, String> pas)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getName()", "full_signature": "@Nullable public String getName()", "class_method_signature": "Interpretation.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "Interpretation.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getCelebrity", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getCelebrity()", "full_signature": "@Nullable public String getCelebrity()", "class_method_signature": "Interpretation.getCelebrity()", "testcase": false, "constructor": false}, {"identifier": "setCelebrity", "parameters": "(String celebrity)", "modifiers": "public", "return": "void", "signature": "void setCelebrity(String celebrity)", "full_signature": "public void setCelebrity(String celebrity)", "class_method_signature": "Interpretation.setCelebrity(String celebrity)", "testcase": false, "constructor": false}, {"identifier": "isRoboy", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRoboy()", "full_signature": "public boolean isRoboy()", "class_method_signature": "Interpretation.isRoboy()", "testcase": false, "constructor": false}, {"identifier": "setRoboy", "parameters": "(boolean roboy)", "modifiers": "public", "return": "void", "signature": "void setRoboy(boolean roboy)", "full_signature": "public void setRoboy(boolean roboy)", "class_method_signature": "Interpretation.setRoboy(boolean roboy)", "testcase": false, "constructor": false}, {"identifier": "getObjAnswer", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getObjAnswer()", "full_signature": "@Nullable public String getObjAnswer()", "class_method_signature": "Interpretation.getObjAnswer()", "testcase": false, "constructor": false}, {"identifier": "setObjAnswer", "parameters": "(String objAnswer)", "modifiers": "public", "return": "void", "signature": "void setObjAnswer(String objAnswer)", "full_signature": "public void setObjAnswer(String objAnswer)", "class_method_signature": "Interpretation.setObjAnswer(String objAnswer)", "testcase": false, "constructor": false}, {"identifier": "getPredAnswer", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getPredAnswer()", "full_signature": "@Nullable public String getPredAnswer()", "class_method_signature": "Interpretation.getPredAnswer()", "testcase": false, "constructor": false}, {"identifier": "setPredAnswer", "parameters": "(String predAnswer)", "modifiers": "public", "return": "void", "signature": "void setPredAnswer(String predAnswer)", "full_signature": "public void setPredAnswer(String predAnswer)", "class_method_signature": "Interpretation.setPredAnswer(String predAnswer)", "testcase": false, "constructor": false}, {"identifier": "getEmotion", "parameters": "()", "modifiers": "@Nullable public", "return": "RoboyEmotion", "signature": "RoboyEmotion getEmotion()", "full_signature": "@Nullable public RoboyEmotion getEmotion()", "class_method_signature": "Interpretation.getEmotion()", "testcase": false, "constructor": false}, {"identifier": "setEmotion", "parameters": "(RoboyEmotion emotion)", "modifiers": "public", "return": "void", "signature": "void setEmotion(RoboyEmotion emotion)", "full_signature": "public void setEmotion(RoboyEmotion emotion)", "class_method_signature": "Interpretation.setEmotion(RoboyEmotion emotion)", "testcase": false, "constructor": false}, {"identifier": "getProfanity", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getProfanity()", "full_signature": "public boolean getProfanity()", "class_method_signature": "Interpretation.getProfanity()", "testcase": false, "constructor": false}, {"identifier": "setProfanity", "parameters": "(boolean profanity)", "modifiers": "public", "return": "void", "signature": "void setProfanity(boolean profanity)", "full_signature": "public void setProfanity(boolean profanity)", "class_method_signature": "Interpretation.setProfanity(boolean profanity)", "testcase": false, "constructor": false}, {"identifier": "getIntent", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getIntent()", "full_signature": "@Nullable public String getIntent()", "class_method_signature": "Interpretation.getIntent()", "testcase": false, "constructor": false}, {"identifier": "setIntent", "parameters": "(String intent)", "modifiers": "public", "return": "void", "signature": "void setIntent(String intent)", "full_signature": "public void setIntent(String intent)", "class_method_signature": "Interpretation.setIntent(String intent)", "testcase": false, "constructor": false}, {"identifier": "getIntentDistance", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getIntentDistance()", "full_signature": "@Nullable public String getIntentDistance()", "class_method_signature": "Interpretation.getIntentDistance()", "testcase": false, "constructor": false}, {"identifier": "setIntentDistance", "parameters": "(String intentDistance)", "modifiers": "public", "return": "void", "signature": "void setIntentDistance(String intentDistance)", "full_signature": "public void setIntentDistance(String intentDistance)", "class_method_signature": "Interpretation.setIntentDistance(String intentDistance)", "testcase": false, "constructor": false}, {"identifier": "getSentiment", "parameters": "()", "modifiers": "@Nullable public", "return": "UtteranceSentiment", "signature": "UtteranceSentiment getSentiment()", "full_signature": "@Nullable public UtteranceSentiment getSentiment()", "class_method_signature": "Interpretation.getSentiment()", "testcase": false, "constructor": false}, {"identifier": "setSentiment", "parameters": "(UtteranceSentiment sentiment)", "modifiers": "public", "return": "void", "signature": "void setSentiment(UtteranceSentiment sentiment)", "full_signature": "public void setSentiment(UtteranceSentiment sentiment)", "class_method_signature": "Interpretation.setSentiment(UtteranceSentiment sentiment)", "testcase": false, "constructor": false}, {"identifier": "setSemanticAnalysisLambda", "parameters": "(SemanticAnalysisLambda lambda)", "modifiers": "public", "return": "void", "signature": "void setSemanticAnalysisLambda(SemanticAnalysisLambda lambda)", "full_signature": "public void setSemanticAnalysisLambda(SemanticAnalysisLambda lambda)", "class_method_signature": "Interpretation.setSemanticAnalysisLambda(SemanticAnalysisLambda lambda)", "testcase": false, "constructor": false}, {"identifier": "makeSureSemanticParserIsExecuted", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void makeSureSemanticParserIsExecuted()", "full_signature": "private void makeSureSemanticParserIsExecuted()", "class_method_signature": "Interpretation.makeSureSemanticParserIsExecuted()", "testcase": false, "constructor": false}, {"identifier": "getSemTriples", "parameters": "()", "modifiers": "@Nullable public", "return": "List<Triple>", "signature": "List<Triple> getSemTriples()", "full_signature": "@Nullable public List<Triple> getSemTriples()", "class_method_signature": "Interpretation.getSemTriples()", "testcase": false, "constructor": false}, {"identifier": "setSemTriples", "parameters": "(List<Triple> semTriples)", "modifiers": "public", "return": "void", "signature": "void setSemTriples(List<Triple> semTriples)", "full_signature": "public void setSemTriples(List<Triple> semTriples)", "class_method_signature": "Interpretation.setSemTriples(List<Triple> semTriples)", "testcase": false, "constructor": false}, {"identifier": "getParse", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getParse()", "full_signature": "@Nullable public String getParse()", "class_method_signature": "Interpretation.getParse()", "testcase": false, "constructor": false}, {"identifier": "setParse", "parameters": "(String parse)", "modifiers": "public", "return": "void", "signature": "void setParse(String parse)", "full_signature": "public void setParse(String parse)", "class_method_signature": "Interpretation.setParse(String parse)", "testcase": false, "constructor": false}, {"identifier": "getUnderspecifiedQuestion", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getUnderspecifiedQuestion()", "full_signature": "@Nullable public String getUnderspecifiedQuestion()", "class_method_signature": "Interpretation.getUnderspecifiedQuestion()", "testcase": false, "constructor": false}, {"identifier": "setUnderspecifiedQuestion", "parameters": "(String underspecifiedQuestion)", "modifiers": "public", "return": "void", "signature": "void setUnderspecifiedQuestion(String underspecifiedQuestion)", "full_signature": "public void setUnderspecifiedQuestion(String underspecifiedQuestion)", "class_method_signature": "Interpretation.setUnderspecifiedQuestion(String underspecifiedQuestion)", "testcase": false, "constructor": false}, {"identifier": "getUnderspecifiedAnswer", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getUnderspecifiedAnswer()", "full_signature": "@Nullable public String getUnderspecifiedAnswer()", "class_method_signature": "Interpretation.getUnderspecifiedAnswer()", "testcase": false, "constructor": false}, {"identifier": "setUnderspecifiedAnswer", "parameters": "(String underspecifiedAnswer)", "modifiers": "public", "return": "void", "signature": "void setUnderspecifiedAnswer(String underspecifiedAnswer)", "full_signature": "public void setUnderspecifiedAnswer(String underspecifiedAnswer)", "class_method_signature": "Interpretation.setUnderspecifiedAnswer(String underspecifiedAnswer)", "testcase": false, "constructor": false}, {"identifier": "getParsingOutcome", "parameters": "()", "modifiers": "@Nullable public", "return": "ParsingOutcome", "signature": "ParsingOutcome getParsingOutcome()", "full_signature": "@Nullable public ParsingOutcome getParsingOutcome()", "class_method_signature": "Interpretation.getParsingOutcome()", "testcase": false, "constructor": false}, {"identifier": "setParsingOutcome", "parameters": "(ParsingOutcome parsingOutcome)", "modifiers": "public", "return": "void", "signature": "void setParsingOutcome(ParsingOutcome parsingOutcome)", "full_signature": "public void setParsingOutcome(ParsingOutcome parsingOutcome)", "class_method_signature": "Interpretation.setParsingOutcome(ParsingOutcome parsingOutcome)", "testcase": false, "constructor": false}, {"identifier": "getAnswer", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getAnswer()", "full_signature": "@Nullable public String getAnswer()", "class_method_signature": "Interpretation.getAnswer()", "testcase": false, "constructor": false}, {"identifier": "setAnswer", "parameters": "(String answer)", "modifiers": "public", "return": "void", "signature": "void setAnswer(String answer)", "full_signature": "public void setAnswer(String answer)", "class_method_signature": "Interpretation.setAnswer(String answer)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Interpretation interpretation)", "modifiers": "public", "return": "void", "signature": "void copy(Interpretation interpretation)", "full_signature": "public void copy(Interpretation interpretation)", "class_method_signature": "Interpretation.copy(Interpretation interpretation)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Interpretation interpretation)", "modifiers": "public", "return": "void", "signature": "void put(Interpretation interpretation)", "full_signature": "public void put(Interpretation interpretation)", "class_method_signature": "Interpretation.put(Interpretation interpretation)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Interpretation.toString()", "testcase": false, "constructor": false}, {"identifier": "toLowerCase", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void toLowerCase()", "full_signature": "public void toLowerCase()", "class_method_signature": "Interpretation.toLowerCase()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Interpretation.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Interpretation.hashCode()", "testcase": false, "constructor": false}], "file": "dialog/src/main/java/roboy/linguistics/sentenceanalysis/Interpretation.java"}, "focal_method": {"identifier": "getPosTags", "parameters": "()", "modifiers": "@Nullable public", "return": "String[]", "body": "@Nullable\n    public String[] getPosTags() {\n        return posTags;\n    }", "signature": "String[] getPosTags()", "full_signature": "@Nullable public String[] getPosTags()", "class_method_signature": "Interpretation.getPosTags()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 61996222, "url": "https://github.com/Roboy/roboy_dialog", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 96226, "license": "licensed"}}