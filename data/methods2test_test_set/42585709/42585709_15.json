{"test_class": {"identifier": "ImportEndpointTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate ImportEndpoint importer;", "modifier": "@Autowired\n\tprivate", "type": "ImportEndpoint", "declarator": "importer", "var_name": "importer"}, {"original_string": "@Autowired\n\tprivate NanoentityRepository nanoentityRepository;", "modifier": "@Autowired\n\tprivate", "type": "NanoentityRepository", "declarator": "nanoentityRepository", "var_name": "nanoentityRepository"}, {"original_string": "@Autowired\n\tprivate CouplingInstanceRepository couplingInstanceRepository;", "modifier": "@Autowired\n\tprivate", "type": "CouplingInstanceRepository", "declarator": "couplingInstanceRepository", "var_name": "couplingInstanceRepository"}], "file": "Engine/src/test/java/ch/hsr/servicecutter/importer/ImportEndpointTest.java"}, "test_case": {"identifier": "importTwoNanoentitiesWithSameName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void importTwoNanoentitiesWithSameName() {\n\t\t// Given\n\t\tEntity user = createEntity(\"User\", \"name\");\n\t\tEntity company = createEntity(\"Company\", \"name\");\n\t\tEntity stock = createEntity(\"Stock\", \"name\");\n\t\tList<Entity> entities = Arrays.asList(company, user, stock);\n\t\tEntityRelationDiagram erd = new EntityRelationDiagram();\n\t\terd.setEntities(entities);\n\t\tList<EntityRelation> relations = Arrays.asList(new EntityRelation(user, company, RelationType.COMPOSITION));\n\t\terd.setRelations(relations);\n\t\t// When\n\t\timporter.importERD(erd);\n\t\t// Then\n\t\tList<Nanoentity> nanoentities = Lists.newArrayList(nanoentityRepository.findAll());\n\t\tassertThat(nanoentities, hasSize(3));\n\t\tList<String> contextNames = nanoentities.stream().map(Nanoentity::getContextName).collect(toList());\n\t\tassertThat(contextNames, containsInAnyOrder(\"User.name\", \"Company.name\", \"Stock.name\"));\n\t\t// only two instances of SAME_ENTITY\n\t\tList<CouplingInstance> couplings = Lists.newArrayList(couplingInstanceRepository.findAll());\n\t\tassertThat(couplings.stream().map(CouplingInstance::getType).collect(toList()), containsInAnyOrder(InstanceType.SAME_ENTITY, InstanceType.SAME_ENTITY));\n\t\tassertThat(couplings.stream().map(CouplingInstance::getName).collect(toList()), containsInAnyOrder(\"User\", \"Stock\"));\n\t}", "signature": "void importTwoNanoentitiesWithSameName()", "full_signature": "@Test public void importTwoNanoentitiesWithSameName()", "class_method_signature": "ImportEndpointTest.importTwoNanoentitiesWithSameName()", "testcase": true, "constructor": false, "invocations": ["createEntity", "createEntity", "createEntity", "asList", "setEntities", "asList", "setRelations", "importERD", "newArrayList", "findAll", "assertThat", "hasSize", "collect", "map", "stream", "toList", "assertThat", "containsInAnyOrder", "newArrayList", "findAll", "assertThat", "collect", "map", "stream", "toList", "containsInAnyOrder", "assertThat", "collect", "map", "stream", "toList", "containsInAnyOrder"]}, "focal_class": {"identifier": "ImportEndpoint", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(ImportEndpoint.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ImportEndpoint.class)", "var_name": "log"}, {"original_string": "private final UserSystemRepository userSystemRepository;", "modifier": "private final", "type": "UserSystemRepository", "declarator": "userSystemRepository", "var_name": "userSystemRepository"}, {"original_string": "private final NanoentityRepository nanoentityRepository;", "modifier": "private final", "type": "NanoentityRepository", "declarator": "nanoentityRepository", "var_name": "nanoentityRepository"}, {"original_string": "private final CouplingCriterionRepository couplingCriterionRepository;", "modifier": "private final", "type": "CouplingCriterionRepository", "declarator": "couplingCriterionRepository", "var_name": "couplingCriterionRepository"}, {"original_string": "private final CouplingCriterionCharacteristicRepository couplingCriteriaCharacteristicRepository;", "modifier": "private final", "type": "CouplingCriterionCharacteristicRepository", "declarator": "couplingCriteriaCharacteristicRepository", "var_name": "couplingCriteriaCharacteristicRepository"}, {"original_string": "private final CouplingInstanceRepository couplingInstanceRepository;", "modifier": "private final", "type": "CouplingInstanceRepository", "declarator": "couplingInstanceRepository", "var_name": "couplingInstanceRepository"}, {"original_string": "private final UserSystemCompleter systemCompleter;", "modifier": "private final", "type": "UserSystemCompleter", "declarator": "systemCompleter", "var_name": "systemCompleter"}], "methods": [{"identifier": "ImportEndpoint", "parameters": "(final UserSystemRepository userSystemRepository, final NanoentityRepository nanoentityRepository, final CouplingInstanceRepository couplingInstanceRepository,\n\t\t\tfinal UserSystemCompleter systemCompleter, final CouplingCriterionRepository couplingCriterionRepository,\n\t\t\tfinal CouplingCriterionCharacteristicRepository couplingCriteriaCharacteristicRepository)", "modifiers": "@Autowired public", "return": "", "signature": " ImportEndpoint(final UserSystemRepository userSystemRepository, final NanoentityRepository nanoentityRepository, final CouplingInstanceRepository couplingInstanceRepository,\n\t\t\tfinal UserSystemCompleter systemCompleter, final CouplingCriterionRepository couplingCriterionRepository,\n\t\t\tfinal CouplingCriterionCharacteristicRepository couplingCriteriaCharacteristicRepository)", "full_signature": "@Autowired public  ImportEndpoint(final UserSystemRepository userSystemRepository, final NanoentityRepository nanoentityRepository, final CouplingInstanceRepository couplingInstanceRepository,\n\t\t\tfinal UserSystemCompleter systemCompleter, final CouplingCriterionRepository couplingCriterionRepository,\n\t\t\tfinal CouplingCriterionCharacteristicRepository couplingCriteriaCharacteristicRepository)", "class_method_signature": "ImportEndpoint.ImportEndpoint(final UserSystemRepository userSystemRepository, final NanoentityRepository nanoentityRepository, final CouplingInstanceRepository couplingInstanceRepository,\n\t\t\tfinal UserSystemCompleter systemCompleter, final CouplingCriterionRepository couplingCriterionRepository,\n\t\t\tfinal CouplingCriterionCharacteristicRepository couplingCriteriaCharacteristicRepository)", "testcase": false, "constructor": true}, {"identifier": "importERD", "parameters": "(final EntityRelationDiagram erd)", "modifiers": "@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Transactional public", "return": "ImportResult", "signature": "ImportResult importERD(final EntityRelationDiagram erd)", "full_signature": "@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Transactional public ImportResult importERD(final EntityRelationDiagram erd)", "class_method_signature": "ImportEndpoint.importERD(final EntityRelationDiagram erd)", "testcase": false, "constructor": false}, {"identifier": "expandEntitiesByCompositionAndInheritance", "parameters": "(final EntityRelationDiagram erd, List<TemporaryNanoentity> nanoentities)", "modifiers": "private", "return": "List<TemporaryNanoentity>", "signature": "List<TemporaryNanoentity> expandEntitiesByCompositionAndInheritance(final EntityRelationDiagram erd, List<TemporaryNanoentity> nanoentities)", "full_signature": "private List<TemporaryNanoentity> expandEntitiesByCompositionAndInheritance(final EntityRelationDiagram erd, List<TemporaryNanoentity> nanoentities)", "class_method_signature": "ImportEndpoint.expandEntitiesByCompositionAndInheritance(final EntityRelationDiagram erd, List<TemporaryNanoentity> nanoentities)", "testcase": false, "constructor": false}, {"identifier": "getRelationsToEdgeEntities", "parameters": "(final List<EntityRelation> currentRelations, final List<Entity> inputEntites)", "modifiers": "private", "return": "List<EntityRelation>", "signature": "List<EntityRelation> getRelationsToEdgeEntities(final List<EntityRelation> currentRelations, final List<Entity> inputEntites)", "full_signature": "private List<EntityRelation> getRelationsToEdgeEntities(final List<EntityRelation> currentRelations, final List<Entity> inputEntites)", "class_method_signature": "ImportEndpoint.getRelationsToEdgeEntities(final List<EntityRelation> currentRelations, final List<Entity> inputEntites)", "testcase": false, "constructor": false}, {"identifier": "importUserRepresentations", "parameters": "(@PathParam(\"systemId\") final Long systemId, final UserRepresentationContainer userRepresentations)", "modifiers": "@POST @Path(\"/{systemId}/userrepresentations/\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Transactional public", "return": "ImportResult", "signature": "ImportResult importUserRepresentations(@PathParam(\"systemId\") final Long systemId, final UserRepresentationContainer userRepresentations)", "full_signature": "@POST @Path(\"/{systemId}/userrepresentations/\") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Transactional public ImportResult importUserRepresentations(@PathParam(\"systemId\") final Long systemId, final UserRepresentationContainer userRepresentations)", "class_method_signature": "ImportEndpoint.importUserRepresentations(@PathParam(\"systemId\") final Long systemId, final UserRepresentationContainer userRepresentations)", "testcase": false, "constructor": false}, {"identifier": "notEntity", "parameters": "(CouplingInstance i)", "modifiers": "private", "return": "boolean", "signature": "boolean notEntity(CouplingInstance i)", "full_signature": "private boolean notEntity(CouplingInstance i)", "class_method_signature": "ImportEndpoint.notEntity(CouplingInstance i)", "testcase": false, "constructor": false}, {"identifier": "notAggregation", "parameters": "(CouplingInstance i)", "modifiers": "private", "return": "boolean", "signature": "boolean notAggregation(CouplingInstance i)", "full_signature": "private boolean notAggregation(CouplingInstance i)", "class_method_signature": "ImportEndpoint.notAggregation(CouplingInstance i)", "testcase": false, "constructor": false}, {"identifier": "persistUseCases", "parameters": "(final UserSystem system, final List<UseCase> useCases, final List<String> warnings)", "modifiers": "private", "return": "void", "signature": "void persistUseCases(final UserSystem system, final List<UseCase> useCases, final List<String> warnings)", "full_signature": "private void persistUseCases(final UserSystem system, final List<UseCase> useCases, final List<String> warnings)", "class_method_signature": "ImportEndpoint.persistUseCases(final UserSystem system, final List<UseCase> useCases, final List<String> warnings)", "testcase": false, "constructor": false}, {"identifier": "importNanoentities", "parameters": "(@PathParam(\"systemId\") final Long systemId, final NanoentitiesImport nanoentities)", "modifiers": "@POST @Path(\"/{systemId}/nanoentities/\") @Consumes(MediaType.APPLICATION_JSON) @Transactional public", "return": "UserSystem", "signature": "UserSystem importNanoentities(@PathParam(\"systemId\") final Long systemId, final NanoentitiesImport nanoentities)", "full_signature": "@POST @Path(\"/{systemId}/nanoentities/\") @Consumes(MediaType.APPLICATION_JSON) @Transactional public UserSystem importNanoentities(@PathParam(\"systemId\") final Long systemId, final NanoentitiesImport nanoentities)", "class_method_signature": "ImportEndpoint.importNanoentities(@PathParam(\"systemId\") final Long systemId, final NanoentitiesImport nanoentities)", "testcase": false, "constructor": false}, {"identifier": "createNanoentity", "parameters": "(final UserSystem system, final String context, final String name)", "modifiers": "private", "return": "Nanoentity", "signature": "Nanoentity createNanoentity(final UserSystem system, final String context, final String name)", "full_signature": "private Nanoentity createNanoentity(final UserSystem system, final String context, final String name)", "class_method_signature": "ImportEndpoint.createNanoentity(final UserSystem system, final String context, final String name)", "testcase": false, "constructor": false}, {"identifier": "persistCharacteristics", "parameters": "(final UserSystem system, final List<Characteristic> characteristics, final String criterionName, final List<String> warnings)", "modifiers": "private", "return": "void", "signature": "void persistCharacteristics(final UserSystem system, final List<Characteristic> characteristics, final String criterionName, final List<String> warnings)", "full_signature": "private void persistCharacteristics(final UserSystem system, final List<Characteristic> characteristics, final String criterionName, final List<String> warnings)", "class_method_signature": "ImportEndpoint.persistCharacteristics(final UserSystem system, final List<Characteristic> characteristics, final String criterionName, final List<String> warnings)", "testcase": false, "constructor": false}, {"identifier": "persistRelatedGroups", "parameters": "(final UserSystem system, final List<RelatedGroup> listOfGroups, final String couplingCriterionName, final List<String> warnings)", "modifiers": "private", "return": "void", "signature": "void persistRelatedGroups(final UserSystem system, final List<RelatedGroup> listOfGroups, final String couplingCriterionName, final List<String> warnings)", "full_signature": "private void persistRelatedGroups(final UserSystem system, final List<RelatedGroup> listOfGroups, final String couplingCriterionName, final List<String> warnings)", "class_method_signature": "ImportEndpoint.persistRelatedGroups(final UserSystem system, final List<RelatedGroup> listOfGroups, final String couplingCriterionName, final List<String> warnings)", "testcase": false, "constructor": false}, {"identifier": "loadNanoentities", "parameters": "(final List<String> names, final UserSystem system, final List<String> warnings)", "modifiers": "private", "return": "List<Nanoentity>", "signature": "List<Nanoentity> loadNanoentities(final List<String> names, final UserSystem system, final List<String> warnings)", "full_signature": "private List<Nanoentity> loadNanoentities(final List<String> names, final UserSystem system, final List<String> warnings)", "class_method_signature": "ImportEndpoint.loadNanoentities(final List<String> names, final UserSystem system, final List<String> warnings)", "testcase": false, "constructor": false}, {"identifier": "findCharacteristic", "parameters": "(final String coupling, final String characteristic)", "modifiers": "private", "return": "CouplingCriterionCharacteristic", "signature": "CouplingCriterionCharacteristic findCharacteristic(final String coupling, final String characteristic)", "full_signature": "private CouplingCriterionCharacteristic findCharacteristic(final String coupling, final String characteristic)", "class_method_signature": "ImportEndpoint.findCharacteristic(final String coupling, final String characteristic)", "testcase": false, "constructor": false}], "file": "Engine/src/main/java/ch/hsr/servicecutter/importer/ImportEndpoint.java"}, "focal_method": {"identifier": "importERD", "parameters": "(final EntityRelationDiagram erd)", "modifiers": "@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Transactional public", "return": "ImportResult", "body": "@POST\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\t@Transactional\n\tpublic ImportResult importERD(final EntityRelationDiagram erd) {\n\t\tImportResult result = new ImportResult();\n\t\tif (erd == null) {\n\t\t\tthrow new InvalidRestParam();\n\t\t}\n\t\tList<String> warnings = new ArrayList<>();\n\t\tresult.setWarnings(warnings);\n\n\t\tUserSystem system = new UserSystem();\n\t\tuserSystemRepository.save(system);\n\t\tString name = erd.getName();\n\t\tif (!StringUtils.hasLength(name)) {\n\t\t\tname = \"imported \" + new Date().toString();\n\t\t}\n\t\tsystem.setName(name);\n\n\t\tList<TemporaryNanoentity> nanoentities = erd.getEntities().stream().flatMap(e -> e.getNanoentities().stream().map(n -> new TemporaryNanoentity(e.getName(), n))).collect(toList());\n\n\t\t// entities\n\t\tCouplingCriterion criterion = couplingCriterionRepository.readByName(CouplingCriterion.IDENTITY_LIFECYCLE);\n\t\tMap<String, List<TemporaryNanoentity>> nanoentitiesByEntity = expandEntitiesByCompositionAndInheritance(erd, nanoentities).stream()\n\t\t\t\t.collect(Collectors.groupingBy(TemporaryNanoentity::getNewEntity));\n\t\tfor (Entry<String, List<TemporaryNanoentity>> entityAndNanoentities : nanoentitiesByEntity.entrySet()) {\n\t\t\tCouplingInstance entityCoupling = new CouplingInstance(criterion, InstanceType.SAME_ENTITY);\n\t\t\tsystem.addCouplingInstance(entityCoupling);\n\t\t\tcouplingInstanceRepository.save(entityCoupling);\n\t\t\tentityCoupling.setName(entityAndNanoentities.getKey());\n\t\t\tentityCoupling.setSystem(system);\n\t\t\tlog.info(\"Store entity {} with attributes {}\", entityAndNanoentities.getKey(), entityAndNanoentities.getValue());\n\t\t\tfor (TemporaryNanoentity newNanoentity : entityAndNanoentities.getValue()) {\n\t\t\t\tentityCoupling.addNanoentity(createNanoentity(system, newNanoentity.getOriginalEntity(), newNanoentity.getOriginalName()));\n\t\t\t}\n\t\t}\n\n\t\t// Aggregations\n\t\tCouplingCriterion semanticProximity = couplingCriterionRepository.readByName(CouplingCriterion.SEMANTIC_PROXIMITY);\n\t\tfor (EntityRelation relation : erd.getRelations()) {\n\t\t\tif (RelationType.AGGREGATION.equals(relation.getType())) {\n\t\t\t\tCouplingInstance instance = new CouplingInstance(semanticProximity, InstanceType.AGGREGATION);\n\t\t\t\tcouplingInstanceRepository.save(instance);\n\t\t\t\tList<Nanoentity> originNanoentities = relation.getOrigin().getNanoentities().stream()\n\t\t\t\t\t\t.map(attr -> nanoentityRepository.findByContextAndNameAndUserSystem(relation.getOrigin().getName(), attr, system)).collect(Collectors.toList());\n\t\t\t\tList<Nanoentity> destinationNanoentities = relation.getDestination().getNanoentities().stream()\n\t\t\t\t\t\t.map(attr -> nanoentityRepository.findByContextAndNameAndUserSystem(relation.getDestination().getName(), attr, system)).collect(Collectors.toList());\n\t\t\t\tinstance.setNanoentities(originNanoentities);\n\t\t\t\tinstance.setSecondNanoentities(destinationNanoentities);\n\t\t\t\tinstance.setSystem(system);\n\t\t\t\tinstance.setName(relation.getOrigin().getName() + \".\" + relation.getDestination().getName());\n\n\t\t\t\tlog.info(\"Import aggregation on {} and {}\", instance.getNanoentities(), instance.getSecondNanoentities());\n\t\t\t}\n\t\t}\n\t\tresult.setMessage(\"userSystem \" + system.getId() + \" has been created\");\n\t\tresult.setId(system.getId());\n\t\treturn result;\n\t}", "signature": "ImportResult importERD(final EntityRelationDiagram erd)", "full_signature": "@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Transactional public ImportResult importERD(final EntityRelationDiagram erd)", "class_method_signature": "ImportEndpoint.importERD(final EntityRelationDiagram erd)", "testcase": false, "constructor": false, "invocations": ["setWarnings", "save", "getName", "hasLength", "toString", "setName", "collect", "flatMap", "stream", "getEntities", "map", "stream", "getNanoentities", "getName", "toList", "readByName", "collect", "stream", "expandEntitiesByCompositionAndInheritance", "groupingBy", "entrySet", "addCouplingInstance", "save", "setName", "getKey", "setSystem", "info", "getKey", "getValue", "getValue", "addNanoentity", "createNanoentity", "getOriginalEntity", "getOriginalName", "readByName", "getRelations", "equals", "getType", "save", "collect", "map", "stream", "getNanoentities", "getOrigin", "findByContextAndNameAndUserSystem", "getName", "getOrigin", "toList", "collect", "map", "stream", "getNanoentities", "getDestination", "findByContextAndNameAndUserSystem", "getName", "getDestination", "toList", "setNanoentities", "setSecondNanoentities", "setSystem", "setName", "getName", "getOrigin", "getName", "getDestination", "info", "getNanoentities", "getSecondNanoentities", "setMessage", "getId", "setId", "getId"]}, "repository": {"repo_id": 42585709, "url": "https://github.com/ServiceCutter/ServiceCutter", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 29, "size": 8580, "license": "licensed"}}