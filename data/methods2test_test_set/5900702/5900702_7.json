{"test_class": {"identifier": "BundleClassesFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate Bundle bundle;", "modifier": "@Mock\n\tprivate", "type": "Bundle", "declarator": "bundle", "var_name": "bundle"}, {"original_string": "private BundleClassesFinder classFinder;", "modifier": "private", "type": "BundleClassesFinder", "declarator": "classFinder", "var_name": "classFinder"}], "file": "slice-core/src/test/java/com/cognifide/slice/core/internal/scanner/BundleClassesFinderTest.java"}, "test_case": {"identifier": "testReadOsgiServicesForClassInnerClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReadOsgiServicesForClassInnerClass() {\n\t\tCollection<Class<?>> classes = classFinder\n\t\t\t\t.readOsgiServicesForClass(InnerClassTestService.InnerClass.class);\n\t\tAssert.assertEquals(1, classes.size());\n\t\tAssert.assertTrue(classes.contains(Integer.class));\n\t}", "signature": "void testReadOsgiServicesForClassInnerClass()", "full_signature": "@Test public void testReadOsgiServicesForClassInnerClass()", "class_method_signature": "BundleClassesFinderTest.testReadOsgiServicesForClassInnerClass()", "testcase": true, "constructor": false, "invocations": ["readOsgiServicesForClass", "assertEquals", "size", "assertTrue", "contains"]}, "focal_class": {"identifier": "BundleClassesFinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BundleClassesFinder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BundleClassesFinder.class)", "var_name": "LOG"}, {"original_string": "private static final String RESOURCE_PATTERN = \"*.class\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_PATTERN = \"*.class\"", "var_name": "RESOURCE_PATTERN"}, {"original_string": "private final String basePackage;", "modifier": "private final", "type": "String", "declarator": "basePackage", "var_name": "basePackage"}, {"original_string": "private List<ClassFilter> filters = new ArrayList<ClassFilter>();", "modifier": "private", "type": "List<ClassFilter>", "declarator": "filters = new ArrayList<ClassFilter>()", "var_name": "filters"}], "methods": [{"identifier": "BundleClassesFinder", "parameters": "(String basePackage)", "modifiers": "public", "return": "", "signature": " BundleClassesFinder(String basePackage)", "full_signature": "public  BundleClassesFinder(String basePackage)", "class_method_signature": "BundleClassesFinder.BundleClassesFinder(String basePackage)", "testcase": false, "constructor": true}, {"identifier": "getClasses", "parameters": "(final Bundle bundle)", "modifiers": "public", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> getClasses(final Bundle bundle)", "full_signature": "public Collection<Class<?>> getClasses(final Bundle bundle)", "class_method_signature": "BundleClassesFinder.getClasses(final Bundle bundle)", "testcase": false, "constructor": false}, {"identifier": "getClasses", "parameters": "(final Collection<Bundle> bundles)", "modifiers": "public", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> getClasses(final Collection<Bundle> bundles)", "full_signature": "public Collection<Class<?>> getClasses(final Collection<Bundle> bundles)", "class_method_signature": "BundleClassesFinder.getClasses(final Collection<Bundle> bundles)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(ClassReader classReader)", "modifiers": "private", "return": "boolean", "signature": "boolean accepts(ClassReader classReader)", "full_signature": "private boolean accepts(ClassReader classReader)", "class_method_signature": "BundleClassesFinder.accepts(ClassReader classReader)", "testcase": false, "constructor": false}, {"identifier": "addFilter", "parameters": "(ClassFilter classFilter)", "modifiers": "public", "return": "void", "signature": "void addFilter(ClassFilter classFilter)", "full_signature": "public void addFilter(ClassFilter classFilter)", "class_method_signature": "BundleClassesFinder.addFilter(ClassFilter classFilter)", "testcase": false, "constructor": false}, {"identifier": "traverseBundlesForOsgiServices", "parameters": "(final Collection<Bundle> bundles)", "modifiers": "public", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> traverseBundlesForOsgiServices(final Collection<Bundle> bundles)", "full_signature": "public Collection<Class<?>> traverseBundlesForOsgiServices(final Collection<Bundle> bundles)", "class_method_signature": "BundleClassesFinder.traverseBundlesForOsgiServices(final Collection<Bundle> bundles)", "testcase": false, "constructor": false}, {"identifier": "readOsgiServicesForClass", "parameters": "(Class<?> clazz)", "modifiers": "", "return": "Set<Class<?>>", "signature": "Set<Class<?>> readOsgiServicesForClass(Class<?> clazz)", "full_signature": " Set<Class<?>> readOsgiServicesForClass(Class<?> clazz)", "class_method_signature": "BundleClassesFinder.readOsgiServicesForClass(Class<?> clazz)", "testcase": false, "constructor": false}], "file": "slice-core/src/main/java/com/cognifide/slice/core/internal/scanner/BundleClassesFinder.java"}, "focal_method": {"identifier": "readOsgiServicesForClass", "parameters": "(Class<?> clazz)", "modifiers": "", "return": "Set<Class<?>>", "body": "Set<Class<?>> readOsgiServicesForClass(Class<?> clazz) {\n\t\tSet<Class<?>> osgiClasses = new HashSet<Class<?>>();\n\t\tField[] fields = clazz.getDeclaredFields();\n\t\tfor (Field field : fields) {\n\t\t\tif (field.isAnnotationPresent(OsgiService.class)) {\n\t\t\t\tClass<?> fieldClass = field.getType();\n\t\t\t\tosgiClasses.add(fieldClass);\n\t\t\t}\n\t\t}\n\n\t\tConstructor<?>[] constructors = clazz.getConstructors();\n\t\tfor (Constructor<?> constructor : constructors) {\n\t\t\tClass<?>[] parameterTypes = constructor.getParameterTypes();\n\t\t\tAnnotation[][] annotations = constructor.getParameterAnnotations();\n\t\t\tint j = 0;\n\t\t\t/**\n\t\t\t * parameterTypes of constructor of inner classes contain types of parent classes in front of\n\t\t\t * the array.\n\t\t\t */\n\t\t\tfor (int i = (parameterTypes.length - annotations.length); i < parameterTypes.length; i++) {\n\t\t\t\tfor (Annotation annotation : annotations[j]) {\n\t\t\t\t\tif (annotation.annotationType().equals(OsgiService.class)) {\n\t\t\t\t\t\tosgiClasses.add(parameterTypes[i]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn osgiClasses;\n\t}", "signature": "Set<Class<?>> readOsgiServicesForClass(Class<?> clazz)", "full_signature": " Set<Class<?>> readOsgiServicesForClass(Class<?> clazz)", "class_method_signature": "BundleClassesFinder.readOsgiServicesForClass(Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["getDeclaredFields", "isAnnotationPresent", "getType", "add", "getConstructors", "getParameterTypes", "getParameterAnnotations", "equals", "annotationType", "add"]}, "repository": {"repo_id": 5900702, "url": "https://github.com/Cognifide/Slice", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 61, "size": 11367, "license": "licensed"}}