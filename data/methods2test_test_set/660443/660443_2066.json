{"test_class": {"identifier": "PMPReaderTest", "superclass": "extends SimpleChemObjectReaderTest", "interfaces": "", "fields": [], "file": "storage/io/src/test/java/org/openscience/cdk/io/PMPReaderTest.java"}, "test_case": {"identifier": "testAccepts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccepts() {\n        PMPReader reader = new PMPReader();\n        Assert.assertTrue(reader.accepts(ChemFile.class));\n    }", "signature": "void testAccepts()", "full_signature": "@Test public void testAccepts()", "class_method_signature": "PMPReaderTest.testAccepts()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "accepts"]}, "focal_class": {"identifier": "PMPReader", "superclass": "extends DefaultChemObjectReader", "interfaces": "", "fields": [{"original_string": "private static final String   PMP_ZORDER   = \"ZOrder\";", "modifier": "private static final", "type": "String", "declarator": "PMP_ZORDER   = \"ZOrder\"", "var_name": "PMP_ZORDER"}, {"original_string": "private static final String   PMP_ID       = \"Id\";", "modifier": "private static final", "type": "String", "declarator": "PMP_ID       = \"Id\"", "var_name": "PMP_ID"}, {"original_string": "private BufferedReader        input;", "modifier": "private", "type": "BufferedReader", "declarator": "input", "var_name": "input"}, {"original_string": "private static ILoggingTool   logger       = LoggingToolFactory.createLoggingTool(PMPReader.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger       = LoggingToolFactory.createLoggingTool(PMPReader.class)", "var_name": "logger"}, {"original_string": "private IAtomContainer        modelStructure;", "modifier": "private", "type": "IAtomContainer", "declarator": "modelStructure", "var_name": "modelStructure"}, {"original_string": "private IChemObject           chemObject;", "modifier": "private", "type": "IChemObject", "declarator": "chemObject", "var_name": "chemObject"}, {"original_string": "private Map<Integer, Integer> atomids      = new Hashtable<>();", "modifier": "private", "type": "Map<Integer, Integer>", "declarator": "atomids      = new Hashtable<>()", "var_name": "atomids"}, {"original_string": "private Map<Integer, Integer> atomGivenIds = new Hashtable<>();", "modifier": "private", "type": "Map<Integer, Integer>", "declarator": "atomGivenIds = new Hashtable<>()", "var_name": "atomGivenIds"}, {"original_string": "private Map<Integer, Integer> bondids      = new Hashtable<>();", "modifier": "private", "type": "Map<Integer, Integer>", "declarator": "bondids      = new Hashtable<>()", "var_name": "bondids"}, {"original_string": "private Map<Integer, Integer> bondAtomOnes = new Hashtable<>();", "modifier": "private", "type": "Map<Integer, Integer>", "declarator": "bondAtomOnes = new Hashtable<>()", "var_name": "bondAtomOnes"}, {"original_string": "private Map<Integer, Integer> bondAtomTwos = new Hashtable<>();", "modifier": "private", "type": "Map<Integer, Integer>", "declarator": "bondAtomTwos = new Hashtable<>()", "var_name": "bondAtomTwos"}, {"original_string": "private Map<Integer, Double>  bondOrders   = new Hashtable<>();", "modifier": "private", "type": "Map<Integer, Double>", "declarator": "bondOrders   = new Hashtable<>()", "var_name": "bondOrders"}, {"original_string": "Pattern                       objHeader;", "modifier": "", "type": "Pattern", "declarator": "objHeader", "var_name": "objHeader"}, {"original_string": "Pattern                       objCommand;", "modifier": "", "type": "Pattern", "declarator": "objCommand", "var_name": "objCommand"}, {"original_string": "Pattern                       atomTypePattern;", "modifier": "", "type": "Pattern", "declarator": "atomTypePattern", "var_name": "atomTypePattern"}, {"original_string": "int                           lineNumber;", "modifier": "", "type": "int", "declarator": "lineNumber", "var_name": "lineNumber"}, {"original_string": "int                           bondCounter  = 0;", "modifier": "", "type": "int", "declarator": "bondCounter  = 0", "var_name": "bondCounter"}, {"original_string": "private RebondTool            rebonder;", "modifier": "private", "type": "RebondTool", "declarator": "rebonder", "var_name": "rebonder"}], "methods": [{"identifier": "PMPReader", "parameters": "(Reader input)", "modifiers": "public", "return": "", "signature": " PMPReader(Reader input)", "full_signature": "public  PMPReader(Reader input)", "class_method_signature": "PMPReader.PMPReader(Reader input)", "testcase": false, "constructor": true}, {"identifier": "PMPReader", "parameters": "(InputStream input)", "modifiers": "public", "return": "", "signature": " PMPReader(InputStream input)", "full_signature": "public  PMPReader(InputStream input)", "class_method_signature": "PMPReader.PMPReader(InputStream input)", "testcase": false, "constructor": true}, {"identifier": "PMPReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " PMPReader()", "full_signature": "public  PMPReader()", "class_method_signature": "PMPReader.PMPReader()", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "PMPReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(Reader input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(Reader input)", "full_signature": "@Override public void setReader(Reader input)", "class_method_signature": "PMPReader.setReader(Reader input)", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(InputStream input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(InputStream input)", "full_signature": "@Override public void setReader(InputStream input)", "class_method_signature": "PMPReader.setReader(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "PMPReader.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(T object)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T read(T object)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T read(T object)", "class_method_signature": "PMPReader.read(T object)", "testcase": false, "constructor": false}, {"identifier": "readLine", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String readLine()", "full_signature": "private String readLine()", "class_method_signature": "PMPReader.readLine()", "testcase": false, "constructor": false}, {"identifier": "readChemFile", "parameters": "(IChemFile chemFile)", "modifiers": "private", "return": "IChemFile", "signature": "IChemFile readChemFile(IChemFile chemFile)", "full_signature": "private IChemFile readChemFile(IChemFile chemFile)", "class_method_signature": "PMPReader.readChemFile(IChemFile chemFile)", "testcase": false, "constructor": false}, {"identifier": "processModelCommand", "parameters": "(String object, String command, String format, String field)", "modifiers": "private", "return": "void", "signature": "void processModelCommand(String object, String command, String format, String field)", "full_signature": "private void processModelCommand(String object, String command, String format, String field)", "class_method_signature": "PMPReader.processModelCommand(String object, String command, String format, String field)", "testcase": false, "constructor": false}, {"identifier": "constructObject", "parameters": "(IChemObjectBuilder builder, String object)", "modifiers": "private", "return": "void", "signature": "void constructObject(IChemObjectBuilder builder, String object)", "full_signature": "private void constructObject(IChemObjectBuilder builder, String object)", "class_method_signature": "PMPReader.constructObject(IChemObjectBuilder builder, String object)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PMPReader.close()", "testcase": false, "constructor": false}], "file": "storage/io/src/main/java/org/openscience/cdk/io/PMPReader.java"}, "focal_method": {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "boolean", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public boolean accepts(Class<? extends IChemObject> classObject) {\n        if (IChemFile.class.equals(classObject)) return true;\n        Class<?>[] interfaces = classObject.getInterfaces();\n        for (Class<?> anInterface : interfaces) {\n            if (IChemFile.class.equals(anInterface)) return true;\n        }\n        Class superClass = classObject.getSuperclass();\n        if (superClass != null) return this.accepts(superClass);\n        return false;\n    }", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "PMPReader.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false, "invocations": ["equals", "getInterfaces", "equals", "getSuperclass", "accepts"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}