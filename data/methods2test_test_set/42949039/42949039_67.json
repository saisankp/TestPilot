{"test_class": {"identifier": "SpelExpressionHelperTest", "superclass": "extends AbstractCoreTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SpelExpressionHelper spelExpressionHelper;", "modifier": "@Autowired\n    private", "type": "SpelExpressionHelper", "declarator": "spelExpressionHelper", "var_name": "spelExpressionHelper"}], "file": "herd-code/herd-core/src/test/java/org/finra/herd/core/helper/SpelExpressionHelperTest.java"}, "test_case": {"identifier": "evaluateAssertIllegalArgumentOnInvalidExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void evaluateAssertIllegalArgumentOnInvalidExpression()\n    {\n        String expressionString = \"this is an invalid expression\";\n        try\n        {\n            spelExpressionHelper.evaluate(expressionString, null);\n            fail();\n        }\n        catch (Exception e)\n        {\n            assertEquals(IllegalArgumentException.class, e.getClass());\n            assertEquals(\"Error parsing SpEL \\\"this is an invalid expression\\\"\", e.getMessage());\n        }\n    }", "signature": "void evaluateAssertIllegalArgumentOnInvalidExpression()", "full_signature": "@Test public void evaluateAssertIllegalArgumentOnInvalidExpression()", "class_method_signature": "SpelExpressionHelperTest.evaluateAssertIllegalArgumentOnInvalidExpression()", "testcase": true, "constructor": false, "invocations": ["evaluate", "fail", "assertEquals", "getClass", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "SpelExpressionHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SpelExpressionParser spelExpressionParser;", "modifier": "@Autowired\n    private", "type": "SpelExpressionParser", "declarator": "spelExpressionParser", "var_name": "spelExpressionParser"}], "methods": [{"identifier": "evaluate", "parameters": "(String expressionString, Class<T> desiredResultType, Map<String, Object> variables)", "modifiers": "public", "return": "T", "signature": "T evaluate(String expressionString, Class<T> desiredResultType, Map<String, Object> variables)", "full_signature": "public T evaluate(String expressionString, Class<T> desiredResultType, Map<String, Object> variables)", "class_method_signature": "SpelExpressionHelper.evaluate(String expressionString, Class<T> desiredResultType, Map<String, Object> variables)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(String expressionString, Map<String, Object> variables)", "modifiers": "public", "return": "T", "signature": "T evaluate(String expressionString, Map<String, Object> variables)", "full_signature": "public T evaluate(String expressionString, Map<String, Object> variables)", "class_method_signature": "SpelExpressionHelper.evaluate(String expressionString, Map<String, Object> variables)", "testcase": false, "constructor": false}, {"identifier": "parseExpression", "parameters": "(String expressionString)", "modifiers": "public", "return": "Expression", "signature": "Expression parseExpression(String expressionString)", "full_signature": "public Expression parseExpression(String expressionString)", "class_method_signature": "SpelExpressionHelper.parseExpression(String expressionString)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Expression expression, Class<T> desiredResultType, Map<String, Object> variables)", "modifiers": "public", "return": "T", "signature": "T evaluate(Expression expression, Class<T> desiredResultType, Map<String, Object> variables)", "full_signature": "public T evaluate(Expression expression, Class<T> desiredResultType, Map<String, Object> variables)", "class_method_signature": "SpelExpressionHelper.evaluate(Expression expression, Class<T> desiredResultType, Map<String, Object> variables)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Expression expression, Map<String, Object> variables)", "modifiers": "public", "return": "T", "signature": "T evaluate(Expression expression, Map<String, Object> variables)", "full_signature": "public T evaluate(Expression expression, Map<String, Object> variables)", "class_method_signature": "SpelExpressionHelper.evaluate(Expression expression, Map<String, Object> variables)", "testcase": false, "constructor": false}], "file": "herd-code/herd-core/src/main/java/org/finra/herd/core/helper/SpelExpressionHelper.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(String expressionString, Class<T> desiredResultType, Map<String, Object> variables)", "modifiers": "public", "return": "T", "body": "public <T> T evaluate(String expressionString, Class<T> desiredResultType, Map<String, Object> variables)\n    {\n        return evaluate(parseExpression(expressionString), desiredResultType, variables);\n    }", "signature": "T evaluate(String expressionString, Class<T> desiredResultType, Map<String, Object> variables)", "full_signature": "public T evaluate(String expressionString, Class<T> desiredResultType, Map<String, Object> variables)", "class_method_signature": "SpelExpressionHelper.evaluate(String expressionString, Class<T> desiredResultType, Map<String, Object> variables)", "testcase": false, "constructor": false, "invocations": ["evaluate", "parseExpression"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}