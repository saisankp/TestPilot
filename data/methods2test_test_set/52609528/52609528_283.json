{"test_class": {"identifier": "HookHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HOOK_ROOT_URI = \"hookRootURI/\";", "modifier": "private static final", "type": "String", "declarator": "HOOK_ROOT_URI = \"hookRootURI/\"", "var_name": "HOOK_ROOT_URI"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger( HookHandlerTest.class );", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( HookHandlerTest.class )", "var_name": "logger"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private MockResourceStorage storage;", "modifier": "private", "type": "MockResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private LoggingResourceManager loggingResourceManager;", "modifier": "private", "type": "LoggingResourceManager", "declarator": "loggingResourceManager", "var_name": "loggingResourceManager"}, {"original_string": "private MonitoringHandler monitoringHandler;", "modifier": "private", "type": "MonitoringHandler", "declarator": "monitoringHandler", "var_name": "monitoringHandler"}, {"original_string": "private RequestQueue requestQueue;", "modifier": "private", "type": "RequestQueue", "declarator": "requestQueue", "var_name": "requestQueue"}, {"original_string": "private ReducedPropagationManager reducedPropagationManager;", "modifier": "private", "type": "ReducedPropagationManager", "declarator": "reducedPropagationManager", "var_name": "reducedPropagationManager"}, {"original_string": "private HookHandler hookHandler;", "modifier": "private", "type": "HookHandler", "declarator": "hookHandler", "var_name": "hookHandler"}], "file": "gateleen-hook/src/test/java/org/swisspush/gateleen/hook/HookHandlerTest.java"}, "test_case": {"identifier": "hookRegistration_usesDefaultExpiryIfExpireAfterHeaderIsNegativeNumber", "parameters": "(TestContext testContext)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hookRegistration_usesDefaultExpiryIfExpireAfterHeaderIsNegativeNumber(TestContext testContext) {\n        // Initialize mock\n        final int[] statusCodePtr = new int[]{ 0 };\n        final String[] statusMessagePtr = new String[]{ null };\n        final HttpServerRequest request;\n        {  // Mock request\n            final MultiMap requestHeaders = new CaseInsensitiveHeaders();\n            // Do NOT set to -1. Because that would be a valid value representing 'infinite'.\n            requestHeaders.set(ExpiryCheckHandler.EXPIRE_AFTER_HEADER, \"-42\");\n            final Buffer requestBody = createMinimalHookBodyAsBuffer();\n            request = createSimpleRequest(HttpMethod.PUT, \"/gateleen/example/_hooks/listeners/http/my-service/my-hook\",\n                    requestHeaders, requestBody, statusCodePtr, statusMessagePtr\n            );\n        }\n\n        // Trigger work\n        hookHandler.handle(request);\n\n        // Assert request was ok\n        testContext.assertEquals(200, statusCodePtr[0]);\n\n        { // Assert expiration time has same length as a valid date (including time zone)\n            final String storedHook = storage.getMockData().get(HOOK_ROOT_URI + \"registrations/listeners/http+my-service+my-hook+gateleen+example\");\n            testContext.assertNotNull(storedHook);\n            final String expirationTime = new JsonObject(storedHook).getString(\"expirationTime\");\n            testContext.assertNotNull(expirationTime);\n            testContext.assertEquals(\"____-__-__T__:__:__.___+__:__\".length(), expirationTime.length());\n        }\n    }", "signature": "void hookRegistration_usesDefaultExpiryIfExpireAfterHeaderIsNegativeNumber(TestContext testContext)", "full_signature": "@Test public void hookRegistration_usesDefaultExpiryIfExpireAfterHeaderIsNegativeNumber(TestContext testContext)", "class_method_signature": "HookHandlerTest.hookRegistration_usesDefaultExpiryIfExpireAfterHeaderIsNegativeNumber(TestContext testContext)", "testcase": true, "constructor": false, "invocations": ["set", "createMinimalHookBodyAsBuffer", "createSimpleRequest", "handle", "assertEquals", "get", "getMockData", "assertNotNull", "getString", "assertNotNull", "assertEquals", "length", "length"]}, "focal_class": {"identifier": "HookHandler", "superclass": "", "interfaces": "implements LoggableResource", "fields": [{"original_string": "public static final String HOOKED_HEADER = \"x-hooked\";", "modifier": "public static final", "type": "String", "declarator": "HOOKED_HEADER = \"x-hooked\"", "var_name": "HOOKED_HEADER"}, {"original_string": "public static final String HOOK_ROUTES_LISTED = \"x-hook-routes-listed\";", "modifier": "public static final", "type": "String", "declarator": "HOOK_ROUTES_LISTED = \"x-hook-routes-listed\"", "var_name": "HOOK_ROUTES_LISTED"}, {"original_string": "public static final String HOOKS_LISTENERS_URI_PART = \"/_hooks/listeners/\";", "modifier": "public static final", "type": "String", "declarator": "HOOKS_LISTENERS_URI_PART = \"/_hooks/listeners/\"", "var_name": "HOOKS_LISTENERS_URI_PART"}, {"original_string": "public static final String LISTENER_QUEUE_PREFIX = \"listener-hook\";", "modifier": "public static final", "type": "String", "declarator": "LISTENER_QUEUE_PREFIX = \"listener-hook\"", "var_name": "LISTENER_QUEUE_PREFIX"}, {"original_string": "private static final String X_QUEUE = \"x-queue\";", "modifier": "private static final", "type": "String", "declarator": "X_QUEUE = \"x-queue\"", "var_name": "X_QUEUE"}, {"original_string": "private static final String X_EXPIRE_AFTER = \"X-Expire-After\";", "modifier": "private static final", "type": "String", "declarator": "X_EXPIRE_AFTER = \"X-Expire-After\"", "var_name": "X_EXPIRE_AFTER"}, {"original_string": "private static final String LISTENER_HOOK_TARGET_PATH = \"listeners/\";", "modifier": "private static final", "type": "String", "declarator": "LISTENER_HOOK_TARGET_PATH = \"listeners/\"", "var_name": "LISTENER_HOOK_TARGET_PATH"}, {"original_string": "public static final String HOOKS_ROUTE_URI_PART = \"/_hooks/route\";", "modifier": "public static final", "type": "String", "declarator": "HOOKS_ROUTE_URI_PART = \"/_hooks/route\"", "var_name": "HOOKS_ROUTE_URI_PART"}, {"original_string": "private static final String HOOK_STORAGE_PATH = \"registrations/\";", "modifier": "private static final", "type": "String", "declarator": "HOOK_STORAGE_PATH = \"registrations/\"", "var_name": "HOOK_STORAGE_PATH"}, {"original_string": "private static final String HOOK_LISTENER_STORAGE_PATH = HOOK_STORAGE_PATH + \"listeners/\";", "modifier": "private static final", "type": "String", "declarator": "HOOK_LISTENER_STORAGE_PATH = HOOK_STORAGE_PATH + \"listeners/\"", "var_name": "HOOK_LISTENER_STORAGE_PATH"}, {"original_string": "private static final String HOOK_ROUTE_STORAGE_PATH = HOOK_STORAGE_PATH + \"routes/\";", "modifier": "private static final", "type": "String", "declarator": "HOOK_ROUTE_STORAGE_PATH = HOOK_STORAGE_PATH + \"routes/\"", "var_name": "HOOK_ROUTE_STORAGE_PATH"}, {"original_string": "private static final String SAVE_LISTENER_ADDRESS = \"gateleen.hook-listener-insert\";", "modifier": "private static final", "type": "String", "declarator": "SAVE_LISTENER_ADDRESS = \"gateleen.hook-listener-insert\"", "var_name": "SAVE_LISTENER_ADDRESS"}, {"original_string": "private static final String REMOVE_LISTENER_ADDRESS = \"gateleen.hook-listener-remove\";", "modifier": "private static final", "type": "String", "declarator": "REMOVE_LISTENER_ADDRESS = \"gateleen.hook-listener-remove\"", "var_name": "REMOVE_LISTENER_ADDRESS"}, {"original_string": "private static final String SAVE_ROUTE_ADDRESS = \"gateleen.hook-route-insert\";", "modifier": "private static final", "type": "String", "declarator": "SAVE_ROUTE_ADDRESS = \"gateleen.hook-route-insert\"", "var_name": "SAVE_ROUTE_ADDRESS"}, {"original_string": "private static final String REMOVE_ROUTE_ADDRESS = \"gateleen.hook-route-remove\";", "modifier": "private static final", "type": "String", "declarator": "REMOVE_ROUTE_ADDRESS = \"gateleen.hook-route-remove\"", "var_name": "REMOVE_ROUTE_ADDRESS"}, {"original_string": "private static final int DEFAULT_HOOK_STORAGE_EXPIRE_AFTER_TIME = 1 * 60 * 60;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_HOOK_STORAGE_EXPIRE_AFTER_TIME = 1 * 60 * 60", "var_name": "DEFAULT_HOOK_STORAGE_EXPIRE_AFTER_TIME"}, {"original_string": "private static final int DEFAULT_CLEANUP_TIME = 15000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_CLEANUP_TIME = 15000", "var_name": "DEFAULT_CLEANUP_TIME"}, {"original_string": "public static final String REQUESTURL = \"requesturl\";", "modifier": "public static final", "type": "String", "declarator": "REQUESTURL = \"requesturl\"", "var_name": "REQUESTURL"}, {"original_string": "public static final String EXPIRATION_TIME = \"expirationTime\";", "modifier": "public static final", "type": "String", "declarator": "EXPIRATION_TIME = \"expirationTime\"", "var_name": "EXPIRATION_TIME"}, {"original_string": "public static final String HOOK = \"hook\";", "modifier": "public static final", "type": "String", "declarator": "HOOK = \"hook\"", "var_name": "HOOK"}, {"original_string": "public static final String TRANSLATE_STATUS = \"translateStatus\";", "modifier": "public static final", "type": "String", "declarator": "TRANSLATE_STATUS = \"translateStatus\"", "var_name": "TRANSLATE_STATUS"}, {"original_string": "public static final String METHODS  = \"methods\";", "modifier": "public static final", "type": "String", "declarator": "METHODS  = \"methods\"", "var_name": "METHODS"}, {"original_string": "public static final String DESTINATION  = \"destination\";", "modifier": "public static final", "type": "String", "declarator": "DESTINATION  = \"destination\"", "var_name": "DESTINATION"}, {"original_string": "public static final String FILTER  = \"filter\";", "modifier": "public static final", "type": "String", "declarator": "FILTER  = \"filter\"", "var_name": "FILTER"}, {"original_string": "public static final String QUEUE_EXPIRE_AFTER = \"queueExpireAfter\";", "modifier": "public static final", "type": "String", "declarator": "QUEUE_EXPIRE_AFTER = \"queueExpireAfter\"", "var_name": "QUEUE_EXPIRE_AFTER"}, {"original_string": "public static final String STATIC_HEADERS = \"staticHeaders\";", "modifier": "public static final", "type": "String", "declarator": "STATIC_HEADERS = \"staticHeaders\"", "var_name": "STATIC_HEADERS"}, {"original_string": "public static final String FULL_URL = \"fullUrl\";", "modifier": "public static final", "type": "String", "declarator": "FULL_URL = \"fullUrl\"", "var_name": "FULL_URL"}, {"original_string": "public static final String DISCARD_PAYLOAD = \"discardPayload\";", "modifier": "public static final", "type": "String", "declarator": "DISCARD_PAYLOAD = \"discardPayload\"", "var_name": "DISCARD_PAYLOAD"}, {"original_string": "public static final String HOOK_TRIGGER_TYPE = \"type\";", "modifier": "public static final", "type": "String", "declarator": "HOOK_TRIGGER_TYPE = \"type\"", "var_name": "HOOK_TRIGGER_TYPE"}, {"original_string": "public static final String LISTABLE = \"listable\";", "modifier": "public static final", "type": "String", "declarator": "LISTABLE = \"listable\"", "var_name": "LISTABLE"}, {"original_string": "public static final String COLLECTION = \"collection\";", "modifier": "public static final", "type": "String", "declarator": "COLLECTION = \"collection\"", "var_name": "COLLECTION"}, {"original_string": "private final Comparator<String> collectionContentComparator;", "modifier": "private final", "type": "Comparator<String>", "declarator": "collectionContentComparator", "var_name": "collectionContentComparator"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(HookHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(HookHandler.class)", "var_name": "log"}, {"original_string": "private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "OBJECT_MAPPER = new ObjectMapper()", "var_name": "OBJECT_MAPPER"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private final ResourceStorage userProfileStorage;", "modifier": "private final", "type": "ResourceStorage", "declarator": "userProfileStorage", "var_name": "userProfileStorage"}, {"original_string": "private final ResourceStorage hookStorage;", "modifier": "private final", "type": "ResourceStorage", "declarator": "hookStorage", "var_name": "hookStorage"}, {"original_string": "private MonitoringHandler monitoringHandler;", "modifier": "private", "type": "MonitoringHandler", "declarator": "monitoringHandler", "var_name": "monitoringHandler"}, {"original_string": "private LoggingResourceManager loggingResourceManager;", "modifier": "private", "type": "LoggingResourceManager", "declarator": "loggingResourceManager", "var_name": "loggingResourceManager"}, {"original_string": "private final HttpClient selfClient;", "modifier": "private final", "type": "HttpClient", "declarator": "selfClient", "var_name": "selfClient"}, {"original_string": "private String userProfilePath;", "modifier": "private", "type": "String", "declarator": "userProfilePath", "var_name": "userProfilePath"}, {"original_string": "private String hookRootUri;", "modifier": "private", "type": "String", "declarator": "hookRootUri", "var_name": "hookRootUri"}, {"original_string": "private boolean listableRoutes;", "modifier": "private", "type": "boolean", "declarator": "listableRoutes", "var_name": "listableRoutes"}, {"original_string": "private ListenerRepository listenerRepository;", "modifier": "private", "type": "ListenerRepository", "declarator": "listenerRepository", "var_name": "listenerRepository"}, {"original_string": "private RouteRepository routeRepository;", "modifier": "private", "type": "RouteRepository", "declarator": "routeRepository", "var_name": "routeRepository"}, {"original_string": "private RequestQueue requestQueue;", "modifier": "private", "type": "RequestQueue", "declarator": "requestQueue", "var_name": "requestQueue"}, {"original_string": "private ReducedPropagationManager reducedPropagationManager;", "modifier": "private", "type": "ReducedPropagationManager", "declarator": "reducedPropagationManager", "var_name": "reducedPropagationManager"}, {"original_string": "private boolean logHookConfigurationResourceChanges = false;", "modifier": "private", "type": "boolean", "declarator": "logHookConfigurationResourceChanges = false", "var_name": "logHookConfigurationResourceChanges"}, {"original_string": "private Handler<Void> doneHandler;", "modifier": "private", "type": "Handler<Void>", "declarator": "doneHandler", "var_name": "doneHandler"}, {"original_string": "private final JsonSchema jsonSchemaHook;", "modifier": "private final", "type": "JsonSchema", "declarator": "jsonSchemaHook", "var_name": "jsonSchemaHook"}], "methods": [{"identifier": "HookHandler", "parameters": "(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri)", "modifiers": "public", "return": "", "signature": " HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri)", "full_signature": "public  HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri)", "class_method_signature": "HookHandler.HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri)", "testcase": false, "constructor": true}, {"identifier": "HookHandler", "parameters": "(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue)", "modifiers": "public", "return": "", "signature": " HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue)", "full_signature": "public  HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue)", "class_method_signature": "HookHandler.HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue)", "testcase": false, "constructor": true}, {"identifier": "HookHandler", "parameters": "(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue, boolean listableRoutes)", "modifiers": "public", "return": "", "signature": " HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue, boolean listableRoutes)", "full_signature": "public  HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue, boolean listableRoutes)", "class_method_signature": "HookHandler.HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue, boolean listableRoutes)", "testcase": false, "constructor": true}, {"identifier": "HookHandler", "parameters": "(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue, boolean listableRoutes,\n                       ReducedPropagationManager reducedPropagationManager)", "modifiers": "public", "return": "", "signature": " HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue, boolean listableRoutes,\n                       ReducedPropagationManager reducedPropagationManager)", "full_signature": "public  HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue, boolean listableRoutes,\n                       ReducedPropagationManager reducedPropagationManager)", "class_method_signature": "HookHandler.HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage storage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue, boolean listableRoutes,\n                       ReducedPropagationManager reducedPropagationManager)", "testcase": false, "constructor": true}, {"identifier": "HookHandler", "parameters": "(Vertx vertx, HttpClient selfClient, final ResourceStorage userProfileStorage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue, boolean listableRoutes,\n                       ReducedPropagationManager reducedPropagationManager, Handler doneHandler, ResourceStorage hookStorage)", "modifiers": "public", "return": "", "signature": " HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage userProfileStorage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue, boolean listableRoutes,\n                       ReducedPropagationManager reducedPropagationManager, Handler doneHandler, ResourceStorage hookStorage)", "full_signature": "public  HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage userProfileStorage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue, boolean listableRoutes,\n                       ReducedPropagationManager reducedPropagationManager, Handler doneHandler, ResourceStorage hookStorage)", "class_method_signature": "HookHandler.HookHandler(Vertx vertx, HttpClient selfClient, final ResourceStorage userProfileStorage,\n                       LoggingResourceManager loggingResourceManager, MonitoringHandler monitoringHandler,\n                       String userProfilePath, String hookRootUri, RequestQueue requestQueue, boolean listableRoutes,\n                       ReducedPropagationManager reducedPropagationManager, Handler doneHandler, ResourceStorage hookStorage)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "HookHandler.init()", "testcase": false, "constructor": false}, {"identifier": "enableResourceLogging", "parameters": "(boolean resourceLoggingEnabled)", "modifiers": "@Override public", "return": "void", "signature": "void enableResourceLogging(boolean resourceLoggingEnabled)", "full_signature": "@Override public void enableResourceLogging(boolean resourceLoggingEnabled)", "class_method_signature": "HookHandler.enableResourceLogging(boolean resourceLoggingEnabled)", "testcase": false, "constructor": false}, {"identifier": "registerCleanupHandler", "parameters": "(Handler<Void> readyHandler)", "modifiers": "private", "return": "void", "signature": "void registerCleanupHandler(Handler<Void> readyHandler)", "full_signature": "private void registerCleanupHandler(Handler<Void> readyHandler)", "class_method_signature": "HookHandler.registerCleanupHandler(Handler<Void> readyHandler)", "testcase": false, "constructor": false}, {"identifier": "loadStoredRoutes", "parameters": "(Handler<Void> readyHandler)", "modifiers": "private", "return": "void", "signature": "void loadStoredRoutes(Handler<Void> readyHandler)", "full_signature": "private void loadStoredRoutes(Handler<Void> readyHandler)", "class_method_signature": "HookHandler.loadStoredRoutes(Handler<Void> readyHandler)", "testcase": false, "constructor": false}, {"identifier": "loadStoredListeners", "parameters": "(final Handler<Void> readyHandler)", "modifiers": "private", "return": "void", "signature": "void loadStoredListeners(final Handler<Void> readyHandler)", "full_signature": "private void loadStoredListeners(final Handler<Void> readyHandler)", "class_method_signature": "HookHandler.loadStoredListeners(final Handler<Void> readyHandler)", "testcase": false, "constructor": false}, {"identifier": "registerRouteRegistrationHandler", "parameters": "(Handler<Void> readyHandler)", "modifiers": "private", "return": "void", "signature": "void registerRouteRegistrationHandler(Handler<Void> readyHandler)", "full_signature": "private void registerRouteRegistrationHandler(Handler<Void> readyHandler)", "class_method_signature": "HookHandler.registerRouteRegistrationHandler(Handler<Void> readyHandler)", "testcase": false, "constructor": false}, {"identifier": "registerListenerRegistrationHandler", "parameters": "(Handler<Void> readyHandler)", "modifiers": "public", "return": "void", "signature": "void registerListenerRegistrationHandler(Handler<Void> readyHandler)", "full_signature": "public void registerListenerRegistrationHandler(Handler<Void> readyHandler)", "class_method_signature": "HookHandler.registerListenerRegistrationHandler(Handler<Void> readyHandler)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean handle(final HttpServerRequest request)", "full_signature": "public boolean handle(final HttpServerRequest request)", "class_method_signature": "HookHandler.handle(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "createListingIfRequested", "parameters": "(final HttpServerRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean createListingIfRequested(final HttpServerRequest request)", "full_signature": "private boolean createListingIfRequested(final HttpServerRequest request)", "class_method_signature": "HookHandler.createListingIfRequested(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "getCollectionName", "parameters": "(String url)", "modifiers": "private", "return": "String", "signature": "String getCollectionName(String url)", "full_signature": "private String getCollectionName(String url)", "class_method_signature": "HookHandler.getCollectionName(String url)", "testcase": false, "constructor": false}, {"identifier": "routeRequestIfNeeded", "parameters": "(HttpServerRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean routeRequestIfNeeded(HttpServerRequest request)", "full_signature": "private boolean routeRequestIfNeeded(HttpServerRequest request)", "class_method_signature": "HookHandler.routeRequestIfNeeded(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "installBodyHandler", "parameters": "(final HttpServerRequest request, final List<Listener> listeners)", "modifiers": "private", "return": "void", "signature": "void installBodyHandler(final HttpServerRequest request, final List<Listener> listeners)", "full_signature": "private void installBodyHandler(final HttpServerRequest request, final List<Listener> listeners)", "class_method_signature": "HookHandler.installBodyHandler(final HttpServerRequest request, final List<Listener> listeners)", "testcase": false, "constructor": false}, {"identifier": "callListener", "parameters": "(final HttpServerRequest request, final Buffer buffer, final List<Listener> filteredListeners, final Handler<Void> handler)", "modifiers": "private", "return": "void", "signature": "void callListener(final HttpServerRequest request, final Buffer buffer, final List<Listener> filteredListeners, final Handler<Void> handler)", "full_signature": "private void callListener(final HttpServerRequest request, final Buffer buffer, final List<Listener> filteredListeners, final Handler<Void> handler)", "class_method_signature": "HookHandler.callListener(final HttpServerRequest request, final Buffer buffer, final List<Listener> filteredListeners, final Handler<Void> handler)", "testcase": false, "constructor": false}, {"identifier": "installAfterHandler", "parameters": "(final HttpServerRequest request, final Buffer buffer, final List<Listener> afterListener)", "modifiers": "private", "return": "Handler<Void>", "signature": "Handler<Void> installAfterHandler(final HttpServerRequest request, final Buffer buffer, final List<Listener> afterListener)", "full_signature": "private Handler<Void> installAfterHandler(final HttpServerRequest request, final Buffer buffer, final List<Listener> afterListener)", "class_method_signature": "HookHandler.installAfterHandler(final HttpServerRequest request, final Buffer buffer, final List<Listener> afterListener)", "testcase": false, "constructor": false}, {"identifier": "installBeforeHandler", "parameters": "(final HttpServerRequest request, final Buffer buffer, final List<Listener> beforeListener, final Handler<Void> afterHandler)", "modifiers": "private", "return": "Handler<Void>", "signature": "Handler<Void> installBeforeHandler(final HttpServerRequest request, final Buffer buffer, final List<Listener> beforeListener, final Handler<Void> afterHandler)", "full_signature": "private Handler<Void> installBeforeHandler(final HttpServerRequest request, final Buffer buffer, final List<Listener> beforeListener, final Handler<Void> afterHandler)", "class_method_signature": "HookHandler.installBeforeHandler(final HttpServerRequest request, final Buffer buffer, final List<Listener> beforeListener, final Handler<Void> afterHandler)", "testcase": false, "constructor": false}, {"identifier": "getFilteredListeners", "parameters": "(final List<Listener> listeners, final HookTriggerType hookTriggerType)", "modifiers": "private", "return": "List<Listener>", "signature": "List<Listener> getFilteredListeners(final List<Listener> listeners, final HookTriggerType hookTriggerType)", "full_signature": "private List<Listener> getFilteredListeners(final List<Listener> listeners, final HookTriggerType hookTriggerType)", "class_method_signature": "HookHandler.getFilteredListeners(final List<Listener> listeners, final HookTriggerType hookTriggerType)", "testcase": false, "constructor": false}, {"identifier": "handleRouteUnregistration", "parameters": "(final HttpServerRequest request)", "modifiers": "private", "return": "void", "signature": "void handleRouteUnregistration(final HttpServerRequest request)", "full_signature": "private void handleRouteUnregistration(final HttpServerRequest request)", "class_method_signature": "HookHandler.handleRouteUnregistration(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleRouteRegistration", "parameters": "(final HttpServerRequest request)", "modifiers": "private", "return": "void", "signature": "void handleRouteRegistration(final HttpServerRequest request)", "full_signature": "private void handleRouteRegistration(final HttpServerRequest request)", "class_method_signature": "HookHandler.handleRouteRegistration(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "getStorageIdentifier", "parameters": "(String url)", "modifiers": "private", "return": "String", "signature": "String getStorageIdentifier(String url)", "full_signature": "private String getStorageIdentifier(String url)", "class_method_signature": "HookHandler.getStorageIdentifier(String url)", "testcase": false, "constructor": false}, {"identifier": "handleListenerUnregistration", "parameters": "(final HttpServerRequest request)", "modifiers": "private", "return": "void", "signature": "void handleListenerUnregistration(final HttpServerRequest request)", "full_signature": "private void handleListenerUnregistration(final HttpServerRequest request)", "class_method_signature": "HookHandler.handleListenerUnregistration(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleListenerRegistration", "parameters": "(final HttpServerRequest request)", "modifiers": "private", "return": "void", "signature": "void handleListenerRegistration(final HttpServerRequest request)", "full_signature": "private void handleListenerRegistration(final HttpServerRequest request)", "class_method_signature": "HookHandler.handleListenerRegistration(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "isListenerJsonInvalid", "parameters": "(HttpServerRequest request, Buffer hookData)", "modifiers": "private", "return": "boolean", "signature": "boolean isListenerJsonInvalid(HttpServerRequest request, Buffer hookData)", "full_signature": "private boolean isListenerJsonInvalid(HttpServerRequest request, Buffer hookData)", "class_method_signature": "HookHandler.isListenerJsonInvalid(HttpServerRequest request, Buffer hookData)", "testcase": false, "constructor": false}, {"identifier": "isHookJsonInvalid", "parameters": "(HttpServerRequest request, Buffer hookData)", "modifiers": "public", "return": "boolean", "signature": "boolean isHookJsonInvalid(HttpServerRequest request, Buffer hookData)", "full_signature": "public boolean isHookJsonInvalid(HttpServerRequest request, Buffer hookData)", "class_method_signature": "HookHandler.isHookJsonInvalid(HttpServerRequest request, Buffer hookData)", "testcase": false, "constructor": false}, {"identifier": "badRequest", "parameters": "(HttpServerRequest request, String statusMsg, String longMsg)", "modifiers": "private", "return": "void", "signature": "void badRequest(HttpServerRequest request, String statusMsg, String longMsg)", "full_signature": "private void badRequest(HttpServerRequest request, String statusMsg, String longMsg)", "class_method_signature": "HookHandler.badRequest(HttpServerRequest request, String statusMsg, String longMsg)", "testcase": false, "constructor": false}, {"identifier": "createSelfRequest", "parameters": "(final HttpServerRequest request, final Buffer requestBody, final Handler<Void> afterHandler)", "modifiers": "private", "return": "void", "signature": "void createSelfRequest(final HttpServerRequest request, final Buffer requestBody, final Handler<Void> afterHandler)", "full_signature": "private void createSelfRequest(final HttpServerRequest request, final Buffer requestBody, final Handler<Void> afterHandler)", "class_method_signature": "HookHandler.createSelfRequest(final HttpServerRequest request, final Buffer requestBody, final Handler<Void> afterHandler)", "testcase": false, "constructor": false}, {"identifier": "isRequestAlreadyHooked", "parameters": "(HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean isRequestAlreadyHooked(HttpServerRequest request)", "full_signature": "public boolean isRequestAlreadyHooked(HttpServerRequest request)", "class_method_signature": "HookHandler.isRequestAlreadyHooked(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "unregisterRoute", "parameters": "(String requestUrl)", "modifiers": "private", "return": "void", "signature": "void unregisterRoute(String requestUrl)", "full_signature": "private void unregisterRoute(String requestUrl)", "class_method_signature": "HookHandler.unregisterRoute(String requestUrl)", "testcase": false, "constructor": false}, {"identifier": "unregisterListener", "parameters": "(String requestUrl)", "modifiers": "private", "return": "void", "signature": "void unregisterListener(String requestUrl)", "full_signature": "private void unregisterListener(String requestUrl)", "class_method_signature": "HookHandler.unregisterListener(String requestUrl)", "testcase": false, "constructor": false}, {"identifier": "registerListener", "parameters": "(Buffer buffer)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void registerListener(Buffer buffer)", "full_signature": "@SuppressWarnings(\"unchecked\") private void registerListener(Buffer buffer)", "class_method_signature": "HookHandler.registerListener(Buffer buffer)", "testcase": false, "constructor": false}, {"identifier": "extractAndAddProxyOptionsToHook", "parameters": "(final JsonObject jsonHook, final HttpHook hook)", "modifiers": "private", "return": "void", "signature": "void extractAndAddProxyOptionsToHook(final JsonObject jsonHook, final HttpHook hook)", "full_signature": "private void extractAndAddProxyOptionsToHook(final JsonObject jsonHook, final HttpHook hook)", "class_method_signature": "HookHandler.extractAndAddProxyOptionsToHook(final JsonObject jsonHook, final HttpHook hook)", "testcase": false, "constructor": false}, {"identifier": "extractAndAddStaticHeadersToHook", "parameters": "(final JsonObject jsonHook, final HttpHook hook)", "modifiers": "private", "return": "void", "signature": "void extractAndAddStaticHeadersToHook(final JsonObject jsonHook, final HttpHook hook)", "full_signature": "private void extractAndAddStaticHeadersToHook(final JsonObject jsonHook, final HttpHook hook)", "class_method_signature": "HookHandler.extractAndAddStaticHeadersToHook(final JsonObject jsonHook, final HttpHook hook)", "testcase": false, "constructor": false}, {"identifier": "getUniqueListenerId", "parameters": "(String requestUrl)", "modifiers": "protected", "return": "String", "signature": "String getUniqueListenerId(String requestUrl)", "full_signature": "protected String getUniqueListenerId(String requestUrl)", "class_method_signature": "HookHandler.getUniqueListenerId(String requestUrl)", "testcase": false, "constructor": false}, {"identifier": "convertToStoragePattern", "parameters": "(String urlSegment)", "modifiers": "private", "return": "String", "signature": "String convertToStoragePattern(String urlSegment)", "full_signature": "private String convertToStoragePattern(String urlSegment)", "class_method_signature": "HookHandler.convertToStoragePattern(String urlSegment)", "testcase": false, "constructor": false}, {"identifier": "registerRoute", "parameters": "(Buffer buffer)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void registerRoute(Buffer buffer)", "full_signature": "@SuppressWarnings(\"unchecked\") private void registerRoute(Buffer buffer)", "class_method_signature": "HookHandler.registerRoute(Buffer buffer)", "testcase": false, "constructor": false}, {"identifier": "mustCreateNewRouteForHook", "parameters": "(Route existingRoute, HttpHook newHook)", "modifiers": "private", "return": "boolean", "signature": "boolean mustCreateNewRouteForHook(Route existingRoute, HttpHook newHook)", "full_signature": "private boolean mustCreateNewRouteForHook(Route existingRoute, HttpHook newHook)", "class_method_signature": "HookHandler.mustCreateNewRouteForHook(Route existingRoute, HttpHook newHook)", "testcase": false, "constructor": false}, {"identifier": "createRoute", "parameters": "(String urlPattern, HttpHook hook)", "modifiers": "private", "return": "Route", "signature": "Route createRoute(String urlPattern, HttpHook hook)", "full_signature": "private Route createRoute(String urlPattern, HttpHook hook)", "class_method_signature": "HookHandler.createRoute(String urlPattern, HttpHook hook)", "testcase": false, "constructor": false}, {"identifier": "getRoutedUrlSegment", "parameters": "(String requestUrl)", "modifiers": "private", "return": "String", "signature": "String getRoutedUrlSegment(String requestUrl)", "full_signature": "private String getRoutedUrlSegment(String requestUrl)", "class_method_signature": "HookHandler.getRoutedUrlSegment(String requestUrl)", "testcase": false, "constructor": false}, {"identifier": "getMonitoredUrlSegment", "parameters": "(String requestUrl)", "modifiers": "private", "return": "String", "signature": "String getMonitoredUrlSegment(String requestUrl)", "full_signature": "private String getMonitoredUrlSegment(String requestUrl)", "class_method_signature": "HookHandler.getMonitoredUrlSegment(String requestUrl)", "testcase": false, "constructor": false}, {"identifier": "getListenerUrlSegment", "parameters": "(String requestUrl)", "modifiers": "private", "return": "String", "signature": "String getListenerUrlSegment(String requestUrl)", "full_signature": "private String getListenerUrlSegment(String requestUrl)", "class_method_signature": "HookHandler.getListenerUrlSegment(String requestUrl)", "testcase": false, "constructor": false}, {"identifier": "isHookListenerUnregistration", "parameters": "(HttpServerRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean isHookListenerUnregistration(HttpServerRequest request)", "full_signature": "private boolean isHookListenerUnregistration(HttpServerRequest request)", "class_method_signature": "HookHandler.isHookListenerUnregistration(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "isHookListenerRegistration", "parameters": "(HttpServerRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean isHookListenerRegistration(HttpServerRequest request)", "full_signature": "private boolean isHookListenerRegistration(HttpServerRequest request)", "class_method_signature": "HookHandler.isHookListenerRegistration(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "isHookRouteRegistration", "parameters": "(HttpServerRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean isHookRouteRegistration(HttpServerRequest request)", "full_signature": "private boolean isHookRouteRegistration(HttpServerRequest request)", "class_method_signature": "HookHandler.isHookRouteRegistration(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "isHookRouteUnregistration", "parameters": "(HttpServerRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean isHookRouteUnregistration(HttpServerRequest request)", "full_signature": "private boolean isHookRouteUnregistration(HttpServerRequest request)", "class_method_signature": "HookHandler.isHookRouteUnregistration(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "extractExpTimeAndManipulatePassedRequestAndReturnExpTime", "parameters": "(HttpServerRequest request)", "modifiers": "private static", "return": "Optional<String>", "signature": "Optional<String> extractExpTimeAndManipulatePassedRequestAndReturnExpTime(HttpServerRequest request)", "full_signature": "private static Optional<String> extractExpTimeAndManipulatePassedRequestAndReturnExpTime(HttpServerRequest request)", "class_method_signature": "HookHandler.extractExpTimeAndManipulatePassedRequestAndReturnExpTime(HttpServerRequest request)", "testcase": false, "constructor": false}], "file": "gateleen-hook/src/main/java/org/swisspush/gateleen/hook/HookHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "boolean", "body": "public boolean handle(final HttpServerRequest request) {\n        boolean consumed = false;\n\n        /*\n         * 1) Un- / Register Listener / Routes\n         */\n        if (isHookListenerRegistration(request)) {\n            handleListenerRegistration(request);\n            return true;\n        }\n\n        if (isHookListenerUnregistration(request)) {\n            handleListenerUnregistration(request);\n            return true;\n        }\n\n        if (isHookRouteRegistration(request)) {\n            handleRouteRegistration(request);\n            return true;\n        }\n\n        if (isHookRouteUnregistration(request)) {\n            handleRouteUnregistration(request);\n            return true;\n        }\n\n        /*\n         * 2) Check if we have to queue a request for listeners\n         */\n        final List<Listener> listeners = listenerRepository.findListeners(request.uri(), request.method().name());\n\n        if (!listeners.isEmpty() && !isRequestAlreadyHooked(request)) {\n            installBodyHandler(request, listeners);\n            consumed = true;\n        }\n\n        if (!consumed) {\n            consumed = routeRequestIfNeeded(request);\n\n            if (!consumed) {\n                return createListingIfRequested(request);\n            }\n\n            return consumed;\n        } else {\n            return true;\n        }\n    }", "signature": "boolean handle(final HttpServerRequest request)", "full_signature": "public boolean handle(final HttpServerRequest request)", "class_method_signature": "HookHandler.handle(final HttpServerRequest request)", "testcase": false, "constructor": false, "invocations": ["isHookListenerRegistration", "handleListenerRegistration", "isHookListenerUnregistration", "handleListenerUnregistration", "isHookRouteRegistration", "handleRouteRegistration", "isHookRouteUnregistration", "handleRouteUnregistration", "findListeners", "uri", "name", "method", "isEmpty", "isRequestAlreadyHooked", "installBodyHandler", "routeRequestIfNeeded", "createListingIfRequested"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}