{"test_class": {"identifier": "StdoutTransportTest", "superclass": "", "interfaces": "", "fields": [], "file": "transporters/src/test/java/com/nextdoor/bender/ipc/stdout/StdoutTransportTest.java"}, "test_case": {"identifier": "testStdout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testStdout() throws IllegalStateException, IOException {\n    ByteArrayOutputStream bo = new ByteArrayOutputStream();\n    System.setOut(new PrintStream(bo));\n\n    StdoutTransport transport = new StdoutTransport();\n    GenericTransportBuffer buf =\n        new GenericTransportBuffer(1, false, new StdoutTransportSerializer());\n    InternalEvent event = new InternalEvent(\"junk\", new LambdaContext(new TestContext()), 123);\n    event.setSerialized(\"junk\");\n    buf.add(event);\n    transport.sendBatch(buf);\n\n    bo.flush();\n    String allWrittenLines = new String(bo.toByteArray());\n\n    assertEquals(\"junk\\n\", allWrittenLines);\n  }", "signature": "void testStdout()", "full_signature": "@Test public void testStdout()", "class_method_signature": "StdoutTransportTest.testStdout()", "testcase": true, "constructor": false, "invocations": ["setOut", "setSerialized", "add", "sendBatch", "flush", "toByteArray", "assertEquals"]}, "focal_class": {"identifier": "StdoutTransport", "superclass": "", "interfaces": "implements UnpartitionedTransport", "fields": [], "methods": [{"identifier": "sendBatch", "parameters": "(TransportBuffer buffer)", "modifiers": "@Override public", "return": "void", "signature": "void sendBatch(TransportBuffer buffer)", "full_signature": "@Override public void sendBatch(TransportBuffer buffer)", "class_method_signature": "StdoutTransport.sendBatch(TransportBuffer buffer)", "testcase": false, "constructor": false}], "file": "transporters/src/main/java/com/nextdoor/bender/ipc/stdout/StdoutTransport.java"}, "focal_method": {"identifier": "sendBatch", "parameters": "(TransportBuffer buffer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void sendBatch(TransportBuffer buffer) {\n    System.out.println(buffer.getInternalBuffer().toString());\n\n    /*\n     * Force a flush as there may not be a newline to trigger the auto flush.\n     */\n    System.out.flush();\n  }", "signature": "void sendBatch(TransportBuffer buffer)", "full_signature": "@Override public void sendBatch(TransportBuffer buffer)", "class_method_signature": "StdoutTransport.sendBatch(TransportBuffer buffer)", "testcase": false, "constructor": false, "invocations": ["println", "toString", "getInternalBuffer", "flush"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}