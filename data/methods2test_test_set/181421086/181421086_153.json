{"test_class": {"identifier": "ControllerTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [{"original_string": "private Controller controller;", "modifier": "private", "type": "Controller", "declarator": "controller", "var_name": "controller"}, {"original_string": "private MockThreadPoolService tp;", "modifier": "private", "type": "MockThreadPoolService", "declarator": "tp", "var_name": "tp"}, {"original_string": "private MockSyncService syncService;", "modifier": "private", "type": "MockSyncService", "declarator": "syncService", "var_name": "syncService"}, {"original_string": "private IPacket testPacket;", "modifier": "private", "type": "IPacket", "declarator": "testPacket", "var_name": "testPacket"}, {"original_string": "private OFPacketIn pi;", "modifier": "private", "type": "OFPacketIn", "declarator": "pi", "var_name": "pi"}, {"original_string": "private final OFFactory factory = OFFactories.getFactory(OFVersion.OF_10);", "modifier": "private final", "type": "OFFactory", "declarator": "factory = OFFactories.getFactory(OFVersion.OF_10)", "var_name": "factory"}, {"original_string": "private static DatapathId DATAPATH_ID_0 = DatapathId.of(0);", "modifier": "private static", "type": "DatapathId", "declarator": "DATAPATH_ID_0 = DatapathId.of(0)", "var_name": "DATAPATH_ID_0"}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/test/java/net/floodlightcontroller/core/internal/ControllerTest.java"}, "test_case": {"identifier": "testSetRole", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetRole() throws Exception {\n    \tdoSetUp(HARole.STANDBY);\n        RoleInfo info = controller.getRoleInfo();\n        assertEquals(HARole.STANDBY, info.getRole());\n        assertEquals(HARole.STANDBY, controller.getRole());\n\n\n        OFSwitchHandshakeHandler h = createMock(OFSwitchHandshakeHandler.class);\n\n        // Reassert the role.\n        reset(h);\n        h.sendRoleRequestIfNotPending(OFControllerRole.ROLE_SLAVE);\n        replay(h);\n        controller.reassertRole(h, HARole.STANDBY);\n        verify(h);\n\n        // reassert a different role: no-op\n        reset(h);\n        replay(h);\n        controller.reassertRole(h, HARole.ACTIVE);\n        verify(h);\n\n        IHAListener listener = createMock(IHAListener.class);\n        expect(listener.getName()).andReturn(\"foo\").anyTimes();\n        setupListenerOrdering(listener);\n        listener.transitionToActive();\n        expectLastCall().once();\n        replay(listener);\n        controller.addHAListener(listener);\n        controller.setRole(HARole.ACTIVE, \"FooBar\");\n        controller.processUpdateQueueForTesting();\n        verify(listener);\n        info = controller.getRoleInfo();\n        assertEquals(HARole.ACTIVE, info.getRole());\n        assertEquals(\"FooBar\", info.getRoleChangeDescription());\n        assertEquals(HARole.ACTIVE, controller.getRole());\n    }", "signature": "void testSetRole()", "full_signature": "@Test public void testSetRole()", "class_method_signature": "ControllerTest.testSetRole()", "testcase": true, "constructor": false, "invocations": ["doSetUp", "getRoleInfo", "assertEquals", "getRole", "assertEquals", "getRole", "createMock", "reset", "sendRoleRequestIfNotPending", "replay", "reassertRole", "verify", "reset", "replay", "reassertRole", "verify", "createMock", "anyTimes", "andReturn", "expect", "getName", "setupListenerOrdering", "transitionToActive", "once", "expectLastCall", "replay", "addHAListener", "setRole", "processUpdateQueueForTesting", "verify", "getRoleInfo", "assertEquals", "getRole", "assertEquals", "getRoleChangeDescription", "assertEquals", "getRole"]}, "focal_class": {"identifier": "Controller", "superclass": "", "interfaces": "implements IFloodlightProviderService, IStorageSourceListener, IInfoProvider", "fields": [{"original_string": "protected static final Logger log = LoggerFactory.getLogger(Controller.class);", "modifier": "protected static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Controller.class)", "var_name": "log"}, {"original_string": "protected static final INotificationManager notifier = NotificationManagerFactory.getNotificationManager(Controller.class);", "modifier": "protected static final", "type": "INotificationManager", "declarator": "notifier = NotificationManagerFactory.getNotificationManager(Controller.class)", "var_name": "notifier"}, {"original_string": "static final String ERROR_DATABASE = \"The controller could not communicate with the system database.\";", "modifier": "static final", "type": "String", "declarator": "ERROR_DATABASE = \"The controller could not communicate with the system database.\"", "var_name": "ERROR_DATABASE"}, {"original_string": "protected ConcurrentMap<OFType, ListenerDispatcher<OFType,IOFMessageListener>> messageListeners;", "modifier": "protected", "type": "ConcurrentMap<OFType, ListenerDispatcher<OFType,IOFMessageListener>>", "declarator": "messageListeners", "var_name": "messageListeners"}, {"original_string": "protected ConcurrentLinkedQueue<IControllerCompletionListener> completionListeners;", "modifier": "protected", "type": "ConcurrentLinkedQueue<IControllerCompletionListener>", "declarator": "completionListeners", "var_name": "completionListeners"}, {"original_string": "protected HashMap<String, String> controllerNodeIPsCache;", "modifier": "protected", "type": "HashMap<String, String>", "declarator": "controllerNodeIPsCache", "var_name": "controllerNodeIPsCache"}, {"original_string": "protected ListenerDispatcher<HAListenerTypeMarker,IHAListener> haListeners;", "modifier": "protected", "type": "ListenerDispatcher<HAListenerTypeMarker,IHAListener>", "declarator": "haListeners", "var_name": "haListeners"}, {"original_string": "protected Map<String, List<IInfoProvider>> providerMap;", "modifier": "protected", "type": "Map<String, List<IInfoProvider>>", "declarator": "providerMap", "var_name": "providerMap"}, {"original_string": "protected BlockingQueue<IUpdate> updates;", "modifier": "protected", "type": "BlockingQueue<IUpdate>", "declarator": "updates", "var_name": "updates"}, {"original_string": "protected ControllerCounters counters;", "modifier": "protected", "type": "ControllerCounters", "declarator": "counters", "var_name": "counters"}, {"original_string": "protected Timer timer;", "modifier": "protected", "type": "Timer", "declarator": "timer", "var_name": "timer"}, {"original_string": "private ModuleLoaderState moduleLoaderState;", "modifier": "private", "type": "ModuleLoaderState", "declarator": "moduleLoaderState", "var_name": "moduleLoaderState"}, {"original_string": "private IStorageSourceService storageSourceService;", "modifier": "private", "type": "IStorageSourceService", "declarator": "storageSourceService", "var_name": "storageSourceService"}, {"original_string": "private IOFSwitchService switchService;", "modifier": "private", "type": "IOFSwitchService", "declarator": "switchService", "var_name": "switchService"}, {"original_string": "private IDebugCounterService debugCounterService;", "modifier": "private", "type": "IDebugCounterService", "declarator": "debugCounterService", "var_name": "debugCounterService"}, {"original_string": "protected IDebugEventService debugEventService;", "modifier": "protected", "type": "IDebugEventService", "declarator": "debugEventService", "var_name": "debugEventService"}, {"original_string": "private IRestApiService restApiService;", "modifier": "private", "type": "IRestApiService", "declarator": "restApiService", "var_name": "restApiService"}, {"original_string": "private IPktInProcessingTimeService pktinProcTimeService;", "modifier": "private", "type": "IPktInProcessingTimeService", "declarator": "pktinProcTimeService", "var_name": "pktinProcTimeService"}, {"original_string": "private IThreadPoolService threadPoolService;", "modifier": "private", "type": "IThreadPoolService", "declarator": "threadPoolService", "var_name": "threadPoolService"}, {"original_string": "private ISyncService syncService;", "modifier": "private", "type": "ISyncService", "declarator": "syncService", "var_name": "syncService"}, {"original_string": "private IShutdownService shutdownService;", "modifier": "private", "type": "IShutdownService", "declarator": "shutdownService", "var_name": "shutdownService"}, {"original_string": "private static TransportPort openFlowPort = TransportPort.of(6653);", "modifier": "private static", "type": "TransportPort", "declarator": "openFlowPort = TransportPort.of(6653)", "var_name": "openFlowPort"}, {"original_string": "private static Set<IPv4Address> openFlowAddresses = new HashSet<IPv4Address>();", "modifier": "private static", "type": "Set<IPv4Address>", "declarator": "openFlowAddresses = new HashSet<IPv4Address>()", "var_name": "openFlowAddresses"}, {"original_string": "public static final int SEND_BUFFER_SIZE = 4 * 1024 * 1024;", "modifier": "public static final", "type": "int", "declarator": "SEND_BUFFER_SIZE = 4 * 1024 * 1024", "var_name": "SEND_BUFFER_SIZE"}, {"original_string": "protected int workerThreads = 16;", "modifier": "protected", "type": "int", "declarator": "workerThreads = 16", "var_name": "workerThreads"}, {"original_string": "protected String controllerId = \"my-floodlight-controller\";", "modifier": "protected", "type": "String", "declarator": "controllerId = \"my-floodlight-controller\"", "var_name": "controllerId"}, {"original_string": "protected volatile HARole notifiedRole;", "modifier": "protected volatile", "type": "HARole", "declarator": "notifiedRole", "var_name": "notifiedRole"}, {"original_string": "private static final String INITIAL_ROLE_CHANGE_DESCRIPTION = \"Controller startup.\";", "modifier": "private static final", "type": "String", "declarator": "INITIAL_ROLE_CHANGE_DESCRIPTION = \"Controller startup.\"", "var_name": "INITIAL_ROLE_CHANGE_DESCRIPTION"}, {"original_string": "private RoleManager roleManager;", "modifier": "private", "type": "RoleManager", "declarator": "roleManager", "var_name": "roleManager"}, {"original_string": "protected static final String CONTROLLER_TABLE_NAME = \"controller_controller\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_TABLE_NAME = \"controller_controller\"", "var_name": "CONTROLLER_TABLE_NAME"}, {"original_string": "protected static final String CONTROLLER_ID = \"id\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_ID = \"id\"", "var_name": "CONTROLLER_ID"}, {"original_string": "protected static final String SWITCH_CONFIG_TABLE_NAME = \"controller_switchconfig\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_CONFIG_TABLE_NAME = \"controller_switchconfig\"", "var_name": "SWITCH_CONFIG_TABLE_NAME"}, {"original_string": "protected static final String SWITCH_CONFIG_CORE_SWITCH = \"core_switch\";", "modifier": "protected static final", "type": "String", "declarator": "SWITCH_CONFIG_CORE_SWITCH = \"core_switch\"", "var_name": "SWITCH_CONFIG_CORE_SWITCH"}, {"original_string": "protected static final String CONTROLLER_INTERFACE_TABLE_NAME = \"controller_controllerinterface\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_INTERFACE_TABLE_NAME = \"controller_controllerinterface\"", "var_name": "CONTROLLER_INTERFACE_TABLE_NAME"}, {"original_string": "protected static final String CONTROLLER_INTERFACE_ID = \"id\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_INTERFACE_ID = \"id\"", "var_name": "CONTROLLER_INTERFACE_ID"}, {"original_string": "protected static final String CONTROLLER_INTERFACE_CONTROLLER_ID = \"controller_id\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_INTERFACE_CONTROLLER_ID = \"controller_id\"", "var_name": "CONTROLLER_INTERFACE_CONTROLLER_ID"}, {"original_string": "protected static final String CONTROLLER_INTERFACE_TYPE = \"type\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_INTERFACE_TYPE = \"type\"", "var_name": "CONTROLLER_INTERFACE_TYPE"}, {"original_string": "protected static final String CONTROLLER_INTERFACE_NUMBER = \"number\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_INTERFACE_NUMBER = \"number\"", "var_name": "CONTROLLER_INTERFACE_NUMBER"}, {"original_string": "protected static final String CONTROLLER_INTERFACE_DISCOVERED_IP = \"discovered_ip\";", "modifier": "protected static final", "type": "String", "declarator": "CONTROLLER_INTERFACE_DISCOVERED_IP = \"discovered_ip\"", "var_name": "CONTROLLER_INTERFACE_DISCOVERED_IP"}, {"original_string": "private static final String FLOW_PRIORITY_TABLE_NAME = \"controller_forwardingconfig\";", "modifier": "private static final", "type": "String", "declarator": "FLOW_PRIORITY_TABLE_NAME = \"controller_forwardingconfig\"", "var_name": "FLOW_PRIORITY_TABLE_NAME"}, {"original_string": "private static final String FLOW_COLUMN_PRIMARY_KEY = \"id\";", "modifier": "private static final", "type": "String", "declarator": "FLOW_COLUMN_PRIMARY_KEY = \"id\"", "var_name": "FLOW_COLUMN_PRIMARY_KEY"}, {"original_string": "private static final String FLOW_VALUE_PRIMARY_KEY = \"forwarding\";", "modifier": "private static final", "type": "String", "declarator": "FLOW_VALUE_PRIMARY_KEY = \"forwarding\"", "var_name": "FLOW_VALUE_PRIMARY_KEY"}, {"original_string": "private static final String FLOW_COLUMN_ACCESS_PRIORITY = \"access_priority\";", "modifier": "private static final", "type": "String", "declarator": "FLOW_COLUMN_ACCESS_PRIORITY = \"access_priority\"", "var_name": "FLOW_COLUMN_ACCESS_PRIORITY"}, {"original_string": "private static final String FLOW_COLUMN_CORE_PRIORITY = \"core_priority\";", "modifier": "private static final", "type": "String", "declarator": "FLOW_COLUMN_CORE_PRIORITY = \"core_priority\"", "var_name": "FLOW_COLUMN_CORE_PRIORITY"}, {"original_string": "private static final String[] FLOW_COLUMN_NAMES = new String[] {\n            FLOW_COLUMN_PRIMARY_KEY,\n            FLOW_COLUMN_ACCESS_PRIORITY,\n            FLOW_COLUMN_CORE_PRIORITY\n    };", "modifier": "private static final", "type": "String[]", "declarator": "FLOW_COLUMN_NAMES = new String[] {\n            FLOW_COLUMN_PRIMARY_KEY,\n            FLOW_COLUMN_ACCESS_PRIORITY,\n            FLOW_COLUMN_CORE_PRIORITY\n    }", "var_name": "FLOW_COLUMN_NAMES"}, {"original_string": "protected static final boolean ALWAYS_DECODE_ETH = true;", "modifier": "protected static final", "type": "boolean", "declarator": "ALWAYS_DECODE_ETH = true", "var_name": "ALWAYS_DECODE_ETH"}, {"original_string": "Set<String> uplinkPortPrefixSet;", "modifier": "", "type": "Set<String>", "declarator": "uplinkPortPrefixSet", "var_name": "uplinkPortPrefixSet"}, {"original_string": "protected final boolean overload_drop = Boolean.parseBoolean(System.getProperty(\"overload_drop\", \"false\"));", "modifier": "protected final", "type": "boolean", "declarator": "overload_drop = Boolean.parseBoolean(System.getProperty(\"overload_drop\", \"false\"))", "var_name": "overload_drop"}, {"original_string": "protected final LoadMonitor loadmonitor = new LoadMonitor(log);", "modifier": "protected final", "type": "LoadMonitor", "declarator": "loadmonitor = new LoadMonitor(log)", "var_name": "loadmonitor"}, {"original_string": "protected static final ThreadLocal<Stack<FloodlightContext>> flcontext_cache =\n        new ThreadLocal <Stack<FloodlightContext>> () {\n            @Override\n            protected Stack<FloodlightContext> initialValue() {\n                return new Stack<FloodlightContext>();\n            }\n        };", "modifier": "protected static final", "type": "ThreadLocal<Stack<FloodlightContext>>", "declarator": "flcontext_cache =\n        new ThreadLocal <Stack<FloodlightContext>> () {\n            @Override\n            protected Stack<FloodlightContext> initialValue() {\n                return new Stack<FloodlightContext>();\n            }\n        }", "var_name": "flcontext_cache"}, {"original_string": "private static final String FLOW_PRIORITY_CHANGED_AFTER_STARTUP =\n            \"Flow priority configuration has changed after \" +\n            \"controller startup. Restart controller for new \" +\n            \"configuration to take effect.\";", "modifier": "private static final", "type": "String", "declarator": "FLOW_PRIORITY_CHANGED_AFTER_STARTUP =\n            \"Flow priority configuration has changed after \" +\n            \"controller startup. Restart controller for new \" +\n            \"configuration to take effect.\"", "var_name": "FLOW_PRIORITY_CHANGED_AFTER_STARTUP"}], "methods": [{"identifier": "getUplinkPortPrefixSet", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getUplinkPortPrefixSet()", "full_signature": "@Override public Set<String> getUplinkPortPrefixSet()", "class_method_signature": "Controller.getUplinkPortPrefixSet()", "testcase": false, "constructor": false}, {"identifier": "setUplinkPortPrefixSet", "parameters": "(Set<String> prefixSet)", "modifiers": "public", "return": "void", "signature": "void setUplinkPortPrefixSet(Set<String> prefixSet)", "full_signature": "public void setUplinkPortPrefixSet(Set<String> prefixSet)", "class_method_signature": "Controller.setUplinkPortPrefixSet(Set<String> prefixSet)", "testcase": false, "constructor": false}, {"identifier": "getModuleLoaderState", "parameters": "()", "modifiers": "@Override public", "return": "ModuleLoaderState", "signature": "ModuleLoaderState getModuleLoaderState()", "full_signature": "@Override public ModuleLoaderState getModuleLoaderState()", "class_method_signature": "Controller.getModuleLoaderState()", "testcase": false, "constructor": false}, {"identifier": "setStorageSourceService", "parameters": "(IStorageSourceService storageSource)", "modifiers": "", "return": "void", "signature": "void setStorageSourceService(IStorageSourceService storageSource)", "full_signature": " void setStorageSourceService(IStorageSourceService storageSource)", "class_method_signature": "Controller.setStorageSourceService(IStorageSourceService storageSource)", "testcase": false, "constructor": false}, {"identifier": "getStorageSourceService", "parameters": "()", "modifiers": "", "return": "IStorageSourceService", "signature": "IStorageSourceService getStorageSourceService()", "full_signature": " IStorageSourceService getStorageSourceService()", "class_method_signature": "Controller.getStorageSourceService()", "testcase": false, "constructor": false}, {"identifier": "getShutdownService", "parameters": "()", "modifiers": "", "return": "IShutdownService", "signature": "IShutdownService getShutdownService()", "full_signature": " IShutdownService getShutdownService()", "class_method_signature": "Controller.getShutdownService()", "testcase": false, "constructor": false}, {"identifier": "setShutdownService", "parameters": "(IShutdownService shutdownService)", "modifiers": "", "return": "void", "signature": "void setShutdownService(IShutdownService shutdownService)", "full_signature": " void setShutdownService(IShutdownService shutdownService)", "class_method_signature": "Controller.setShutdownService(IShutdownService shutdownService)", "testcase": false, "constructor": false}, {"identifier": "setDebugEvent", "parameters": "(IDebugEventService debugEvent)", "modifiers": "public", "return": "void", "signature": "void setDebugEvent(IDebugEventService debugEvent)", "full_signature": "public void setDebugEvent(IDebugEventService debugEvent)", "class_method_signature": "Controller.setDebugEvent(IDebugEventService debugEvent)", "testcase": false, "constructor": false}, {"identifier": "setDebugCounter", "parameters": "(IDebugCounterService debugCounters)", "modifiers": "", "return": "void", "signature": "void setDebugCounter(IDebugCounterService debugCounters)", "full_signature": " void setDebugCounter(IDebugCounterService debugCounters)", "class_method_signature": "Controller.setDebugCounter(IDebugCounterService debugCounters)", "testcase": false, "constructor": false}, {"identifier": "getDebugCounter", "parameters": "()", "modifiers": "", "return": "IDebugCounterService", "signature": "IDebugCounterService getDebugCounter()", "full_signature": " IDebugCounterService getDebugCounter()", "class_method_signature": "Controller.getDebugCounter()", "testcase": false, "constructor": false}, {"identifier": "setSyncService", "parameters": "(ISyncService syncService)", "modifiers": "", "return": "void", "signature": "void setSyncService(ISyncService syncService)", "full_signature": " void setSyncService(ISyncService syncService)", "class_method_signature": "Controller.setSyncService(ISyncService syncService)", "testcase": false, "constructor": false}, {"identifier": "setPktInProcessingService", "parameters": "(IPktInProcessingTimeService pits)", "modifiers": "", "return": "void", "signature": "void setPktInProcessingService(IPktInProcessingTimeService pits)", "full_signature": " void setPktInProcessingService(IPktInProcessingTimeService pits)", "class_method_signature": "Controller.setPktInProcessingService(IPktInProcessingTimeService pits)", "testcase": false, "constructor": false}, {"identifier": "setRestApiService", "parameters": "(IRestApiService restApi)", "modifiers": "", "return": "void", "signature": "void setRestApiService(IRestApiService restApi)", "full_signature": " void setRestApiService(IRestApiService restApi)", "class_method_signature": "Controller.setRestApiService(IRestApiService restApi)", "testcase": false, "constructor": false}, {"identifier": "setThreadPoolService", "parameters": "(IThreadPoolService tp)", "modifiers": "", "return": "void", "signature": "void setThreadPoolService(IThreadPoolService tp)", "full_signature": " void setThreadPoolService(IThreadPoolService tp)", "class_method_signature": "Controller.setThreadPoolService(IThreadPoolService tp)", "testcase": false, "constructor": false}, {"identifier": "getThreadPoolService", "parameters": "()", "modifiers": "", "return": "IThreadPoolService", "signature": "IThreadPoolService getThreadPoolService()", "full_signature": " IThreadPoolService getThreadPoolService()", "class_method_signature": "Controller.getThreadPoolService()", "testcase": false, "constructor": false}, {"identifier": "setSwitchService", "parameters": "(IOFSwitchService switchService)", "modifiers": "public", "return": "void", "signature": "void setSwitchService(IOFSwitchService switchService)", "full_signature": "public void setSwitchService(IOFSwitchService switchService)", "class_method_signature": "Controller.setSwitchService(IOFSwitchService switchService)", "testcase": false, "constructor": false}, {"identifier": "getSwitchService", "parameters": "()", "modifiers": "public", "return": "IOFSwitchService", "signature": "IOFSwitchService getSwitchService()", "full_signature": "public IOFSwitchService getSwitchService()", "class_method_signature": "Controller.getSwitchService()", "testcase": false, "constructor": false}, {"identifier": "getWorkerThreads", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getWorkerThreads()", "full_signature": "@Override public int getWorkerThreads()", "class_method_signature": "Controller.getWorkerThreads()", "testcase": false, "constructor": false}, {"identifier": "getRole", "parameters": "()", "modifiers": "@Override public", "return": "HARole", "signature": "HARole getRole()", "full_signature": "@Override public HARole getRole()", "class_method_signature": "Controller.getRole()", "testcase": false, "constructor": false}, {"identifier": "getRoleInfo", "parameters": "()", "modifiers": "@Override public", "return": "RoleInfo", "signature": "RoleInfo getRoleInfo()", "full_signature": "@Override public RoleInfo getRoleInfo()", "class_method_signature": "Controller.getRoleInfo()", "testcase": false, "constructor": false}, {"identifier": "setRole", "parameters": "(HARole role, String changeDescription)", "modifiers": "@Override public", "return": "void", "signature": "void setRole(HARole role, String changeDescription)", "full_signature": "@Override public void setRole(HARole role, String changeDescription)", "class_method_signature": "Controller.setRole(HARole role, String changeDescription)", "testcase": false, "constructor": false}, {"identifier": "flcontext_alloc", "parameters": "()", "modifiers": "protected static", "return": "FloodlightContext", "signature": "FloodlightContext flcontext_alloc()", "full_signature": "protected static FloodlightContext flcontext_alloc()", "class_method_signature": "Controller.flcontext_alloc()", "testcase": false, "constructor": false}, {"identifier": "flcontext_free", "parameters": "(FloodlightContext flcontext)", "modifiers": "protected", "return": "void", "signature": "void flcontext_free(FloodlightContext flcontext)", "full_signature": "protected void flcontext_free(FloodlightContext flcontext)", "class_method_signature": "Controller.flcontext_free(FloodlightContext flcontext)", "testcase": false, "constructor": false}, {"identifier": "handleMessage", "parameters": "(IOFSwitch sw, OFMessage m,\n                                 FloodlightContext bContext)", "modifiers": "@Override public", "return": "void", "signature": "void handleMessage(IOFSwitch sw, OFMessage m,\n                                 FloodlightContext bContext)", "full_signature": "@Override public void handleMessage(IOFSwitch sw, OFMessage m,\n                                 FloodlightContext bContext)", "class_method_signature": "Controller.handleMessage(IOFSwitch sw, OFMessage m,\n                                 FloodlightContext bContext)", "testcase": false, "constructor": false}, {"identifier": "reassertRole", "parameters": "(OFSwitchHandshakeHandler ofSwitchHandshakeHandler, HARole role)", "modifiers": "", "return": "void", "signature": "void reassertRole(OFSwitchHandshakeHandler ofSwitchHandshakeHandler, HARole role)", "full_signature": " void reassertRole(OFSwitchHandshakeHandler ofSwitchHandshakeHandler, HARole role)", "class_method_signature": "Controller.reassertRole(OFSwitchHandshakeHandler ofSwitchHandshakeHandler, HARole role)", "testcase": false, "constructor": false}, {"identifier": "getControllerId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getControllerId()", "full_signature": "@Override public String getControllerId()", "class_method_signature": "Controller.getControllerId()", "testcase": false, "constructor": false}, {"identifier": "getOFAddresses", "parameters": "()", "modifiers": "@Override public", "return": "Set<IPv4Address>", "signature": "Set<IPv4Address> getOFAddresses()", "full_signature": "@Override public Set<IPv4Address> getOFAddresses()", "class_method_signature": "Controller.getOFAddresses()", "testcase": false, "constructor": false}, {"identifier": "getOFPort", "parameters": "()", "modifiers": "@Override public", "return": "TransportPort", "signature": "TransportPort getOFPort()", "full_signature": "@Override public TransportPort getOFPort()", "class_method_signature": "Controller.getOFPort()", "testcase": false, "constructor": false}, {"identifier": "addCompletionListener", "parameters": "(IControllerCompletionListener listener)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void addCompletionListener(IControllerCompletionListener listener)", "full_signature": "@Override public synchronized void addCompletionListener(IControllerCompletionListener listener)", "class_method_signature": "Controller.addCompletionListener(IControllerCompletionListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeCompletionListener", "parameters": "(IControllerCompletionListener listener)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void removeCompletionListener(IControllerCompletionListener listener)", "full_signature": "@Override public synchronized void removeCompletionListener(IControllerCompletionListener listener)", "class_method_signature": "Controller.removeCompletionListener(IControllerCompletionListener listener)", "testcase": false, "constructor": false}, {"identifier": "addOFMessageListener", "parameters": "(OFType type, IOFMessageListener listener)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void addOFMessageListener(OFType type, IOFMessageListener listener)", "full_signature": "@Override public synchronized void addOFMessageListener(OFType type, IOFMessageListener listener)", "class_method_signature": "Controller.addOFMessageListener(OFType type, IOFMessageListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeOFMessageListener", "parameters": "(OFType type, IOFMessageListener listener)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void removeOFMessageListener(OFType type, IOFMessageListener listener)", "full_signature": "@Override public synchronized void removeOFMessageListener(OFType type, IOFMessageListener listener)", "class_method_signature": "Controller.removeOFMessageListener(OFType type, IOFMessageListener listener)", "testcase": false, "constructor": false}, {"identifier": "logListeners", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void logListeners()", "full_signature": "private void logListeners()", "class_method_signature": "Controller.logListeners()", "testcase": false, "constructor": false}, {"identifier": "removeOFMessageListeners", "parameters": "(OFType type)", "modifiers": "public", "return": "void", "signature": "void removeOFMessageListeners(OFType type)", "full_signature": "public void removeOFMessageListeners(OFType type)", "class_method_signature": "Controller.removeOFMessageListeners(OFType type)", "testcase": false, "constructor": false}, {"identifier": "getListeners", "parameters": "()", "modifiers": "@Override public", "return": "Map<OFType, List<IOFMessageListener>>", "signature": "Map<OFType, List<IOFMessageListener>> getListeners()", "full_signature": "@Override public Map<OFType, List<IOFMessageListener>> getListeners()", "class_method_signature": "Controller.getListeners()", "testcase": false, "constructor": false}, {"identifier": "handleOutgoingMessage", "parameters": "(IOFSwitch sw, OFMessage m)", "modifiers": "@Override public", "return": "void", "signature": "void handleOutgoingMessage(IOFSwitch sw, OFMessage m)", "full_signature": "@Override public void handleOutgoingMessage(IOFSwitch sw, OFMessage m)", "class_method_signature": "Controller.handleOutgoingMessage(IOFSwitch sw, OFMessage m)", "testcase": false, "constructor": false}, {"identifier": "getInitialRole", "parameters": "(Map<String, String> configParams)", "modifiers": "protected", "return": "HARole", "signature": "HARole getInitialRole(Map<String, String> configParams)", "full_signature": "protected HARole getInitialRole(Map<String, String> configParams)", "class_method_signature": "Controller.getInitialRole(Map<String, String> configParams)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Controller.run()", "testcase": false, "constructor": false}, {"identifier": "setConfigParams", "parameters": "(Map<String, String> configParams)", "modifiers": "private", "return": "void", "signature": "void setConfigParams(Map<String, String> configParams)", "full_signature": "private void setConfigParams(Map<String, String> configParams)", "class_method_signature": "Controller.setConfigParams(Map<String, String> configParams)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Map<String, String> configParams)", "modifiers": "public", "return": "void", "signature": "void init(Map<String, String> configParams)", "full_signature": "public void init(Map<String, String> configParams)", "class_method_signature": "Controller.init(Map<String, String> configParams)", "testcase": false, "constructor": false}, {"identifier": "startupComponents", "parameters": "(FloodlightModuleLoader floodlightModuleLoader)", "modifiers": "public", "return": "void", "signature": "void startupComponents(FloodlightModuleLoader floodlightModuleLoader)", "full_signature": "public void startupComponents(FloodlightModuleLoader floodlightModuleLoader)", "class_method_signature": "Controller.startupComponents(FloodlightModuleLoader floodlightModuleLoader)", "testcase": false, "constructor": false}, {"identifier": "readFlowPriorityConfigurationFromStorage", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void readFlowPriorityConfigurationFromStorage()", "full_signature": "private void readFlowPriorityConfigurationFromStorage()", "class_method_signature": "Controller.readFlowPriorityConfigurationFromStorage()", "testcase": false, "constructor": false}, {"identifier": "addInfoProvider", "parameters": "(String type, IInfoProvider provider)", "modifiers": "@Override public", "return": "void", "signature": "void addInfoProvider(String type, IInfoProvider provider)", "full_signature": "@Override public void addInfoProvider(String type, IInfoProvider provider)", "class_method_signature": "Controller.addInfoProvider(String type, IInfoProvider provider)", "testcase": false, "constructor": false}, {"identifier": "removeInfoProvider", "parameters": "(String type, IInfoProvider provider)", "modifiers": "@Override public", "return": "void", "signature": "void removeInfoProvider(String type, IInfoProvider provider)", "full_signature": "@Override public void removeInfoProvider(String type, IInfoProvider provider)", "class_method_signature": "Controller.removeInfoProvider(String type, IInfoProvider provider)", "testcase": false, "constructor": false}, {"identifier": "getControllerInfo", "parameters": "(String type)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getControllerInfo(String type)", "full_signature": "@Override public Map<String, Object> getControllerInfo(String type)", "class_method_signature": "Controller.getControllerInfo(String type)", "testcase": false, "constructor": false}, {"identifier": "addHAListener", "parameters": "(IHAListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addHAListener(IHAListener listener)", "full_signature": "@Override public void addHAListener(IHAListener listener)", "class_method_signature": "Controller.addHAListener(IHAListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeHAListener", "parameters": "(IHAListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeHAListener(IHAListener listener)", "full_signature": "@Override public void removeHAListener(IHAListener listener)", "class_method_signature": "Controller.removeHAListener(IHAListener listener)", "testcase": false, "constructor": false}, {"identifier": "handleControllerNodeIPChanges", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void handleControllerNodeIPChanges()", "full_signature": "protected void handleControllerNodeIPChanges()", "class_method_signature": "Controller.handleControllerNodeIPChanges()", "testcase": false, "constructor": false}, {"identifier": "getControllerNodeIPs", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getControllerNodeIPs()", "full_signature": "@Override public Map<String, String> getControllerNodeIPs()", "class_method_signature": "Controller.getControllerNodeIPs()", "testcase": false, "constructor": false}, {"identifier": "rowsModified", "parameters": "(String tableName, Set<Object> rowKeys)", "modifiers": "@Override public", "return": "void", "signature": "void rowsModified(String tableName, Set<Object> rowKeys)", "full_signature": "@Override public void rowsModified(String tableName, Set<Object> rowKeys)", "class_method_signature": "Controller.rowsModified(String tableName, Set<Object> rowKeys)", "testcase": false, "constructor": false}, {"identifier": "rowsDeleted", "parameters": "(String tableName, Set<Object> rowKeys)", "modifiers": "@Override public", "return": "void", "signature": "void rowsDeleted(String tableName, Set<Object> rowKeys)", "full_signature": "@Override public void rowsDeleted(String tableName, Set<Object> rowKeys)", "class_method_signature": "Controller.rowsDeleted(String tableName, Set<Object> rowKeys)", "testcase": false, "constructor": false}, {"identifier": "getSystemStartTime", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getSystemStartTime()", "full_signature": "@Override public long getSystemStartTime()", "class_method_signature": "Controller.getSystemStartTime()", "testcase": false, "constructor": false}, {"identifier": "getMemory", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Long>", "signature": "Map<String, Long> getMemory()", "full_signature": "@Override public Map<String, Long> getMemory()", "class_method_signature": "Controller.getMemory()", "testcase": false, "constructor": false}, {"identifier": "getUptime", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long getUptime()", "full_signature": "@Override public Long getUptime()", "class_method_signature": "Controller.getUptime()", "testcase": false, "constructor": false}, {"identifier": "addUpdateToQueue", "parameters": "(IUpdate update)", "modifiers": "@Override public", "return": "void", "signature": "void addUpdateToQueue(IUpdate update)", "full_signature": "@Override public void addUpdateToQueue(IUpdate update)", "class_method_signature": "Controller.addUpdateToQueue(IUpdate update)", "testcase": false, "constructor": false}, {"identifier": "processUpdateQueueForTesting", "parameters": "()", "modifiers": "", "return": "void", "signature": "void processUpdateQueueForTesting()", "full_signature": " void processUpdateQueueForTesting()", "class_method_signature": "Controller.processUpdateQueueForTesting()", "testcase": false, "constructor": false}, {"identifier": "isUpdateQueueEmptyForTesting", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isUpdateQueueEmptyForTesting()", "full_signature": " boolean isUpdateQueueEmptyForTesting()", "class_method_signature": "Controller.isUpdateQueueEmptyForTesting()", "testcase": false, "constructor": false}, {"identifier": "resetModuleState", "parameters": "()", "modifiers": "", "return": "void", "signature": "void resetModuleState()", "full_signature": " void resetModuleState()", "class_method_signature": "Controller.resetModuleState()", "testcase": false, "constructor": false}, {"identifier": "setModuleLoaderStateForTesting", "parameters": "(ModuleLoaderState state)", "modifiers": "", "return": "void", "signature": "void setModuleLoaderStateForTesting(ModuleLoaderState state)", "full_signature": " void setModuleLoaderStateForTesting(ModuleLoaderState state)", "class_method_signature": "Controller.setModuleLoaderStateForTesting(ModuleLoaderState state)", "testcase": false, "constructor": false}, {"identifier": "getInfo", "parameters": "(String type)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getInfo(String type)", "full_signature": "@Override public Map<String, Object> getInfo(String type)", "class_method_signature": "Controller.getInfo(String type)", "testcase": false, "constructor": false}, {"identifier": "setNotifiedRole", "parameters": "(HARole newRole)", "modifiers": "protected", "return": "void", "signature": "void setNotifiedRole(HARole newRole)", "full_signature": "protected void setNotifiedRole(HARole newRole)", "class_method_signature": "Controller.setNotifiedRole(HARole newRole)", "testcase": false, "constructor": false}, {"identifier": "getRoleManager", "parameters": "()", "modifiers": "@Override public", "return": "RoleManager", "signature": "RoleManager getRoleManager()", "full_signature": "@Override public RoleManager getRoleManager()", "class_method_signature": "Controller.getRoleManager()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "Optional<ControllerId>", "signature": "Optional<ControllerId> getId()", "full_signature": "public Optional<ControllerId> getId()", "class_method_signature": "Controller.getId()", "testcase": false, "constructor": false}, {"identifier": "getTimer", "parameters": "()", "modifiers": "@Override public", "return": "Timer", "signature": "Timer getTimer()", "full_signature": "@Override public Timer getTimer()", "class_method_signature": "Controller.getTimer()", "testcase": false, "constructor": false}, {"identifier": "getCounters", "parameters": "()", "modifiers": "public", "return": "ControllerCounters", "signature": "ControllerCounters getCounters()", "full_signature": "public ControllerCounters getCounters()", "class_method_signature": "Controller.getCounters()", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/main/java/net/floodlightcontroller/core/internal/Controller.java"}, "focal_method": {"identifier": "setRole", "parameters": "(HARole role, String changeDescription)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setRole(HARole role, String changeDescription) {\n        roleManager.setRole(role, changeDescription);\n    }", "signature": "void setRole(HARole role, String changeDescription)", "full_signature": "@Override public void setRole(HARole role, String changeDescription)", "class_method_signature": "Controller.setRole(HARole role, String changeDescription)", "testcase": false, "constructor": false, "invocations": ["setRole"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}