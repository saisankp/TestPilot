{"test_class": {"identifier": "UseCaseTest", "superclass": "extends BaseUseCaseTest<UseCaseTest.TestUseCase, UseCaseTest.TestRepository>", "interfaces": "", "fields": [{"original_string": "private TestSubscriber<Integer> testSubscriber;", "modifier": "private", "type": "TestSubscriber<Integer>", "declarator": "testSubscriber", "var_name": "testSubscriber"}], "file": "domain/src/test/java/com/buddysearch/android/domain/interactor/UseCaseTest.java"}, "test_case": {"identifier": "buildUseCaseObservable_AsCorrectResult", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void buildUseCaseObservable_AsCorrectResult() {\n        useCase.execute(testSubscriber);\n        assertThat(testSubscriber.getOnNextEvents().size(), is(0));\n    }", "signature": "void buildUseCaseObservable_AsCorrectResult()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") public void buildUseCaseObservable_AsCorrectResult()", "class_method_signature": "UseCaseTest.buildUseCaseObservable_AsCorrectResult()", "testcase": true, "constructor": false, "invocations": ["execute", "assertThat", "size", "getOnNextEvents", "is"]}, "focal_class": {"identifier": "UseCase", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final REPOSITORY repository;", "modifier": "protected final", "type": "REPOSITORY", "declarator": "repository", "var_name": "repository"}, {"original_string": "protected final Messenger messenger;", "modifier": "protected final", "type": "Messenger", "declarator": "messenger", "var_name": "messenger"}, {"original_string": "private final Scheduler threadScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "threadScheduler", "var_name": "threadScheduler"}, {"original_string": "private final Scheduler postExecutionScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "postExecutionScheduler", "var_name": "postExecutionScheduler"}, {"original_string": "private CompositeSubscription subscription = new CompositeSubscription();", "modifier": "private", "type": "CompositeSubscription", "declarator": "subscription = new CompositeSubscription()", "var_name": "subscription"}], "methods": [{"identifier": "UseCase", "parameters": "(REPOSITORY repository,\n                   Messenger messenger,\n                   @Named(\"Thread\") Scheduler threadScheduler,\n                   @Named(\"PostExecution\") Scheduler postExecutionScheduler)", "modifiers": "public", "return": "", "signature": " UseCase(REPOSITORY repository,\n                   Messenger messenger,\n                   @Named(\"Thread\") Scheduler threadScheduler,\n                   @Named(\"PostExecution\") Scheduler postExecutionScheduler)", "full_signature": "public  UseCase(REPOSITORY repository,\n                   Messenger messenger,\n                   @Named(\"Thread\") Scheduler threadScheduler,\n                   @Named(\"PostExecution\") Scheduler postExecutionScheduler)", "class_method_signature": "UseCase.UseCase(REPOSITORY repository,\n                   Messenger messenger,\n                   @Named(\"Thread\") Scheduler threadScheduler,\n                   @Named(\"PostExecution\") Scheduler postExecutionScheduler)", "testcase": false, "constructor": true}, {"identifier": "buildObservable", "parameters": "(REQUEST_DATA requestData)", "modifiers": "protected abstract", "return": "Observable<RESPONSE_DATA>", "signature": "Observable<RESPONSE_DATA> buildObservable(REQUEST_DATA requestData)", "full_signature": "protected abstract Observable<RESPONSE_DATA> buildObservable(REQUEST_DATA requestData)", "class_method_signature": "UseCase.buildObservable(REQUEST_DATA requestData)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(REQUEST_DATA requestData, Subscriber<RESPONSE_DATA> useCaseSubscriber)", "modifiers": "public", "return": "void", "signature": "void execute(REQUEST_DATA requestData, Subscriber<RESPONSE_DATA> useCaseSubscriber)", "full_signature": "public void execute(REQUEST_DATA requestData, Subscriber<RESPONSE_DATA> useCaseSubscriber)", "class_method_signature": "UseCase.execute(REQUEST_DATA requestData, Subscriber<RESPONSE_DATA> useCaseSubscriber)", "testcase": false, "constructor": false}, {"identifier": "isUnsubscribed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUnsubscribed()", "full_signature": "public boolean isUnsubscribed()", "class_method_signature": "UseCase.isUnsubscribed()", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unsubscribe()", "full_signature": "public void unsubscribe()", "class_method_signature": "UseCase.unsubscribe()", "testcase": false, "constructor": false}], "file": "domain/src/main/java/com/buddysearch/android/domain/interactor/UseCase.java"}, "focal_method": {"identifier": "execute", "parameters": "(REQUEST_DATA requestData, Subscriber<RESPONSE_DATA> useCaseSubscriber)", "modifiers": "public", "return": "void", "body": "public void execute(REQUEST_DATA requestData, Subscriber<RESPONSE_DATA> useCaseSubscriber) {\n        this.subscription.add(this.buildObservable(requestData)\n                .subscribeOn(threadScheduler)\n                .observeOn(postExecutionScheduler)\n                .subscribe(useCaseSubscriber));\n        repository.register(this);\n    }", "signature": "void execute(REQUEST_DATA requestData, Subscriber<RESPONSE_DATA> useCaseSubscriber)", "full_signature": "public void execute(REQUEST_DATA requestData, Subscriber<RESPONSE_DATA> useCaseSubscriber)", "class_method_signature": "UseCase.execute(REQUEST_DATA requestData, Subscriber<RESPONSE_DATA> useCaseSubscriber)", "testcase": false, "constructor": false, "invocations": ["add", "subscribe", "observeOn", "subscribeOn", "buildObservable", "register"]}, "repository": {"repo_id": 64247174, "url": "https://github.com/ihorvitruk/buddysearch", "language": "Java", "is_fork": false, "fork_count": 45, "stargazer_count": 206, "size": 15884, "license": "licensed"}}