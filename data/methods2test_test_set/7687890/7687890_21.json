{"test_class": {"identifier": "MyPresentationPolicyTest", "superclass": "", "interfaces": "", "fields": [], "file": "Code/core-abce/abce-components/src/test/java-ibm-only/eu/abc4trust/util/MyPresentationPolicyTest.java"}, "test_case": {"identifier": "testIsSatisfiedBy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIsSatisfiedBy() throws Exception {\n    PresentationToken pt =\n      (PresentationToken) XmlUtils.getObjectFromXML(getClass().getResourceAsStream(\n          \"/eu/abc4trust/sampleXml/presentationTokens/presentationTokenHotelOption1.xml\"), true);\n    PresentationTokenDescription ptd = pt.getPresentationTokenDescription();\n    PresentationPolicyAlternatives ppa =\n      (PresentationPolicyAlternatives) XmlUtils.getObjectFromXML(getClass().getResourceAsStream(\n          \"/eu/abc4trust/sampleXml/presentationPolicies/presentationPolicyAlternativesHotel.xml\"), true);\n    MyPresentationPolicy mypp = new MyPresentationPolicy(ppa.getPresentationPolicy().get(0));\n    \n    assertTrue(mypp.isSatisfiedBy(ptd, null, null));\n  }", "signature": "void testIsSatisfiedBy()", "full_signature": "@Test public void testIsSatisfiedBy()", "class_method_signature": "MyPresentationPolicyTest.testIsSatisfiedBy()", "testcase": true, "constructor": false, "invocations": ["getObjectFromXML", "getResourceAsStream", "getClass", "getPresentationTokenDescription", "getObjectFromXML", "getResourceAsStream", "getClass", "get", "getPresentationPolicy", "assertTrue", "isSatisfiedBy"]}, "focal_class": {"identifier": "MyPresentationPolicy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PresentationPolicy policy;", "modifier": "private final", "type": "PresentationPolicy", "declarator": "policy", "var_name": "policy"}, {"original_string": "private final static Logger logger = Logger.getLogger(MyPresentationPolicy.class.getName());", "modifier": "private final static", "type": "Logger", "declarator": "logger = Logger.getLogger(MyPresentationPolicy.class.getName())", "var_name": "logger"}, {"original_string": "static final Set<URI> admissiblePredicatesForSimpleProof = new HashSet<URI>();", "modifier": "static final", "type": "Set<URI>", "declarator": "admissiblePredicatesForSimpleProof = new HashSet<URI>()", "var_name": "admissiblePredicatesForSimpleProof"}], "methods": [{"identifier": "MyPresentationPolicy", "parameters": "(PresentationPolicy policy)", "modifiers": "public", "return": "", "signature": " MyPresentationPolicy(PresentationPolicy policy)", "full_signature": "public  MyPresentationPolicy(PresentationPolicy policy)", "class_method_signature": "MyPresentationPolicy.MyPresentationPolicy(PresentationPolicy policy)", "testcase": false, "constructor": true}, {"identifier": "getPolicy", "parameters": "()", "modifiers": "public", "return": "PresentationPolicy", "signature": "PresentationPolicy getPolicy()", "full_signature": "public PresentationPolicy getPolicy()", "class_method_signature": "MyPresentationPolicy.getPolicy()", "testcase": false, "constructor": false}, {"identifier": "isSatisfiedBy", "parameters": "(PresentationTokenDescription ptd, TokenManager tk, KeyManager km)", "modifiers": "public", "return": "boolean", "signature": "boolean isSatisfiedBy(PresentationTokenDescription ptd, TokenManager tk, KeyManager km)", "full_signature": "public boolean isSatisfiedBy(PresentationTokenDescription ptd, TokenManager tk, KeyManager km)", "class_method_signature": "MyPresentationPolicy.isSatisfiedBy(PresentationTokenDescription ptd, TokenManager tk, KeyManager km)", "testcase": false, "constructor": false}, {"identifier": "pseudonymListEquals", "parameters": "(List<PseudonymInToken> lhs, List<PseudonymInPolicy> rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean pseudonymListEquals(List<PseudonymInToken> lhs, List<PseudonymInPolicy> rhs)", "full_signature": "private boolean pseudonymListEquals(List<PseudonymInToken> lhs, List<PseudonymInPolicy> rhs)", "class_method_signature": "MyPresentationPolicy.pseudonymListEquals(List<PseudonymInToken> lhs, List<PseudonymInPolicy> rhs)", "testcase": false, "constructor": false}, {"identifier": "myequals", "parameters": "(Object lhs, Object rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean myequals(Object lhs, Object rhs)", "full_signature": "private boolean myequals(Object lhs, Object rhs)", "class_method_signature": "MyPresentationPolicy.myequals(Object lhs, Object rhs)", "testcase": false, "constructor": false}, {"identifier": "myArrayEquals", "parameters": "(byte[] lhs, byte[] rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean myArrayEquals(byte[] lhs, byte[] rhs)", "full_signature": "private boolean myArrayEquals(byte[] lhs, byte[] rhs)", "class_method_signature": "MyPresentationPolicy.myArrayEquals(byte[] lhs, byte[] rhs)", "testcase": false, "constructor": false}, {"identifier": "predicatesEquals", "parameters": "(List<AttributePredicate> lhs, List<AttributePredicate> rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean predicatesEquals(List<AttributePredicate> lhs, List<AttributePredicate> rhs)", "full_signature": "private boolean predicatesEquals(List<AttributePredicate> lhs, List<AttributePredicate> rhs)", "class_method_signature": "MyPresentationPolicy.predicatesEquals(List<AttributePredicate> lhs, List<AttributePredicate> rhs)", "testcase": false, "constructor": false}, {"identifier": "predicateEquals", "parameters": "(AttributePredicate lhs, AttributePredicate rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean predicateEquals(AttributePredicate lhs, AttributePredicate rhs)", "full_signature": "private boolean predicateEquals(AttributePredicate lhs, AttributePredicate rhs)", "class_method_signature": "MyPresentationPolicy.predicateEquals(AttributePredicate lhs, AttributePredicate rhs)", "testcase": false, "constructor": false}, {"identifier": "constantValueEquals", "parameters": "(Object rhsObj, Object lhsObj, URI function)", "modifiers": "private", "return": "boolean", "signature": "boolean constantValueEquals(Object rhsObj, Object lhsObj, URI function)", "full_signature": "private boolean constantValueEquals(Object rhsObj, Object lhsObj, URI function)", "class_method_signature": "MyPresentationPolicy.constantValueEquals(Object rhsObj, Object lhsObj, URI function)", "testcase": false, "constructor": false}, {"identifier": "attributeInPredicateEquals", "parameters": "(AttributePredicate.Attribute rhs,\n      AttributePredicate.Attribute lhs)", "modifiers": "private", "return": "boolean", "signature": "boolean attributeInPredicateEquals(AttributePredicate.Attribute rhs,\n      AttributePredicate.Attribute lhs)", "full_signature": "private boolean attributeInPredicateEquals(AttributePredicate.Attribute rhs,\n      AttributePredicate.Attribute lhs)", "class_method_signature": "MyPresentationPolicy.attributeInPredicateEquals(AttributePredicate.Attribute rhs,\n      AttributePredicate.Attribute lhs)", "testcase": false, "constructor": false}, {"identifier": "credentialsEquals", "parameters": "(List<CredentialInToken> lhs, List<CredentialInPolicy> rhs,\n                                    KeyManager keyManager)", "modifiers": "private", "return": "boolean", "signature": "boolean credentialsEquals(List<CredentialInToken> lhs, List<CredentialInPolicy> rhs,\n                                    KeyManager keyManager)", "full_signature": "private boolean credentialsEquals(List<CredentialInToken> lhs, List<CredentialInPolicy> rhs,\n                                    KeyManager keyManager)", "class_method_signature": "MyPresentationPolicy.credentialsEquals(List<CredentialInToken> lhs, List<CredentialInPolicy> rhs,\n                                    KeyManager keyManager)", "testcase": false, "constructor": false}, {"identifier": "credentialEquals", "parameters": "(CredentialInToken lhs, CredentialInPolicy rhs, KeyManager keyManager)", "modifiers": "private", "return": "boolean", "signature": "boolean credentialEquals(CredentialInToken lhs, CredentialInPolicy rhs, KeyManager keyManager)", "full_signature": "private boolean credentialEquals(CredentialInToken lhs, CredentialInPolicy rhs, KeyManager keyManager)", "class_method_signature": "MyPresentationPolicy.credentialEquals(CredentialInToken lhs, CredentialInPolicy rhs, KeyManager keyManager)", "testcase": false, "constructor": false}, {"identifier": "checkIssuerParameterCredentialSpecConsistency", "parameters": "(URI issuerParametersUID,\n      URI credentialSpecUID, KeyManager keyManager)", "modifiers": "private", "return": "boolean", "signature": "boolean checkIssuerParameterCredentialSpecConsistency(URI issuerParametersUID,\n      URI credentialSpecUID, KeyManager keyManager)", "full_signature": "private boolean checkIssuerParameterCredentialSpecConsistency(URI issuerParametersUID,\n      URI credentialSpecUID, KeyManager keyManager)", "class_method_signature": "MyPresentationPolicy.checkIssuerParameterCredentialSpecConsistency(URI issuerParametersUID,\n      URI credentialSpecUID, KeyManager keyManager)", "testcase": false, "constructor": false}, {"identifier": "verifierDrivenRevocationListEquals", "parameters": "(List<VerifierDrivenRevocationInToken> lhs,\n      List<VerifierDrivenRevocationInPolicy> rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean verifierDrivenRevocationListEquals(List<VerifierDrivenRevocationInToken> lhs,\n      List<VerifierDrivenRevocationInPolicy> rhs)", "full_signature": "private boolean verifierDrivenRevocationListEquals(List<VerifierDrivenRevocationInToken> lhs,\n      List<VerifierDrivenRevocationInPolicy> rhs)", "class_method_signature": "MyPresentationPolicy.verifierDrivenRevocationListEquals(List<VerifierDrivenRevocationInToken> lhs,\n      List<VerifierDrivenRevocationInPolicy> rhs)", "testcase": false, "constructor": false}, {"identifier": "verifierDrivenRevocationEquals", "parameters": "(VerifierDrivenRevocationInToken lhs,\n      VerifierDrivenRevocationInPolicy rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean verifierDrivenRevocationEquals(VerifierDrivenRevocationInToken lhs,\n      VerifierDrivenRevocationInPolicy rhs)", "full_signature": "private boolean verifierDrivenRevocationEquals(VerifierDrivenRevocationInToken lhs,\n      VerifierDrivenRevocationInPolicy rhs)", "class_method_signature": "MyPresentationPolicy.verifierDrivenRevocationEquals(VerifierDrivenRevocationInToken lhs,\n      VerifierDrivenRevocationInPolicy rhs)", "testcase": false, "constructor": false}, {"identifier": "attributesInRevocationEquals", "parameters": "(List<AttributeInRevocation> lhs,\n      List<AttributeInRevocation> rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean attributesInRevocationEquals(List<AttributeInRevocation> lhs,\n      List<AttributeInRevocation> rhs)", "full_signature": "private boolean attributesInRevocationEquals(List<AttributeInRevocation> lhs,\n      List<AttributeInRevocation> rhs)", "class_method_signature": "MyPresentationPolicy.attributesInRevocationEquals(List<AttributeInRevocation> lhs,\n      List<AttributeInRevocation> rhs)", "testcase": false, "constructor": false}, {"identifier": "attributeInRevocationEquals", "parameters": "(AttributeInRevocation lhs, AttributeInRevocation rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean attributeInRevocationEquals(AttributeInRevocation lhs, AttributeInRevocation rhs)", "full_signature": "private boolean attributeInRevocationEquals(AttributeInRevocation lhs, AttributeInRevocation rhs)", "class_method_signature": "MyPresentationPolicy.attributeInRevocationEquals(AttributeInRevocation lhs, AttributeInRevocation rhs)", "testcase": false, "constructor": false}, {"identifier": "attributesEquals", "parameters": "(List<AttributeInToken> lhs, List<AttributeInPolicy> rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean attributesEquals(List<AttributeInToken> lhs, List<AttributeInPolicy> rhs)", "full_signature": "private boolean attributesEquals(List<AttributeInToken> lhs, List<AttributeInPolicy> rhs)", "class_method_signature": "MyPresentationPolicy.attributesEquals(List<AttributeInToken> lhs, List<AttributeInPolicy> rhs)", "testcase": false, "constructor": false}, {"identifier": "attributeEquals", "parameters": "(AttributeInToken lhs, AttributeInPolicy rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean attributeEquals(AttributeInToken lhs, AttributeInPolicy rhs)", "full_signature": "private boolean attributeEquals(AttributeInToken lhs, AttributeInPolicy rhs)", "class_method_signature": "MyPresentationPolicy.attributeEquals(AttributeInToken lhs, AttributeInPolicy rhs)", "testcase": false, "constructor": false}, {"identifier": "issuerAmongAlternatives", "parameters": "(List<IssuerParametersUID> lhsList, URI rhsIssuerParams,\n      URI rhsRevocationInfo)", "modifiers": "private", "return": "boolean", "signature": "boolean issuerAmongAlternatives(List<IssuerParametersUID> lhsList, URI rhsIssuerParams,\n      URI rhsRevocationInfo)", "full_signature": "private boolean issuerAmongAlternatives(List<IssuerParametersUID> lhsList, URI rhsIssuerParams,\n      URI rhsRevocationInfo)", "class_method_signature": "MyPresentationPolicy.issuerAmongAlternatives(List<IssuerParametersUID> lhsList, URI rhsIssuerParams,\n      URI rhsRevocationInfo)", "testcase": false, "constructor": false}, {"identifier": "pseudonymEquals", "parameters": "(PseudonymInToken lhs, PseudonymInPolicy pseudonymInPolicy)", "modifiers": "private", "return": "boolean", "signature": "boolean pseudonymEquals(PseudonymInToken lhs, PseudonymInPolicy pseudonymInPolicy)", "full_signature": "private boolean pseudonymEquals(PseudonymInToken lhs, PseudonymInPolicy pseudonymInPolicy)", "class_method_signature": "MyPresentationPolicy.pseudonymEquals(PseudonymInToken lhs, PseudonymInPolicy pseudonymInPolicy)", "testcase": false, "constructor": false}, {"identifier": "messageEquals", "parameters": "(Message lhs, Message rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean messageEquals(Message lhs, Message rhs)", "full_signature": "private boolean messageEquals(Message lhs, Message rhs)", "class_method_signature": "MyPresentationPolicy.messageEquals(Message lhs, Message rhs)", "testcase": false, "constructor": false}, {"identifier": "friendlyEquals", "parameters": "(List<FriendlyDescription> lhs,\n      List<FriendlyDescription> rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean friendlyEquals(List<FriendlyDescription> lhs,\n      List<FriendlyDescription> rhs)", "full_signature": "private boolean friendlyEquals(List<FriendlyDescription> lhs,\n      List<FriendlyDescription> rhs)", "class_method_signature": "MyPresentationPolicy.friendlyEquals(List<FriendlyDescription> lhs,\n      List<FriendlyDescription> rhs)", "testcase": false, "constructor": false}, {"identifier": "friendlyEquals", "parameters": "(FriendlyDescription l, FriendlyDescription r)", "modifiers": "private", "return": "boolean", "signature": "boolean friendlyEquals(FriendlyDescription l, FriendlyDescription r)", "full_signature": "private boolean friendlyEquals(FriendlyDescription l, FriendlyDescription r)", "class_method_signature": "MyPresentationPolicy.friendlyEquals(FriendlyDescription l, FriendlyDescription r)", "testcase": false, "constructor": false}, {"identifier": "applicationDataEquals", "parameters": "(ApplicationData lhs, ApplicationData rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean applicationDataEquals(ApplicationData lhs, ApplicationData rhs)", "full_signature": "private boolean applicationDataEquals(ApplicationData lhs, ApplicationData rhs)", "class_method_signature": "MyPresentationPolicy.applicationDataEquals(ApplicationData lhs, ApplicationData rhs)", "testcase": false, "constructor": false}, {"identifier": "verifierIdentityEquals", "parameters": "(VerifierIdentity lhs, VerifierIdentity rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean verifierIdentityEquals(VerifierIdentity lhs, VerifierIdentity rhs)", "full_signature": "private boolean verifierIdentityEquals(VerifierIdentity lhs, VerifierIdentity rhs)", "class_method_signature": "MyPresentationPolicy.verifierIdentityEquals(VerifierIdentity lhs, VerifierIdentity rhs)", "testcase": false, "constructor": false}, {"identifier": "getPolicyUri", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI getPolicyUri()", "full_signature": "public URI getPolicyUri()", "class_method_signature": "MyPresentationPolicy.getPolicyUri()", "testcase": false, "constructor": false}, {"identifier": "findCredentialAssignment", "parameters": "(String username, \n      CredentialManager credentialManager, KeyManager km)", "modifiers": "public", "return": "List<ArrayList<MyCredentialDescription>>", "signature": "List<ArrayList<MyCredentialDescription>> findCredentialAssignment(String username, \n      CredentialManager credentialManager, KeyManager km)", "full_signature": "public List<ArrayList<MyCredentialDescription>> findCredentialAssignment(String username, \n      CredentialManager credentialManager, KeyManager km)", "class_method_signature": "MyPresentationPolicy.findCredentialAssignment(String username, \n      CredentialManager credentialManager, KeyManager km)", "testcase": false, "constructor": false}, {"identifier": "findPseudonymAssignment", "parameters": "(\n    List<List<PseudonymWithMetadata>> pseudonymChoice,\n    List<MyCredentialDescription> credAssign)", "modifiers": "public", "return": "List<ArrayList<PseudonymWithMetadata>>", "signature": "List<ArrayList<PseudonymWithMetadata>> findPseudonymAssignment(\n    List<List<PseudonymWithMetadata>> pseudonymChoice,\n    List<MyCredentialDescription> credAssign)", "full_signature": "public List<ArrayList<PseudonymWithMetadata>> findPseudonymAssignment(\n    List<List<PseudonymWithMetadata>> pseudonymChoice,\n    List<MyCredentialDescription> credAssign)", "class_method_signature": "MyPresentationPolicy.findPseudonymAssignment(\n    List<List<PseudonymWithMetadata>> pseudonymChoice,\n    List<MyCredentialDescription> credAssign)", "testcase": false, "constructor": false}, {"identifier": "filterSecrets", "parameters": "(List<ArrayList<PseudonymWithMetadata>> pseudonymAssignment,\n      List<MyCredentialDescription> credAssign)", "modifiers": "public", "return": "boolean", "signature": "boolean filterSecrets(List<ArrayList<PseudonymWithMetadata>> pseudonymAssignment,\n      List<MyCredentialDescription> credAssign)", "full_signature": "public boolean filterSecrets(List<ArrayList<PseudonymWithMetadata>> pseudonymAssignment,\n      List<MyCredentialDescription> credAssign)", "class_method_signature": "MyPresentationPolicy.filterSecrets(List<ArrayList<PseudonymWithMetadata>> pseudonymAssignment,\n      List<MyCredentialDescription> credAssign)", "testcase": false, "constructor": false}, {"identifier": "filterPredicates", "parameters": "(\n      LinkedList<ArrayList<MyCredentialDescription>> credentialAssignments,\n      Map<URI, Integer> credentialAliasList, List<AttributePredicate> attributePredicates)", "modifiers": "private", "return": "void", "signature": "void filterPredicates(\n      LinkedList<ArrayList<MyCredentialDescription>> credentialAssignments,\n      Map<URI, Integer> credentialAliasList, List<AttributePredicate> attributePredicates)", "full_signature": "private void filterPredicates(\n      LinkedList<ArrayList<MyCredentialDescription>> credentialAssignments,\n      Map<URI, Integer> credentialAliasList, List<AttributePredicate> attributePredicates)", "class_method_signature": "MyPresentationPolicy.filterPredicates(\n      LinkedList<ArrayList<MyCredentialDescription>> credentialAssignments,\n      Map<URI, Integer> credentialAliasList, List<AttributePredicate> attributePredicates)", "testcase": false, "constructor": false}, {"identifier": "satisfiesPredicate", "parameters": "(ArrayList<MyCredentialDescription> candidateAssignment,\n      Map<URI, Integer> credentialAliasList, List<AttributePredicate> attributePredicates)", "modifiers": "private", "return": "boolean", "signature": "boolean satisfiesPredicate(ArrayList<MyCredentialDescription> candidateAssignment,\n      Map<URI, Integer> credentialAliasList, List<AttributePredicate> attributePredicates)", "full_signature": "private boolean satisfiesPredicate(ArrayList<MyCredentialDescription> candidateAssignment,\n      Map<URI, Integer> credentialAliasList, List<AttributePredicate> attributePredicates)", "class_method_signature": "MyPresentationPolicy.satisfiesPredicate(ArrayList<MyCredentialDescription> candidateAssignment,\n      Map<URI, Integer> credentialAliasList, List<AttributePredicate> attributePredicates)", "testcase": false, "constructor": false}, {"identifier": "getCredentialsMatchingSpec", "parameters": "(String username, \n      CredentialManager credentialManager, KeyManager km, CredentialInPolicy c)", "modifiers": "private", "return": "LinkedList<MyCredentialDescription>", "signature": "LinkedList<MyCredentialDescription> getCredentialsMatchingSpec(String username, \n      CredentialManager credentialManager, KeyManager km, CredentialInPolicy c)", "full_signature": "private LinkedList<MyCredentialDescription> getCredentialsMatchingSpec(String username, \n      CredentialManager credentialManager, KeyManager km, CredentialInPolicy c)", "class_method_signature": "MyPresentationPolicy.getCredentialsMatchingSpec(String username, \n      CredentialManager credentialManager, KeyManager km, CredentialInPolicy c)", "testcase": false, "constructor": false}, {"identifier": "reverseLookupTable", "parameters": "(List<T> list)", "modifiers": "private", "return": "Map<T, Integer>", "signature": "Map<T, Integer> reverseLookupTable(List<T> list)", "full_signature": "private Map<T, Integer> reverseLookupTable(List<T> list)", "class_method_signature": "MyPresentationPolicy.reverseLookupTable(List<T> list)", "testcase": false, "constructor": false}, {"identifier": "generateTokenDescription", "parameters": "(\n      ArrayList<MyCredentialDescription> assignment, ContextGenerator contextGenerator)", "modifiers": "public", "return": "PresentationTokenDescription", "signature": "PresentationTokenDescription generateTokenDescription(\n      ArrayList<MyCredentialDescription> assignment, ContextGenerator contextGenerator)", "full_signature": "public PresentationTokenDescription generateTokenDescription(\n      ArrayList<MyCredentialDescription> assignment, ContextGenerator contextGenerator)", "class_method_signature": "MyPresentationPolicy.generateTokenDescription(\n      ArrayList<MyCredentialDescription> assignment, ContextGenerator contextGenerator)", "testcase": false, "constructor": false}, {"identifier": "checkIfSimpleProofAdmissible", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean checkIfSimpleProofAdmissible()", "full_signature": "private boolean checkIfSimpleProofAdmissible()", "class_method_signature": "MyPresentationPolicy.checkIfSimpleProofAdmissible()", "testcase": false, "constructor": false}, {"identifier": "populateVerifierDrivenRevocation", "parameters": "(PresentationTokenDescription ptd)", "modifiers": "private", "return": "void", "signature": "void populateVerifierDrivenRevocation(PresentationTokenDescription ptd)", "full_signature": "private void populateVerifierDrivenRevocation(PresentationTokenDescription ptd)", "class_method_signature": "MyPresentationPolicy.populateVerifierDrivenRevocation(PresentationTokenDescription ptd)", "testcase": false, "constructor": false}, {"identifier": "getCredentialAliasList", "parameters": "()", "modifiers": "private", "return": "List<URI>", "signature": "List<URI> getCredentialAliasList()", "full_signature": "private List<URI> getCredentialAliasList()", "class_method_signature": "MyPresentationPolicy.getCredentialAliasList()", "testcase": false, "constructor": false}, {"identifier": "populateCredentialsInTokenDescription", "parameters": "(PresentationTokenDescription output,\n      ArrayList<MyCredentialDescription> assignments, List<URI> credentialAliasList)", "modifiers": "private", "return": "void", "signature": "void populateCredentialsInTokenDescription(PresentationTokenDescription output,\n      ArrayList<MyCredentialDescription> assignments, List<URI> credentialAliasList)", "full_signature": "private void populateCredentialsInTokenDescription(PresentationTokenDescription output,\n      ArrayList<MyCredentialDescription> assignments, List<URI> credentialAliasList)", "class_method_signature": "MyPresentationPolicy.populateCredentialsInTokenDescription(PresentationTokenDescription output,\n      ArrayList<MyCredentialDescription> assignments, List<URI> credentialAliasList)", "testcase": false, "constructor": false}, {"identifier": "locateIssuerParameterOrThrow", "parameters": "(CredentialInPolicy credInPolicy, URI rhs)", "modifiers": "private", "return": "IssuerParametersUID", "signature": "IssuerParametersUID locateIssuerParameterOrThrow(CredentialInPolicy credInPolicy, URI rhs)", "full_signature": "private IssuerParametersUID locateIssuerParameterOrThrow(CredentialInPolicy credInPolicy, URI rhs)", "class_method_signature": "MyPresentationPolicy.locateIssuerParameterOrThrow(CredentialInPolicy credInPolicy, URI rhs)", "testcase": false, "constructor": false}, {"identifier": "computeInspectorChoice", "parameters": "(KeyManager keyManager)", "modifiers": "public", "return": "List<List<MyInspectableAttribute>>", "signature": "List<List<MyInspectableAttribute>> computeInspectorChoice(KeyManager keyManager)", "full_signature": "public List<List<MyInspectableAttribute>> computeInspectorChoice(KeyManager keyManager)", "class_method_signature": "MyPresentationPolicy.computeInspectorChoice(KeyManager keyManager)", "testcase": false, "constructor": false}, {"identifier": "computePseudonymChoice", "parameters": "(String username, \n      CredentialManager credentialManager, ContextGenerator contextGenerator,\n      EvidenceGenerationOrchestration evidenceOrchestration)", "modifiers": "public", "return": "List<List<PseudonymWithMetadata>>", "signature": "List<List<PseudonymWithMetadata>> computePseudonymChoice(String username, \n      CredentialManager credentialManager, ContextGenerator contextGenerator,\n      EvidenceGenerationOrchestration evidenceOrchestration)", "full_signature": "public List<List<PseudonymWithMetadata>> computePseudonymChoice(String username, \n      CredentialManager credentialManager, ContextGenerator contextGenerator,\n      EvidenceGenerationOrchestration evidenceOrchestration)", "class_method_signature": "MyPresentationPolicy.computePseudonymChoice(String username, \n      CredentialManager credentialManager, ContextGenerator contextGenerator,\n      EvidenceGenerationOrchestration evidenceOrchestration)", "testcase": false, "constructor": false}, {"identifier": "filterPseudonymsByValue", "parameters": "(\n    List<PseudonymWithMetadata> list, byte[] pseudonymValue)", "modifiers": "private", "return": "List<PseudonymWithMetadata>", "signature": "List<PseudonymWithMetadata> filterPseudonymsByValue(\n    List<PseudonymWithMetadata> list, byte[] pseudonymValue)", "full_signature": "private List<PseudonymWithMetadata> filterPseudonymsByValue(\n    List<PseudonymWithMetadata> list, byte[] pseudonymValue)", "class_method_signature": "MyPresentationPolicy.filterPseudonymsByValue(\n    List<PseudonymWithMetadata> list, byte[] pseudonymValue)", "testcase": false, "constructor": false}, {"identifier": "getMessage", "parameters": "()", "modifiers": "public", "return": "Message", "signature": "Message getMessage()", "full_signature": "public Message getMessage()", "class_method_signature": "MyPresentationPolicy.getMessage()", "testcase": false, "constructor": false}, {"identifier": "checkEstablishedPseudonyms", "parameters": "(PresentationTokenDescription td,\n      TokenManager tk)", "modifiers": "private", "return": "boolean", "signature": "boolean checkEstablishedPseudonyms(PresentationTokenDescription td,\n      TokenManager tk)", "full_signature": "private boolean checkEstablishedPseudonyms(PresentationTokenDescription td,\n      TokenManager tk)", "class_method_signature": "MyPresentationPolicy.checkEstablishedPseudonyms(PresentationTokenDescription td,\n      TokenManager tk)", "testcase": false, "constructor": false}, {"identifier": "updateIssuerToRevocationInformationUidMap", "parameters": "(Map<URI, URI> toUpdate)", "modifiers": "public", "return": "void", "signature": "void updateIssuerToRevocationInformationUidMap(Map<URI, URI> toUpdate)", "full_signature": "public void updateIssuerToRevocationInformationUidMap(Map<URI, URI> toUpdate)", "class_method_signature": "MyPresentationPolicy.updateIssuerToRevocationInformationUidMap(Map<URI, URI> toUpdate)", "testcase": false, "constructor": false}], "file": "Code/core-abce/abce-components/src/main/java-ibm-only/eu/abc4trust/util/MyPresentationPolicy.java"}, "focal_method": {"identifier": "isSatisfiedBy", "parameters": "(PresentationTokenDescription ptd, TokenManager tk, KeyManager km)", "modifiers": "public", "return": "boolean", "body": "public boolean isSatisfiedBy(PresentationTokenDescription ptd, TokenManager tk, KeyManager km) {\n    if (!ptd.getPolicyUID().equals(policy.getPolicyUID())) {\n      logger.warning(\"Different policyUIDs.\");\n      return false;\n    }\n    if (!messageEquals(ptd.getMessage(), policy.getMessage())) {\n      logger.warning(\"Messages don't match.\");\n      return false;\n    }\n    if (!pseudonymListEquals(ptd.getPseudonym(), policy.getPseudonym())) {\n      logger.warning(\"Pseudonyms don't match\");\n      return false;\n    }\n    if (!credentialsEquals(ptd.getCredential(), policy.getCredential(), km)) {\n      logger.warning(\"Credentials don't match\");\n      return false;\n    }\n    if (!predicatesEquals(ptd.getAttributePredicate(), policy.getAttributePredicate())) {\n      logger.warning(\"Predicates don't match.\");\n      return false;\n    }\n    if (!verifierDrivenRevocationListEquals(ptd.getVerifierDrivenRevocation(),\n        policy.getVerifierDrivenRevocation())) {\n      logger.warning(\"Verifier Driven Revocation don't match\");\n      return false;\n    }\n    if(policy.isAllowSimpleProof() == false && ptd.isUsesSimpleProof()){\n      logger.warning(\"Policy does not allow simple proofs.\");\n      return false;\n    }\n    if(ptd.isUsesSimpleProof() && ! checkIfSimpleProofAdmissible()) {\n      logger.warning(\"Policy is too complex for simple proof flag.\");\n    }\n    \n    if (tk != null) {\n      return checkEstablishedPseudonyms(ptd, tk);\n    } else {\n      return true;\n    }\n  }", "signature": "boolean isSatisfiedBy(PresentationTokenDescription ptd, TokenManager tk, KeyManager km)", "full_signature": "public boolean isSatisfiedBy(PresentationTokenDescription ptd, TokenManager tk, KeyManager km)", "class_method_signature": "MyPresentationPolicy.isSatisfiedBy(PresentationTokenDescription ptd, TokenManager tk, KeyManager km)", "testcase": false, "constructor": false, "invocations": ["equals", "getPolicyUID", "getPolicyUID", "warning", "messageEquals", "getMessage", "getMessage", "warning", "pseudonymListEquals", "getPseudonym", "getPseudonym", "warning", "credentialsEquals", "getCredential", "getCredential", "warning", "predicatesEquals", "getAttributePredicate", "getAttributePredicate", "warning", "verifierDrivenRevocationListEquals", "getVerifierDrivenRevocation", "getVerifierDrivenRevocation", "warning", "isAllowSimpleProof", "isUsesSimpleProof", "warning", "isUsesSimpleProof", "checkIfSimpleProofAdmissible", "warning", "checkEstablishedPseudonyms"]}, "repository": {"repo_id": 7687890, "url": "https://github.com/p2abcengine/p2abcengine", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 71, "size": 11790, "license": "licensed"}}