{"test_class": {"identifier": "CompressionUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "dependencies/i18n/src/test/java/org/apache/abdera/i18n/text/io/CompressionUtilTest.java"}, "test_case": {"identifier": "getCodecWithTurkishLocale", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCodecWithTurkishLocale (){\n        Locale.setDefault(new Locale(\"tr\", \"\", \"\"));\n        CompressionCodec codec = CompressionUtil.getCodec(\"gzip\");\n        assertEquals(\"GZIP\", codec.toString());\n    }", "signature": "void getCodecWithTurkishLocale()", "full_signature": "@Test public void getCodecWithTurkishLocale()", "class_method_signature": "CompressionUtilTest.getCodecWithTurkishLocale()", "testcase": true, "constructor": false, "invocations": ["setDefault", "getCodec", "assertEquals", "toString"]}, "focal_class": {"identifier": "CompressionUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getCodec", "parameters": "(String name)", "modifiers": "public static", "return": "CompressionCodec", "signature": "CompressionCodec getCodec(String name)", "full_signature": "public static CompressionCodec getCodec(String name)", "class_method_signature": "CompressionUtil.getCodec(String name)", "testcase": false, "constructor": false}, {"identifier": "getEncodedOutputStream", "parameters": "(OutputStream out, CompressionCodec encoding)", "modifiers": "public static", "return": "OutputStream", "signature": "OutputStream getEncodedOutputStream(OutputStream out, CompressionCodec encoding)", "full_signature": "public static OutputStream getEncodedOutputStream(OutputStream out, CompressionCodec encoding)", "class_method_signature": "CompressionUtil.getEncodedOutputStream(OutputStream out, CompressionCodec encoding)", "testcase": false, "constructor": false}, {"identifier": "getEncodedOutputStream", "parameters": "(OutputStream out, CompressionCodec... encodings)", "modifiers": "public static", "return": "OutputStream", "signature": "OutputStream getEncodedOutputStream(OutputStream out, CompressionCodec... encodings)", "full_signature": "public static OutputStream getEncodedOutputStream(OutputStream out, CompressionCodec... encodings)", "class_method_signature": "CompressionUtil.getEncodedOutputStream(OutputStream out, CompressionCodec... encodings)", "testcase": false, "constructor": false}, {"identifier": "getDecodingInputStream", "parameters": "(InputStream in, CompressionCodec encoding)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getDecodingInputStream(InputStream in, CompressionCodec encoding)", "full_signature": "public static InputStream getDecodingInputStream(InputStream in, CompressionCodec encoding)", "class_method_signature": "CompressionUtil.getDecodingInputStream(InputStream in, CompressionCodec encoding)", "testcase": false, "constructor": false}, {"identifier": "getDecodingInputStream", "parameters": "(InputStream in, CompressionCodec... encoding)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getDecodingInputStream(InputStream in, CompressionCodec... encoding)", "full_signature": "public static InputStream getDecodingInputStream(InputStream in, CompressionCodec... encoding)", "class_method_signature": "CompressionUtil.getDecodingInputStream(InputStream in, CompressionCodec... encoding)", "testcase": false, "constructor": false}, {"identifier": "getDecodingInputStream", "parameters": "(InputStream in, String ce)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getDecodingInputStream(InputStream in, String ce)", "full_signature": "public static InputStream getDecodingInputStream(InputStream in, String ce)", "class_method_signature": "CompressionUtil.getDecodingInputStream(InputStream in, String ce)", "testcase": false, "constructor": false}, {"identifier": "unquote", "parameters": "(String s)", "modifiers": "private static", "return": "String", "signature": "String unquote(String s)", "full_signature": "private static String unquote(String s)", "class_method_signature": "CompressionUtil.unquote(String s)", "testcase": false, "constructor": false}, {"identifier": "splitAndTrim", "parameters": "(String value, String delim, boolean unquote)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitAndTrim(String value, String delim, boolean unquote)", "full_signature": "public static String[] splitAndTrim(String value, String delim, boolean unquote)", "class_method_signature": "CompressionUtil.splitAndTrim(String value, String delim, boolean unquote)", "testcase": false, "constructor": false}], "file": "dependencies/i18n/src/main/java/org/apache/abdera/i18n/text/io/CompressionUtil.java"}, "focal_method": {"identifier": "getCodec", "parameters": "(String name)", "modifiers": "public static", "return": "CompressionCodec", "body": "public static CompressionCodec getCodec(String name) {\n        CompressionCodec codec = null;\n        if (name == null)\n            return null;\n        try {\n            codec = CompressionCodec.valueOf(name.toUpperCase(Locale.ENGLISH).trim());\n        } catch (Exception e) {\n        }\n        return codec;\n    }", "signature": "CompressionCodec getCodec(String name)", "full_signature": "public static CompressionCodec getCodec(String name)", "class_method_signature": "CompressionUtil.getCodec(String name)", "testcase": false, "constructor": false, "invocations": ["valueOf", "trim", "toUpperCase"]}, "repository": {"repo_id": 206482, "url": "https://github.com/apache/abdera", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 15, "size": 12255, "license": "licensed"}}