{"test_class": {"identifier": "SinkProcessorFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-core/src/test/java/org/apache/flume/sink/SinkProcessorFactoryTest.java"}, "test_case": {"identifier": "testInstantiatingLoadBalancingSinkProcessor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInstantiatingLoadBalancingSinkProcessor() {\n    Context context = new Context();\n    context.put(\"type\", LoadBalancingSinkProcessor.class.getName());\n    context.put(\"selector\", \"random\");\n    SinkFactory sf = new DefaultSinkFactory();\n    List<Sink> sinks = new ArrayList<Sink>();\n    sinks.add(sf.create(\"sink1\", \"avro\"));\n    sinks.add(sf.create(\"sink2\", \"avro\"));\n    SinkProcessor sp = SinkProcessorFactory.getProcessor(context, sinks);\n    context.put(\"type\", \"load_balance\");\n    SinkProcessor sp2 = SinkProcessorFactory.getProcessor(context, sinks);\n    Assert.assertEquals(sp.getClass(), sp2.getClass());\n  }", "signature": "void testInstantiatingLoadBalancingSinkProcessor()", "full_signature": "@Test public void testInstantiatingLoadBalancingSinkProcessor()", "class_method_signature": "SinkProcessorFactoryTest.testInstantiatingLoadBalancingSinkProcessor()", "testcase": true, "constructor": false, "invocations": ["put", "getName", "put", "add", "create", "add", "create", "getProcessor", "put", "getProcessor", "assertEquals", "getClass", "getClass"]}, "focal_class": {"identifier": "SinkProcessorFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n      .getLogger(SinkProcessorFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n      .getLogger(SinkProcessorFactory.class)", "var_name": "logger"}, {"original_string": "private static final String TYPE = \"type\";", "modifier": "private static final", "type": "String", "declarator": "TYPE = \"type\"", "var_name": "TYPE"}], "methods": [{"identifier": "getProcessor", "parameters": "(Context context, List<Sink> sinks)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "SinkProcessor", "signature": "SinkProcessor getProcessor(Context context, List<Sink> sinks)", "full_signature": "@SuppressWarnings(\"unchecked\") public static SinkProcessor getProcessor(Context context, List<Sink> sinks)", "class_method_signature": "SinkProcessorFactory.getProcessor(Context context, List<Sink> sinks)", "testcase": false, "constructor": false}, {"identifier": "getProcessor", "parameters": "(ComponentConfiguration conf,\n      List<Sink> sinks)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "SinkProcessor", "signature": "SinkProcessor getProcessor(ComponentConfiguration conf,\n      List<Sink> sinks)", "full_signature": "@SuppressWarnings(\"unchecked\") public static SinkProcessor getProcessor(ComponentConfiguration conf,\n      List<Sink> sinks)", "class_method_signature": "SinkProcessorFactory.getProcessor(ComponentConfiguration conf,\n      List<Sink> sinks)", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/sink/SinkProcessorFactory.java"}, "focal_method": {"identifier": "getProcessor", "parameters": "(Context context, List<Sink> sinks)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "SinkProcessor", "body": "@SuppressWarnings(\"unchecked\")\n  public static SinkProcessor getProcessor(Context context, List<Sink> sinks) {\n    Preconditions.checkNotNull(context);\n    Preconditions.checkNotNull(sinks);\n    Preconditions.checkArgument(!sinks.isEmpty());\n    Map<String, String> params = context.getParameters();\n    SinkProcessor processor;\n    String typeStr = params.get(TYPE);\n    SinkProcessorType type = SinkProcessorType.OTHER;\n    String processorClassName = typeStr;\n    try {\n      type = SinkProcessorType.valueOf(typeStr.toUpperCase(Locale.ENGLISH));\n    } catch (Exception ex) {\n      logger.warn(\"Sink Processor type {} is a custom type\", typeStr);\n    }\n\n    if (!type.equals(SinkProcessorType.OTHER)) {\n      processorClassName = type.getSinkProcessorClassName();\n    }\n\n    logger.debug(\"Creating instance of sink processor type {}, class {}\",\n            typeStr, processorClassName);\n    Class<? extends SinkProcessor> processorClass = null;\n    try {\n      processorClass = (Class<? extends SinkProcessor>) Class.forName(\n          processorClassName);\n    } catch (Exception ex) {\n      throw new FlumeException(\"Unable to load sink processor type: \" + typeStr\n          + \", class: \" + type.getSinkProcessorClassName(), ex);\n    }\n    try {\n      processor = processorClass.newInstance();\n    } catch (Exception e) {\n      throw new FlumeException(\"Unable to create sink processor, type: \" + typeStr\n          + \", class: \" + processorClassName, e);\n    }\n\n    processor.setSinks(sinks);\n    Configurables.configure(processor, context);\n    return processor;\n  }", "signature": "SinkProcessor getProcessor(Context context, List<Sink> sinks)", "full_signature": "@SuppressWarnings(\"unchecked\") public static SinkProcessor getProcessor(Context context, List<Sink> sinks)", "class_method_signature": "SinkProcessorFactory.getProcessor(Context context, List<Sink> sinks)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "checkArgument", "isEmpty", "getParameters", "get", "valueOf", "toUpperCase", "warn", "equals", "getSinkProcessorClassName", "debug", "forName", "getSinkProcessorClassName", "newInstance", "setSinks", "configure"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}