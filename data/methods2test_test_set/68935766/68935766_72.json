{"test_class": {"identifier": "SpigotMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final SuggestionProvider<CommandListenerWrapper> PROVIDER = (a, b) -> null;", "modifier": "static final", "type": "SuggestionProvider<CommandListenerWrapper>", "declarator": "PROVIDER = (a, b) -> null", "var_name": "PROVIDER"}, {"original_string": "CommandDispatcher<CommandSender> dispatcher = spy(new CommandDispatcher<>());", "modifier": "", "type": "CommandDispatcher<CommandSender>", "declarator": "dispatcher = spy(new CommandDispatcher<>())", "var_name": "dispatcher"}, {"original_string": "SpigotMapper mapper = spy(new SpigotMapper(dispatcher));", "modifier": "", "type": "SpigotMapper", "declarator": "mapper = spy(new SpigotMapper(dispatcher))", "var_name": "mapper"}, {"original_string": "CommandSender sender = mock(CommandSender.class);", "modifier": "", "type": "CommandSender", "declarator": "sender = mock(CommandSender.class)", "var_name": "sender"}, {"original_string": "CommandListenerWrapper listener = when(mock(CommandListenerWrapper.class).getBukkitSender()).thenReturn(sender).getMock();", "modifier": "", "type": "CommandListenerWrapper", "declarator": "listener = when(mock(CommandListenerWrapper.class).getBukkitSender()).thenReturn(sender).getMock()", "var_name": "listener"}], "file": "commons/src/test/java/com/karuslabs/commons/command/dispatcher/SpigotMapperTest.java"}, "test_case": {"identifier": "requirement", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void requirement() {\n        assertSame(SpigotMapper.TRUE, mapper.requirement(Literal.of(\"a\").requires(null).build()));\n        \n        Predicate<CommandSender> predicate = mock(Predicate.class);\n        mapper.requirement(Literal.of(\"a\").requires(predicate).build()).test(listener);\n        \n        verify(predicate).test(sender);\n    }", "signature": "void requirement()", "full_signature": "@Test void requirement()", "class_method_signature": "SpigotMapperTest.requirement()", "testcase": true, "constructor": false, "invocations": ["assertSame", "requirement", "build", "requires", "of", "mock", "test", "requirement", "build", "requires", "of", "test", "verify"]}, "focal_class": {"identifier": "SpigotMapper", "superclass": "extends Mapper<CommandSender, CommandListenerWrapper>", "interfaces": "", "fields": [{"original_string": "static final Map<ClientSuggestionProvider, SuggestionProvider<CommandListenerWrapper>> CLIENT_SIDE;", "modifier": "static final", "type": "Map<ClientSuggestionProvider, SuggestionProvider<CommandListenerWrapper>>", "declarator": "CLIENT_SIDE", "var_name": "CLIENT_SIDE"}, {"original_string": "private CommandDispatcher<CommandSender> dispatcher;", "modifier": "private", "type": "CommandDispatcher<CommandSender>", "declarator": "dispatcher", "var_name": "dispatcher"}], "methods": [{"identifier": "SpigotMapper", "parameters": "(CommandDispatcher<CommandSender> dispatcher)", "modifiers": "", "return": "", "signature": " SpigotMapper(CommandDispatcher<CommandSender> dispatcher)", "full_signature": "  SpigotMapper(CommandDispatcher<CommandSender> dispatcher)", "class_method_signature": "SpigotMapper.SpigotMapper(CommandDispatcher<CommandSender> dispatcher)", "testcase": false, "constructor": true}, {"identifier": "type", "parameters": "(ArgumentCommandNode<CommandSender, ?> command)", "modifiers": "@Override protected", "return": "ArgumentType<?>", "signature": "ArgumentType<?> type(ArgumentCommandNode<CommandSender, ?> command)", "full_signature": "@Override protected ArgumentType<?> type(ArgumentCommandNode<CommandSender, ?> command)", "class_method_signature": "SpigotMapper.type(ArgumentCommandNode<CommandSender, ?> command)", "testcase": false, "constructor": false}, {"identifier": "requirement", "parameters": "(CommandNode<CommandSender> command)", "modifiers": "@Override protected", "return": "Predicate<CommandListenerWrapper>", "signature": "Predicate<CommandListenerWrapper> requirement(CommandNode<CommandSender> command)", "full_signature": "@Override protected Predicate<CommandListenerWrapper> requirement(CommandNode<CommandSender> command)", "class_method_signature": "SpigotMapper.requirement(CommandNode<CommandSender> command)", "testcase": false, "constructor": false}, {"identifier": "suggestions", "parameters": "(ArgumentCommandNode<CommandSender, ?> command)", "modifiers": "@Override protected @Nullable", "return": "SuggestionProvider<CommandListenerWrapper>", "signature": "SuggestionProvider<CommandListenerWrapper> suggestions(ArgumentCommandNode<CommandSender, ?> command)", "full_signature": "@Override protected @Nullable SuggestionProvider<CommandListenerWrapper> suggestions(ArgumentCommandNode<CommandSender, ?> command)", "class_method_signature": "SpigotMapper.suggestions(ArgumentCommandNode<CommandSender, ?> command)", "testcase": false, "constructor": false}, {"identifier": "reparse", "parameters": "(Type<?> type)", "modifiers": "", "return": "SuggestionProvider<CommandListenerWrapper>", "signature": "SuggestionProvider<CommandListenerWrapper> reparse(Type<?> type)", "full_signature": " SuggestionProvider<CommandListenerWrapper> reparse(Type<?> type)", "class_method_signature": "SpigotMapper.reparse(Type<?> type)", "testcase": false, "constructor": false}, {"identifier": "reparse", "parameters": "(SuggestionProvider<CommandSender> suggestor)", "modifiers": "", "return": "SuggestionProvider<CommandListenerWrapper>", "signature": "SuggestionProvider<CommandListenerWrapper> reparse(SuggestionProvider<CommandSender> suggestor)", "full_signature": " SuggestionProvider<CommandListenerWrapper> reparse(SuggestionProvider<CommandSender> suggestor)", "class_method_signature": "SpigotMapper.reparse(SuggestionProvider<CommandSender> suggestor)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/dispatcher/SpigotMapper.java"}, "focal_method": {"identifier": "requirement", "parameters": "(CommandNode<CommandSender> command)", "modifiers": "@Override protected", "return": "Predicate<CommandListenerWrapper>", "body": "@Override\n    protected Predicate<CommandListenerWrapper> requirement(CommandNode<CommandSender> command) {\n        var requirement = command.getRequirement();\n        return requirement == null ? (Predicate<CommandListenerWrapper>) TRUE : listener -> requirement.test(listener.getBukkitSender());\n    }", "signature": "Predicate<CommandListenerWrapper> requirement(CommandNode<CommandSender> command)", "full_signature": "@Override protected Predicate<CommandListenerWrapper> requirement(CommandNode<CommandSender> command)", "class_method_signature": "SpigotMapper.requirement(CommandNode<CommandSender> command)", "testcase": false, "constructor": false, "invocations": ["getRequirement", "test", "getBukkitSender"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}