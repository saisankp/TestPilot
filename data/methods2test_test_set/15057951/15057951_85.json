{"test_class": {"identifier": "PrinterTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/util/PrinterTest.java"}, "test_case": {"identifier": "testPrint__noTitle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPrint__noTitle() {\n\n        // kolekcja wejsciowa\n        Long[] array = {11223344L, 55667788L};\n\n        // wykonanie testu\n        String result = Printer.print(array, null);\n\n        // oczekiwany wynik\n        String expectedResult\n                = Formatter.NL\n                + \"  1. 11223344\" + Formatter.NL\n                + \"  2. 55667788\" + Formatter.NL;\n\n        // weryfikacja\n        assertEquals(expectedResult, result);\n    }", "signature": "void testPrint__noTitle()", "full_signature": "@Test public void testPrint__noTitle()", "class_method_signature": "PrinterTest.testPrint__noTitle()", "testcase": true, "constructor": false, "invocations": ["print", "assertEquals"]}, "focal_class": {"identifier": "Printer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MIN_OUTPUT_LINES = 3;", "modifier": "private static final", "type": "int", "declarator": "MIN_OUTPUT_LINES = 3", "var_name": "MIN_OUTPUT_LINES"}, {"original_string": "private static final int EXPECTED_LINE_LENGTH = 32;", "modifier": "private static final", "type": "int", "declarator": "EXPECTED_LINE_LENGTH = 32", "var_name": "EXPECTED_LINE_LENGTH"}, {"original_string": "private static final int LINE_NUMBER_WIDTH = 3;", "modifier": "private static final", "type": "int", "declarator": "LINE_NUMBER_WIDTH = 3", "var_name": "LINE_NUMBER_WIDTH"}], "methods": [{"identifier": "Printer", "parameters": "()", "modifiers": "private", "return": "", "signature": " Printer()", "full_signature": "private  Printer()", "class_method_signature": "Printer.Printer()", "testcase": false, "constructor": true}, {"identifier": "print", "parameters": "(Collection<?> list, String title, int maxLines, Formatter formatter)", "modifiers": "public static", "return": "String", "signature": "String print(Collection<?> list, String title, int maxLines, Formatter formatter)", "full_signature": "public static String print(Collection<?> list, String title, int maxLines, Formatter formatter)", "class_method_signature": "Printer.print(Collection<?> list, String title, int maxLines, Formatter formatter)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(Collection<?> list, String title)", "modifiers": "public static", "return": "String", "signature": "String print(Collection<?> list, String title)", "full_signature": "public static String print(Collection<?> list, String title)", "class_method_signature": "Printer.print(Collection<?> list, String title)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(Object[] array, String title)", "modifiers": "public static", "return": "String", "signature": "String print(Object[] array, String title)", "full_signature": "public static String print(Object[] array, String title)", "class_method_signature": "Printer.print(Object[] array, String title)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Object e, Formatter formatter)", "modifiers": "static", "return": "String", "signature": "String format(Object e, Formatter formatter)", "full_signature": "static String format(Object e, Formatter formatter)", "class_method_signature": "Printer.format(Object e, Formatter formatter)", "testcase": false, "constructor": false}, {"identifier": "padNumber", "parameters": "(int n)", "modifiers": "private static", "return": "String", "signature": "String padNumber(int n)", "full_signature": "private static String padNumber(int n)", "class_method_signature": "Printer.padNumber(int n)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(char c, int count)", "modifiers": "public static", "return": "String", "signature": "String repeat(char c, int count)", "full_signature": "public static String repeat(char c, int count)", "class_method_signature": "Printer.repeat(char c, int count)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/util/Printer.java"}, "focal_method": {"identifier": "print", "parameters": "(Collection<?> list, String title, int maxLines, Formatter formatter)", "modifiers": "public static", "return": "String", "body": "public static String print(Collection<?> list, String title, int maxLines, Formatter formatter) {\n        if (list == null) {\n            return null;\n        }\n\n        // ograniczenie liczby linii od dolu (co najmniej 3 linie)\n        int max = Math.max(maxLines, MIN_OUTPUT_LINES);\n\n        int lines = Math.min(list.size(), maxLines);\n        boolean printAll = maxLines == 0 || list.size() <= max;\n\n        StringBuilder sb = new StringBuilder(lines * EXPECTED_LINE_LENGTH);\n        sb.append(Formatter.NL);\n\n        if (title != null) {\n            sb.append(title).append(\" (\").append(list.size()).append(')').append(Formatter.NL);\n        }\n\n        int c = 0;\n        for (Object e : list) {\n            c++;\n            String value = format(e, formatter);\n\n            if (printAll || c <= max - 2 || c == list.size()) {\n                sb.append(padNumber(c)).append(\". \").append(value);\n                sb.append(Formatter.NL);\n            } else if (c == max - 1) {\n                sb.append(\"  ...\");\n                sb.append(Formatter.NL);\n            }\n        }\n\n        return sb.toString();\n    }", "signature": "String print(Collection<?> list, String title, int maxLines, Formatter formatter)", "full_signature": "public static String print(Collection<?> list, String title, int maxLines, Formatter formatter)", "class_method_signature": "Printer.print(Collection<?> list, String title, int maxLines, Formatter formatter)", "testcase": false, "constructor": false, "invocations": ["max", "min", "size", "size", "append", "append", "append", "append", "append", "append", "size", "format", "size", "append", "append", "append", "padNumber", "append", "append", "append", "toString"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}