{"test_class": {"identifier": "StatisticsUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int SAMPLE_SIZE = 30;", "modifier": "private static final", "type": "int", "declarator": "SAMPLE_SIZE = 30", "var_name": "SAMPLE_SIZE"}, {"original_string": "private static double[] posSampleA;", "modifier": "private static", "type": "double[]", "declarator": "posSampleA", "var_name": "posSampleA"}, {"original_string": "private static double[] posSampleB;", "modifier": "private static", "type": "double[]", "declarator": "posSampleB", "var_name": "posSampleB"}, {"original_string": "private static double[] negSampleA;", "modifier": "private static", "type": "double[]", "declarator": "negSampleA", "var_name": "negSampleA"}, {"original_string": "private static double[] negSampleB;", "modifier": "private static", "type": "double[]", "declarator": "negSampleB", "var_name": "negSampleB"}], "file": "JAICore/jaicore-basic/src/test/java/ai/libs/jaicore/basic/StatisticsUtilTest.java"}, "test_case": {"identifier": "testWilcoxonSignedRankSumTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWilcoxonSignedRankSumTest() {\n\t\tassertFalse(\"Wilcoxon Signed Rank Test detects different distributions which is not the case.\", StatisticsUtil.wilcoxonSignedRankSumTestTwoSided(posSampleA, posSampleB));\n\t\tassertTrue(\"Wilcoxon Signed Rank Test did not detect different distributions although they are.\", StatisticsUtil.wilcoxonSignedRankSumTestTwoSided(negSampleA, negSampleB));\n\t}", "signature": "void testWilcoxonSignedRankSumTest()", "full_signature": "@Test public void testWilcoxonSignedRankSumTest()", "class_method_signature": "StatisticsUtilTest.testWilcoxonSignedRankSumTest()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "wilcoxonSignedRankSumTestTwoSided", "assertTrue", "wilcoxonSignedRankSumTestTwoSided"]}, "focal_class": {"identifier": "StatisticsUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "StatisticsUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " StatisticsUtil()", "full_signature": "private  StatisticsUtil()", "class_method_signature": "StatisticsUtil.StatisticsUtil()", "testcase": false, "constructor": true}, {"identifier": "max", "parameters": "(final Collection<? extends Number> values)", "modifiers": "public static", "return": "double", "signature": "double max(final Collection<? extends Number> values)", "full_signature": "public static double max(final Collection<? extends Number> values)", "class_method_signature": "StatisticsUtil.max(final Collection<? extends Number> values)", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "(final Collection<? extends Number> values)", "modifiers": "public static", "return": "double", "signature": "double min(final Collection<? extends Number> values)", "full_signature": "public static double min(final Collection<? extends Number> values)", "class_method_signature": "StatisticsUtil.min(final Collection<? extends Number> values)", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "(final Collection<? extends Number> values)", "modifiers": "public static", "return": "double", "signature": "double mean(final Collection<? extends Number> values)", "full_signature": "public static double mean(final Collection<? extends Number> values)", "class_method_signature": "StatisticsUtil.mean(final Collection<? extends Number> values)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(final Collection<? extends Number> values)", "modifiers": "public static", "return": "double", "signature": "double sum(final Collection<? extends Number> values)", "full_signature": "public static double sum(final Collection<? extends Number> values)", "class_method_signature": "StatisticsUtil.sum(final Collection<? extends Number> values)", "testcase": false, "constructor": false}, {"identifier": "variance", "parameters": "(final Collection<? extends Number> values)", "modifiers": "public static", "return": "double", "signature": "double variance(final Collection<? extends Number> values)", "full_signature": "public static double variance(final Collection<? extends Number> values)", "class_method_signature": "StatisticsUtil.variance(final Collection<? extends Number> values)", "testcase": false, "constructor": false}, {"identifier": "standardDeviation", "parameters": "(final Collection<? extends Number> values)", "modifiers": "public static", "return": "double", "signature": "double standardDeviation(final Collection<? extends Number> values)", "full_signature": "public static double standardDeviation(final Collection<? extends Number> values)", "class_method_signature": "StatisticsUtil.standardDeviation(final Collection<? extends Number> values)", "testcase": false, "constructor": false}, {"identifier": "wilcoxonSignedRankSumTestP", "parameters": "(final double[] sampleA, final double[] sampleB)", "modifiers": "public static", "return": "double", "signature": "double wilcoxonSignedRankSumTestP(final double[] sampleA, final double[] sampleB)", "full_signature": "public static double wilcoxonSignedRankSumTestP(final double[] sampleA, final double[] sampleB)", "class_method_signature": "StatisticsUtil.wilcoxonSignedRankSumTestP(final double[] sampleA, final double[] sampleB)", "testcase": false, "constructor": false}, {"identifier": "wilcoxonSignedRankSumTestTwoSided", "parameters": "(final double[] sampleA, final double[] sampleB)", "modifiers": "public static", "return": "boolean", "signature": "boolean wilcoxonSignedRankSumTestTwoSided(final double[] sampleA, final double[] sampleB)", "full_signature": "public static boolean wilcoxonSignedRankSumTestTwoSided(final double[] sampleA, final double[] sampleB)", "class_method_signature": "StatisticsUtil.wilcoxonSignedRankSumTestTwoSided(final double[] sampleA, final double[] sampleB)", "testcase": false, "constructor": false}, {"identifier": "wilcoxonSignedRankSumTestSingleSided", "parameters": "(final double[] sampleA, final double[] sampleB)", "modifiers": "public static", "return": "boolean", "signature": "boolean wilcoxonSignedRankSumTestSingleSided(final double[] sampleA, final double[] sampleB)", "full_signature": "public static boolean wilcoxonSignedRankSumTestSingleSided(final double[] sampleA, final double[] sampleB)", "class_method_signature": "StatisticsUtil.wilcoxonSignedRankSumTestSingleSided(final double[] sampleA, final double[] sampleB)", "testcase": false, "constructor": false}, {"identifier": "mannWhitneyTwoSidedSignificanceP", "parameters": "(final double[] sampleA, final double[] sampleB)", "modifiers": "public static", "return": "double", "signature": "double mannWhitneyTwoSidedSignificanceP(final double[] sampleA, final double[] sampleB)", "full_signature": "public static double mannWhitneyTwoSidedSignificanceP(final double[] sampleA, final double[] sampleB)", "class_method_signature": "StatisticsUtil.mannWhitneyTwoSidedSignificanceP(final double[] sampleA, final double[] sampleB)", "testcase": false, "constructor": false}, {"identifier": "mannWhitneyTwoSidedSignificance", "parameters": "(final double[] sampleA, final double[] sampleB)", "modifiers": "public static", "return": "boolean", "signature": "boolean mannWhitneyTwoSidedSignificance(final double[] sampleA, final double[] sampleB)", "full_signature": "public static boolean mannWhitneyTwoSidedSignificance(final double[] sampleA, final double[] sampleB)", "class_method_signature": "StatisticsUtil.mannWhitneyTwoSidedSignificance(final double[] sampleA, final double[] sampleB)", "testcase": false, "constructor": false}, {"identifier": "mannWhitneyTwoSidedSignificance", "parameters": "(final Collection<Double> sampleA, final Collection<Double> sampleB)", "modifiers": "public static", "return": "boolean", "signature": "boolean mannWhitneyTwoSidedSignificance(final Collection<Double> sampleA, final Collection<Double> sampleB)", "full_signature": "public static boolean mannWhitneyTwoSidedSignificance(final Collection<Double> sampleA, final Collection<Double> sampleB)", "class_method_signature": "StatisticsUtil.mannWhitneyTwoSidedSignificance(final Collection<Double> sampleA, final Collection<Double> sampleB)", "testcase": false, "constructor": false}, {"identifier": "mannWhitneyOneSidedSignificance", "parameters": "(final double[] sampleA, final double[] sampleB)", "modifiers": "public static", "return": "boolean", "signature": "boolean mannWhitneyOneSidedSignificance(final double[] sampleA, final double[] sampleB)", "full_signature": "public static boolean mannWhitneyOneSidedSignificance(final double[] sampleA, final double[] sampleB)", "class_method_signature": "StatisticsUtil.mannWhitneyOneSidedSignificance(final double[] sampleA, final double[] sampleB)", "testcase": false, "constructor": false}, {"identifier": "twoSampleTTestSignificance", "parameters": "(final Collection<Double> valuesA, final Collection<Double> valuesB)", "modifiers": "public static", "return": "boolean", "signature": "boolean twoSampleTTestSignificance(final Collection<Double> valuesA, final Collection<Double> valuesB)", "full_signature": "public static boolean twoSampleTTestSignificance(final Collection<Double> valuesA, final Collection<Double> valuesB)", "class_method_signature": "StatisticsUtil.twoSampleTTestSignificance(final Collection<Double> valuesA, final Collection<Double> valuesB)", "testcase": false, "constructor": false}, {"identifier": "twoSampleTTestSignificance", "parameters": "(final double[] valuesA, final double[] valuesB)", "modifiers": "public static", "return": "boolean", "signature": "boolean twoSampleTTestSignificance(final double[] valuesA, final double[] valuesB)", "full_signature": "public static boolean twoSampleTTestSignificance(final double[] valuesA, final double[] valuesB)", "class_method_signature": "StatisticsUtil.twoSampleTTestSignificance(final double[] valuesA, final double[] valuesB)", "testcase": false, "constructor": false}, {"identifier": "twoSampleTTestSignificance", "parameters": "(final double mean1, final double variance1, final double n1, final double mean2, final double variance2, final double n2)", "modifiers": "public static", "return": "boolean", "signature": "boolean twoSampleTTestSignificance(final double mean1, final double variance1, final double n1, final double mean2, final double variance2, final double n2)", "full_signature": "public static boolean twoSampleTTestSignificance(final double mean1, final double variance1, final double n1, final double mean2, final double variance2, final double n2)", "class_method_signature": "StatisticsUtil.twoSampleTTestSignificance(final double mean1, final double variance1, final double n1, final double mean2, final double variance2, final double n2)", "testcase": false, "constructor": false}, {"identifier": "collectionToArray", "parameters": "(final Collection<Double> collection)", "modifiers": "private static", "return": "double[]", "signature": "double[] collectionToArray(final Collection<Double> collection)", "full_signature": "private static double[] collectionToArray(final Collection<Double> collection)", "class_method_signature": "StatisticsUtil.collectionToArray(final Collection<Double> collection)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-basic/src/main/java/ai/libs/jaicore/basic/StatisticsUtil.java"}, "focal_method": {"identifier": "wilcoxonSignedRankSumTestTwoSided", "parameters": "(final double[] sampleA, final double[] sampleB)", "modifiers": "public static", "return": "boolean", "body": "public static boolean wilcoxonSignedRankSumTestTwoSided(final double[] sampleA, final double[] sampleB) {\n\t\treturn wilcoxonSignedRankSumTestP(sampleA, sampleB) < 0.05;\n\t}", "signature": "boolean wilcoxonSignedRankSumTestTwoSided(final double[] sampleA, final double[] sampleB)", "full_signature": "public static boolean wilcoxonSignedRankSumTestTwoSided(final double[] sampleA, final double[] sampleB)", "class_method_signature": "StatisticsUtil.wilcoxonSignedRankSumTestTwoSided(final double[] sampleA, final double[] sampleB)", "testcase": false, "constructor": false, "invocations": ["wilcoxonSignedRankSumTestP"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}