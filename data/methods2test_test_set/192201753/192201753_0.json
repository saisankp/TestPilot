{"test_class": {"identifier": "DomainUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "downloader/src/test/java/com/fooock/robotstxt/downloader/util/DomainUtilsTest.java"}, "test_case": {"identifier": "testExtractDomain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtractDomain() throws Exception {\n        assertEquals(\"http://abc.com\", DomainUtils.base(new URI(\"http://abc.com/test/dir/1.html\")));\n        assertEquals(\"http://abc.com:8080\", DomainUtils.base(new URI(\"http://abc.com:8080/test/dir/1.html\")));\n\n        assertEquals(\"http://test.abc.com\", DomainUtils.base(new URI(\"http://test.abc.com/test/dir/1.html#Download\")));\n        assertEquals(\"http://test.abc.com:8080\", DomainUtils.base(new URI(\"http://test.abc.com:8080/test/dir/1.html#1\")));\n\n        assertEquals(\"http://sec.test.abc.com\", DomainUtils.base(new URI(\"http://sec.test.abc.com/test/dir/1.html#Download\")));\n        assertEquals(\"http://sec.test.abc.com:8080\", DomainUtils.base(new URI(\"http://sec.test.abc.com:8080/test/dir/1.html#1\")));\n    }", "signature": "void testExtractDomain()", "full_signature": "@Test public void testExtractDomain()", "class_method_signature": "DomainUtilsTest.testExtractDomain()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "base", "assertEquals", "base", "assertEquals", "base", "assertEquals", "base", "assertEquals", "base", "assertEquals", "base"]}, "focal_class": {"identifier": "DomainUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "base", "parameters": "(URI uri)", "modifiers": "public static", "return": "String", "signature": "String base(URI uri)", "full_signature": "public static String base(URI uri)", "class_method_signature": "DomainUtils.base(URI uri)", "testcase": false, "constructor": false}], "file": "downloader/src/main/java/com/fooock/robotstxt/downloader/util/DomainUtils.java"}, "focal_method": {"identifier": "base", "parameters": "(URI uri)", "modifiers": "public static", "return": "String", "body": "public static String base(URI uri) {\n        return uri.getPort() < 0\n                ? String.format(\"%s://%s\", uri.getScheme(), uri.getHost())\n                : String.format(\"%s://%s:%s\", uri.getScheme(), uri.getHost(), uri.getPort());\n    }", "signature": "String base(URI uri)", "full_signature": "public static String base(URI uri)", "class_method_signature": "DomainUtils.base(URI uri)", "testcase": false, "constructor": false, "invocations": ["getPort", "format", "getScheme", "getHost", "format", "getScheme", "getHost", "getPort"]}, "repository": {"repo_id": 192201753, "url": "https://github.com/fooock/robots.txt", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 2005, "license": "licensed"}}