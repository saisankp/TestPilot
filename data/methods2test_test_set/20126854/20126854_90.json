{"test_class": {"identifier": "BsDiffTest", "superclass": "", "interfaces": "", "fields": [], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/bsdiff/BsDiffTest.java"}, "test_case": {"identifier": "searchForMatchVeryLongGroupArrayTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void searchForMatchVeryLongGroupArrayTest() throws IOException {\n    final RandomAccessObject groupArray3RO =\n        intArrayToRandomAccessObject(BsDiffTestData.LONGER_GROUP_ARRAY_350);\n\n    final int scan = 1;\n    BsDiff.Match ret =\n        BsDiff.searchForMatch(\n            groupArray3RO,\n            BsDiffTestData.LONGER_DATA_349_RO,\n            BsDiffTestData.LONGER_DATA_354_NEW_RO,\n            scan,\n            0,\n            BsDiffTestData.LONGER_DATA_349.length);\n    Assert.assertEquals(0, ret.length);\n    Assert.assertEquals(251, ret.start);\n  }", "signature": "void searchForMatchVeryLongGroupArrayTest()", "full_signature": "@Test public void searchForMatchVeryLongGroupArrayTest()", "class_method_signature": "BsDiffTest.searchForMatchVeryLongGroupArrayTest()", "testcase": true, "constructor": false, "invocations": ["intArrayToRandomAccessObject", "searchForMatch", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "BsDiff", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "lengthOfMatch", "parameters": "(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "modifiers": "static", "return": "int", "signature": "int lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "full_signature": "static int lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "class_method_signature": "BsDiff.lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "testcase": false, "constructor": false}, {"identifier": "searchForMatchBaseCase", "parameters": "(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "modifiers": "static", "return": "Match", "signature": "Match searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "full_signature": "static Match searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "class_method_signature": "BsDiff.searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "testcase": false, "constructor": false}, {"identifier": "searchForMatch", "parameters": "(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "modifiers": "static", "return": "Match", "signature": "Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "full_signature": "static Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "class_method_signature": "BsDiff.searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/bsdiff/BsDiff.java"}, "focal_method": {"identifier": "searchForMatch", "parameters": "(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "modifiers": "static", "return": "Match", "body": "static Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)\n      throws IOException {\n    if (oldDataRangeStartB - oldDataRangeStartA < 2) {\n      return searchForMatchBaseCase(\n          groupArray, oldData, newData, newStart, oldDataRangeStartA, oldDataRangeStartB);\n    }\n\n    // Cut range in half and search again\n    final int rangeLength = oldDataRangeStartB - oldDataRangeStartA;\n    final int pivot = oldDataRangeStartA + (rangeLength / 2);\n    groupArray.seekToIntAligned(pivot);\n    final int groupArrayPivot = groupArray.readInt();\n    if (BsUtil.lexicographicalCompare(\n            oldData,\n            groupArrayPivot,\n            (int) oldData.length() - groupArrayPivot,\n            newData,\n            newStart,\n            (int) newData.length() - newStart)\n        < 0) {\n      return searchForMatch(groupArray, oldData, newData, newStart, pivot, oldDataRangeStartB);\n    }\n    return searchForMatch(groupArray, oldData, newData, newStart, oldDataRangeStartA, pivot);\n  }", "signature": "Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "full_signature": "static Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "class_method_signature": "BsDiff.searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "testcase": false, "constructor": false, "invocations": ["searchForMatchBaseCase", "seekToIntAligned", "readInt", "lexicographicalCompare", "length", "length", "searchForMatch", "searchForMatch"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}