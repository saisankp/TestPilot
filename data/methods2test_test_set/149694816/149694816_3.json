{"test_class": {"identifier": "ConcatenatorTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/build/ConcatenatorTest.java"}, "test_case": {"identifier": "shouldNotBeNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldNotBeNull() {\n    final ProjectFile projectFile = new ProjectFile();\n    projectFile.setName(\"test/test\");\n    projectFile.setSource(\"source.lua\");\n    projectFile.setTarget(\"target.lua\");\n    final Project project = new Project(\".\", projectFile);\n    final String base = \"/\" + getClass().getName().replace('.', '/') + \"/case2/\";\n    final ResourceManager resourceManager = new ResourceManagerMock(\n        project,\n        dir(\n            \".\",\n            file(\"aergo.json\", () -> open(base + \"aergo.json\")),\n            file(\"source.lua\", () -> open(base + \"source.lua\"))\n        )\n    );\n    final Concatenator concatenator = new Concatenator(resourceManager);\n    final BuildDetails buildDetails =\n        concatenator.visit(new BuildResource(project, \"target.lua\"));\n    logger.debug(\"Build result: {}\", buildDetails.getResult());\n    assertNotNull(buildDetails.getResult());\n  }", "signature": "void shouldNotBeNull()", "full_signature": "@Test public void shouldNotBeNull()", "class_method_signature": "ConcatenatorTest.shouldNotBeNull()", "testcase": true, "constructor": false, "invocations": ["setName", "setSource", "setTarget", "replace", "getName", "getClass", "dir", "file", "open", "file", "open", "visit", "debug", "getResult", "assertNotNull", "getResult"]}, "focal_class": {"identifier": "Concatenator", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final CallStack callStack = new CallStack();", "modifier": "protected final", "type": "CallStack", "declarator": "callStack = new CallStack()", "var_name": "callStack"}, {"original_string": "@Getter\n  protected final ResourceManager resourceManager;", "modifier": "@Getter\n  protected final", "type": "ResourceManager", "declarator": "resourceManager", "var_name": "resourceManager"}, {"original_string": "@Getter\n  protected final Set<Resource> visitedResources;", "modifier": "@Getter\n  protected final", "type": "Set<Resource>", "declarator": "visitedResources", "var_name": "visitedResources"}, {"original_string": "@Getter\n  @Setter\n  protected String delimiter = \"\\n\";", "modifier": "@Getter\n  @Setter\n  protected", "type": "String", "declarator": "delimiter = \"\\n\"", "var_name": "delimiter"}], "methods": [{"identifier": "Concatenator", "parameters": "(final ResourceManager resourceManager)", "modifiers": "public", "return": "", "signature": " Concatenator(final ResourceManager resourceManager)", "full_signature": "public  Concatenator(final ResourceManager resourceManager)", "class_method_signature": "Concatenator.Concatenator(final ResourceManager resourceManager)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(final Source source)", "modifiers": "protected", "return": "String", "signature": "String visit(final Source source)", "full_signature": "protected String visit(final Source source)", "class_method_signature": "Concatenator.visit(final Source source)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(final Resource resource)", "modifiers": "public", "return": "BuildDetails", "signature": "BuildDetails visit(final Resource resource)", "full_signature": "public BuildDetails visit(final Resource resource)", "class_method_signature": "Concatenator.visit(final Resource resource)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(final Resource resource, final BuildDependency resourceDependency)", "modifiers": "public", "return": "String", "signature": "String visit(final Resource resource, final BuildDependency resourceDependency)", "full_signature": "public String visit(final Resource resource, final BuildDependency resourceDependency)", "class_method_signature": "Concatenator.visit(final Resource resource, final BuildDependency resourceDependency)", "testcase": false, "constructor": false}, {"identifier": "visitDependencies", "parameters": "(final Concatenator next,\n      final Resource resource)", "modifiers": "protected", "return": "Collection<BuildDependency>", "signature": "Collection<BuildDependency> visitDependencies(final Concatenator next,\n      final Resource resource)", "full_signature": "protected Collection<BuildDependency> visitDependencies(final Concatenator next,\n      final Resource resource)", "class_method_signature": "Concatenator.visitDependencies(final Concatenator next,\n      final Resource resource)", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/build/Concatenator.java"}, "focal_method": {"identifier": "visit", "parameters": "(final Source source)", "modifiers": "protected", "return": "String", "body": "protected String visit(final Source source) {\n    if (visitedResources.contains(source)) {\n      return null;\n    }\n    try {\n      return source.getBody().get();\n    } catch (final BuildException e) {\n      throw e;\n    } catch (final FileNotFoundException | NoSuchFileException ex) {\n      throw new BuildException(\"<green>\"\n          + getCanonicalForm(source.getPath().toFile().getAbsolutePath()) + \"</green> not found\");\n    } catch (final Throwable e) {\n      throw new BuildException(e);\n    }\n  }", "signature": "String visit(final Source source)", "full_signature": "protected String visit(final Source source)", "class_method_signature": "Concatenator.visit(final Source source)", "testcase": false, "constructor": false, "invocations": ["contains", "get", "getBody", "getCanonicalForm", "getAbsolutePath", "toFile", "getPath"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}