{"test_class": {"identifier": "DatabasePopulatorTest", "superclass": "extends AbstractRepositoryIT", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private DatabasePopulator populator;", "modifier": "@Autowired\n    private", "type": "DatabasePopulator", "declarator": "populator", "var_name": "populator"}, {"original_string": "@Autowired\n    private StatisticsRepository statisticsRepository;", "modifier": "@Autowired\n    private", "type": "StatisticsRepository", "declarator": "statisticsRepository", "var_name": "statisticsRepository"}, {"original_string": "@Autowired\n    private ProjectRepository projectRepository;", "modifier": "@Autowired\n    private", "type": "ProjectRepository", "declarator": "projectRepository", "var_name": "projectRepository"}, {"original_string": "@Autowired\n    private ContributorRepository contributorRepository;", "modifier": "@Autowired\n    private", "type": "ContributorRepository", "declarator": "contributorRepository", "var_name": "contributorRepository"}], "file": "catwatch-backend/src/test/java/org/zalando/catwatch/backend/repo/util/DatabasePopulatorTest.java"}, "test_case": {"identifier": "testPopulateTestData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPopulateTestData() {\n        populator.populateTestData();\n\n        List<Statistics> galantos = statisticsRepository.findByOrganizationName(\"galanto\");\n        assertEquals(1, galantos.size());\n\n        List<Project> projects = projectRepository.findProjects(\"galanto\", Optional.empty(), Optional.empty());\n        assertFalse(projects.isEmpty());\n\n        List<Contributor> contributors = contributorRepository.findContributorsByOrganizationAndDate(Collections.singleton(\"galanto\"), new Date(0), new Date());\n        assertFalse(contributors.isEmpty());\n    }", "signature": "void testPopulateTestData()", "full_signature": "@Test public void testPopulateTestData()", "class_method_signature": "DatabasePopulatorTest.testPopulateTestData()", "testcase": true, "constructor": false, "invocations": ["populateTestData", "findByOrganizationName", "assertEquals", "size", "findProjects", "empty", "empty", "assertFalse", "isEmpty", "findContributorsByOrganizationAndDate", "singleton", "assertFalse", "isEmpty"]}, "focal_class": {"identifier": "DatabasePopulator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final StatisticsRepository statisticsRepository;", "modifier": "private final", "type": "StatisticsRepository", "declarator": "statisticsRepository", "var_name": "statisticsRepository"}, {"original_string": "private final ProjectRepository projectRepository;", "modifier": "private final", "type": "ProjectRepository", "declarator": "projectRepository", "var_name": "projectRepository"}, {"original_string": "private final ContributorRepository contributorRepository;", "modifier": "private final", "type": "ContributorRepository", "declarator": "contributorRepository", "var_name": "contributorRepository"}, {"original_string": "private final JdbcTemplate jdbcTemplate;", "modifier": "private final", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}], "methods": [{"identifier": "DatabasePopulator", "parameters": "(StatisticsRepository statisticsRepository,\n                             ProjectRepository projectRepository,\n                             ContributorRepository contributorRepository,\n                             JdbcTemplate jdbcTemplate)", "modifiers": "@Autowired public", "return": "", "signature": " DatabasePopulator(StatisticsRepository statisticsRepository,\n                             ProjectRepository projectRepository,\n                             ContributorRepository contributorRepository,\n                             JdbcTemplate jdbcTemplate)", "full_signature": "@Autowired public  DatabasePopulator(StatisticsRepository statisticsRepository,\n                             ProjectRepository projectRepository,\n                             ContributorRepository contributorRepository,\n                             JdbcTemplate jdbcTemplate)", "class_method_signature": "DatabasePopulator.DatabasePopulator(StatisticsRepository statisticsRepository,\n                             ProjectRepository projectRepository,\n                             ContributorRepository contributorRepository,\n                             JdbcTemplate jdbcTemplate)", "testcase": false, "constructor": true}, {"identifier": "populateTestData", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void populateTestData()", "full_signature": "public void populateTestData()", "class_method_signature": "DatabasePopulator.populateTestData()", "testcase": false, "constructor": false}], "file": "catwatch-backend/src/main/java/org/zalando/catwatch/backend/repo/util/DatabasePopulator.java"}, "focal_method": {"identifier": "populateTestData", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void populateTestData() {\n\n        if (!isDatabaseAvailable(jdbcTemplate)) {\n            return;                             // return so that the application context can start at least\n        }\n\n        // create statistics for two companies (latest)\n        new StatisticsBuilder(statisticsRepository) //\n            .organizationName(\"galanto\") //\n            .publicProjectCount(34) //\n            .allStarsCount(54) //\n            .allForksCount(110) //\n            .days(1)\n            .save();\n\n        new StatisticsBuilder(statisticsRepository) //\n            .organizationName(\"galanto-italic\") //\n            .publicProjectCount(56) //\n            .allStarsCount(93) //\n            .allForksCount(249) //\n            .days(1)\n            .save();\n\n        // create projects for galanto\n        List<Date> snapshots = Stream\n            .generate(BuilderUtil::randomDate)\n            .limit(100)\n            .collect(Collectors.toList());\n\n        for (int i = 0; i < 10; i++) {\n            Long gitHubProjectId = freshId();\n            String name = randomProjectName();\n            String language = randomLanguage();\n\n            for (Date snapshot : snapshots) {\n                new ProjectBuilder(projectRepository)\n                    .organizationName(\"galanto\")\n                    .name(name)\n                    .gitHubProjectId(gitHubProjectId)\n                    .primaryLanguage(language)\n                    .snapshotDate(snapshot)\n                    .forksCount(random(1, 4))\n                    .starsCount(random(1, 10))\n                    .commitsCount(random(1, 1000))\n                    .contributorsCount(random(1, 1000))\n                    .score(random(1, 100))\n                    .save();\n            }\n        }\n\n        // create contributors for galanto\n        for (int i = 0; i < 2; i++) {\n            new ContributorBuilder(contributorRepository)\n                .organizationName(\"galanto\")\n                .save();\n        }\n    }", "signature": "void populateTestData()", "full_signature": "public void populateTestData()", "class_method_signature": "DatabasePopulator.populateTestData()", "testcase": false, "constructor": false, "invocations": ["isDatabaseAvailable", "save", "days", "allForksCount", "allStarsCount", "publicProjectCount", "organizationName", "save", "days", "allForksCount", "allStarsCount", "publicProjectCount", "organizationName", "collect", "limit", "generate", "toList", "freshId", "randomProjectName", "randomLanguage", "save", "score", "contributorsCount", "commitsCount", "starsCount", "forksCount", "snapshotDate", "primaryLanguage", "gitHubProjectId", "name", "organizationName", "random", "random", "random", "random", "random", "save", "organizationName"]}, "repository": {"repo_id": 35957836, "url": "https://github.com/zalando-incubator/catwatch", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 55, "size": 1999, "license": "licensed"}}