{"test_class": {"identifier": "UniqueCharsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UniqueChars uniqueChars;", "modifier": "private", "type": "UniqueChars", "declarator": "uniqueChars", "var_name": "uniqueChars"}], "file": "algs/src/test/java/com/github/pedrovgs/problem50/UniqueCharsTest.java"}, "test_case": {"identifier": "shouldReturnFalseIfInputStringIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnFalseIfInputStringIsEmpty() {\n    assertTrue(uniqueChars.evaluate(\"\"));\n  }", "signature": "void shouldReturnFalseIfInputStringIsEmpty()", "full_signature": "@Test public void shouldReturnFalseIfInputStringIsEmpty()", "class_method_signature": "UniqueCharsTest.shouldReturnFalseIfInputStringIsEmpty()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "evaluate"]}, "focal_class": {"identifier": "UniqueChars", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "evaluate", "parameters": "(String input)", "modifiers": "public", "return": "boolean", "signature": "boolean evaluate(String input)", "full_signature": "public boolean evaluate(String input)", "class_method_signature": "UniqueChars.evaluate(String input)", "testcase": false, "constructor": false}, {"identifier": "evaluate2", "parameters": "(String input)", "modifiers": "public", "return": "boolean", "signature": "boolean evaluate2(String input)", "full_signature": "public boolean evaluate2(String input)", "class_method_signature": "UniqueChars.evaluate2(String input)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(String input)", "modifiers": "private", "return": "void", "signature": "void validateInput(String input)", "full_signature": "private void validateInput(String input)", "class_method_signature": "UniqueChars.validateInput(String input)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem50/UniqueChars.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(String input)", "modifiers": "public", "return": "boolean", "body": "public boolean evaluate(String input) {\n    validateInput(input);\n\n    Set<Integer> charsCounter = new HashSet<Integer>();\n    for (char c : input.toCharArray()) {\n      if (charsCounter.contains((int) c)) {\n        return false;\n      } else {\n        charsCounter.add((int) c);\n      }\n    }\n    return true;\n  }", "signature": "boolean evaluate(String input)", "full_signature": "public boolean evaluate(String input)", "class_method_signature": "UniqueChars.evaluate(String input)", "testcase": false, "constructor": false, "invocations": ["validateInput", "toCharArray", "contains", "add"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}