{"test_class": {"identifier": "ProcessUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String userHome;", "modifier": "private", "type": "String", "declarator": "userHome", "var_name": "userHome"}, {"original_string": "private String timeInMillis;", "modifier": "private", "type": "String", "declarator": "timeInMillis", "var_name": "timeInMillis"}], "file": "modules/hms-util/src/test/java/com/vmware/vrack/hms/common/util/ProcessUtilTest.java"}, "test_case": {"identifier": "testgetCommandExitValue", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testgetCommandExitValue()\n    {\n\n        List<String> cmdWithArgs = new ArrayList<String>();\n        if ( SystemUtils.IS_OS_LINUX )\n        {\n            cmdWithArgs.add( 0, \"ls\" );\n        }\n        else if ( SystemUtils.IS_OS_WINDOWS )\n        {\n            cmdWithArgs.add( 0, \"dir\" );\n        }\n        cmdWithArgs.add( 1, userHome );\n\n        int exitValue = ProcessUtil.getCommandExitValue( cmdWithArgs );\n        assertTrue( exitValue != -1 );\n        assertTrue( exitValue == 0 );\n\n        cmdWithArgs.remove( 1 );\n        cmdWithArgs.add( 1, userHome + File.separator + timeInMillis + File.separator + timeInMillis );\n\n        exitValue = ProcessUtil.getCommandExitValue( cmdWithArgs );\n        assertTrue( exitValue != -1 );\n        assertTrue( exitValue == 1 );\n    }", "signature": "void testgetCommandExitValue()", "full_signature": "@Test @Ignore public void testgetCommandExitValue()", "class_method_signature": "ProcessUtilTest.testgetCommandExitValue()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "getCommandExitValue", "assertTrue", "assertTrue", "remove", "add", "getCommandExitValue", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "ProcessUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger( ProcessUtil.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( ProcessUtil.class )", "var_name": "logger"}], "methods": [{"identifier": "ProcessUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ProcessUtil()", "full_signature": "private  ProcessUtil()", "class_method_signature": "ProcessUtil.ProcessUtil()", "testcase": false, "constructor": true}, {"identifier": "getCommandExitValue", "parameters": "( final List<String> cmdWithArgs )", "modifiers": "@Deprecated public static", "return": "int", "signature": "int getCommandExitValue( final List<String> cmdWithArgs )", "full_signature": "@Deprecated public static int getCommandExitValue( final List<String> cmdWithArgs )", "class_method_signature": "ProcessUtil.getCommandExitValue( final List<String> cmdWithArgs )", "testcase": false, "constructor": false}, {"identifier": "executeCommand", "parameters": "( final List<String> cmdWithArgs )", "modifiers": "public static", "return": "int", "signature": "int executeCommand( final List<String> cmdWithArgs )", "full_signature": "public static int executeCommand( final List<String> cmdWithArgs )", "class_method_signature": "ProcessUtil.executeCommand( final List<String> cmdWithArgs )", "testcase": false, "constructor": false}, {"identifier": "extractOutput", "parameters": "( final Process process )", "modifiers": "private static", "return": "void", "signature": "void extractOutput( final Process process )", "full_signature": "private static void extractOutput( final Process process )", "class_method_signature": "ProcessUtil.extractOutput( final Process process )", "testcase": false, "constructor": false}, {"identifier": "extractException", "parameters": "( final Process process )", "modifiers": "private static", "return": "void", "signature": "void extractException( final Process process )", "full_signature": "private static void extractException( final Process process )", "class_method_signature": "ProcessUtil.extractException( final Process process )", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "( final List<String> cmdWithArgs )", "modifiers": "public static", "return": "Process", "signature": "Process execute( final List<String> cmdWithArgs )", "full_signature": "public static Process execute( final List<String> cmdWithArgs )", "class_method_signature": "ProcessUtil.execute( final List<String> cmdWithArgs )", "testcase": false, "constructor": false}, {"identifier": "getCommand", "parameters": "( final List<String> cmdWithArgs )", "modifiers": "private static", "return": "String", "signature": "String getCommand( final List<String> cmdWithArgs )", "full_signature": "private static String getCommand( final List<String> cmdWithArgs )", "class_method_signature": "ProcessUtil.getCommand( final List<String> cmdWithArgs )", "testcase": false, "constructor": false}, {"identifier": "getProcessId", "parameters": "( Process process )", "modifiers": "public static", "return": "int", "signature": "int getProcessId( Process process )", "full_signature": "public static int getProcessId( Process process )", "class_method_signature": "ProcessUtil.getProcessId( Process process )", "testcase": false, "constructor": false}, {"identifier": "maskPassword", "parameters": "( String command )", "modifiers": "private static final", "return": "String", "signature": "String maskPassword( String command )", "full_signature": "private static final String maskPassword( String command )", "class_method_signature": "ProcessUtil.maskPassword( String command )", "testcase": false, "constructor": false}], "file": "modules/hms-util/src/main/java/com/vmware/vrack/hms/common/util/ProcessUtil.java"}, "focal_method": {"identifier": "getCommandExitValue", "parameters": "( final List<String> cmdWithArgs )", "modifiers": "@Deprecated public static", "return": "int", "body": "@Deprecated\n    public static int getCommandExitValue( final List<String> cmdWithArgs )\n    {\n\n        if ( cmdWithArgs != null )\n        {\n\n            int cmdsLength = cmdWithArgs.size();\n            if ( cmdsLength > 0 )\n            {\n\n                String cmd = ProcessUtil.getCommand( cmdWithArgs );\n                cmd = maskPassword( cmd );\n                final Process process = ProcessUtil.execute( cmdWithArgs );\n                if ( process != null )\n                {\n                    int processId = ProcessUtil.getProcessId( process );\n                    if ( processId != -1 )\n                    {\n                        logger.debug( \"Command '{}' running as Process: '{}'.\", cmd, processId );\n                    }\n                    try\n                    {\n\n                        logger.info( \"Waiting for the command '{}' execution.\", cmd );\n                        int status = process.waitFor();\n                        extractOutput( process );\n                        extractException( process );\n\n                        return status;\n                    }\n                    catch ( InterruptedException e )\n                    {\n                        logger.error( \"Error while waiting for the command '{}' execution, exception: {}\", cmd, e );\n                    }\n                }\n            }\n        }\n        return -1;\n    }", "signature": "int getCommandExitValue( final List<String> cmdWithArgs )", "full_signature": "@Deprecated public static int getCommandExitValue( final List<String> cmdWithArgs )", "class_method_signature": "ProcessUtil.getCommandExitValue( final List<String> cmdWithArgs )", "testcase": false, "constructor": false, "invocations": ["size", "getCommand", "maskPassword", "execute", "getProcessId", "debug", "info", "waitFor", "extractOutput", "extractException", "error"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}