{"test_class": {"identifier": "FileIndexerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FIELD_NAME = \"path\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_NAME = \"path\"", "var_name": "FIELD_NAME"}, {"original_string": "private Document document;", "modifier": "private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "private Term term;", "modifier": "private", "type": "Term", "declarator": "term", "var_name": "term"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private IndexWriter writer;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "IndexWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "@Mock\n    private DocumentFactory documentFactory;", "modifier": "@Mock\n    private", "type": "DocumentFactory", "declarator": "documentFactory", "var_name": "documentFactory"}, {"original_string": "@Mock\n    private BufferedReaderFactory bufferedReaderFactory;", "modifier": "@Mock\n    private", "type": "BufferedReaderFactory", "declarator": "bufferedReaderFactory", "var_name": "bufferedReaderFactory"}, {"original_string": "@Mock\n    private TermFactory termFactory;", "modifier": "@Mock\n    private", "type": "TermFactory", "declarator": "termFactory", "var_name": "termFactory"}, {"original_string": "@Mock\n    private FileInputStreamFactory fileInputStreamFactory;", "modifier": "@Mock\n    private", "type": "FileInputStreamFactory", "declarator": "fileInputStreamFactory", "var_name": "fileInputStreamFactory"}, {"original_string": "@Mock\n    private File file;", "modifier": "@Mock\n    private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "@Mock\n    private FileInputStream fileInputStream;", "modifier": "@Mock\n    private", "type": "FileInputStream", "declarator": "fileInputStream", "var_name": "fileInputStream"}, {"original_string": "@Mock\n    private BufferedReader bufferedReader;", "modifier": "@Mock\n    private", "type": "BufferedReader", "declarator": "bufferedReader", "var_name": "bufferedReader"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@InjectMocks\n    private FileIndexer underTest;", "modifier": "@InjectMocks\n    private", "type": "FileIndexer", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-message-search/modules/wilma-message-search-lucene/src/test/java/com/epam/wilma/message/search/lucene/index/FileIndexerTest.java"}, "test_case": {"identifier": "testIndexFileShouldThrowExceptionWhenFileNotFound", "parameters": "()", "modifiers": "@Test(expectedExceptions = SystemException.class) public", "return": "void", "body": "@Test(expectedExceptions = SystemException.class)\n    public void testIndexFileShouldThrowExceptionWhenFileNotFound() throws IOException {\n        //GIVEN\n        given(fileInputStreamFactory.createFileInputStream(file)).willThrow(new FileNotFoundException());\n        //WHEN\n        underTest.indexFile(file);\n        //THEN\n    }", "signature": "void testIndexFileShouldThrowExceptionWhenFileNotFound()", "full_signature": "@Test(expectedExceptions = SystemException.class) public void testIndexFileShouldThrowExceptionWhenFileNotFound()", "class_method_signature": "FileIndexerTest.testIndexFileShouldThrowExceptionWhenFileNotFound()", "testcase": true, "constructor": false, "invocations": ["willThrow", "given", "createFileInputStream", "indexFile"]}, "focal_class": {"identifier": "FileIndexer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(FileIndexer.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FileIndexer.class)", "var_name": "logger"}, {"original_string": "@Value(\"#{fieldName}\")\n    private String fieldName;", "modifier": "@Value(\"#{fieldName}\")\n    private", "type": "String", "declarator": "fieldName", "var_name": "fieldName"}, {"original_string": "@Autowired\n    private IndexWriter indexWriter;", "modifier": "@Autowired\n    private", "type": "IndexWriter", "declarator": "indexWriter", "var_name": "indexWriter"}, {"original_string": "@Autowired\n    private DocumentFactory documentFactory;", "modifier": "@Autowired\n    private", "type": "DocumentFactory", "declarator": "documentFactory", "var_name": "documentFactory"}, {"original_string": "@Autowired\n    private BufferedReaderFactory bufferedReaderFactory;", "modifier": "@Autowired\n    private", "type": "BufferedReaderFactory", "declarator": "bufferedReaderFactory", "var_name": "bufferedReaderFactory"}, {"original_string": "@Autowired\n    private TermFactory termFactory;", "modifier": "@Autowired\n    private", "type": "TermFactory", "declarator": "termFactory", "var_name": "termFactory"}, {"original_string": "@Autowired\n    private FileInputStreamFactory fileInputStreamFactory;", "modifier": "@Autowired\n    private", "type": "FileInputStreamFactory", "declarator": "fileInputStreamFactory", "var_name": "fileInputStreamFactory"}], "methods": [{"identifier": "indexFile", "parameters": "(final File file)", "modifiers": "public", "return": "void", "signature": "void indexFile(final File file)", "full_signature": "public void indexFile(final File file)", "class_method_signature": "FileIndexer.indexFile(final File file)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(final File file)", "modifiers": "private", "return": "FileInputStream", "signature": "FileInputStream getInputStream(final File file)", "full_signature": "private FileInputStream getInputStream(final File file)", "class_method_signature": "FileIndexer.getInputStream(final File file)", "testcase": false, "constructor": false}, {"identifier": "addDocument", "parameters": "(final File file, final Document doc)", "modifiers": "private", "return": "void", "signature": "void addDocument(final File file, final Document doc)", "full_signature": "private void addDocument(final File file, final Document doc)", "class_method_signature": "FileIndexer.addDocument(final File file, final Document doc)", "testcase": false, "constructor": false}], "file": "wilma-message-search/modules/wilma-message-search-lucene/src/main/java/com/epam/wilma/message/search/lucene/index/FileIndexer.java"}, "focal_method": {"identifier": "indexFile", "parameters": "(final File file)", "modifiers": "public", "return": "void", "body": "public void indexFile(final File file) {\n        FileInputStream fis = getInputStream(file);\n        Document doc = documentFactory.createDocument();\n        // Add the path of the file as a field named \"path\". Use a field that is indexed (i.e. searchable), but don't tokenize\n        // the field into separate words and don't index term frequency or positional information:\n        Field pathField = new StringField(fieldName, file.getAbsolutePath(), Field.Store.YES);\n        doc.add(pathField);\n\n        // Add the last modified date of the file a field named \"modified\".\n        // Use a LongField that is indexed (i.e. efficiently filterable with NumericRangeFilter).\n        doc.add(new LongField(\"modified\", file.lastModified(), Field.Store.NO));\n\n        // Add the contents of the file to a field named \"contents\".\n        // If that's not the case searching for special characters will fail.\n        BufferedReader bufferedReader;\n        try {\n            bufferedReader = bufferedReaderFactory.createReader(fis);\n            doc.add(new Field(\"contents\", bufferedReader, TextField.TYPE_NOT_STORED));\n            addDocument(file, doc);\n            fis.close();\n        } catch (IOException e) {\n            logger.error(\" caught a \" + e.getClass() + \"\\n with message: \" + e.getMessage());\n        }\n    }", "signature": "void indexFile(final File file)", "full_signature": "public void indexFile(final File file)", "class_method_signature": "FileIndexer.indexFile(final File file)", "testcase": false, "constructor": false, "invocations": ["getInputStream", "createDocument", "getAbsolutePath", "add", "add", "lastModified", "createReader", "add", "addDocument", "close", "error", "getClass", "getMessage"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}