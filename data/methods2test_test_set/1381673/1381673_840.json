{"test_class": {"identifier": "DSLVariableValueTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/DSLVariableValueTest.java"}, "test_case": {"identifier": "testCopy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCopy() {\n        final DSLVariableValue original = new DSLVariableValue(\"value\");\n        final DSLVariableValue copy = original.copy();\n\n        assertEquals(original.getValue(),\n                     copy.getValue());\n        assertEquals(original,\n                     copy);\n        assertNotSame(original,\n                      copy);\n    }", "signature": "void testCopy()", "full_signature": "@Test public void testCopy()", "class_method_signature": "DSLVariableValueTest.testCopy()", "testcase": true, "constructor": false, "invocations": ["copy", "assertEquals", "getValue", "getValue", "assertEquals", "assertNotSame"]}, "focal_class": {"identifier": "DSLVariableValue", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String value;", "modifier": "private", "type": "String", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "DSLVariableValue", "parameters": "()", "modifiers": "public", "return": "", "signature": " DSLVariableValue()", "full_signature": "public  DSLVariableValue()", "class_method_signature": "DSLVariableValue.DSLVariableValue()", "testcase": false, "constructor": true}, {"identifier": "DSLVariableValue", "parameters": "(String value)", "modifiers": "public", "return": "", "signature": " DSLVariableValue(String value)", "full_signature": "public  DSLVariableValue(String value)", "class_method_signature": "DSLVariableValue.DSLVariableValue(String value)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValue()", "full_signature": "public String getValue()", "class_method_signature": "DSLVariableValue.getValue()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(String value)", "modifiers": "public", "return": "void", "signature": "void setValue(String value)", "full_signature": "public void setValue(String value)", "class_method_signature": "DSLVariableValue.setValue(String value)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "DSLVariableValue.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DSLVariableValue.hashCode()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "DSLVariableValue", "signature": "DSLVariableValue copy()", "full_signature": "public DSLVariableValue copy()", "class_method_signature": "DSLVariableValue.copy()", "testcase": false, "constructor": false}], "file": "drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/DSLVariableValue.java"}, "focal_method": {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "DSLVariableValue", "body": "public DSLVariableValue copy() {\n        return new DSLVariableValue(value);\n    }", "signature": "DSLVariableValue copy()", "full_signature": "public DSLVariableValue copy()", "class_method_signature": "DSLVariableValue.copy()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}