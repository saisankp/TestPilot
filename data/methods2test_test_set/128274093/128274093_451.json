{"test_class": {"identifier": "ObservablePublishTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/observable/ObservablePublishTest.java"}, "test_case": {"identifier": "selectorDisconnectsIndependentSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void selectorDisconnectsIndependentSource() {\n        PublishSubject<Integer> ps = PublishSubject.create();\n\n        ps.publish(new Function<Observable<Integer>, ObservableSource<Integer>>() {\n            @Override\n            public ObservableSource<Integer> apply(Observable<Integer> v) throws Exception {\n                return Observable.range(1, 2);\n            }\n        })\n        .test()\n        .assertResult(1, 2);\n\n        assertFalse(ps.hasObservers());\n    }", "signature": "void selectorDisconnectsIndependentSource()", "full_signature": "@Test public void selectorDisconnectsIndependentSource()", "class_method_signature": "ObservablePublishTest.selectorDisconnectsIndependentSource()", "testcase": true, "constructor": false, "invocations": ["create", "assertResult", "test", "publish", "range", "assertFalse", "hasObservers"]}, "focal_class": {"identifier": "ObservablePublish", "superclass": "extends ConnectableObservable<T>", "interfaces": "implements HasUpstreamObservableSource<T>", "fields": [{"original_string": "final ObservableSource<T> source;", "modifier": "final", "type": "ObservableSource<T>", "declarator": "source", "var_name": "source"}, {"original_string": "final AtomicReference<PublishObserver<T>> current;", "modifier": "final", "type": "AtomicReference<PublishObserver<T>>", "declarator": "current", "var_name": "current"}, {"original_string": "final ObservableSource<T> onSubscribe;", "modifier": "final", "type": "ObservableSource<T>", "declarator": "onSubscribe", "var_name": "onSubscribe"}], "methods": [{"identifier": "create", "parameters": "(ObservableSource<T> source)", "modifiers": "public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> create(ObservableSource<T> source)", "full_signature": "public static ConnectableObservable<T> create(ObservableSource<T> source)", "class_method_signature": "ObservablePublish.create(ObservableSource<T> source)", "testcase": false, "constructor": false}, {"identifier": "ObservablePublish", "parameters": "(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                              final AtomicReference<PublishObserver<T>> current)", "modifiers": "private", "return": "", "signature": " ObservablePublish(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                              final AtomicReference<PublishObserver<T>> current)", "full_signature": "private  ObservablePublish(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                              final AtomicReference<PublishObserver<T>> current)", "class_method_signature": "ObservablePublish.ObservablePublish(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                              final AtomicReference<PublishObserver<T>> current)", "testcase": false, "constructor": true}, {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "ObservableSource<T>", "signature": "ObservableSource<T> source()", "full_signature": "@Override public ObservableSource<T> source()", "class_method_signature": "ObservablePublish.source()", "testcase": false, "constructor": false}, {"identifier": "subscribeActual", "parameters": "(Observer<? super T> observer)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Observer<? super T> observer)", "full_signature": "@Override protected void subscribeActual(Observer<? super T> observer)", "class_method_signature": "ObservablePublish.subscribeActual(Observer<? super T> observer)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(Consumer<? super Disposable> connection)", "modifiers": "@Override public", "return": "void", "signature": "void connect(Consumer<? super Disposable> connection)", "full_signature": "@Override public void connect(Consumer<? super Disposable> connection)", "class_method_signature": "ObservablePublish.connect(Consumer<? super Disposable> connection)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservablePublish.java"}, "focal_method": {"identifier": "create", "parameters": "(ObservableSource<T> source)", "modifiers": "public static", "return": "ConnectableObservable<T>", "body": "public static <T> ConnectableObservable<T> create(ObservableSource<T> source) {\n        // the current connection to source needs to be shared between the operator and its onSubscribe call\n        final AtomicReference<PublishObserver<T>> curr = new AtomicReference<PublishObserver<T>>();\n        ObservableSource<T> onSubscribe = new PublishSource<T>(curr);\n        return RxJavaPlugins.onAssembly(new ObservablePublish<T>(onSubscribe, source, curr));\n    }", "signature": "ConnectableObservable<T> create(ObservableSource<T> source)", "full_signature": "public static ConnectableObservable<T> create(ObservableSource<T> source)", "class_method_signature": "ObservablePublish.create(ObservableSource<T> source)", "testcase": false, "constructor": false, "invocations": ["onAssembly"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}