{"test_class": {"identifier": "MusicControlTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    GazePlay mockGazePlay;", "modifier": "@Mock", "type": "GazePlay", "declarator": "mockGazePlay", "var_name": "mockGazePlay"}, {"original_string": "@Mock\n    Translator mockTranslator;", "modifier": "@Mock", "type": "Translator", "declarator": "mockTranslator", "var_name": "mockTranslator"}, {"original_string": "@Mock\n    BackgroundMusicManager mockMusicManager;", "modifier": "@Mock", "type": "BackgroundMusicManager", "declarator": "mockMusicManager", "var_name": "mockMusicManager"}, {"original_string": "Slider mockVolumeSlider;", "modifier": "", "type": "Slider", "declarator": "mockVolumeSlider", "var_name": "mockVolumeSlider"}, {"original_string": "private MusicControl musicControl;", "modifier": "private", "type": "MusicControl", "declarator": "musicControl", "var_name": "musicControl"}], "file": "gazeplay-core/src/test/java/net/gazeplay/ui/MusicControlTest.java"}, "test_case": {"identifier": "shouldMuteVolumeWhenMuteButtonPressed", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldMuteVolumeWhenMuteButtonPressed() {\n        mockVolumeSlider.setValue(0.5);\n        StackPane result = (StackPane) musicControl.createMuteSwitchButton(mockVolumeSlider);\n\n        Button mute = (Button) result.getChildren().get(0);\n        mute.fire();\n\n        assertEquals(0, mockVolumeSlider.getValue());\n    }", "signature": "void shouldMuteVolumeWhenMuteButtonPressed()", "full_signature": "@Test void shouldMuteVolumeWhenMuteButtonPressed()", "class_method_signature": "MusicControlTest.shouldMuteVolumeWhenMuteButtonPressed()", "testcase": true, "constructor": false, "invocations": ["setValue", "createMuteSwitchButton", "get", "getChildren", "fire", "assertEquals", "getValue"]}, "focal_class": {"identifier": "MusicControl", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String RESOURCES_PATH = \"data/common\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCES_PATH = \"data/common\"", "var_name": "RESOURCES_PATH"}, {"original_string": "private static final String IMAGES_PATH = RESOURCES_PATH + \"/\" + \"images\";", "modifier": "private static final", "type": "String", "declarator": "IMAGES_PATH = RESOURCES_PATH + \"/\" + \"images\"", "var_name": "IMAGES_PATH"}, {"original_string": "private static final String PREVIOUS_ICON = IMAGES_PATH + \"/\" + \"previous.png\";", "modifier": "private static final", "type": "String", "declarator": "PREVIOUS_ICON = IMAGES_PATH + \"/\" + \"previous.png\"", "var_name": "PREVIOUS_ICON"}, {"original_string": "private static final String NEXT_ICON = IMAGES_PATH + \"/\" + \"skip.png\";", "modifier": "private static final", "type": "String", "declarator": "NEXT_ICON = IMAGES_PATH + \"/\" + \"skip.png\"", "var_name": "NEXT_ICON"}, {"original_string": "private static final String PAUSE_ICON = IMAGES_PATH + \"/\" + \"pause.png\";", "modifier": "private static final", "type": "String", "declarator": "PAUSE_ICON = IMAGES_PATH + \"/\" + \"pause.png\"", "var_name": "PAUSE_ICON"}, {"original_string": "private static final String PLAY_ICON = IMAGES_PATH + \"/\" + \"play-button.png\";", "modifier": "private static final", "type": "String", "declarator": "PLAY_ICON = IMAGES_PATH + \"/\" + \"play-button.png\"", "var_name": "PLAY_ICON"}, {"original_string": "private static final String SPEAKER_ICON = IMAGES_PATH + \"/\" + \"speaker.png\";", "modifier": "private static final", "type": "String", "declarator": "SPEAKER_ICON = IMAGES_PATH + \"/\" + \"speaker.png\"", "var_name": "SPEAKER_ICON"}, {"original_string": "private static final String MUTE_ICON = IMAGES_PATH + \"/\" + \"mute.png\";", "modifier": "private static final", "type": "String", "declarator": "MUTE_ICON = IMAGES_PATH + \"/\" + \"mute.png\"", "var_name": "MUTE_ICON"}, {"original_string": "private static final AtomicBoolean autoplayExecuted = new AtomicBoolean(false);", "modifier": "private static final", "type": "AtomicBoolean", "declarator": "autoplayExecuted = new AtomicBoolean(false)", "var_name": "autoplayExecuted"}, {"original_string": "@Getter\n    private final GazePlay gazePlay;", "modifier": "@Getter\n    private final", "type": "GazePlay", "declarator": "gazePlay", "var_name": "gazePlay"}, {"original_string": "private MarqueeText musicName;", "modifier": "private", "type": "MarqueeText", "declarator": "musicName", "var_name": "musicName"}, {"original_string": "private Button playButton;", "modifier": "private", "type": "Button", "declarator": "playButton", "var_name": "playButton"}, {"original_string": "private Button pauseButton;", "modifier": "private", "type": "Button", "declarator": "pauseButton", "var_name": "pauseButton"}, {"original_string": "private double beforeMutedValue;", "modifier": "private", "type": "double", "declarator": "beforeMutedValue", "var_name": "beforeMutedValue"}], "methods": [{"identifier": "updateMusicController", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateMusicController()", "full_signature": "public void updateMusicController()", "class_method_signature": "MusicControl.updateMusicController()", "testcase": false, "constructor": false}, {"identifier": "createMusicControlPane", "parameters": "()", "modifiers": "public", "return": "TitledPane", "signature": "TitledPane createMusicControlPane()", "full_signature": "public TitledPane createMusicControlPane()", "class_method_signature": "MusicControl.createMusicControlPane()", "testcase": false, "constructor": false}, {"identifier": "createButton", "parameters": "(@NonNull final String altText, @NonNull final String imagePath, @NonNull final String toolTip)", "modifiers": "private", "return": "Button", "signature": "Button createButton(@NonNull final String altText, @NonNull final String imagePath, @NonNull final String toolTip)", "full_signature": "private Button createButton(@NonNull final String altText, @NonNull final String imagePath, @NonNull final String toolTip)", "class_method_signature": "MusicControl.createButton(@NonNull final String altText, @NonNull final String imagePath, @NonNull final String toolTip)", "testcase": false, "constructor": false}, {"identifier": "createButton", "parameters": "(@NonNull final String altText, @NonNull final String imagePath, @NonNull final String toolTip, final double imageSize)", "modifiers": "private", "return": "Button", "signature": "Button createButton(@NonNull final String altText, @NonNull final String imagePath, @NonNull final String toolTip, final double imageSize)", "full_signature": "private Button createButton(@NonNull final String altText, @NonNull final String imagePath, @NonNull final String toolTip, final double imageSize)", "class_method_signature": "MusicControl.createButton(@NonNull final String altText, @NonNull final String imagePath, @NonNull final String toolTip, final double imageSize)", "testcase": false, "constructor": false}, {"identifier": "setUpSwitchButton", "parameters": "(final Button button)", "modifiers": "private", "return": "void", "signature": "void setUpSwitchButton(final Button button)", "full_signature": "private void setUpSwitchButton(final Button button)", "class_method_signature": "MusicControl.setUpSwitchButton(final Button button)", "testcase": false, "constructor": false}, {"identifier": "createMuteSwitchButton", "parameters": "(final Slider volumeSlider)", "modifiers": "", "return": "Node", "signature": "Node createMuteSwitchButton(final Slider volumeSlider)", "full_signature": " Node createMuteSwitchButton(final Slider volumeSlider)", "class_method_signature": "MusicControl.createMuteSwitchButton(final Slider volumeSlider)", "testcase": false, "constructor": false}, {"identifier": "createMediaVolumeSlider", "parameters": "(final Configuration config)", "modifiers": "private", "return": "Slider", "signature": "Slider createMediaVolumeSlider(final Configuration config)", "full_signature": "private Slider createMediaVolumeSlider(final Configuration config)", "class_method_signature": "MusicControl.createMediaVolumeSlider(final Configuration config)", "testcase": false, "constructor": false}, {"identifier": "createEffectsVolumeSlider", "parameters": "(final Configuration config)", "modifiers": "private", "return": "Slider", "signature": "Slider createEffectsVolumeSlider(final Configuration config)", "full_signature": "private Slider createEffectsVolumeSlider(final Configuration config)", "class_method_signature": "MusicControl.createEffectsVolumeSlider(final Configuration config)", "testcase": false, "constructor": false}, {"identifier": "createVolumeLevelControlPane", "parameters": "(final Configuration config, final Translator translator)", "modifiers": "public", "return": "TitledPane", "signature": "TitledPane createVolumeLevelControlPane(final Configuration config, final Translator translator)", "full_signature": "public TitledPane createVolumeLevelControlPane(final Configuration config, final Translator translator)", "class_method_signature": "MusicControl.createVolumeLevelControlPane(final Configuration config, final Translator translator)", "testcase": false, "constructor": false}, {"identifier": "setMusicTitle", "parameters": "(final MarqueeText musicLabel)", "modifiers": "private", "return": "void", "signature": "void setMusicTitle(final MarqueeText musicLabel)", "full_signature": "private void setMusicTitle(final MarqueeText musicLabel)", "class_method_signature": "MusicControl.setMusicTitle(final MarqueeText musicLabel)", "testcase": false, "constructor": false}], "file": "gazeplay-core/src/main/java/net/gazeplay/ui/MusicControl.java"}, "focal_method": {"identifier": "createMuteSwitchButton", "parameters": "(final Slider volumeSlider)", "modifiers": "", "return": "Node", "body": "Node createMuteSwitchButton(final Slider volumeSlider) {\n        final Button muteButton = createButton(\"mute\", SPEAKER_ICON, \"mute\", ICON_SIZE / 2d);\n        final Button unmuteButton = createButton(\"unmute\", MUTE_ICON, \"unmute\", ICON_SIZE / 2d);\n\n        setUpSwitchButton(muteButton);\n        setUpSwitchButton(unmuteButton);\n\n        final boolean muted = volumeSlider.getValue() == 0;\n        muteButton.setVisible(!muted);\n        unmuteButton.setVisible(muted);\n\n        if (muted) {\n            beforeMutedValue = Configuration.DEFAULT_VALUE_MUSIC_VOLUME;\n        } else {\n            beforeMutedValue = volumeSlider.getValue();\n        }\n\n        muteButton.setOnAction((event) -> {\n            beforeMutedValue = volumeSlider.getValue();\n            volumeSlider.setValue(0);\n        });\n\n        unmuteButton.setOnAction((event) -> volumeSlider.setValue(beforeMutedValue));\n\n        volumeSlider.valueProperty().addListener((observable, oldValue, newValue) -> {\n            final boolean localMuted = newValue.doubleValue() == 0;\n            muteButton.setVisible(!localMuted);\n            unmuteButton.setVisible(localMuted);\n        });\n\n        return new StackPane(muteButton, unmuteButton);\n    }", "signature": "Node createMuteSwitchButton(final Slider volumeSlider)", "full_signature": " Node createMuteSwitchButton(final Slider volumeSlider)", "class_method_signature": "MusicControl.createMuteSwitchButton(final Slider volumeSlider)", "testcase": false, "constructor": false, "invocations": ["createButton", "createButton", "setUpSwitchButton", "setUpSwitchButton", "getValue", "setVisible", "setVisible", "getValue", "setOnAction", "getValue", "setValue", "setOnAction", "setValue", "addListener", "valueProperty", "doubleValue", "setVisible", "setVisible"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}