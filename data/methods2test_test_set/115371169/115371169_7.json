{"test_class": {"identifier": "ActorSchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Message message = new Message(1);", "modifier": "private final", "type": "Message", "declarator": "message = new Message(1)", "var_name": "message"}], "file": "Actor-Lite/src/test/java/com/actors/ActorSchedulerTest.java"}, "test_case": {"identifier": "sendMessageToPostponedActorThenReceiveItWhenTheActorRegisters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sendMessageToPostponedActorThenReceiveItWhenTheActorRegisters() throws Exception {\n        final ActorSystemInstance actorSystem = ActorSystemInstance\n                .getInstance(\"sendMessageToPostponedActorThenReceiveItWhenTheActorRegisters\");\n        MockActor actor = new TestAsync<MockActor>(50).apply(new Function<CountDownLatch, MockActor>() {\n            @Override\n            public MockActor apply(@NonNull CountDownLatch countDownLatch) {\n                Message message = new Message(1, 1);\n                MockActorNine actor = new MockActorNine(countDownLatch);\n                actorSystem.register(actor);\n                actorSystem.postpone(actor);\n                ActorScheduler.after(10, actorSystem).send(message, MockActorNine.class);\n                return actor;\n            }\n        });\n        actorSystem.register(actor);\n        assertTrue(actor.message.getContent().equals(1));\n    }", "signature": "void sendMessageToPostponedActorThenReceiveItWhenTheActorRegisters()", "full_signature": "@Test public void sendMessageToPostponedActorThenReceiveItWhenTheActorRegisters()", "class_method_signature": "ActorSchedulerTest.sendMessageToPostponedActorThenReceiveItWhenTheActorRegisters()", "testcase": true, "constructor": false, "invocations": ["getInstance", "apply", "register", "postpone", "send", "after", "register", "assertTrue", "equals", "getContent"]}, "focal_class": {"identifier": "ActorScheduler", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Object lock = new Object();", "modifier": "static final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "static final HashMap<Class<?>, DisposablesGroup> schedules = new HashMap<>();", "modifier": "static final", "type": "HashMap<Class<?>, DisposablesGroup>", "declarator": "schedules = new HashMap<>()", "var_name": "schedules"}], "methods": [{"identifier": "ActorScheduler", "parameters": "()", "modifiers": "", "return": "", "signature": " ActorScheduler()", "full_signature": "  ActorScheduler()", "class_method_signature": "ActorScheduler.ActorScheduler()", "testcase": false, "constructor": true}, {"identifier": "after", "parameters": "(@IntRange(from = 0) long millis)", "modifiers": "@NonNull public static", "return": "ScheduledMessageSender", "signature": "ScheduledMessageSender after(@IntRange(from = 0) long millis)", "full_signature": "@NonNull public static ScheduledMessageSender after(@IntRange(from = 0) long millis)", "class_method_signature": "ActorScheduler.after(@IntRange(from = 0) long millis)", "testcase": false, "constructor": false}, {"identifier": "after", "parameters": "(@IntRange(from = 0) long millis, ActorSystemInstance actorSystem)", "modifiers": "@NonNull static", "return": "ScheduledMessageSender", "signature": "ScheduledMessageSender after(@IntRange(from = 0) long millis, ActorSystemInstance actorSystem)", "full_signature": "@NonNull static ScheduledMessageSender after(@IntRange(from = 0) long millis, ActorSystemInstance actorSystem)", "class_method_signature": "ActorScheduler.after(@IntRange(from = 0) long millis, ActorSystemInstance actorSystem)", "testcase": false, "constructor": false}, {"identifier": "getNonNullDisposableGroup", "parameters": "(Class<?> actorAddress)", "modifiers": "@NonNull static", "return": "DisposablesGroup", "signature": "DisposablesGroup getNonNullDisposableGroup(Class<?> actorAddress)", "full_signature": "@NonNull static DisposablesGroup getNonNullDisposableGroup(Class<?> actorAddress)", "class_method_signature": "ActorScheduler.getNonNullDisposableGroup(Class<?> actorAddress)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(@NonNull Class<?> actorAddress)", "modifiers": "public static", "return": "void", "signature": "void cancel(@NonNull Class<?> actorAddress)", "full_signature": "public static void cancel(@NonNull Class<?> actorAddress)", "class_method_signature": "ActorScheduler.cancel(@NonNull Class<?> actorAddress)", "testcase": false, "constructor": false}, {"identifier": "doCancel", "parameters": "(@NonNull Class<?> actorAddress)", "modifiers": "private static", "return": "void", "signature": "void doCancel(@NonNull Class<?> actorAddress)", "full_signature": "private static void doCancel(@NonNull Class<?> actorAddress)", "class_method_signature": "ActorScheduler.doCancel(@NonNull Class<?> actorAddress)", "testcase": false, "constructor": false}], "file": "Actor-Lite/src/main/java/com/actors/ActorScheduler.java"}, "focal_method": {"identifier": "after", "parameters": "(@IntRange(from = 0) long millis)", "modifiers": "@NonNull public static", "return": "ScheduledMessageSender", "body": "@NonNull\n    public static ScheduledMessageSender after(@IntRange(from = 0) long millis) {\n        return after(millis, ActorSystemInstance.getInstance(null));\n    }", "signature": "ScheduledMessageSender after(@IntRange(from = 0) long millis)", "full_signature": "@NonNull public static ScheduledMessageSender after(@IntRange(from = 0) long millis)", "class_method_signature": "ActorScheduler.after(@IntRange(from = 0) long millis)", "testcase": false, "constructor": false, "invocations": ["after", "getInstance"]}, "repository": {"repo_id": 115371169, "url": "https://github.com/Ahmed-Adel-Ismail/ActorLite", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 42, "size": 265, "license": "licensed"}}