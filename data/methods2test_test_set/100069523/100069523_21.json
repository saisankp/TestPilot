{"test_class": {"identifier": "JarUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "module/com.sandpolis.core.foundation/src/test/java/com/sandpolis/core/foundation/util/JarUtilTest.java"}, "test_case": {"identifier": "getManifestValue_3", "parameters": "()", "modifiers": "@Test @DisplayName(\"Try to get a value from a nonexistent manifest\")", "return": "void", "body": "@Test\n\t@DisplayName(\"Try to get a value from a nonexistent manifest\")\n\tvoid getManifestValue_3() {\n\t\tassertThrows(IOException.class,\n\t\t\t\t() -> getManifestValue(new File(\"src/test/resources/test6.jar\"), \"test-attribute\"));\n\t}", "signature": "void getManifestValue_3()", "full_signature": "@Test @DisplayName(\"Try to get a value from a nonexistent manifest\") void getManifestValue_3()", "class_method_signature": "JarUtilTest.getManifestValue_3()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "getManifestValue"]}, "focal_class": {"identifier": "JarUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getManifestValue", "parameters": "(Path file, String attribute)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> getManifestValue(Path file, String attribute)", "full_signature": "public static Optional<String> getManifestValue(Path file, String attribute)", "class_method_signature": "JarUtil.getManifestValue(Path file, String attribute)", "testcase": false, "constructor": false}, {"identifier": "getManifestValue", "parameters": "(File file, String attribute)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> getManifestValue(File file, String attribute)", "full_signature": "public static Optional<String> getManifestValue(File file, String attribute)", "class_method_signature": "JarUtil.getManifestValue(File file, String attribute)", "testcase": false, "constructor": false}, {"identifier": "getManifest", "parameters": "(Path file)", "modifiers": "public static", "return": "Attributes", "signature": "Attributes getManifest(Path file)", "full_signature": "public static Attributes getManifest(Path file)", "class_method_signature": "JarUtil.getManifest(Path file)", "testcase": false, "constructor": false}, {"identifier": "getManifest", "parameters": "(File file)", "modifiers": "public static", "return": "Attributes", "signature": "Attributes getManifest(File file)", "full_signature": "public static Attributes getManifest(File file)", "class_method_signature": "JarUtil.getManifest(File file)", "testcase": false, "constructor": false}, {"identifier": "getResourceSize", "parameters": "(Path file, String resource)", "modifiers": "public static", "return": "long", "signature": "long getResourceSize(Path file, String resource)", "full_signature": "public static long getResourceSize(Path file, String resource)", "class_method_signature": "JarUtil.getResourceSize(Path file, String resource)", "testcase": false, "constructor": false}, {"identifier": "getResourceSize", "parameters": "(File file, String resource)", "modifiers": "public static", "return": "long", "signature": "long getResourceSize(File file, String resource)", "full_signature": "public static long getResourceSize(File file, String resource)", "class_method_signature": "JarUtil.getResourceSize(File file, String resource)", "testcase": false, "constructor": false}, {"identifier": "getResourceUrl", "parameters": "(Path file, String resource)", "modifiers": "public static", "return": "URL", "signature": "URL getResourceUrl(Path file, String resource)", "full_signature": "public static URL getResourceUrl(Path file, String resource)", "class_method_signature": "JarUtil.getResourceUrl(Path file, String resource)", "testcase": false, "constructor": false}, {"identifier": "resourceExists", "parameters": "(Path file, String resource)", "modifiers": "public static", "return": "boolean", "signature": "boolean resourceExists(Path file, String resource)", "full_signature": "public static boolean resourceExists(Path file, String resource)", "class_method_signature": "JarUtil.resourceExists(Path file, String resource)", "testcase": false, "constructor": false}, {"identifier": "JarUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " JarUtil()", "full_signature": "private  JarUtil()", "class_method_signature": "JarUtil.JarUtil()", "testcase": false, "constructor": true}], "file": "module/com.sandpolis.core.foundation/src/main/java/com/sandpolis/core/foundation/util/JarUtil.java"}, "focal_method": {"identifier": "getManifestValue", "parameters": "(Path file, String attribute)", "modifiers": "public static", "return": "Optional<String>", "body": "public static Optional<String> getManifestValue(Path file, String attribute) throws IOException {\n\t\tcheckNotNull(file);\n\t\tcheckNotNull(attribute);\n\n\t\treturn getManifestValue(file.toFile(), attribute);\n\t}", "signature": "Optional<String> getManifestValue(Path file, String attribute)", "full_signature": "public static Optional<String> getManifestValue(Path file, String attribute)", "class_method_signature": "JarUtil.getManifestValue(Path file, String attribute)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "getManifestValue", "toFile"]}, "repository": {"repo_id": 100069523, "url": "https://github.com/Subterranean-Security/Sandpolis", "stars": 25, "created": "8/11/2017 8:55:30 PM +00:00", "updates": "2020-01-27T01:41:01+00:00", "fork": "False", "license": "licensed"}}