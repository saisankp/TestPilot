{"test_class": {"identifier": "UtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/UtilTest.java"}, "test_case": {"identifier": "testValidateKeyset_withDestroyedKey_shouldWork", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testValidateKeyset_withDestroyedKey_shouldWork() throws Exception {\n    String keyValue = \"01234567890123456\";\n    Keyset validKeyset =\n        TestUtil.createKeyset(\n            TestUtil.createKey(\n                TestUtil.createHmacKeyData(keyValue.getBytes(\"UTF-8\"), 16),\n                42,\n                KeyStatusType.ENABLED,\n                OutputPrefixType.TINK),\n            TestUtil.createKey(\n                TestUtil.createHmacKeyData(keyValue.getBytes(\"UTF-8\"), 16),\n                42,\n                KeyStatusType.DESTROYED,\n                OutputPrefixType.TINK));\n    try {\n      Util.validateKeyset(validKeyset);\n    } catch (GeneralSecurityException e) {\n      fail(\"Valid keyset, should not fail: \" + e);\n    }\n  }", "signature": "void testValidateKeyset_withDestroyedKey_shouldWork()", "full_signature": "@Test public void testValidateKeyset_withDestroyedKey_shouldWork()", "class_method_signature": "UtilTest.testValidateKeyset_withDestroyedKey_shouldWork()", "testcase": true, "constructor": false, "invocations": ["createKeyset", "createKey", "createHmacKeyData", "getBytes", "createKey", "createHmacKeyData", "getBytes", "validateKeyset", "fail"]}, "focal_class": {"identifier": "Util", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "public static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}], "methods": [{"identifier": "getKeysetInfo", "parameters": "(Keyset keyset)", "modifiers": "public static", "return": "KeysetInfo", "signature": "KeysetInfo getKeysetInfo(Keyset keyset)", "full_signature": "public static KeysetInfo getKeysetInfo(Keyset keyset)", "class_method_signature": "Util.getKeysetInfo(Keyset keyset)", "testcase": false, "constructor": false}, {"identifier": "getKeyInfo", "parameters": "(Keyset.Key key)", "modifiers": "public static", "return": "KeysetInfo.KeyInfo", "signature": "KeysetInfo.KeyInfo getKeyInfo(Keyset.Key key)", "full_signature": "public static KeysetInfo.KeyInfo getKeyInfo(Keyset.Key key)", "class_method_signature": "Util.getKeyInfo(Keyset.Key key)", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(Keyset.Key key)", "modifiers": "public static", "return": "void", "signature": "void validateKey(Keyset.Key key)", "full_signature": "public static void validateKey(Keyset.Key key)", "class_method_signature": "Util.validateKey(Keyset.Key key)", "testcase": false, "constructor": false}, {"identifier": "validateKeyset", "parameters": "(Keyset keyset)", "modifiers": "public static", "return": "void", "signature": "void validateKeyset(Keyset keyset)", "full_signature": "public static void validateKeyset(Keyset keyset)", "class_method_signature": "Util.validateKeyset(Keyset keyset)", "testcase": false, "constructor": false}, {"identifier": "readAll", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readAll(InputStream inputStream)", "full_signature": "public static byte[] readAll(InputStream inputStream)", "class_method_signature": "Util.readAll(InputStream inputStream)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/Util.java"}, "focal_method": {"identifier": "validateKeyset", "parameters": "(Keyset keyset)", "modifiers": "public static", "return": "void", "body": "public static void validateKeyset(Keyset keyset) throws GeneralSecurityException {\n    int primaryKeyId = keyset.getPrimaryKeyId();\n    boolean hasPrimaryKey = false;\n    boolean containsOnlyPublicKeyMaterial = true;\n    int numEnabledKeys = 0;\n    for (Keyset.Key key : keyset.getKeyList()) {\n      if (key.getStatus() != KeyStatusType.ENABLED) {\n        continue;\n      }\n      validateKey(key);\n      if (key.getKeyId() == primaryKeyId) {\n        if (hasPrimaryKey) {\n          throw new GeneralSecurityException(\"keyset contains multiple primary keys\");\n        }\n        hasPrimaryKey = true;\n      }\n      if (key.getKeyData().getKeyMaterialType() != KeyData.KeyMaterialType.ASYMMETRIC_PUBLIC) {\n        containsOnlyPublicKeyMaterial = false;\n      }\n      numEnabledKeys++;\n    }\n    if (numEnabledKeys == 0) {\n      throw new GeneralSecurityException(\"keyset must contain at least one ENABLED key\");\n    }\n    // Checks that a keyset contains a primary key, except when it contains only public keys.\n    if (!hasPrimaryKey && !containsOnlyPublicKeyMaterial) {\n      throw new GeneralSecurityException(\"keyset doesn't contain a valid primary key\");\n    }\n  }", "signature": "void validateKeyset(Keyset keyset)", "full_signature": "public static void validateKeyset(Keyset keyset)", "class_method_signature": "Util.validateKeyset(Keyset keyset)", "testcase": false, "constructor": false, "invocations": ["getPrimaryKeyId", "getKeyList", "getStatus", "validateKey", "getKeyId", "getKeyMaterialType", "getKeyData"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}