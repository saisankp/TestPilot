{"test_class": {"identifier": "PivotUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "subdomains/excel/applib/src/test/java/org/apache/isis/subdomains/excel/applib/dom/util/PivotUtilsTest.java"}, "test_case": {"identifier": "cellValueEqualsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cellValueEqualsTest() {\n\n        // given\n        XSSFWorkbook workbook = new XSSFWorkbook();\n        XSSFSheet sheet = workbook.createSheet();\n        Row r = sheet.createRow(0);\n        Cell c1 = r.createCell(0);\n        Cell c2 = r.createCell(1);\n\n        // when numeric (double)\n        c1.setCellValue(1.000000000000001);\n        c2.setCellValue(1);\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(false);\n\n        // when (limits of double comparison)\n        c1.setCellValue(1.0000000000000001);\n        c2.setCellValue(1);\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(true);\n\n        // when\n        c1.setCellValue(1);\n        c2.setCellValue(0.9999999999999999);\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(false);\n\n        // when (limits of double comparison)\n        c1.setCellValue(1);\n        c2.setCellValue(0.99999999999999999);\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(true);\n\n        // when (empty cells or cells with values not set, can't compare)\n        c1 = r.createCell(0);\n        c2 = r.createCell(1);\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(true);\n\n        // when (type not equal)\n        c1 = r.createCell(0);\n        c1.setCellType(CellType.BLANK);\n        c2 = r.createCell(1);\n        c2.setCellType(CellType.BOOLEAN);\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(false);\n\n        // when string\n        c1 = r.createCell(0);\n        c2 = r.createCell(1);\n        c1.setCellValue(\"a\");\n        c2.setCellValue(\"a\");\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(true);\n\n        // when case sensitive\n        c1.setCellValue(\"a\");\n        c2.setCellValue(\"A\");\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(false);\n\n        // when empty string\n        c1.setCellValue(\"\");\n        c2.setCellValue(\"\");\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(true);\n\n        // when empty string and empty cell\n        c1 = r.createCell(0);\n        c2 = r.createCell(1);\n        c1.setCellValue(\"\");\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(false);\n\n        // when string and numeric\n        c1 = r.createCell(0);\n        c2 = r.createCell(1);\n        c1.setCellValue(\"a\");\n        c2.setCellType(CellType.NUMERIC);\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(false);\n\n        // when string and numeric\n        c1 = r.createCell(0);\n        c2 = r.createCell(1);\n        c1.setCellValue(\"a\");\n        c2.setCellValue(0);\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(false);\n\n        // when boolean\n        c1.setCellValue(true);\n        c2.setCellValue(true);\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(true);\n\n        // when\n        c1.setCellValue(false);\n        c2.setCellValue(true);\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(false);\n\n        // when 0 (false) 1 (true) value in boolean cell supported\n        c1.setCellValue(true);\n        c2.setCellValue(1);\n        c2.setCellType(CellType.BOOLEAN);\n\n        // then\n        Assertions.assertThat(PivotUtils.cellValueEquals(c1,c2)).isEqualTo(true);\n\n    }", "signature": "void cellValueEqualsTest()", "full_signature": "@Test public void cellValueEqualsTest()", "class_method_signature": "PivotUtilsTest.cellValueEqualsTest()", "testcase": true, "constructor": false, "invocations": ["createSheet", "createRow", "createCell", "createCell", "setCellValue", "setCellValue", "isEqualTo", "assertThat", "cellValueEquals", "setCellValue", "setCellValue", "isEqualTo", "assertThat", "cellValueEquals", "setCellValue", "setCellValue", "isEqualTo", "assertThat", "cellValueEquals", "setCellValue", "setCellValue", "isEqualTo", "assertThat", "cellValueEquals", "createCell", "createCell", "isEqualTo", "assertThat", "cellValueEquals", "createCell", "setCellType", "createCell", "setCellType", "isEqualTo", "assertThat", "cellValueEquals", "createCell", "createCell", "setCellValue", "setCellValue", "isEqualTo", "assertThat", "cellValueEquals", "setCellValue", "setCellValue", "isEqualTo", "assertThat", "cellValueEquals", "setCellValue", "setCellValue", "isEqualTo", "assertThat", "cellValueEquals", "createCell", "createCell", "setCellValue", "isEqualTo", "assertThat", "cellValueEquals", "createCell", "createCell", "setCellValue", "setCellType", "isEqualTo", "assertThat", "cellValueEquals", "createCell", "createCell", "setCellValue", "setCellValue", "isEqualTo", "assertThat", "cellValueEquals", "setCellValue", "setCellValue", "isEqualTo", "assertThat", "cellValueEquals", "setCellValue", "setCellValue", "isEqualTo", "assertThat", "cellValueEquals", "setCellValue", "setCellValue", "setCellType", "isEqualTo", "assertThat", "cellValueEquals"]}, "focal_class": {"identifier": "PivotUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createAnnotationRow", "parameters": "(final Row annotationRow, final List<String> annotationList)", "modifiers": "public static", "return": "void", "signature": "void createAnnotationRow(final Row annotationRow, final List<String> annotationList)", "full_signature": "public static void createAnnotationRow(final Row annotationRow, final List<String> annotationList)", "class_method_signature": "PivotUtils.createAnnotationRow(final Row annotationRow, final List<String> annotationList)", "testcase": false, "constructor": false}, {"identifier": "createOrderRow", "parameters": "(final Row orderRow, final List<Integer> orderList)", "modifiers": "public static", "return": "void", "signature": "void createOrderRow(final Row orderRow, final List<Integer> orderList)", "full_signature": "public static void createOrderRow(final Row orderRow, final List<Integer> orderList)", "class_method_signature": "PivotUtils.createOrderRow(final Row orderRow, final List<Integer> orderList)", "testcase": false, "constructor": false}, {"identifier": "createTypeRow", "parameters": "(final Row typeRow, final List<AggregationType> typeList)", "modifiers": "public static", "return": "void", "signature": "void createTypeRow(final Row typeRow, final List<AggregationType> typeList)", "full_signature": "public static void createTypeRow(final Row typeRow, final List<AggregationType> typeList)", "class_method_signature": "PivotUtils.createTypeRow(final Row typeRow, final List<AggregationType> typeList)", "testcase": false, "constructor": false}, {"identifier": "cellValueEquals", "parameters": "(Cell cell, Cell other)", "modifiers": "static", "return": "boolean", "signature": "boolean cellValueEquals(Cell cell, Cell other)", "full_signature": "static boolean cellValueEquals(Cell cell, Cell other)", "class_method_signature": "PivotUtils.cellValueEquals(Cell cell, Cell other)", "testcase": false, "constructor": false}, {"identifier": "addCellValueTo", "parameters": "(Cell source, Cell target)", "modifiers": "static", "return": "Cell", "signature": "Cell addCellValueTo(Cell source, Cell target)", "full_signature": "static Cell addCellValueTo(Cell source, Cell target)", "class_method_signature": "PivotUtils.addCellValueTo(Cell source, Cell target)", "testcase": false, "constructor": false}, {"identifier": "copyCell", "parameters": "(Cell source, Cell target)", "modifiers": "static", "return": "void", "signature": "void copyCell(Cell source, Cell target)", "full_signature": "static void copyCell(Cell source, Cell target)", "class_method_signature": "PivotUtils.copyCell(Cell source, Cell target)", "testcase": false, "constructor": false}], "file": "subdomains/excel/applib/src/main/java/org/apache/isis/subdomains/excel/applib/dom/util/PivotUtils.java"}, "focal_method": {"identifier": "cellValueEquals", "parameters": "(Cell cell, Cell other)", "modifiers": "static", "return": "boolean", "body": "static boolean cellValueEquals(Cell cell, Cell other) {\n\n        if (cell != null && other != null && cell.getCellType() == other.getCellType()) {\n\n            switch (cell.getCellType()) {\n                case BLANK:\n                    if (other.getCellType()==CellType.BLANK) {\n                        return true;\n                    }\n                    break;\n                case BOOLEAN:\n                    if (cell.getBooleanCellValue() == other.getBooleanCellValue()){\n                        return true;\n                    }\n                    break;\n                case ERROR:\n                    if (cell.getErrorCellValue() == other.getErrorCellValue()){\n                        return true;\n                    }\n                    break;\n                case FORMULA:\n                    break;\n                case NUMERIC:\n                    if (cell.getNumericCellValue() == other.getNumericCellValue()){\n                        return true;\n                    }\n                    break;\n                case STRING:\n                    if (cell.getStringCellValue().equals(other.getStringCellValue())){\n                        return true;\n                    }\n            }\n        }\n\n        return  false;\n    }", "signature": "boolean cellValueEquals(Cell cell, Cell other)", "full_signature": "static boolean cellValueEquals(Cell cell, Cell other)", "class_method_signature": "PivotUtils.cellValueEquals(Cell cell, Cell other)", "testcase": false, "constructor": false, "invocations": ["getCellType", "getCellType", "getCellType", "getCellType", "getBooleanCellValue", "getBooleanCellValue", "getErrorCellValue", "getErrorCellValue", "getNumericCellValue", "getNumericCellValue", "equals", "getStringCellValue", "getStringCellValue"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}