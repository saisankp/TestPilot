{"test_class": {"identifier": "ContextJdbcEventListenerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JdbcEventListenerFactory delegate;", "modifier": "private", "type": "JdbcEventListenerFactory", "declarator": "delegate", "var_name": "delegate"}], "file": "datasource-decorator-spring-boot-autoconfigure/src/test/java/com/github/gavlyukovskiy/boot/jdbc/decorator/p6spy/ContextJdbcEventListenerFactoryTest.java"}, "test_case": {"identifier": "shouldReuseCompoundListenerFromFactory", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldReuseCompoundListenerFromFactory() {\n        SimpleJdbcEventListener listener1 = new SimpleJdbcEventListener() {};\n        Mockito.when(delegate.createJdbcEventListener()).thenReturn(new CompoundJdbcEventListener());\n        ContextJdbcEventListenerFactory contextJdbcEventListenerFactory = new ContextJdbcEventListenerFactory(delegate, Collections.singletonList(listener1));\n\n        CompoundJdbcEventListener jdbcEventListener = (CompoundJdbcEventListener) contextJdbcEventListenerFactory.createJdbcEventListener();\n        assertThat(jdbcEventListener.getEventListeners()).hasSize(1);\n        assertThat(jdbcEventListener.getEventListeners()).contains(listener1);\n    }", "signature": "void shouldReuseCompoundListenerFromFactory()", "full_signature": "@Test void shouldReuseCompoundListenerFromFactory()", "class_method_signature": "ContextJdbcEventListenerFactoryTest.shouldReuseCompoundListenerFromFactory()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "createJdbcEventListener", "singletonList", "createJdbcEventListener", "hasSize", "assertThat", "getEventListeners", "contains", "assertThat", "getEventListeners"]}, "focal_class": {"identifier": "ContextJdbcEventListenerFactory", "superclass": "", "interfaces": "implements JdbcEventListenerFactory", "fields": [{"original_string": "private final CompoundJdbcEventListener compoundJdbcEventListener;", "modifier": "private final", "type": "CompoundJdbcEventListener", "declarator": "compoundJdbcEventListener", "var_name": "compoundJdbcEventListener"}], "methods": [{"identifier": "ContextJdbcEventListenerFactory", "parameters": "(JdbcEventListenerFactory delegate, List<JdbcEventListener> listeners)", "modifiers": "", "return": "", "signature": " ContextJdbcEventListenerFactory(JdbcEventListenerFactory delegate, List<JdbcEventListener> listeners)", "full_signature": "  ContextJdbcEventListenerFactory(JdbcEventListenerFactory delegate, List<JdbcEventListener> listeners)", "class_method_signature": "ContextJdbcEventListenerFactory.ContextJdbcEventListenerFactory(JdbcEventListenerFactory delegate, List<JdbcEventListener> listeners)", "testcase": false, "constructor": true}, {"identifier": "createJdbcEventListener", "parameters": "()", "modifiers": "@Override public", "return": "JdbcEventListener", "signature": "JdbcEventListener createJdbcEventListener()", "full_signature": "@Override public JdbcEventListener createJdbcEventListener()", "class_method_signature": "ContextJdbcEventListenerFactory.createJdbcEventListener()", "testcase": false, "constructor": false}], "file": "datasource-decorator-spring-boot-autoconfigure/src/main/java/com/github/gavlyukovskiy/boot/jdbc/decorator/p6spy/ContextJdbcEventListenerFactory.java"}, "focal_method": {"identifier": "createJdbcEventListener", "parameters": "()", "modifiers": "@Override public", "return": "JdbcEventListener", "body": "@Override\n    public JdbcEventListener createJdbcEventListener() {\n        return compoundJdbcEventListener;\n    }", "signature": "JdbcEventListener createJdbcEventListener()", "full_signature": "@Override public JdbcEventListener createJdbcEventListener()", "class_method_signature": "ContextJdbcEventListenerFactory.createJdbcEventListener()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 88676590, "url": "https://github.com/gavlyukovskiy/spring-boot-data-source-decorator", "stars": 160, "created": "4/18/2017 10:39:27 PM +00:00", "updates": "2020-01-25T22:55:27+00:00", "fork": "False", "license": "licensed"}}