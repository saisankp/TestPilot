{"test_class": {"identifier": "ProcessInitialDataQualityTest", "superclass": "extends RobolectricTestWithConfig", "interfaces": "", "fields": [{"original_string": "private static final long COMPUTATION_GRACE_TIME = Constants.SECOND_IN_MS;", "modifier": "private static final", "type": "long", "declarator": "COMPUTATION_GRACE_TIME = Constants.SECOND_IN_MS", "var_name": "COMPUTATION_GRACE_TIME"}], "file": "app/src/test/java/com/eveningoutpost/dexdrip/Models/ProcessInitialDataQualityTest.java"}, "test_case": {"identifier": "testGetInitialDataQuality", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetInitialDataQuality() {\n        // result object store\n        ProcessInitialDataQuality.InitialDataQuality test;\n\n        // try with null data set\n        test = ProcessInitialDataQuality.getInitialDataQuality(null);\n\n        assertThat(\"Result object not null\", test != null, is(true));\n        assertThat(\"Null input should fail\", test.pass, is(false));\n\n        // try with empty data set\n        List<BgReading> bgReadingList = new ArrayList<>();\n        test = ProcessInitialDataQuality.getInitialDataQuality(bgReadingList);\n        assertThat(\"Result object not null\", test != null, is(true));\n        assertThat(\"Empty input should fail\", test.pass, is(false));\n\n        // create an assortment of data sets with data spaced out by different frequencies\n        for (int frequency = 5; frequency < 21; frequency = frequency + 1) {\n            bgReadingList.clear();\n            for (int i = 1; i <= 3; i++) {\n                // add an element\n                bgReadingList.add(getGoodMockBgReading(i * Constants.MINUTE_IN_MS * frequency)); // we add older readings to the end\n                test = ProcessInitialDataQuality.getInitialDataQuality(bgReadingList);\n                log(\"Frequency: \" + frequency + \" Loop \" + i + \" size:\" + bgReadingList.size()\n                        + \" Newest age: \" + JoH.niceTimeScalar(JoH.msSince(bgReadingList.get(0).timestamp))\n                        + \" Oldest age: \" + JoH.niceTimeScalar(JoH.msSince(bgReadingList.get(bgReadingList.size() - 1).timestamp))\n                        + \" / Mock Advice: \" + test.advice + \" VERDICT: \" + (test.pass ? \"PASS\" : \"NOT PASSED\"));\n\n                assertThat(\"Result object not null\", test != null, is(true));\n                if (i < 3) assertThat(\"Empty input should fail\", test.pass, is(false));\n                assertThat(\"There should be some advice on loop \" + i, test.advice.length() > 0, is(true));\n\n                final long ms_since = (JoH.msSince(bgReadingList.get(bgReadingList.size() - 1).timestamp));\n                if ((ms_since > Constants.STALE_CALIBRATION_CUT_OFF + COMPUTATION_GRACE_TIME) || (i < 3)) {\n                    assertThat(\"Stale data should fail: i:\" + i + \" tm:\" + ms_since, test.pass, is(false));\n                }\n                if ((ms_since <= Constants.STALE_CALIBRATION_CUT_OFF) && (bgReadingList.size() >= 3)) {\n                    assertThat(\"Good data should pass\", test.pass, is(true));\n                }\n\n            }\n        }\n\n    }", "signature": "void testGetInitialDataQuality()", "full_signature": "@Test public void testGetInitialDataQuality()", "class_method_signature": "ProcessInitialDataQualityTest.testGetInitialDataQuality()", "testcase": true, "constructor": false, "invocations": ["getInitialDataQuality", "assertThat", "is", "assertThat", "is", "getInitialDataQuality", "assertThat", "is", "assertThat", "is", "clear", "add", "getGoodMockBgReading", "getInitialDataQuality", "log", "size", "niceTimeScalar", "msSince", "get", "niceTimeScalar", "msSince", "get", "size", "assertThat", "is", "assertThat", "is", "assertThat", "length", "is", "msSince", "get", "size", "assertThat", "is", "size", "assertThat", "is"]}, "focal_class": {"identifier": "ProcessInitialDataQuality", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getInitialDataQuality", "parameters": "()", "modifiers": "public static", "return": "InitialDataQuality", "signature": "InitialDataQuality getInitialDataQuality()", "full_signature": "public static InitialDataQuality getInitialDataQuality()", "class_method_signature": "ProcessInitialDataQuality.getInitialDataQuality()", "testcase": false, "constructor": false}, {"identifier": "getInitialDataQuality", "parameters": "(final List<BgReading> uncalculated)", "modifiers": "public static", "return": "InitialDataQuality", "signature": "InitialDataQuality getInitialDataQuality(final List<BgReading> uncalculated)", "full_signature": "public static InitialDataQuality getInitialDataQuality(final List<BgReading> uncalculated)", "class_method_signature": "ProcessInitialDataQuality.getInitialDataQuality(final List<BgReading> uncalculated)", "testcase": false, "constructor": false}, {"identifier": "gs", "parameters": "(int id)", "modifiers": "private static", "return": "String", "signature": "String gs(int id)", "full_signature": "private static String gs(int id)", "class_method_signature": "ProcessInitialDataQuality.gs(int id)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/Models/ProcessInitialDataQuality.java"}, "focal_method": {"identifier": "getInitialDataQuality", "parameters": "()", "modifiers": "public static", "return": "InitialDataQuality", "body": "public static InitialDataQuality getInitialDataQuality() {\n        // get uncalculated data\n        JoH.clearCache();\n        final List<BgReading> uncalculated = BgReading.latestUnCalculated(3);\n        return getInitialDataQuality(uncalculated);\n    }", "signature": "InitialDataQuality getInitialDataQuality()", "full_signature": "public static InitialDataQuality getInitialDataQuality()", "class_method_signature": "ProcessInitialDataQuality.getInitialDataQuality()", "testcase": false, "constructor": false, "invocations": ["clearCache", "latestUnCalculated", "getInitialDataQuality"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}