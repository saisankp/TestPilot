{"test_class": {"identifier": "JDBCCertRecordStoreFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/JDBCCertRecordStoreFactoryTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate() {\n        \n        System.setProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_STORE, \"jdbc:mysql://localhost\");\n        System.setProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_USER, \"user\");\n        System.setProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_PASSWORD, \"password\");\n        \n        PrivateKeyStore keyStore = Mockito.mock(PrivateKeyStore.class);\n        Mockito.doReturn(\"password\").when(keyStore).getApplicationSecret(\"jdbc\", \"password\");\n        \n        JDBCCertRecordStoreFactory factory = new JDBCCertRecordStoreFactory();\n        CertRecordStore store = factory.create(keyStore);\n        assertNotNull(store);\n    }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "JDBCCertRecordStoreFactoryTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "setProperty", "mock", "getApplicationSecret", "when", "doReturn", "create", "assertNotNull"]}, "focal_class": {"identifier": "JDBCCertRecordStoreFactory", "superclass": "", "interfaces": "implements CertRecordStoreFactory", "fields": [{"original_string": "private static final String JDBC = \"jdbc\";", "modifier": "private static final", "type": "String", "declarator": "JDBC = \"jdbc\"", "var_name": "JDBC"}], "methods": [{"identifier": "create", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "CertRecordStore", "signature": "CertRecordStore create(PrivateKeyStore keyStore)", "full_signature": "@Override public CertRecordStore create(PrivateKeyStore keyStore)", "class_method_signature": "JDBCCertRecordStoreFactory.create(PrivateKeyStore keyStore)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/JDBCCertRecordStoreFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "CertRecordStore", "body": "@Override\n    public CertRecordStore create(PrivateKeyStore keyStore) {\n        \n        final String jdbcStore = System.getProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_STORE);\n        final String jdbcUser = System.getProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_USER);\n        final String password = System.getProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_PASSWORD, \"\");\n        final String jdbcAppName = System.getProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_APP_NAME, JDBC);\n\n        String jdbcPassword = keyStore.getApplicationSecret(jdbcAppName, password);\n            \n        Properties props = new Properties();\n        props.setProperty(ZTSConsts.DB_PROP_USER, jdbcUser);\n        props.setProperty(ZTSConsts.DB_PROP_PASSWORD, jdbcPassword);\n        props.setProperty(ZTSConsts.DB_PROP_VERIFY_SERVER_CERT,\n                System.getProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_VERIFY_SERVER_CERT, \"false\"));\n        props.setProperty(ZTSConsts.DB_PROP_USE_SSL,\n                System.getProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_USE_SSL, \"false\"));\n\n        PoolableDataSource src = DataSourceFactory.create(jdbcStore, props);\n\n        // set default timeout for our connections\n\n        JDBCCertRecordStore certStore = new JDBCCertRecordStore(src);\n        int opTimeout = Integer.parseInt(System.getProperty(ZTSConsts.ZTS_PROP_CERT_OP_TIMEOUT, \"10\"));\n        certStore.setOperationTimeout(opTimeout);\n\n        return certStore;\n    }", "signature": "CertRecordStore create(PrivateKeyStore keyStore)", "full_signature": "@Override public CertRecordStore create(PrivateKeyStore keyStore)", "class_method_signature": "JDBCCertRecordStoreFactory.create(PrivateKeyStore keyStore)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getProperty", "getProperty", "getProperty", "getApplicationSecret", "setProperty", "setProperty", "setProperty", "getProperty", "setProperty", "getProperty", "create", "parseInt", "getProperty", "setOperationTimeout"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}