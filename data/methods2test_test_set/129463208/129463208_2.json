{"test_class": {"identifier": "Neo4jImporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static Neo4jRule neo4j;", "modifier": "@ClassRule\n    public static", "type": "Neo4jRule", "declarator": "neo4j", "var_name": "neo4j"}, {"original_string": "private static Driver driver;", "modifier": "private static", "type": "Driver", "declarator": "driver", "var_name": "driver"}], "file": "neuprint/src/test/java/org/janelia/flyem/neuprint/Neo4jImporterTest.java"}, "test_case": {"identifier": "shouldNotBeAbleToAddDuplicateSegmentsDueToUniquenessConstraint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotBeAbleToAddDuplicateSegmentsDueToUniquenessConstraint() {\n\n        Session session = driver.session();\n\n        LocalDateTime timeStamp = LocalDateTime.now().truncatedTo(ChronoUnit.SECONDS);\n\n        Neo4jImporter neo4jImporter = new Neo4jImporter(driver);\n\n        // test uniqueness constraint by trying to add again\n        String neuronsJsonPath = \"src/test/resources/neuronList.json\";\n        List<Neuron> neuronList = NeuPrintMain.readNeuronsJson(neuronsJsonPath);\n        neo4jImporter.addSegments(\"test\", neuronList, timeStamp);\n\n        int numberOfSegments2 = session.run(\"MATCH (n:Segment:test:`test-Segment`) RETURN count(n)\").single().get(0).asInt();\n\n        // 10 from neurons json + 2 from skeletons\n        Assert.assertEquals(12, numberOfSegments2);\n    }", "signature": "void shouldNotBeAbleToAddDuplicateSegmentsDueToUniquenessConstraint()", "full_signature": "@Test public void shouldNotBeAbleToAddDuplicateSegmentsDueToUniquenessConstraint()", "class_method_signature": "Neo4jImporterTest.shouldNotBeAbleToAddDuplicateSegmentsDueToUniquenessConstraint()", "testcase": true, "constructor": false, "invocations": ["session", "truncatedTo", "now", "readNeuronsJson", "addSegments", "asInt", "get", "single", "run", "assertEquals"]}, "focal_class": {"identifier": "Neo4jImporter", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private final Driver driver;", "modifier": "private final", "type": "Driver", "declarator": "driver", "var_name": "driver"}, {"original_string": "private final int statementsPerTransaction;", "modifier": "private final", "type": "int", "declarator": "statementsPerTransaction", "var_name": "statementsPerTransaction"}, {"original_string": "private final int connectionInfoStatementsPerTransaction;", "modifier": "private final", "type": "int", "declarator": "connectionInfoStatementsPerTransaction", "var_name": "connectionInfoStatementsPerTransaction"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Neo4jImporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Neo4jImporter.class)", "var_name": "LOG"}], "methods": [{"identifier": "Neo4jImporter", "parameters": "(final DbConfig dbConfig)", "modifiers": "public", "return": "", "signature": " Neo4jImporter(final DbConfig dbConfig)", "full_signature": "public  Neo4jImporter(final DbConfig dbConfig)", "class_method_signature": "Neo4jImporter.Neo4jImporter(final DbConfig dbConfig)", "testcase": false, "constructor": true}, {"identifier": "Neo4jImporter", "parameters": "(final Driver driver)", "modifiers": "public", "return": "", "signature": " Neo4jImporter(final Driver driver)", "full_signature": "public  Neo4jImporter(final Driver driver)", "class_method_signature": "Neo4jImporter.Neo4jImporter(final Driver driver)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "Neo4jImporter.close()", "testcase": false, "constructor": false}, {"identifier": "getBatch", "parameters": "()", "modifiers": "private", "return": "TransactionBatch", "signature": "TransactionBatch getBatch()", "full_signature": "private TransactionBatch getBatch()", "class_method_signature": "Neo4jImporter.getBatch()", "testcase": false, "constructor": false}, {"identifier": "prepDatabase", "parameters": "(final String dataset)", "modifiers": "public", "return": "void", "signature": "void prepDatabase(final String dataset)", "full_signature": "public void prepDatabase(final String dataset)", "class_method_signature": "Neo4jImporter.prepDatabase(final String dataset)", "testcase": false, "constructor": false}, {"identifier": "prepDatabaseForClusterNames", "parameters": "(final String dataset)", "modifiers": "public", "return": "void", "signature": "void prepDatabaseForClusterNames(final String dataset)", "full_signature": "public void prepDatabaseForClusterNames(final String dataset)", "class_method_signature": "Neo4jImporter.prepDatabaseForClusterNames(final String dataset)", "testcase": false, "constructor": false}, {"identifier": "indexBooleanRoiProperties", "parameters": "(String dataset)", "modifiers": "public", "return": "void", "signature": "void indexBooleanRoiProperties(String dataset)", "full_signature": "public void indexBooleanRoiProperties(String dataset)", "class_method_signature": "Neo4jImporter.indexBooleanRoiProperties(String dataset)", "testcase": false, "constructor": false}, {"identifier": "createMetaNodeWithDataModelNode", "parameters": "(final String dataset,\n                                                final float dataModelVersion,\n                                                final double preHPThreshold,\n                                                final double postHPThreshold,\n                                                final boolean addConnectionSetRoiInfoAndWeightHP,\n                                                final LocalDateTime timeStamp)", "modifiers": "public", "return": "void", "signature": "void createMetaNodeWithDataModelNode(final String dataset,\n                                                final float dataModelVersion,\n                                                final double preHPThreshold,\n                                                final double postHPThreshold,\n                                                final boolean addConnectionSetRoiInfoAndWeightHP,\n                                                final LocalDateTime timeStamp)", "full_signature": "public void createMetaNodeWithDataModelNode(final String dataset,\n                                                final float dataModelVersion,\n                                                final double preHPThreshold,\n                                                final double postHPThreshold,\n                                                final boolean addConnectionSetRoiInfoAndWeightHP,\n                                                final LocalDateTime timeStamp)", "class_method_signature": "Neo4jImporter.createMetaNodeWithDataModelNode(final String dataset,\n                                                final float dataModelVersion,\n                                                final double preHPThreshold,\n                                                final double postHPThreshold,\n                                                final boolean addConnectionSetRoiInfoAndWeightHP,\n                                                final LocalDateTime timeStamp)", "testcase": false, "constructor": false}, {"identifier": "addSynapsesWithRois", "parameters": "(final String dataset, final List<Synapse> synapseList, final LocalDateTime timeStamp)", "modifiers": "public", "return": "void", "signature": "void addSynapsesWithRois(final String dataset, final List<Synapse> synapseList, final LocalDateTime timeStamp)", "full_signature": "public void addSynapsesWithRois(final String dataset, final List<Synapse> synapseList, final LocalDateTime timeStamp)", "class_method_signature": "Neo4jImporter.addSynapsesWithRois(final String dataset, final List<Synapse> synapseList, final LocalDateTime timeStamp)", "testcase": false, "constructor": false}, {"identifier": "addSynapsesTo", "parameters": "(final String dataset, final List<SynapticConnection> synapticConnectionList, final LocalDateTime timeStamp)", "modifiers": "public", "return": "void", "signature": "void addSynapsesTo(final String dataset, final List<SynapticConnection> synapticConnectionList, final LocalDateTime timeStamp)", "full_signature": "public void addSynapsesTo(final String dataset, final List<SynapticConnection> synapticConnectionList, final LocalDateTime timeStamp)", "class_method_signature": "Neo4jImporter.addSynapsesTo(final String dataset, final List<SynapticConnection> synapticConnectionList, final LocalDateTime timeStamp)", "testcase": false, "constructor": false}, {"identifier": "addSegments", "parameters": "(final String dataset,\n                            final List<Neuron> neuronList,\n                            final LocalDateTime timeStamp)", "modifiers": "public", "return": "void", "signature": "void addSegments(final String dataset,\n                            final List<Neuron> neuronList,\n                            final LocalDateTime timeStamp)", "full_signature": "public void addSegments(final String dataset,\n                            final List<Neuron> neuronList,\n                            final LocalDateTime timeStamp)", "class_method_signature": "Neo4jImporter.addSegments(final String dataset,\n                            final List<Neuron> neuronList,\n                            final LocalDateTime timeStamp)", "testcase": false, "constructor": false}, {"identifier": "addConnectionInfo", "parameters": "(final String dataset,\n                                  final List<Neuron> neuronList,\n                                  final boolean addConnectionSetRoiInfoAndWeightHP,\n                                  final double preHPThreshold,\n                                  final double postHPThreshold,\n                                  final long neuronThreshold)", "modifiers": "public", "return": "void", "signature": "void addConnectionInfo(final String dataset,\n                                  final List<Neuron> neuronList,\n                                  final boolean addConnectionSetRoiInfoAndWeightHP,\n                                  final double preHPThreshold,\n                                  final double postHPThreshold,\n                                  final long neuronThreshold)", "full_signature": "public void addConnectionInfo(final String dataset,\n                                  final List<Neuron> neuronList,\n                                  final boolean addConnectionSetRoiInfoAndWeightHP,\n                                  final double preHPThreshold,\n                                  final double postHPThreshold,\n                                  final long neuronThreshold)", "class_method_signature": "Neo4jImporter.addConnectionInfo(final String dataset,\n                                  final List<Neuron> neuronList,\n                                  final boolean addConnectionSetRoiInfoAndWeightHP,\n                                  final double preHPThreshold,\n                                  final double postHPThreshold,\n                                  final long neuronThreshold)", "testcase": false, "constructor": false}, {"identifier": "updateSuperRoisRoiInfoAndCreateRoiPropertyString", "parameters": "(Set<String> datasetSuperLevelRois, RoiInfo datasetRoiInfo, String roiPropertyBaseString, Set<String> synapseOrNeuronRois, String synapseType)", "modifiers": "", "return": "StringBuilder", "signature": "StringBuilder updateSuperRoisRoiInfoAndCreateRoiPropertyString(Set<String> datasetSuperLevelRois, RoiInfo datasetRoiInfo, String roiPropertyBaseString, Set<String> synapseOrNeuronRois, String synapseType)", "full_signature": " StringBuilder updateSuperRoisRoiInfoAndCreateRoiPropertyString(Set<String> datasetSuperLevelRois, RoiInfo datasetRoiInfo, String roiPropertyBaseString, Set<String> synapseOrNeuronRois, String synapseType)", "class_method_signature": "Neo4jImporter.updateSuperRoisRoiInfoAndCreateRoiPropertyString(Set<String> datasetSuperLevelRois, RoiInfo datasetRoiInfo, String roiPropertyBaseString, Set<String> synapseOrNeuronRois, String synapseType)", "testcase": false, "constructor": false}, {"identifier": "addSkeletonNodes", "parameters": "(final String dataset, final List<Skeleton> skeletonList, final LocalDateTime timeStamp)", "modifiers": "public", "return": "void", "signature": "void addSkeletonNodes(final String dataset, final List<Skeleton> skeletonList, final LocalDateTime timeStamp)", "full_signature": "public void addSkeletonNodes(final String dataset, final List<Skeleton> skeletonList, final LocalDateTime timeStamp)", "class_method_signature": "Neo4jImporter.addSkeletonNodes(final String dataset, final List<Skeleton> skeletonList, final LocalDateTime timeStamp)", "testcase": false, "constructor": false}, {"identifier": "addMetaInfo", "parameters": "(String dataset, MetaInfo metaInfo, final LocalDateTime timeStamp)", "modifiers": "public", "return": "void", "signature": "void addMetaInfo(String dataset, MetaInfo metaInfo, final LocalDateTime timeStamp)", "full_signature": "public void addMetaInfo(String dataset, MetaInfo metaInfo, final LocalDateTime timeStamp)", "class_method_signature": "Neo4jImporter.addMetaInfo(String dataset, MetaInfo metaInfo, final LocalDateTime timeStamp)", "testcase": false, "constructor": false}, {"identifier": "getMaxInputRoi", "parameters": "(final Transaction tx, final String dataset, Long bodyId)", "modifiers": "private static", "return": "String", "signature": "String getMaxInputRoi(final Transaction tx, final String dataset, Long bodyId)", "full_signature": "private static String getMaxInputRoi(final Transaction tx, final String dataset, Long bodyId)", "class_method_signature": "Neo4jImporter.getMaxInputRoi(final Transaction tx, final String dataset, Long bodyId)", "testcase": false, "constructor": false}, {"identifier": "getMaxOutputRoi", "parameters": "(final Transaction tx, final String dataset, Long bodyId)", "modifiers": "private static", "return": "String", "signature": "String getMaxOutputRoi(final Transaction tx, final String dataset, Long bodyId)", "full_signature": "private static String getMaxOutputRoi(final Transaction tx, final String dataset, Long bodyId)", "class_method_signature": "Neo4jImporter.getMaxOutputRoi(final Transaction tx, final String dataset, Long bodyId)", "testcase": false, "constructor": false}, {"identifier": "getAllNeuronBodyIds", "parameters": "(final Transaction tx, final String dataset)", "modifiers": "private static", "return": "List<Long>", "signature": "List<Long> getAllNeuronBodyIds(final Transaction tx, final String dataset)", "full_signature": "private static List<Long> getAllNeuronBodyIds(final Transaction tx, final String dataset)", "class_method_signature": "Neo4jImporter.getAllNeuronBodyIds(final Transaction tx, final String dataset)", "testcase": false, "constructor": false}, {"identifier": "getAllNeuronBodyIdsWithoutNames", "parameters": "(final Transaction tx, final String dataset)", "modifiers": "private static", "return": "List<Long>", "signature": "List<Long> getAllNeuronBodyIdsWithoutNames(final Transaction tx, final String dataset)", "full_signature": "private static List<Long> getAllNeuronBodyIdsWithoutNames(final Transaction tx, final String dataset)", "class_method_signature": "Neo4jImporter.getAllNeuronBodyIdsWithoutNames(final Transaction tx, final String dataset)", "testcase": false, "constructor": false}, {"identifier": "getMetaNodeSuperLevelRois", "parameters": "(final Transaction tx, final String dataset)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> getMetaNodeSuperLevelRois(final Transaction tx, final String dataset)", "full_signature": "private static Set<String> getMetaNodeSuperLevelRois(final Transaction tx, final String dataset)", "class_method_signature": "Neo4jImporter.getMetaNodeSuperLevelRois(final Transaction tx, final String dataset)", "testcase": false, "constructor": false}, {"identifier": "getMetaNodeRoiInfo", "parameters": "(final Transaction tx, final String dataset)", "modifiers": "private static", "return": "RoiInfo", "signature": "RoiInfo getMetaNodeRoiInfo(final Transaction tx, final String dataset)", "full_signature": "private static RoiInfo getMetaNodeRoiInfo(final Transaction tx, final String dataset)", "class_method_signature": "Neo4jImporter.getMetaNodeRoiInfo(final Transaction tx, final String dataset)", "testcase": false, "constructor": false}, {"identifier": "getTotalPreCount", "parameters": "(final Transaction tx, final String dataset)", "modifiers": "private static", "return": "long", "signature": "long getTotalPreCount(final Transaction tx, final String dataset)", "full_signature": "private static long getTotalPreCount(final Transaction tx, final String dataset)", "class_method_signature": "Neo4jImporter.getTotalPreCount(final Transaction tx, final String dataset)", "testcase": false, "constructor": false}, {"identifier": "getTotalPostCount", "parameters": "(final Transaction tx, final String dataset)", "modifiers": "private static", "return": "long", "signature": "long getTotalPostCount(final Transaction tx, final String dataset)", "full_signature": "private static long getTotalPostCount(final Transaction tx, final String dataset)", "class_method_signature": "Neo4jImporter.getTotalPostCount(final Transaction tx, final String dataset)", "testcase": false, "constructor": false}, {"identifier": "getRoiPreCount", "parameters": "(final Transaction tx, final String dataset, final String roi)", "modifiers": "private static", "return": "long", "signature": "long getRoiPreCount(final Transaction tx, final String dataset, final String roi)", "full_signature": "private static long getRoiPreCount(final Transaction tx, final String dataset, final String roi)", "class_method_signature": "Neo4jImporter.getRoiPreCount(final Transaction tx, final String dataset, final String roi)", "testcase": false, "constructor": false}, {"identifier": "getRoiPostCount", "parameters": "(final Transaction tx, final String dataset, final String roi)", "modifiers": "private static", "return": "long", "signature": "long getRoiPostCount(final Transaction tx, final String dataset, final String roi)", "full_signature": "private static long getRoiPostCount(final Transaction tx, final String dataset, final String roi)", "class_method_signature": "Neo4jImporter.getRoiPostCount(final Transaction tx, final String dataset, final String roi)", "testcase": false, "constructor": false}, {"identifier": "entriesSortedByComparator", "parameters": "(Map<String, SynapseCounter> map, Comparator<Map.Entry<String, SynapseCounter>> comparator)", "modifiers": "private static", "return": "SortedSet<Map.Entry<String, SynapseCounter>>", "signature": "SortedSet<Map.Entry<String, SynapseCounter>> entriesSortedByComparator(Map<String, SynapseCounter> map, Comparator<Map.Entry<String, SynapseCounter>> comparator)", "full_signature": "private static SortedSet<Map.Entry<String, SynapseCounter>> entriesSortedByComparator(Map<String, SynapseCounter> map, Comparator<Map.Entry<String, SynapseCounter>> comparator)", "class_method_signature": "Neo4jImporter.entriesSortedByComparator(Map<String, SynapseCounter> map, Comparator<Map.Entry<String, SynapseCounter>> comparator)", "testcase": false, "constructor": false}, {"identifier": "sortRoisByPostCount", "parameters": "(Map<String, SynapseCounter> roiSynapseCountMap)", "modifiers": "public static", "return": "SortedSet<Map.Entry<String, SynapseCounter>>", "signature": "SortedSet<Map.Entry<String, SynapseCounter>> sortRoisByPostCount(Map<String, SynapseCounter> roiSynapseCountMap)", "full_signature": "public static SortedSet<Map.Entry<String, SynapseCounter>> sortRoisByPostCount(Map<String, SynapseCounter> roiSynapseCountMap)", "class_method_signature": "Neo4jImporter.sortRoisByPostCount(Map<String, SynapseCounter> roiSynapseCountMap)", "testcase": false, "constructor": false}, {"identifier": "sortRoisByPreCount", "parameters": "(Map<String, SynapseCounter> roiSynapseCountMap)", "modifiers": "public static", "return": "SortedSet<Map.Entry<String, SynapseCounter>>", "signature": "SortedSet<Map.Entry<String, SynapseCounter>> sortRoisByPreCount(Map<String, SynapseCounter> roiSynapseCountMap)", "full_signature": "public static SortedSet<Map.Entry<String, SynapseCounter>> sortRoisByPreCount(Map<String, SynapseCounter> roiSynapseCountMap)", "class_method_signature": "Neo4jImporter.sortRoisByPreCount(Map<String, SynapseCounter> roiSynapseCountMap)", "testcase": false, "constructor": false}], "file": "neuprint/src/main/java/org/janelia/flyem/neuprint/Neo4jImporter.java"}, "focal_method": {"identifier": "addSegments", "parameters": "(final String dataset,\n                            final List<Neuron> neuronList,\n                            final LocalDateTime timeStamp)", "modifiers": "public", "return": "void", "body": "public void addSegments(final String dataset,\n                            final List<Neuron> neuronList,\n                            final LocalDateTime timeStamp) {\n        LOG.info(\"addSegments: entry\");\n\n        String roiPropertyBaseString = \" n.`%s` = TRUE,\";\n\n        final String segmentText = \"MERGE (n:`\" + dataset + \"-Segment`{bodyId:$bodyId}) \" +\n                \"ON CREATE SET n.bodyId = $bodyId,\" +\n                \" n:Segment,\" +\n                \" n:\" + dataset + \",\" +\n                \" n.name = $name,\" +\n                \" n.type = $type,\" +\n                \" n.instance = $instance,\" +\n                \" n.primaryNeurite = $primaryNeurite,\" +\n                \" n.majorInput = $majorInput,\" +\n                \" n.majorOutput = $majorOutput,\" +\n                \" n.clonalUnit = $clonalUnit,\" +\n                \" n.neurotransmitter = $neurotransmitter,\" +\n                \" n.property = $property,\" +\n                \" n.status = $status,\" +\n                \" n.size = $size,\" +\n                \" n.somaLocation = $somaLocation,\" +\n                \" n.somaRadius = $somaRadius, \" +\n                \"%s\" + //placeholder for roi properties\n                \" n.timeStamp = $timeStamp\";\n\n        final String synapseSetText = \"MERGE (s:`\" + dataset + \"-SynapseSet`{datasetBodyId:$datasetBodyId}) ON CREATE SET s.datasetBodyId=$datasetBodyId, s.timeStamp=$timeStamp, s:SynapseSet, s:\" + dataset + \" \\n\";\n\n        final String segmentContainsSynapseSetText = \"MERGE (n:`\" + dataset + \"-Segment`{bodyId:$bodyId}) \\n\" +\n                \"MERGE (s:`\" + dataset + \"-SynapseSet`{datasetBodyId:$datasetBodyId}) \\n\" +\n                \"MERGE (n)-[:Contains]->(s)\";\n\n        final String synapseSetContainsSynapseText = \"MERGE (s:`\" + dataset + \"-Synapse`{location:$location}) \\n\" +\n                \"MERGE (t:`\" + dataset + \"-SynapseSet`{datasetBodyId:$datasetBodyId}) \\n\" +\n                \"MERGE (t)-[:Contains]->(s) \\n\";\n\n        final String metaNodeString = \"MATCH (m:Meta{dataset:$dataset}) SET \" +\n                \"m.lastDatabaseEdit=$timeStamp\";\n\n        try (final TransactionBatch batch = getBatch()) {\n            for (final Neuron neuron : neuronList) {\n\n                // accumulates super level rois\n                StringBuilder roiProperties = updateSuperRoisRoiInfoAndCreateRoiPropertyString(new HashSet<>(), new RoiInfo(), roiPropertyBaseString, neuron.getRois(), \"none\");\n\n                String segmentTextWithRois = String.format(segmentText, roiProperties.toString());\n\n                batch.addStatement(\n                        new Statement(segmentTextWithRois,\n                                parameters(\n                                        \"bodyId\", neuron.getId(),\n                                        \"name\", neuron.getName(),\n                                        \"type\", neuron.getType(),\n                                        \"instance\", neuron.getInstance(),\n                                        \"primaryNeurite\", neuron.getPrimaryNeurite(),\n                                        \"majorInput\", neuron.getMajorInput(),\n                                        \"majorOutput\", neuron.getMajorOutput(),\n                                        \"clonalUnit\", neuron.getClonalUnit(),\n                                        \"neurotransmitter\", neuron.getNeurotransmitter(),\n                                        \"property\", neuron.getProperty(),\n                                        \"status\", neuron.getStatus(),\n                                        \"size\", neuron.getSize(),\n                                        \"somaLocation\", neuron.getSomaLocation(),\n                                        \"somaRadius\", neuron.getSomaRadius(),\n                                        \"timeStamp\", timeStamp))\n                );\n\n                if (neuron.getSynapseLocationSet().size() > 0) {\n                    batch.addStatement(\n                            new Statement(synapseSetText,\n                                    parameters(\n                                            \"datasetBodyId\", dataset + \":\" + neuron.getId(),\n                                            \"timeStamp\", timeStamp))\n                    );\n\n                    batch.addStatement(\n                            new Statement(segmentContainsSynapseSetText,\n                                    parameters(\n                                            \"bodyId\", neuron.getId(),\n                                            \"datasetBodyId\", dataset + \":\" + neuron.getId())));\n\n                    for (Location synapseLocation : neuron.getSynapseLocationSet()) {\n                        batch.addStatement(new Statement(synapseSetContainsSynapseText,\n                                parameters(\n                                        \"location\", synapseLocation.getAsPoint(),\n                                        \"datasetBodyId\", dataset + \":\" + neuron.getId()\n                                )));\n\n                    }\n                }\n\n            }\n\n            batch.writeTransaction();\n        }\n\n        try (final TransactionBatch batch = getBatch()) {\n\n            batch.addStatement(new Statement(\n                    metaNodeString,\n                    parameters(\n                            \"dataset\", dataset,\n                            \"timeStamp\", timeStamp\n                    )\n\n            ));\n            batch.writeTransaction();\n\n        }\n\n        LOG.info(\"addSegments: exit\");\n    }", "signature": "void addSegments(final String dataset,\n                            final List<Neuron> neuronList,\n                            final LocalDateTime timeStamp)", "full_signature": "public void addSegments(final String dataset,\n                            final List<Neuron> neuronList,\n                            final LocalDateTime timeStamp)", "class_method_signature": "Neo4jImporter.addSegments(final String dataset,\n                            final List<Neuron> neuronList,\n                            final LocalDateTime timeStamp)", "testcase": false, "constructor": false, "invocations": ["info", "getBatch", "updateSuperRoisRoiInfoAndCreateRoiPropertyString", "getRois", "format", "toString", "addStatement", "parameters", "getId", "getName", "getType", "getInstance", "getPrimaryNeurite", "getMajorInput", "getMajorOutput", "getClonalUnit", "getNeurotransmitter", "getProperty", "getStatus", "getSize", "getSomaLocation", "getSomaRadius", "size", "getSynapseLocationSet", "addStatement", "parameters", "getId", "addStatement", "parameters", "getId", "getId", "getSynapseLocationSet", "addStatement", "parameters", "getAsPoint", "getId", "writeTransaction", "getBatch", "addStatement", "parameters", "writeTransaction", "info"]}, "repository": {"repo_id": 129463208, "url": "https://github.com/connectome-neuprint/neuPrint", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 16, "size": 203145, "license": "licensed"}}