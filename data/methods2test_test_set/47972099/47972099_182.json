{"test_class": {"identifier": "PrimitiveInputFormatTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Path PATH = new Path(\"an/ignored/file/\");", "modifier": "private static final", "type": "Path", "declarator": "PATH = new Path(\"an/ignored/file/\")", "var_name": "PATH"}], "file": "flink-java/src/test/java/org/apache/flink/api/java/io/PrimitiveInputFormatTest.java"}, "test_case": {"identifier": "testFailingInput", "parameters": "()", "modifiers": "@Test(expected = IOException.class) public", "return": "void", "body": "@Test(expected = IOException.class)\n\tpublic void testFailingInput() throws IOException {\n\t\t\n\t\tfinal String fileContent = \"111|222|asdf|17\";\n\t\tfinal FileInputSplit split = createInputSplit(fileContent);\n\n\t\tfinal PrimitiveInputFormat<Integer> format = new PrimitiveInputFormat<Integer>(PATH,\"|\", Integer.class);\n\n\t\tformat.configure(new Configuration());\n\t\tformat.open(split);\n\n\t\tInteger result = null;\n\t\tresult = format.nextRecord(result);\n\t\tassertEquals(Integer.valueOf(111), result);\n\n\t\tresult = format.nextRecord(result);\n\t\tassertEquals(Integer.valueOf(222), result);\n\n\t\tresult = format.nextRecord(result);\n\t}", "signature": "void testFailingInput()", "full_signature": "@Test(expected = IOException.class) public void testFailingInput()", "class_method_signature": "PrimitiveInputFormatTest.testFailingInput()", "testcase": true, "constructor": false, "invocations": ["createInputSplit", "configure", "open", "nextRecord", "assertEquals", "valueOf", "nextRecord", "assertEquals", "valueOf", "nextRecord"]}, "focal_class": {"identifier": "PrimitiveInputFormat", "superclass": "extends DelimitedInputFormat<OT>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private Class<OT> primitiveClass;", "modifier": "private", "type": "Class<OT>", "declarator": "primitiveClass", "var_name": "primitiveClass"}, {"original_string": "private static final byte CARRIAGE_RETURN = (byte) '\\r';", "modifier": "private static final", "type": "byte", "declarator": "CARRIAGE_RETURN = (byte) '\\r'", "var_name": "CARRIAGE_RETURN"}, {"original_string": "private static final byte NEW_LINE = (byte) '\\n';", "modifier": "private static final", "type": "byte", "declarator": "NEW_LINE = (byte) '\\n'", "var_name": "NEW_LINE"}, {"original_string": "private transient FieldParser<OT> parser;", "modifier": "private transient", "type": "FieldParser<OT>", "declarator": "parser", "var_name": "parser"}], "methods": [{"identifier": "PrimitiveInputFormat", "parameters": "(Path filePath, Class<OT> primitiveClass)", "modifiers": "public", "return": "", "signature": " PrimitiveInputFormat(Path filePath, Class<OT> primitiveClass)", "full_signature": "public  PrimitiveInputFormat(Path filePath, Class<OT> primitiveClass)", "class_method_signature": "PrimitiveInputFormat.PrimitiveInputFormat(Path filePath, Class<OT> primitiveClass)", "testcase": false, "constructor": true}, {"identifier": "PrimitiveInputFormat", "parameters": "(Path filePath, String delimiter, Class<OT> primitiveClass)", "modifiers": "public", "return": "", "signature": " PrimitiveInputFormat(Path filePath, String delimiter, Class<OT> primitiveClass)", "full_signature": "public  PrimitiveInputFormat(Path filePath, String delimiter, Class<OT> primitiveClass)", "class_method_signature": "PrimitiveInputFormat.PrimitiveInputFormat(Path filePath, String delimiter, Class<OT> primitiveClass)", "testcase": false, "constructor": true}, {"identifier": "open", "parameters": "(FileInputSplit split)", "modifiers": "@Override public", "return": "void", "signature": "void open(FileInputSplit split)", "full_signature": "@Override public void open(FileInputSplit split)", "class_method_signature": "PrimitiveInputFormat.open(FileInputSplit split)", "testcase": false, "constructor": false}, {"identifier": "readRecord", "parameters": "(OT reuse, byte[] bytes, int offset, int numBytes)", "modifiers": "@Override public", "return": "OT", "signature": "OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes)", "full_signature": "@Override public OT readRecord(OT reuse, byte[] bytes, int offset, int numBytes)", "class_method_signature": "PrimitiveInputFormat.readRecord(OT reuse, byte[] bytes, int offset, int numBytes)", "testcase": false, "constructor": false}], "file": "flink-java/src/main/java/org/apache/flink/api/java/io/PrimitiveInputFormat.java"}, "focal_method": {"identifier": "open", "parameters": "(FileInputSplit split)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void open(FileInputSplit split) throws IOException {\n\t\tsuper.open(split);\n\t\tClass<? extends FieldParser<OT>> parserType = FieldParser.getParserForType(primitiveClass);\n\t\tif (parserType == null) {\n\t\t\tthrow new IllegalArgumentException(\"The type '\" + primitiveClass.getName() + \"' is not supported for the primitive input format.\");\n\t\t}\n\t\tparser = InstantiationUtil.instantiate(parserType, FieldParser.class);\n\t}", "signature": "void open(FileInputSplit split)", "full_signature": "@Override public void open(FileInputSplit split)", "class_method_signature": "PrimitiveInputFormat.open(FileInputSplit split)", "testcase": false, "constructor": false, "invocations": ["open", "getParserForType", "getName", "instantiate"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}