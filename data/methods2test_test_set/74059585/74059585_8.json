{"test_class": {"identifier": "TraceHttpResponseInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpResponse response;", "modifier": "private", "type": "HttpResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private TestTracer tracer;", "modifier": "private", "type": "TestTracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "private TraceHttpResponseInterceptor responseInterceptor;", "modifier": "private", "type": "TraceHttpResponseInterceptor", "declarator": "responseInterceptor", "var_name": "responseInterceptor"}], "file": "core-http/src/test/java/com/google/cloud/trace/http/TraceHttpResponseInterceptorTest.java"}, "test_case": {"identifier": "testProcess_WithContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testProcess_WithContext() throws IOException {\n    TraceContext traceContext = tracer.startSpan(\"test\");\n    tracer.reset();\n    responseInterceptor.process(response, traceContext);\n    assertThat(tracer.endSpanEvents).hasSize(1);\n    EndSpanEvent endEvent = tracer.endSpanEvents.get(0);\n    assertThat(endEvent.getTraceContext()).isEqualTo(traceContext);\n\n    assertThat(tracer.annotateEvents).hasSize(1);\n    AnnotateEvent annotateEvent = tracer.annotateEvents.get(0);\n    assertThat(annotateEvent.getLabels().getLabels()).containsAllOf(\n        new Label(\"/response/size\", \"123\"),\n        new Label(\"/http/status_code\", \"200\")\n    );\n    assertThat(annotateEvent.getTraceContext()).isEqualTo(traceContext);\n  }", "signature": "void testProcess_WithContext()", "full_signature": "@Test public void testProcess_WithContext()", "class_method_signature": "TraceHttpResponseInterceptorTest.testProcess_WithContext()", "testcase": true, "constructor": false, "invocations": ["startSpan", "reset", "process", "hasSize", "assertThat", "get", "isEqualTo", "assertThat", "getTraceContext", "hasSize", "assertThat", "get", "containsAllOf", "assertThat", "getLabels", "getLabels", "isEqualTo", "assertThat", "getTraceContext"]}, "focal_class": {"identifier": "TraceHttpResponseInterceptor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Tracer tracer;", "modifier": "private final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}], "methods": [{"identifier": "TraceHttpResponseInterceptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " TraceHttpResponseInterceptor()", "full_signature": "public  TraceHttpResponseInterceptor()", "class_method_signature": "TraceHttpResponseInterceptor.TraceHttpResponseInterceptor()", "testcase": false, "constructor": true}, {"identifier": "TraceHttpResponseInterceptor", "parameters": "(Tracer tracer)", "modifiers": "public", "return": "", "signature": " TraceHttpResponseInterceptor(Tracer tracer)", "full_signature": "public  TraceHttpResponseInterceptor(Tracer tracer)", "class_method_signature": "TraceHttpResponseInterceptor.TraceHttpResponseInterceptor(Tracer tracer)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(HttpResponse response, TraceContext traceContext)", "modifiers": "public", "return": "void", "signature": "void process(HttpResponse response, TraceContext traceContext)", "full_signature": "public void process(HttpResponse response, TraceContext traceContext)", "class_method_signature": "TraceHttpResponseInterceptor.process(HttpResponse response, TraceContext traceContext)", "testcase": false, "constructor": false}], "file": "core-http/src/main/java/com/google/cloud/trace/http/TraceHttpResponseInterceptor.java"}, "focal_method": {"identifier": "process", "parameters": "(HttpResponse response, TraceContext traceContext)", "modifiers": "public", "return": "void", "body": "public void process(HttpResponse response, TraceContext traceContext) {\n    if (traceContext == null) {\n      return;\n    }\n    Labels.Builder labels = Labels.builder();\n    TraceInterceptorUtil.annotateIfNotEmpty(labels, HttpLabels.RESPONSE_SIZE,\n        response.getHeader(HttpHeaders.CONTENT_LENGTH));\n    labels.add(HttpLabels.HTTP_STATUS_CODE, Integer.toString(response.getStatus()));\n    tracer.annotateSpan(traceContext, labels.build());\n    tracer.endSpan(traceContext);\n  }", "signature": "void process(HttpResponse response, TraceContext traceContext)", "full_signature": "public void process(HttpResponse response, TraceContext traceContext)", "class_method_signature": "TraceHttpResponseInterceptor.process(HttpResponse response, TraceContext traceContext)", "testcase": false, "constructor": false, "invocations": ["builder", "annotateIfNotEmpty", "getHeader", "add", "toString", "getStatus", "annotateSpan", "build", "endSpan"]}, "repository": {"repo_id": 74059585, "url": "https://github.com/GoogleCloudPlatform/cloud-trace-java-instrumentation", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 141, "license": "licensed"}}