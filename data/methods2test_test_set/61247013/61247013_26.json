{"test_class": {"identifier": "DoubleConditionTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/com/busybusy/dbc/conditions/DoubleConditionTest.java"}, "test_case": {"identifier": "isNearZeroCustomTolerance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void isNearZeroCustomTolerance() throws Exception\n\t{\n\t\tDoubleCondition condition = new DoubleCondition(1D);\n\t\tcondition.isNearZeroWithTolerance(1.5D);\n\n\t\tDoubleCondition badCondition = new DoubleCondition(2D);\n\t\tassertThatThrownBy(() -> badCondition.isNearZeroWithTolerance(1.5D))\n\t\t\t\t.isInstanceOf(DbcAssertionError.class)\n\t\t\t\t.hasCauseInstanceOf(IllegalArgumentException.class);\n\t}", "signature": "void isNearZeroCustomTolerance()", "full_signature": "@Test public void isNearZeroCustomTolerance()", "class_method_signature": "DoubleConditionTest.isNearZeroCustomTolerance()", "testcase": true, "constructor": false, "invocations": ["isNearZeroWithTolerance", "hasCauseInstanceOf", "isInstanceOf", "assertThatThrownBy", "isNearZeroWithTolerance"]}, "focal_class": {"identifier": "DoubleCondition", "superclass": "extends BasicCondition<Double, DoubleCondition>", "interfaces": "implements FloatingPointChecks<Double, DoubleCondition>", "fields": [], "methods": [{"identifier": "DoubleCondition", "parameters": "(Double subject)", "modifiers": "public", "return": "", "signature": " DoubleCondition(Double subject)", "full_signature": "public  DoubleCondition(Double subject)", "class_method_signature": "DoubleCondition.DoubleCondition(Double subject)", "testcase": false, "constructor": true}, {"identifier": "isGreaterThan", "parameters": "(Double number)", "modifiers": "@Override public", "return": "DoubleCondition", "signature": "DoubleCondition isGreaterThan(Double number)", "full_signature": "@Override public DoubleCondition isGreaterThan(Double number)", "class_method_signature": "DoubleCondition.isGreaterThan(Double number)", "testcase": false, "constructor": false}, {"identifier": "isGreaterThanOrEqual", "parameters": "(Double number)", "modifiers": "@Override public", "return": "DoubleCondition", "signature": "DoubleCondition isGreaterThanOrEqual(Double number)", "full_signature": "@Override public DoubleCondition isGreaterThanOrEqual(Double number)", "class_method_signature": "DoubleCondition.isGreaterThanOrEqual(Double number)", "testcase": false, "constructor": false}, {"identifier": "isLessThan", "parameters": "(Double number)", "modifiers": "@Override public", "return": "DoubleCondition", "signature": "DoubleCondition isLessThan(Double number)", "full_signature": "@Override public DoubleCondition isLessThan(Double number)", "class_method_signature": "DoubleCondition.isLessThan(Double number)", "testcase": false, "constructor": false}, {"identifier": "isLessThanOrEqual", "parameters": "(Double number)", "modifiers": "@Override public", "return": "DoubleCondition", "signature": "DoubleCondition isLessThanOrEqual(Double number)", "full_signature": "@Override public DoubleCondition isLessThanOrEqual(Double number)", "class_method_signature": "DoubleCondition.isLessThanOrEqual(Double number)", "testcase": false, "constructor": false}, {"identifier": "isNear", "parameters": "(Double floatingPointNumber)", "modifiers": "@Override public", "return": "DoubleCondition", "signature": "DoubleCondition isNear(Double floatingPointNumber)", "full_signature": "@Override public DoubleCondition isNear(Double floatingPointNumber)", "class_method_signature": "DoubleCondition.isNear(Double floatingPointNumber)", "testcase": false, "constructor": false}, {"identifier": "isNearWithTolerance", "parameters": "(Double floatingPointNumber, Double tolerance)", "modifiers": "@Override public", "return": "DoubleCondition", "signature": "DoubleCondition isNearWithTolerance(Double floatingPointNumber, Double tolerance)", "full_signature": "@Override public DoubleCondition isNearWithTolerance(Double floatingPointNumber, Double tolerance)", "class_method_signature": "DoubleCondition.isNearWithTolerance(Double floatingPointNumber, Double tolerance)", "testcase": false, "constructor": false}, {"identifier": "isNearZero", "parameters": "()", "modifiers": "@Override public", "return": "DoubleCondition", "signature": "DoubleCondition isNearZero()", "full_signature": "@Override public DoubleCondition isNearZero()", "class_method_signature": "DoubleCondition.isNearZero()", "testcase": false, "constructor": false}, {"identifier": "isNearZeroWithTolerance", "parameters": "(Double tolerance)", "modifiers": "@Override public", "return": "DoubleCondition", "signature": "DoubleCondition isNearZeroWithTolerance(Double tolerance)", "full_signature": "@Override public DoubleCondition isNearZeroWithTolerance(Double tolerance)", "class_method_signature": "DoubleCondition.isNearZeroWithTolerance(Double tolerance)", "testcase": false, "constructor": false}, {"identifier": "isEqualTo", "parameters": "(Double toCompare)", "modifiers": "@Deprecated @Override public", "return": "DoubleCondition", "signature": "DoubleCondition isEqualTo(Double toCompare)", "full_signature": "@Deprecated @Override public DoubleCondition isEqualTo(Double toCompare)", "class_method_signature": "DoubleCondition.isEqualTo(Double toCompare)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/com/busybusy/dbc/conditions/DoubleCondition.java"}, "focal_method": {"identifier": "isNearZeroWithTolerance", "parameters": "(Double tolerance)", "modifiers": "@Override public", "return": "DoubleCondition", "body": "@Override\n\tpublic DoubleCondition isNearZeroWithTolerance(Double tolerance)\n\t{\n\t\trequire(this.subject).isNotNull();\n\t\trequire(tolerance).isNotNull();\n\n\t\tif (!(Math.abs(this.subject) < tolerance))\n\t\t{\n\t\t\tDbcAssertionError.throwNew(new IllegalArgumentException(\"Expected double <\" + this.subject + \"> to be near zero with epsilon <\" + tolerance + \">\"), this.message);\n\t\t}\n\n\t\treturn result();\n\t}", "signature": "DoubleCondition isNearZeroWithTolerance(Double tolerance)", "full_signature": "@Override public DoubleCondition isNearZeroWithTolerance(Double tolerance)", "class_method_signature": "DoubleCondition.isNearZeroWithTolerance(Double tolerance)", "testcase": false, "constructor": false, "invocations": ["isNotNull", "require", "isNotNull", "require", "abs", "throwNew", "result"]}, "repository": {"repo_id": 61247013, "url": "https://github.com/busybusy/DBC-Android", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 203, "license": "licensed"}}