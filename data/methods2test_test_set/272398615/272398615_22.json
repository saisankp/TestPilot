{"test_class": {"identifier": "TestPigHCatUtil", "superclass": "", "interfaces": "", "fields": [], "file": "hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestPigHCatUtil.java"}, "test_case": {"identifier": "testGetBagSubSchema", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetBagSubSchema() throws Exception {\n\n    // Define the expected schema.\n    ResourceFieldSchema[] bagSubFieldSchemas = new ResourceFieldSchema[1];\n    bagSubFieldSchemas[0] = new ResourceFieldSchema().setName(\"innertuple\")\n      .setDescription(\"The tuple in the bag\").setType(DataType.TUPLE);\n\n    ResourceFieldSchema[] innerTupleFieldSchemas = new ResourceFieldSchema[1];\n    innerTupleFieldSchemas[0] =\n      new ResourceFieldSchema().setName(\"innerfield\").setType(DataType.CHARARRAY);\n\n    bagSubFieldSchemas[0].setSchema(new ResourceSchema().setFields(innerTupleFieldSchemas));\n    ResourceSchema expected = new ResourceSchema().setFields(bagSubFieldSchemas);\n\n    // Get the actual converted schema.\n    HCatSchema hCatSchema = new HCatSchema(Lists.newArrayList(\n      new HCatFieldSchema(\"innerLlama\", HCatFieldSchema.Type.STRING, null)));\n    HCatFieldSchema hCatFieldSchema =\n      new HCatFieldSchema(\"llama\", HCatFieldSchema.Type.ARRAY, hCatSchema, null);\n    ResourceSchema actual = PigHCatUtil.getBagSubSchema(hCatFieldSchema);\n\n    Assert.assertEquals(expected.toString(), actual.toString());\n  }", "signature": "void testGetBagSubSchema()", "full_signature": "@Test public void testGetBagSubSchema()", "class_method_signature": "TestPigHCatUtil.testGetBagSubSchema()", "testcase": true, "constructor": false, "invocations": ["setType", "setDescription", "setName", "setType", "setName", "setSchema", "setFields", "setFields", "newArrayList", "getBagSubSchema", "assertEquals", "toString", "toString"]}, "focal_class": {"identifier": "PigHCatUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PigHCatUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PigHCatUtil.class)", "var_name": "LOG"}, {"original_string": "static final int PIG_EXCEPTION_CODE = 1115;", "modifier": "static final", "type": "int", "declarator": "PIG_EXCEPTION_CODE = 1115", "var_name": "PIG_EXCEPTION_CODE"}, {"original_string": "private static final String DEFAULT_DB = MetaStoreUtils.DEFAULT_DATABASE_NAME;", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_DB = MetaStoreUtils.DEFAULT_DATABASE_NAME", "var_name": "DEFAULT_DB"}, {"original_string": "private final Map<Pair<String, String>, Table> hcatTableCache =\n    new HashMap<Pair<String, String>, Table>();", "modifier": "private final", "type": "Map<Pair<String, String>, Table>", "declarator": "hcatTableCache =\n    new HashMap<Pair<String, String>, Table>()", "var_name": "hcatTableCache"}, {"original_string": "private static final TupleFactory tupFac = TupleFactory.getInstance();", "modifier": "private static final", "type": "TupleFactory", "declarator": "tupFac = TupleFactory.getInstance()", "var_name": "tupFac"}, {"original_string": "private static boolean pigHasBooleanSupport = false;", "modifier": "private static", "type": "boolean", "declarator": "pigHasBooleanSupport = false", "var_name": "pigHasBooleanSupport"}], "methods": [{"identifier": "pigHasBooleanSupport", "parameters": "()", "modifiers": "static public", "return": "boolean", "signature": "boolean pigHasBooleanSupport()", "full_signature": "static public boolean pigHasBooleanSupport()", "class_method_signature": "PigHCatUtil.pigHasBooleanSupport()", "testcase": false, "constructor": false}, {"identifier": "getDBTableNames", "parameters": "(String location)", "modifiers": "static public", "return": "Pair<String, String>", "signature": "Pair<String, String> getDBTableNames(String location)", "full_signature": "static public Pair<String, String> getDBTableNames(String location)", "class_method_signature": "PigHCatUtil.getDBTableNames(String location)", "testcase": false, "constructor": false}, {"identifier": "getHCatServerUri", "parameters": "(Job job)", "modifiers": "static public", "return": "String", "signature": "String getHCatServerUri(Job job)", "full_signature": "static public String getHCatServerUri(Job job)", "class_method_signature": "PigHCatUtil.getHCatServerUri(Job job)", "testcase": false, "constructor": false}, {"identifier": "getHCatServerPrincipal", "parameters": "(Job job)", "modifiers": "static public", "return": "String", "signature": "String getHCatServerPrincipal(Job job)", "full_signature": "static public String getHCatServerPrincipal(Job job)", "class_method_signature": "PigHCatUtil.getHCatServerPrincipal(Job job)", "testcase": false, "constructor": false}, {"identifier": "getHiveMetaClient", "parameters": "(String serverUri,\n                             String serverKerberosPrincipal, Class<?> clazz)", "modifiers": "private static", "return": "HiveMetaStoreClient", "signature": "HiveMetaStoreClient getHiveMetaClient(String serverUri,\n                             String serverKerberosPrincipal, Class<?> clazz)", "full_signature": "private static HiveMetaStoreClient getHiveMetaClient(String serverUri,\n                             String serverKerberosPrincipal, Class<?> clazz)", "class_method_signature": "PigHCatUtil.getHiveMetaClient(String serverUri,\n                             String serverKerberosPrincipal, Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getHCatSchema", "parameters": "(List<RequiredField> fields, String signature, Class<?> classForUDFCLookup)", "modifiers": "", "return": "HCatSchema", "signature": "HCatSchema getHCatSchema(List<RequiredField> fields, String signature, Class<?> classForUDFCLookup)", "full_signature": " HCatSchema getHCatSchema(List<RequiredField> fields, String signature, Class<?> classForUDFCLookup)", "class_method_signature": "PigHCatUtil.getHCatSchema(List<RequiredField> fields, String signature, Class<?> classForUDFCLookup)", "testcase": false, "constructor": false}, {"identifier": "getTable", "parameters": "(String location, String hcatServerUri, String hcatServerPrincipal)", "modifiers": "public", "return": "Table", "signature": "Table getTable(String location, String hcatServerUri, String hcatServerPrincipal)", "full_signature": "public Table getTable(String location, String hcatServerUri, String hcatServerPrincipal)", "class_method_signature": "PigHCatUtil.getTable(String location, String hcatServerUri, String hcatServerPrincipal)", "testcase": false, "constructor": false}, {"identifier": "getResourceSchema", "parameters": "(HCatSchema hcatSchema)", "modifiers": "public static", "return": "ResourceSchema", "signature": "ResourceSchema getResourceSchema(HCatSchema hcatSchema)", "full_signature": "public static ResourceSchema getResourceSchema(HCatSchema hcatSchema)", "class_method_signature": "PigHCatUtil.getResourceSchema(HCatSchema hcatSchema)", "testcase": false, "constructor": false}, {"identifier": "getResourceSchemaFromFieldSchema", "parameters": "(HCatFieldSchema hfs)", "modifiers": "private static", "return": "ResourceFieldSchema", "signature": "ResourceFieldSchema getResourceSchemaFromFieldSchema(HCatFieldSchema hfs)", "full_signature": "private static ResourceFieldSchema getResourceSchemaFromFieldSchema(HCatFieldSchema hfs)", "class_method_signature": "PigHCatUtil.getResourceSchemaFromFieldSchema(HCatFieldSchema hfs)", "testcase": false, "constructor": false}, {"identifier": "getBagSubSchema", "parameters": "(HCatFieldSchema hfs)", "modifiers": "protected static", "return": "ResourceSchema", "signature": "ResourceSchema getBagSubSchema(HCatFieldSchema hfs)", "full_signature": "protected static ResourceSchema getBagSubSchema(HCatFieldSchema hfs)", "class_method_signature": "PigHCatUtil.getBagSubSchema(HCatFieldSchema hfs)", "testcase": false, "constructor": false}, {"identifier": "getTupleSubSchema", "parameters": "(HCatFieldSchema hfs)", "modifiers": "private static", "return": "ResourceSchema", "signature": "ResourceSchema getTupleSubSchema(HCatFieldSchema hfs)", "full_signature": "private static ResourceSchema getTupleSubSchema(HCatFieldSchema hfs)", "class_method_signature": "PigHCatUtil.getTupleSubSchema(HCatFieldSchema hfs)", "testcase": false, "constructor": false}, {"identifier": "getPigType", "parameters": "(HCatFieldSchema hfs)", "modifiers": "static public", "return": "byte", "signature": "byte getPigType(HCatFieldSchema hfs)", "full_signature": "static public byte getPigType(HCatFieldSchema hfs)", "class_method_signature": "PigHCatUtil.getPigType(HCatFieldSchema hfs)", "testcase": false, "constructor": false}, {"identifier": "getPigType", "parameters": "(Type type)", "modifiers": "static public", "return": "byte", "signature": "byte getPigType(Type type)", "full_signature": "static public byte getPigType(Type type)", "class_method_signature": "PigHCatUtil.getPigType(Type type)", "testcase": false, "constructor": false}, {"identifier": "transformToTuple", "parameters": "(HCatRecord hr, HCatSchema hs)", "modifiers": "public static", "return": "Tuple", "signature": "Tuple transformToTuple(HCatRecord hr, HCatSchema hs)", "full_signature": "public static Tuple transformToTuple(HCatRecord hr, HCatSchema hs)", "class_method_signature": "PigHCatUtil.transformToTuple(HCatRecord hr, HCatSchema hs)", "testcase": false, "constructor": false}, {"identifier": "extractPigObject", "parameters": "(Object o, HCatFieldSchema hfs)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Object", "signature": "Object extractPigObject(Object o, HCatFieldSchema hfs)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Object extractPigObject(Object o, HCatFieldSchema hfs)", "class_method_signature": "PigHCatUtil.extractPigObject(Object o, HCatFieldSchema hfs)", "testcase": false, "constructor": false}, {"identifier": "transformToTuple", "parameters": "(List<? extends Object> objList, HCatFieldSchema hfs)", "modifiers": "private static", "return": "Tuple", "signature": "Tuple transformToTuple(List<? extends Object> objList, HCatFieldSchema hfs)", "full_signature": "private static Tuple transformToTuple(List<? extends Object> objList, HCatFieldSchema hfs)", "class_method_signature": "PigHCatUtil.transformToTuple(List<? extends Object> objList, HCatFieldSchema hfs)", "testcase": false, "constructor": false}, {"identifier": "transformToTuple", "parameters": "(List<? extends Object> objList, HCatSchema hs)", "modifiers": "private static", "return": "Tuple", "signature": "Tuple transformToTuple(List<? extends Object> objList, HCatSchema hs)", "full_signature": "private static Tuple transformToTuple(List<? extends Object> objList, HCatSchema hs)", "class_method_signature": "PigHCatUtil.transformToTuple(List<? extends Object> objList, HCatSchema hs)", "testcase": false, "constructor": false}, {"identifier": "transformToPigMap", "parameters": "(Map<Object, Object> map, HCatFieldSchema hfs)", "modifiers": "private static", "return": "Map<String, Object>", "signature": "Map<String, Object> transformToPigMap(Map<Object, Object> map, HCatFieldSchema hfs)", "full_signature": "private static Map<String, Object> transformToPigMap(Map<Object, Object> map, HCatFieldSchema hfs)", "class_method_signature": "PigHCatUtil.transformToPigMap(Map<Object, Object> map, HCatFieldSchema hfs)", "testcase": false, "constructor": false}, {"identifier": "transformToBag", "parameters": "(List<? extends Object> list, HCatFieldSchema hfs)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "DataBag", "signature": "DataBag transformToBag(List<? extends Object> list, HCatFieldSchema hfs)", "full_signature": "@SuppressWarnings(\"unchecked\") private static DataBag transformToBag(List<? extends Object> list, HCatFieldSchema hfs)", "class_method_signature": "PigHCatUtil.transformToBag(List<? extends Object> list, HCatFieldSchema hfs)", "testcase": false, "constructor": false}, {"identifier": "validateHCatSchemaFollowsPigRules", "parameters": "(HCatSchema tblSchema)", "modifiers": "private static", "return": "void", "signature": "void validateHCatSchemaFollowsPigRules(HCatSchema tblSchema)", "full_signature": "private static void validateHCatSchemaFollowsPigRules(HCatSchema tblSchema)", "class_method_signature": "PigHCatUtil.validateHCatSchemaFollowsPigRules(HCatSchema tblSchema)", "testcase": false, "constructor": false}, {"identifier": "validateHcatFieldFollowsPigRules", "parameters": "(HCatFieldSchema hcatField)", "modifiers": "private static", "return": "void", "signature": "void validateHcatFieldFollowsPigRules(HCatFieldSchema hcatField)", "full_signature": "private static void validateHcatFieldFollowsPigRules(HCatFieldSchema hcatField)", "class_method_signature": "PigHCatUtil.validateHcatFieldFollowsPigRules(HCatFieldSchema hcatField)", "testcase": false, "constructor": false}, {"identifier": "validateHCatTableSchemaFollowsPigRules", "parameters": "(HCatSchema hcatTableSchema)", "modifiers": "public static", "return": "void", "signature": "void validateHCatTableSchemaFollowsPigRules(HCatSchema hcatTableSchema)", "full_signature": "public static void validateHCatTableSchemaFollowsPigRules(HCatSchema hcatTableSchema)", "class_method_signature": "PigHCatUtil.validateHCatTableSchemaFollowsPigRules(HCatSchema hcatTableSchema)", "testcase": false, "constructor": false}, {"identifier": "getConfigFromUDFProperties", "parameters": "(Properties p, Configuration config, String propName)", "modifiers": "public static", "return": "void", "signature": "void getConfigFromUDFProperties(Properties p, Configuration config, String propName)", "full_signature": "public static void getConfigFromUDFProperties(Properties p, Configuration config, String propName)", "class_method_signature": "PigHCatUtil.getConfigFromUDFProperties(Properties p, Configuration config, String propName)", "testcase": false, "constructor": false}, {"identifier": "saveConfigIntoUDFProperties", "parameters": "(Properties p, Configuration config, String propName)", "modifiers": "public static", "return": "void", "signature": "void saveConfigIntoUDFProperties(Properties p, Configuration config, String propName)", "full_signature": "public static void saveConfigIntoUDFProperties(Properties p, Configuration config, String propName)", "class_method_signature": "PigHCatUtil.saveConfigIntoUDFProperties(Properties p, Configuration config, String propName)", "testcase": false, "constructor": false}], "file": "hcatalog/hcatalog-pig-adapter/src/main/java/org/apache/hive/hcatalog/pig/PigHCatUtil.java"}, "focal_method": {"identifier": "getBagSubSchema", "parameters": "(HCatFieldSchema hfs)", "modifiers": "protected static", "return": "ResourceSchema", "body": "protected static ResourceSchema getBagSubSchema(HCatFieldSchema hfs) throws IOException {\n    // there are two cases - array<Type> and array<struct<...>>\n    // in either case the element type of the array is represented in a\n    // tuple field schema in the bag's field schema - the second case (struct)\n    // more naturally translates to the tuple - in the first case (array<Type>)\n    // we simulate the tuple by putting the single field in a tuple\n\n    Properties props = UDFContext.getUDFContext().getClientSystemProps();\n    String innerTupleName = HCatConstants.HCAT_PIG_INNER_TUPLE_NAME_DEFAULT;\n    if (props != null && props.containsKey(HCatConstants.HCAT_PIG_INNER_TUPLE_NAME)) {\n      innerTupleName = props.getProperty(HCatConstants.HCAT_PIG_INNER_TUPLE_NAME)\n        .replaceAll(\"FIELDNAME\", hfs.getName());\n    }\n    String innerFieldName = HCatConstants.HCAT_PIG_INNER_FIELD_NAME_DEFAULT;\n    if (props != null && props.containsKey(HCatConstants.HCAT_PIG_INNER_FIELD_NAME)) {\n      innerFieldName = props.getProperty(HCatConstants.HCAT_PIG_INNER_FIELD_NAME)\n        .replaceAll(\"FIELDNAME\", hfs.getName());\n    }\n\n    ResourceFieldSchema[] bagSubFieldSchemas = new ResourceFieldSchema[1];\n    bagSubFieldSchemas[0] = new ResourceFieldSchema().setName(innerTupleName)\n      .setDescription(\"The tuple in the bag\")\n      .setType(DataType.TUPLE);\n    HCatFieldSchema arrayElementFieldSchema = hfs.getArrayElementSchema().get(0);\n    if (arrayElementFieldSchema.getType() == Type.STRUCT) {\n      bagSubFieldSchemas[0].setSchema(getTupleSubSchema(arrayElementFieldSchema));\n    } else if (arrayElementFieldSchema.getType() == Type.ARRAY) {\n      ResourceSchema s = new ResourceSchema();\n      List<ResourceFieldSchema> lrfs = Arrays.asList(getResourceSchemaFromFieldSchema(arrayElementFieldSchema));\n      s.setFields(lrfs.toArray(new ResourceFieldSchema[0]));\n      bagSubFieldSchemas[0].setSchema(s);\n    } else {\n      ResourceFieldSchema[] innerTupleFieldSchemas = new ResourceFieldSchema[1];\n      innerTupleFieldSchemas[0] = new ResourceFieldSchema().setName(innerFieldName)\n        .setDescription(\"The inner field in the tuple in the bag\")\n        .setType(getPigType(arrayElementFieldSchema))\n        .setSchema(null); // the element type is not a tuple - so no subschema\n      bagSubFieldSchemas[0].setSchema(new ResourceSchema().setFields(innerTupleFieldSchemas));\n    }\n    ResourceSchema s = new ResourceSchema().setFields(bagSubFieldSchemas);\n    return s;\n\n  }", "signature": "ResourceSchema getBagSubSchema(HCatFieldSchema hfs)", "full_signature": "protected static ResourceSchema getBagSubSchema(HCatFieldSchema hfs)", "class_method_signature": "PigHCatUtil.getBagSubSchema(HCatFieldSchema hfs)", "testcase": false, "constructor": false, "invocations": ["getClientSystemProps", "getUDFContext", "containsKey", "replaceAll", "getProperty", "getName", "containsKey", "replaceAll", "getProperty", "getName", "setType", "setDescription", "setName", "get", "getArrayElementSchema", "getType", "setSchema", "getTupleSubSchema", "getType", "asList", "getResourceSchemaFromFieldSchema", "setFields", "toArray", "setSchema", "setSchema", "setType", "setDescription", "setName", "getPigType", "setSchema", "setFields", "setFields"]}, "repository": {"repo_id": 272398615, "url": "https://github.com/zhihuili/project-panthera-ase", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 59864, "license": "licensed"}}