{"test_class": {"identifier": "DexWriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "smali/dexlib2/src/test/java/org/jf/dexlib2/writer/DexWriterTest.java"}, "test_case": {"identifier": "testAnnotationElementOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAnnotationElementOrder() {\n        // Elements are out of order wrt to the element name\n        ImmutableSet<ImmutableAnnotationElement> elements =\n                ImmutableSet.of(new ImmutableAnnotationElement(\"zabaglione\", ImmutableNullEncodedValue.INSTANCE),\n                        new ImmutableAnnotationElement(\"blah\", ImmutableNullEncodedValue.INSTANCE));\n\n        ImmutableAnnotation annotation = new ImmutableAnnotation(AnnotationVisibility.RUNTIME,\n                \"Lorg/test/anno;\", elements);\n\n        ImmutableClassDef classDef = new ImmutableClassDef(\"Lorg/test/blah;\",\n                0, \"Ljava/lang/Object;\", null, null, ImmutableSet.of(annotation), null, null);\n\n        MemoryDataStore dataStore = new MemoryDataStore();\n\n        try {\n            DexPool.writeTo(dataStore, new ImmutableDexFile(Opcodes.getDefault(), ImmutableSet.of(classDef)));\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n\n        DexBackedDexFile dexFile = new DexBackedDexFile(Opcodes.getDefault(), dataStore.getData());\n        ClassDef dbClassDef = Iterables.getFirst(dexFile.getClasses(), null);\n        Assert.assertNotNull(dbClassDef);\n        Annotation dbAnnotation = Iterables.getFirst(dbClassDef.getAnnotations(), null);\n        Assert.assertNotNull(dbAnnotation);\n        List<AnnotationElement> dbElements = Lists.newArrayList(dbAnnotation.getElements());\n\n        // Ensure that the elements were written out in sorted order\n        Assert.assertEquals(2, dbElements.size());\n        Assert.assertEquals(\"blah\", dbElements.get(0).getName());\n        Assert.assertEquals(\"zabaglione\", dbElements.get(1).getName());\n    }", "signature": "void testAnnotationElementOrder()", "full_signature": "@Test public void testAnnotationElementOrder()", "class_method_signature": "DexWriterTest.testAnnotationElementOrder()", "testcase": true, "constructor": false, "invocations": ["of", "of", "writeTo", "getDefault", "of", "getDefault", "getData", "getFirst", "getClasses", "assertNotNull", "getFirst", "getAnnotations", "assertNotNull", "newArrayList", "getElements", "assertEquals", "size", "assertEquals", "getName", "get", "assertEquals", "getName", "get"]}, "focal_class": {"identifier": "DexWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int NO_INDEX = -1;", "modifier": "public static final", "type": "int", "declarator": "NO_INDEX = -1", "var_name": "NO_INDEX"}, {"original_string": "public static final int NO_OFFSET = 0;", "modifier": "public static final", "type": "int", "declarator": "NO_OFFSET = 0", "var_name": "NO_OFFSET"}, {"original_string": "protected final Opcodes opcodes;", "modifier": "protected final", "type": "Opcodes", "declarator": "opcodes", "var_name": "opcodes"}, {"original_string": "protected int stringIndexSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "stringIndexSectionOffset = NO_OFFSET", "var_name": "stringIndexSectionOffset"}, {"original_string": "protected int typeSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "typeSectionOffset = NO_OFFSET", "var_name": "typeSectionOffset"}, {"original_string": "protected int protoSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "protoSectionOffset = NO_OFFSET", "var_name": "protoSectionOffset"}, {"original_string": "protected int fieldSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "fieldSectionOffset = NO_OFFSET", "var_name": "fieldSectionOffset"}, {"original_string": "protected int methodSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "methodSectionOffset = NO_OFFSET", "var_name": "methodSectionOffset"}, {"original_string": "protected int classIndexSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "classIndexSectionOffset = NO_OFFSET", "var_name": "classIndexSectionOffset"}, {"original_string": "protected int stringDataSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "stringDataSectionOffset = NO_OFFSET", "var_name": "stringDataSectionOffset"}, {"original_string": "protected int classDataSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "classDataSectionOffset = NO_OFFSET", "var_name": "classDataSectionOffset"}, {"original_string": "protected int typeListSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "typeListSectionOffset = NO_OFFSET", "var_name": "typeListSectionOffset"}, {"original_string": "protected int encodedArraySectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "encodedArraySectionOffset = NO_OFFSET", "var_name": "encodedArraySectionOffset"}, {"original_string": "protected int annotationSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "annotationSectionOffset = NO_OFFSET", "var_name": "annotationSectionOffset"}, {"original_string": "protected int annotationSetSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "annotationSetSectionOffset = NO_OFFSET", "var_name": "annotationSetSectionOffset"}, {"original_string": "protected int annotationSetRefSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "annotationSetRefSectionOffset = NO_OFFSET", "var_name": "annotationSetRefSectionOffset"}, {"original_string": "protected int annotationDirectorySectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "annotationDirectorySectionOffset = NO_OFFSET", "var_name": "annotationDirectorySectionOffset"}, {"original_string": "protected int debugSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "debugSectionOffset = NO_OFFSET", "var_name": "debugSectionOffset"}, {"original_string": "protected int codeSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "codeSectionOffset = NO_OFFSET", "var_name": "codeSectionOffset"}, {"original_string": "protected int mapSectionOffset = NO_OFFSET;", "modifier": "protected", "type": "int", "declarator": "mapSectionOffset = NO_OFFSET", "var_name": "mapSectionOffset"}, {"original_string": "protected int numEncodedArrayItems = 0;", "modifier": "protected", "type": "int", "declarator": "numEncodedArrayItems = 0", "var_name": "numEncodedArrayItems"}, {"original_string": "protected int numAnnotationSetRefItems = 0;", "modifier": "protected", "type": "int", "declarator": "numAnnotationSetRefItems = 0", "var_name": "numAnnotationSetRefItems"}, {"original_string": "protected int numAnnotationDirectoryItems = 0;", "modifier": "protected", "type": "int", "declarator": "numAnnotationDirectoryItems = 0", "var_name": "numAnnotationDirectoryItems"}, {"original_string": "protected int numDebugInfoItems = 0;", "modifier": "protected", "type": "int", "declarator": "numDebugInfoItems = 0", "var_name": "numDebugInfoItems"}, {"original_string": "protected int numCodeItemItems = 0;", "modifier": "protected", "type": "int", "declarator": "numCodeItemItems = 0", "var_name": "numCodeItemItems"}, {"original_string": "protected int numClassDataItems = 0;", "modifier": "protected", "type": "int", "declarator": "numClassDataItems = 0", "var_name": "numClassDataItems"}, {"original_string": "public final StringSectionType stringSection;", "modifier": "public final", "type": "StringSectionType", "declarator": "stringSection", "var_name": "stringSection"}, {"original_string": "public final TypeSectionType typeSection;", "modifier": "public final", "type": "TypeSectionType", "declarator": "typeSection", "var_name": "typeSection"}, {"original_string": "public final ProtoSectionType protoSection;", "modifier": "public final", "type": "ProtoSectionType", "declarator": "protoSection", "var_name": "protoSection"}, {"original_string": "public final FieldSectionType fieldSection;", "modifier": "public final", "type": "FieldSectionType", "declarator": "fieldSection", "var_name": "fieldSection"}, {"original_string": "public final MethodSectionType methodSection;", "modifier": "public final", "type": "MethodSectionType", "declarator": "methodSection", "var_name": "methodSection"}, {"original_string": "public final ClassSectionType classSection;", "modifier": "public final", "type": "ClassSectionType", "declarator": "classSection", "var_name": "classSection"}, {"original_string": "public final TypeListSectionType typeListSection;", "modifier": "public final", "type": "TypeListSectionType", "declarator": "typeListSection", "var_name": "typeListSection"}, {"original_string": "public final AnnotationSectionType annotationSection;", "modifier": "public final", "type": "AnnotationSectionType", "declarator": "annotationSection", "var_name": "annotationSection"}, {"original_string": "public final AnnotationSetSectionType annotationSetSection;", "modifier": "public final", "type": "AnnotationSetSectionType", "declarator": "annotationSetSection", "var_name": "annotationSetSection"}, {"original_string": "private static Comparator<Map.Entry> toStringKeyComparator =\n            new Comparator<Map.Entry>() {\n                @Override public int compare(Entry o1, Entry o2) {\n                    return o1.getKey().toString().compareTo(o2.getKey().toString());\n                }\n            };", "modifier": "private static", "type": "Comparator<Map.Entry>", "declarator": "toStringKeyComparator =\n            new Comparator<Map.Entry>() {\n                @Override public int compare(Entry o1, Entry o2) {\n                    return o1.getKey().toString().compareTo(o2.getKey().toString());\n                }\n            }", "var_name": "toStringKeyComparator"}], "methods": [{"identifier": "DexWriter", "parameters": "(Opcodes opcodes)", "modifiers": "protected", "return": "", "signature": " DexWriter(Opcodes opcodes)", "full_signature": "protected  DexWriter(Opcodes opcodes)", "class_method_signature": "DexWriter.DexWriter(Opcodes opcodes)", "testcase": false, "constructor": true}, {"identifier": "getSectionProvider", "parameters": "()", "modifiers": "@Nonnull protected abstract", "return": "SectionProvider", "signature": "SectionProvider getSectionProvider()", "full_signature": "@Nonnull protected abstract SectionProvider getSectionProvider()", "class_method_signature": "DexWriter.getSectionProvider()", "testcase": false, "constructor": false}, {"identifier": "writeEncodedValue", "parameters": "(@Nonnull InternalEncodedValueWriter writer,\n                                              @Nonnull EncodedValue encodedValue)", "modifiers": "protected abstract", "return": "void", "signature": "void writeEncodedValue(@Nonnull InternalEncodedValueWriter writer,\n                                              @Nonnull EncodedValue encodedValue)", "full_signature": "protected abstract void writeEncodedValue(@Nonnull InternalEncodedValueWriter writer,\n                                              @Nonnull EncodedValue encodedValue)", "class_method_signature": "DexWriter.writeEncodedValue(@Nonnull InternalEncodedValueWriter writer,\n                                              @Nonnull EncodedValue encodedValue)", "testcase": false, "constructor": false}, {"identifier": "comparableKeyComparator", "parameters": "()", "modifiers": "private static", "return": "Comparator<Map.Entry<? extends T, ?>>", "signature": "Comparator<Map.Entry<? extends T, ?>> comparableKeyComparator()", "full_signature": "private static Comparator<Map.Entry<? extends T, ?>> comparableKeyComparator()", "class_method_signature": "DexWriter.comparableKeyComparator()", "testcase": false, "constructor": false}, {"identifier": "getDataSectionOffset", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getDataSectionOffset()", "full_signature": "private int getDataSectionOffset()", "class_method_signature": "DexWriter.getDataSectionOffset()", "testcase": false, "constructor": false}, {"identifier": "getMethodReferences", "parameters": "()", "modifiers": "@Nonnull public", "return": "List<String>", "signature": "List<String> getMethodReferences()", "full_signature": "@Nonnull public List<String> getMethodReferences()", "class_method_signature": "DexWriter.getMethodReferences()", "testcase": false, "constructor": false}, {"identifier": "getFieldReferences", "parameters": "()", "modifiers": "@Nonnull public", "return": "List<String>", "signature": "List<String> getFieldReferences()", "full_signature": "@Nonnull public List<String> getFieldReferences()", "class_method_signature": "DexWriter.getFieldReferences()", "testcase": false, "constructor": false}, {"identifier": "getTypeReferences", "parameters": "()", "modifiers": "@Nonnull public", "return": "List<String>", "signature": "List<String> getTypeReferences()", "full_signature": "@Nonnull public List<String> getTypeReferences()", "class_method_signature": "DexWriter.getTypeReferences()", "testcase": false, "constructor": false}, {"identifier": "hasOverflowed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasOverflowed()", "full_signature": "public boolean hasOverflowed()", "class_method_signature": "DexWriter.hasOverflowed()", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(@Nonnull DexDataStore dest)", "modifiers": "public", "return": "void", "signature": "void writeTo(@Nonnull DexDataStore dest)", "full_signature": "public void writeTo(@Nonnull DexDataStore dest)", "class_method_signature": "DexWriter.writeTo(@Nonnull DexDataStore dest)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(@Nonnull DexDataStore dest,\n                        @Nonnull DeferredOutputStreamFactory tempFactory)", "modifiers": "public", "return": "void", "signature": "void writeTo(@Nonnull DexDataStore dest,\n                        @Nonnull DeferredOutputStreamFactory tempFactory)", "full_signature": "public void writeTo(@Nonnull DexDataStore dest,\n                        @Nonnull DeferredOutputStreamFactory tempFactory)", "class_method_signature": "DexWriter.writeTo(@Nonnull DexDataStore dest,\n                        @Nonnull DeferredOutputStreamFactory tempFactory)", "testcase": false, "constructor": false}, {"identifier": "updateSignature", "parameters": "(@Nonnull DexDataStore dataStore)", "modifiers": "private", "return": "void", "signature": "void updateSignature(@Nonnull DexDataStore dataStore)", "full_signature": "private void updateSignature(@Nonnull DexDataStore dataStore)", "class_method_signature": "DexWriter.updateSignature(@Nonnull DexDataStore dataStore)", "testcase": false, "constructor": false}, {"identifier": "updateChecksum", "parameters": "(@Nonnull DexDataStore dataStore)", "modifiers": "private", "return": "void", "signature": "void updateChecksum(@Nonnull DexDataStore dataStore)", "full_signature": "private void updateChecksum(@Nonnull DexDataStore dataStore)", "class_method_signature": "DexWriter.updateChecksum(@Nonnull DexDataStore dataStore)", "testcase": false, "constructor": false}, {"identifier": "outputAt", "parameters": "(DexDataStore dataStore, int filePosition)", "modifiers": "private static", "return": "DexDataWriter", "signature": "DexDataWriter outputAt(DexDataStore dataStore, int filePosition)", "full_signature": "private static DexDataWriter outputAt(DexDataStore dataStore, int filePosition)", "class_method_signature": "DexWriter.outputAt(DexDataStore dataStore, int filePosition)", "testcase": false, "constructor": false}, {"identifier": "writeStrings", "parameters": "(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter)", "modifiers": "private", "return": "void", "signature": "void writeStrings(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter)", "full_signature": "private void writeStrings(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter)", "class_method_signature": "DexWriter.writeStrings(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter)", "testcase": false, "constructor": false}, {"identifier": "writeTypes", "parameters": "(@Nonnull DexDataWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeTypes(@Nonnull DexDataWriter writer)", "full_signature": "private void writeTypes(@Nonnull DexDataWriter writer)", "class_method_signature": "DexWriter.writeTypes(@Nonnull DexDataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeProtos", "parameters": "(@Nonnull DexDataWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeProtos(@Nonnull DexDataWriter writer)", "full_signature": "private void writeProtos(@Nonnull DexDataWriter writer)", "class_method_signature": "DexWriter.writeProtos(@Nonnull DexDataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeFields", "parameters": "(@Nonnull DexDataWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeFields(@Nonnull DexDataWriter writer)", "full_signature": "private void writeFields(@Nonnull DexDataWriter writer)", "class_method_signature": "DexWriter.writeFields(@Nonnull DexDataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeMethods", "parameters": "(@Nonnull DexDataWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeMethods(@Nonnull DexDataWriter writer)", "full_signature": "private void writeMethods(@Nonnull DexDataWriter writer)", "class_method_signature": "DexWriter.writeMethods(@Nonnull DexDataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeClasses", "parameters": "(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter)", "modifiers": "private", "return": "void", "signature": "void writeClasses(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter)", "full_signature": "private void writeClasses(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter)", "class_method_signature": "DexWriter.writeClasses(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter)", "testcase": false, "constructor": false}, {"identifier": "writeClass", "parameters": "(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter,\n                           int nextIndex, @Nullable Map.Entry<? extends ClassKey, Integer> entry)", "modifiers": "private", "return": "int", "signature": "int writeClass(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter,\n                           int nextIndex, @Nullable Map.Entry<? extends ClassKey, Integer> entry)", "full_signature": "private int writeClass(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter,\n                           int nextIndex, @Nullable Map.Entry<? extends ClassKey, Integer> entry)", "class_method_signature": "DexWriter.writeClass(@Nonnull DexDataWriter indexWriter, @Nonnull DexDataWriter offsetWriter,\n                           int nextIndex, @Nullable Map.Entry<? extends ClassKey, Integer> entry)", "testcase": false, "constructor": false}, {"identifier": "writeEncodedFields", "parameters": "(@Nonnull DexDataWriter writer, @Nonnull Collection<? extends FieldKey> fields)", "modifiers": "private", "return": "void", "signature": "void writeEncodedFields(@Nonnull DexDataWriter writer, @Nonnull Collection<? extends FieldKey> fields)", "full_signature": "private void writeEncodedFields(@Nonnull DexDataWriter writer, @Nonnull Collection<? extends FieldKey> fields)", "class_method_signature": "DexWriter.writeEncodedFields(@Nonnull DexDataWriter writer, @Nonnull Collection<? extends FieldKey> fields)", "testcase": false, "constructor": false}, {"identifier": "writeEncodedMethods", "parameters": "(@Nonnull DexDataWriter writer, @Nonnull Collection<? extends MethodKey> methods)", "modifiers": "private", "return": "void", "signature": "void writeEncodedMethods(@Nonnull DexDataWriter writer, @Nonnull Collection<? extends MethodKey> methods)", "full_signature": "private void writeEncodedMethods(@Nonnull DexDataWriter writer, @Nonnull Collection<? extends MethodKey> methods)", "class_method_signature": "DexWriter.writeEncodedMethods(@Nonnull DexDataWriter writer, @Nonnull Collection<? extends MethodKey> methods)", "testcase": false, "constructor": false}, {"identifier": "writeTypeLists", "parameters": "(@Nonnull DexDataWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeTypeLists(@Nonnull DexDataWriter writer)", "full_signature": "private void writeTypeLists(@Nonnull DexDataWriter writer)", "class_method_signature": "DexWriter.writeTypeLists(@Nonnull DexDataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeEncodedArrays", "parameters": "(@Nonnull DexDataWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeEncodedArrays(@Nonnull DexDataWriter writer)", "full_signature": "private void writeEncodedArrays(@Nonnull DexDataWriter writer)", "class_method_signature": "DexWriter.writeEncodedArrays(@Nonnull DexDataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeAnnotations", "parameters": "(@Nonnull DexDataWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeAnnotations(@Nonnull DexDataWriter writer)", "full_signature": "private void writeAnnotations(@Nonnull DexDataWriter writer)", "class_method_signature": "DexWriter.writeAnnotations(@Nonnull DexDataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeAnnotationSets", "parameters": "(@Nonnull DexDataWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeAnnotationSets(@Nonnull DexDataWriter writer)", "full_signature": "private void writeAnnotationSets(@Nonnull DexDataWriter writer)", "class_method_signature": "DexWriter.writeAnnotationSets(@Nonnull DexDataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeAnnotationSetRefs", "parameters": "(@Nonnull DexDataWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeAnnotationSetRefs(@Nonnull DexDataWriter writer)", "full_signature": "private void writeAnnotationSetRefs(@Nonnull DexDataWriter writer)", "class_method_signature": "DexWriter.writeAnnotationSetRefs(@Nonnull DexDataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeAnnotationDirectories", "parameters": "(@Nonnull DexDataWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeAnnotationDirectories(@Nonnull DexDataWriter writer)", "full_signature": "private void writeAnnotationDirectories(@Nonnull DexDataWriter writer)", "class_method_signature": "DexWriter.writeAnnotationDirectories(@Nonnull DexDataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeDebugAndCodeItems", "parameters": "(@Nonnull DexDataWriter offsetWriter,\n                                        @Nonnull DeferredOutputStream temp)", "modifiers": "private", "return": "void", "signature": "void writeDebugAndCodeItems(@Nonnull DexDataWriter offsetWriter,\n                                        @Nonnull DeferredOutputStream temp)", "full_signature": "private void writeDebugAndCodeItems(@Nonnull DexDataWriter offsetWriter,\n                                        @Nonnull DeferredOutputStream temp)", "class_method_signature": "DexWriter.writeDebugAndCodeItems(@Nonnull DexDataWriter offsetWriter,\n                                        @Nonnull DeferredOutputStream temp)", "testcase": false, "constructor": false}, {"identifier": "fixInstructions", "parameters": "(@Nonnull MutableMethodImplementation methodImplementation)", "modifiers": "private", "return": "void", "signature": "void fixInstructions(@Nonnull MutableMethodImplementation methodImplementation)", "full_signature": "private void fixInstructions(@Nonnull MutableMethodImplementation methodImplementation)", "class_method_signature": "DexWriter.fixInstructions(@Nonnull MutableMethodImplementation methodImplementation)", "testcase": false, "constructor": false}, {"identifier": "writeDebugItem", "parameters": "(@Nonnull DexDataWriter writer,\n                               @Nonnull DebugWriter<StringKey, TypeKey> debugWriter,\n                               @Nullable Iterable<? extends StringKey> parameterNames,\n                               @Nullable Iterable<? extends DebugItem> debugItems)", "modifiers": "private", "return": "int", "signature": "int writeDebugItem(@Nonnull DexDataWriter writer,\n                               @Nonnull DebugWriter<StringKey, TypeKey> debugWriter,\n                               @Nullable Iterable<? extends StringKey> parameterNames,\n                               @Nullable Iterable<? extends DebugItem> debugItems)", "full_signature": "private int writeDebugItem(@Nonnull DexDataWriter writer,\n                               @Nonnull DebugWriter<StringKey, TypeKey> debugWriter,\n                               @Nullable Iterable<? extends StringKey> parameterNames,\n                               @Nullable Iterable<? extends DebugItem> debugItems)", "class_method_signature": "DexWriter.writeDebugItem(@Nonnull DexDataWriter writer,\n                               @Nonnull DebugWriter<StringKey, TypeKey> debugWriter,\n                               @Nullable Iterable<? extends StringKey> parameterNames,\n                               @Nullable Iterable<? extends DebugItem> debugItems)", "testcase": false, "constructor": false}, {"identifier": "writeCodeItem", "parameters": "(@Nonnull DexDataWriter writer,\n                              @Nonnull ByteArrayOutputStream ehBuf,\n                              @Nonnull MethodKey methodKey,\n                              @Nonnull List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks,\n                              @Nullable Iterable<? extends Instruction> instructions,\n                              int debugItemOffset)", "modifiers": "private", "return": "int", "signature": "int writeCodeItem(@Nonnull DexDataWriter writer,\n                              @Nonnull ByteArrayOutputStream ehBuf,\n                              @Nonnull MethodKey methodKey,\n                              @Nonnull List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks,\n                              @Nullable Iterable<? extends Instruction> instructions,\n                              int debugItemOffset)", "full_signature": "private int writeCodeItem(@Nonnull DexDataWriter writer,\n                              @Nonnull ByteArrayOutputStream ehBuf,\n                              @Nonnull MethodKey methodKey,\n                              @Nonnull List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks,\n                              @Nullable Iterable<? extends Instruction> instructions,\n                              int debugItemOffset)", "class_method_signature": "DexWriter.writeCodeItem(@Nonnull DexDataWriter writer,\n                              @Nonnull ByteArrayOutputStream ehBuf,\n                              @Nonnull MethodKey methodKey,\n                              @Nonnull List<? extends TryBlock<? extends ExceptionHandler>> tryBlocks,\n                              @Nullable Iterable<? extends Instruction> instructions,\n                              int debugItemOffset)", "testcase": false, "constructor": false}, {"identifier": "calcNumItems", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int calcNumItems()", "full_signature": "private int calcNumItems()", "class_method_signature": "DexWriter.calcNumItems()", "testcase": false, "constructor": false}, {"identifier": "writeMapItem", "parameters": "(@Nonnull DexDataWriter writer)", "modifiers": "private", "return": "void", "signature": "void writeMapItem(@Nonnull DexDataWriter writer)", "full_signature": "private void writeMapItem(@Nonnull DexDataWriter writer)", "class_method_signature": "DexWriter.writeMapItem(@Nonnull DexDataWriter writer)", "testcase": false, "constructor": false}, {"identifier": "writeMapItem", "parameters": "(@Nonnull DexDataWriter writer, int type, int size, int offset)", "modifiers": "private", "return": "void", "signature": "void writeMapItem(@Nonnull DexDataWriter writer, int type, int size, int offset)", "full_signature": "private void writeMapItem(@Nonnull DexDataWriter writer, int type, int size, int offset)", "class_method_signature": "DexWriter.writeMapItem(@Nonnull DexDataWriter writer, int type, int size, int offset)", "testcase": false, "constructor": false}, {"identifier": "writeHeader", "parameters": "(@Nonnull DexDataWriter writer, int dataOffset, int fileSize)", "modifiers": "private", "return": "void", "signature": "void writeHeader(@Nonnull DexDataWriter writer, int dataOffset, int fileSize)", "full_signature": "private void writeHeader(@Nonnull DexDataWriter writer, int dataOffset, int fileSize)", "class_method_signature": "DexWriter.writeHeader(@Nonnull DexDataWriter writer, int dataOffset, int fileSize)", "testcase": false, "constructor": false}, {"identifier": "writeSectionInfo", "parameters": "(DexDataWriter writer, int numItems, int offset)", "modifiers": "private", "return": "void", "signature": "void writeSectionInfo(DexDataWriter writer, int numItems, int offset)", "full_signature": "private void writeSectionInfo(DexDataWriter writer, int numItems, int offset)", "class_method_signature": "DexWriter.writeSectionInfo(DexDataWriter writer, int numItems, int offset)", "testcase": false, "constructor": false}, {"identifier": "shouldCreateEmptyAnnotationSet", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean shouldCreateEmptyAnnotationSet()", "full_signature": "private boolean shouldCreateEmptyAnnotationSet()", "class_method_signature": "DexWriter.shouldCreateEmptyAnnotationSet()", "testcase": false, "constructor": false}], "file": "smali/dexlib2/src/main/java/org/jf/dexlib2/writer/DexWriter.java"}, "focal_method": {"identifier": "writeTo", "parameters": "(@Nonnull DexDataStore dest)", "modifiers": "public", "return": "void", "body": "public void writeTo(@Nonnull DexDataStore dest) throws IOException {\n        this.writeTo(dest, MemoryDeferredOutputStream.getFactory());\n    }", "signature": "void writeTo(@Nonnull DexDataStore dest)", "full_signature": "public void writeTo(@Nonnull DexDataStore dest)", "class_method_signature": "DexWriter.writeTo(@Nonnull DexDataStore dest)", "testcase": false, "constructor": false, "invocations": ["writeTo", "getFactory"]}, "repository": {"repo_id": 132102082, "url": "https://github.com/marshalyauly/vmp", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 12726, "license": "licensed"}}