{"test_class": {"identifier": "ClientSettingsWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClientSettingsWrapper wrapper;", "modifier": "private", "type": "ClientSettingsWrapper", "declarator": "wrapper", "var_name": "wrapper"}, {"original_string": "private ClientSettingsWrapper wrapperNullEntry;", "modifier": "private", "type": "ClientSettingsWrapper", "declarator": "wrapperNullEntry", "var_name": "wrapperNullEntry"}, {"original_string": "private ClientSettingsWrapper wrapperInvalidEntry;", "modifier": "private", "type": "ClientSettingsWrapper", "declarator": "wrapperInvalidEntry", "var_name": "wrapperInvalidEntry"}, {"original_string": "private File tempTestFile;", "modifier": "private", "type": "File", "declarator": "tempTestFile", "var_name": "tempTestFile"}, {"original_string": "private File tempTestFileNullEntry;", "modifier": "private", "type": "File", "declarator": "tempTestFileNullEntry", "var_name": "tempTestFileNullEntry"}, {"original_string": "private File tempTestFileInvalidEntry;", "modifier": "private", "type": "File", "declarator": "tempTestFileInvalidEntry", "var_name": "tempTestFileInvalidEntry"}, {"original_string": "private TankSelector testTank;", "modifier": "private", "type": "TankSelector", "declarator": "testTank", "var_name": "testTank"}], "file": "src/osip-core/src/test/java/edu/kit/pse/osip/core/io/files/ClientSettingsWrapperTest.java"}, "test_case": {"identifier": "testGetPort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPort() {\n        int result = wrapper.getPort(testTank, -1);\n        assertEquals(4242, result);\n    }", "signature": "void testGetPort()", "full_signature": "@Test public void testGetPort()", "class_method_signature": "ClientSettingsWrapperTest.testGetPort()", "testcase": true, "constructor": false, "invocations": ["getPort", "assertEquals"]}, "focal_class": {"identifier": "ClientSettingsWrapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File settingsFile;", "modifier": "private", "type": "File", "declarator": "settingsFile", "var_name": "settingsFile"}, {"original_string": "private Properties properties;", "modifier": "private", "type": "Properties", "declarator": "properties", "var_name": "properties"}], "methods": [{"identifier": "ClientSettingsWrapper", "parameters": "(File settingsFile)", "modifiers": "public", "return": "", "signature": " ClientSettingsWrapper(File settingsFile)", "full_signature": "public  ClientSettingsWrapper(File settingsFile)", "class_method_signature": "ClientSettingsWrapper.ClientSettingsWrapper(File settingsFile)", "testcase": false, "constructor": true}, {"identifier": "setServerHostname", "parameters": "(TankSelector tank, String hostname)", "modifiers": "public final", "return": "void", "signature": "void setServerHostname(TankSelector tank, String hostname)", "full_signature": "public final void setServerHostname(TankSelector tank, String hostname)", "class_method_signature": "ClientSettingsWrapper.setServerHostname(TankSelector tank, String hostname)", "testcase": false, "constructor": false}, {"identifier": "setServerPort", "parameters": "(TankSelector tank, int portServer)", "modifiers": "public final", "return": "void", "signature": "void setServerPort(TankSelector tank, int portServer)", "full_signature": "public final void setServerPort(TankSelector tank, int portServer)", "class_method_signature": "ClientSettingsWrapper.setServerPort(TankSelector tank, int portServer)", "testcase": false, "constructor": false}, {"identifier": "setFetchInterval", "parameters": "(int intervalMs)", "modifiers": "public final", "return": "void", "signature": "void setFetchInterval(int intervalMs)", "full_signature": "public final void setFetchInterval(int intervalMs)", "class_method_signature": "ClientSettingsWrapper.setFetchInterval(int intervalMs)", "testcase": false, "constructor": false}, {"identifier": "setOverflowAlarm", "parameters": "(TankSelector tank, boolean enabled)", "modifiers": "public final", "return": "void", "signature": "void setOverflowAlarm(TankSelector tank, boolean enabled)", "full_signature": "public final void setOverflowAlarm(TankSelector tank, boolean enabled)", "class_method_signature": "ClientSettingsWrapper.setOverflowAlarm(TankSelector tank, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "setUnderflowAlarm", "parameters": "(TankSelector tank, boolean enabled)", "modifiers": "public final", "return": "void", "signature": "void setUnderflowAlarm(TankSelector tank, boolean enabled)", "full_signature": "public final void setUnderflowAlarm(TankSelector tank, boolean enabled)", "class_method_signature": "ClientSettingsWrapper.setUnderflowAlarm(TankSelector tank, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "setOverheatingAlarm", "parameters": "(TankSelector tank, boolean enabled)", "modifiers": "public final", "return": "void", "signature": "void setOverheatingAlarm(TankSelector tank, boolean enabled)", "full_signature": "public final void setOverheatingAlarm(TankSelector tank, boolean enabled)", "class_method_signature": "ClientSettingsWrapper.setOverheatingAlarm(TankSelector tank, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "setUndercoolingAlarm", "parameters": "(TankSelector tank, boolean enabled)", "modifiers": "public final", "return": "void", "signature": "void setUndercoolingAlarm(TankSelector tank, boolean enabled)", "full_signature": "public final void setUndercoolingAlarm(TankSelector tank, boolean enabled)", "class_method_signature": "ClientSettingsWrapper.setUndercoolingAlarm(TankSelector tank, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "setTempDiagram", "parameters": "(TankSelector tank, boolean enabled)", "modifiers": "public final", "return": "void", "signature": "void setTempDiagram(TankSelector tank, boolean enabled)", "full_signature": "public final void setTempDiagram(TankSelector tank, boolean enabled)", "class_method_signature": "ClientSettingsWrapper.setTempDiagram(TankSelector tank, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "setFillLevelDiagram", "parameters": "(TankSelector tank, boolean enabled)", "modifiers": "public final", "return": "void", "signature": "void setFillLevelDiagram(TankSelector tank, boolean enabled)", "full_signature": "public final void setFillLevelDiagram(TankSelector tank, boolean enabled)", "class_method_signature": "ClientSettingsWrapper.setFillLevelDiagram(TankSelector tank, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "getFetchInterval", "parameters": "(int defaultValue)", "modifiers": "public final", "return": "int", "signature": "int getFetchInterval(int defaultValue)", "full_signature": "public final int getFetchInterval(int defaultValue)", "class_method_signature": "ClientSettingsWrapper.getFetchInterval(int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getOverheatingAlarm", "parameters": "(TankSelector tank, boolean defaultValue)", "modifiers": "public final", "return": "boolean", "signature": "boolean getOverheatingAlarm(TankSelector tank, boolean defaultValue)", "full_signature": "public final boolean getOverheatingAlarm(TankSelector tank, boolean defaultValue)", "class_method_signature": "ClientSettingsWrapper.getOverheatingAlarm(TankSelector tank, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getUndercoolingAlarm", "parameters": "(TankSelector tank, boolean defaultValue)", "modifiers": "public final", "return": "boolean", "signature": "boolean getUndercoolingAlarm(TankSelector tank, boolean defaultValue)", "full_signature": "public final boolean getUndercoolingAlarm(TankSelector tank, boolean defaultValue)", "class_method_signature": "ClientSettingsWrapper.getUndercoolingAlarm(TankSelector tank, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getOverflowAlarm", "parameters": "(TankSelector tank, boolean defaultValue)", "modifiers": "public final", "return": "boolean", "signature": "boolean getOverflowAlarm(TankSelector tank, boolean defaultValue)", "full_signature": "public final boolean getOverflowAlarm(TankSelector tank, boolean defaultValue)", "class_method_signature": "ClientSettingsWrapper.getOverflowAlarm(TankSelector tank, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getUnderflowAlarm", "parameters": "(TankSelector tank, boolean defaultValue)", "modifiers": "public final", "return": "boolean", "signature": "boolean getUnderflowAlarm(TankSelector tank, boolean defaultValue)", "full_signature": "public final boolean getUnderflowAlarm(TankSelector tank, boolean defaultValue)", "class_method_signature": "ClientSettingsWrapper.getUnderflowAlarm(TankSelector tank, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getTempDiagram", "parameters": "(TankSelector tank, boolean defaultValue)", "modifiers": "public final", "return": "boolean", "signature": "boolean getTempDiagram(TankSelector tank, boolean defaultValue)", "full_signature": "public final boolean getTempDiagram(TankSelector tank, boolean defaultValue)", "class_method_signature": "ClientSettingsWrapper.getTempDiagram(TankSelector tank, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getFillLevelDiagram", "parameters": "(TankSelector tank, boolean defaultValue)", "modifiers": "public final", "return": "boolean", "signature": "boolean getFillLevelDiagram(TankSelector tank, boolean defaultValue)", "full_signature": "public final boolean getFillLevelDiagram(TankSelector tank, boolean defaultValue)", "class_method_signature": "ClientSettingsWrapper.getFillLevelDiagram(TankSelector tank, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getHostname", "parameters": "(TankSelector tank, String defaultValue)", "modifiers": "public final", "return": "String", "signature": "String getHostname(TankSelector tank, String defaultValue)", "full_signature": "public final String getHostname(TankSelector tank, String defaultValue)", "class_method_signature": "ClientSettingsWrapper.getHostname(TankSelector tank, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "(TankSelector tank, int defaultValue)", "modifiers": "public final", "return": "int", "signature": "int getPort(TankSelector tank, int defaultValue)", "full_signature": "public final int getPort(TankSelector tank, int defaultValue)", "class_method_signature": "ClientSettingsWrapper.getPort(TankSelector tank, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "saveSettings", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void saveSettings()", "full_signature": "public final void saveSettings()", "class_method_signature": "ClientSettingsWrapper.saveSettings()", "testcase": false, "constructor": false}], "file": "src/osip-core/src/main/java/edu/kit/pse/osip/core/io/files/ClientSettingsWrapper.java"}, "focal_method": {"identifier": "getPort", "parameters": "(TankSelector tank, int defaultValue)", "modifiers": "public final", "return": "int", "body": "public final int getPort(TankSelector tank, int defaultValue) {\n        String tankString = tank.name();\n        String entry = properties.getProperty(\"serverPort_\" + tankString); \n        if (entry == null) {\n            return defaultValue;\n        }\n        try {\n            return Integer.parseInt(entry);      \n        } catch (NumberFormatException e) {\n            return defaultValue;\n        }\n    }", "signature": "int getPort(TankSelector tank, int defaultValue)", "full_signature": "public final int getPort(TankSelector tank, int defaultValue)", "class_method_signature": "ClientSettingsWrapper.getPort(TankSelector tank, int defaultValue)", "testcase": false, "constructor": false, "invocations": ["name", "getProperty", "parseInt"]}, "repository": {"repo_id": 74042107, "url": "https://github.com/ByteHamster/PSE", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 18396, "license": "licensed"}}