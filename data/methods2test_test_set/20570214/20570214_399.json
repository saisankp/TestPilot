{"test_class": {"identifier": "KeyManagerImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/KeyManagerImplTest.java"}, "test_case": {"identifier": "getPrimitive_MessageLite_throwsInvalidKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getPrimitive_MessageLite_throwsInvalidKey() throws Exception {\n    KeyManager<Aead> keyManager = new KeyManagerImpl<>(new TestKeyTypeManager(), Aead.class);\n    MessageLite notAKey = AesGcmKey.getDefaultInstance();\n    try {\n      keyManager.getPrimitive(notAKey);\n      fail(\"expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"validateKey(AesGcmKey) failed\");\n    }\n  }", "signature": "void getPrimitive_MessageLite_throwsInvalidKey()", "full_signature": "@Test public void getPrimitive_MessageLite_throwsInvalidKey()", "class_method_signature": "KeyManagerImplTest.getPrimitive_MessageLite_throwsInvalidKey()", "testcase": true, "constructor": false, "invocations": ["getDefaultInstance", "getPrimitive", "fail", "contains", "assertThat", "toString"]}, "focal_class": {"identifier": "KeyManagerImpl", "superclass": "", "interfaces": "implements KeyManager<PrimitiveT>", "fields": [{"original_string": "private final KeyTypeManager<KeyProtoT> keyTypeManager;", "modifier": "private final", "type": "KeyTypeManager<KeyProtoT>", "declarator": "keyTypeManager", "var_name": "keyTypeManager"}, {"original_string": "private final Class<PrimitiveT> primitiveClass;", "modifier": "private final", "type": "Class<PrimitiveT>", "declarator": "primitiveClass", "var_name": "primitiveClass"}], "methods": [{"identifier": "KeyManagerImpl", "parameters": "(\n      KeyTypeManager<KeyProtoT> keyTypeManager, Class<PrimitiveT> primitiveClass)", "modifiers": "public", "return": "", "signature": " KeyManagerImpl(\n      KeyTypeManager<KeyProtoT> keyTypeManager, Class<PrimitiveT> primitiveClass)", "full_signature": "public  KeyManagerImpl(\n      KeyTypeManager<KeyProtoT> keyTypeManager, Class<PrimitiveT> primitiveClass)", "class_method_signature": "KeyManagerImpl.KeyManagerImpl(\n      KeyTypeManager<KeyProtoT> keyTypeManager, Class<PrimitiveT> primitiveClass)", "testcase": false, "constructor": true}, {"identifier": "castOrThrowSecurityException", "parameters": "(\n      Object objectToCast, String exceptionText, Class<CastedT> classObject)", "modifiers": "private static", "return": "CastedT", "signature": "CastedT castOrThrowSecurityException(\n      Object objectToCast, String exceptionText, Class<CastedT> classObject)", "full_signature": "private static CastedT castOrThrowSecurityException(\n      Object objectToCast, String exceptionText, Class<CastedT> classObject)", "class_method_signature": "KeyManagerImpl.castOrThrowSecurityException(\n      Object objectToCast, String exceptionText, Class<CastedT> classObject)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(ByteString serializedKey)", "modifiers": "@Override public final", "return": "PrimitiveT", "signature": "PrimitiveT getPrimitive(ByteString serializedKey)", "full_signature": "@Override public final PrimitiveT getPrimitive(ByteString serializedKey)", "class_method_signature": "KeyManagerImpl.getPrimitive(ByteString serializedKey)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(MessageLite key)", "modifiers": "@Override public final", "return": "PrimitiveT", "signature": "PrimitiveT getPrimitive(MessageLite key)", "full_signature": "@Override public final PrimitiveT getPrimitive(MessageLite key)", "class_method_signature": "KeyManagerImpl.getPrimitive(MessageLite key)", "testcase": false, "constructor": false}, {"identifier": "newKey", "parameters": "(ByteString serializedKeyFormat)", "modifiers": "@Override public final", "return": "MessageLite", "signature": "MessageLite newKey(ByteString serializedKeyFormat)", "full_signature": "@Override public final MessageLite newKey(ByteString serializedKeyFormat)", "class_method_signature": "KeyManagerImpl.newKey(ByteString serializedKeyFormat)", "testcase": false, "constructor": false}, {"identifier": "newKey", "parameters": "(MessageLite keyFormat)", "modifiers": "@Override public final", "return": "MessageLite", "signature": "MessageLite newKey(MessageLite keyFormat)", "full_signature": "@Override public final MessageLite newKey(MessageLite keyFormat)", "class_method_signature": "KeyManagerImpl.newKey(MessageLite keyFormat)", "testcase": false, "constructor": false}, {"identifier": "doesSupport", "parameters": "(String typeUrl)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean doesSupport(String typeUrl)", "full_signature": "@Override public final boolean doesSupport(String typeUrl)", "class_method_signature": "KeyManagerImpl.doesSupport(String typeUrl)", "testcase": false, "constructor": false}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public final String getKeyType()", "class_method_signature": "KeyManagerImpl.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "KeyManagerImpl.getVersion()", "testcase": false, "constructor": false}, {"identifier": "newKeyData", "parameters": "(ByteString serializedKeyFormat)", "modifiers": "@Override public final", "return": "KeyData", "signature": "KeyData newKeyData(ByteString serializedKeyFormat)", "full_signature": "@Override public final KeyData newKeyData(ByteString serializedKeyFormat)", "class_method_signature": "KeyManagerImpl.newKeyData(ByteString serializedKeyFormat)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveClass", "parameters": "()", "modifiers": "@Override public final", "return": "Class<PrimitiveT>", "signature": "Class<PrimitiveT> getPrimitiveClass()", "full_signature": "@Override public final Class<PrimitiveT> getPrimitiveClass()", "class_method_signature": "KeyManagerImpl.getPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "validateKeyAndGetPrimitive", "parameters": "(KeyProtoT keyProto)", "modifiers": "private", "return": "PrimitiveT", "signature": "PrimitiveT validateKeyAndGetPrimitive(KeyProtoT keyProto)", "full_signature": "private PrimitiveT validateKeyAndGetPrimitive(KeyProtoT keyProto)", "class_method_signature": "KeyManagerImpl.validateKeyAndGetPrimitive(KeyProtoT keyProto)", "testcase": false, "constructor": false}, {"identifier": "keyFactoryHelper", "parameters": "()", "modifiers": "private", "return": "KeyFactoryHelper<?, KeyProtoT>", "signature": "KeyFactoryHelper<?, KeyProtoT> keyFactoryHelper()", "full_signature": "private KeyFactoryHelper<?, KeyProtoT> keyFactoryHelper()", "class_method_signature": "KeyManagerImpl.keyFactoryHelper()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/KeyManagerImpl.java"}, "focal_method": {"identifier": "getPrimitive", "parameters": "(ByteString serializedKey)", "modifiers": "@Override public final", "return": "PrimitiveT", "body": "@Override\n  public final PrimitiveT getPrimitive(ByteString serializedKey) throws GeneralSecurityException {\n    try {\n      KeyProtoT keyProto = keyTypeManager.parseKey(serializedKey);\n      return validateKeyAndGetPrimitive(keyProto);\n    } catch (InvalidProtocolBufferException e) {\n      throw new GeneralSecurityException(\n          \"Failures parsing proto of type \" + keyTypeManager.getKeyClass().getName(), e);\n    }\n  }", "signature": "PrimitiveT getPrimitive(ByteString serializedKey)", "full_signature": "@Override public final PrimitiveT getPrimitive(ByteString serializedKey)", "class_method_signature": "KeyManagerImpl.getPrimitive(ByteString serializedKey)", "testcase": false, "constructor": false, "invocations": ["parseKey", "validateKeyAndGetPrimitive", "getName", "getKeyClass"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}