{"test_class": {"identifier": "MultiReferenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Reference reference1;", "modifier": "private", "type": "Reference", "declarator": "reference1", "var_name": "reference1"}, {"original_string": "private Reference reference2;", "modifier": "private", "type": "Reference", "declarator": "reference2", "var_name": "reference2"}, {"original_string": "private Reference reference3;", "modifier": "private", "type": "Reference", "declarator": "reference3", "var_name": "reference3"}, {"original_string": "private ReferenceContext context;", "modifier": "private", "type": "ReferenceContext", "declarator": "context", "var_name": "context"}], "file": "preon-el/src/test/java/org/codehaus/preon/el/ctx/MultiReferenceTest.java"}, "test_case": {"identifier": "testNarrow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNarrow() {\n        StringBuilder builder = new StringBuilder();\n        Document document = new StringBuilderDocument(builder);\n        String propertyName = \"pi\";\n        expect(reference1.narrow(String.class)).andReturn(reference1);\n        expect(reference2.narrow(String.class)).andReturn(reference2);\n        expect(reference1.getType()).andReturn(String.class).times(2);\n        expect(reference2.getType()).andReturn(String.class).times(2);\n        expect(reference1.getReferenceContext()).andReturn(context).times(2);\n        expect(reference2.getReferenceContext()).andReturn(context).times(2);\n        replay(reference1, reference2, context);\n        MultiReference multi = new MultiReference(reference1, reference2);\n        multi.narrow(String.class);\n        verify(reference1, reference2, context);\n    }", "signature": "void testNarrow()", "full_signature": "@Test public void testNarrow()", "class_method_signature": "MultiReferenceTest.testNarrow()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "narrow", "andReturn", "expect", "narrow", "times", "andReturn", "expect", "getType", "times", "andReturn", "expect", "getType", "times", "andReturn", "expect", "getReferenceContext", "times", "andReturn", "expect", "getReferenceContext", "replay", "narrow", "verify"]}, "focal_class": {"identifier": "MultiReference", "superclass": "", "interfaces": "implements Reference<E>", "fields": [{"original_string": "private static Reference[] REFERENCE_ARRAY_TYPE = new Reference[0];", "modifier": "private static", "type": "Reference[]", "declarator": "REFERENCE_ARRAY_TYPE = new Reference[0]", "var_name": "REFERENCE_ARRAY_TYPE"}, {"original_string": "private Reference<E>[] references;", "modifier": "private", "type": "Reference<E>[]", "declarator": "references", "var_name": "references"}, {"original_string": "private ReferenceContext<E> context;", "modifier": "private", "type": "ReferenceContext<E>", "declarator": "context", "var_name": "context"}, {"original_string": "private Class<?> commonSuperType;", "modifier": "private", "type": "Class<?>", "declarator": "commonSuperType", "var_name": "commonSuperType"}], "methods": [{"identifier": "MultiReference", "parameters": "(Reference<E>... references)", "modifiers": "public", "return": "", "signature": " MultiReference(Reference<E>... references)", "full_signature": "public  MultiReference(Reference<E>... references)", "class_method_signature": "MultiReference.MultiReference(Reference<E>... references)", "testcase": false, "constructor": true}, {"identifier": "calculateCommonSuperType", "parameters": "(\n            Reference<E>... references)", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> calculateCommonSuperType(\n            Reference<E>... references)", "full_signature": "private static Class<?> calculateCommonSuperType(\n            Reference<E>... references)", "class_method_signature": "MultiReference.calculateCommonSuperType(\n            Reference<E>... references)", "testcase": false, "constructor": false}, {"identifier": "getReferenceContext", "parameters": "()", "modifiers": "public", "return": "ReferenceContext<E>", "signature": "ReferenceContext<E> getReferenceContext()", "full_signature": "public ReferenceContext<E> getReferenceContext()", "class_method_signature": "MultiReference.getReferenceContext()", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(E context)", "modifiers": "public", "return": "Object", "signature": "Object resolve(E context)", "full_signature": "public Object resolve(E context)", "class_method_signature": "MultiReference.resolve(E context)", "testcase": false, "constructor": false}, {"identifier": "selectItem", "parameters": "(String index)", "modifiers": "public", "return": "Reference<E>", "signature": "Reference<E> selectItem(String index)", "full_signature": "public Reference<E> selectItem(String index)", "class_method_signature": "MultiReference.selectItem(String index)", "testcase": false, "constructor": false}, {"identifier": "selectItem", "parameters": "(Expression<Integer, E> index)", "modifiers": "public", "return": "Reference<E>", "signature": "Reference<E> selectItem(Expression<Integer, E> index)", "full_signature": "public Reference<E> selectItem(Expression<Integer, E> index)", "class_method_signature": "MultiReference.selectItem(Expression<Integer, E> index)", "testcase": false, "constructor": false}, {"identifier": "selectAttribute", "parameters": "(String name)", "modifiers": "public", "return": "Reference<E>", "signature": "Reference<E> selectAttribute(String name)", "full_signature": "public Reference<E> selectAttribute(String name)", "class_method_signature": "MultiReference.selectAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "document", "parameters": "(Document target)", "modifiers": "public", "return": "void", "signature": "void document(Document target)", "full_signature": "public void document(Document target)", "class_method_signature": "MultiReference.document(Document target)", "testcase": false, "constructor": false}, {"identifier": "isAssignableTo", "parameters": "(Class<?> type)", "modifiers": "public", "return": "boolean", "signature": "boolean isAssignableTo(Class<?> type)", "full_signature": "public boolean isAssignableTo(Class<?> type)", "class_method_signature": "MultiReference.isAssignableTo(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getType()", "full_signature": "public Class<?> getType()", "class_method_signature": "MultiReference.getType()", "testcase": false, "constructor": false}, {"identifier": "narrow", "parameters": "(Class<?> type)", "modifiers": "public", "return": "Reference<E>", "signature": "Reference<E> narrow(Class<?> type)", "full_signature": "public Reference<E> narrow(Class<?> type)", "class_method_signature": "MultiReference.narrow(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isBasedOn", "parameters": "(ReferenceContext<E> context)", "modifiers": "public", "return": "boolean", "signature": "boolean isBasedOn(ReferenceContext<E> context)", "full_signature": "public boolean isBasedOn(ReferenceContext<E> context)", "class_method_signature": "MultiReference.isBasedOn(ReferenceContext<E> context)", "testcase": false, "constructor": false}, {"identifier": "rescope", "parameters": "(ReferenceContext<E> eReferenceContext)", "modifiers": "public", "return": "Reference<E>", "signature": "Reference<E> rescope(ReferenceContext<E> eReferenceContext)", "full_signature": "public Reference<E> rescope(ReferenceContext<E> eReferenceContext)", "class_method_signature": "MultiReference.rescope(ReferenceContext<E> eReferenceContext)", "testcase": false, "constructor": false}], "file": "preon-el/src/main/java/org/codehaus/preon/el/ctx/MultiReference.java"}, "focal_method": {"identifier": "narrow", "parameters": "(Class<?> type)", "modifiers": "public", "return": "Reference<E>", "body": "public Reference<E> narrow(Class<?> type) throws BindingException {\n        List<Reference<E>> resulting = new ArrayList<Reference<E>>();\n        for (Reference<E> reference :references) {\n            Reference<E> result = reference.narrow(type);\n            if (result != null) {\n                resulting.add(result);\n            }\n        }\n        if (resulting.size() == 0) {\n            return null;\n        } else {\n            return new MultiReference<E>(resulting.toArray(REFERENCE_ARRAY_TYPE));\n        }\n    }", "signature": "Reference<E> narrow(Class<?> type)", "full_signature": "public Reference<E> narrow(Class<?> type)", "class_method_signature": "MultiReference.narrow(Class<?> type)", "testcase": false, "constructor": false, "invocations": ["narrow", "add", "size", "toArray"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}