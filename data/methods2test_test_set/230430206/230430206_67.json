{"test_class": {"identifier": "X509UtilTest", "superclass": "extends BaseX509ParameterizedTestCase", "interfaces": "", "fields": [{"original_string": "private X509Util x509Util;", "modifier": "private", "type": "X509Util", "declarator": "x509Util", "var_name": "x509Util"}, {"original_string": "private static final String[] customCipherSuites = new String[]{\n            \"SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n            \"SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA\"};", "modifier": "private static final", "type": "String[]", "declarator": "customCipherSuites = new String[]{\n            \"SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA\",\n            \"SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA\"}", "var_name": "customCipherSuites"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java"}, "test_case": {"identifier": "testLoadJKSTrustStoreAutodetectStoreFileType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadJKSTrustStoreAutodetectStoreFileType() throws Exception {\n        // Make sure we can instantiate a trust manager from the JKS file on disk\n        X509TrustManager tm = X509Util.createTrustManager(\n                x509TestContext.getTrustStoreFile(KeyStoreFileType.JKS).getAbsolutePath(),\n                x509TestContext.getTrustStorePassword(),\n                null,  // null StoreFileType means 'autodetect from file extension'\n                true,\n                true,\n                true,\n                true);\n    }", "signature": "void testLoadJKSTrustStoreAutodetectStoreFileType()", "full_signature": "@Test public void testLoadJKSTrustStoreAutodetectStoreFileType()", "class_method_signature": "X509UtilTest.testLoadJKSTrustStoreAutodetectStoreFileType()", "testcase": true, "constructor": false, "invocations": ["createTrustManager", "getAbsolutePath", "getTrustStoreFile", "getTrustStorePassword"]}, "focal_class": {"identifier": "X509Util", "superclass": "", "interfaces": "implements Closeable, AutoCloseable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(X509Util.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(X509Util.class)", "var_name": "LOG"}, {"original_string": "private static final String REJECT_CLIENT_RENEGOTIATION_PROPERTY =\n            \"jdk.tls.rejectClientInitiatedRenegotiation\";", "modifier": "private static final", "type": "String", "declarator": "REJECT_CLIENT_RENEGOTIATION_PROPERTY =\n            \"jdk.tls.rejectClientInitiatedRenegotiation\"", "var_name": "REJECT_CLIENT_RENEGOTIATION_PROPERTY"}, {"original_string": "static final String DEFAULT_PROTOCOL = \"TLSv1.2\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_PROTOCOL = \"TLSv1.2\"", "var_name": "DEFAULT_PROTOCOL"}, {"original_string": "private static final String[] DEFAULT_CIPHERS_JAVA8 = concatArrays(getCBCCiphers(), getGCMCiphers());", "modifier": "private static final", "type": "String[]", "declarator": "DEFAULT_CIPHERS_JAVA8 = concatArrays(getCBCCiphers(), getGCMCiphers())", "var_name": "DEFAULT_CIPHERS_JAVA8"}, {"original_string": "private static final String[] DEFAULT_CIPHERS_JAVA9 = concatArrays(getGCMCiphers(), getCBCCiphers());", "modifier": "private static final", "type": "String[]", "declarator": "DEFAULT_CIPHERS_JAVA9 = concatArrays(getGCMCiphers(), getCBCCiphers())", "var_name": "DEFAULT_CIPHERS_JAVA9"}, {"original_string": "public static final int DEFAULT_HANDSHAKE_DETECTION_TIMEOUT_MILLIS = 5000;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_HANDSHAKE_DETECTION_TIMEOUT_MILLIS = 5000", "var_name": "DEFAULT_HANDSHAKE_DETECTION_TIMEOUT_MILLIS"}, {"original_string": "private String sslProtocolProperty = getConfigPrefix() + \"protocol\";", "modifier": "private", "type": "String", "declarator": "sslProtocolProperty = getConfigPrefix() + \"protocol\"", "var_name": "sslProtocolProperty"}, {"original_string": "private String sslEnabledProtocolsProperty = getConfigPrefix() + \"enabledProtocols\";", "modifier": "private", "type": "String", "declarator": "sslEnabledProtocolsProperty = getConfigPrefix() + \"enabledProtocols\"", "var_name": "sslEnabledProtocolsProperty"}, {"original_string": "private String cipherSuitesProperty = getConfigPrefix() + \"ciphersuites\";", "modifier": "private", "type": "String", "declarator": "cipherSuitesProperty = getConfigPrefix() + \"ciphersuites\"", "var_name": "cipherSuitesProperty"}, {"original_string": "private String sslKeystoreLocationProperty = getConfigPrefix() + \"keyStore.location\";", "modifier": "private", "type": "String", "declarator": "sslKeystoreLocationProperty = getConfigPrefix() + \"keyStore.location\"", "var_name": "sslKeystoreLocationProperty"}, {"original_string": "private String sslKeystorePasswdProperty = getConfigPrefix() + \"keyStore.password\";", "modifier": "private", "type": "String", "declarator": "sslKeystorePasswdProperty = getConfigPrefix() + \"keyStore.password\"", "var_name": "sslKeystorePasswdProperty"}, {"original_string": "private String sslKeystoreTypeProperty = getConfigPrefix() + \"keyStore.type\";", "modifier": "private", "type": "String", "declarator": "sslKeystoreTypeProperty = getConfigPrefix() + \"keyStore.type\"", "var_name": "sslKeystoreTypeProperty"}, {"original_string": "private String sslTruststoreLocationProperty = getConfigPrefix() + \"trustStore.location\";", "modifier": "private", "type": "String", "declarator": "sslTruststoreLocationProperty = getConfigPrefix() + \"trustStore.location\"", "var_name": "sslTruststoreLocationProperty"}, {"original_string": "private String sslTruststorePasswdProperty = getConfigPrefix() + \"trustStore.password\";", "modifier": "private", "type": "String", "declarator": "sslTruststorePasswdProperty = getConfigPrefix() + \"trustStore.password\"", "var_name": "sslTruststorePasswdProperty"}, {"original_string": "private String sslTruststoreTypeProperty = getConfigPrefix() + \"trustStore.type\";", "modifier": "private", "type": "String", "declarator": "sslTruststoreTypeProperty = getConfigPrefix() + \"trustStore.type\"", "var_name": "sslTruststoreTypeProperty"}, {"original_string": "private String sslHostnameVerificationEnabledProperty = getConfigPrefix() + \"hostnameVerification\";", "modifier": "private", "type": "String", "declarator": "sslHostnameVerificationEnabledProperty = getConfigPrefix() + \"hostnameVerification\"", "var_name": "sslHostnameVerificationEnabledProperty"}, {"original_string": "private String sslCrlEnabledProperty = getConfigPrefix() + \"crl\";", "modifier": "private", "type": "String", "declarator": "sslCrlEnabledProperty = getConfigPrefix() + \"crl\"", "var_name": "sslCrlEnabledProperty"}, {"original_string": "private String sslOcspEnabledProperty = getConfigPrefix() + \"ocsp\";", "modifier": "private", "type": "String", "declarator": "sslOcspEnabledProperty = getConfigPrefix() + \"ocsp\"", "var_name": "sslOcspEnabledProperty"}, {"original_string": "private String sslClientAuthProperty = getConfigPrefix() + \"clientAuth\";", "modifier": "private", "type": "String", "declarator": "sslClientAuthProperty = getConfigPrefix() + \"clientAuth\"", "var_name": "sslClientAuthProperty"}, {"original_string": "private String sslHandshakeDetectionTimeoutMillisProperty = getConfigPrefix() + \"handshakeDetectionTimeoutMillis\";", "modifier": "private", "type": "String", "declarator": "sslHandshakeDetectionTimeoutMillisProperty = getConfigPrefix() + \"handshakeDetectionTimeoutMillis\"", "var_name": "sslHandshakeDetectionTimeoutMillisProperty"}, {"original_string": "private ZKConfig zkConfig;", "modifier": "private", "type": "ZKConfig", "declarator": "zkConfig", "var_name": "zkConfig"}, {"original_string": "private AtomicReference<SSLContextAndOptions> defaultSSLContextAndOptions = new AtomicReference<>(null);", "modifier": "private", "type": "AtomicReference<SSLContextAndOptions>", "declarator": "defaultSSLContextAndOptions = new AtomicReference<>(null)", "var_name": "defaultSSLContextAndOptions"}, {"original_string": "private FileChangeWatcher keyStoreFileWatcher;", "modifier": "private", "type": "FileChangeWatcher", "declarator": "keyStoreFileWatcher", "var_name": "keyStoreFileWatcher"}, {"original_string": "private FileChangeWatcher trustStoreFileWatcher;", "modifier": "private", "type": "FileChangeWatcher", "declarator": "trustStoreFileWatcher", "var_name": "trustStoreFileWatcher"}], "methods": [{"identifier": "getGCMCiphers", "parameters": "()", "modifiers": "private static", "return": "String[]", "signature": "String[] getGCMCiphers()", "full_signature": "private static String[] getGCMCiphers()", "class_method_signature": "X509Util.getGCMCiphers()", "testcase": false, "constructor": false}, {"identifier": "getCBCCiphers", "parameters": "()", "modifiers": "private static", "return": "String[]", "signature": "String[] getCBCCiphers()", "full_signature": "private static String[] getCBCCiphers()", "class_method_signature": "X509Util.getCBCCiphers()", "testcase": false, "constructor": false}, {"identifier": "concatArrays", "parameters": "(String[] left, String[] right)", "modifiers": "private static", "return": "String[]", "signature": "String[] concatArrays(String[] left, String[] right)", "full_signature": "private static String[] concatArrays(String[] left, String[] right)", "class_method_signature": "X509Util.concatArrays(String[] left, String[] right)", "testcase": false, "constructor": false}, {"identifier": "X509Util", "parameters": "()", "modifiers": "public", "return": "", "signature": " X509Util()", "full_signature": "public  X509Util()", "class_method_signature": "X509Util.X509Util()", "testcase": false, "constructor": true}, {"identifier": "X509Util", "parameters": "(ZKConfig zkConfig)", "modifiers": "public", "return": "", "signature": " X509Util(ZKConfig zkConfig)", "full_signature": "public  X509Util(ZKConfig zkConfig)", "class_method_signature": "X509Util.X509Util(ZKConfig zkConfig)", "testcase": false, "constructor": true}, {"identifier": "getConfigPrefix", "parameters": "()", "modifiers": "protected abstract", "return": "String", "signature": "String getConfigPrefix()", "full_signature": "protected abstract String getConfigPrefix()", "class_method_signature": "X509Util.getConfigPrefix()", "testcase": false, "constructor": false}, {"identifier": "shouldVerifyClientHostname", "parameters": "()", "modifiers": "protected abstract", "return": "boolean", "signature": "boolean shouldVerifyClientHostname()", "full_signature": "protected abstract boolean shouldVerifyClientHostname()", "class_method_signature": "X509Util.shouldVerifyClientHostname()", "testcase": false, "constructor": false}, {"identifier": "getSslProtocolProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslProtocolProperty()", "full_signature": "public String getSslProtocolProperty()", "class_method_signature": "X509Util.getSslProtocolProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslEnabledProtocolsProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslEnabledProtocolsProperty()", "full_signature": "public String getSslEnabledProtocolsProperty()", "class_method_signature": "X509Util.getSslEnabledProtocolsProperty()", "testcase": false, "constructor": false}, {"identifier": "getCipherSuitesProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCipherSuitesProperty()", "full_signature": "public String getCipherSuitesProperty()", "class_method_signature": "X509Util.getCipherSuitesProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslKeystoreLocationProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslKeystoreLocationProperty()", "full_signature": "public String getSslKeystoreLocationProperty()", "class_method_signature": "X509Util.getSslKeystoreLocationProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslCipherSuitesProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslCipherSuitesProperty()", "full_signature": "public String getSslCipherSuitesProperty()", "class_method_signature": "X509Util.getSslCipherSuitesProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslKeystorePasswdProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslKeystorePasswdProperty()", "full_signature": "public String getSslKeystorePasswdProperty()", "class_method_signature": "X509Util.getSslKeystorePasswdProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslKeystoreTypeProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslKeystoreTypeProperty()", "full_signature": "public String getSslKeystoreTypeProperty()", "class_method_signature": "X509Util.getSslKeystoreTypeProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslTruststoreLocationProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslTruststoreLocationProperty()", "full_signature": "public String getSslTruststoreLocationProperty()", "class_method_signature": "X509Util.getSslTruststoreLocationProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslTruststorePasswdProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslTruststorePasswdProperty()", "full_signature": "public String getSslTruststorePasswdProperty()", "class_method_signature": "X509Util.getSslTruststorePasswdProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslTruststoreTypeProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslTruststoreTypeProperty()", "full_signature": "public String getSslTruststoreTypeProperty()", "class_method_signature": "X509Util.getSslTruststoreTypeProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslHostnameVerificationEnabledProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslHostnameVerificationEnabledProperty()", "full_signature": "public String getSslHostnameVerificationEnabledProperty()", "class_method_signature": "X509Util.getSslHostnameVerificationEnabledProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslCrlEnabledProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslCrlEnabledProperty()", "full_signature": "public String getSslCrlEnabledProperty()", "class_method_signature": "X509Util.getSslCrlEnabledProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslOcspEnabledProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslOcspEnabledProperty()", "full_signature": "public String getSslOcspEnabledProperty()", "class_method_signature": "X509Util.getSslOcspEnabledProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslClientAuthProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslClientAuthProperty()", "full_signature": "public String getSslClientAuthProperty()", "class_method_signature": "X509Util.getSslClientAuthProperty()", "testcase": false, "constructor": false}, {"identifier": "getSslHandshakeDetectionTimeoutMillisProperty", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSslHandshakeDetectionTimeoutMillisProperty()", "full_signature": "public String getSslHandshakeDetectionTimeoutMillisProperty()", "class_method_signature": "X509Util.getSslHandshakeDetectionTimeoutMillisProperty()", "testcase": false, "constructor": false}, {"identifier": "getDefaultSSLContext", "parameters": "()", "modifiers": "public", "return": "SSLContext", "signature": "SSLContext getDefaultSSLContext()", "full_signature": "public SSLContext getDefaultSSLContext()", "class_method_signature": "X509Util.getDefaultSSLContext()", "testcase": false, "constructor": false}, {"identifier": "createSSLContext", "parameters": "(ZKConfig config)", "modifiers": "public", "return": "SSLContext", "signature": "SSLContext createSSLContext(ZKConfig config)", "full_signature": "public SSLContext createSSLContext(ZKConfig config)", "class_method_signature": "X509Util.createSSLContext(ZKConfig config)", "testcase": false, "constructor": false}, {"identifier": "getDefaultSSLContextAndOptions", "parameters": "()", "modifiers": "public", "return": "SSLContextAndOptions", "signature": "SSLContextAndOptions getDefaultSSLContextAndOptions()", "full_signature": "public SSLContextAndOptions getDefaultSSLContextAndOptions()", "class_method_signature": "X509Util.getDefaultSSLContextAndOptions()", "testcase": false, "constructor": false}, {"identifier": "resetDefaultSSLContextAndOptions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetDefaultSSLContextAndOptions()", "full_signature": "private void resetDefaultSSLContextAndOptions()", "class_method_signature": "X509Util.resetDefaultSSLContextAndOptions()", "testcase": false, "constructor": false}, {"identifier": "createSSLContextAndOptions", "parameters": "()", "modifiers": "private", "return": "SSLContextAndOptions", "signature": "SSLContextAndOptions createSSLContextAndOptions()", "full_signature": "private SSLContextAndOptions createSSLContextAndOptions()", "class_method_signature": "X509Util.createSSLContextAndOptions()", "testcase": false, "constructor": false}, {"identifier": "getSslHandshakeTimeoutMillis", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSslHandshakeTimeoutMillis()", "full_signature": "public int getSslHandshakeTimeoutMillis()", "class_method_signature": "X509Util.getSslHandshakeTimeoutMillis()", "testcase": false, "constructor": false}, {"identifier": "createSSLContextAndOptions", "parameters": "(ZKConfig config)", "modifiers": "public", "return": "SSLContextAndOptions", "signature": "SSLContextAndOptions createSSLContextAndOptions(ZKConfig config)", "full_signature": "public SSLContextAndOptions createSSLContextAndOptions(ZKConfig config)", "class_method_signature": "X509Util.createSSLContextAndOptions(ZKConfig config)", "testcase": false, "constructor": false}, {"identifier": "createKeyManager", "parameters": "(\n            String keyStoreLocation,\n            String keyStorePassword,\n            String keyStoreTypeProp)", "modifiers": "public static", "return": "X509KeyManager", "signature": "X509KeyManager createKeyManager(\n            String keyStoreLocation,\n            String keyStorePassword,\n            String keyStoreTypeProp)", "full_signature": "public static X509KeyManager createKeyManager(\n            String keyStoreLocation,\n            String keyStorePassword,\n            String keyStoreTypeProp)", "class_method_signature": "X509Util.createKeyManager(\n            String keyStoreLocation,\n            String keyStorePassword,\n            String keyStoreTypeProp)", "testcase": false, "constructor": false}, {"identifier": "createTrustManager", "parameters": "(\n            String trustStoreLocation,\n            String trustStorePassword,\n            String trustStoreTypeProp,\n            boolean crlEnabled,\n            boolean ocspEnabled,\n            final boolean serverHostnameVerificationEnabled,\n            final boolean clientHostnameVerificationEnabled)", "modifiers": "public static", "return": "X509TrustManager", "signature": "X509TrustManager createTrustManager(\n            String trustStoreLocation,\n            String trustStorePassword,\n            String trustStoreTypeProp,\n            boolean crlEnabled,\n            boolean ocspEnabled,\n            final boolean serverHostnameVerificationEnabled,\n            final boolean clientHostnameVerificationEnabled)", "full_signature": "public static X509TrustManager createTrustManager(\n            String trustStoreLocation,\n            String trustStorePassword,\n            String trustStoreTypeProp,\n            boolean crlEnabled,\n            boolean ocspEnabled,\n            final boolean serverHostnameVerificationEnabled,\n            final boolean clientHostnameVerificationEnabled)", "class_method_signature": "X509Util.createTrustManager(\n            String trustStoreLocation,\n            String trustStorePassword,\n            String trustStoreTypeProp,\n            boolean crlEnabled,\n            boolean ocspEnabled,\n            final boolean serverHostnameVerificationEnabled,\n            final boolean clientHostnameVerificationEnabled)", "testcase": false, "constructor": false}, {"identifier": "createSSLSocket", "parameters": "()", "modifiers": "public", "return": "SSLSocket", "signature": "SSLSocket createSSLSocket()", "full_signature": "public SSLSocket createSSLSocket()", "class_method_signature": "X509Util.createSSLSocket()", "testcase": false, "constructor": false}, {"identifier": "createSSLSocket", "parameters": "(Socket socket, byte[] pushbackBytes)", "modifiers": "public", "return": "SSLSocket", "signature": "SSLSocket createSSLSocket(Socket socket, byte[] pushbackBytes)", "full_signature": "public SSLSocket createSSLSocket(Socket socket, byte[] pushbackBytes)", "class_method_signature": "X509Util.createSSLSocket(Socket socket, byte[] pushbackBytes)", "testcase": false, "constructor": false}, {"identifier": "createSSLServerSocket", "parameters": "()", "modifiers": "public", "return": "SSLServerSocket", "signature": "SSLServerSocket createSSLServerSocket()", "full_signature": "public SSLServerSocket createSSLServerSocket()", "class_method_signature": "X509Util.createSSLServerSocket()", "testcase": false, "constructor": false}, {"identifier": "createSSLServerSocket", "parameters": "(int port)", "modifiers": "public", "return": "SSLServerSocket", "signature": "SSLServerSocket createSSLServerSocket(int port)", "full_signature": "public SSLServerSocket createSSLServerSocket(int port)", "class_method_signature": "X509Util.createSSLServerSocket(int port)", "testcase": false, "constructor": false}, {"identifier": "getDefaultCipherSuites", "parameters": "()", "modifiers": "static", "return": "String[]", "signature": "String[] getDefaultCipherSuites()", "full_signature": "static String[] getDefaultCipherSuites()", "class_method_signature": "X509Util.getDefaultCipherSuites()", "testcase": false, "constructor": false}, {"identifier": "getDefaultCipherSuitesForJavaVersion", "parameters": "(String javaVersion)", "modifiers": "static", "return": "String[]", "signature": "String[] getDefaultCipherSuitesForJavaVersion(String javaVersion)", "full_signature": "static String[] getDefaultCipherSuitesForJavaVersion(String javaVersion)", "class_method_signature": "X509Util.getDefaultCipherSuitesForJavaVersion(String javaVersion)", "testcase": false, "constructor": false}, {"identifier": "newFileChangeWatcher", "parameters": "(String fileLocation)", "modifiers": "private", "return": "FileChangeWatcher", "signature": "FileChangeWatcher newFileChangeWatcher(String fileLocation)", "full_signature": "private FileChangeWatcher newFileChangeWatcher(String fileLocation)", "class_method_signature": "X509Util.newFileChangeWatcher(String fileLocation)", "testcase": false, "constructor": false}, {"identifier": "enableCertFileReloading", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enableCertFileReloading()", "full_signature": "public void enableCertFileReloading()", "class_method_signature": "X509Util.enableCertFileReloading()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "X509Util.close()", "testcase": false, "constructor": false}, {"identifier": "handleWatchEvent", "parameters": "(Path filePath, WatchEvent<?> event)", "modifiers": "private", "return": "void", "signature": "void handleWatchEvent(Path filePath, WatchEvent<?> event)", "full_signature": "private void handleWatchEvent(Path filePath, WatchEvent<?> event)", "class_method_signature": "X509Util.handleWatchEvent(Path filePath, WatchEvent<?> event)", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java"}, "focal_method": {"identifier": "createTrustManager", "parameters": "(\n            String trustStoreLocation,\n            String trustStorePassword,\n            String trustStoreTypeProp,\n            boolean crlEnabled,\n            boolean ocspEnabled,\n            final boolean serverHostnameVerificationEnabled,\n            final boolean clientHostnameVerificationEnabled)", "modifiers": "public static", "return": "X509TrustManager", "body": "public static X509TrustManager createTrustManager(\n            String trustStoreLocation,\n            String trustStorePassword,\n            String trustStoreTypeProp,\n            boolean crlEnabled,\n            boolean ocspEnabled,\n            final boolean serverHostnameVerificationEnabled,\n            final boolean clientHostnameVerificationEnabled)\n            throws TrustManagerException {\n        if (trustStorePassword == null) {\n            trustStorePassword = \"\";\n        }\n        try {\n            KeyStoreFileType storeFileType =\n                    KeyStoreFileType.fromPropertyValueOrFileName(\n                            trustStoreTypeProp, trustStoreLocation);\n            KeyStore ts = FileKeyStoreLoaderBuilderProvider\n                    .getBuilderForKeyStoreFileType(storeFileType)\n                    .setTrustStorePath(trustStoreLocation)\n                    .setTrustStorePassword(trustStorePassword)\n                    .build()\n                    .loadTrustStore();\n            PKIXBuilderParameters pbParams = new PKIXBuilderParameters(ts, new X509CertSelector());\n            if (crlEnabled || ocspEnabled) {\n                pbParams.setRevocationEnabled(true);\n                System.setProperty(\"com.sun.net.ssl.checkRevocation\", \"true\");\n                System.setProperty(\"com.sun.security.enableCRLDP\", \"true\");\n                if (ocspEnabled) {\n                    Security.setProperty(\"ocsp.enable\", \"true\");\n                }\n            } else {\n                pbParams.setRevocationEnabled(false);\n            }\n\n            // Revocation checking is only supported with the PKIX algorithm\n            TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n            tmf.init(new CertPathTrustManagerParameters(pbParams));\n\n            for (final TrustManager tm : tmf.getTrustManagers()) {\n                if (tm instanceof X509ExtendedTrustManager) {\n                    return new ZKTrustManager((X509ExtendedTrustManager) tm,\n                            serverHostnameVerificationEnabled, clientHostnameVerificationEnabled);\n                }\n            }\n            throw new TrustManagerException(\"Couldn't find X509TrustManager\");\n        } catch (IOException | GeneralSecurityException | IllegalArgumentException e) {\n            throw new TrustManagerException(e);\n        }\n    }", "signature": "X509TrustManager createTrustManager(\n            String trustStoreLocation,\n            String trustStorePassword,\n            String trustStoreTypeProp,\n            boolean crlEnabled,\n            boolean ocspEnabled,\n            final boolean serverHostnameVerificationEnabled,\n            final boolean clientHostnameVerificationEnabled)", "full_signature": "public static X509TrustManager createTrustManager(\n            String trustStoreLocation,\n            String trustStorePassword,\n            String trustStoreTypeProp,\n            boolean crlEnabled,\n            boolean ocspEnabled,\n            final boolean serverHostnameVerificationEnabled,\n            final boolean clientHostnameVerificationEnabled)", "class_method_signature": "X509Util.createTrustManager(\n            String trustStoreLocation,\n            String trustStorePassword,\n            String trustStoreTypeProp,\n            boolean crlEnabled,\n            boolean ocspEnabled,\n            final boolean serverHostnameVerificationEnabled,\n            final boolean clientHostnameVerificationEnabled)", "testcase": false, "constructor": false, "invocations": ["fromPropertyValueOrFileName", "loadTrustStore", "build", "setTrustStorePassword", "setTrustStorePath", "getBuilderForKeyStoreFileType", "setRevocationEnabled", "setProperty", "setProperty", "setProperty", "setRevocationEnabled", "getInstance", "init", "getTrustManagers"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}