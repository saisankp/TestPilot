{"test_class": {"identifier": "AreaOfInterestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private GazePlay mockGazePlay;", "modifier": "@Mock\n    private", "type": "GazePlay", "declarator": "mockGazePlay", "var_name": "mockGazePlay"}, {"original_string": "@Mock\n    private Stats mocksStats;", "modifier": "@Mock\n    private", "type": "Stats", "declarator": "mocksStats", "var_name": "mocksStats"}, {"original_string": "SavedStatsInfo statsInfo = new SavedStatsInfo(\n        new File(\"file1.csv\"),\n        new File(\"metricsMouse.csv\"),\n        new File(\"metricsGaze.csv\"),\n        new File(\"metricsBoth.csv\"),\n        new File(\"screenshot.png\"),\n        new File(\"colors.txt\")\n    );", "modifier": "", "type": "SavedStatsInfo", "declarator": "statsInfo = new SavedStatsInfo(\n        new File(\"file1.csv\"),\n        new File(\"metricsMouse.csv\"),\n        new File(\"metricsGaze.csv\"),\n        new File(\"metricsBoth.csv\"),\n        new File(\"screenshot.png\"),\n        new File(\"colors.txt\")\n    )", "var_name": "statsInfo"}, {"original_string": "Dimension2D screen = new Dimension2D(700, 800);", "modifier": "", "type": "Dimension2D", "declarator": "screen = new Dimension2D(700, 800)", "var_name": "screen"}, {"original_string": "Supplier<Dimension2D> supplier = () -> screen;", "modifier": "", "type": "Supplier<Dimension2D>", "declarator": "supplier = () -> screen", "var_name": "supplier"}], "file": "gazeplay-core/src/test/java/net/gazeplay/ui/scenes/stats/AreaOfInterestTest.java"}, "test_case": {"identifier": "shouldCalculateInfoBox", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldCalculateInfoBox() {\n        List<CoordinatesTracker> coordinatesTrackers = List.of(\n            new CoordinatesTracker(100, 200, 1234, 3456),\n            new CoordinatesTracker(200, 200, 4321, 4567)\n        );\n        when(mocksStats.getMovementHistoryWithTime()).thenReturn(coordinatesTrackers);\n\n        AreaOfInterest areaOfInterest = new AreaOfInterest(mockGazePlay, mocksStats);\n\n        Polygon currentArea = new Polygon();\n        currentArea.getPoints().addAll(1d, 1d, 2d, 1d, 2d, 3d, 1d, 3d);\n        InfoBoxProps result1 = areaOfInterest.calculateInfoBox(\"id\", 12.34, 1.23, 3, 300, 400, currentArea);\n        InfoBoxProps result2 = areaOfInterest.calculateInfoBox(\"id\", 12.34, 1.23, 3, 500, 400, currentArea);\n\n        assertEquals(401, result1.getInfoBox().getLayoutX());\n        assertEquals(209, result2.getInfoBox().getLayoutX());\n    }", "signature": "void shouldCalculateInfoBox()", "full_signature": "@Test void shouldCalculateInfoBox()", "class_method_signature": "AreaOfInterestTest.shouldCalculateInfoBox()", "testcase": true, "constructor": false, "invocations": ["of", "thenReturn", "when", "getMovementHistoryWithTime", "addAll", "getPoints", "calculateInfoBox", "calculateInfoBox", "assertEquals", "getLayoutX", "getInfoBox", "assertEquals", "getLayoutX", "getInfoBox"]}, "focal_class": {"identifier": "AreaOfInterest", "superclass": "extends GraphicalContext<BorderPane>", "interfaces": "", "fields": [{"original_string": "private final List<CoordinatesTracker> movementHistory;", "modifier": "private final", "type": "List<CoordinatesTracker>", "declarator": "movementHistory", "var_name": "movementHistory"}, {"original_string": "private final Label timeLabel;", "modifier": "private final", "type": "Label", "declarator": "timeLabel", "var_name": "timeLabel"}, {"original_string": "private Timeline clock;", "modifier": "private", "type": "Timeline", "declarator": "clock", "var_name": "clock"}, {"original_string": "private MediaPlayer player;", "modifier": "private", "type": "MediaPlayer", "declarator": "player", "var_name": "player"}, {"original_string": "private final List<AreaOfInterestProps> allAOIList;", "modifier": "private final", "type": "List<AreaOfInterestProps>", "declarator": "allAOIList", "var_name": "allAOIList"}, {"original_string": "private List<CoordinatesTracker> areaOfInterestList;", "modifier": "private", "type": "List<CoordinatesTracker>", "declarator": "areaOfInterestList", "var_name": "areaOfInterestList"}, {"original_string": "private final List<List> allAOIListTemp;", "modifier": "private final", "type": "List<List>", "declarator": "allAOIListTemp", "var_name": "allAOIListTemp"}, {"original_string": "private final List<int[]> startAndEndIdx;", "modifier": "private final", "type": "List<int[]>", "declarator": "startAndEndIdx", "var_name": "startAndEndIdx"}, {"original_string": "private final List<Polygon> allAOIListPolygon;", "modifier": "private final", "type": "List<Polygon>", "declarator": "allAOIListPolygon", "var_name": "allAOIListPolygon"}, {"original_string": "private final List<Double[]> allAOIListPolygonPt;", "modifier": "private final", "type": "List<Double[]>", "declarator": "allAOIListPolygonPt", "var_name": "allAOIListPolygonPt"}, {"original_string": "private final Color[] colors = new Color[]{\n        Color.PURPLE,\n        Color.WHITE,\n        Color.PINK,\n        Color.ORANGE,\n        Color.BLUE,\n        Color.RED,\n        Color.CHOCOLATE\n    };", "modifier": "private final", "type": "Color[]", "declarator": "colors = new Color[]{\n        Color.PURPLE,\n        Color.WHITE,\n        Color.PINK,\n        Color.ORANGE,\n        Color.BLUE,\n        Color.RED,\n        Color.CHOCOLATE\n    }", "var_name": "colors"}, {"original_string": "private final Configuration config;", "modifier": "private final", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "private Polygon currentAreaDisplay;", "modifier": "private", "type": "Polygon", "declarator": "currentAreaDisplay", "var_name": "currentAreaDisplay"}, {"original_string": "private GridPane currentInfoBox;", "modifier": "private", "type": "GridPane", "declarator": "currentInfoBox", "var_name": "currentInfoBox"}, {"original_string": "private Line currentLineToInfoBox;", "modifier": "private", "type": "Line", "declarator": "currentLineToInfoBox", "var_name": "currentLineToInfoBox"}, {"original_string": "private double score;", "modifier": "private", "type": "double", "declarator": "score", "var_name": "score"}, {"original_string": "private int colorIterator;", "modifier": "private", "type": "int", "declarator": "colorIterator", "var_name": "colorIterator"}, {"original_string": "private final Pane graphicsPane;", "modifier": "private final", "type": "Pane", "declarator": "graphicsPane", "var_name": "graphicsPane"}, {"original_string": "private Double previousInfoBoxX;", "modifier": "private", "type": "Double", "declarator": "previousInfoBoxX", "var_name": "previousInfoBoxX"}, {"original_string": "private Double previousInfoBoxY;", "modifier": "private", "type": "Double", "declarator": "previousInfoBoxY", "var_name": "previousInfoBoxY"}, {"original_string": "private final ArrayList<InitialAreaOfInterestProps> combinedAreaList;", "modifier": "private final", "type": "ArrayList<InitialAreaOfInterestProps>", "declarator": "combinedAreaList", "var_name": "combinedAreaList"}, {"original_string": "private final int[] areaMap;", "modifier": "private final", "type": "int[]", "declarator": "areaMap", "var_name": "areaMap"}, {"original_string": "private boolean playing = false;", "modifier": "private", "type": "boolean", "declarator": "playing = false", "var_name": "playing"}, {"original_string": "private double highestFixationTime = 0;", "modifier": "private", "type": "double", "declarator": "highestFixationTime = 0", "var_name": "highestFixationTime"}, {"original_string": "private int intereatorAOI = 0;", "modifier": "private", "type": "int", "declarator": "intereatorAOI = 0", "var_name": "intereatorAOI"}], "methods": [{"identifier": "AreaOfInterest", "parameters": "(final GazePlay gazePlay, final Stats stats)", "modifiers": "public", "return": "", "signature": " AreaOfInterest(final GazePlay gazePlay, final Stats stats)", "full_signature": "public  AreaOfInterest(final GazePlay gazePlay, final Stats stats)", "class_method_signature": "AreaOfInterest.AreaOfInterest(final GazePlay gazePlay, final Stats stats)", "testcase": false, "constructor": true}, {"identifier": "createButtonBox", "parameters": "()", "modifiers": "", "return": "HBox", "signature": "HBox createButtonBox()", "full_signature": " HBox createButtonBox()", "class_method_signature": "AreaOfInterest.createButtonBox()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "@Override public", "return": "ObservableList<Node>", "signature": "ObservableList<Node> getChildren()", "full_signature": "@Override public ObservableList<Node> getChildren()", "class_method_signature": "AreaOfInterest.getChildren()", "testcase": false, "constructor": false}, {"identifier": "dataTreatment", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void dataTreatment()", "full_signature": "private void dataTreatment()", "class_method_signature": "AreaOfInterest.dataTreatment()", "testcase": false, "constructor": false}, {"identifier": "playButtonPressed", "parameters": "(final double progressRate)", "modifiers": "private", "return": "void", "signature": "void playButtonPressed(final double progressRate)", "full_signature": "private void playButtonPressed(final double progressRate)", "class_method_signature": "AreaOfInterest.playButtonPressed(final double progressRate)", "testcase": false, "constructor": false}, {"identifier": "plotMovement", "parameters": "(final int movementIndex, final Pane graphicsPane, final double progressRate)", "modifiers": "private", "return": "void", "signature": "void plotMovement(final int movementIndex, final Pane graphicsPane, final double progressRate)", "full_signature": "private void plotMovement(final int movementIndex, final Pane graphicsPane, final double progressRate)", "class_method_signature": "AreaOfInterest.plotMovement(final int movementIndex, final Pane graphicsPane, final double progressRate)", "testcase": false, "constructor": false}, {"identifier": "addAllInitialArea", "parameters": "()", "modifiers": "", "return": "void", "signature": "void addAllInitialArea()", "full_signature": " void addAllInitialArea()", "class_method_signature": "AreaOfInterest.addAllInitialArea()", "testcase": false, "constructor": false}, {"identifier": "calculateAreaOfInterest", "parameters": "(final int index, final double startTime)", "modifiers": "private", "return": "void", "signature": "void calculateAreaOfInterest(final int index, final double startTime)", "full_signature": "private void calculateAreaOfInterest(final int index, final double startTime)", "class_method_signature": "AreaOfInterest.calculateAreaOfInterest(final int index, final double startTime)", "testcase": false, "constructor": false}, {"identifier": "calculateInfoBox", "parameters": "(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    )", "modifiers": "", "return": "InfoBoxProps", "signature": "InfoBoxProps calculateInfoBox(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    )", "full_signature": " InfoBoxProps calculateInfoBox(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    )", "class_method_signature": "AreaOfInterest.calculateInfoBox(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    )", "testcase": false, "constructor": false}, {"identifier": "calculateRectangle", "parameters": "(final Point2D[] point2D)", "modifiers": "static", "return": "Double[]", "signature": "Double[] calculateRectangle(final Point2D[] point2D)", "full_signature": "static Double[] calculateRectangle(final Point2D[] point2D)", "class_method_signature": "AreaOfInterest.calculateRectangle(final Point2D[] point2D)", "testcase": false, "constructor": false}, {"identifier": "orientation", "parameters": "(final Point2D p1, final Point2D p2, final Point2D p3)", "modifiers": "static", "return": "int", "signature": "int orientation(final Point2D p1, final Point2D p2, final Point2D p3)", "full_signature": "static int orientation(final Point2D p1, final Point2D p2, final Point2D p3)", "class_method_signature": "AreaOfInterest.orientation(final Point2D p1, final Point2D p2, final Point2D p3)", "testcase": false, "constructor": false}, {"identifier": "calculateConvexHull", "parameters": "(final Point2D[] points)", "modifiers": "static", "return": "Double[]", "signature": "Double[] calculateConvexHull(final Point2D[] points)", "full_signature": "static Double[] calculateConvexHull(final Point2D[] points)", "class_method_signature": "AreaOfInterest.calculateConvexHull(final Point2D[] points)", "testcase": false, "constructor": false}, {"identifier": "calculateTargetAOI", "parameters": "(final ArrayList<TargetAOI> targetAOIArrayList)", "modifiers": "static", "return": "void", "signature": "void calculateTargetAOI(final ArrayList<TargetAOI> targetAOIArrayList)", "full_signature": "static void calculateTargetAOI(final ArrayList<TargetAOI> targetAOIArrayList)", "class_method_signature": "AreaOfInterest.calculateTargetAOI(final ArrayList<TargetAOI> targetAOIArrayList)", "testcase": false, "constructor": false}, {"identifier": "makeInfoBox", "parameters": "(\n        final String aoiID,\n        final String ttff,\n        final String timeSpent,\n        final int fixations,\n        final int revisits\n    )", "modifiers": "static", "return": "GridPane", "signature": "GridPane makeInfoBox(\n        final String aoiID,\n        final String ttff,\n        final String timeSpent,\n        final int fixations,\n        final int revisits\n    )", "full_signature": "static GridPane makeInfoBox(\n        final String aoiID,\n        final String ttff,\n        final String timeSpent,\n        final int fixations,\n        final int revisits\n    )", "class_method_signature": "AreaOfInterest.makeInfoBox(\n        final String aoiID,\n        final String ttff,\n        final String timeSpent,\n        final int fixations,\n        final int revisits\n    )", "testcase": false, "constructor": false}, {"identifier": "computeConnectedArea", "parameters": "()", "modifiers": "private", "return": "ArrayList<InitialAreaOfInterestProps>", "signature": "ArrayList<InitialAreaOfInterestProps> computeConnectedArea()", "full_signature": "private ArrayList<InitialAreaOfInterestProps> computeConnectedArea()", "class_method_signature": "AreaOfInterest.computeConnectedArea()", "testcase": false, "constructor": false}], "file": "gazeplay-core/src/main/java/net/gazeplay/ui/scenes/stats/AreaOfInterest.java"}, "focal_method": {"identifier": "calculateInfoBox", "parameters": "(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    )", "modifiers": "", "return": "InfoBoxProps", "body": "InfoBoxProps calculateInfoBox(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    ) {\n        final GridPane infoBox = makeInfoBox(aoiID, new DecimalFormat(\"##.###s\").format(ttff),\n            new DecimalFormat(\"##.###s\").format(timeSpent), fixations, 0);\n\n        final Dimension2D screenDimension = getGazePlay().getCurrentScreenDimensionSupplier().get();\n        final double screenWidthCenter = screenDimension.getWidth() / 2;\n        final double widthOfArea = currentAreaDisplay.getBoundsInLocal().getWidth();\n\n        final Line line = new Line();\n        line.setStartY(centerY);\n        line.setEndY(centerY);\n        line.setStroke(Color.YELLOW);\n\n        if (centerX > screenWidthCenter) {\n            // will display infobox on the left side\n            infoBox.setLayoutX(centerX - widthOfArea - 290);\n            line.setStartX(currentAreaDisplay.getBoundsInLocal().getMinX());\n            line.setEndX(centerX - widthOfArea - 30);\n        } else {\n            // will display infobox on the right\n            infoBox.setLayoutX(centerX + widthOfArea + 100);\n            line.setEndX(centerX + widthOfArea + 100);\n            line.setStartX(currentAreaDisplay.getBoundsInLocal().getMaxX());\n        }\n\n        infoBox.setLayoutY(centerY - 60);\n        infoBox.setStyle(\"-fx-background-color: rgba(255,255,153, 0.4);\");\n        return new InfoBoxProps(infoBox, line, aoiID, ttff, timeSpent, fixations);\n    }", "signature": "InfoBoxProps calculateInfoBox(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    )", "full_signature": " InfoBoxProps calculateInfoBox(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    )", "class_method_signature": "AreaOfInterest.calculateInfoBox(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    )", "testcase": false, "constructor": false, "invocations": ["makeInfoBox", "format", "format", "get", "getCurrentScreenDimensionSupplier", "getGazePlay", "getWidth", "getWidth", "getBoundsInLocal", "setStartY", "setEndY", "setStroke", "setLayoutX", "setStartX", "getMinX", "getBoundsInLocal", "setEndX", "setLayoutX", "setEndX", "setStartX", "getMaxX", "getBoundsInLocal", "setLayoutY", "setStyle"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}