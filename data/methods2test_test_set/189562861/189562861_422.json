{"test_class": {"identifier": "ServiceConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Protocol protocolDelegate = Mockito.mock(Protocol.class);", "modifier": "private", "type": "Protocol", "declarator": "protocolDelegate = Mockito.mock(Protocol.class)", "var_name": "protocolDelegate"}, {"original_string": "private Registry registryDelegate = Mockito.mock(Registry.class);", "modifier": "private", "type": "Registry", "declarator": "registryDelegate = Mockito.mock(Registry.class)", "var_name": "registryDelegate"}, {"original_string": "private Exporter exporter = Mockito.mock(Exporter.class);", "modifier": "private", "type": "Exporter", "declarator": "exporter = Mockito.mock(Exporter.class)", "var_name": "exporter"}, {"original_string": "private ServiceConfig<DemoServiceImpl> service = new ServiceConfig<DemoServiceImpl>();", "modifier": "private", "type": "ServiceConfig<DemoServiceImpl>", "declarator": "service = new ServiceConfig<DemoServiceImpl>()", "var_name": "service"}, {"original_string": "private ServiceConfig<DemoServiceImpl> service2 = new ServiceConfig<DemoServiceImpl>();", "modifier": "private", "type": "ServiceConfig<DemoServiceImpl>", "declarator": "service2 = new ServiceConfig<DemoServiceImpl>()", "var_name": "service2"}], "file": "dubbo-config/dubbo-config-api/src/test/java/com/alibaba/dubbo/config/ServiceConfigTest.java"}, "test_case": {"identifier": "testExport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExport() throws Exception {\n        service.export();\n\n        assertThat(service.getExportedUrls(), hasSize(1));\n        URL url = service.toUrl();\n        assertThat(url.getProtocol(), equalTo(\"mockprotocol2\"));\n        assertThat(url.getPath(), equalTo(DemoService.class.getName()));\n        assertThat(url.getParameters(), hasEntry(Constants.ANYHOST_KEY, \"true\"));\n        assertThat(url.getParameters(), hasEntry(Constants.APPLICATION_KEY, \"app\"));\n        assertThat(url.getParameters(), hasKey(Constants.BIND_IP_KEY));\n        assertThat(url.getParameters(), hasKey(Constants.BIND_PORT_KEY));\n        assertThat(url.getParameters(), hasEntry(Constants.DEFAULT_KEY + \".\" + Constants.EXPORT_KEY, \"true\"));\n        assertThat(url.getParameters(), hasEntry(Constants.EXPORT_KEY, \"true\"));\n        assertThat(url.getParameters(), hasEntry(\"echo.0.callback\", \"false\"));\n        assertThat(url.getParameters(), hasEntry(Constants.GENERIC_KEY, \"false\"));\n        assertThat(url.getParameters(), hasEntry(Constants.INTERFACE_KEY, DemoService.class.getName()));\n        assertThat(url.getParameters(), hasKey(Constants.METHODS_KEY));\n        assertThat(url.getParameters().get(Constants.METHODS_KEY), containsString(\"echo\"));\n        assertThat(url.getParameters(), hasEntry(Constants.SIDE_KEY, Constants.PROVIDER));\n        Mockito.verify(protocolDelegate).export(Mockito.any(Invoker.class));\n    }", "signature": "void testExport()", "full_signature": "@Test public void testExport()", "class_method_signature": "ServiceConfigTest.testExport()", "testcase": true, "constructor": false, "invocations": ["export", "assertThat", "getExportedUrls", "hasSize", "toUrl", "assertThat", "getProtocol", "equalTo", "assertThat", "getPath", "equalTo", "getName", "assertThat", "getParameters", "hasEntry", "assertThat", "getParameters", "hasEntry", "assertThat", "getParameters", "hasKey", "assertThat", "getParameters", "hasKey", "assertThat", "getParameters", "hasEntry", "assertThat", "getParameters", "hasEntry", "assertThat", "getParameters", "hasEntry", "assertThat", "getParameters", "hasEntry", "assertThat", "getParameters", "hasEntry", "getName", "assertThat", "getParameters", "hasKey", "assertThat", "get", "getParameters", "containsString", "assertThat", "getParameters", "hasEntry", "export", "verify", "any"]}, "focal_class": {"identifier": "ServiceConfig", "superclass": "extends AbstractServiceConfig", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 3033787999037024738L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 3033787999037024738L", "var_name": "serialVersionUID"}, {"original_string": "private static final Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class)\n            .getAdaptiveExtension();", "modifier": "private static final", "type": "Protocol", "declarator": "protocol = ExtensionLoader.getExtensionLoader(Protocol.class)\n            .getAdaptiveExtension()", "var_name": "protocol"}, {"original_string": "private static final ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class)\n            .getAdaptiveExtension();", "modifier": "private static final", "type": "ProxyFactory", "declarator": "proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class)\n            .getAdaptiveExtension()", "var_name": "proxyFactory"}, {"original_string": "private static final Map<String, Integer> RANDOM_PORT_MAP = new HashMap<String, Integer>();", "modifier": "private static final", "type": "Map<String, Integer>", "declarator": "RANDOM_PORT_MAP = new HashMap<String, Integer>()", "var_name": "RANDOM_PORT_MAP"}, {"original_string": "private static final ScheduledExecutorService delayExportExecutor = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"DubboServiceDelayExporter\", true));", "modifier": "private static final", "type": "ScheduledExecutorService", "declarator": "delayExportExecutor = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"DubboServiceDelayExporter\", true))", "var_name": "delayExportExecutor"}, {"original_string": "private final List<URL> urls = new ArrayList<URL>();", "modifier": "private final", "type": "List<URL>", "declarator": "urls = new ArrayList<URL>()", "var_name": "urls"}, {"original_string": "private final List<Exporter<?>> exporters = new ArrayList<Exporter<?>>();", "modifier": "private final", "type": "List<Exporter<?>>", "declarator": "exporters = new ArrayList<Exporter<?>>()", "var_name": "exporters"}, {"original_string": "private String interfaceName;", "modifier": "private", "type": "String", "declarator": "interfaceName", "var_name": "interfaceName"}, {"original_string": "private Class<?> interfaceClass;", "modifier": "private", "type": "Class<?>", "declarator": "interfaceClass", "var_name": "interfaceClass"}, {"original_string": "private T ref;", "modifier": "private", "type": "T", "declarator": "ref", "var_name": "ref"}, {"original_string": "private String path;", "modifier": "private", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private List<MethodConfig> methods;", "modifier": "private", "type": "List<MethodConfig>", "declarator": "methods", "var_name": "methods"}, {"original_string": "private ProviderConfig provider;", "modifier": "private", "type": "ProviderConfig", "declarator": "provider", "var_name": "provider"}, {"original_string": "private transient volatile boolean exported;", "modifier": "private transient volatile", "type": "boolean", "declarator": "exported", "var_name": "exported"}, {"original_string": "private transient volatile boolean unexported;", "modifier": "private transient volatile", "type": "boolean", "declarator": "unexported", "var_name": "unexported"}, {"original_string": "private volatile String generic;", "modifier": "private volatile", "type": "String", "declarator": "generic", "var_name": "generic"}], "methods": [{"identifier": "ServiceConfig", "parameters": "()", "modifiers": "public", "return": "", "signature": " ServiceConfig()", "full_signature": "public  ServiceConfig()", "class_method_signature": "ServiceConfig.ServiceConfig()", "testcase": false, "constructor": true}, {"identifier": "ServiceConfig", "parameters": "(Service service)", "modifiers": "public", "return": "", "signature": " ServiceConfig(Service service)", "full_signature": "public  ServiceConfig(Service service)", "class_method_signature": "ServiceConfig.ServiceConfig(Service service)", "testcase": false, "constructor": true}, {"identifier": "convertProviderToProtocol", "parameters": "(List<ProviderConfig> providers)", "modifiers": "@Deprecated private static", "return": "List<ProtocolConfig>", "signature": "List<ProtocolConfig> convertProviderToProtocol(List<ProviderConfig> providers)", "full_signature": "@Deprecated private static List<ProtocolConfig> convertProviderToProtocol(List<ProviderConfig> providers)", "class_method_signature": "ServiceConfig.convertProviderToProtocol(List<ProviderConfig> providers)", "testcase": false, "constructor": false}, {"identifier": "convertProtocolToProvider", "parameters": "(List<ProtocolConfig> protocols)", "modifiers": "@Deprecated private static", "return": "List<ProviderConfig>", "signature": "List<ProviderConfig> convertProtocolToProvider(List<ProtocolConfig> protocols)", "full_signature": "@Deprecated private static List<ProviderConfig> convertProtocolToProvider(List<ProtocolConfig> protocols)", "class_method_signature": "ServiceConfig.convertProtocolToProvider(List<ProtocolConfig> protocols)", "testcase": false, "constructor": false}, {"identifier": "convertProviderToProtocol", "parameters": "(ProviderConfig provider)", "modifiers": "@Deprecated private static", "return": "ProtocolConfig", "signature": "ProtocolConfig convertProviderToProtocol(ProviderConfig provider)", "full_signature": "@Deprecated private static ProtocolConfig convertProviderToProtocol(ProviderConfig provider)", "class_method_signature": "ServiceConfig.convertProviderToProtocol(ProviderConfig provider)", "testcase": false, "constructor": false}, {"identifier": "convertProtocolToProvider", "parameters": "(ProtocolConfig protocol)", "modifiers": "@Deprecated private static", "return": "ProviderConfig", "signature": "ProviderConfig convertProtocolToProvider(ProtocolConfig protocol)", "full_signature": "@Deprecated private static ProviderConfig convertProtocolToProvider(ProtocolConfig protocol)", "class_method_signature": "ServiceConfig.convertProtocolToProvider(ProtocolConfig protocol)", "testcase": false, "constructor": false}, {"identifier": "getRandomPort", "parameters": "(String protocol)", "modifiers": "private static", "return": "Integer", "signature": "Integer getRandomPort(String protocol)", "full_signature": "private static Integer getRandomPort(String protocol)", "class_method_signature": "ServiceConfig.getRandomPort(String protocol)", "testcase": false, "constructor": false}, {"identifier": "putRandomPort", "parameters": "(String protocol, Integer port)", "modifiers": "private static", "return": "void", "signature": "void putRandomPort(String protocol, Integer port)", "full_signature": "private static void putRandomPort(String protocol, Integer port)", "class_method_signature": "ServiceConfig.putRandomPort(String protocol, Integer port)", "testcase": false, "constructor": false}, {"identifier": "toUrl", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL toUrl()", "full_signature": "public URL toUrl()", "class_method_signature": "ServiceConfig.toUrl()", "testcase": false, "constructor": false}, {"identifier": "toUrls", "parameters": "()", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> toUrls()", "full_signature": "public List<URL> toUrls()", "class_method_signature": "ServiceConfig.toUrls()", "testcase": false, "constructor": false}, {"identifier": "isExported", "parameters": "()", "modifiers": "@Parameter(excluded = true) public", "return": "boolean", "signature": "boolean isExported()", "full_signature": "@Parameter(excluded = true) public boolean isExported()", "class_method_signature": "ServiceConfig.isExported()", "testcase": false, "constructor": false}, {"identifier": "isUnexported", "parameters": "()", "modifiers": "@Parameter(excluded = true) public", "return": "boolean", "signature": "boolean isUnexported()", "full_signature": "@Parameter(excluded = true) public boolean isUnexported()", "class_method_signature": "ServiceConfig.isUnexported()", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void export()", "full_signature": "public synchronized void export()", "class_method_signature": "ServiceConfig.export()", "testcase": false, "constructor": false}, {"identifier": "doExport", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void doExport()", "full_signature": "protected synchronized void doExport()", "class_method_signature": "ServiceConfig.doExport()", "testcase": false, "constructor": false}, {"identifier": "checkRef", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkRef()", "full_signature": "private void checkRef()", "class_method_signature": "ServiceConfig.checkRef()", "testcase": false, "constructor": false}, {"identifier": "unexport", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void unexport()", "full_signature": "public synchronized void unexport()", "class_method_signature": "ServiceConfig.unexport()", "testcase": false, "constructor": false}, {"identifier": "doExportUrls", "parameters": "()", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private", "return": "void", "signature": "void doExportUrls()", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private void doExportUrls()", "class_method_signature": "ServiceConfig.doExportUrls()", "testcase": false, "constructor": false}, {"identifier": "doExportUrlsFor1Protocol", "parameters": "(ProtocolConfig protocolConfig, List<URL> registryURLs)", "modifiers": "private", "return": "void", "signature": "void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs)", "full_signature": "private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs)", "class_method_signature": "ServiceConfig.doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs)", "testcase": false, "constructor": false}, {"identifier": "exportLocal", "parameters": "(URL url)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private", "return": "void", "signature": "void exportLocal(URL url)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private void exportLocal(URL url)", "class_method_signature": "ServiceConfig.exportLocal(URL url)", "testcase": false, "constructor": false}, {"identifier": "getServiceClass", "parameters": "(T ref)", "modifiers": "protected", "return": "Class", "signature": "Class getServiceClass(T ref)", "full_signature": "protected Class getServiceClass(T ref)", "class_method_signature": "ServiceConfig.getServiceClass(T ref)", "testcase": false, "constructor": false}, {"identifier": "findConfigedHosts", "parameters": "(ProtocolConfig protocolConfig, List<URL> registryURLs, Map<String, String> map)", "modifiers": "private", "return": "String", "signature": "String findConfigedHosts(ProtocolConfig protocolConfig, List<URL> registryURLs, Map<String, String> map)", "full_signature": "private String findConfigedHosts(ProtocolConfig protocolConfig, List<URL> registryURLs, Map<String, String> map)", "class_method_signature": "ServiceConfig.findConfigedHosts(ProtocolConfig protocolConfig, List<URL> registryURLs, Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "findConfigedPorts", "parameters": "(ProtocolConfig protocolConfig, String name, Map<String, String> map)", "modifiers": "private", "return": "Integer", "signature": "Integer findConfigedPorts(ProtocolConfig protocolConfig, String name, Map<String, String> map)", "full_signature": "private Integer findConfigedPorts(ProtocolConfig protocolConfig, String name, Map<String, String> map)", "class_method_signature": "ServiceConfig.findConfigedPorts(ProtocolConfig protocolConfig, String name, Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "parsePort", "parameters": "(String configPort)", "modifiers": "private", "return": "Integer", "signature": "Integer parsePort(String configPort)", "full_signature": "private Integer parsePort(String configPort)", "class_method_signature": "ServiceConfig.parsePort(String configPort)", "testcase": false, "constructor": false}, {"identifier": "getValueFromConfig", "parameters": "(ProtocolConfig protocolConfig, String key)", "modifiers": "private", "return": "String", "signature": "String getValueFromConfig(ProtocolConfig protocolConfig, String key)", "full_signature": "private String getValueFromConfig(ProtocolConfig protocolConfig, String key)", "class_method_signature": "ServiceConfig.getValueFromConfig(ProtocolConfig protocolConfig, String key)", "testcase": false, "constructor": false}, {"identifier": "checkDefault", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkDefault()", "full_signature": "private void checkDefault()", "class_method_signature": "ServiceConfig.checkDefault()", "testcase": false, "constructor": false}, {"identifier": "checkProtocol", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkProtocol()", "full_signature": "private void checkProtocol()", "class_method_signature": "ServiceConfig.checkProtocol()", "testcase": false, "constructor": false}, {"identifier": "getInterfaceClass", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getInterfaceClass()", "full_signature": "public Class<?> getInterfaceClass()", "class_method_signature": "ServiceConfig.getInterfaceClass()", "testcase": false, "constructor": false}, {"identifier": "setInterfaceClass", "parameters": "(Class<?> interfaceClass)", "modifiers": "public", "return": "void", "signature": "void setInterfaceClass(Class<?> interfaceClass)", "full_signature": "public void setInterfaceClass(Class<?> interfaceClass)", "class_method_signature": "ServiceConfig.setInterfaceClass(Class<?> interfaceClass)", "testcase": false, "constructor": false}, {"identifier": "getInterface", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInterface()", "full_signature": "public String getInterface()", "class_method_signature": "ServiceConfig.getInterface()", "testcase": false, "constructor": false}, {"identifier": "setInterface", "parameters": "(String interfaceName)", "modifiers": "public", "return": "void", "signature": "void setInterface(String interfaceName)", "full_signature": "public void setInterface(String interfaceName)", "class_method_signature": "ServiceConfig.setInterface(String interfaceName)", "testcase": false, "constructor": false}, {"identifier": "setInterface", "parameters": "(Class<?> interfaceClass)", "modifiers": "public", "return": "void", "signature": "void setInterface(Class<?> interfaceClass)", "full_signature": "public void setInterface(Class<?> interfaceClass)", "class_method_signature": "ServiceConfig.setInterface(Class<?> interfaceClass)", "testcase": false, "constructor": false}, {"identifier": "getRef", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getRef()", "full_signature": "public T getRef()", "class_method_signature": "ServiceConfig.getRef()", "testcase": false, "constructor": false}, {"identifier": "setRef", "parameters": "(T ref)", "modifiers": "public", "return": "void", "signature": "void setRef(T ref)", "full_signature": "public void setRef(T ref)", "class_method_signature": "ServiceConfig.setRef(T ref)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "@Parameter(excluded = true) public", "return": "String", "signature": "String getPath()", "full_signature": "@Parameter(excluded = true) public String getPath()", "class_method_signature": "ServiceConfig.getPath()", "testcase": false, "constructor": false}, {"identifier": "setPath", "parameters": "(String path)", "modifiers": "public", "return": "void", "signature": "void setPath(String path)", "full_signature": "public void setPath(String path)", "class_method_signature": "ServiceConfig.setPath(String path)", "testcase": false, "constructor": false}, {"identifier": "getMethods", "parameters": "()", "modifiers": "public", "return": "List<MethodConfig>", "signature": "List<MethodConfig> getMethods()", "full_signature": "public List<MethodConfig> getMethods()", "class_method_signature": "ServiceConfig.getMethods()", "testcase": false, "constructor": false}, {"identifier": "setMethods", "parameters": "(List<? extends MethodConfig> methods)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void setMethods(List<? extends MethodConfig> methods)", "full_signature": "@SuppressWarnings(\"unchecked\") public void setMethods(List<? extends MethodConfig> methods)", "class_method_signature": "ServiceConfig.setMethods(List<? extends MethodConfig> methods)", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "()", "modifiers": "public", "return": "ProviderConfig", "signature": "ProviderConfig getProvider()", "full_signature": "public ProviderConfig getProvider()", "class_method_signature": "ServiceConfig.getProvider()", "testcase": false, "constructor": false}, {"identifier": "setProvider", "parameters": "(ProviderConfig provider)", "modifiers": "public", "return": "void", "signature": "void setProvider(ProviderConfig provider)", "full_signature": "public void setProvider(ProviderConfig provider)", "class_method_signature": "ServiceConfig.setProvider(ProviderConfig provider)", "testcase": false, "constructor": false}, {"identifier": "getGeneric", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getGeneric()", "full_signature": "public String getGeneric()", "class_method_signature": "ServiceConfig.getGeneric()", "testcase": false, "constructor": false}, {"identifier": "setGeneric", "parameters": "(String generic)", "modifiers": "public", "return": "void", "signature": "void setGeneric(String generic)", "full_signature": "public void setGeneric(String generic)", "class_method_signature": "ServiceConfig.setGeneric(String generic)", "testcase": false, "constructor": false}, {"identifier": "setMock", "parameters": "(Boolean mock)", "modifiers": "@Override public", "return": "void", "signature": "void setMock(Boolean mock)", "full_signature": "@Override public void setMock(Boolean mock)", "class_method_signature": "ServiceConfig.setMock(Boolean mock)", "testcase": false, "constructor": false}, {"identifier": "setMock", "parameters": "(String mock)", "modifiers": "@Override public", "return": "void", "signature": "void setMock(String mock)", "full_signature": "@Override public void setMock(String mock)", "class_method_signature": "ServiceConfig.setMock(String mock)", "testcase": false, "constructor": false}, {"identifier": "getExportedUrls", "parameters": "()", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> getExportedUrls()", "full_signature": "public List<URL> getExportedUrls()", "class_method_signature": "ServiceConfig.getExportedUrls()", "testcase": false, "constructor": false}, {"identifier": "getProviders", "parameters": "()", "modifiers": "@Deprecated public", "return": "List<ProviderConfig>", "signature": "List<ProviderConfig> getProviders()", "full_signature": "@Deprecated public List<ProviderConfig> getProviders()", "class_method_signature": "ServiceConfig.getProviders()", "testcase": false, "constructor": false}, {"identifier": "setProviders", "parameters": "(List<ProviderConfig> providers)", "modifiers": "@Deprecated public", "return": "void", "signature": "void setProviders(List<ProviderConfig> providers)", "full_signature": "@Deprecated public void setProviders(List<ProviderConfig> providers)", "class_method_signature": "ServiceConfig.setProviders(List<ProviderConfig> providers)", "testcase": false, "constructor": false}, {"identifier": "getUniqueServiceName", "parameters": "()", "modifiers": "@Parameter(excluded = true) public", "return": "String", "signature": "String getUniqueServiceName()", "full_signature": "@Parameter(excluded = true) public String getUniqueServiceName()", "class_method_signature": "ServiceConfig.getUniqueServiceName()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/ServiceConfig.java"}, "focal_method": {"identifier": "export", "parameters": "()", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void export() {\n        if (provider != null) {\n            // \u83b7\u53d6 export \u548c delay \u914d\u7f6e\n            if (export == null) {\n                export = provider.getExport();\n            }\n            if (delay == null) {\n                delay = provider.getDelay();\n            }\n        }\n        // \u5982\u679c export \u4e3a false\uff0c\u5219\u4e0d\u5bfc\u51fa\u670d\u52a1\n        if (export != null && !export) {\n            return;\n        }\n        // delay > 0\uff0c\u5ef6\u65f6\u5bfc\u51fa\u670d\u52a1\n        if (delay != null && delay > 0) {\n            delayExportExecutor.schedule(new Runnable() {\n                @Override\n                public void run() {\n                    doExport();\n                }\n            }, delay, TimeUnit.MILLISECONDS);\n        } else {\n            doExport();\n        }\n    }", "signature": "void export()", "full_signature": "public synchronized void export()", "class_method_signature": "ServiceConfig.export()", "testcase": false, "constructor": false, "invocations": ["getExport", "getDelay", "schedule", "doExport", "doExport"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}