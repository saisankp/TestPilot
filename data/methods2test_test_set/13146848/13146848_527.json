{"test_class": {"identifier": "PdfFileSourceListAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private File path;", "modifier": "private", "type": "File", "declarator": "path", "var_name": "path"}], "file": "sejda-conversion/src/test/java/org/sejda/conversion/PdfFileSourceListAdapterTest.java"}, "test_case": {"identifier": "testPositive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPositive() {\n        PdfFileSourceListAdapter victim = new PdfFileSourceListAdapter(path.getAbsolutePath());\n        List<PdfFileSource> list = victim.getFileSourceList();\n        assertEquals(5, list.size());\n        assertEquals(\"1 Hello world.pdf\", list.get(0).getName());\n        assertEquals(\"2 test_file.pdf\", list.get(1).getName());\n        assertEquals(\"3 test_file.pdf\", list.get(2).getName());\n        assertEquals(\"10 Blablabla.pdf\", list.get(3).getName());\n        assertEquals(\"11 test_file.pdf\", list.get(4).getName());\n    }", "signature": "void testPositive()", "full_signature": "@Test public void testPositive()", "class_method_signature": "PdfFileSourceListAdapterTest.testPositive()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "getFileSourceList", "assertEquals", "size", "assertEquals", "getName", "get", "assertEquals", "getName", "get", "assertEquals", "getName", "get", "assertEquals", "getName", "get", "assertEquals", "getName", "get"]}, "focal_class": {"identifier": "PdfFileSourceListAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PdfFileSourceListAdapter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PdfFileSourceListAdapter.class)", "var_name": "LOG"}, {"original_string": "private final PdfInputFilesSourceFactory parserFactory = new PdfInputFilesSourceFactory();", "modifier": "private final", "type": "PdfInputFilesSourceFactory", "declarator": "parserFactory = new PdfInputFilesSourceFactory()", "var_name": "parserFactory"}, {"original_string": "private final List<PdfFileSource> fileSourceList = new ArrayList<>();", "modifier": "private final", "type": "List<PdfFileSource>", "declarator": "fileSourceList = new ArrayList<>()", "var_name": "fileSourceList"}, {"original_string": "private final File file;", "modifier": "private final", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private Pattern pattern = Pattern.compile(\".+\");", "modifier": "private", "type": "Pattern", "declarator": "pattern = Pattern.compile(\".+\")", "var_name": "pattern"}], "methods": [{"identifier": "PdfFileSourceListAdapter", "parameters": "(String filePath)", "modifiers": "public", "return": "", "signature": " PdfFileSourceListAdapter(String filePath)", "full_signature": "public  PdfFileSourceListAdapter(String filePath)", "class_method_signature": "PdfFileSourceListAdapter.PdfFileSourceListAdapter(String filePath)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(String filterRegExp)", "modifiers": "public", "return": "PdfFileSourceListAdapter", "signature": "PdfFileSourceListAdapter filter(String filterRegExp)", "full_signature": "public PdfFileSourceListAdapter filter(String filterRegExp)", "class_method_signature": "PdfFileSourceListAdapter.filter(String filterRegExp)", "testcase": false, "constructor": false}, {"identifier": "getFileSourceList", "parameters": "()", "modifiers": "public", "return": "List<PdfFileSource>", "signature": "List<PdfFileSource> getFileSourceList()", "full_signature": "public List<PdfFileSource> getFileSourceList()", "class_method_signature": "PdfFileSourceListAdapter.getFileSourceList()", "testcase": false, "constructor": false}], "file": "sejda-conversion/src/main/java/org/sejda/conversion/PdfFileSourceListAdapter.java"}, "focal_method": {"identifier": "getFileSourceList", "parameters": "()", "modifiers": "public", "return": "List<PdfFileSource>", "body": "public List<PdfFileSource> getFileSourceList() {\n        fileSourceList.addAll(parserFactory.createSource(file).getInputFiles(file));\n\n        if (fileSourceList.isEmpty()) {\n            throw new ConversionException(\"No input files specified in '\" + file.getPath() + \"'\");\n        }\n        return fileSourceList;\n    }", "signature": "List<PdfFileSource> getFileSourceList()", "full_signature": "public List<PdfFileSource> getFileSourceList()", "class_method_signature": "PdfFileSourceListAdapter.getFileSourceList()", "testcase": false, "constructor": false, "invocations": ["addAll", "getInputFiles", "createSource", "isEmpty", "getPath"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}