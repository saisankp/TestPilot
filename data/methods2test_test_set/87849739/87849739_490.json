{"test_class": {"identifier": "AuthenticationChainTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static AuthorizationContext knownAuthorizationContext;", "modifier": "private static", "type": "AuthorizationContext", "declarator": "knownAuthorizationContext", "var_name": "knownAuthorizationContext"}, {"original_string": "private static Executor messageDispatcher;", "modifier": "private static", "type": "Executor", "declarator": "messageDispatcher", "var_name": "messageDispatcher"}, {"original_string": "@Rule public final TestName testName = new TestName();", "modifier": "@Rule public final", "type": "TestName", "declarator": "testName = new TestName()", "var_name": "testName"}, {"original_string": "@Rule public final JUnitSoftAssertions softly = new JUnitSoftAssertions();", "modifier": "@Rule public final", "type": "JUnitSoftAssertions", "declarator": "softly = new JUnitSoftAssertions()", "var_name": "softly"}, {"original_string": "@Mock private AuthenticationProvider authenticationProviderA;", "modifier": "@Mock private", "type": "AuthenticationProvider", "declarator": "authenticationProviderA", "var_name": "authenticationProviderA"}, {"original_string": "@Mock private AuthenticationProvider authenticationProviderB;", "modifier": "@Mock private", "type": "AuthenticationProvider", "declarator": "authenticationProviderB", "var_name": "authenticationProviderB"}, {"original_string": "@Mock private AuthenticationFailureAggregator authenticationFailureAggregator;", "modifier": "@Mock private", "type": "AuthenticationFailureAggregator", "declarator": "authenticationFailureAggregator", "var_name": "authenticationFailureAggregator"}, {"original_string": "private DittoHeaders dittoHeaders;", "modifier": "private", "type": "DittoHeaders", "declarator": "dittoHeaders", "var_name": "dittoHeaders"}], "file": "services/gateway/security/src/test/java/org/eclipse/ditto/services/gateway/security/authentication/AuthenticationChainTest.java"}, "test_case": {"identifier": "authenticate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void authenticate() throws ExecutionException, InterruptedException {\n        final RequestContext requestContextMock = mockRequestContextForAuthenticate();\n        final AuthenticationResult expectedAuthenticationResult =\n                DefaultAuthenticationResult.successful(dittoHeaders, knownAuthorizationContext);\n        when(authenticationProviderA.isApplicable(requestContextMock)).thenReturn(false);\n        when(authenticationProviderB.isApplicable(requestContextMock)).thenReturn(true);\n        when(authenticationProviderB.authenticate(requestContextMock, dittoHeaders))\n                .thenReturn(expectedAuthenticationResult);\n        final AuthenticationChain underTest =\n                AuthenticationChain.getInstance(Arrays.asList(authenticationProviderA, authenticationProviderB),\n                        authenticationFailureAggregator,\n                        messageDispatcher);\n\n        final AuthenticationResult authenticationResult =\n                underTest.authenticate(requestContextMock, dittoHeaders).get();\n\n        verify(authenticationProviderA).isApplicable(requestContextMock);\n        verify(authenticationProviderB).isApplicable(requestContextMock);\n        verify(authenticationProviderA, never()).authenticate(requestContextMock, dittoHeaders);\n        verify(authenticationProviderB).authenticate(requestContextMock, dittoHeaders);\n        softly.assertThat(authenticationResult).isEqualTo(expectedAuthenticationResult);\n    }", "signature": "void authenticate()", "full_signature": "@Test public void authenticate()", "class_method_signature": "AuthenticationChainTest.authenticate()", "testcase": true, "constructor": false, "invocations": ["mockRequestContextForAuthenticate", "successful", "thenReturn", "when", "isApplicable", "thenReturn", "when", "isApplicable", "thenReturn", "when", "authenticate", "getInstance", "asList", "get", "authenticate", "isApplicable", "verify", "isApplicable", "verify", "authenticate", "verify", "never", "authenticate", "verify", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "AuthenticationChain", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AuthenticationChain.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AuthenticationChain.class)", "var_name": "LOGGER"}, {"original_string": "private final Collection<AuthenticationProvider<?>> authenticationProviderChain;", "modifier": "private final", "type": "Collection<AuthenticationProvider<?>>", "declarator": "authenticationProviderChain", "var_name": "authenticationProviderChain"}, {"original_string": "private final Executor authenticationDispatcher;", "modifier": "private final", "type": "Executor", "declarator": "authenticationDispatcher", "var_name": "authenticationDispatcher"}, {"original_string": "private final AuthenticationFailureAggregator authenticationFailureAggregator;", "modifier": "private final", "type": "AuthenticationFailureAggregator", "declarator": "authenticationFailureAggregator", "var_name": "authenticationFailureAggregator"}], "methods": [{"identifier": "AuthenticationChain", "parameters": "(final Collection<AuthenticationProvider<?>> authenticationProviders,\n            final AuthenticationFailureAggregator authenticationFailureAggregator,\n            final Executor authenticationDispatcher)", "modifiers": "private", "return": "", "signature": " AuthenticationChain(final Collection<AuthenticationProvider<?>> authenticationProviders,\n            final AuthenticationFailureAggregator authenticationFailureAggregator,\n            final Executor authenticationDispatcher)", "full_signature": "private  AuthenticationChain(final Collection<AuthenticationProvider<?>> authenticationProviders,\n            final AuthenticationFailureAggregator authenticationFailureAggregator,\n            final Executor authenticationDispatcher)", "class_method_signature": "AuthenticationChain.AuthenticationChain(final Collection<AuthenticationProvider<?>> authenticationProviders,\n            final AuthenticationFailureAggregator authenticationFailureAggregator,\n            final Executor authenticationDispatcher)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(final Collection<AuthenticationProvider<?>> authenticationProviders,\n            final AuthenticationFailureAggregator authenticationFailureAggregator,\n            final Executor authenticationDispatcher)", "modifiers": "public static", "return": "AuthenticationChain", "signature": "AuthenticationChain getInstance(final Collection<AuthenticationProvider<?>> authenticationProviders,\n            final AuthenticationFailureAggregator authenticationFailureAggregator,\n            final Executor authenticationDispatcher)", "full_signature": "public static AuthenticationChain getInstance(final Collection<AuthenticationProvider<?>> authenticationProviders,\n            final AuthenticationFailureAggregator authenticationFailureAggregator,\n            final Executor authenticationDispatcher)", "class_method_signature": "AuthenticationChain.getInstance(final Collection<AuthenticationProvider<?>> authenticationProviders,\n            final AuthenticationFailureAggregator authenticationFailureAggregator,\n            final Executor authenticationDispatcher)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(final RequestContext requestContext,\n            final DittoHeaders dittoHeaders)", "modifiers": "public", "return": "CompletableFuture<AuthenticationResult>", "signature": "CompletableFuture<AuthenticationResult> authenticate(final RequestContext requestContext,\n            final DittoHeaders dittoHeaders)", "full_signature": "public CompletableFuture<AuthenticationResult> authenticate(final RequestContext requestContext,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "AuthenticationChain.authenticate(final RequestContext requestContext,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "doAuthenticate", "parameters": "(final RequestContext requestContext, final DittoHeaders dittoHeaders)", "modifiers": "private", "return": "AuthenticationResult", "signature": "AuthenticationResult doAuthenticate(final RequestContext requestContext, final DittoHeaders dittoHeaders)", "full_signature": "private AuthenticationResult doAuthenticate(final RequestContext requestContext, final DittoHeaders dittoHeaders)", "class_method_signature": "AuthenticationChain.doAuthenticate(final RequestContext requestContext, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}], "file": "services/gateway/security/src/main/java/org/eclipse/ditto/services/gateway/security/authentication/AuthenticationChain.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(final RequestContext requestContext,\n            final DittoHeaders dittoHeaders)", "modifiers": "public", "return": "CompletableFuture<AuthenticationResult>", "body": "public CompletableFuture<AuthenticationResult> authenticate(final RequestContext requestContext,\n            final DittoHeaders dittoHeaders) {\n\n        return CompletableFuture\n                .runAsync(() -> LogUtil.enhanceLogWithCorrelationId(dittoHeaders), authenticationDispatcher)\n                .thenApply(voidValue -> doAuthenticate(requestContext, dittoHeaders));\n    }", "signature": "CompletableFuture<AuthenticationResult> authenticate(final RequestContext requestContext,\n            final DittoHeaders dittoHeaders)", "full_signature": "public CompletableFuture<AuthenticationResult> authenticate(final RequestContext requestContext,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "AuthenticationChain.authenticate(final RequestContext requestContext,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false, "invocations": ["thenApply", "runAsync", "enhanceLogWithCorrelationId", "doAuthenticate"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}