{"test_class": {"identifier": "MaybeToObservableTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/maybe/MaybeToObservableTest.java"}, "test_case": {"identifier": "source", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void source() {\n        Maybe<Integer> m = Maybe.just(1);\n\n        assertSame(m, (((HasUpstreamMaybeSource<?>)m.toObservable()).source()));\n    }", "signature": "void source()", "full_signature": "@Test public void source()", "class_method_signature": "MaybeToObservableTest.source()", "testcase": true, "constructor": false, "invocations": ["just", "assertSame", "source", "toObservable"]}, "focal_class": {"identifier": "MaybeToObservable", "superclass": "extends Observable<T>", "interfaces": "implements HasUpstreamMaybeSource<T>", "fields": [{"original_string": "final MaybeSource<T> source;", "modifier": "final", "type": "MaybeSource<T>", "declarator": "source", "var_name": "source"}], "methods": [{"identifier": "MaybeToObservable", "parameters": "(MaybeSource<T> source)", "modifiers": "public", "return": "", "signature": " MaybeToObservable(MaybeSource<T> source)", "full_signature": "public  MaybeToObservable(MaybeSource<T> source)", "class_method_signature": "MaybeToObservable.MaybeToObservable(MaybeSource<T> source)", "testcase": false, "constructor": true}, {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "MaybeSource<T>", "signature": "MaybeSource<T> source()", "full_signature": "@Override public MaybeSource<T> source()", "class_method_signature": "MaybeToObservable.source()", "testcase": false, "constructor": false}, {"identifier": "subscribeActual", "parameters": "(Observer<? super T> s)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Observer<? super T> s)", "full_signature": "@Override protected void subscribeActual(Observer<? super T> s)", "class_method_signature": "MaybeToObservable.subscribeActual(Observer<? super T> s)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Observer<? super T> downstream)", "modifiers": "@Experimental public static", "return": "MaybeObserver<T>", "signature": "MaybeObserver<T> create(Observer<? super T> downstream)", "full_signature": "@Experimental public static MaybeObserver<T> create(Observer<? super T> downstream)", "class_method_signature": "MaybeToObservable.create(Observer<? super T> downstream)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/maybe/MaybeToObservable.java"}, "focal_method": {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "MaybeSource<T>", "body": "@Override\n    public MaybeSource<T> source() {\n        return source;\n    }", "signature": "MaybeSource<T> source()", "full_signature": "@Override public MaybeSource<T> source()", "class_method_signature": "MaybeToObservable.source()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}