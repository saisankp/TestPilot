{"test_class": {"identifier": "MultiAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Authenticator NEGATIVE_AUTHENTICATOR = new Authenticator() {\n        public Result authenticate(HttpExchange httpExchange) {\n            return new Failure(401);\n        }\n    };", "modifier": "private final", "type": "Authenticator", "declarator": "NEGATIVE_AUTHENTICATOR = new Authenticator() {\n        public Result authenticate(HttpExchange httpExchange) {\n            return new Failure(401);\n        }\n    }", "var_name": "NEGATIVE_AUTHENTICATOR"}, {"original_string": "private final Authenticator POSITIVE_AUTHENTICATOR = new Authenticator() {\n        public Result authenticate(HttpExchange httpExchange) {\n            return new Success(new HttpPrincipal(\"\",\"\"));\n        }\n    };", "modifier": "private final", "type": "Authenticator", "declarator": "POSITIVE_AUTHENTICATOR = new Authenticator() {\n        public Result authenticate(HttpExchange httpExchange) {\n            return new Success(new HttpPrincipal(\"\",\"\"));\n        }\n    }", "var_name": "POSITIVE_AUTHENTICATOR"}], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/security/MultiAuthenticatorTest.java"}, "test_case": {"identifier": "allPositive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void allPositive() throws Exception {\n        MultiAuthenticator authenticator =\n            new MultiAuthenticator(MultiAuthenticator.Mode.ALL,\n                                   Arrays.asList(POSITIVE_AUTHENTICATOR,\n                                                 POSITIVE_AUTHENTICATOR,\n                                                 POSITIVE_AUTHENTICATOR));\n        assertTrue(authenticator.authenticate(null) instanceof Authenticator.Success);\n    }", "signature": "void allPositive()", "full_signature": "@Test public void allPositive()", "class_method_signature": "MultiAuthenticatorTest.allPositive()", "testcase": true, "constructor": false, "invocations": ["asList", "assertTrue", "authenticate"]}, "focal_class": {"identifier": "MultiAuthenticator", "superclass": "extends Authenticator", "interfaces": "", "fields": [{"original_string": "final private ArrayList<Authenticator> authenticators;", "modifier": "final private", "type": "ArrayList<Authenticator>", "declarator": "authenticators", "var_name": "authenticators"}, {"original_string": "final private Mode mode;", "modifier": "final private", "type": "Mode", "declarator": "mode", "var_name": "mode"}], "methods": [{"identifier": "MultiAuthenticator", "parameters": "(Mode mode, List<Authenticator> authenticators)", "modifiers": "public", "return": "", "signature": " MultiAuthenticator(Mode mode, List<Authenticator> authenticators)", "full_signature": "public  MultiAuthenticator(Mode mode, List<Authenticator> authenticators)", "class_method_signature": "MultiAuthenticator.MultiAuthenticator(Mode mode, List<Authenticator> authenticators)", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "(HttpExchange httpExchange)", "modifiers": "@Override public", "return": "Result", "signature": "Result authenticate(HttpExchange httpExchange)", "full_signature": "@Override public Result authenticate(HttpExchange httpExchange)", "class_method_signature": "MultiAuthenticator.authenticate(HttpExchange httpExchange)", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/security/MultiAuthenticator.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(HttpExchange httpExchange)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result authenticate(HttpExchange httpExchange) {\n        Result result = null;\n        for (Authenticator a : authenticators) {\n            result = a.authenticate(httpExchange);\n            if ((result instanceof Success && mode == Mode.ANY) ||\n                (!(result instanceof Success) && mode == Mode.ALL)) {\n                return result;\n            }\n        }\n        // Return last result, which is either SUCCESS for mode.ALL or FAILURE for mode.ANY\n        return result;\n    }", "signature": "Result authenticate(HttpExchange httpExchange)", "full_signature": "@Override public Result authenticate(HttpExchange httpExchange)", "class_method_signature": "MultiAuthenticator.authenticate(HttpExchange httpExchange)", "testcase": false, "constructor": false, "invocations": ["authenticate"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}