{"test_class": {"identifier": "BatchDataTest", "superclass": "", "interfaces": "", "fields": [], "file": "tsfile/src/test/java/org/apache/iotdb/tsfile/read/common/BatchDataTest.java"}, "test_case": {"identifier": "testSignal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSignal() {\n    BatchData batchData = SignalBatchData.getInstance();\n    try {\n      batchData.hasCurrent();\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    fail();\n  }", "signature": "void testSignal()", "full_signature": "@Test public void testSignal()", "class_method_signature": "BatchDataTest.testSignal()", "testcase": true, "constructor": false, "invocations": ["getInstance", "hasCurrent", "fail"]}, "focal_class": {"identifier": "BatchData", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -4620310601188394839L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4620310601188394839L", "var_name": "serialVersionUID"}, {"original_string": "private static final int capacityThreshold = TSFileConfig.ARRAY_CAPACITY_THRESHOLD;", "modifier": "private static final", "type": "int", "declarator": "capacityThreshold = TSFileConfig.ARRAY_CAPACITY_THRESHOLD", "var_name": "capacityThreshold"}, {"original_string": "protected int capacity = 16;", "modifier": "protected", "type": "int", "declarator": "capacity = 16", "var_name": "capacity"}, {"original_string": "protected TSDataType dataType;", "modifier": "protected", "type": "TSDataType", "declarator": "dataType", "var_name": "dataType"}, {"original_string": "protected int readCurListIndex;", "modifier": "protected", "type": "int", "declarator": "readCurListIndex", "var_name": "readCurListIndex"}, {"original_string": "protected int readCurArrayIndex;", "modifier": "protected", "type": "int", "declarator": "readCurArrayIndex", "var_name": "readCurArrayIndex"}, {"original_string": "protected int writeCurListIndex;", "modifier": "protected", "type": "int", "declarator": "writeCurListIndex", "var_name": "writeCurListIndex"}, {"original_string": "protected int writeCurArrayIndex;", "modifier": "protected", "type": "int", "declarator": "writeCurArrayIndex", "var_name": "writeCurArrayIndex"}, {"original_string": "private int count;", "modifier": "private", "type": "int", "declarator": "count", "var_name": "count"}, {"original_string": "private List<long[]> timeRet;", "modifier": "private", "type": "List<long[]>", "declarator": "timeRet", "var_name": "timeRet"}, {"original_string": "private List<boolean[]> booleanRet;", "modifier": "private", "type": "List<boolean[]>", "declarator": "booleanRet", "var_name": "booleanRet"}, {"original_string": "private List<int[]> intRet;", "modifier": "private", "type": "List<int[]>", "declarator": "intRet", "var_name": "intRet"}, {"original_string": "private List<long[]> longRet;", "modifier": "private", "type": "List<long[]>", "declarator": "longRet", "var_name": "longRet"}, {"original_string": "private List<float[]> floatRet;", "modifier": "private", "type": "List<float[]>", "declarator": "floatRet", "var_name": "floatRet"}, {"original_string": "private List<double[]> doubleRet;", "modifier": "private", "type": "List<double[]>", "declarator": "doubleRet", "var_name": "doubleRet"}, {"original_string": "private List<Binary[]> binaryRet;", "modifier": "private", "type": "List<Binary[]>", "declarator": "binaryRet", "var_name": "binaryRet"}], "methods": [{"identifier": "BatchData", "parameters": "()", "modifiers": "public", "return": "", "signature": " BatchData()", "full_signature": "public  BatchData()", "class_method_signature": "BatchData.BatchData()", "testcase": false, "constructor": true}, {"identifier": "BatchData", "parameters": "(TSDataType type)", "modifiers": "public", "return": "", "signature": " BatchData(TSDataType type)", "full_signature": "public  BatchData(TSDataType type)", "class_method_signature": "BatchData.BatchData(TSDataType type)", "testcase": false, "constructor": true}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "BatchData.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "hasCurrent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasCurrent()", "full_signature": "public boolean hasCurrent()", "class_method_signature": "BatchData.hasCurrent()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void next()", "full_signature": "public void next()", "class_method_signature": "BatchData.next()", "testcase": false, "constructor": false}, {"identifier": "currentTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long currentTime()", "full_signature": "public long currentTime()", "class_method_signature": "BatchData.currentTime()", "testcase": false, "constructor": false}, {"identifier": "currentValue", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object currentValue()", "full_signature": "public Object currentValue()", "class_method_signature": "BatchData.currentValue()", "testcase": false, "constructor": false}, {"identifier": "currentTsPrimitiveType", "parameters": "()", "modifiers": "public", "return": "TsPrimitiveType", "signature": "TsPrimitiveType currentTsPrimitiveType()", "full_signature": "public TsPrimitiveType currentTsPrimitiveType()", "class_method_signature": "BatchData.currentTsPrimitiveType()", "testcase": false, "constructor": false}, {"identifier": "getDataType", "parameters": "()", "modifiers": "public", "return": "TSDataType", "signature": "TSDataType getDataType()", "full_signature": "public TSDataType getDataType()", "class_method_signature": "BatchData.getDataType()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(TSDataType type)", "modifiers": "public", "return": "void", "signature": "void init(TSDataType type)", "full_signature": "public void init(TSDataType type)", "class_method_signature": "BatchData.init(TSDataType type)", "testcase": false, "constructor": false}, {"identifier": "putBoolean", "parameters": "(long t, boolean v)", "modifiers": "public", "return": "void", "signature": "void putBoolean(long t, boolean v)", "full_signature": "public void putBoolean(long t, boolean v)", "class_method_signature": "BatchData.putBoolean(long t, boolean v)", "testcase": false, "constructor": false}, {"identifier": "putInt", "parameters": "(long t, int v)", "modifiers": "public", "return": "void", "signature": "void putInt(long t, int v)", "full_signature": "public void putInt(long t, int v)", "class_method_signature": "BatchData.putInt(long t, int v)", "testcase": false, "constructor": false}, {"identifier": "putLong", "parameters": "(long t, long v)", "modifiers": "public", "return": "void", "signature": "void putLong(long t, long v)", "full_signature": "public void putLong(long t, long v)", "class_method_signature": "BatchData.putLong(long t, long v)", "testcase": false, "constructor": false}, {"identifier": "putFloat", "parameters": "(long t, float v)", "modifiers": "public", "return": "void", "signature": "void putFloat(long t, float v)", "full_signature": "public void putFloat(long t, float v)", "class_method_signature": "BatchData.putFloat(long t, float v)", "testcase": false, "constructor": false}, {"identifier": "putDouble", "parameters": "(long t, double v)", "modifiers": "public", "return": "void", "signature": "void putDouble(long t, double v)", "full_signature": "public void putDouble(long t, double v)", "class_method_signature": "BatchData.putDouble(long t, double v)", "testcase": false, "constructor": false}, {"identifier": "putBinary", "parameters": "(long t, Binary v)", "modifiers": "public", "return": "void", "signature": "void putBinary(long t, Binary v)", "full_signature": "public void putBinary(long t, Binary v)", "class_method_signature": "BatchData.putBinary(long t, Binary v)", "testcase": false, "constructor": false}, {"identifier": "getBoolean", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getBoolean()", "full_signature": "public boolean getBoolean()", "class_method_signature": "BatchData.getBoolean()", "testcase": false, "constructor": false}, {"identifier": "setBoolean", "parameters": "(int idx, boolean v)", "modifiers": "public", "return": "void", "signature": "void setBoolean(int idx, boolean v)", "full_signature": "public void setBoolean(int idx, boolean v)", "class_method_signature": "BatchData.setBoolean(int idx, boolean v)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInt()", "full_signature": "public int getInt()", "class_method_signature": "BatchData.getInt()", "testcase": false, "constructor": false}, {"identifier": "setInt", "parameters": "(int idx, int v)", "modifiers": "public", "return": "void", "signature": "void setInt(int idx, int v)", "full_signature": "public void setInt(int idx, int v)", "class_method_signature": "BatchData.setInt(int idx, int v)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLong()", "full_signature": "public long getLong()", "class_method_signature": "BatchData.getLong()", "testcase": false, "constructor": false}, {"identifier": "setLong", "parameters": "(int idx, long v)", "modifiers": "public", "return": "void", "signature": "void setLong(int idx, long v)", "full_signature": "public void setLong(int idx, long v)", "class_method_signature": "BatchData.setLong(int idx, long v)", "testcase": false, "constructor": false}, {"identifier": "getFloat", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getFloat()", "full_signature": "public float getFloat()", "class_method_signature": "BatchData.getFloat()", "testcase": false, "constructor": false}, {"identifier": "setFloat", "parameters": "(int idx, float v)", "modifiers": "public", "return": "void", "signature": "void setFloat(int idx, float v)", "full_signature": "public void setFloat(int idx, float v)", "class_method_signature": "BatchData.setFloat(int idx, float v)", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDouble()", "full_signature": "public double getDouble()", "class_method_signature": "BatchData.getDouble()", "testcase": false, "constructor": false}, {"identifier": "setDouble", "parameters": "(int idx, double v)", "modifiers": "public", "return": "void", "signature": "void setDouble(int idx, double v)", "full_signature": "public void setDouble(int idx, double v)", "class_method_signature": "BatchData.setDouble(int idx, double v)", "testcase": false, "constructor": false}, {"identifier": "getBinary", "parameters": "()", "modifiers": "public", "return": "Binary", "signature": "Binary getBinary()", "full_signature": "public Binary getBinary()", "class_method_signature": "BatchData.getBinary()", "testcase": false, "constructor": false}, {"identifier": "setBinary", "parameters": "(int idx, Binary v)", "modifiers": "public", "return": "void", "signature": "void setBinary(int idx, Binary v)", "full_signature": "public void setBinary(int idx, Binary v)", "class_method_signature": "BatchData.setBinary(int idx, Binary v)", "testcase": false, "constructor": false}, {"identifier": "setTime", "parameters": "(int idx, long v)", "modifiers": "public", "return": "void", "signature": "void setTime(int idx, long v)", "full_signature": "public void setTime(int idx, long v)", "class_method_signature": "BatchData.setTime(int idx, long v)", "testcase": false, "constructor": false}, {"identifier": "putAnObject", "parameters": "(long t, Object v)", "modifiers": "public", "return": "void", "signature": "void putAnObject(long t, Object v)", "full_signature": "public void putAnObject(long t, Object v)", "class_method_signature": "BatchData.putAnObject(long t, Object v)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int length()", "full_signature": "public int length()", "class_method_signature": "BatchData.length()", "testcase": false, "constructor": false}, {"identifier": "getTimeByIndex", "parameters": "(int idx)", "modifiers": "public", "return": "long", "signature": "long getTimeByIndex(int idx)", "full_signature": "public long getTimeByIndex(int idx)", "class_method_signature": "BatchData.getTimeByIndex(int idx)", "testcase": false, "constructor": false}, {"identifier": "getLongByIndex", "parameters": "(int idx)", "modifiers": "public", "return": "long", "signature": "long getLongByIndex(int idx)", "full_signature": "public long getLongByIndex(int idx)", "class_method_signature": "BatchData.getLongByIndex(int idx)", "testcase": false, "constructor": false}, {"identifier": "getDoubleByIndex", "parameters": "(int idx)", "modifiers": "public", "return": "double", "signature": "double getDoubleByIndex(int idx)", "full_signature": "public double getDoubleByIndex(int idx)", "class_method_signature": "BatchData.getDoubleByIndex(int idx)", "testcase": false, "constructor": false}, {"identifier": "getIntByIndex", "parameters": "(int idx)", "modifiers": "public", "return": "int", "signature": "int getIntByIndex(int idx)", "full_signature": "public int getIntByIndex(int idx)", "class_method_signature": "BatchData.getIntByIndex(int idx)", "testcase": false, "constructor": false}, {"identifier": "getFloatByIndex", "parameters": "(int idx)", "modifiers": "public", "return": "float", "signature": "float getFloatByIndex(int idx)", "full_signature": "public float getFloatByIndex(int idx)", "class_method_signature": "BatchData.getFloatByIndex(int idx)", "testcase": false, "constructor": false}, {"identifier": "getBinaryByIndex", "parameters": "(int idx)", "modifiers": "public", "return": "Binary", "signature": "Binary getBinaryByIndex(int idx)", "full_signature": "public Binary getBinaryByIndex(int idx)", "class_method_signature": "BatchData.getBinaryByIndex(int idx)", "testcase": false, "constructor": false}, {"identifier": "getBooleanByIndex", "parameters": "(int idx)", "modifiers": "public", "return": "boolean", "signature": "boolean getBooleanByIndex(int idx)", "full_signature": "public boolean getBooleanByIndex(int idx)", "class_method_signature": "BatchData.getBooleanByIndex(int idx)", "testcase": false, "constructor": false}, {"identifier": "getLastPairBeforeOrEqualTimestamp", "parameters": "(long queryTime)", "modifiers": "public", "return": "TimeValuePair", "signature": "TimeValuePair getLastPairBeforeOrEqualTimestamp(long queryTime)", "full_signature": "public TimeValuePair getLastPairBeforeOrEqualTimestamp(long queryTime)", "class_method_signature": "BatchData.getLastPairBeforeOrEqualTimestamp(long queryTime)", "testcase": false, "constructor": false}, {"identifier": "getValueInTimestamp", "parameters": "(long time)", "modifiers": "public", "return": "Object", "signature": "Object getValueInTimestamp(long time)", "full_signature": "public Object getValueInTimestamp(long time)", "class_method_signature": "BatchData.getValueInTimestamp(long time)", "testcase": false, "constructor": false}, {"identifier": "getValueInTimestamp", "parameters": "(long time, BiPredicate<Long, Long> compare)", "modifiers": "public", "return": "Object", "signature": "Object getValueInTimestamp(long time, BiPredicate<Long, Long> compare)", "full_signature": "public Object getValueInTimestamp(long time, BiPredicate<Long, Long> compare)", "class_method_signature": "BatchData.getValueInTimestamp(long time, BiPredicate<Long, Long> compare)", "testcase": false, "constructor": false}, {"identifier": "getMaxTimestamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMaxTimestamp()", "full_signature": "public long getMaxTimestamp()", "class_method_signature": "BatchData.getMaxTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getMinTimestamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMinTimestamp()", "full_signature": "public long getMinTimestamp()", "class_method_signature": "BatchData.getMinTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getBatchDataIterator", "parameters": "()", "modifiers": "public", "return": "BatchDataIterator", "signature": "BatchDataIterator getBatchDataIterator()", "full_signature": "public BatchDataIterator getBatchDataIterator()", "class_method_signature": "BatchData.getBatchDataIterator()", "testcase": false, "constructor": false}, {"identifier": "resetBatchData", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetBatchData()", "full_signature": "public void resetBatchData()", "class_method_signature": "BatchData.resetBatchData()", "testcase": false, "constructor": false}, {"identifier": "resetBatchData", "parameters": "(int readCurArrayIndex, int readCurListIndex)", "modifiers": "public", "return": "void", "signature": "void resetBatchData(int readCurArrayIndex, int readCurListIndex)", "full_signature": "public void resetBatchData(int readCurArrayIndex, int readCurListIndex)", "class_method_signature": "BatchData.resetBatchData(int readCurArrayIndex, int readCurListIndex)", "testcase": false, "constructor": false}, {"identifier": "getReadCurListIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getReadCurListIndex()", "full_signature": "public int getReadCurListIndex()", "class_method_signature": "BatchData.getReadCurListIndex()", "testcase": false, "constructor": false}, {"identifier": "getReadCurArrayIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getReadCurArrayIndex()", "full_signature": "public int getReadCurArrayIndex()", "class_method_signature": "BatchData.getReadCurArrayIndex()", "testcase": false, "constructor": false}, {"identifier": "flip", "parameters": "()", "modifiers": "public", "return": "BatchData", "signature": "BatchData flip()", "full_signature": "public BatchData flip()", "class_method_signature": "BatchData.flip()", "testcase": false, "constructor": false}], "file": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/BatchData.java"}, "focal_method": {"identifier": "hasCurrent", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean hasCurrent() {\n    if (readCurListIndex == writeCurListIndex) {\n      return readCurArrayIndex < writeCurArrayIndex;\n    }\n\n    return readCurListIndex < writeCurListIndex && readCurArrayIndex < capacity;\n  }", "signature": "boolean hasCurrent()", "full_signature": "public boolean hasCurrent()", "class_method_signature": "BatchData.hasCurrent()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}