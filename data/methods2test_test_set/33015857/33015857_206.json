{"test_class": {"identifier": "ListsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "boolean ok;", "modifier": "", "type": "boolean", "declarator": "ok", "var_name": "ok"}], "file": "reflekt/src/test/java/io/advantageous/boon/core/ListsTest.java"}, "test_case": {"identifier": "testMapBy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMapBy() {\n        List<Employee> list = Lists.list(new Employee(\"Bob\"), new Employee(\"Sally\"));\n        List<HRObject> wrap = (List<HRObject>) Lists.mapBy(list, new Object() {\n           HRObject hr(Employee e) {return new HRObject(e);}\n        });\n\n        boolean ok = wrap.get(0).name().equals(\"Bob\") || die();\n\n        ok &= wrap.get(1).name().equals(\"Sally\") || die();\n\n    }", "signature": "void testMapBy()", "full_signature": "@Test public void testMapBy()", "class_method_signature": "ListsTest.testMapBy()", "testcase": true, "constructor": false, "invocations": ["list", "mapBy", "equals", "name", "get", "die", "equals", "name", "get", "die"]}, "focal_class": {"identifier": "Lists", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "lazyAdd", "parameters": "(List<T> list, T... items)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> lazyAdd(List<T> list, T... items)", "full_signature": "public static List<T> lazyAdd(List<T> list, T... items)", "class_method_signature": "Lists.lazyAdd(List<T> list, T... items)", "testcase": false, "constructor": false}, {"identifier": "lazyAdd", "parameters": "(ArrayList<T> list, T... items)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> lazyAdd(ArrayList<T> list, T... items)", "full_signature": "public static List<T> lazyAdd(ArrayList<T> list, T... items)", "class_method_signature": "Lists.lazyAdd(ArrayList<T> list, T... items)", "testcase": false, "constructor": false}, {"identifier": "safeLazyAdd", "parameters": "(CopyOnWriteArrayList<T> list, T... items)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> safeLazyAdd(CopyOnWriteArrayList<T> list, T... items)", "full_signature": "public static List<T> safeLazyAdd(CopyOnWriteArrayList<T> list, T... items)", "class_method_signature": "Lists.safeLazyAdd(CopyOnWriteArrayList<T> list, T... items)", "testcase": false, "constructor": false}, {"identifier": "lazyAdd", "parameters": "(CopyOnWriteArrayList<T> list, T... items)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> lazyAdd(CopyOnWriteArrayList<T> list, T... items)", "full_signature": "public static List<T> lazyAdd(CopyOnWriteArrayList<T> list, T... items)", "class_method_signature": "Lists.lazyAdd(CopyOnWriteArrayList<T> list, T... items)", "testcase": false, "constructor": false}, {"identifier": "lazyCreate", "parameters": "(List<T> list)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> lazyCreate(List<T> list)", "full_signature": "public static List<T> lazyCreate(List<T> list)", "class_method_signature": "Lists.lazyCreate(List<T> list)", "testcase": false, "constructor": false}, {"identifier": "lazyCreate", "parameters": "(ArrayList<T> list)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> lazyCreate(ArrayList<T> list)", "full_signature": "public static List<T> lazyCreate(ArrayList<T> list)", "class_method_signature": "Lists.lazyCreate(ArrayList<T> list)", "testcase": false, "constructor": false}, {"identifier": "lazyCreate", "parameters": "(CopyOnWriteArrayList<T> list)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> lazyCreate(CopyOnWriteArrayList<T> list)", "full_signature": "public static List<T> lazyCreate(CopyOnWriteArrayList<T> list)", "class_method_signature": "Lists.lazyCreate(CopyOnWriteArrayList<T> list)", "testcase": false, "constructor": false}, {"identifier": "safeLazyCreate", "parameters": "(CopyOnWriteArrayList<T> list)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> safeLazyCreate(CopyOnWriteArrayList<T> list)", "full_signature": "public static List<T> safeLazyCreate(CopyOnWriteArrayList<T> list)", "class_method_signature": "Lists.safeLazyCreate(CopyOnWriteArrayList<T> list)", "testcase": false, "constructor": false}, {"identifier": "fromList", "parameters": "( List<Object> list, Class<T> clazz )", "modifiers": "public static", "return": "T", "signature": "T fromList( List<Object> list, Class<T> clazz )", "full_signature": "public static T fromList( List<Object> list, Class<T> clazz )", "class_method_signature": "Lists.fromList( List<Object> list, Class<T> clazz )", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "( Class<V> clazz )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> list( Class<V> clazz )", "full_signature": "public static List<V> list( Class<V> clazz )", "class_method_signature": "Lists.list( Class<V> clazz )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( Collection<V> collection )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> copy( Collection<V> collection )", "full_signature": "public static List<V> copy( Collection<V> collection )", "class_method_signature": "Lists.copy( Collection<V> collection )", "testcase": false, "constructor": false}, {"identifier": "deepCopy", "parameters": "( Collection<V> collection )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> deepCopy( Collection<V> collection )", "full_signature": "public static List<V> deepCopy( Collection<V> collection )", "class_method_signature": "Lists.deepCopy( Collection<V> collection )", "testcase": false, "constructor": false}, {"identifier": "deepCopyToList", "parameters": "( Collection<V> src,  List<V> dst)", "modifiers": "public static", "return": "List<V>", "signature": "List<V> deepCopyToList( Collection<V> src,  List<V> dst)", "full_signature": "public static List<V> deepCopyToList( Collection<V> src,  List<V> dst)", "class_method_signature": "Lists.deepCopyToList( Collection<V> src,  List<V> dst)", "testcase": false, "constructor": false}, {"identifier": "deepCopy", "parameters": "( Collection<V> src, Class<T> dest  )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> deepCopy( Collection<V> src, Class<T> dest  )", "full_signature": "public static List<T> deepCopy( Collection<V> src, Class<T> dest  )", "class_method_signature": "Lists.deepCopy( Collection<V> src, Class<T> dest  )", "testcase": false, "constructor": false}, {"identifier": "deepCopy", "parameters": "( List<V> list )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> deepCopy( List<V> list )", "full_signature": "public static List<V> deepCopy( List<V> list )", "class_method_signature": "Lists.deepCopy( List<V> list )", "testcase": false, "constructor": false}, {"identifier": "lists", "parameters": "( Collection<V>... collections )", "modifiers": "public static", "return": "List<List<V>>", "signature": "List<List<V>> lists( Collection<V>... collections )", "full_signature": "public static List<List<V>> lists( Collection<V>... collections )", "class_method_signature": "Lists.lists( Collection<V>... collections )", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "( Iterable<V> iterable )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> list( Iterable<V> iterable )", "full_signature": "public static List<V> list( Iterable<V> iterable )", "class_method_signature": "Lists.list( Iterable<V> iterable )", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "( Collection<V> collection )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> list( Collection<V> collection )", "full_signature": "public static List<V> list( Collection<V> collection )", "class_method_signature": "Lists.list( Collection<V> collection )", "testcase": false, "constructor": false}, {"identifier": "linkedList", "parameters": "( Iterable<V> iterable )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> linkedList( Iterable<V> iterable )", "full_signature": "public static List<V> linkedList( Iterable<V> iterable )", "class_method_signature": "Lists.linkedList( Iterable<V> iterable )", "testcase": false, "constructor": false}, {"identifier": "toListOrSingletonList", "parameters": "( Object item )", "modifiers": "public static", "return": "List<?>", "signature": "List<?> toListOrSingletonList( Object item )", "full_signature": "public static List<?> toListOrSingletonList( Object item )", "class_method_signature": "Lists.toListOrSingletonList( Object item )", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "( List<?> inputList, Class<PROP> cls, String propertyPath )", "modifiers": "public static", "return": "List<PROP>", "signature": "List<PROP> toList( List<?> inputList, Class<PROP> cls, String propertyPath )", "full_signature": "public static List<PROP> toList( List<?> inputList, Class<PROP> cls, String propertyPath )", "class_method_signature": "Lists.toList( List<?> inputList, Class<PROP> cls, String propertyPath )", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "( List<?> inputList, String propertyPath )", "modifiers": "public static", "return": "List<?>", "signature": "List<?> toList( List<?> inputList, String propertyPath )", "full_signature": "public static List<?> toList( List<?> inputList, String propertyPath )", "class_method_signature": "Lists.toList( List<?> inputList, String propertyPath )", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "( Object item )", "modifiers": "public static", "return": "List<?>", "signature": "List<?> toList( Object item )", "full_signature": "public static List<?> toList( Object item )", "class_method_signature": "Lists.toList( Object item )", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Class<WRAP> wrapper, Iterable<V> collection )", "modifiers": "public static", "return": "List<WRAP>", "signature": "List<WRAP> convert(Class<WRAP> wrapper, Iterable<V> collection )", "full_signature": "public static List<WRAP> convert(Class<WRAP> wrapper, Iterable<V> collection )", "class_method_signature": "Lists.convert(Class<WRAP> wrapper, Iterable<V> collection )", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Class<WRAP> wrapper, Collection<V> collection )", "modifiers": "public static", "return": "List<WRAP>", "signature": "List<WRAP> convert(Class<WRAP> wrapper, Collection<V> collection )", "full_signature": "public static List<WRAP> convert(Class<WRAP> wrapper, Collection<V> collection )", "class_method_signature": "Lists.convert(Class<WRAP> wrapper, Collection<V> collection )", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Class<WRAP> wrapper, V[] collection )", "modifiers": "public static", "return": "List<WRAP>", "signature": "List<WRAP> convert(Class<WRAP> wrapper, V[] collection )", "full_signature": "public static List<WRAP> convert(Class<WRAP> wrapper, V[] collection )", "class_method_signature": "Lists.convert(Class<WRAP> wrapper, V[] collection )", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(Class<WRAP> wrapper, Iterable<V> collection )", "modifiers": "public static", "return": "List<WRAP>", "signature": "List<WRAP> wrap(Class<WRAP> wrapper, Iterable<V> collection )", "full_signature": "public static List<WRAP> wrap(Class<WRAP> wrapper, Iterable<V> collection )", "class_method_signature": "Lists.wrap(Class<WRAP> wrapper, Iterable<V> collection )", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(Class<WRAP> wrapper, Collection<V> collection )", "modifiers": "public static", "return": "List<WRAP>", "signature": "List<WRAP> wrap(Class<WRAP> wrapper, Collection<V> collection )", "full_signature": "public static List<WRAP> wrap(Class<WRAP> wrapper, Collection<V> collection )", "class_method_signature": "Lists.wrap(Class<WRAP> wrapper, Collection<V> collection )", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(Class<WRAP> wrapper, V[] collection )", "modifiers": "public static", "return": "List<WRAP>", "signature": "List<WRAP> wrap(Class<WRAP> wrapper, V[] collection )", "full_signature": "public static List<WRAP> wrap(Class<WRAP> wrapper, V[] collection )", "class_method_signature": "Lists.wrap(Class<WRAP> wrapper, V[] collection )", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "( Enumeration<V> enumeration )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> list( Enumeration<V> enumeration )", "full_signature": "public static List<V> list( Enumeration<V> enumeration )", "class_method_signature": "Lists.list( Enumeration<V> enumeration )", "testcase": false, "constructor": false}, {"identifier": "enumeration", "parameters": "( final List<V> list )", "modifiers": "public static", "return": "Enumeration<V>", "signature": "Enumeration<V> enumeration( final List<V> list )", "full_signature": "public static Enumeration<V> enumeration( final List<V> list )", "class_method_signature": "Lists.enumeration( final List<V> list )", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "( Iterator<V> iterator )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> list( Iterator<V> iterator )", "full_signature": "public static List<V> list( Iterator<V> iterator )", "class_method_signature": "Lists.list( Iterator<V> iterator )", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "( final V... array )", "modifiers": "@SafeVarargs public static", "return": "List<V>", "signature": "List<V> list( final V... array )", "full_signature": "@SafeVarargs public static List<V> list( final V... array )", "class_method_signature": "Lists.list( final V... array )", "testcase": false, "constructor": false}, {"identifier": "safeList", "parameters": "(Class<V> cls)", "modifiers": "public static", "return": "List<V>", "signature": "List<V> safeList(Class<V> cls)", "full_signature": "public static List<V> safeList(Class<V> cls)", "class_method_signature": "Lists.safeList(Class<V> cls)", "testcase": false, "constructor": false}, {"identifier": "safeList", "parameters": "( final V... array )", "modifiers": "@SafeVarargs public static", "return": "List<V>", "signature": "List<V> safeList( final V... array )", "full_signature": "@SafeVarargs public static List<V> safeList( final V... array )", "class_method_signature": "Lists.safeList( final V... array )", "testcase": false, "constructor": false}, {"identifier": "linkedList", "parameters": "( final V... array )", "modifiers": "@SafeVarargs public static", "return": "List<V>", "signature": "List<V> linkedList( final V... array )", "full_signature": "@SafeVarargs public static List<V> linkedList( final V... array )", "class_method_signature": "Lists.linkedList( final V... array )", "testcase": false, "constructor": false}, {"identifier": "safeList", "parameters": "( Collection<V> collection )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> safeList( Collection<V> collection )", "full_signature": "public static List<V> safeList( Collection<V> collection )", "class_method_signature": "Lists.safeList( Collection<V> collection )", "testcase": false, "constructor": false}, {"identifier": "linkedList", "parameters": "( Collection<V> collection )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> linkedList( Collection<V> collection )", "full_signature": "public static List<V> linkedList( Collection<V> collection )", "class_method_signature": "Lists.linkedList( Collection<V> collection )", "testcase": false, "constructor": false}, {"identifier": "len", "parameters": "( List<?> list )", "modifiers": "public static", "return": "int", "signature": "int len( List<?> list )", "full_signature": "public static int len( List<?> list )", "class_method_signature": "Lists.len( List<?> list )", "testcase": false, "constructor": false}, {"identifier": "lengthOf", "parameters": "( List<?> list )", "modifiers": "public static", "return": "int", "signature": "int lengthOf( List<?> list )", "full_signature": "public static int lengthOf( List<?> list )", "class_method_signature": "Lists.lengthOf( List<?> list )", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "( List<?> list )", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty( List<?> list )", "full_signature": "public static boolean isEmpty( List<?> list )", "class_method_signature": "Lists.isEmpty( List<?> list )", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "( V value, List<?> list )", "modifiers": "public static", "return": "boolean", "signature": "boolean in( V value, List<?> list )", "full_signature": "public static boolean in( V value, List<?> list )", "class_method_signature": "Lists.in( V value, List<?> list )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( List<V> list, V value )", "modifiers": "public static", "return": "void", "signature": "void add( List<V> list, V value )", "full_signature": "public static void add( List<V> list, V value )", "class_method_signature": "Lists.add( List<V> list, V value )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( List<V> list, V... values )", "modifiers": "public static", "return": "void", "signature": "void add( List<V> list, V... values )", "full_signature": "public static void add( List<V> list, V... values )", "class_method_signature": "Lists.add( List<V> list, V... values )", "testcase": false, "constructor": false}, {"identifier": "atIndex", "parameters": "( List<T> list, final int index )", "modifiers": "public static", "return": "T", "signature": "T atIndex( List<T> list, final int index )", "full_signature": "public static T atIndex( List<T> list, final int index )", "class_method_signature": "Lists.atIndex( List<T> list, final int index )", "testcase": false, "constructor": false}, {"identifier": "idx", "parameters": "( List<T> list, final int index )", "modifiers": "public static", "return": "T", "signature": "T idx( List<T> list, final int index )", "full_signature": "public static T idx( List<T> list, final int index )", "class_method_signature": "Lists.idx( List<T> list, final int index )", "testcase": false, "constructor": false}, {"identifier": "idxList", "parameters": "( List<T> list, final int index )", "modifiers": "public static", "return": "List", "signature": "List idxList( List<T> list, final int index )", "full_signature": "public static List idxList( List<T> list, final int index )", "class_method_signature": "Lists.idxList( List<T> list, final int index )", "testcase": false, "constructor": false}, {"identifier": "idxMap", "parameters": "( List<T> list, final int index )", "modifiers": "public static", "return": "Map", "signature": "Map idxMap( List<T> list, final int index )", "full_signature": "public static Map idxMap( List<T> list, final int index )", "class_method_signature": "Lists.idxMap( List<T> list, final int index )", "testcase": false, "constructor": false}, {"identifier": "atIndex", "parameters": "( List<V> list, int index, V v )", "modifiers": "public static", "return": "void", "signature": "void atIndex( List<V> list, int index, V v )", "full_signature": "public static void atIndex( List<V> list, int index, V v )", "class_method_signature": "Lists.atIndex( List<V> list, int index, V v )", "testcase": false, "constructor": false}, {"identifier": "idx", "parameters": "( List<V> list, int index, V v )", "modifiers": "public static", "return": "void", "signature": "void idx( List<V> list, int index, V v )", "full_signature": "public static void idx( List<V> list, int index, V v )", "class_method_signature": "Lists.idx( List<V> list, int index, V v )", "testcase": false, "constructor": false}, {"identifier": "sliceOf", "parameters": "( List<V> list, int startIndex, int endIndex )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> sliceOf( List<V> list, int startIndex, int endIndex )", "full_signature": "public static List<V> sliceOf( List<V> list, int startIndex, int endIndex )", "class_method_signature": "Lists.sliceOf( List<V> list, int startIndex, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "slc", "parameters": "( List<V> list, int startIndex, int endIndex )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> slc( List<V> list, int startIndex, int endIndex )", "full_signature": "public static List<V> slc( List<V> list, int startIndex, int endIndex )", "class_method_signature": "Lists.slc( List<V> list, int startIndex, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "sliceOf", "parameters": "( List<V> list, int startIndex )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> sliceOf( List<V> list, int startIndex )", "full_signature": "public static List<V> sliceOf( List<V> list, int startIndex )", "class_method_signature": "Lists.sliceOf( List<V> list, int startIndex )", "testcase": false, "constructor": false}, {"identifier": "slc", "parameters": "( List<V> list, int startIndex )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> slc( List<V> list, int startIndex )", "full_signature": "public static List<V> slc( List<V> list, int startIndex )", "class_method_signature": "Lists.slc( List<V> list, int startIndex )", "testcase": false, "constructor": false}, {"identifier": "endSliceOf", "parameters": "( List<V> list, int endIndex )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> endSliceOf( List<V> list, int endIndex )", "full_signature": "public static List<V> endSliceOf( List<V> list, int endIndex )", "class_method_signature": "Lists.endSliceOf( List<V> list, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "slcEnd", "parameters": "( List<V> list, int endIndex )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> slcEnd( List<V> list, int endIndex )", "full_signature": "public static List<V> slcEnd( List<V> list, int endIndex )", "class_method_signature": "Lists.slcEnd( List<V> list, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( List<V> list )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> copy( List<V> list )", "full_signature": "public static List<V> copy( List<V> list )", "class_method_signature": "Lists.copy( List<V> list )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( CopyOnWriteArrayList<V> list )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> copy( CopyOnWriteArrayList<V> list )", "full_signature": "public static List<V> copy( CopyOnWriteArrayList<V> list )", "class_method_signature": "Lists.copy( CopyOnWriteArrayList<V> list )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( ArrayList<V> list )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> copy( ArrayList<V> list )", "full_signature": "public static List<V> copy( ArrayList<V> list )", "class_method_signature": "Lists.copy( ArrayList<V> list )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( LinkedList<V> list )", "modifiers": "public static", "return": "List<V>", "signature": "List<V> copy( LinkedList<V> list )", "full_signature": "public static List<V> copy( LinkedList<V> list )", "class_method_signature": "Lists.copy( LinkedList<V> list )", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "( List<V> list, int index, V v )", "modifiers": "public static", "return": "void", "signature": "void insert( List<V> list, int index, V v )", "full_signature": "public static void insert( List<V> list, int index, V v )", "class_method_signature": "Lists.insert( List<V> list, int index, V v )", "testcase": false, "constructor": false}, {"identifier": "calculateIndex", "parameters": "( List<T> list, int originalIndex )", "modifiers": "private static", "return": "int", "signature": "int calculateIndex( List<T> list, int originalIndex )", "full_signature": "private static int calculateIndex( List<T> list, int originalIndex )", "class_method_signature": "Lists.calculateIndex( List<T> list, int originalIndex )", "testcase": false, "constructor": false}, {"identifier": "listFromProperty", "parameters": "( Class<T> propertyType, String propertyPath, Collection<?> list )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> listFromProperty( Class<T> propertyType, String propertyPath, Collection<?> list )", "full_signature": "public static List<T> listFromProperty( Class<T> propertyType, String propertyPath, Collection<?> list )", "class_method_signature": "Lists.listFromProperty( Class<T> propertyType, String propertyPath, Collection<?> list )", "testcase": false, "constructor": false}, {"identifier": "listFromProperty", "parameters": "( Class<T> propertyType, String propertyPath, Iterable<?> list )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> listFromProperty( Class<T> propertyType, String propertyPath, Iterable<?> list )", "full_signature": "public static List<T> listFromProperty( Class<T> propertyType, String propertyPath, Iterable<?> list )", "class_method_signature": "Lists.listFromProperty( Class<T> propertyType, String propertyPath, Iterable<?> list )", "testcase": false, "constructor": false}, {"identifier": "toListOfMaps", "parameters": "( List<?> list )", "modifiers": "public static", "return": "List<Map<String, Object>>", "signature": "List<Map<String, Object>> toListOfMaps( List<?> list )", "full_signature": "public static List<Map<String, Object>> toListOfMaps( List<?> list )", "class_method_signature": "Lists.toListOfMaps( List<?> list )", "testcase": false, "constructor": false}, {"identifier": "setListProperty", "parameters": "(List<?> list, String propertyName, Object value)", "modifiers": "public static", "return": "void", "signature": "void setListProperty(List<?> list, String propertyName, Object value)", "full_signature": "public static void setListProperty(List<?> list, String propertyName, Object value)", "class_method_signature": "Lists.setListProperty(List<?> list, String propertyName, Object value)", "testcase": false, "constructor": false}, {"identifier": "mapBy", "parameters": "( Object[] objects, Object instance, String methodName)", "modifiers": "public static", "return": "List<?>", "signature": "List<?> mapBy( Object[] objects, Object instance, String methodName)", "full_signature": "public static List<?> mapBy( Object[] objects, Object instance, String methodName)", "class_method_signature": "Lists.mapBy( Object[] objects, Object instance, String methodName)", "testcase": false, "constructor": false}, {"identifier": "mapBy", "parameters": "(Object[] objects, Class<?> cls, String methodName)", "modifiers": "public static", "return": "List<?>", "signature": "List<?> mapBy(Object[] objects, Class<?> cls, String methodName)", "full_signature": "public static List<?> mapBy(Object[] objects, Class<?> cls, String methodName)", "class_method_signature": "Lists.mapBy(Object[] objects, Class<?> cls, String methodName)", "testcase": false, "constructor": false}, {"identifier": "mapBy", "parameters": "(Iterable<?> objects, Class<?> cls, String methodName)", "modifiers": "public static", "return": "List<?>", "signature": "List<?> mapBy(Iterable<?> objects, Class<?> cls, String methodName)", "full_signature": "public static List<?> mapBy(Iterable<?> objects, Class<?> cls, String methodName)", "class_method_signature": "Lists.mapBy(Iterable<?> objects, Class<?> cls, String methodName)", "testcase": false, "constructor": false}, {"identifier": "mapBy", "parameters": "(Iterable<?> objects, Object instance, String methodName)", "modifiers": "public static", "return": "List<?>", "signature": "List<?> mapBy(Iterable<?> objects, Object instance, String methodName)", "full_signature": "public static List<?> mapBy(Iterable<?> objects, Object instance, String methodName)", "class_method_signature": "Lists.mapBy(Iterable<?> objects, Object instance, String methodName)", "testcase": false, "constructor": false}, {"identifier": "mapBy", "parameters": "(Collection<?> objects, Class<?> cls, String methodName)", "modifiers": "public static", "return": "List<?>", "signature": "List<?> mapBy(Collection<?> objects, Class<?> cls, String methodName)", "full_signature": "public static List<?> mapBy(Collection<?> objects, Class<?> cls, String methodName)", "class_method_signature": "Lists.mapBy(Collection<?> objects, Class<?> cls, String methodName)", "testcase": false, "constructor": false}, {"identifier": "mapBy", "parameters": "(Collection<?> objects, Object function)", "modifiers": "public static", "return": "List<?>", "signature": "List<?> mapBy(Collection<?> objects, Object function)", "full_signature": "public static List<?> mapBy(Collection<?> objects, Object function)", "class_method_signature": "Lists.mapBy(Collection<?> objects, Object function)", "testcase": false, "constructor": false}, {"identifier": "mapBy", "parameters": "(Class<T> cls, Collection<?> objects, Object function)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> mapBy(Class<T> cls, Collection<?> objects, Object function)", "full_signature": "public static List<T> mapBy(Class<T> cls, Collection<?> objects, Object function)", "class_method_signature": "Lists.mapBy(Class<T> cls, Collection<?> objects, Object function)", "testcase": false, "constructor": false}, {"identifier": "mapBy", "parameters": "(Iterable<?> objects, Object function)", "modifiers": "public static", "return": "List<?>", "signature": "List<?> mapBy(Iterable<?> objects, Object function)", "full_signature": "public static List<?> mapBy(Iterable<?> objects, Object function)", "class_method_signature": "Lists.mapBy(Iterable<?> objects, Object function)", "testcase": false, "constructor": false}, {"identifier": "mapBy", "parameters": "(Object[] objects, Object function)", "modifiers": "public static", "return": "List<?>", "signature": "List<?> mapBy(Object[] objects, Object function)", "full_signature": "public static List<?> mapBy(Object[] objects, Object function)", "class_method_signature": "Lists.mapBy(Object[] objects, Object function)", "testcase": false, "constructor": false}, {"identifier": "mapBy", "parameters": "(Collection<?> objects, Object object, String methodName)", "modifiers": "public static", "return": "List<?>", "signature": "List<?> mapBy(Collection<?> objects, Object object, String methodName)", "full_signature": "public static List<?> mapBy(Collection<?> objects, Object object, String methodName)", "class_method_signature": "Lists.mapBy(Collection<?> objects, Object object, String methodName)", "testcase": false, "constructor": false}, {"identifier": "mapBy", "parameters": "(  final V[] array, Function<V, N> function )", "modifiers": "public static", "return": "List<N>", "signature": "List<N> mapBy(  final V[] array, Function<V, N> function )", "full_signature": "public static List<N> mapBy(  final V[] array, Function<V, N> function )", "class_method_signature": "Lists.mapBy(  final V[] array, Function<V, N> function )", "testcase": false, "constructor": false}, {"identifier": "mapBy", "parameters": "( final Collection<V> array, Function<V, N> function )", "modifiers": "public static", "return": "List<N>", "signature": "List<N> mapBy( final Collection<V> array, Function<V, N> function )", "full_signature": "public static List<N> mapBy( final Collection<V> array, Function<V, N> function )", "class_method_signature": "Lists.mapBy( final Collection<V> array, Function<V, N> function )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final Iterable<?> array, Object object )", "modifiers": "public static", "return": "Object", "signature": "Object reduceBy( final Iterable<?> array, Object object )", "full_signature": "public static Object reduceBy( final Iterable<?> array, Object object )", "class_method_signature": "Lists.reduceBy( final Iterable<?> array, Object object )", "testcase": false, "constructor": false}, {"identifier": "filterBy", "parameters": "( final Iterable<T> array, Predicate<T> predicate )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> filterBy( final Iterable<T> array, Predicate<T> predicate )", "full_signature": "public static List<T> filterBy( final Iterable<T> array, Predicate<T> predicate )", "class_method_signature": "Lists.filterBy( final Iterable<T> array, Predicate<T> predicate )", "testcase": false, "constructor": false}, {"identifier": "filterBy", "parameters": "(  final Collection<T> array, Predicate<T> predicate )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> filterBy(  final Collection<T> array, Predicate<T> predicate )", "full_signature": "public static List<T> filterBy(  final Collection<T> array, Predicate<T> predicate )", "class_method_signature": "Lists.filterBy(  final Collection<T> array, Predicate<T> predicate )", "testcase": false, "constructor": false}, {"identifier": "filterBy", "parameters": "( Predicate<T> predicate, final T[] array )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> filterBy( Predicate<T> predicate, final T[] array )", "full_signature": "public static List<T> filterBy( Predicate<T> predicate, final T[] array )", "class_method_signature": "Lists.filterBy( Predicate<T> predicate, final T[] array )", "testcase": false, "constructor": false}, {"identifier": "filterBy", "parameters": "(  final Iterable<T> array, Object object )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> filterBy(  final Iterable<T> array, Object object )", "full_signature": "public static List<T> filterBy(  final Iterable<T> array, Object object )", "class_method_signature": "Lists.filterBy(  final Iterable<T> array, Object object )", "testcase": false, "constructor": false}, {"identifier": "filterBy", "parameters": "( final Collection<T> array, Object object )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> filterBy( final Collection<T> array, Object object )", "full_signature": "public static List<T> filterBy( final Collection<T> array, Object object )", "class_method_signature": "Lists.filterBy( final Collection<T> array, Object object )", "testcase": false, "constructor": false}, {"identifier": "filterBy", "parameters": "(  final T[] array, Object object )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> filterBy(  final T[] array, Object object )", "full_signature": "public static List<T> filterBy(  final T[] array, Object object )", "class_method_signature": "Lists.filterBy(  final T[] array, Object object )", "testcase": false, "constructor": false}, {"identifier": "filterBy", "parameters": "(  final Iterable<T> array, Object object, String methodName )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> filterBy(  final Iterable<T> array, Object object, String methodName )", "full_signature": "public static List<T> filterBy(  final Iterable<T> array, Object object, String methodName )", "class_method_signature": "Lists.filterBy(  final Iterable<T> array, Object object, String methodName )", "testcase": false, "constructor": false}, {"identifier": "filterBy", "parameters": "( final Collection<T> array, Object object, String methodName )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> filterBy( final Collection<T> array, Object object, String methodName )", "full_signature": "public static List<T> filterBy( final Collection<T> array, Object object, String methodName )", "class_method_signature": "Lists.filterBy( final Collection<T> array, Object object, String methodName )", "testcase": false, "constructor": false}, {"identifier": "filterBy", "parameters": "(  final T[] array, Object object, String methodName )", "modifiers": "public static", "return": "List<T>", "signature": "List<T> filterBy(  final T[] array, Object object, String methodName )", "full_signature": "public static List<T> filterBy(  final T[] array, Object object, String methodName )", "class_method_signature": "Lists.filterBy(  final T[] array, Object object, String methodName )", "testcase": false, "constructor": false}, {"identifier": "toPrettyJson", "parameters": "(List list)", "modifiers": "public static", "return": "String", "signature": "String toPrettyJson(List list)", "full_signature": "public static String toPrettyJson(List list)", "class_method_signature": "Lists.toPrettyJson(List list)", "testcase": false, "constructor": false}], "file": "reflekt/src/main/java/io/advantageous/boon/core/Lists.java"}, "focal_method": {"identifier": "mapBy", "parameters": "( Object[] objects, Object instance, String methodName)", "modifiers": "public static", "return": "List<?>", "body": "public static List<?> mapBy( Object[] objects, Object instance, String methodName) {\n\n        List list = new ArrayList(objects.length);\n        for (Object o : objects) {\n            list.add( Invoker.invoke(instance, methodName, o));\n        }\n        return list;\n    }", "signature": "List<?> mapBy( Object[] objects, Object instance, String methodName)", "full_signature": "public static List<?> mapBy( Object[] objects, Object instance, String methodName)", "class_method_signature": "Lists.mapBy( Object[] objects, Object instance, String methodName)", "testcase": false, "constructor": false, "invocations": ["add", "invoke"]}, "repository": {"repo_id": 33015857, "url": "https://github.com/advantageous/boon", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 18, "size": 6174, "license": "licensed"}}