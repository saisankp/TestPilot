{"test_class": {"identifier": "MapEditorTest", "superclass": "extends AbstractEditorTest", "interfaces": "", "fields": [{"original_string": "@Mock MapEditor.View view;", "modifier": "@Mock", "type": "MapEditor.View", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock EventSourceMock<ValueChangeEvent<Map<String, String>>> valueChangeEvent;", "modifier": "@Mock", "type": "EventSourceMock<ValueChangeEvent<Map<String, String>>>", "declarator": "valueChangeEvent", "var_name": "valueChangeEvent"}, {"original_string": "private MapEditor presenter;", "modifier": "private", "type": "MapEditor", "declarator": "presenter", "var_name": "presenter"}], "file": "dashbuilder-client/dashbuilder-common-client/src/test/java/org/dashbuilder/common/client/editor/map/MapEditorTest.java"}, "test_case": {"identifier": "testShowErrors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShowErrors() throws Exception {\n        EditorError e1 = mockEditorError(presenter, \"m1\");\n        EditorError e2 = mockEditorError(presenter, \"m2\");\n        List<EditorError> errors = new ArrayList<EditorError>(2);\n        errors.add(e1);\n        errors.add(e2);\n        presenter.showErrors(errors);\n        final ArgumentCaptor<SafeHtml> errorSafeHtmlCaptor =  ArgumentCaptor.forClass(SafeHtml.class);\n        verify(view, times(1)).showError(errorSafeHtmlCaptor.capture());\n        verify(view, times(0)).clearError();\n        verify(view, times(0)).init(presenter);\n        verify(view, times(0)).setAddText(anyString());\n        verify(view, times(0)).setEmptyText(anyString());\n        verify(view, times(0)).addButtonColumn(anyInt(), anyString(), anyInt());\n        verify(view, times(0)).addTextColumn(anyInt(), anyString(), anyBoolean(), anyInt());\n        verify(view, times(0)).setData(anyList());\n        verify(view, times(0)).setRowCount(anyInt());\n        verify(view, times(0)).removeColumn(anyInt());\n        final SafeHtml value = errorSafeHtmlCaptor.getValue();\n        Assert.assertEquals(\"m1\\nm2\", value.asString());\n    }", "signature": "void testShowErrors()", "full_signature": "@Test public void testShowErrors()", "class_method_signature": "MapEditorTest.testShowErrors()", "testcase": true, "constructor": false, "invocations": ["mockEditorError", "mockEditorError", "add", "add", "showErrors", "forClass", "showError", "verify", "times", "capture", "clearError", "verify", "times", "init", "verify", "times", "setAddText", "verify", "times", "anyString", "setEmptyText", "verify", "times", "anyString", "addButtonColumn", "verify", "times", "anyInt", "anyString", "anyInt", "addTextColumn", "verify", "times", "anyInt", "anyString", "anyBoolean", "anyInt", "setData", "verify", "times", "anyList", "setRowCount", "verify", "times", "anyInt", "removeColumn", "verify", "times", "anyInt", "getValue", "assertEquals", "asString"]}, "focal_class": {"identifier": "MapEditor", "superclass": "", "interfaces": "implements IsWidget, LeafAttributeEditor<Map<String, String>>", "fields": [{"original_string": "Event<org.dashbuilder.common.client.event.ValueChangeEvent<Map<String, String>>> valueChangeEvent;", "modifier": "", "type": "Event<org.dashbuilder.common.client.event.ValueChangeEvent<Map<String, String>>>", "declarator": "valueChangeEvent", "var_name": "valueChangeEvent"}, {"original_string": "public View view;", "modifier": "public", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "Map<String, String> value;", "modifier": "", "type": "Map<String, String>", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "MapEditor", "parameters": "(final View view,\n                     final Event<org.dashbuilder.common.client.event.ValueChangeEvent<Map<String, String>>> valueChangeEvent)", "modifiers": "@Inject public", "return": "", "signature": " MapEditor(final View view,\n                     final Event<org.dashbuilder.common.client.event.ValueChangeEvent<Map<String, String>>> valueChangeEvent)", "full_signature": "@Inject public  MapEditor(final View view,\n                     final Event<org.dashbuilder.common.client.event.ValueChangeEvent<Map<String, String>>> valueChangeEvent)", "class_method_signature": "MapEditor.MapEditor(final View view,\n                     final Event<org.dashbuilder.common.client.event.ValueChangeEvent<Map<String, String>>> valueChangeEvent)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "MapEditor.init()", "testcase": false, "constructor": false}, {"identifier": "showErrors", "parameters": "(final List<EditorError> errors)", "modifiers": "@Override public", "return": "void", "signature": "void showErrors(final List<EditorError> errors)", "full_signature": "@Override public void showErrors(final List<EditorError> errors)", "class_method_signature": "MapEditor.showErrors(final List<EditorError> errors)", "testcase": false, "constructor": false}, {"identifier": "asWidget", "parameters": "()", "modifiers": "@Override public", "return": "Widget", "signature": "Widget asWidget()", "full_signature": "@Override public Widget asWidget()", "class_method_signature": "MapEditor.asWidget()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(final Map<String, String> value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(final Map<String, String> value)", "full_signature": "@Override public void setValue(final Map<String, String> value)", "class_method_signature": "MapEditor.setValue(final Map<String, String> value)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getValue()", "full_signature": "@Override public Map<String, String> getValue()", "class_method_signature": "MapEditor.getValue()", "testcase": false, "constructor": false}, {"identifier": "addEntry", "parameters": "()", "modifiers": "", "return": "void", "signature": "void addEntry()", "full_signature": " void addEntry()", "class_method_signature": "MapEditor.addEntry()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final int columnIndex, final Map.Entry<String, String> object)", "modifiers": "", "return": "String", "signature": "String getValue(final int columnIndex, final Map.Entry<String, String> object)", "full_signature": " String getValue(final int columnIndex, final Map.Entry<String, String> object)", "class_method_signature": "MapEditor.getValue(final int columnIndex, final Map.Entry<String, String> object)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final int columnIndex, final int index, final Map.Entry<String, String> object, final String value)", "modifiers": "", "return": "void", "signature": "void update(final int columnIndex, final int index, final Map.Entry<String, String> object, final String value)", "full_signature": " void update(final int columnIndex, final int index, final Map.Entry<String, String> object, final String value)", "class_method_signature": "MapEditor.update(final int columnIndex, final int index, final Map.Entry<String, String> object, final String value)", "testcase": false, "constructor": false}, {"identifier": "onKeyUpdated", "parameters": "(final int index, final Map.Entry<String, String> object, final String value)", "modifiers": "private", "return": "void", "signature": "void onKeyUpdated(final int index, final Map.Entry<String, String> object, final String value)", "full_signature": "private void onKeyUpdated(final int index, final Map.Entry<String, String> object, final String value)", "class_method_signature": "MapEditor.onKeyUpdated(final int index, final Map.Entry<String, String> object, final String value)", "testcase": false, "constructor": false}, {"identifier": "onValueUpdated", "parameters": "(final int index, final Map.Entry<String, String> object, final String value)", "modifiers": "private", "return": "void", "signature": "void onValueUpdated(final int index, final Map.Entry<String, String> object, final String value)", "full_signature": "private void onValueUpdated(final int index, final Map.Entry<String, String> object, final String value)", "class_method_signature": "MapEditor.onValueUpdated(final int index, final Map.Entry<String, String> object, final String value)", "testcase": false, "constructor": false}, {"identifier": "onRemoveEntry", "parameters": "(final Map.Entry<String, String> object)", "modifiers": "private", "return": "void", "signature": "void onRemoveEntry(final Map.Entry<String, String> object)", "full_signature": "private void onRemoveEntry(final Map.Entry<String, String> object)", "class_method_signature": "MapEditor.onRemoveEntry(final Map.Entry<String, String> object)", "testcase": false, "constructor": false}, {"identifier": "onAddEntry", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void onAddEntry()", "full_signature": "private void onAddEntry()", "class_method_signature": "MapEditor.onAddEntry()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(final Map<String, String> value, final boolean fireEvents)", "modifiers": "private", "return": "void", "signature": "void setValue(final Map<String, String> value, final boolean fireEvents)", "full_signature": "private void setValue(final Map<String, String> value, final boolean fireEvents)", "class_method_signature": "MapEditor.setValue(final Map<String, String> value, final boolean fireEvents)", "testcase": false, "constructor": false}, {"identifier": "initDataGrid", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initDataGrid()", "full_signature": "private void initDataGrid()", "class_method_signature": "MapEditor.initDataGrid()", "testcase": false, "constructor": false}, {"identifier": "addColumns", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addColumns()", "full_signature": "private void addColumns()", "class_method_signature": "MapEditor.addColumns()", "testcase": false, "constructor": false}, {"identifier": "getKeyParameter", "parameters": "(final int index)", "modifiers": "private", "return": "String", "signature": "String getKeyParameter(final int index)", "full_signature": "private String getKeyParameter(final int index)", "class_method_signature": "MapEditor.getKeyParameter(final int index)", "testcase": false, "constructor": false}, {"identifier": "redraw", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void redraw()", "full_signature": "private void redraw()", "class_method_signature": "MapEditor.redraw()", "testcase": false, "constructor": false}], "file": "dashbuilder-client/dashbuilder-common-client/src/main/java/org/dashbuilder/common/client/editor/map/MapEditor.java"}, "focal_method": {"identifier": "showErrors", "parameters": "(final List<EditorError> errors)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void showErrors(final List<EditorError> errors) {\n        StringBuilder sb = new StringBuilder();\n        for (EditorError error : errors) {\n\n            if (error.getEditor() == this) {\n                sb.append(\"\\n\").append(error.getMessage());\n            }\n        }\n\n        boolean hasErrors = sb.length() > 0;\n        if (!hasErrors) {\n            view.clearError();\n            return;\n        }\n\n        // Show the errors.\n        view.showError(new SafeHtmlBuilder().appendEscaped(sb.substring(1)).toSafeHtml());\n    }", "signature": "void showErrors(final List<EditorError> errors)", "full_signature": "@Override public void showErrors(final List<EditorError> errors)", "class_method_signature": "MapEditor.showErrors(final List<EditorError> errors)", "testcase": false, "constructor": false, "invocations": ["getEditor", "append", "append", "getMessage", "length", "clearError", "showError", "toSafeHtml", "appendEscaped", "substring"]}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}