{"test_class": {"identifier": "ScientificNotationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScientificNotation scientificNotation;", "modifier": "private", "type": "ScientificNotation", "declarator": "scientificNotation", "var_name": "scientificNotation"}], "file": "algs/src/test/java/com/github/pedrovgs/problem30/ScientificNotationTest.java"}, "test_case": {"identifier": "shouldNotAcceptNullStringAsInput", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullStringAsInput() {\n    scientificNotation.calculate(null);\n  }", "signature": "void shouldNotAcceptNullStringAsInput()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullStringAsInput()", "class_method_signature": "ScientificNotationTest.shouldNotAcceptNullStringAsInput()", "testcase": true, "constructor": false, "invocations": ["calculate"]}, "focal_class": {"identifier": "ScientificNotation", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "calculate", "parameters": "(String number)", "modifiers": "public", "return": "long", "signature": "long calculate(String number)", "full_signature": "public long calculate(String number)", "class_method_signature": "ScientificNotation.calculate(String number)", "testcase": false, "constructor": false}, {"identifier": "getPow", "parameters": "(String s)", "modifiers": "private", "return": "int", "signature": "int getPow(String s)", "full_signature": "private int getPow(String s)", "class_method_signature": "ScientificNotation.getPow(String s)", "testcase": false, "constructor": false}, {"identifier": "getNumberSign", "parameters": "(String s)", "modifiers": "private", "return": "int", "signature": "int getNumberSign(String s)", "full_signature": "private int getNumberSign(String s)", "class_method_signature": "ScientificNotation.getNumberSign(String s)", "testcase": false, "constructor": false}, {"identifier": "getLeftPart", "parameters": "(String s)", "modifiers": "private", "return": "double", "signature": "double getLeftPart(String s)", "full_signature": "private double getLeftPart(String s)", "class_method_signature": "ScientificNotation.getLeftPart(String s)", "testcase": false, "constructor": false}, {"identifier": "splitScientificNumber", "parameters": "(String number)", "modifiers": "private", "return": "String[]", "signature": "String[] splitScientificNumber(String number)", "full_signature": "private String[] splitScientificNumber(String number)", "class_method_signature": "ScientificNotation.splitScientificNumber(String number)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem30/ScientificNotation.java"}, "focal_method": {"identifier": "calculate", "parameters": "(String number)", "modifiers": "public", "return": "long", "body": "public long calculate(String number) {\n    if (number == null || !number.contains(\"E\")) {\n      throw new IllegalArgumentException(\"Invalid format for number \" + number);\n    }\n    String[] splittedNumber = splitScientificNumber(number);\n    double first = getLeftPart(splittedNumber[0]);\n    int sign = getNumberSign(splittedNumber[1]);\n    int pow = getPow(splittedNumber[1]);\n    Double result = sign * first * Math.pow(10, pow);\n    return result.longValue();\n  }", "signature": "long calculate(String number)", "full_signature": "public long calculate(String number)", "class_method_signature": "ScientificNotation.calculate(String number)", "testcase": false, "constructor": false, "invocations": ["contains", "splitScientificNumber", "getLeftPart", "getNumberSign", "getPow", "pow", "longValue"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}