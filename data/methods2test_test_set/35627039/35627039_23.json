{"test_class": {"identifier": "StreamlineEventSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Object[] PRIMITIVE_VALUES = { new Boolean(true), new String(\"STRINGVALUE\"), new Integer(0), new Long(0l), new Double(0.0), \"bytes\"\n            .getBytes() };", "modifier": "private static final", "type": "Object[]", "declarator": "PRIMITIVE_VALUES = { new Boolean(true), new String(\"STRINGVALUE\"), new Integer(0), new Long(0l), new Double(0.0), \"bytes\"\n            .getBytes() }", "var_name": "PRIMITIVE_VALUES"}, {"original_string": "private static final Schema.Type[] SCHEMA_TYPES = { Schema.Type.BOOLEAN, Schema.Type.STRING, Schema.Type.INT, Schema.Type.LONG, Schema.Type.DOUBLE,\n            Schema.Type.BYTES};", "modifier": "private static final", "type": "Schema.Type[]", "declarator": "SCHEMA_TYPES = { Schema.Type.BOOLEAN, Schema.Type.STRING, Schema.Type.INT, Schema.Type.LONG, Schema.Type.DOUBLE,\n            Schema.Type.BYTES}", "var_name": "SCHEMA_TYPES"}, {"original_string": "private static final String[] NAMES = {\"bool\", \"str\", \"int\", \"long\", \"double\", \"bytes\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"bool\", \"str\", \"int\", \"long\", \"double\", \"bytes\"}", "var_name": "NAMES"}], "file": "streams/runners/storm/runtime/src/test/java/com/hortonworks/streamline/streams/runtime/storm/bolt/kafka/StreamlineEventSerializerTest.java"}, "test_case": {"identifier": "testRecordWithFixed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRecordWithFixed () {\n        List<Schema.Field> fields = new ArrayList<>();\n        Map<String, Object> data = new HashMap<>();\n        for (int i = 0; i < PRIMITIVE_VALUES.length; ++i) {\n            Schema.Field field = new Schema.Field(NAMES[i], Schema.create(SCHEMA_TYPES[i]), null, null);\n            fields.add(field);\n            data.put(NAMES[i], PRIMITIVE_VALUES[i]);\n        }\n\n        //add fixed to test case\n        fields.add(new Schema.Field(\"fixed\", Schema.createFixed(\"fixedSchema\", null, null, 10), null, null));\n        data.put(\"fixed\", \"bytes\".getBytes());\n\n        //add array to test case\n        fields.add(new Schema.Field(\"array\", Schema.createArray(Schema.create(Schema.Type.INT)), null, null));\n        List<Integer> integerList = new ArrayList<>();\n        integerList.add(1);\n        integerList.add(2);\n        data.put(\"array\", integerList);\n\n        Schema schema = Schema.createRecord(fields);\n        GenericRecord expected = new GenericData.Record(schema);\n        for (int i = 0; i < PRIMITIVE_VALUES.length; ++i) {\n            expected.put(NAMES[i], PRIMITIVE_VALUES[i]);\n        }\n        expected.put(\"fixed\", new GenericData.Fixed(Schema.createFixed(\"fixedSchema\", null, null, 10), \"bytes\".getBytes()));\n        expected.put(\"array\", new GenericData.Array<Integer>(Schema.createArray(Schema.create(Schema.Type.INT)), integerList));\n        StreamlineEvent streamlineEvent = StreamlineEventImpl.builder().fieldsAndValues(data).dataSourceId(\"dataSourceId\").build();\n        Assert.assertEquals(expected, StreamlineEventSerializer.getAvroRecord(streamlineEvent, schema));\n    }", "signature": "void testRecordWithFixed()", "full_signature": "@Test public void testRecordWithFixed()", "class_method_signature": "StreamlineEventSerializerTest.testRecordWithFixed()", "testcase": true, "constructor": false, "invocations": ["create", "add", "put", "add", "createFixed", "put", "getBytes", "add", "createArray", "create", "add", "add", "put", "createRecord", "put", "put", "createFixed", "getBytes", "put", "createArray", "create", "build", "dataSourceId", "fieldsAndValues", "builder", "assertEquals", "getAvroRecord"]}, "focal_class": {"identifier": "StreamlineEventSerializer", "superclass": "", "interfaces": "implements Serializer<StreamlineEvent>", "fields": [{"original_string": "protected static final Logger LOG = LoggerFactory.getLogger(StreamlineEventSerializer.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(StreamlineEventSerializer.class)", "var_name": "LOG"}, {"original_string": "private final AvroSnapshotSerializer avroSnapshotSerializer;", "modifier": "private final", "type": "AvroSnapshotSerializer", "declarator": "avroSnapshotSerializer", "var_name": "avroSnapshotSerializer"}, {"original_string": "private SchemaRegistryClient schemaRegistryClient;", "modifier": "private", "type": "SchemaRegistryClient", "declarator": "schemaRegistryClient", "var_name": "schemaRegistryClient"}, {"original_string": "private Integer writerSchemaVersion;", "modifier": "private", "type": "Integer", "declarator": "writerSchemaVersion", "var_name": "writerSchemaVersion"}], "methods": [{"identifier": "StreamlineEventSerializer", "parameters": "()", "modifiers": "public", "return": "", "signature": " StreamlineEventSerializer()", "full_signature": "public  StreamlineEventSerializer()", "class_method_signature": "StreamlineEventSerializer.StreamlineEventSerializer()", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(Map<String, ?> configs, boolean isKey)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, ?> configs, boolean isKey)", "full_signature": "@Override public void configure(Map<String, ?> configs, boolean isKey)", "class_method_signature": "StreamlineEventSerializer.configure(Map<String, ?> configs, boolean isKey)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(String topic, StreamlineEvent streamlineEvent)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] serialize(String topic, StreamlineEvent streamlineEvent)", "full_signature": "@Override public byte[] serialize(String topic, StreamlineEvent streamlineEvent)", "class_method_signature": "StreamlineEventSerializer.serialize(String topic, StreamlineEvent streamlineEvent)", "testcase": false, "constructor": false}, {"identifier": "getSchemaKey", "parameters": "(String topic, boolean isKey)", "modifiers": "private", "return": "SchemaMetadata", "signature": "SchemaMetadata getSchemaKey(String topic, boolean isKey)", "full_signature": "private SchemaMetadata getSchemaKey(String topic, boolean isKey)", "class_method_signature": "StreamlineEventSerializer.getSchemaKey(String topic, boolean isKey)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "StreamlineEventSerializer.close()", "testcase": false, "constructor": false}, {"identifier": "getAvroRecord", "parameters": "(StreamlineEvent streamlineEvent, Schema schema)", "modifiers": "static", "return": "Object", "signature": "Object getAvroRecord(StreamlineEvent streamlineEvent, Schema schema)", "full_signature": "static Object getAvroRecord(StreamlineEvent streamlineEvent, Schema schema)", "class_method_signature": "StreamlineEventSerializer.getAvroRecord(StreamlineEvent streamlineEvent, Schema schema)", "testcase": false, "constructor": false}, {"identifier": "getAvroValue", "parameters": "(Object input, Schema schema)", "modifiers": "private static", "return": "Object", "signature": "Object getAvroValue(Object input, Schema schema)", "full_signature": "private static Object getAvroValue(Object input, Schema schema)", "class_method_signature": "StreamlineEventSerializer.getAvroValue(Object input, Schema schema)", "testcase": false, "constructor": false}], "file": "streams/runners/storm/runtime/src/main/java/com/hortonworks/streamline/streams/runtime/storm/bolt/kafka/StreamlineEventSerializer.java"}, "focal_method": {"identifier": "getAvroRecord", "parameters": "(StreamlineEvent streamlineEvent, Schema schema)", "modifiers": "static", "return": "Object", "body": "static Object getAvroRecord (StreamlineEvent streamlineEvent, Schema schema) {\n        if (streamlineEvent.containsKey(StreamlineEvent.PRIMITIVE_PAYLOAD_FIELD)) {\n            if (streamlineEvent.keySet().size() > 1) {\n                throw new RuntimeException(\"Invalid schema, primitive schema can contain only one field.\");\n            }\n            return streamlineEvent.get(StreamlineEvent.PRIMITIVE_PAYLOAD_FIELD);\n        }\n        GenericRecord result;\n        result = new GenericData.Record(schema);\n        for (Map.Entry<String, Object> entry: streamlineEvent.entrySet()) {\n            result.put(entry.getKey(), getAvroValue(entry.getValue(), schema.getField(entry.getKey()).schema()));\n        }\n        return result;\n    }", "signature": "Object getAvroRecord(StreamlineEvent streamlineEvent, Schema schema)", "full_signature": "static Object getAvroRecord(StreamlineEvent streamlineEvent, Schema schema)", "class_method_signature": "StreamlineEventSerializer.getAvroRecord(StreamlineEvent streamlineEvent, Schema schema)", "testcase": false, "constructor": false, "invocations": ["containsKey", "size", "keySet", "get", "entrySet", "put", "getKey", "getAvroValue", "getValue", "schema", "getField", "getKey"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}