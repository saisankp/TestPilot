{"test_class": {"identifier": "ResourceGeneratorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MODEL_FQCN = \"modelfqcn\";", "modifier": "public static final", "type": "String", "declarator": "MODEL_FQCN = \"modelfqcn\"", "var_name": "MODEL_FQCN"}, {"original_string": "public static final String PROCESS_FQCN = \"processfqcn\";", "modifier": "public static final", "type": "String", "declarator": "PROCESS_FQCN = \"processfqcn\"", "var_name": "PROCESS_FQCN"}, {"original_string": "public static final String APP_CANONICAL_NAME = \"appCanonicalName\";", "modifier": "public static final", "type": "String", "declarator": "APP_CANONICAL_NAME = \"appCanonicalName\"", "var_name": "APP_CANONICAL_NAME"}, {"original_string": "private ResourceGeneratorFactory tested;", "modifier": "private", "type": "ResourceGeneratorFactory", "declarator": "tested", "var_name": "tested"}, {"original_string": "@Mock\n    private WorkflowProcess process;", "modifier": "@Mock\n    private", "type": "WorkflowProcess", "declarator": "process", "var_name": "process"}], "file": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java"}, "test_case": {"identifier": "testCreateQuarkus", "parameters": "(@Mock GeneratorContext generatorContext)", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testCreateQuarkus(@Mock GeneratorContext generatorContext) {\n        when(generatorContext.getBuildContext()).thenReturn(new QuarkusKogitoBuildContext(p -> true));\n        Optional<AbstractResourceGenerator> context = tested.create(generatorContext,\n                                                                    process,\n                                                                    MODEL_FQCN,\n                                                                    PROCESS_FQCN,\n                                                                    APP_CANONICAL_NAME);\n        assertThat(context.isPresent()).isTrue();\n        assertThat(context.get()).isExactlyInstanceOf(ResourceGenerator.class);\n    }", "signature": "void testCreateQuarkus(@Mock GeneratorContext generatorContext)", "full_signature": "@Test void testCreateQuarkus(@Mock GeneratorContext generatorContext)", "class_method_signature": "ResourceGeneratorFactoryTest.testCreateQuarkus(@Mock GeneratorContext generatorContext)", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getBuildContext", "create", "isTrue", "assertThat", "isPresent", "isExactlyInstanceOf", "assertThat", "get"]}, "focal_class": {"identifier": "ResourceGeneratorFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "create", "parameters": "(GeneratorContext context,\n                                                      WorkflowProcess process,\n                                                      String modelfqcn,\n                                                      String processfqcn,\n                                                      String appCanonicalName)", "modifiers": "public", "return": "Optional<AbstractResourceGenerator>", "signature": "Optional<AbstractResourceGenerator> create(GeneratorContext context,\n                                                      WorkflowProcess process,\n                                                      String modelfqcn,\n                                                      String processfqcn,\n                                                      String appCanonicalName)", "full_signature": "public Optional<AbstractResourceGenerator> create(GeneratorContext context,\n                                                      WorkflowProcess process,\n                                                      String modelfqcn,\n                                                      String processfqcn,\n                                                      String appCanonicalName)", "class_method_signature": "ResourceGeneratorFactory.create(GeneratorContext context,\n                                                      WorkflowProcess process,\n                                                      String modelfqcn,\n                                                      String processfqcn,\n                                                      String appCanonicalName)", "testcase": false, "constructor": false}], "file": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ResourceGeneratorFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(GeneratorContext context,\n                                                      WorkflowProcess process,\n                                                      String modelfqcn,\n                                                      String processfqcn,\n                                                      String appCanonicalName)", "modifiers": "public", "return": "Optional<AbstractResourceGenerator>", "body": "public Optional<AbstractResourceGenerator> create(GeneratorContext context,\n                                                      WorkflowProcess process,\n                                                      String modelfqcn,\n                                                      String processfqcn,\n                                                      String appCanonicalName) {\n\n        return GeneratorType\n                .from(context)\n                .map(type -> {\n                    switch (type) {\n                        case SPRING:\n                            return new SpringResourceGenerator(context,\n                                                               process,\n                                                               modelfqcn,\n                                                               processfqcn,\n                                                               appCanonicalName);\n                        case QUARKUS:\n                            return new ResourceGenerator(context,\n                                                         process,\n                                                         modelfqcn,\n                                                         processfqcn,\n                                                         appCanonicalName);\n                        case QUARKUS_REACTIVE:\n                            return new ReactiveResourceGenerator(context,\n                                                                 process,\n                                                                 modelfqcn,\n                                                                 processfqcn,\n                                                                 appCanonicalName);\n                        default:\n                            throw new NoSuchElementException(\"No Resource Generator for: \" + type);\n                    }\n                });\n    }", "signature": "Optional<AbstractResourceGenerator> create(GeneratorContext context,\n                                                      WorkflowProcess process,\n                                                      String modelfqcn,\n                                                      String processfqcn,\n                                                      String appCanonicalName)", "full_signature": "public Optional<AbstractResourceGenerator> create(GeneratorContext context,\n                                                      WorkflowProcess process,\n                                                      String modelfqcn,\n                                                      String processfqcn,\n                                                      String appCanonicalName)", "class_method_signature": "ResourceGeneratorFactory.create(GeneratorContext context,\n                                                      WorkflowProcess process,\n                                                      String modelfqcn,\n                                                      String processfqcn,\n                                                      String appCanonicalName)", "testcase": false, "constructor": false, "invocations": ["map", "from"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}