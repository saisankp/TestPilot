{"test_class": {"identifier": "PowerLawIntervalForecasterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}, {"original_string": "private PowerLawIntervalForecaster forecasterUnderTest;", "modifier": "private", "type": "PowerLawIntervalForecaster", "declarator": "forecasterUnderTest", "var_name": "forecasterUnderTest"}, {"original_string": "@Mock\n    private MetricData metricData;", "modifier": "@Mock\n    private", "type": "MetricData", "declarator": "metricData", "var_name": "metricData"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/forecast/interval/algo/powerlaw/PowerLawIntervalForecasterTest.java"}, "test_case": {"identifier": "testForecast", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForecast() {\n        val params = forecasterUnderTest.getParams();\n        val pointForecast = 132.4;\n        val forecastResult = forecasterUnderTest.forecast(metricData, pointForecast);\n\n        val width = params.getAlpha() * Math.pow(pointForecast, params.getBeta());\n        val weakWidth = params.getWeakMultiplier() * width;\n        val strongWidth = params.getStrongMultiplier() * width;\n\n        assertEquals(pointForecast + strongWidth, forecastResult.getUpperStrong(), TOLERANCE);\n        assertEquals(pointForecast + weakWidth, forecastResult.getUpperWeak(), TOLERANCE);\n        assertEquals(pointForecast - weakWidth, forecastResult.getLowerWeak(), TOLERANCE);\n        assertEquals(pointForecast - strongWidth, forecastResult.getLowerStrong(), TOLERANCE);\n    }", "signature": "void testForecast()", "full_signature": "@Test public void testForecast()", "class_method_signature": "PowerLawIntervalForecasterTest.testForecast()", "testcase": true, "constructor": false, "invocations": ["getParams", "forecast", "getAlpha", "pow", "getBeta", "getWeakMultiplier", "getStrongMultiplier", "assertEquals", "getUpperStrong", "assertEquals", "getUpperWeak", "assertEquals", "getLowerWeak", "assertEquals", "getLowerStrong"]}, "focal_class": {"identifier": "PowerLawIntervalForecaster", "superclass": "", "interfaces": "implements IntervalForecaster", "fields": [{"original_string": "@Getter\n    @NonNull\n    private PowerLawIntervalForecasterParams params;", "modifier": "@Getter\n    @NonNull\n    private", "type": "PowerLawIntervalForecasterParams", "declarator": "params", "var_name": "params"}], "methods": [{"identifier": "forecast", "parameters": "(MetricData metricData, double pointForecast)", "modifiers": "@Override public", "return": "IntervalForecast", "signature": "IntervalForecast forecast(MetricData metricData, double pointForecast)", "full_signature": "@Override public IntervalForecast forecast(MetricData metricData, double pointForecast)", "class_method_signature": "PowerLawIntervalForecaster.forecast(MetricData metricData, double pointForecast)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/forecast/interval/algo/powerlaw/PowerLawIntervalForecaster.java"}, "focal_method": {"identifier": "forecast", "parameters": "(MetricData metricData, double pointForecast)", "modifiers": "@Override public", "return": "IntervalForecast", "body": "@Override\n    public IntervalForecast forecast(MetricData metricData, double pointForecast) {\n        notNull(metricData, \"metricData can't be null\");\n\n        val width = params.getAlpha() * Math.pow(pointForecast, params.getBeta());\n        val weakWidth = params.getWeakMultiplier() * width;\n        val strongWidth = params.getStrongMultiplier() * width;\n\n        return new IntervalForecast(\n                pointForecast + strongWidth,\n                pointForecast + weakWidth,\n                pointForecast - weakWidth,\n                pointForecast - strongWidth);\n    }", "signature": "IntervalForecast forecast(MetricData metricData, double pointForecast)", "full_signature": "@Override public IntervalForecast forecast(MetricData metricData, double pointForecast)", "class_method_signature": "PowerLawIntervalForecaster.forecast(MetricData metricData, double pointForecast)", "testcase": false, "constructor": false, "invocations": ["notNull", "getAlpha", "pow", "getBeta", "getWeakMultiplier", "getStrongMultiplier"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}