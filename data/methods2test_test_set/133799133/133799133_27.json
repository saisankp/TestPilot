{"test_class": {"identifier": "EidasMetadataServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private X509KeyPair keyPair;", "modifier": "private", "type": "X509KeyPair", "declarator": "keyPair", "var_name": "keyPair"}], "file": "eidas-starterkit/src/test/java/de/governikus/eumw/eidasstarterkit/EidasMetadataServiceTest.java"}, "test_case": {"identifier": "validateUnsignedMetadataThrowsSignatureException", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void validateUnsignedMetadataThrowsSignatureException() throws Exception\n  {\n    EidasMetadataService eidasMetadataService = getEidasMetadataService(false);\n    EidasSigner signer = new EidasSigner(keyPair.getKey(), keyPair.getCert());\n    byte[] metadataByteArray = eidasMetadataService.generate(signer);\n    EntityDescriptor entityDescriptor = getEntityDescriptor(metadataByteArray);\n    Signature sig = entityDescriptor.getSignature();\n    Credential credential = new BasicX509Credential(keyPair.getCert());\n    Assertions.assertThrows(ConstraintViolationException.class,\n                            () -> SignatureValidator.validate(sig, credential));\n  }", "signature": "void validateUnsignedMetadataThrowsSignatureException()", "full_signature": "@Test void validateUnsignedMetadataThrowsSignatureException()", "class_method_signature": "EidasMetadataServiceTest.validateUnsignedMetadataThrowsSignatureException()", "testcase": true, "constructor": false, "invocations": ["getEidasMetadataService", "getKey", "getCert", "generate", "getEntityDescriptor", "getSignature", "getCert", "assertThrows", "validate"]}, "focal_class": {"identifier": "EidasMetadataService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PROTOCOL_VERSION_URI = \"http://eidas.europa.eu/entity-attributes/protocol-version\";", "modifier": "private static final", "type": "String", "declarator": "PROTOCOL_VERSION_URI = \"http://eidas.europa.eu/entity-attributes/protocol-version\"", "var_name": "PROTOCOL_VERSION_URI"}, {"original_string": "private static final String APPLICATION_IDENTIFIER_URI = \"http://eidas.europa.eu/entity-attributes/application-identifier\";", "modifier": "private static final", "type": "String", "declarator": "APPLICATION_IDENTIFIER_URI = \"http://eidas.europa.eu/entity-attributes/application-identifier\"", "var_name": "APPLICATION_IDENTIFIER_URI"}, {"original_string": "private static final String SUPPORTED_PROTOCOL_VERSION = \"1.2\";", "modifier": "private static final", "type": "String", "declarator": "SUPPORTED_PROTOCOL_VERSION = \"1.2\"", "var_name": "SUPPORTED_PROTOCOL_VERSION"}, {"original_string": "private String id;", "modifier": "private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private String entityId;", "modifier": "private", "type": "String", "declarator": "entityId", "var_name": "entityId"}, {"original_string": "private Date validUntil;", "modifier": "private", "type": "Date", "declarator": "validUntil", "var_name": "validUntil"}, {"original_string": "private X509Certificate sigCert;", "modifier": "private", "type": "X509Certificate", "declarator": "sigCert", "var_name": "sigCert"}, {"original_string": "private X509Certificate encCert;", "modifier": "private", "type": "X509Certificate", "declarator": "encCert", "var_name": "encCert"}, {"original_string": "private EidasOrganisation organisation;", "modifier": "private", "type": "EidasOrganisation", "declarator": "organisation", "var_name": "organisation"}, {"original_string": "private EidasContactPerson technicalContact;", "modifier": "private", "type": "EidasContactPerson", "declarator": "technicalContact", "var_name": "technicalContact"}, {"original_string": "private EidasContactPerson supportContact;", "modifier": "private", "type": "EidasContactPerson", "declarator": "supportContact", "var_name": "supportContact"}, {"original_string": "private String postEndpoint;", "modifier": "private", "type": "String", "declarator": "postEndpoint", "var_name": "postEndpoint"}, {"original_string": "private String redirectEndpoint;", "modifier": "private", "type": "String", "declarator": "redirectEndpoint", "var_name": "redirectEndpoint"}, {"original_string": "private List<EidasPersonAttributes> attributes = new ArrayList<>();", "modifier": "private", "type": "List<EidasPersonAttributes>", "declarator": "attributes = new ArrayList<>()", "var_name": "attributes"}, {"original_string": "private String middlewareVersion;", "modifier": "private", "type": "String", "declarator": "middlewareVersion", "var_name": "middlewareVersion"}, {"original_string": "private boolean doSign;", "modifier": "private", "type": "boolean", "declarator": "doSign", "var_name": "doSign"}, {"original_string": "private boolean requesterIdFlag;", "modifier": "private", "type": "boolean", "declarator": "requesterIdFlag", "var_name": "requesterIdFlag"}, {"original_string": "@Getter(AccessLevel.NONE)\n  @Setter(AccessLevel.NONE)\n  private List<EidasNameIdType> supportedNameIdTypes = new ArrayList<>();", "modifier": "@Getter(AccessLevel.NONE)\n  @Setter(AccessLevel.NONE)\n  private", "type": "List<EidasNameIdType>", "declarator": "supportedNameIdTypes = new ArrayList<>()", "var_name": "supportedNameIdTypes"}], "methods": [{"identifier": "EidasMetadataService", "parameters": "(String id,\n                       String entityId,\n                       Date validUntil,\n                       X509Certificate sigCert,\n                       X509Certificate encCert,\n                       EidasOrganisation organisation,\n                       EidasContactPerson technicalContact,\n                       EidasContactPerson supportContact,\n                       String postEndpoint,\n                       String redirectEndpoint,\n                       List<EidasPersonAttributes> attributes,\n                       List<EidasNameIdType> supportedNameIdTypes,\n                       String middlewareVersion,\n                       boolean doSign,\n                       boolean requesterIdFlag)", "modifiers": "", "return": "", "signature": " EidasMetadataService(String id,\n                       String entityId,\n                       Date validUntil,\n                       X509Certificate sigCert,\n                       X509Certificate encCert,\n                       EidasOrganisation organisation,\n                       EidasContactPerson technicalContact,\n                       EidasContactPerson supportContact,\n                       String postEndpoint,\n                       String redirectEndpoint,\n                       List<EidasPersonAttributes> attributes,\n                       List<EidasNameIdType> supportedNameIdTypes,\n                       String middlewareVersion,\n                       boolean doSign,\n                       boolean requesterIdFlag)", "full_signature": "  EidasMetadataService(String id,\n                       String entityId,\n                       Date validUntil,\n                       X509Certificate sigCert,\n                       X509Certificate encCert,\n                       EidasOrganisation organisation,\n                       EidasContactPerson technicalContact,\n                       EidasContactPerson supportContact,\n                       String postEndpoint,\n                       String redirectEndpoint,\n                       List<EidasPersonAttributes> attributes,\n                       List<EidasNameIdType> supportedNameIdTypes,\n                       String middlewareVersion,\n                       boolean doSign,\n                       boolean requesterIdFlag)", "class_method_signature": "EidasMetadataService.EidasMetadataService(String id,\n                       String entityId,\n                       Date validUntil,\n                       X509Certificate sigCert,\n                       X509Certificate encCert,\n                       EidasOrganisation organisation,\n                       EidasContactPerson technicalContact,\n                       EidasContactPerson supportContact,\n                       String postEndpoint,\n                       String redirectEndpoint,\n                       List<EidasPersonAttributes> attributes,\n                       List<EidasNameIdType> supportedNameIdTypes,\n                       String middlewareVersion,\n                       boolean doSign,\n                       boolean requesterIdFlag)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(EidasSigner signer)", "modifiers": "", "return": "byte[]", "signature": "byte[] generate(EidasSigner signer)", "full_signature": " byte[] generate(EidasSigner signer)", "class_method_signature": "EidasMetadataService.generate(EidasSigner signer)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream is)", "modifiers": "static", "return": "EidasMetadataService", "signature": "EidasMetadataService parse(InputStream is)", "full_signature": "static EidasMetadataService parse(InputStream is)", "class_method_signature": "EidasMetadataService.parse(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "getMiddlewareVersionFromExtension", "parameters": "(Extensions extensions)", "modifiers": "private static", "return": "String", "signature": "String getMiddlewareVersionFromExtension(Extensions extensions)", "full_signature": "private static String getMiddlewareVersionFromExtension(Extensions extensions)", "class_method_signature": "EidasMetadataService.getMiddlewareVersionFromExtension(Extensions extensions)", "testcase": false, "constructor": false}, {"identifier": "getMiddlewareVersionFromEntityAttributes", "parameters": "(EntityAttributes entityAttributes)", "modifiers": "private static", "return": "String", "signature": "String getMiddlewareVersionFromEntityAttributes(EntityAttributes entityAttributes)", "full_signature": "private static String getMiddlewareVersionFromEntityAttributes(EntityAttributes entityAttributes)", "class_method_signature": "EidasMetadataService.getMiddlewareVersionFromEntityAttributes(EntityAttributes entityAttributes)", "testcase": false, "constructor": false}, {"identifier": "getMiddlewareVersionFromAttribute", "parameters": "(Attribute attribute)", "modifiers": "private static", "return": "String", "signature": "String getMiddlewareVersionFromAttribute(Attribute attribute)", "full_signature": "private static String getMiddlewareVersionFromAttribute(Attribute attribute)", "class_method_signature": "EidasMetadataService.getMiddlewareVersionFromAttribute(Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "unmarshalContactPerson", "parameters": "(List<ContactPerson> cps, String contactType)", "modifiers": "private static", "return": "EidasContactPerson", "signature": "EidasContactPerson unmarshalContactPerson(List<ContactPerson> cps, String contactType)", "full_signature": "private static EidasContactPerson unmarshalContactPerson(List<ContactPerson> cps, String contactType)", "class_method_signature": "EidasMetadataService.unmarshalContactPerson(List<ContactPerson> cps, String contactType)", "testcase": false, "constructor": false}, {"identifier": "unmarshalOrganisation", "parameters": "(Organization org)", "modifiers": "private static", "return": "EidasOrganisation", "signature": "EidasOrganisation unmarshalOrganisation(Organization org)", "full_signature": "private static EidasOrganisation unmarshalOrganisation(Organization org)", "class_method_signature": "EidasMetadataService.unmarshalOrganisation(Organization org)", "testcase": false, "constructor": false}, {"identifier": "getFirstCertFromKeyDescriptor", "parameters": "(KeyDescriptor keyDescriptor)", "modifiers": "static", "return": "X509Certificate", "signature": "X509Certificate getFirstCertFromKeyDescriptor(KeyDescriptor keyDescriptor)", "full_signature": "static X509Certificate getFirstCertFromKeyDescriptor(KeyDescriptor keyDescriptor)", "class_method_signature": "EidasMetadataService.getFirstCertFromKeyDescriptor(KeyDescriptor keyDescriptor)", "testcase": false, "constructor": false}], "file": "eidas-starterkit/src/main/java/de/governikus/eumw/eidasstarterkit/EidasMetadataService.java"}, "focal_method": {"identifier": "generate", "parameters": "(EidasSigner signer)", "modifiers": "", "return": "byte[]", "body": "byte[] generate(EidasSigner signer) throws CertificateEncodingException, IOException, MarshallingException,\n    SignatureException, TransformerFactoryConfigurationError, TransformerException\n  {\n    EntityDescriptor entityDescriptor = new EntityDescriptorBuilder().buildObject();\n    entityDescriptor.setID(id);\n    entityDescriptor.setEntityID(entityId);\n    entityDescriptor.setValidUntil(new DateTime(validUntil.getTime()));\n\n    IDPSSODescriptor idpDescriptor = new IDPSSODescriptorBuilder().buildObject();\n    idpDescriptor.setWantAuthnRequestsSigned(true);\n    idpDescriptor.addSupportedProtocol(SAMLConstants.SAML20P_NS);\n\n    KeyDescriptor kd = new KeyDescriptorBuilder().buildObject();\n    kd.setUse(UsageType.SIGNING);\n    KeyInfo ki = new KeyInfoBuilder().buildObject();\n    X509Data x509 = new X509DataBuilder().buildObject();\n    org.opensaml.xmlsec.signature.X509Certificate x509Cert = new X509CertificateBuilder().buildObject();\n    x509Cert.setValue(new String(Base64.getEncoder().encode(sigCert.getEncoded()), StandardCharsets.UTF_8));\n    x509.getX509Certificates().add(x509Cert);\n    ki.getX509Datas().add(x509);\n    kd.setKeyInfo(ki);\n    idpDescriptor.getKeyDescriptors().add(kd);\n\n    kd = new KeyDescriptorBuilder().buildObject();\n    kd.setUse(UsageType.ENCRYPTION);\n    ki = new KeyInfoBuilder().buildObject();\n    x509 = new X509DataBuilder().buildObject();\n    x509Cert = new X509CertificateBuilder().buildObject();\n    x509Cert.setValue(new String(Base64.getEncoder().encode(encCert.getEncoded()), StandardCharsets.UTF_8));\n    x509.getX509Certificates().add(x509Cert);\n    ki.getX509Datas().add(x509);\n    kd.setKeyInfo(ki);\n    EncryptionMethod encMethod = new EncryptionMethodBuilder().buildObject();\n    encMethod.setAlgorithm(EncryptionConstants.ALGO_ID_BLOCKCIPHER_AES256_GCM);\n    kd.getEncryptionMethods().add(encMethod);\n    idpDescriptor.getKeyDescriptors().add(kd);\n\n    SingleSignOnService sso = new SingleSignOnServiceBuilder().buildObject();\n    sso.setBinding(SAMLConstants.SAML2_POST_BINDING_URI);\n    sso.setLocation(postEndpoint);\n    idpDescriptor.getSingleSignOnServices().add(sso);\n\n    sso = new SingleSignOnServiceBuilder().buildObject();\n    sso.setBinding(SAMLConstants.SAML2_REDIRECT_BINDING_URI);\n    sso.setLocation(redirectEndpoint);\n    idpDescriptor.getSingleSignOnServices().add(sso);\n\n    for ( EidasNameIdType nameIDType : this.supportedNameIdTypes )\n    {\n      NameIDFormat nif = new NameIDFormatBuilder().buildObject();\n      nif.setFormat(nameIDType.value);\n      idpDescriptor.getNameIDFormats().add(nif);\n    }\n\n    for ( EidasPersonAttributes att : attributes )\n    {\n      Attribute a = new AttributeBuilder().buildObject();\n      a.setFriendlyName(att.getFriendlyName());\n      a.setName(att.getValue());\n      idpDescriptor.getAttributes().add(a);\n    }\n\n    entityDescriptor.getRoleDescriptors().add(idpDescriptor);\n\n    Organization organization = new OrganizationBuilder().buildObject();\n    OrganizationDisplayName odn = new OrganizationDisplayNameBuilder().buildObject();\n    odn.setValue(organisation.getDisplayName());\n    odn.setXMLLang(organisation.getLangId());\n    organization.getDisplayNames().add(odn);\n    OrganizationName on = new OrganizationNameBuilder().buildObject();\n    on.setValue(organisation.getName());\n    on.setXMLLang(organisation.getLangId());\n    organization.getOrganizationNames().add(on);\n    OrganizationURL ourl = new OrganizationURLBuilder().buildObject();\n    ourl.setValue(organisation.getUrl());\n    ourl.setXMLLang(organisation.getLangId());\n    organization.getURLs().add(ourl);\n    entityDescriptor.setOrganization(organization);\n\n    ContactPerson cp = new ContactPersonBuilder().buildObject();\n    Company comp = new CompanyBuilder().buildObject();\n    comp.setName(technicalContact.getCompany());\n    cp.setCompany(comp);\n    GivenName gn = new GivenNameBuilder().buildObject();\n    gn.setName(technicalContact.getGivenName());\n    cp.setGivenName(gn);\n    SurName sn = new SurNameBuilder().buildObject();\n    sn.setName(technicalContact.getSurName());\n    cp.setSurName(sn);\n    EmailAddress email = new EmailAddressBuilder().buildObject();\n    email.setAddress(technicalContact.getEmail());\n    cp.getEmailAddresses().add(email);\n    TelephoneNumber tel = new TelephoneNumberBuilder().buildObject();\n    tel.setNumber(technicalContact.getTel());\n    cp.getTelephoneNumbers().add(tel);\n    cp.setType(ContactPersonTypeEnumeration.TECHNICAL);\n    entityDescriptor.getContactPersons().add(cp);\n\n    cp = new ContactPersonBuilder().buildObject();\n    comp = new CompanyBuilder().buildObject();\n    comp.setName(supportContact.getCompany());\n    cp.setCompany(comp);\n    gn = new GivenNameBuilder().buildObject();\n    gn.setName(supportContact.getGivenName());\n    cp.setGivenName(gn);\n    sn = new SurNameBuilder().buildObject();\n    sn.setName(supportContact.getSurName());\n    cp.setSurName(sn);\n    email = new EmailAddressBuilder().buildObject();\n    email.setAddress(supportContact.getEmail());\n    cp.getEmailAddresses().add(email);\n    tel = new TelephoneNumberBuilder().buildObject();\n    tel.setNumber(supportContact.getTel());\n    cp.getTelephoneNumbers().add(tel);\n    cp.setType(ContactPersonTypeEnumeration.SUPPORT);\n    entityDescriptor.getContactPersons().add(cp);\n\n    EntityAttributes entAttr = new EntityAttributesBuilder().buildObject(EntityAttributes.DEFAULT_ELEMENT_NAME);\n    Namespace assertion = new Namespace(SAMLConstants.SAML20_NS, SAMLConstants.SAML20_PREFIX);\n    entAttr.getNamespaceManager().registerNamespaceDeclaration(assertion);\n\n    Attribute attr = new AttributeBuilder().buildObject();\n    attr.setName(\"urn:oasis:names:tc:SAML:attribute:assurance-certification\");\n    attr.setNameFormat(Attribute.URI_REFERENCE);\n    XSAny any = new XSAnyBuilder().buildObject(AttributeValue.DEFAULT_ELEMENT_NAME);\n    any.setTextContent(\"http://eidas.europa.eu/LoA/high\");\n    attr.getAttributeValues().add(any);\n    entAttr.getAttributes().add(attr);\n\n    Attribute protocolAttribute = new AttributeBuilder().buildObject();\n    protocolAttribute.setName(PROTOCOL_VERSION_URI);\n    protocolAttribute.setNameFormat(Attribute.URI_REFERENCE);\n    XSAny protocolVersion = new XSAnyBuilder().buildObject(AttributeValue.DEFAULT_ELEMENT_NAME,\n                                                           new QName(\"xs:string\"));\n    protocolVersion.setTextContent(SUPPORTED_PROTOCOL_VERSION);\n    protocolAttribute.getAttributeValues().add(protocolVersion);\n    entAttr.getAttributes().add(protocolAttribute);\n\n    Attribute appliccationIdentifier = new AttributeBuilder().buildObject();\n    appliccationIdentifier.setName(APPLICATION_IDENTIFIER_URI);\n    appliccationIdentifier.setNameFormat(Attribute.URI_REFERENCE);\n    XSAny applicationIdentifierVersion = new XSAnyBuilder().buildObject(AttributeValue.DEFAULT_ELEMENT_NAME,\n                                                                        new QName(\"xs:string\"));\n    applicationIdentifierVersion.setTextContent(\"German eIDAS Middleware version: \" + middlewareVersion);\n    appliccationIdentifier.getAttributeValues().add(applicationIdentifierVersion);\n    entAttr.getAttributes().add(appliccationIdentifier);\n\n    if (requesterIdFlag)\n    {\n      Attribute requesterIdAttribute = new AttributeBuilder().buildObject();\n      requesterIdAttribute.setName(\"http://macedir.org/entity-category\");\n      requesterIdAttribute.setNameFormat(Attribute.URI_REFERENCE);\n      XSAny requesterIdValue = new XSAnyBuilder().buildObject(AttributeValue.DEFAULT_ELEMENT_NAME);\n      requesterIdValue.setTextContent(\"http://eidas.europa.eu/entity-attributes/termsofaccess/requesterid\");\n      requesterIdAttribute.getAttributeValues().add(requesterIdValue);\n      entAttr.getAttributes().add(requesterIdAttribute);\n    }\n\n    Extensions ext = new ExtensionsBuilder().buildObject();\n    ext.getUnknownXMLObjects().add(entAttr);\n\n    DigestMethod dm = new DigestMethodBuilder().buildObject();\n    dm.setAlgorithm(MessageDigestAlgorithm.ALGO_ID_DIGEST_SHA256);\n    ext.getUnknownXMLObjects().add(dm);\n\n    SigningMethod sm = new SigningMethodBuilder().buildObject();\n    sm.setAlgorithm(XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA256);\n    sm.setMinKeySize(256);\n    ext.getUnknownXMLObjects().add(sm);\n\n    sm = new SigningMethodBuilder().buildObject();\n    sm.setAlgorithm(EidasSigner.DIGEST_NONSPEC.equals(signer.getSigDigestAlg())\n      ? XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA256 : XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA256_MGF1);\n    sm.setMinKeySize(3072);\n    sm.setMaxKeySize(4096);\n    ext.getUnknownXMLObjects().add(sm);\n\n    entityDescriptor.setExtensions(ext);\n\n    List<Signature> sigs = new ArrayList<>();\n    if (doSign)\n    {\n      XMLSignatureHandler.addSignature(entityDescriptor,\n                                       signer.getSigKey(),\n                                       signer.getSigCert(),\n                                       signer.getSigType(),\n                                       signer.getSigDigestAlg());\n      sigs.add(entityDescriptor.getSignature());\n    }\n\n    EntityDescriptorMarshaller arm = new EntityDescriptorMarshaller();\n    Element all = arm.marshall(entityDescriptor);\n    if (!sigs.isEmpty())\n    {\n      Signer.signObjects(sigs);\n    }\n\n    Transformer trans = Utils.getTransformer();\n    trans.setOutputProperty(OutputKeys.ENCODING, StandardCharsets.UTF_8.name());\n\n    byte[] result = null;\n    try (ByteArrayOutputStream bout = new ByteArrayOutputStream())\n    {\n      trans.transform(new DOMSource(all), new StreamResult(bout));\n      result = bout.toByteArray();\n    }\n    return result;\n  }", "signature": "byte[] generate(EidasSigner signer)", "full_signature": " byte[] generate(EidasSigner signer)", "class_method_signature": "EidasMetadataService.generate(EidasSigner signer)", "testcase": false, "constructor": false, "invocations": ["buildObject", "setID", "setEntityID", "setValidUntil", "getTime", "buildObject", "setWantAuthnRequestsSigned", "addSupportedProtocol", "buildObject", "setUse", "buildObject", "buildObject", "buildObject", "setValue", "encode", "getEncoder", "getEncoded", "add", "getX509Certificates", "add", "getX509Datas", "setKeyInfo", "add", "getKeyDescriptors", "buildObject", "setUse", "buildObject", "buildObject", "buildObject", "setValue", "encode", "getEncoder", "getEncoded", "add", "getX509Certificates", "add", "getX509Datas", "setKeyInfo", "buildObject", "setAlgorithm", "add", "getEncryptionMethods", "add", "getKeyDescriptors", "buildObject", "setBinding", "setLocation", "add", "getSingleSignOnServices", "buildObject", "setBinding", "setLocation", "add", "getSingleSignOnServices", "buildObject", "setFormat", "add", "getNameIDFormats", "buildObject", "setFriendlyName", "getFriendlyName", "setName", "getValue", "add", "getAttributes", "add", "getRoleDescriptors", "buildObject", "buildObject", "setValue", "getDisplayName", "setXMLLang", "getLangId", "add", "getDisplayNames", "buildObject", "setValue", "getName", "setXMLLang", "getLangId", "add", "getOrganizationNames", "buildObject", "setValue", "getUrl", "setXMLLang", "getLangId", "add", "getURLs", "setOrganization", "buildObject", "buildObject", "setName", "getCompany", "setCompany", "buildObject", "setName", "getGivenName", "setGivenName", "buildObject", "setName", "getSurName", "setSurName", "buildObject", "setAddress", "getEmail", "add", "getEmailAddresses", "buildObject", "setNumber", "getTel", "add", "getTelephoneNumbers", "setType", "add", "getContactPersons", "buildObject", "buildObject", "setName", "getCompany", "setCompany", "buildObject", "setName", "getGivenName", "setGivenName", "buildObject", "setName", "getSurName", "setSurName", "buildObject", "setAddress", "getEmail", "add", "getEmailAddresses", "buildObject", "setNumber", "getTel", "add", "getTelephoneNumbers", "setType", "add", "getContactPersons", "buildObject", "registerNamespaceDeclaration", "getNamespaceManager", "buildObject", "setName", "setNameFormat", "buildObject", "setTextContent", "add", "getAttributeValues", "add", "getAttributes", "buildObject", "setName", "setNameFormat", "buildObject", "setTextContent", "add", "getAttributeValues", "add", "getAttributes", "buildObject", "setName", "setNameFormat", "buildObject", "setTextContent", "add", "getAttributeValues", "add", "getAttributes", "buildObject", "setName", "setNameFormat", "buildObject", "setTextContent", "add", "getAttributeValues", "add", "getAttributes", "buildObject", "add", "getUnknownXMLObjects", "buildObject", "setAlgorithm", "add", "getUnknownXMLObjects", "buildObject", "setAlgorithm", "setMinKeySize", "add", "getUnknownXMLObjects", "buildObject", "setAlgorithm", "equals", "getSigDigestAlg", "setMinKeySize", "setMaxKeySize", "add", "getUnknownXMLObjects", "setExtensions", "addSignature", "getSigKey", "getSigCert", "getSigType", "getSigDigestAlg", "add", "getSignature", "marshall", "isEmpty", "signObjects", "getTransformer", "setOutputProperty", "name", "transform", "toByteArray"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}