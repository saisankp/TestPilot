{"test_class": {"identifier": "ExtendedParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/osip-core/src/test/java/edu/kit/pse/osip/core/io/files/ExtendedParserTest.java"}, "test_case": {"identifier": "testTerm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTerm() throws ParserException {\n        ExtendedParser parser = new ExtendedParser(\"5 * 5\");\n        assertEquals(25f, parser.readTerm(), 0.0001);\n        \n        parser = new ExtendedParser(\"1 * -1 * +3\");\n        assertEquals(-3f, parser.readTerm(), 0.0001);\n        \n        parser = new ExtendedParser(\"10\");\n        assertEquals(10f, parser.readTerm(), 0.0001);\n        \n        parser = new ExtendedParser(\"3 / -varname\");\n        parser.variables.put(\"varname\", 42f);\n        assertEquals(3f / -42f, parser.readTerm(), 0.0001);\n\n        parser = new ExtendedParser(\"varname / varname\");\n        parser.variables.put(\"varname\", 42f);\n        assertEquals(1f, parser.readTerm(), 0.0001);\n\n        parser = new ExtendedParser(\"var_name * 2\");\n        parser.variables.put(\"var_name\", 42f);\n        assertEquals(84f, parser.readTerm(), 0.0001);\n    }", "signature": "void testTerm()", "full_signature": "@Test public void testTerm()", "class_method_signature": "ExtendedParserTest.testTerm()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "readTerm", "assertEquals", "readTerm", "assertEquals", "readTerm", "put", "assertEquals", "readTerm", "put", "assertEquals", "readTerm", "put", "assertEquals", "readTerm"]}, "focal_class": {"identifier": "ExtendedParser", "superclass": "extends BaseParser", "interfaces": "", "fields": [{"original_string": "protected HashMap<String, Float> variables = new HashMap<>();", "modifier": "protected", "type": "HashMap<String, Float>", "declarator": "variables = new HashMap<>()", "var_name": "variables"}], "methods": [{"identifier": "ExtendedParser", "parameters": "(String toParse)", "modifiers": "public", "return": "", "signature": " ExtendedParser(String toParse)", "full_signature": "public  ExtendedParser(String toParse)", "class_method_signature": "ExtendedParser.ExtendedParser(String toParse)", "testcase": false, "constructor": true}, {"identifier": "readExpression", "parameters": "()", "modifiers": "protected final", "return": "float", "signature": "float readExpression()", "full_signature": "protected final float readExpression()", "class_method_signature": "ExtendedParser.readExpression()", "testcase": false, "constructor": false}, {"identifier": "readNumber", "parameters": "()", "modifiers": "protected final", "return": "float", "signature": "float readNumber()", "full_signature": "protected final float readNumber()", "class_method_signature": "ExtendedParser.readNumber()", "testcase": false, "constructor": false}, {"identifier": "readTerm", "parameters": "()", "modifiers": "protected final", "return": "float", "signature": "float readTerm()", "full_signature": "protected final float readTerm()", "class_method_signature": "ExtendedParser.readTerm()", "testcase": false, "constructor": false}, {"identifier": "readFactor", "parameters": "()", "modifiers": "protected final", "return": "float", "signature": "float readFactor()", "full_signature": "protected final float readFactor()", "class_method_signature": "ExtendedParser.readFactor()", "testcase": false, "constructor": false}], "file": "src/osip-core/src/main/java/edu/kit/pse/osip/core/io/files/ExtendedParser.java"}, "focal_method": {"identifier": "readTerm", "parameters": "()", "modifiers": "protected final", "return": "float", "body": "protected final float readTerm() throws ParserException {\n        skipWhitespaces();\n        float result = readFactor();\n        skipWhitespaces();\n        while (available() && (peek() == '*' || peek() == '/')) {\n            if (pop() == '*') {\n                skipWhitespaces();\n                result *= readFactor();\n            } else {\n                skipWhitespaces();\n                result /= readFactor();\n            }\n            skipWhitespaces();\n        }\n        return result;\n    }", "signature": "float readTerm()", "full_signature": "protected final float readTerm()", "class_method_signature": "ExtendedParser.readTerm()", "testcase": false, "constructor": false, "invocations": ["skipWhitespaces", "readFactor", "skipWhitespaces", "available", "peek", "peek", "pop", "skipWhitespaces", "readFactor", "skipWhitespaces", "readFactor", "skipWhitespaces"]}, "repository": {"repo_id": 74042107, "url": "https://github.com/ByteHamster/PSE", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 18396, "license": "licensed"}}