{"test_class": {"identifier": "StringUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils/src/test/java/com/cloud/utils/StringUtilsTest.java"}, "test_case": {"identifier": "testCleanSecretkeyFromJsonObjectAlone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCleanSecretkeyFromJsonObjectAlone() {\n        final String input = \"{\\\"secretkey\\\":\\\"test\\\"}\";\n        final String expected = \"{}\";\n        final String result = StringUtils.cleanString(input);\n        assertEquals(result, expected);\n    }", "signature": "void testCleanSecretkeyFromJsonObjectAlone()", "full_signature": "@Test public void testCleanSecretkeyFromJsonObjectAlone()", "class_method_signature": "StringUtilsTest.testCleanSecretkeyFromJsonObjectAlone()", "testcase": true, "constructor": false, "invocations": ["cleanString", "assertEquals"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] hexChar = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};", "modifier": "private static final", "type": "char[]", "declarator": "hexChar = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}", "var_name": "hexChar"}, {"original_string": "private static Charset preferredACSCharset;", "modifier": "private static", "type": "Charset", "declarator": "preferredACSCharset", "var_name": "preferredACSCharset"}, {"original_string": "private static final String UTF8 = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "UTF8 = \"UTF-8\"", "var_name": "UTF8"}, {"original_string": "private static final Pattern REGEX_PASSWORD_QUERYSTRING = Pattern.compile(\"(&|%26)?[^(&|%26)]*((p|P)assword|accesskey|secretkey)(=|%3D).*?(?=(%26|[&'\\\"]|$))\");", "modifier": "private static final", "type": "Pattern", "declarator": "REGEX_PASSWORD_QUERYSTRING = Pattern.compile(\"(&|%26)?[^(&|%26)]*((p|P)assword|accesskey|secretkey)(=|%3D).*?(?=(%26|[&'\\\"]|$))\")", "var_name": "REGEX_PASSWORD_QUERYSTRING"}, {"original_string": "private static final Pattern REGEX_PASSWORD_JSON = Pattern.compile(\"\\\"((p|P)assword|privatekey|accesskey|secretkey)\\\":\\\\s?\\\".*?\\\",?\");", "modifier": "private static final", "type": "Pattern", "declarator": "REGEX_PASSWORD_JSON = Pattern.compile(\"\\\"((p|P)assword|privatekey|accesskey|secretkey)\\\":\\\\s?\\\".*?\\\",?\")", "var_name": "REGEX_PASSWORD_JSON"}, {"original_string": "private static final Pattern REGEX_PASSWORD_DETAILS = Pattern.compile(\"(&|%26)?details(\\\\[|%5B)\\\\d*(\\\\]|%5D)\\\\.key(=|%3D)((p|P)assword|accesskey|secretkey)(?=(%26|[&'\\\"]))\");", "modifier": "private static final", "type": "Pattern", "declarator": "REGEX_PASSWORD_DETAILS = Pattern.compile(\"(&|%26)?details(\\\\[|%5B)\\\\d*(\\\\]|%5D)\\\\.key(=|%3D)((p|P)assword|accesskey|secretkey)(?=(%26|[&'\\\"]))\")", "var_name": "REGEX_PASSWORD_DETAILS"}, {"original_string": "private static final Pattern REGEX_PASSWORD_DETAILS_INDEX = Pattern.compile(\"details(\\\\[|%5B)\\\\d*(\\\\]|%5D)\");", "modifier": "private static final", "type": "Pattern", "declarator": "REGEX_PASSWORD_DETAILS_INDEX = Pattern.compile(\"details(\\\\[|%5B)\\\\d*(\\\\]|%5D)\")", "var_name": "REGEX_PASSWORD_DETAILS_INDEX"}, {"original_string": "private static final Pattern REGEX_REDUNDANT_AND = Pattern.compile(\"(&|%26)(&|%26)+\");", "modifier": "private static final", "type": "Pattern", "declarator": "REGEX_REDUNDANT_AND = Pattern.compile(\"(&|%26)(&|%26)+\")", "var_name": "REGEX_REDUNDANT_AND"}], "methods": [{"identifier": "getPreferredCharset", "parameters": "()", "modifiers": "public static", "return": "Charset", "signature": "Charset getPreferredCharset()", "full_signature": "public static Charset getPreferredCharset()", "class_method_signature": "StringUtils.getPreferredCharset()", "testcase": false, "constructor": false}, {"identifier": "isUtf8Supported", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isUtf8Supported()", "full_signature": "public static boolean isUtf8Supported()", "class_method_signature": "StringUtils.isUtf8Supported()", "testcase": false, "constructor": false}, {"identifier": "getDefaultCharset", "parameters": "()", "modifiers": "protected static", "return": "Charset", "signature": "Charset getDefaultCharset()", "full_signature": "protected static Charset getDefaultCharset()", "class_method_signature": "StringUtils.getDefaultCharset()", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(final Iterable<? extends Object> iterable, final String delim)", "modifiers": "public static", "return": "String", "signature": "String join(final Iterable<? extends Object> iterable, final String delim)", "full_signature": "public static String join(final Iterable<? extends Object> iterable, final String delim)", "class_method_signature": "StringUtils.join(final Iterable<? extends Object> iterable, final String delim)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(final String delimiter, final Object... components)", "modifiers": "public static", "return": "String", "signature": "String join(final String delimiter, final Object... components)", "full_signature": "public static String join(final String delimiter, final Object... components)", "class_method_signature": "StringUtils.join(final String delimiter, final Object... components)", "testcase": false, "constructor": false}, {"identifier": "isNotBlank", "parameters": "(final String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotBlank(final String str)", "full_signature": "public static boolean isNotBlank(final String str)", "class_method_signature": "StringUtils.isNotBlank(final String str)", "testcase": false, "constructor": false}, {"identifier": "cleanupTags", "parameters": "(String tags)", "modifiers": "public static", "return": "String", "signature": "String cleanupTags(String tags)", "full_signature": "public static String cleanupTags(String tags)", "class_method_signature": "StringUtils.cleanupTags(String tags)", "testcase": false, "constructor": false}, {"identifier": "csvTagsToList", "parameters": "(final String tags)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> csvTagsToList(final String tags)", "full_signature": "public static List<String> csvTagsToList(final String tags)", "class_method_signature": "StringUtils.csvTagsToList(final String tags)", "testcase": false, "constructor": false}, {"identifier": "listToCsvTags", "parameters": "(final List<String> tagsList)", "modifiers": "public static", "return": "String", "signature": "String listToCsvTags(final List<String> tagsList)", "full_signature": "public static String listToCsvTags(final List<String> tagsList)", "class_method_signature": "StringUtils.listToCsvTags(final List<String> tagsList)", "testcase": false, "constructor": false}, {"identifier": "getExceptionStackInfo", "parameters": "(final Throwable e)", "modifiers": "public static", "return": "String", "signature": "String getExceptionStackInfo(final Throwable e)", "full_signature": "public static String getExceptionStackInfo(final Throwable e)", "class_method_signature": "StringUtils.getExceptionStackInfo(final Throwable e)", "testcase": false, "constructor": false}, {"identifier": "unicodeEscape", "parameters": "(final String s)", "modifiers": "public static", "return": "String", "signature": "String unicodeEscape(final String s)", "full_signature": "public static String unicodeEscape(final String s)", "class_method_signature": "StringUtils.unicodeEscape(final String s)", "testcase": false, "constructor": false}, {"identifier": "getMaskedPasswordForDisplay", "parameters": "(final String password)", "modifiers": "public static", "return": "String", "signature": "String getMaskedPasswordForDisplay(final String password)", "full_signature": "public static String getMaskedPasswordForDisplay(final String password)", "class_method_signature": "StringUtils.getMaskedPasswordForDisplay(final String password)", "testcase": false, "constructor": false}, {"identifier": "cleanString", "parameters": "(final String stringToClean)", "modifiers": "public static", "return": "String", "signature": "String cleanString(final String stringToClean)", "full_signature": "public static String cleanString(final String stringToClean)", "class_method_signature": "StringUtils.cleanString(final String stringToClean)", "testcase": false, "constructor": false}, {"identifier": "cleanDetails", "parameters": "(final String stringToClean, final String detailsIndexSting)", "modifiers": "public static", "return": "String", "signature": "String cleanDetails(final String stringToClean, final String detailsIndexSting)", "full_signature": "public static String cleanDetails(final String stringToClean, final String detailsIndexSting)", "class_method_signature": "StringUtils.cleanDetails(final String stringToClean, final String detailsIndexSting)", "testcase": false, "constructor": false}, {"identifier": "areTagsEqual", "parameters": "(final String tags1, final String tags2)", "modifiers": "public static", "return": "boolean", "signature": "boolean areTagsEqual(final String tags1, final String tags2)", "full_signature": "public static boolean areTagsEqual(final String tags1, final String tags2)", "class_method_signature": "StringUtils.areTagsEqual(final String tags1, final String tags2)", "testcase": false, "constructor": false}, {"identifier": "stripControlCharacters", "parameters": "(final String s)", "modifiers": "public static", "return": "String", "signature": "String stripControlCharacters(final String s)", "full_signature": "public static String stripControlCharacters(final String s)", "class_method_signature": "StringUtils.stripControlCharacters(final String s)", "testcase": false, "constructor": false}, {"identifier": "formatForOutput", "parameters": "(final String text, final int start, final int columns, final char separator)", "modifiers": "public static", "return": "int", "signature": "int formatForOutput(final String text, final int start, final int columns, final char separator)", "full_signature": "public static int formatForOutput(final String text, final int start, final int columns, final char separator)", "class_method_signature": "StringUtils.formatForOutput(final String text, final int start, final int columns, final char separator)", "testcase": false, "constructor": false}, {"identifier": "stringToMap", "parameters": "(final String s)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> stringToMap(final String s)", "full_signature": "public static Map<String, String> stringToMap(final String s)", "class_method_signature": "StringUtils.stringToMap(final String s)", "testcase": false, "constructor": false}, {"identifier": "mapToString", "parameters": "(final Map<String, String> map)", "modifiers": "public static", "return": "String", "signature": "String mapToString(final Map<String, String> map)", "full_signature": "public static String mapToString(final Map<String, String> map)", "class_method_signature": "StringUtils.mapToString(final Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "applyPagination", "parameters": "(final List<T> originalList, final Long startIndex, final Long pageSizeVal)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> applyPagination(final List<T> originalList, final Long startIndex, final Long pageSizeVal)", "full_signature": "public static List<T> applyPagination(final List<T> originalList, final Long startIndex, final Long pageSizeVal)", "class_method_signature": "StringUtils.applyPagination(final List<T> originalList, final Long startIndex, final Long pageSizeVal)", "testcase": false, "constructor": false}, {"identifier": "partitionList", "parameters": "(final List<T> originalList, final int chunkSize)", "modifiers": "private static", "return": "List<List<T>>", "signature": "List<List<T>> partitionList(final List<T> originalList, final int chunkSize)", "full_signature": "private static List<List<T>> partitionList(final List<T> originalList, final int chunkSize)", "class_method_signature": "StringUtils.partitionList(final List<T> originalList, final int chunkSize)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/com/cloud/utils/StringUtils.java"}, "focal_method": {"identifier": "cleanString", "parameters": "(final String stringToClean)", "modifiers": "public static", "return": "String", "body": "public static String cleanString(final String stringToClean) {\n        String cleanResult = \"\";\n        if (stringToClean != null) {\n            cleanResult = REGEX_PASSWORD_QUERYSTRING.matcher(stringToClean).replaceAll(\"\");\n            cleanResult = REGEX_PASSWORD_JSON.matcher(cleanResult).replaceAll(\"\");\n            final Matcher detailsMatcher = REGEX_PASSWORD_DETAILS.matcher(cleanResult);\n            while (detailsMatcher.find()) {\n                final Matcher detailsIndexMatcher = REGEX_PASSWORD_DETAILS_INDEX.matcher(detailsMatcher.group());\n                if (detailsIndexMatcher.find()) {\n                    cleanResult = cleanDetails(cleanResult, detailsIndexMatcher.group());\n                }\n            }\n        }\n        return cleanResult;\n    }", "signature": "String cleanString(final String stringToClean)", "full_signature": "public static String cleanString(final String stringToClean)", "class_method_signature": "StringUtils.cleanString(final String stringToClean)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "matcher", "replaceAll", "matcher", "matcher", "find", "matcher", "group", "find", "cleanDetails", "group"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}