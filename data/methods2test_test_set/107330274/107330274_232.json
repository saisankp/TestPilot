{"test_class": {"identifier": "ReservationUsageCalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JobDescriptor<BatchJobExt> JOB_DESCRIPTOR = oneTaskBatchJobDescriptor().but(JobFunctions.ofBatchSize(2));", "modifier": "private static final", "type": "JobDescriptor<BatchJobExt>", "declarator": "JOB_DESCRIPTOR = oneTaskBatchJobDescriptor().but(JobFunctions.ofBatchSize(2))", "var_name": "JOB_DESCRIPTOR"}, {"original_string": "private static final ContainerResources CONTAINER_RESOURCES = JOB_DESCRIPTOR.getContainer().getContainerResources();", "modifier": "private static final", "type": "ContainerResources", "declarator": "CONTAINER_RESOURCES = JOB_DESCRIPTOR.getContainer().getContainerResources()", "var_name": "CONTAINER_RESOURCES"}, {"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.internal();", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.internal()", "var_name": "titusRuntime"}, {"original_string": "private final JobComponentStub jobComponentStub = new JobComponentStub(titusRuntime);", "modifier": "private final", "type": "JobComponentStub", "declarator": "jobComponentStub = new JobComponentStub(titusRuntime)", "var_name": "jobComponentStub"}, {"original_string": "private ApplicationSlaManagementService capacityManagementService = mock(ApplicationSlaManagementService.class);", "modifier": "private", "type": "ApplicationSlaManagementService", "declarator": "capacityManagementService = mock(ApplicationSlaManagementService.class)", "var_name": "capacityManagementService"}, {"original_string": "private final ReservationUsageCalculator calculator = new ReservationUsageCalculator(\n            jobComponentStub.getJobOperations(),\n            capacityManagementService\n    );", "modifier": "private final", "type": "ReservationUsageCalculator", "declarator": "calculator = new ReservationUsageCalculator(\n            jobComponentStub.getJobOperations(),\n            capacityManagementService\n    )", "var_name": "calculator"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/endpoint/v2/rest/ReservationUsageCalculatorTest.java"}, "test_case": {"identifier": "testBuildUsage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildUsage() {\n        Map<String, ReservationUsage> usage = calculator.buildUsage();\n\n        ReservationUsage cg1Usage = usage.get(\"cg1\");\n        ReservationUsage cg2Usage = usage.get(\"cg2\");\n\n        assertThat(cg1Usage).isNotNull();\n        assertThat(cg2Usage).isNotNull();\n\n        assertThat(cg1Usage.getCpu()).isEqualTo(CONTAINER_RESOURCES.getCpu() * 4);\n        assertThat(cg1Usage.getCpu() * 2).isEqualTo(cg2Usage.getCpu());\n\n        assertThat(cg1Usage.getMemoryMB()).isEqualTo(CONTAINER_RESOURCES.getMemoryMB() * 4);\n        assertThat(cg1Usage.getMemoryMB() * 2).isEqualTo(cg2Usage.getMemoryMB());\n\n        assertThat(cg1Usage.getDiskMB()).isEqualTo(CONTAINER_RESOURCES.getDiskMB() * 4);\n        assertThat(cg1Usage.getDiskMB() * 2).isEqualTo(cg2Usage.getDiskMB());\n\n        assertThat(cg1Usage.getNetworkMbs()).isEqualTo(CONTAINER_RESOURCES.getNetworkMbps() * 4);\n        assertThat(cg1Usage.getNetworkMbs() * 2).isEqualTo(cg2Usage.getNetworkMbs());\n    }", "signature": "void testBuildUsage()", "full_signature": "@Test public void testBuildUsage()", "class_method_signature": "ReservationUsageCalculatorTest.testBuildUsage()", "testcase": true, "constructor": false, "invocations": ["buildUsage", "get", "get", "isNotNull", "assertThat", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getCpu", "getCpu", "isEqualTo", "assertThat", "getCpu", "getCpu", "isEqualTo", "assertThat", "getMemoryMB", "getMemoryMB", "isEqualTo", "assertThat", "getMemoryMB", "getMemoryMB", "isEqualTo", "assertThat", "getDiskMB", "getDiskMB", "isEqualTo", "assertThat", "getDiskMB", "getDiskMB", "isEqualTo", "assertThat", "getNetworkMbs", "getNetworkMbps", "isEqualTo", "assertThat", "getNetworkMbs", "getNetworkMbs"]}, "focal_class": {"identifier": "ReservationUsageCalculator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ReadOnlyJobOperations jobOperations;", "modifier": "private final", "type": "ReadOnlyJobOperations", "declarator": "jobOperations", "var_name": "jobOperations"}, {"original_string": "private final ApplicationSlaManagementService capacityManagementService;", "modifier": "private final", "type": "ApplicationSlaManagementService", "declarator": "capacityManagementService", "var_name": "capacityManagementService"}], "methods": [{"identifier": "ReservationUsageCalculator", "parameters": "(ReadOnlyJobOperations jobOperations,\n                                      ApplicationSlaManagementService capacityManagementService)", "modifiers": "@Inject public", "return": "", "signature": " ReservationUsageCalculator(ReadOnlyJobOperations jobOperations,\n                                      ApplicationSlaManagementService capacityManagementService)", "full_signature": "@Inject public  ReservationUsageCalculator(ReadOnlyJobOperations jobOperations,\n                                      ApplicationSlaManagementService capacityManagementService)", "class_method_signature": "ReservationUsageCalculator.ReservationUsageCalculator(ReadOnlyJobOperations jobOperations,\n                                      ApplicationSlaManagementService capacityManagementService)", "testcase": false, "constructor": true}, {"identifier": "buildUsage", "parameters": "()", "modifiers": "public", "return": "Map<String, ReservationUsage>", "signature": "Map<String, ReservationUsage> buildUsage()", "full_signature": "public Map<String, ReservationUsage> buildUsage()", "class_method_signature": "ReservationUsageCalculator.buildUsage()", "testcase": false, "constructor": false}, {"identifier": "buildCapacityGroupUsage", "parameters": "(String capacityGroupName)", "modifiers": "public", "return": "ReservationUsage", "signature": "ReservationUsage buildCapacityGroupUsage(String capacityGroupName)", "full_signature": "public ReservationUsage buildCapacityGroupUsage(String capacityGroupName)", "class_method_signature": "ReservationUsageCalculator.buildCapacityGroupUsage(String capacityGroupName)", "testcase": false, "constructor": false}, {"identifier": "processJob", "parameters": "(ResourceAccumulator accumulator, Pair<Job, List<Task>> jobAndTasks)", "modifiers": "private", "return": "void", "signature": "void processJob(ResourceAccumulator accumulator, Pair<Job, List<Task>> jobAndTasks)", "full_signature": "private void processJob(ResourceAccumulator accumulator, Pair<Job, List<Task>> jobAndTasks)", "class_method_signature": "ReservationUsageCalculator.processJob(ResourceAccumulator accumulator, Pair<Job, List<Task>> jobAndTasks)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/endpoint/v2/rest/ReservationUsageCalculator.java"}, "focal_method": {"identifier": "buildUsage", "parameters": "()", "modifiers": "public", "return": "Map<String, ReservationUsage>", "body": "public Map<String, ReservationUsage> buildUsage() {\n        Map<String, ResourceAccumulator> accumulatorMap = new HashMap<>();\n\n        List<Pair<Job, List<Task>>> jobsAndTasks = jobOperations.getJobsAndTasks();\n\n        Set<String> capacityGroupNames = capacityManagementService.getApplicationSLAs().stream()\n                .map(ApplicationSLA::getAppName)\n                .collect(Collectors.toSet());\n\n        for (Pair<Job, List<Task>> jobAndTasks : jobsAndTasks) {\n            Job job = jobAndTasks.getLeft();\n\n            String capacityGroup = capacityGroupNames.contains(job.getJobDescriptor().getCapacityGroup())\n                    ? job.getJobDescriptor().getCapacityGroup()\n                    : ApplicationSlaManagementService.DEFAULT_APPLICATION;\n\n            ResourceAccumulator accumulator = accumulatorMap.computeIfAbsent(\n                    capacityGroup,\n                    cp -> new ResourceAccumulator()\n            );\n            processJob(accumulator, jobAndTasks);\n        }\n\n        Map<String, ReservationUsage> result = new HashMap<>();\n        accumulatorMap.forEach((capacityGroup, accumulator) -> result.put(capacityGroup, accumulator.toReservationUsage()));\n\n        capacityManagementService.getApplicationSLAs().forEach(capacityGroup -> {\n            if (!result.containsKey(capacityGroup.getAppName())) {\n                result.put(capacityGroup.getAppName(), ReservationUsage.none());\n            }\n        });\n\n        return result;\n    }", "signature": "Map<String, ReservationUsage> buildUsage()", "full_signature": "public Map<String, ReservationUsage> buildUsage()", "class_method_signature": "ReservationUsageCalculator.buildUsage()", "testcase": false, "constructor": false, "invocations": ["getJobsAndTasks", "collect", "map", "stream", "getApplicationSLAs", "toSet", "getLeft", "contains", "getCapacityGroup", "getJobDescriptor", "getCapacityGroup", "getJobDescriptor", "computeIfAbsent", "processJob", "forEach", "put", "toReservationUsage", "forEach", "getApplicationSLAs", "containsKey", "getAppName", "put", "getAppName", "none"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}