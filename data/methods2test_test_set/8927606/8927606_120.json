{"test_class": {"identifier": "XmlWriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/nl/nn/adapterframework/xml/XmlWriterTest.java"}, "test_case": {"identifier": "testBasic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBasic() throws Exception {\n\t\tString input    = TestFileUtils.getTestFile(\"/Xslt/AnyXml/in.xml\");\n\t\tString expected = input;\n\t\tXmlWriter xmlWriter = new XmlWriter();\n\t\tXmlUtils.parseXml(input, xmlWriter);\n\t\tassertEquals(expected,xmlWriter.toString());\n\t}", "signature": "void testBasic()", "full_signature": "@Test public void testBasic()", "class_method_signature": "XmlWriterTest.testBasic()", "testcase": true, "constructor": false, "invocations": ["getTestFile", "parseXml", "assertEquals", "toString"]}, "focal_class": {"identifier": "XmlWriter", "superclass": "extends DefaultHandler", "interfaces": "implements LexicalHandler", "fields": [{"original_string": "protected Logger log = LogUtil.getLogger(this);", "modifier": "protected", "type": "Logger", "declarator": "log = LogUtil.getLogger(this)", "var_name": "log"}, {"original_string": "private final String DISABLE_OUTPUT_ESCAPING=\"javax.xml.transform.disable-output-escaping\";", "modifier": "private final", "type": "String", "declarator": "DISABLE_OUTPUT_ESCAPING=\"javax.xml.transform.disable-output-escaping\"", "var_name": "DISABLE_OUTPUT_ESCAPING"}, {"original_string": "private final String ENABLE_OUTPUT_ESCAPING=\"javax.xml.transform.enable-output-escaping\";", "modifier": "private final", "type": "String", "declarator": "ENABLE_OUTPUT_ESCAPING=\"javax.xml.transform.enable-output-escaping\"", "var_name": "ENABLE_OUTPUT_ESCAPING"}, {"original_string": "private Writer writer;", "modifier": "private", "type": "Writer", "declarator": "writer", "var_name": "writer"}, {"original_string": "private boolean includeXmlDeclaration=false;", "modifier": "private", "type": "boolean", "declarator": "includeXmlDeclaration=false", "var_name": "includeXmlDeclaration"}, {"original_string": "private boolean newlineAfterXmlDeclaration=false;", "modifier": "private", "type": "boolean", "declarator": "newlineAfterXmlDeclaration=false", "var_name": "newlineAfterXmlDeclaration"}, {"original_string": "private boolean includeComments=true;", "modifier": "private", "type": "boolean", "declarator": "includeComments=true", "var_name": "includeComments"}, {"original_string": "private boolean textMode=false;", "modifier": "private", "type": "boolean", "declarator": "textMode=false", "var_name": "textMode"}, {"original_string": "private boolean outputEscaping=true;", "modifier": "private", "type": "boolean", "declarator": "outputEscaping=true", "var_name": "outputEscaping"}, {"original_string": "private int elementLevel=0;", "modifier": "private", "type": "int", "declarator": "elementLevel=0", "var_name": "elementLevel"}, {"original_string": "private boolean elementJustStarted;", "modifier": "private", "type": "boolean", "declarator": "elementJustStarted", "var_name": "elementJustStarted"}, {"original_string": "private boolean inCdata;", "modifier": "private", "type": "boolean", "declarator": "inCdata", "var_name": "inCdata"}, {"original_string": "private List<PrefixMapping> namespaceDefinitions=new ArrayList<>();", "modifier": "private", "type": "List<PrefixMapping>", "declarator": "namespaceDefinitions=new ArrayList<>()", "var_name": "namespaceDefinitions"}], "methods": [{"identifier": "XmlWriter", "parameters": "()", "modifiers": "public", "return": "", "signature": " XmlWriter()", "full_signature": "public  XmlWriter()", "class_method_signature": "XmlWriter.XmlWriter()", "testcase": false, "constructor": true}, {"identifier": "XmlWriter", "parameters": "(Writer writer)", "modifiers": "public", "return": "", "signature": " XmlWriter(Writer writer)", "full_signature": "public  XmlWriter(Writer writer)", "class_method_signature": "XmlWriter.XmlWriter(Writer writer)", "testcase": false, "constructor": true}, {"identifier": "XmlWriter", "parameters": "(OutputStream stream)", "modifiers": "public", "return": "", "signature": " XmlWriter(OutputStream stream)", "full_signature": "public  XmlWriter(OutputStream stream)", "class_method_signature": "XmlWriter.XmlWriter(OutputStream stream)", "testcase": false, "constructor": true}, {"identifier": "startDocument", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startDocument()", "full_signature": "@Override public void startDocument()", "class_method_signature": "XmlWriter.startDocument()", "testcase": false, "constructor": false}, {"identifier": "endDocument", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endDocument()", "full_signature": "@Override public void endDocument()", "class_method_signature": "XmlWriter.endDocument()", "testcase": false, "constructor": false}, {"identifier": "writePrefixMapping", "parameters": "(PrefixMapping prefixMapping)", "modifiers": "private", "return": "void", "signature": "void writePrefixMapping(PrefixMapping prefixMapping)", "full_signature": "private void writePrefixMapping(PrefixMapping prefixMapping)", "class_method_signature": "XmlWriter.writePrefixMapping(PrefixMapping prefixMapping)", "testcase": false, "constructor": false}, {"identifier": "storePrefixMapping", "parameters": "(List<PrefixMapping> prefixMappingList, String prefix, String uri)", "modifiers": "private", "return": "void", "signature": "void storePrefixMapping(List<PrefixMapping> prefixMappingList, String prefix, String uri)", "full_signature": "private void storePrefixMapping(List<PrefixMapping> prefixMappingList, String prefix, String uri)", "class_method_signature": "XmlWriter.storePrefixMapping(List<PrefixMapping> prefixMappingList, String prefix, String uri)", "testcase": false, "constructor": false}, {"identifier": "startPrefixMapping", "parameters": "(String prefix, String uri)", "modifiers": "@Override public", "return": "void", "signature": "void startPrefixMapping(String prefix, String uri)", "full_signature": "@Override public void startPrefixMapping(String prefix, String uri)", "class_method_signature": "XmlWriter.startPrefixMapping(String prefix, String uri)", "testcase": false, "constructor": false}, {"identifier": "startElement", "parameters": "(String uri, String localName, String qName, Attributes attributes)", "modifiers": "@Override public", "return": "void", "signature": "void startElement(String uri, String localName, String qName, Attributes attributes)", "full_signature": "@Override public void startElement(String uri, String localName, String qName, Attributes attributes)", "class_method_signature": "XmlWriter.startElement(String uri, String localName, String qName, Attributes attributes)", "testcase": false, "constructor": false}, {"identifier": "endElement", "parameters": "(String uri, String localName, String qName)", "modifiers": "@Override public", "return": "void", "signature": "void endElement(String uri, String localName, String qName)", "full_signature": "@Override public void endElement(String uri, String localName, String qName)", "class_method_signature": "XmlWriter.endElement(String uri, String localName, String qName)", "testcase": false, "constructor": false}, {"identifier": "characters", "parameters": "(char[] ch, int start, int length)", "modifiers": "@Override public", "return": "void", "signature": "void characters(char[] ch, int start, int length)", "full_signature": "@Override public void characters(char[] ch, int start, int length)", "class_method_signature": "XmlWriter.characters(char[] ch, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "comment", "parameters": "(char[] ch, int start, int length)", "modifiers": "@Override public", "return": "void", "signature": "void comment(char[] ch, int start, int length)", "full_signature": "@Override public void comment(char[] ch, int start, int length)", "class_method_signature": "XmlWriter.comment(char[] ch, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "processingInstruction", "parameters": "(String target, String data)", "modifiers": "@Override public", "return": "void", "signature": "void processingInstruction(String target, String data)", "full_signature": "@Override public void processingInstruction(String target, String data)", "class_method_signature": "XmlWriter.processingInstruction(String target, String data)", "testcase": false, "constructor": false}, {"identifier": "startDTD", "parameters": "(String arg0, String arg1, String arg2)", "modifiers": "@Override public", "return": "void", "signature": "void startDTD(String arg0, String arg1, String arg2)", "full_signature": "@Override public void startDTD(String arg0, String arg1, String arg2)", "class_method_signature": "XmlWriter.startDTD(String arg0, String arg1, String arg2)", "testcase": false, "constructor": false}, {"identifier": "endDTD", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endDTD()", "full_signature": "@Override public void endDTD()", "class_method_signature": "XmlWriter.endDTD()", "testcase": false, "constructor": false}, {"identifier": "startCDATA", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startCDATA()", "full_signature": "@Override public void startCDATA()", "class_method_signature": "XmlWriter.startCDATA()", "testcase": false, "constructor": false}, {"identifier": "endCDATA", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endCDATA()", "full_signature": "@Override public void endCDATA()", "class_method_signature": "XmlWriter.endCDATA()", "testcase": false, "constructor": false}, {"identifier": "startEntity", "parameters": "(String arg0)", "modifiers": "@Override public", "return": "void", "signature": "void startEntity(String arg0)", "full_signature": "@Override public void startEntity(String arg0)", "class_method_signature": "XmlWriter.startEntity(String arg0)", "testcase": false, "constructor": false}, {"identifier": "endEntity", "parameters": "(String arg0)", "modifiers": "@Override public", "return": "void", "signature": "void endEntity(String arg0)", "full_signature": "@Override public void endEntity(String arg0)", "class_method_signature": "XmlWriter.endEntity(String arg0)", "testcase": false, "constructor": false}, {"identifier": "getWriter", "parameters": "()", "modifiers": "public", "return": "Writer", "signature": "Writer getWriter()", "full_signature": "public Writer getWriter()", "class_method_signature": "XmlWriter.getWriter()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "XmlWriter.toString()", "testcase": false, "constructor": false}, {"identifier": "setIncludeXmlDeclaration", "parameters": "(boolean includeXmlDeclaration)", "modifiers": "public", "return": "void", "signature": "void setIncludeXmlDeclaration(boolean includeXmlDeclaration)", "full_signature": "public void setIncludeXmlDeclaration(boolean includeXmlDeclaration)", "class_method_signature": "XmlWriter.setIncludeXmlDeclaration(boolean includeXmlDeclaration)", "testcase": false, "constructor": false}, {"identifier": "setNewlineAfterXmlDeclaration", "parameters": "(boolean newlineAfterXmlDeclaration)", "modifiers": "public", "return": "void", "signature": "void setNewlineAfterXmlDeclaration(boolean newlineAfterXmlDeclaration)", "full_signature": "public void setNewlineAfterXmlDeclaration(boolean newlineAfterXmlDeclaration)", "class_method_signature": "XmlWriter.setNewlineAfterXmlDeclaration(boolean newlineAfterXmlDeclaration)", "testcase": false, "constructor": false}, {"identifier": "setIncludeComments", "parameters": "(boolean includeComments)", "modifiers": "public", "return": "void", "signature": "void setIncludeComments(boolean includeComments)", "full_signature": "public void setIncludeComments(boolean includeComments)", "class_method_signature": "XmlWriter.setIncludeComments(boolean includeComments)", "testcase": false, "constructor": false}, {"identifier": "setTextMode", "parameters": "(boolean textMode)", "modifiers": "public", "return": "void", "signature": "void setTextMode(boolean textMode)", "full_signature": "public void setTextMode(boolean textMode)", "class_method_signature": "XmlWriter.setTextMode(boolean textMode)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/xml/XmlWriter.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String toString() {\n\t\treturn writer.toString();\n\t}", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "XmlWriter.toString()", "testcase": false, "constructor": false, "invocations": ["toString"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}