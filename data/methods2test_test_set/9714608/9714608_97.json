{"test_class": {"identifier": "NaturalOrderComparatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/util/src/test/java/org/arakhne/afc/util/NaturalOrderComparatorTest.java"}, "test_case": {"identifier": "compare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void compare() {\n\t\tNaturalOrderComparator<Object> comparator = new NaturalOrderComparator<>();\n\t\t\n\t\tInteger o1 = 1;\n\t\tInteger o2 = 2;\n\t\tInteger o3 = 3;\n\t\tInteger o4 = 10;\n\t\tFloat v1 = 3f;\n\t\tDouble v2 = 3.;\n\t\tString v3 = \"3\";  //$NON-NLS-1$\n\t\tObject v4 = new Object();\n\t\t\n\t\tassertEquals(0, comparator.compare(o1, o1));\n\t\tassertEquals(-1, comparator.compare(o1, o2));\n\t\tassertEquals(-1, comparator.compare(o1, o3));\n\t\tassertEquals(-1, comparator.compare(o1, o4));\n\t\ttry {\n\t\t\tcomparator.compare(o1, v1);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t\ttry {\n\t\t\tcomparator.compare(o1, v2);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t\ttry {\n\t\t\tcomparator.compare(o1, v3);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t\ttry {\n\t\t\tcomparator.compare(o1, v4);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\n\t\tassertEquals(1, comparator.compare(o2, o1));\n\t\tassertEquals(0, comparator.compare(o2, o2));\n\t\tassertEquals(-1, comparator.compare(o2, o3));\n\t\tassertEquals(-1, comparator.compare(o2, o4));\n\t\ttry {\n\t\t\tcomparator.compare(o2, v1);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t\ttry {\n\t\t\tcomparator.compare(o2, v2);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t\ttry {\n\t\t\tcomparator.compare(o2, v3);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t\ttry {\n\t\t\tcomparator.compare(o2, v4);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\n\t\n\t\tassertEquals(1, comparator.compare(o3, o1));\n\t\tassertEquals(1, comparator.compare(o3, o2));\n\t\tassertEquals(0, comparator.compare(o3, o3));\n\t\tassertEquals(-1, comparator.compare(o3, o4));\n\t\ttry {\n\t\t\tcomparator.compare(o3, v1);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t\ttry {\n\t\t\tcomparator.compare(o3, v2);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t\ttry {\n\t\t\tcomparator.compare(o3, v3);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t\ttry {\n\t\t\tcomparator.compare(o3, v4);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\n\t\n\t\tassertEquals(1, comparator.compare(o4, o1));\n\t\tassertEquals(1, comparator.compare(o4, o2));\n\t\tassertEquals(1, comparator.compare(o4, o3));\n\t\tassertEquals(0, comparator.compare(o4, o4));\n\t\ttry {\n\t\t\tcomparator.compare(o4, v1);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t\ttry {\n\t\t\tcomparator.compare(o4, v2);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t\ttry {\n\t\t\tcomparator.compare(o4, v3);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t\ttry {\n\t\t\tcomparator.compare(o4, v4);\n\t\t\tfail(\"Expecting UnsupportedNaturalOrderException\");  //$NON-NLS-1$\n\t\t}\n\t\tcatch(UnsupportedNaturalOrderException exception) {\n\t\t\t// expected exception\n\t\t}\n\t}", "signature": "void compare()", "full_signature": "@Test public void compare()", "class_method_signature": "NaturalOrderComparatorTest.compare()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "compare", "fail", "compare", "fail", "compare", "fail", "compare", "fail", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "compare", "fail", "compare", "fail", "compare", "fail", "compare", "fail", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "compare", "fail", "compare", "fail", "compare", "fail", "compare", "fail", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "compare", "fail", "compare", "fail", "compare", "fail", "compare", "fail"]}, "focal_class": {"identifier": "NaturalOrderComparator", "superclass": "", "interfaces": "implements Comparator<OBJECT>", "fields": [], "methods": [{"identifier": "compare", "parameters": "(OBJECT o1, OBJECT o2)", "modifiers": "@Pure @Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public", "return": "int", "signature": "int compare(OBJECT o1, OBJECT o2)", "full_signature": "@Pure @Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public int compare(OBJECT o1, OBJECT o2)", "class_method_signature": "NaturalOrderComparator.compare(OBJECT o1, OBJECT o2)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/org/arakhne/afc/util/NaturalOrderComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(OBJECT o1, OBJECT o2)", "modifiers": "@Pure @Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public", "return": "int", "body": "@Pure\n\t@Override\n\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\tpublic int compare(OBJECT o1, OBJECT o2) {\n\t\tif (o1 == o2) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (o1 == null) {\n\t\t\treturn Integer.MIN_VALUE;\n\t\t}\n\t\tif (o2 == null) {\n\t\t\treturn Integer.MAX_VALUE;\n\t\t}\n\t\ttry {\n\t\t\treturn ((Comparable) o1).compareTo(o2);\n\t\t} catch (Throwable exception) {\n\t\t\t//\n\t\t}\n\t\ttry {\n\t\t\treturn -((Comparable) o2).compareTo(o1);\n\t\t} catch (Throwable exception) {\n\t\t\t//\n\t\t}\n\t\tthrow new UnsupportedNaturalOrderException(o1);\n\t}", "signature": "int compare(OBJECT o1, OBJECT o2)", "full_signature": "@Pure @Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public int compare(OBJECT o1, OBJECT o2)", "class_method_signature": "NaturalOrderComparator.compare(OBJECT o1, OBJECT o2)", "testcase": false, "constructor": false, "invocations": ["compareTo", "compareTo"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}