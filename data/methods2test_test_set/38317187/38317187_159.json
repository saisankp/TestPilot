{"test_class": {"identifier": "LabelBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LabelBuilder builder;", "modifier": "private", "type": "LabelBuilder", "declarator": "builder", "var_name": "builder"}], "file": "ballroom/src/test/java/org/jboss/hal/ballroom/LabelBuilderTest.java"}, "test_case": {"identifier": "enumeration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void enumeration() throws Exception {\n        assertEquals(\"'First'\", builder.enumeration(singletonList(\"first\"), \"and\"));\n        assertEquals(\"'First' or 'Second'\", builder.enumeration(asList(\"first\", \"second\"), \"or\"));\n        assertEquals(\"'First', 'Second' and / or 'Third'\",\n                builder.enumeration(asList(\"first\", \"second\", \"third\"), \"and / or\"));\n    }", "signature": "void enumeration()", "full_signature": "@Test public void enumeration()", "class_method_signature": "LabelBuilderTest.enumeration()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "enumeration", "singletonList", "assertEquals", "enumeration", "asList", "assertEquals", "enumeration", "asList"]}, "focal_class": {"identifier": "LabelBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String QUOTE = \"'\";", "modifier": "private static final", "type": "String", "declarator": "QUOTE = \"'\"", "var_name": "QUOTE"}, {"original_string": "private static final String SPACE = \" \";", "modifier": "private static final", "type": "String", "declarator": "SPACE = \" \"", "var_name": "SPACE"}, {"original_string": "@SuppressWarnings(\"HardCodedStringLiteral\")\n    private final ImmutableMap<String, String> SPECIALS = ImmutableMap.<String, String>builder()\n            .put(\"ajp\", \"AJP\")\n            .put(\"ccm\", \"CCM\")\n            .put(\"dn\", \"DN\")\n            .put(\"ear\", \"EAR\")\n            .put(\"ee\", \"EE\")\n            .put(\"ejb\", \"EJB\")\n            .put(\"ejb3\", \"EJB3\")\n            .put(\"giop\", \"GIOP\")\n            .put(\"gss\", \"GSS\")\n            .put(\"ha\", \"HA\")\n            .put(\"http\", \"HTTP\")\n            .put(\"https\", \"HTTPS\")\n            .put(\"http2\", \"HTTP/2\")\n            .put(\"id\", \"ID\")\n            .put(\"iiop\", \"IIOP\")\n            .put(\"iiop-ssl\", \"IIOP SSL\")\n            .put(\"io\", \"IO\")\n            .put(\"ip\", \"IP\")\n            .put(\"jaas\", \"JAAS\")\n            .put(\"jacc\", \"JACC\")\n            .put(\"jaspi\", \"JASPI\")\n            .put(\"jaxrs\", \"JAX-RS\")\n            .put(\"jboss\", \"JBoss\")\n            .put(\"jdbc\", \"JDBC\")\n            .put(\"jca\", \"JCA\")\n            .put(\"jdr\", \"JDA\")\n            .put(\"jgroups\", \"JGroups\")\n            .put(\"jms\", \"JMS\")\n            .put(\"jmx\", \"JMX\")\n            .put(\"jndi\", \"JNDI\")\n            .put(\"jpa\", \"JPA\")\n            .put(\"jsf\", \"JSF\")\n            .put(\"json\", \"JSON\")\n            .put(\"jsse\", \"JSSE\")\n            .put(\"jsr\", \"JSR\")\n            .put(\"jta\", \"JTA\")\n            .put(\"jts\", \"JTS\")\n            .put(\"jvm\", \"JVM\")\n            .put(\"jwt\", \"JWT\")\n            .put(\"mcp\", \"MCP\")\n            .put(\"mdb\", \"MDB\")\n            .put(\"mbean\", \"MBean\")\n            .put(\"microprofile\", \"MicroProfile\")\n            .put(\"oauth2\", \"OAuth 2\")\n            .put(\"otp\", \"OTP\")\n            .put(\"rdn\", \"RDN\")\n            .put(\"sar\", \"SAR\")\n            .put(\"sasl\", \"SASL\")\n            .put(\"sfsb\", \"SFSB\")\n            .put(\"slsb\", \"SLSB\")\n            .put(\"sni\", \"SNI\")\n            .put(\"sql\", \"SQL\")\n            .put(\"ssl\", \"SSL\")\n            .put(\"tcp\", \"TCP\")\n            .put(\"tls\", \"TLS\")\n            .put(\"ttl\", \"TTL\")\n            .put(\"tx\", \"TX\")\n            .put(\"udp\", \"UDP\")\n            .put(\"uri\", \"URI\")\n            .put(\"url\", \"URL\")\n            .put(\"uuid\", \"UUID\")\n            .put(\"vm\", \"VM\")\n            .put(\"xa\", \"XA\")\n            .put(\"wsdl\", \"WSDL\")\n            .build();", "modifier": "@SuppressWarnings(\"HardCodedStringLiteral\")\n    private final", "type": "ImmutableMap<String, String>", "declarator": "SPECIALS = ImmutableMap.<String, String>builder()\n            .put(\"ajp\", \"AJP\")\n            .put(\"ccm\", \"CCM\")\n            .put(\"dn\", \"DN\")\n            .put(\"ear\", \"EAR\")\n            .put(\"ee\", \"EE\")\n            .put(\"ejb\", \"EJB\")\n            .put(\"ejb3\", \"EJB3\")\n            .put(\"giop\", \"GIOP\")\n            .put(\"gss\", \"GSS\")\n            .put(\"ha\", \"HA\")\n            .put(\"http\", \"HTTP\")\n            .put(\"https\", \"HTTPS\")\n            .put(\"http2\", \"HTTP/2\")\n            .put(\"id\", \"ID\")\n            .put(\"iiop\", \"IIOP\")\n            .put(\"iiop-ssl\", \"IIOP SSL\")\n            .put(\"io\", \"IO\")\n            .put(\"ip\", \"IP\")\n            .put(\"jaas\", \"JAAS\")\n            .put(\"jacc\", \"JACC\")\n            .put(\"jaspi\", \"JASPI\")\n            .put(\"jaxrs\", \"JAX-RS\")\n            .put(\"jboss\", \"JBoss\")\n            .put(\"jdbc\", \"JDBC\")\n            .put(\"jca\", \"JCA\")\n            .put(\"jdr\", \"JDA\")\n            .put(\"jgroups\", \"JGroups\")\n            .put(\"jms\", \"JMS\")\n            .put(\"jmx\", \"JMX\")\n            .put(\"jndi\", \"JNDI\")\n            .put(\"jpa\", \"JPA\")\n            .put(\"jsf\", \"JSF\")\n            .put(\"json\", \"JSON\")\n            .put(\"jsse\", \"JSSE\")\n            .put(\"jsr\", \"JSR\")\n            .put(\"jta\", \"JTA\")\n            .put(\"jts\", \"JTS\")\n            .put(\"jvm\", \"JVM\")\n            .put(\"jwt\", \"JWT\")\n            .put(\"mcp\", \"MCP\")\n            .put(\"mdb\", \"MDB\")\n            .put(\"mbean\", \"MBean\")\n            .put(\"microprofile\", \"MicroProfile\")\n            .put(\"oauth2\", \"OAuth 2\")\n            .put(\"otp\", \"OTP\")\n            .put(\"rdn\", \"RDN\")\n            .put(\"sar\", \"SAR\")\n            .put(\"sasl\", \"SASL\")\n            .put(\"sfsb\", \"SFSB\")\n            .put(\"slsb\", \"SLSB\")\n            .put(\"sni\", \"SNI\")\n            .put(\"sql\", \"SQL\")\n            .put(\"ssl\", \"SSL\")\n            .put(\"tcp\", \"TCP\")\n            .put(\"tls\", \"TLS\")\n            .put(\"ttl\", \"TTL\")\n            .put(\"tx\", \"TX\")\n            .put(\"udp\", \"UDP\")\n            .put(\"uri\", \"URI\")\n            .put(\"url\", \"URL\")\n            .put(\"uuid\", \"UUID\")\n            .put(\"vm\", \"VM\")\n            .put(\"xa\", \"XA\")\n            .put(\"wsdl\", \"WSDL\")\n            .build()", "var_name": "SPECIALS"}], "methods": [{"identifier": "label", "parameters": "(Property property)", "modifiers": "public", "return": "String", "signature": "String label(Property property)", "full_signature": "public String label(Property property)", "class_method_signature": "LabelBuilder.label(Property property)", "testcase": false, "constructor": false}, {"identifier": "label", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String label(String name)", "full_signature": "public String label(String name)", "class_method_signature": "LabelBuilder.label(String name)", "testcase": false, "constructor": false}, {"identifier": "enumeration", "parameters": "(Iterable<String> names, String conjunction)", "modifiers": "public", "return": "String", "signature": "String enumeration(Iterable<String> names, String conjunction)", "full_signature": "public String enumeration(Iterable<String> names, String conjunction)", "class_method_signature": "LabelBuilder.enumeration(Iterable<String> names, String conjunction)", "testcase": false, "constructor": false}, {"identifier": "replaceSpecial", "parameters": "(String label)", "modifiers": "private", "return": "String", "signature": "String replaceSpecial(String label)", "full_signature": "private String replaceSpecial(String label)", "class_method_signature": "LabelBuilder.replaceSpecial(String label)", "testcase": false, "constructor": false}, {"identifier": "capitalize", "parameters": "(String str)", "modifiers": "private", "return": "String", "signature": "String capitalize(String str)", "full_signature": "private String capitalize(String str)", "class_method_signature": "LabelBuilder.capitalize(String str)", "testcase": false, "constructor": false}], "file": "ballroom/src/main/java/org/jboss/hal/ballroom/LabelBuilder.java"}, "focal_method": {"identifier": "enumeration", "parameters": "(Iterable<String> names, String conjunction)", "modifiers": "public", "return": "String", "body": "public String enumeration(Iterable<String> names, String conjunction) {\n        String enumeration = \"\";\n        if (names != null && !Iterables.isEmpty(names)) {\n            int size = Iterables.size(names);\n            if (size == 1) {\n                return QUOTE + label(names.iterator().next()) + QUOTE;\n            } else if (size == 2) {\n                return QUOTE + label(Iterables.getFirst(names, \"\")) + QUOTE +\n                        SPACE + conjunction + SPACE +\n                        QUOTE + label(Iterables.getLast(names)) + QUOTE;\n            } else {\n                String last = Iterables.getLast(names);\n                LinkedList<String> allButLast = new LinkedList<>();\n                Iterables.addAll(allButLast, names);\n                allButLast.removeLast();\n                enumeration = allButLast.stream()\n                        .map(name -> QUOTE + label(name) + QUOTE)\n                        .collect(Collectors.joining(\", \"));\n                enumeration = enumeration + SPACE + conjunction + SPACE + QUOTE + label(last) + QUOTE;\n            }\n        }\n        return enumeration;\n    }", "signature": "String enumeration(Iterable<String> names, String conjunction)", "full_signature": "public String enumeration(Iterable<String> names, String conjunction)", "class_method_signature": "LabelBuilder.enumeration(Iterable<String> names, String conjunction)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "size", "label", "next", "iterator", "label", "getFirst", "label", "getLast", "getLast", "addAll", "removeLast", "collect", "map", "stream", "label", "joining", "label"]}, "repository": {"repo_id": 38317187, "url": "https://github.com/hal/console", "stars": 34, "created": "6/30/2015 3:26:19 PM +00:00", "updates": "2020-01-26T16:25:43+00:00", "fork": "False", "license": "licensed"}}