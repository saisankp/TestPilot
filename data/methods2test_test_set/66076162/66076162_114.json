{"test_class": {"identifier": "SearchServerInteractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SearchServerInteractor searchServerInteractor;", "modifier": "private", "type": "SearchServerInteractor", "declarator": "searchServerInteractor", "var_name": "searchServerInteractor"}, {"original_string": "@Mock private SearchServerService searchServerService;", "modifier": "@Mock private", "type": "SearchServerService", "declarator": "searchServerService", "var_name": "searchServerService"}, {"original_string": "@Mock private NotifyServerFoundService notifyServerFoundService;", "modifier": "@Mock private", "type": "NotifyServerFoundService", "declarator": "notifyServerFoundService", "var_name": "notifyServerFoundService"}, {"original_string": "@Mock private NetworkAddressValidator mockNetworkAddressValidator;", "modifier": "@Mock private", "type": "NetworkAddressValidator", "declarator": "mockNetworkAddressValidator", "var_name": "mockNetworkAddressValidator"}, {"original_string": "@Mock private ThreadExecutor mockThreadExecutor;", "modifier": "@Mock private", "type": "ThreadExecutor", "declarator": "mockThreadExecutor", "var_name": "mockThreadExecutor"}, {"original_string": "@Mock private PostExecutionThread mockPostExecutionThread;", "modifier": "@Mock private", "type": "PostExecutionThread", "declarator": "mockPostExecutionThread", "var_name": "mockPostExecutionThread"}], "file": "domain/src/test/java/com/remotecraft/app/domain/interactor/SearchServerInteractorTest.java"}, "test_case": {"identifier": "shoulNotReturnInvalidReactiveStreamWhenValidWorldFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shoulNotReturnInvalidReactiveStreamWhenValidWorldFound() throws Exception {\n    SearchServerInteractor.Params emptyParams = SearchServerInteractor.Params.empty();\n    when(searchServerService.searchServer()).thenReturn(getValidWorldReactiveStream());\n\n    Observable reactiveStream = searchServerInteractor.buildReactiveStream(emptyParams);\n\n    assertThat(reactiveStream).isNotNull();\n  }", "signature": "void shoulNotReturnInvalidReactiveStreamWhenValidWorldFound()", "full_signature": "@Test public void shoulNotReturnInvalidReactiveStreamWhenValidWorldFound()", "class_method_signature": "SearchServerInteractorTest.shoulNotReturnInvalidReactiveStreamWhenValidWorldFound()", "testcase": true, "constructor": false, "invocations": ["empty", "thenReturn", "when", "searchServer", "getValidWorldReactiveStream", "buildReactiveStream", "isNotNull", "assertThat"]}, "focal_class": {"identifier": "SearchServerInteractor", "superclass": "extends ObservableInteractor<Server, SearchServerInteractor.Params>", "interfaces": "", "fields": [{"original_string": "private final SearchServerService searchServerService;", "modifier": "private final", "type": "SearchServerService", "declarator": "searchServerService", "var_name": "searchServerService"}, {"original_string": "private final NotifyServerFoundService notifyServerFoundService;", "modifier": "private final", "type": "NotifyServerFoundService", "declarator": "notifyServerFoundService", "var_name": "notifyServerFoundService"}, {"original_string": "private final Validator<NetworkAddress> networkAddressValidator;", "modifier": "private final", "type": "Validator<NetworkAddress>", "declarator": "networkAddressValidator", "var_name": "networkAddressValidator"}, {"original_string": "private DisposableObserver domainObserver;", "modifier": "private", "type": "DisposableObserver", "declarator": "domainObserver", "var_name": "domainObserver"}, {"original_string": "private DisposableObserver presentationObserver;", "modifier": "private", "type": "DisposableObserver", "declarator": "presentationObserver", "var_name": "presentationObserver"}], "methods": [{"identifier": "SearchServerInteractor", "parameters": "(SearchServerService searchServerService,\n      NotifyServerFoundService notifyServerFoundService,\n      Validator<NetworkAddress> networkAddressValidator, ThreadExecutor threadExecutor,\n      PostExecutionThread postExecutionThread)", "modifiers": "public", "return": "", "signature": " SearchServerInteractor(SearchServerService searchServerService,\n      NotifyServerFoundService notifyServerFoundService,\n      Validator<NetworkAddress> networkAddressValidator, ThreadExecutor threadExecutor,\n      PostExecutionThread postExecutionThread)", "full_signature": "public  SearchServerInteractor(SearchServerService searchServerService,\n      NotifyServerFoundService notifyServerFoundService,\n      Validator<NetworkAddress> networkAddressValidator, ThreadExecutor threadExecutor,\n      PostExecutionThread postExecutionThread)", "class_method_signature": "SearchServerInteractor.SearchServerInteractor(SearchServerService searchServerService,\n      NotifyServerFoundService notifyServerFoundService,\n      Validator<NetworkAddress> networkAddressValidator, ThreadExecutor threadExecutor,\n      PostExecutionThread postExecutionThread)", "testcase": false, "constructor": true}, {"identifier": "buildReactiveStream", "parameters": "(Params params)", "modifiers": "@Override protected", "return": "Observable<Server>", "signature": "Observable<Server> buildReactiveStream(Params params)", "full_signature": "@Override protected Observable<Server> buildReactiveStream(Params params)", "class_method_signature": "SearchServerInteractor.buildReactiveStream(Params params)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(DisposableObserver observer, Params params)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void execute(DisposableObserver observer, Params params)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void execute(DisposableObserver observer, Params params)", "class_method_signature": "SearchServerInteractor.execute(DisposableObserver observer, Params params)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "SearchServerInteractor.dispose()", "testcase": false, "constructor": false}, {"identifier": "processFoundServer", "parameters": "(Server server)", "modifiers": "private", "return": "void", "signature": "void processFoundServer(Server server)", "full_signature": "private void processFoundServer(Server server)", "class_method_signature": "SearchServerInteractor.processFoundServer(Server server)", "testcase": false, "constructor": false}, {"identifier": "displayNotificationForServer", "parameters": "(Server server)", "modifiers": "private", "return": "void", "signature": "void displayNotificationForServer(Server server)", "full_signature": "private void displayNotificationForServer(Server server)", "class_method_signature": "SearchServerInteractor.displayNotificationForServer(Server server)", "testcase": false, "constructor": false}], "file": "domain/src/main/java/com/remotecraft/app/domain/interactor/SearchServerInteractor.java"}, "focal_method": {"identifier": "buildReactiveStream", "parameters": "(Params params)", "modifiers": "@Override protected", "return": "Observable<Server>", "body": "@Override\n  protected Observable<Server> buildReactiveStream(Params params) {\n    if (params == null) {\n      return Observable.error(new IllegalArgumentException(\"Params must be provided\"));\n    }\n\n    NetworkAddress networkAddress = params.networkAddress;\n    if (networkAddress != null && !networkAddressValidator.isValid(networkAddress)) {\n      return Observable.error(new IllegalArgumentException(\"Invalid IP Address\"));\n    }\n\n    return networkAddress != null ? searchServerService.searchServer(networkAddress)\n        : searchServerService.searchServer();\n  }", "signature": "Observable<Server> buildReactiveStream(Params params)", "full_signature": "@Override protected Observable<Server> buildReactiveStream(Params params)", "class_method_signature": "SearchServerInteractor.buildReactiveStream(Params params)", "testcase": false, "constructor": false, "invocations": ["error", "isValid", "error", "searchServer", "searchServer"]}, "repository": {"repo_id": 66076162, "url": "https://github.com/RemotecraftProject/RemotecraftApp", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 2502, "license": "licensed"}}