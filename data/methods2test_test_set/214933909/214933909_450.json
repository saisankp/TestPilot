{"test_class": {"identifier": "UserGroupDaoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    UserGroupDao userGroupDao;", "modifier": "@Autowired", "type": "UserGroupDao", "declarator": "userGroupDao", "var_name": "userGroupDao"}, {"original_string": "UserGroup userProject;", "modifier": "", "type": "UserGroup", "declarator": "userProject", "var_name": "userProject"}, {"original_string": "UserGroup userGroupModel;", "modifier": "", "type": "UserGroup", "declarator": "userGroupModel", "var_name": "userGroupModel"}, {"original_string": "Paging<UserGroup> paging;", "modifier": "", "type": "Paging<UserGroup>", "declarator": "paging", "var_name": "paging"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/dao/UserGroupDaoTest.java"}, "test_case": {"identifier": "getUserGroupByGroupIdAndUserId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getUserGroupByGroupIdAndUserId() throws Exception {\n        List<UserGroup> lsit = userGroupDao.getUserGroupByGroupIdAndUserId(1L, 1L);\n        System.out.println(\"getUserGroupByGroupIdAndUserId :-------> \" + lsit);\n        Assert.assertTrue(lsit.size() > 0);\n    }", "signature": "void getUserGroupByGroupIdAndUserId()", "full_signature": "@Test public void getUserGroupByGroupIdAndUserId()", "class_method_signature": "UserGroupDaoTest.getUserGroupByGroupIdAndUserId()", "testcase": true, "constructor": false, "invocations": ["getUserGroupByGroupIdAndUserId", "println", "assertTrue", "size"]}, "focal_class": {"identifier": "UserGroupDao", "superclass": "extends BaseDao", "interfaces": "", "fields": [], "methods": [{"identifier": "insertUserGroup", "parameters": "(UserGroup userGroup)", "modifiers": "public", "return": "Long", "signature": "Long insertUserGroup(UserGroup userGroup)", "full_signature": "public Long insertUserGroup(UserGroup userGroup)", "class_method_signature": "UserGroupDao.insertUserGroup(UserGroup userGroup)", "testcase": false, "constructor": false}, {"identifier": "insertUserGroup", "parameters": "(Long user_id, Long group_id, Integer role, Integer opt_user)", "modifiers": "public", "return": "Long", "signature": "Long insertUserGroup(Long user_id, Long group_id, Integer role, Integer opt_user)", "full_signature": "public Long insertUserGroup(Long user_id, Long group_id, Integer role, Integer opt_user)", "class_method_signature": "UserGroupDao.insertUserGroup(Long user_id, Long group_id, Integer role, Integer opt_user)", "testcase": false, "constructor": false}, {"identifier": "deleteUserFromGroup", "parameters": "(Long user_id, Long group_id)", "modifiers": "public", "return": "int", "signature": "int deleteUserFromGroup(Long user_id, Long group_id)", "full_signature": "public int deleteUserFromGroup(Long user_id, Long group_id)", "class_method_signature": "UserGroupDao.deleteUserFromGroup(Long user_id, Long group_id)", "testcase": false, "constructor": false}, {"identifier": "updateUserPersimion", "parameters": "(UserGroup userGroup)", "modifiers": "public", "return": "int", "signature": "int updateUserPersimion(UserGroup userGroup)", "full_signature": "public int updateUserPersimion(UserGroup userGroup)", "class_method_signature": "UserGroupDao.updateUserPersimion(UserGroup userGroup)", "testcase": false, "constructor": false}, {"identifier": "updateUserPersimion", "parameters": "(Long userId, Long groupId, Integer role, Integer opt_user)", "modifiers": "public", "return": "int", "signature": "int updateUserPersimion(Long userId, Long groupId, Integer role, Integer opt_user)", "full_signature": "public int updateUserPersimion(Long userId, Long groupId, Integer role, Integer opt_user)", "class_method_signature": "UserGroupDao.updateUserPersimion(Long userId, Long groupId, Integer role, Integer opt_user)", "testcase": false, "constructor": false}, {"identifier": "getUserListByLikeUserName", "parameters": "(String userName)", "modifiers": "public", "return": "List<MemberView>", "signature": "List<MemberView> getUserListByLikeUserName(String userName)", "full_signature": "public List<MemberView> getUserListByLikeUserName(String userName)", "class_method_signature": "UserGroupDao.getUserListByLikeUserName(String userName)", "testcase": false, "constructor": false}, {"identifier": "getUserGroupByUserId", "parameters": "(Long userId)", "modifiers": "public", "return": "List<UserGroup>", "signature": "List<UserGroup> getUserGroupByUserId(Long userId)", "full_signature": "public List<UserGroup> getUserGroupByUserId(Long userId)", "class_method_signature": "UserGroupDao.getUserGroupByUserId(Long userId)", "testcase": false, "constructor": false}, {"identifier": "getUserGroupByGroupId", "parameters": "(Long groupId)", "modifiers": "public", "return": "List<UserGroup>", "signature": "List<UserGroup> getUserGroupByGroupId(Long groupId)", "full_signature": "public List<UserGroup> getUserGroupByGroupId(Long groupId)", "class_method_signature": "UserGroupDao.getUserGroupByGroupId(Long groupId)", "testcase": false, "constructor": false}, {"identifier": "getUserGroupByGroupIdAndUserId", "parameters": "(Long groupId, Long userId)", "modifiers": "public", "return": "List<UserGroup>", "signature": "List<UserGroup> getUserGroupByGroupIdAndUserId(Long groupId, Long userId)", "full_signature": "public List<UserGroup> getUserGroupByGroupIdAndUserId(Long groupId, Long userId)", "class_method_signature": "UserGroupDao.getUserGroupByGroupIdAndUserId(Long groupId, Long userId)", "testcase": false, "constructor": false}, {"identifier": "getMemberTotalCount", "parameters": "(Paging<UserGroup> paging)", "modifiers": "public", "return": "Long", "signature": "Long getMemberTotalCount(Paging<UserGroup> paging)", "full_signature": "public Long getMemberTotalCount(Paging<UserGroup> paging)", "class_method_signature": "UserGroupDao.getMemberTotalCount(Paging<UserGroup> paging)", "testcase": false, "constructor": false}, {"identifier": "findMemberPageList", "parameters": "(Paging<UserGroup> paging)", "modifiers": "public", "return": "List<MemberView>", "signature": "List<MemberView> findMemberPageList(Paging<UserGroup> paging)", "full_signature": "public List<MemberView> findMemberPageList(Paging<UserGroup> paging)", "class_method_signature": "UserGroupDao.findMemberPageList(Paging<UserGroup> paging)", "testcase": false, "constructor": false}, {"identifier": "appenMenberWhere", "parameters": "(Paging<UserGroup> paging)", "modifiers": "private", "return": "String", "signature": "String appenMenberWhere(Paging<UserGroup> paging)", "full_signature": "private String appenMenberWhere(Paging<UserGroup> paging)", "class_method_signature": "UserGroupDao.appenMenberWhere(Paging<UserGroup> paging)", "testcase": false, "constructor": false}, {"identifier": "appenMenberCondition", "parameters": "(Paging<UserGroup> paging)", "modifiers": "private", "return": "String", "signature": "String appenMenberCondition(Paging<UserGroup> paging)", "full_signature": "private String appenMenberCondition(Paging<UserGroup> paging)", "class_method_signature": "UserGroupDao.appenMenberCondition(Paging<UserGroup> paging)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/dao/UserGroupDao.java"}, "focal_method": {"identifier": "getUserGroupByGroupIdAndUserId", "parameters": "(Long groupId, Long userId)", "modifiers": "public", "return": "List<UserGroup>", "body": "public List<UserGroup> getUserGroupByGroupIdAndUserId(Long groupId, Long userId) throws SQLException {\n        String sql = \"SELECT id, user_id, group_id, role, opt_user FROM user_group WHERE group_id = ? AND user_id=?\";\n        return this.queryBySql(sql, UserGroup.class, Parameter.integerOf(StringUtils.EMPTY, groupId), Parameter.integerOf(StringUtils.EMPTY, userId));\n    }", "signature": "List<UserGroup> getUserGroupByGroupIdAndUserId(Long groupId, Long userId)", "full_signature": "public List<UserGroup> getUserGroupByGroupIdAndUserId(Long groupId, Long userId)", "class_method_signature": "UserGroupDao.getUserGroupByGroupIdAndUserId(Long groupId, Long userId)", "testcase": false, "constructor": false, "invocations": ["queryBySql", "integerOf", "integerOf"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}