{"test_class": {"identifier": "CryptoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File rsaPrivateKey = new File(\"./src/test/resources/unit_test_rsa_private.key\");", "modifier": "private final", "type": "File", "declarator": "rsaPrivateKey = new File(\"./src/test/resources/unit_test_rsa_private.key\")", "var_name": "rsaPrivateKey"}, {"original_string": "private final File rsaPublicKey = new File(\"./src/test/resources/rsa_public.key\");", "modifier": "private final", "type": "File", "declarator": "rsaPublicKey = new File(\"./src/test/resources/rsa_public.key\")", "var_name": "rsaPublicKey"}, {"original_string": "private final File rsaPublicX590Cert = new File(\"./src/test/resources/rsa_public_x509.cert\");", "modifier": "private final", "type": "File", "declarator": "rsaPublicX590Cert = new File(\"./src/test/resources/rsa_public_x509.cert\")", "var_name": "rsaPublicX590Cert"}, {"original_string": "private final File rsaPublicInvalidKey = new File(\"./src/test/resources/rsa_public_invalid.key\");", "modifier": "private final", "type": "File", "declarator": "rsaPublicInvalidKey = new File(\"./src/test/resources/rsa_public_invalid.key\")", "var_name": "rsaPublicInvalidKey"}, {"original_string": "private final File ecPrivateKey = new File(\"./src/test/resources/unit_test_ec_private.key\");", "modifier": "private final", "type": "File", "declarator": "ecPrivateKey = new File(\"./src/test/resources/unit_test_ec_private.key\")", "var_name": "ecPrivateKey"}, {"original_string": "private final File ecPublicKey = new File(\"./src/test/resources/ec_public.key\");", "modifier": "private final", "type": "File", "declarator": "ecPublicKey = new File(\"./src/test/resources/ec_public.key\")", "var_name": "ecPublicKey"}, {"original_string": "private final File ecPublicX509Cert = new File(\"./src/test/resources/ec_public_x509.cert\");", "modifier": "private final", "type": "File", "declarator": "ecPublicX509Cert = new File(\"./src/test/resources/ec_public_x509.cert\")", "var_name": "ecPublicX509Cert"}, {"original_string": "private final File ecPublicInvalidKey = new File(\"./src/test/resources/ec_public_invalid.key\");", "modifier": "private final", "type": "File", "declarator": "ecPublicInvalidKey = new File(\"./src/test/resources/ec_public_invalid.key\")", "var_name": "ecPublicInvalidKey"}, {"original_string": "private final File ecPrivateParamPrime256v1Key = new File(\"./src/test/resources/unit_test_ec_private_param_prime256v1.key\");", "modifier": "private final", "type": "File", "declarator": "ecPrivateParamPrime256v1Key = new File(\"./src/test/resources/unit_test_ec_private_param_prime256v1.key\")", "var_name": "ecPrivateParamPrime256v1Key"}, {"original_string": "private final File ecPublicParamPrime256v1Key = new File(\"./src/test/resources/ec_public_param_prime256v1.key\");", "modifier": "private final", "type": "File", "declarator": "ecPublicParamPrime256v1Key = new File(\"./src/test/resources/ec_public_param_prime256v1.key\")", "var_name": "ecPublicParamPrime256v1Key"}, {"original_string": "private final File ecPrivateParamSecp384r1Key = new File(\"./src/test/resources/unit_test_ec_private_param_secp384r1.key\");", "modifier": "private final", "type": "File", "declarator": "ecPrivateParamSecp384r1Key = new File(\"./src/test/resources/unit_test_ec_private_param_secp384r1.key\")", "var_name": "ecPrivateParamSecp384r1Key"}, {"original_string": "private final File ecPublicParamSecp384r1Key = new File(\"./src/test/resources/ec_public_param_secp384r1.key\");", "modifier": "private final", "type": "File", "declarator": "ecPublicParamSecp384r1Key = new File(\"./src/test/resources/ec_public_param_secp384r1.key\")", "var_name": "ecPublicParamSecp384r1Key"}, {"original_string": "private final File ecPrivateParamsKey = new File(\"./src/test/resources/unit_test_ec_private_params.key\");", "modifier": "private final", "type": "File", "declarator": "ecPrivateParamsKey = new File(\"./src/test/resources/unit_test_ec_private_params.key\")", "var_name": "ecPrivateParamsKey"}, {"original_string": "private final File ecPublicParamsKey = new File(\"./src/test/resources/ec_public_params.key\");", "modifier": "private final", "type": "File", "declarator": "ecPublicParamsKey = new File(\"./src/test/resources/ec_public_params.key\")", "var_name": "ecPublicParamsKey"}, {"original_string": "private final File argFile = new File(\"./src/test/resources/arg_file\");", "modifier": "private final", "type": "File", "declarator": "argFile = new File(\"./src/test/resources/arg_file\")", "var_name": "argFile"}, {"original_string": "private final File noFile = new File(\"./src/test/resources/ec_private_test_not_exist.key\");", "modifier": "private final", "type": "File", "declarator": "noFile = new File(\"./src/test/resources/ec_private_test_not_exist.key\")", "var_name": "noFile"}, {"original_string": "private final File privateEncryptedKey = new File(\"./src/test/resources/unit_test_private_encrypted.key\");", "modifier": "private final", "type": "File", "declarator": "privateEncryptedKey = new File(\"./src/test/resources/unit_test_private_encrypted.key\")", "var_name": "privateEncryptedKey"}, {"original_string": "private final String encryptedKeyPassword = \"athenz\";", "modifier": "private final", "type": "String", "declarator": "encryptedKeyPassword = \"athenz\"", "var_name": "encryptedKeyPassword"}, {"original_string": "private final String serviceToken = \"v=S1;d=coretech;n=storage;t=1234567000;e=123456800;h=localhost\";", "modifier": "private final", "type": "String", "declarator": "serviceToken = \"v=S1;d=coretech;n=storage;t=1234567000;e=123456800;h=localhost\"", "var_name": "serviceToken"}, {"original_string": "private final String serviceRSASignature = \"VsUlcNozK4as1FjPbowEE_DFDD8KWpQzphadfbt_TsMoCTLFpYrMzKTu_nHKemJmEi0bbPwj7hRLrIKEFu2VjQ--\";", "modifier": "private final", "type": "String", "declarator": "serviceRSASignature = \"VsUlcNozK4as1FjPbowEE_DFDD8KWpQzphadfbt_TsMoCTLFpYrMzKTu_nHKemJmEi0bbPwj7hRLrIKEFu2VjQ--\"", "var_name": "serviceRSASignature"}, {"original_string": "private final String serviceECSignature = \"MEQCIEBnyNCxp5GSeua3K9OenyetmVs4F68VB.Md1JRaU4OXAiBWAxlJLe74ZV4QDqapsD4FJm.MA3mv0FMcq.LEevJa0g--\";", "modifier": "private final", "type": "String", "declarator": "serviceECSignature = \"MEQCIEBnyNCxp5GSeua3K9OenyetmVs4F68VB.Md1JRaU4OXAiBWAxlJLe74ZV4QDqapsD4FJm.MA3mv0FMcq.LEevJa0g--\"", "var_name": "serviceECSignature"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/util/CryptoTest.java"}, "test_case": {"identifier": "testExtractX509CertCommonName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtractX509CertCommonName() throws Exception {\n\n        try (InputStream inStream = new FileInputStream(\"src/test/resources/valid_cn_x509.cert\")) {\n            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n            X509Certificate cert = (X509Certificate) cf.generateCertificate(inStream);\n\n            String cn = Crypto.extractX509CertCommonName(cert);\n            assertEquals(\"athenz.syncer\", cn);\n        }\n    }", "signature": "void testExtractX509CertCommonName()", "full_signature": "@Test public void testExtractX509CertCommonName()", "class_method_signature": "CryptoTest.testExtractX509CertCommonName()", "testcase": true, "constructor": false, "invocations": ["getInstance", "generateCertificate", "extractX509CertCommonName", "assertEquals"]}, "focal_class": {"identifier": "Crypto", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Crypto.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Crypto.class)", "var_name": "LOG"}, {"original_string": "static final String ATHENZ_CRYPTO_ALGO_RSA = \"athenz.crypto.algo_rsa\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_CRYPTO_ALGO_RSA = \"athenz.crypto.algo_rsa\"", "var_name": "ATHENZ_CRYPTO_ALGO_RSA"}, {"original_string": "private static final String RSA = \"RSA\";", "modifier": "private static final", "type": "String", "declarator": "RSA = \"RSA\"", "var_name": "RSA"}, {"original_string": "private static final String RSA_SHA1 = \"SHA1withRSA\";", "modifier": "private static final", "type": "String", "declarator": "RSA_SHA1 = \"SHA1withRSA\"", "var_name": "RSA_SHA1"}, {"original_string": "private static final String RSA_SHA256 = \"SHA256withRSA\";", "modifier": "private static final", "type": "String", "declarator": "RSA_SHA256 = \"SHA256withRSA\"", "var_name": "RSA_SHA256"}, {"original_string": "static final String ATHENZ_CRYPTO_ALGO_ECDSA = \"athenz.crypto.algo_ecdsa\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_CRYPTO_ALGO_ECDSA = \"athenz.crypto.algo_ecdsa\"", "var_name": "ATHENZ_CRYPTO_ALGO_ECDSA"}, {"original_string": "private static final String ECDSA = \"ECDSA\";", "modifier": "private static final", "type": "String", "declarator": "ECDSA = \"ECDSA\"", "var_name": "ECDSA"}, {"original_string": "private static final String ECDSA_SHA1 = \"SHA1withECDSA\";", "modifier": "private static final", "type": "String", "declarator": "ECDSA_SHA1 = \"SHA1withECDSA\"", "var_name": "ECDSA_SHA1"}, {"original_string": "private static final String ECDSA_SHA256 = \"SHA256withECDSA\";", "modifier": "private static final", "type": "String", "declarator": "ECDSA_SHA256 = \"SHA256withECDSA\"", "var_name": "ECDSA_SHA256"}, {"original_string": "public static final String SHA1 = \"SHA1\";", "modifier": "public static final", "type": "String", "declarator": "SHA1 = \"SHA1\"", "var_name": "SHA1"}, {"original_string": "public static final String SHA256 = \"SHA256\";", "modifier": "public static final", "type": "String", "declarator": "SHA256 = \"SHA256\"", "var_name": "SHA256"}, {"original_string": "static final String ATHENZ_CRYPTO_BC_PROVIDER = \"athenz.crypto.bc_provider\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_CRYPTO_BC_PROVIDER = \"athenz.crypto.bc_provider\"", "var_name": "ATHENZ_CRYPTO_BC_PROVIDER"}, {"original_string": "private static final String BC_PROVIDER = \"BC\";", "modifier": "private static final", "type": "String", "declarator": "BC_PROVIDER = \"BC\"", "var_name": "BC_PROVIDER"}, {"original_string": "static final SecureRandom RANDOM;", "modifier": "static final", "type": "SecureRandom", "declarator": "RANDOM", "var_name": "RANDOM"}], "methods": [{"identifier": "getProvider", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String getProvider()", "full_signature": "private static String getProvider()", "class_method_signature": "Crypto.getProvider()", "testcase": false, "constructor": false}, {"identifier": "getECDSAAlgo", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String getECDSAAlgo()", "full_signature": "private static String getECDSAAlgo()", "class_method_signature": "Crypto.getECDSAAlgo()", "testcase": false, "constructor": false}, {"identifier": "getRSAAlgo", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String getRSAAlgo()", "full_signature": "private static String getRSAAlgo()", "class_method_signature": "Crypto.getRSAAlgo()", "testcase": false, "constructor": false}, {"identifier": "hmac", "parameters": "(String message, String sharedSecret)", "modifiers": "public static", "return": "String", "signature": "String hmac(String message, String sharedSecret)", "full_signature": "public static String hmac(String message, String sharedSecret)", "class_method_signature": "Crypto.hmac(String message, String sharedSecret)", "testcase": false, "constructor": false}, {"identifier": "getSignatureAlgorithm", "parameters": "(String keyAlgorithm)", "modifiers": "static", "return": "String", "signature": "String getSignatureAlgorithm(String keyAlgorithm)", "full_signature": "static String getSignatureAlgorithm(String keyAlgorithm)", "class_method_signature": "Crypto.getSignatureAlgorithm(String keyAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "getSignatureAlgorithm", "parameters": "(String keyAlgorithm, String digestAlgorithm)", "modifiers": "static", "return": "String", "signature": "String getSignatureAlgorithm(String keyAlgorithm, String digestAlgorithm)", "full_signature": "static String getSignatureAlgorithm(String keyAlgorithm, String digestAlgorithm)", "class_method_signature": "Crypto.getSignatureAlgorithm(String keyAlgorithm, String digestAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(String message, PrivateKey key, String digestAlgorithm)", "modifiers": "public static", "return": "String", "signature": "String sign(String message, PrivateKey key, String digestAlgorithm)", "full_signature": "public static String sign(String message, PrivateKey key, String digestAlgorithm)", "class_method_signature": "Crypto.sign(String message, PrivateKey key, String digestAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(byte[] message, PrivateKey key, String digestAlgorithm)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] sign(byte[] message, PrivateKey key, String digestAlgorithm)", "full_signature": "public static byte[] sign(byte[] message, PrivateKey key, String digestAlgorithm)", "class_method_signature": "Crypto.sign(byte[] message, PrivateKey key, String digestAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(String message, PrivateKey key)", "modifiers": "public static", "return": "String", "signature": "String sign(String message, PrivateKey key)", "full_signature": "public static String sign(String message, PrivateKey key)", "class_method_signature": "Crypto.sign(String message, PrivateKey key)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(String message, PublicKey key, String signature,\n                                 String digestAlgorithm)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(String message, PublicKey key, String signature,\n                                 String digestAlgorithm)", "full_signature": "public static boolean verify(String message, PublicKey key, String signature,\n                                 String digestAlgorithm)", "class_method_signature": "Crypto.verify(String message, PublicKey key, String signature,\n                                 String digestAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(String message, PublicKey key, String signature)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(String message, PublicKey key, String signature)", "full_signature": "public static boolean verify(String message, PublicKey key, String signature)", "class_method_signature": "Crypto.verify(String message, PublicKey key, String signature)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] message, PublicKey key, byte[] signature,\n                                 String digestAlgorithm)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(byte[] message, PublicKey key, byte[] signature,\n                                 String digestAlgorithm)", "full_signature": "public static boolean verify(byte[] message, PublicKey key, byte[] signature,\n                                 String digestAlgorithm)", "class_method_signature": "Crypto.verify(byte[] message, PublicKey key, byte[] signature,\n                                 String digestAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "utf8String", "parameters": "(byte [] b)", "modifiers": "static", "return": "String", "signature": "String utf8String(byte [] b)", "full_signature": "static String utf8String(byte [] b)", "class_method_signature": "Crypto.utf8String(byte [] b)", "testcase": false, "constructor": false}, {"identifier": "utf8Bytes", "parameters": "(String s)", "modifiers": "static", "return": "byte []", "signature": "byte [] utf8Bytes(String s)", "full_signature": "static byte [] utf8Bytes(String s)", "class_method_signature": "Crypto.utf8Bytes(String s)", "testcase": false, "constructor": false}, {"identifier": "sha256", "parameters": "(byte [] data)", "modifiers": "public static", "return": "byte []", "signature": "byte [] sha256(byte [] data)", "full_signature": "public static byte [] sha256(byte [] data)", "class_method_signature": "Crypto.sha256(byte [] data)", "testcase": false, "constructor": false}, {"identifier": "sha256", "parameters": "(String text)", "modifiers": "public static", "return": "byte []", "signature": "byte [] sha256(String text)", "full_signature": "public static byte [] sha256(String text)", "class_method_signature": "Crypto.sha256(String text)", "testcase": false, "constructor": false}, {"identifier": "ybase64", "parameters": "(byte [] data)", "modifiers": "public static", "return": "String", "signature": "String ybase64(byte [] data)", "full_signature": "public static String ybase64(byte [] data)", "class_method_signature": "Crypto.ybase64(byte [] data)", "testcase": false, "constructor": false}, {"identifier": "ybase64Decode", "parameters": "(String b64)", "modifiers": "public static", "return": "byte []", "signature": "byte [] ybase64Decode(String b64)", "full_signature": "public static byte [] ybase64Decode(String b64)", "class_method_signature": "Crypto.ybase64Decode(String b64)", "testcase": false, "constructor": false}, {"identifier": "ybase64DecodeString", "parameters": "(String b64)", "modifiers": "public static", "return": "String", "signature": "String ybase64DecodeString(String b64)", "full_signature": "public static String ybase64DecodeString(String b64)", "class_method_signature": "Crypto.ybase64DecodeString(String b64)", "testcase": false, "constructor": false}, {"identifier": "ybase64EncodeString", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String ybase64EncodeString(String str)", "full_signature": "public static String ybase64EncodeString(String str)", "class_method_signature": "Crypto.ybase64EncodeString(String str)", "testcase": false, "constructor": false}, {"identifier": "x509CertificatesToPEM", "parameters": "(X509Certificate[] x509Certs)", "modifiers": "public static", "return": "String", "signature": "String x509CertificatesToPEM(X509Certificate[] x509Certs)", "full_signature": "public static String x509CertificatesToPEM(X509Certificate[] x509Certs)", "class_method_signature": "Crypto.x509CertificatesToPEM(X509Certificate[] x509Certs)", "testcase": false, "constructor": false}, {"identifier": "loadX509Certificates", "parameters": "(final String certsFile)", "modifiers": "public static", "return": "X509Certificate[]", "signature": "X509Certificate[] loadX509Certificates(final String certsFile)", "full_signature": "public static X509Certificate[] loadX509Certificates(final String certsFile)", "class_method_signature": "Crypto.loadX509Certificates(final String certsFile)", "testcase": false, "constructor": false}, {"identifier": "loadX509Certificate", "parameters": "(File certFile)", "modifiers": "public static", "return": "X509Certificate", "signature": "X509Certificate loadX509Certificate(File certFile)", "full_signature": "public static X509Certificate loadX509Certificate(File certFile)", "class_method_signature": "Crypto.loadX509Certificate(File certFile)", "testcase": false, "constructor": false}, {"identifier": "loadX509Certificate", "parameters": "(String pemEncoded)", "modifiers": "public static", "return": "X509Certificate", "signature": "X509Certificate loadX509Certificate(String pemEncoded)", "full_signature": "public static X509Certificate loadX509Certificate(String pemEncoded)", "class_method_signature": "Crypto.loadX509Certificate(String pemEncoded)", "testcase": false, "constructor": false}, {"identifier": "loadX509Certificate", "parameters": "(Reader reader)", "modifiers": "public static", "return": "X509Certificate", "signature": "X509Certificate loadX509Certificate(Reader reader)", "full_signature": "public static X509Certificate loadX509Certificate(Reader reader)", "class_method_signature": "Crypto.loadX509Certificate(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "loadPublicKey", "parameters": "(String pemEncoded)", "modifiers": "public static", "return": "PublicKey", "signature": "PublicKey loadPublicKey(String pemEncoded)", "full_signature": "public static PublicKey loadPublicKey(String pemEncoded)", "class_method_signature": "Crypto.loadPublicKey(String pemEncoded)", "testcase": false, "constructor": false}, {"identifier": "loadPublicKey", "parameters": "(Reader r)", "modifiers": "public static", "return": "PublicKey", "signature": "PublicKey loadPublicKey(Reader r)", "full_signature": "public static PublicKey loadPublicKey(Reader r)", "class_method_signature": "Crypto.loadPublicKey(Reader r)", "testcase": false, "constructor": false}, {"identifier": "loadPublicKey", "parameters": "(File f)", "modifiers": "public static", "return": "PublicKey", "signature": "PublicKey loadPublicKey(File f)", "full_signature": "public static PublicKey loadPublicKey(File f)", "class_method_signature": "Crypto.loadPublicKey(File f)", "testcase": false, "constructor": false}, {"identifier": "extractPublicKey", "parameters": "(PrivateKey privateKey)", "modifiers": "public static", "return": "PublicKey", "signature": "PublicKey extractPublicKey(PrivateKey privateKey)", "full_signature": "public static PublicKey extractPublicKey(PrivateKey privateKey)", "class_method_signature": "Crypto.extractPublicKey(PrivateKey privateKey)", "testcase": false, "constructor": false}, {"identifier": "loadPrivateKey", "parameters": "(String pemEncoded)", "modifiers": "public static", "return": "PrivateKey", "signature": "PrivateKey loadPrivateKey(String pemEncoded)", "full_signature": "public static PrivateKey loadPrivateKey(String pemEncoded)", "class_method_signature": "Crypto.loadPrivateKey(String pemEncoded)", "testcase": false, "constructor": false}, {"identifier": "loadPrivateKey", "parameters": "(Reader reader)", "modifiers": "public static", "return": "PrivateKey", "signature": "PrivateKey loadPrivateKey(Reader reader)", "full_signature": "public static PrivateKey loadPrivateKey(Reader reader)", "class_method_signature": "Crypto.loadPrivateKey(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "loadPrivateKey", "parameters": "(File file)", "modifiers": "public static", "return": "PrivateKey", "signature": "PrivateKey loadPrivateKey(File file)", "full_signature": "public static PrivateKey loadPrivateKey(File file)", "class_method_signature": "Crypto.loadPrivateKey(File file)", "testcase": false, "constructor": false}, {"identifier": "loadPrivateKey", "parameters": "(File file, String pwd)", "modifiers": "public static", "return": "PrivateKey", "signature": "PrivateKey loadPrivateKey(File file, String pwd)", "full_signature": "public static PrivateKey loadPrivateKey(File file, String pwd)", "class_method_signature": "Crypto.loadPrivateKey(File file, String pwd)", "testcase": false, "constructor": false}, {"identifier": "loadPrivateKey", "parameters": "(String pemEncoded, String pwd)", "modifiers": "public static", "return": "PrivateKey", "signature": "PrivateKey loadPrivateKey(String pemEncoded, String pwd)", "full_signature": "public static PrivateKey loadPrivateKey(String pemEncoded, String pwd)", "class_method_signature": "Crypto.loadPrivateKey(String pemEncoded, String pwd)", "testcase": false, "constructor": false}, {"identifier": "loadPrivateKey", "parameters": "(Reader reader, String pwd)", "modifiers": "public static", "return": "PrivateKey", "signature": "PrivateKey loadPrivateKey(Reader reader, String pwd)", "full_signature": "public static PrivateKey loadPrivateKey(Reader reader, String pwd)", "class_method_signature": "Crypto.loadPrivateKey(Reader reader, String pwd)", "testcase": false, "constructor": false}, {"identifier": "generateRSAPrivateKey", "parameters": "(int bits)", "modifiers": "public static", "return": "PrivateKey", "signature": "PrivateKey generateRSAPrivateKey(int bits)", "full_signature": "public static PrivateKey generateRSAPrivateKey(int bits)", "class_method_signature": "Crypto.generateRSAPrivateKey(int bits)", "testcase": false, "constructor": false}, {"identifier": "randomSalt", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String randomSalt()", "full_signature": "public static String randomSalt()", "class_method_signature": "Crypto.randomSalt()", "testcase": false, "constructor": false}, {"identifier": "encodedFile", "parameters": "(File f)", "modifiers": "public static", "return": "String", "signature": "String encodedFile(File f)", "full_signature": "public static String encodedFile(File f)", "class_method_signature": "Crypto.encodedFile(File f)", "testcase": false, "constructor": false}, {"identifier": "encodedFile", "parameters": "(FileInputStream is)", "modifiers": "public static", "return": "String", "signature": "String encodedFile(FileInputStream is)", "full_signature": "public static String encodedFile(FileInputStream is)", "class_method_signature": "Crypto.encodedFile(FileInputStream is)", "testcase": false, "constructor": false}, {"identifier": "getPKCS10CertRequest", "parameters": "(String csr)", "modifiers": "public static", "return": "PKCS10CertificationRequest", "signature": "PKCS10CertificationRequest getPKCS10CertRequest(String csr)", "full_signature": "public static PKCS10CertificationRequest getPKCS10CertRequest(String csr)", "class_method_signature": "Crypto.getPKCS10CertRequest(String csr)", "testcase": false, "constructor": false}, {"identifier": "extractX509CSRSubjectField", "parameters": "(PKCS10CertificationRequest certReq, ASN1ObjectIdentifier id)", "modifiers": "public static", "return": "String", "signature": "String extractX509CSRSubjectField(PKCS10CertificationRequest certReq, ASN1ObjectIdentifier id)", "full_signature": "public static String extractX509CSRSubjectField(PKCS10CertificationRequest certReq, ASN1ObjectIdentifier id)", "class_method_signature": "Crypto.extractX509CSRSubjectField(PKCS10CertificationRequest certReq, ASN1ObjectIdentifier id)", "testcase": false, "constructor": false}, {"identifier": "extractX509CSRCommonName", "parameters": "(PKCS10CertificationRequest certReq)", "modifiers": "public static", "return": "String", "signature": "String extractX509CSRCommonName(PKCS10CertificationRequest certReq)", "full_signature": "public static String extractX509CSRCommonName(PKCS10CertificationRequest certReq)", "class_method_signature": "Crypto.extractX509CSRCommonName(PKCS10CertificationRequest certReq)", "testcase": false, "constructor": false}, {"identifier": "extractX509CSRSubjectOField", "parameters": "(PKCS10CertificationRequest certReq)", "modifiers": "public static", "return": "String", "signature": "String extractX509CSRSubjectOField(PKCS10CertificationRequest certReq)", "full_signature": "public static String extractX509CSRSubjectOField(PKCS10CertificationRequest certReq)", "class_method_signature": "Crypto.extractX509CSRSubjectOField(PKCS10CertificationRequest certReq)", "testcase": false, "constructor": false}, {"identifier": "extractX509CSRSubjectOUField", "parameters": "(PKCS10CertificationRequest certReq)", "modifiers": "public static", "return": "String", "signature": "String extractX509CSRSubjectOUField(PKCS10CertificationRequest certReq)", "full_signature": "public static String extractX509CSRSubjectOUField(PKCS10CertificationRequest certReq)", "class_method_signature": "Crypto.extractX509CSRSubjectOUField(PKCS10CertificationRequest certReq)", "testcase": false, "constructor": false}, {"identifier": "extractX509CSRSANField", "parameters": "(PKCS10CertificationRequest certReq, int tagNo)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> extractX509CSRSANField(PKCS10CertificationRequest certReq, int tagNo)", "full_signature": "private static List<String> extractX509CSRSANField(PKCS10CertificationRequest certReq, int tagNo)", "class_method_signature": "Crypto.extractX509CSRSANField(PKCS10CertificationRequest certReq, int tagNo)", "testcase": false, "constructor": false}, {"identifier": "extractX509CSREmail", "parameters": "(PKCS10CertificationRequest certReq)", "modifiers": "public static", "return": "String", "signature": "String extractX509CSREmail(PKCS10CertificationRequest certReq)", "full_signature": "public static String extractX509CSREmail(PKCS10CertificationRequest certReq)", "class_method_signature": "Crypto.extractX509CSREmail(PKCS10CertificationRequest certReq)", "testcase": false, "constructor": false}, {"identifier": "extractX509CSREmails", "parameters": "(PKCS10CertificationRequest certReq)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> extractX509CSREmails(PKCS10CertificationRequest certReq)", "full_signature": "public static List<String> extractX509CSREmails(PKCS10CertificationRequest certReq)", "class_method_signature": "Crypto.extractX509CSREmails(PKCS10CertificationRequest certReq)", "testcase": false, "constructor": false}, {"identifier": "extractX509CSRDnsNames", "parameters": "(PKCS10CertificationRequest certReq)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> extractX509CSRDnsNames(PKCS10CertificationRequest certReq)", "full_signature": "public static List<String> extractX509CSRDnsNames(PKCS10CertificationRequest certReq)", "class_method_signature": "Crypto.extractX509CSRDnsNames(PKCS10CertificationRequest certReq)", "testcase": false, "constructor": false}, {"identifier": "extractX509CSRURIs", "parameters": "(PKCS10CertificationRequest certReq)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> extractX509CSRURIs(PKCS10CertificationRequest certReq)", "full_signature": "public static List<String> extractX509CSRURIs(PKCS10CertificationRequest certReq)", "class_method_signature": "Crypto.extractX509CSRURIs(PKCS10CertificationRequest certReq)", "testcase": false, "constructor": false}, {"identifier": "extractX509CSRIPAddresses", "parameters": "(PKCS10CertificationRequest certReq)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> extractX509CSRIPAddresses(PKCS10CertificationRequest certReq)", "full_signature": "public static List<String> extractX509CSRIPAddresses(PKCS10CertificationRequest certReq)", "class_method_signature": "Crypto.extractX509CSRIPAddresses(PKCS10CertificationRequest certReq)", "testcase": false, "constructor": false}, {"identifier": "extractX509CSRPublicKey", "parameters": "(PKCS10CertificationRequest certReq)", "modifiers": "public static", "return": "String", "signature": "String extractX509CSRPublicKey(PKCS10CertificationRequest certReq)", "full_signature": "public static String extractX509CSRPublicKey(PKCS10CertificationRequest certReq)", "class_method_signature": "Crypto.extractX509CSRPublicKey(PKCS10CertificationRequest certReq)", "testcase": false, "constructor": false}, {"identifier": "generateX509CSR", "parameters": "(PrivateKey privateKey, String x500Principal,\n                                         GeneralName[] sanArray)", "modifiers": "public static", "return": "String", "signature": "String generateX509CSR(PrivateKey privateKey, String x500Principal,\n                                         GeneralName[] sanArray)", "full_signature": "public static String generateX509CSR(PrivateKey privateKey, String x500Principal,\n                                         GeneralName[] sanArray)", "class_method_signature": "Crypto.generateX509CSR(PrivateKey privateKey, String x500Principal,\n                                         GeneralName[] sanArray)", "testcase": false, "constructor": false}, {"identifier": "generateX509CSR", "parameters": "(PrivateKey privateKey, PublicKey publicKey,\n                                         String x500Principal, GeneralName[] sanArray)", "modifiers": "public static", "return": "String", "signature": "String generateX509CSR(PrivateKey privateKey, PublicKey publicKey,\n                                         String x500Principal, GeneralName[] sanArray)", "full_signature": "public static String generateX509CSR(PrivateKey privateKey, PublicKey publicKey,\n                                         String x500Principal, GeneralName[] sanArray)", "class_method_signature": "Crypto.generateX509CSR(PrivateKey privateKey, PublicKey publicKey,\n                                         String x500Principal, GeneralName[] sanArray)", "testcase": false, "constructor": false}, {"identifier": "extractX509CertSubjectField", "parameters": "(X509Certificate x509Cert, ASN1ObjectIdentifier id)", "modifiers": "public static", "return": "String", "signature": "String extractX509CertSubjectField(X509Certificate x509Cert, ASN1ObjectIdentifier id)", "full_signature": "public static String extractX509CertSubjectField(X509Certificate x509Cert, ASN1ObjectIdentifier id)", "class_method_signature": "Crypto.extractX509CertSubjectField(X509Certificate x509Cert, ASN1ObjectIdentifier id)", "testcase": false, "constructor": false}, {"identifier": "extractX509CertIssueTime", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "long", "signature": "long extractX509CertIssueTime(X509Certificate x509Cert)", "full_signature": "public static long extractX509CertIssueTime(X509Certificate x509Cert)", "class_method_signature": "Crypto.extractX509CertIssueTime(X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "extractX509CertCommonName", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "String", "signature": "String extractX509CertCommonName(X509Certificate x509Cert)", "full_signature": "public static String extractX509CertCommonName(X509Certificate x509Cert)", "class_method_signature": "Crypto.extractX509CertCommonName(X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "extractX509CertSubjectOUField", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "String", "signature": "String extractX509CertSubjectOUField(X509Certificate x509Cert)", "full_signature": "public static String extractX509CertSubjectOUField(X509Certificate x509Cert)", "class_method_signature": "Crypto.extractX509CertSubjectOUField(X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "extractX509CertSubjectOField", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "String", "signature": "String extractX509CertSubjectOField(X509Certificate x509Cert)", "full_signature": "public static String extractX509CertSubjectOField(X509Certificate x509Cert)", "class_method_signature": "Crypto.extractX509CertSubjectOField(X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "isRestrictedCertificate", "parameters": "(X509Certificate x509Cert, GlobStringsMatcher globStringsMatcher)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRestrictedCertificate(X509Certificate x509Cert, GlobStringsMatcher globStringsMatcher)", "full_signature": "public static boolean isRestrictedCertificate(X509Certificate x509Cert, GlobStringsMatcher globStringsMatcher)", "class_method_signature": "Crypto.isRestrictedCertificate(X509Certificate x509Cert, GlobStringsMatcher globStringsMatcher)", "testcase": false, "constructor": false}, {"identifier": "extractX509CertSANField", "parameters": "(X509Certificate x509Cert, int tagNo)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> extractX509CertSANField(X509Certificate x509Cert, int tagNo)", "full_signature": "private static List<String> extractX509CertSANField(X509Certificate x509Cert, int tagNo)", "class_method_signature": "Crypto.extractX509CertSANField(X509Certificate x509Cert, int tagNo)", "testcase": false, "constructor": false}, {"identifier": "extractX509CertDnsNames", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> extractX509CertDnsNames(X509Certificate x509Cert)", "full_signature": "public static List<String> extractX509CertDnsNames(X509Certificate x509Cert)", "class_method_signature": "Crypto.extractX509CertDnsNames(X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "extractX509CertEmails", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> extractX509CertEmails(X509Certificate x509Cert)", "full_signature": "public static List<String> extractX509CertEmails(X509Certificate x509Cert)", "class_method_signature": "Crypto.extractX509CertEmails(X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "extractX509CertIPAddresses", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> extractX509CertIPAddresses(X509Certificate x509Cert)", "full_signature": "public static List<String> extractX509CertIPAddresses(X509Certificate x509Cert)", "class_method_signature": "Crypto.extractX509CertIPAddresses(X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "extractX509CertURIs", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> extractX509CertURIs(X509Certificate x509Cert)", "full_signature": "public static List<String> extractX509CertURIs(X509Certificate x509Cert)", "class_method_signature": "Crypto.extractX509CertURIs(X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "extractX509CertPublicKey", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "String", "signature": "String extractX509CertPublicKey(X509Certificate x509Cert)", "full_signature": "public static String extractX509CertPublicKey(X509Certificate x509Cert)", "class_method_signature": "Crypto.extractX509CertPublicKey(X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "generateX509Certificate", "parameters": "(PKCS10CertificationRequest certReq,\n            PrivateKey caPrivateKey, X509Certificate caCertificate, int validityTimeout,\n            boolean basicConstraints)", "modifiers": "public static", "return": "X509Certificate", "signature": "X509Certificate generateX509Certificate(PKCS10CertificationRequest certReq,\n            PrivateKey caPrivateKey, X509Certificate caCertificate, int validityTimeout,\n            boolean basicConstraints)", "full_signature": "public static X509Certificate generateX509Certificate(PKCS10CertificationRequest certReq,\n            PrivateKey caPrivateKey, X509Certificate caCertificate, int validityTimeout,\n            boolean basicConstraints)", "class_method_signature": "Crypto.generateX509Certificate(PKCS10CertificationRequest certReq,\n            PrivateKey caPrivateKey, X509Certificate caCertificate, int validityTimeout,\n            boolean basicConstraints)", "testcase": false, "constructor": false}, {"identifier": "generateX509Certificate", "parameters": "(PKCS10CertificationRequest certReq,\n            PrivateKey caPrivateKey, X500Name issuer, int validityTimeout,\n            boolean basicConstraints)", "modifiers": "public static", "return": "X509Certificate", "signature": "X509Certificate generateX509Certificate(PKCS10CertificationRequest certReq,\n            PrivateKey caPrivateKey, X500Name issuer, int validityTimeout,\n            boolean basicConstraints)", "full_signature": "public static X509Certificate generateX509Certificate(PKCS10CertificationRequest certReq,\n            PrivateKey caPrivateKey, X500Name issuer, int validityTimeout,\n            boolean basicConstraints)", "class_method_signature": "Crypto.generateX509Certificate(PKCS10CertificationRequest certReq,\n            PrivateKey caPrivateKey, X500Name issuer, int validityTimeout,\n            boolean basicConstraints)", "testcase": false, "constructor": false}, {"identifier": "validatePKCS7Signature", "parameters": "(String data, String signature, PublicKey publicKey)", "modifiers": "public static", "return": "boolean", "signature": "boolean validatePKCS7Signature(String data, String signature, PublicKey publicKey)", "full_signature": "public static boolean validatePKCS7Signature(String data, String signature, PublicKey publicKey)", "class_method_signature": "Crypto.validatePKCS7Signature(String data, String signature, PublicKey publicKey)", "testcase": false, "constructor": false}, {"identifier": "convertToPEMFormat", "parameters": "(Object obj)", "modifiers": "public static", "return": "String", "signature": "String convertToPEMFormat(Object obj)", "full_signature": "public static String convertToPEMFormat(Object obj)", "class_method_signature": "Crypto.convertToPEMFormat(Object obj)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "Crypto.main(String[] args)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/Crypto.java"}, "focal_method": {"identifier": "extractX509CertCommonName", "parameters": "(X509Certificate x509Cert)", "modifiers": "public static", "return": "String", "body": "public static String extractX509CertCommonName(X509Certificate x509Cert) {\n\n        // in case there are multiple CNs, we're only looking at the first one\n        // in Athenz we should never have multiple CNs so we're going to reject\n        // any certificate that has multiple values\n\n        return extractX509CertSubjectField(x509Cert, BCStyle.CN);\n    }", "signature": "String extractX509CertCommonName(X509Certificate x509Cert)", "full_signature": "public static String extractX509CertCommonName(X509Certificate x509Cert)", "class_method_signature": "Crypto.extractX509CertCommonName(X509Certificate x509Cert)", "testcase": false, "constructor": false, "invocations": ["extractX509CertSubjectField"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}