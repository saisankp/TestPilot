{"test_class": {"identifier": "SiddhiStreamReporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SiddhiStreamReporter.Builder builder;", "modifier": "private", "type": "SiddhiStreamReporter.Builder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private SiddhiStreamReporter reporter;", "modifier": "private", "type": "SiddhiStreamReporter", "declarator": "reporter", "var_name": "reporter"}, {"original_string": "private StreamOperationServiceWithoutMetrics streamOperationService;", "modifier": "private", "type": "StreamOperationServiceWithoutMetrics", "declarator": "streamOperationService", "var_name": "streamOperationService"}], "file": "engine/src/test/java/com/stratio/decision/metrics/SiddhiStreamReporterTest.java"}, "test_case": {"identifier": "testReport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReport() throws Exception {\n        Clock clock= Clock.defaultClock();\n\n        reporter= builder.convertRatesTo(TimeUnit.MINUTES)\n                .convertDurationsTo(TimeUnit.SECONDS)\n                .withClock(clock)\n                .filter(MetricFilter.ALL)\n                .build();\n\n        reporter.start(1, TimeUnit.SECONDS);\n\n        SortedMap<String, Gauge> gauges= new TreeMap<>();\n        SortedMap<String, Counter> counters= new TreeMap<>();\n        SortedMap<String, Histogram> histograms= new TreeMap<>();\n        SortedMap<String, Meter> meters= new TreeMap<>();\n        SortedMap<String, Timer> timers= new TreeMap<>();\n\n        Gauge gauge= new FileDescriptorRatioGauge();\n        gauges.put(\"gauges\", gauge);\n\n        Counter counter= new Counter();\n        counters.put(\"counters\", counter);\n\n        Meter meter= new Meter();\n        meters.put(\"meters\", meter);\n\n        Timer timer= new Timer();\n        timers.put(\"timers\", timer);\n\n        Exception ex= null;\n        try {\n            reporter.report(gauges, counters, histograms, meters, timers);\n        } catch (Exception e)   {ex= e; }\n        assertNull(\"Expected null value that means not exception\", ex);\n\n    }", "signature": "void testReport()", "full_signature": "@Test public void testReport()", "class_method_signature": "SiddhiStreamReporterTest.testReport()", "testcase": true, "constructor": false, "invocations": ["defaultClock", "build", "filter", "withClock", "convertDurationsTo", "convertRatesTo", "start", "put", "put", "put", "put", "report", "assertNull"]}, "focal_class": {"identifier": "SiddhiStreamReporter", "superclass": "extends ScheduledReporter", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SiddhiStreamReporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SiddhiStreamReporter.class)", "var_name": "LOGGER"}, {"original_string": "private static final String GAUGE_STREAM_NAME = \"streaming-gauge-metrics\";", "modifier": "private static final", "type": "String", "declarator": "GAUGE_STREAM_NAME = \"streaming-gauge-metrics\"", "var_name": "GAUGE_STREAM_NAME"}, {"original_string": "private static final Set<Map.Entry<String, ColumnType>> GAUGE_PROPERTIES = new LinkedHashSet<Map.Entry<String, ColumnType>>() {{\n        add(new AbstractMap.SimpleEntry<>(\"name\", ColumnType.STRING));\n        add(new AbstractMap.SimpleEntry<>(\"timestamp\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"value\", ColumnType.STRING));\n    }};", "modifier": "private static final", "type": "Set<Map.Entry<String, ColumnType>>", "declarator": "GAUGE_PROPERTIES = new LinkedHashSet<Map.Entry<String, ColumnType>>() {{\n        add(new AbstractMap.SimpleEntry<>(\"name\", ColumnType.STRING));\n        add(new AbstractMap.SimpleEntry<>(\"timestamp\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"value\", ColumnType.STRING));\n    }}", "var_name": "GAUGE_PROPERTIES"}, {"original_string": "private static final String COUNTER_STREAM_NAME = \"streaming-counter-metrics\";", "modifier": "private static final", "type": "String", "declarator": "COUNTER_STREAM_NAME = \"streaming-counter-metrics\"", "var_name": "COUNTER_STREAM_NAME"}, {"original_string": "private static final Set<Map.Entry<String, ColumnType>> COUNTER_PROPERTIES = new LinkedHashSet<Map.Entry<String, ColumnType>>() {{\n        add(new AbstractMap.SimpleEntry<>(\"name\", ColumnType.STRING));\n        add(new AbstractMap.SimpleEntry<>(\"timestamp\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"count\", ColumnType.DOUBLE));\n    }};", "modifier": "private static final", "type": "Set<Map.Entry<String, ColumnType>>", "declarator": "COUNTER_PROPERTIES = new LinkedHashSet<Map.Entry<String, ColumnType>>() {{\n        add(new AbstractMap.SimpleEntry<>(\"name\", ColumnType.STRING));\n        add(new AbstractMap.SimpleEntry<>(\"timestamp\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"count\", ColumnType.DOUBLE));\n    }}", "var_name": "COUNTER_PROPERTIES"}, {"original_string": "private static final String HISTOGRAM_STREAM_NAME = \"streaming-histogram-metrics\";", "modifier": "private static final", "type": "String", "declarator": "HISTOGRAM_STREAM_NAME = \"streaming-histogram-metrics\"", "var_name": "HISTOGRAM_STREAM_NAME"}, {"original_string": "private static final Set<Map.Entry<String, ColumnType>> HISTOGRAM_PROPERTIES = new LinkedHashSet<Map.Entry<String, ColumnType>>() {{\n        add(new AbstractMap.SimpleEntry<>(\"name\", ColumnType.STRING));\n        add(new AbstractMap.SimpleEntry<>(\"timestamp\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"count\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"max\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"mean\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"min\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"stddev\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p50\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p75\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p95\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p98\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p99\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p999\", ColumnType.FLOAT));\n    }};", "modifier": "private static final", "type": "Set<Map.Entry<String, ColumnType>>", "declarator": "HISTOGRAM_PROPERTIES = new LinkedHashSet<Map.Entry<String, ColumnType>>() {{\n        add(new AbstractMap.SimpleEntry<>(\"name\", ColumnType.STRING));\n        add(new AbstractMap.SimpleEntry<>(\"timestamp\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"count\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"max\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"mean\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"min\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"stddev\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p50\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p75\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p95\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p98\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p99\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p999\", ColumnType.FLOAT));\n    }}", "var_name": "HISTOGRAM_PROPERTIES"}, {"original_string": "private static final String METER_STREAM_NAME = \"streaming-meter-metrics\";", "modifier": "private static final", "type": "String", "declarator": "METER_STREAM_NAME = \"streaming-meter-metrics\"", "var_name": "METER_STREAM_NAME"}, {"original_string": "private static final Set<Map.Entry<String, ColumnType>> METER_PROPERTIES = new LinkedHashSet<Map.Entry<String, ColumnType>>() {{\n        add(new AbstractMap.SimpleEntry<>(\"name\", ColumnType.STRING));\n        add(new AbstractMap.SimpleEntry<>(\"timestamp\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"count\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"mean_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"m1_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"m5_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"m15_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"rate_unit\", ColumnType.STRING));\n    }};", "modifier": "private static final", "type": "Set<Map.Entry<String, ColumnType>>", "declarator": "METER_PROPERTIES = new LinkedHashSet<Map.Entry<String, ColumnType>>() {{\n        add(new AbstractMap.SimpleEntry<>(\"name\", ColumnType.STRING));\n        add(new AbstractMap.SimpleEntry<>(\"timestamp\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"count\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"mean_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"m1_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"m5_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"m15_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"rate_unit\", ColumnType.STRING));\n    }}", "var_name": "METER_PROPERTIES"}, {"original_string": "private static final String TIMER_STREAM_NAME = \"streaming-timer-metrics\";", "modifier": "private static final", "type": "String", "declarator": "TIMER_STREAM_NAME = \"streaming-timer-metrics\"", "var_name": "TIMER_STREAM_NAME"}, {"original_string": "private static final Set<Map.Entry<String, ColumnType>> TIMER_PROPERTIES = new LinkedHashSet<Map.Entry<String, ColumnType>>() {{\n        add(new AbstractMap.SimpleEntry<>(\"name\", ColumnType.STRING));\n        add(new AbstractMap.SimpleEntry<>(\"timestamp\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"count\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"max\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"mean\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"min\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"stddev\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p50\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p75\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p95\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p98\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p99\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p999\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"mean_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"m1_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"m5_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"m15_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"rate_unit\", ColumnType.STRING));\n        add(new AbstractMap.SimpleEntry<>(\"duration_unit\", ColumnType.STRING));\n    }};", "modifier": "private static final", "type": "Set<Map.Entry<String, ColumnType>>", "declarator": "TIMER_PROPERTIES = new LinkedHashSet<Map.Entry<String, ColumnType>>() {{\n        add(new AbstractMap.SimpleEntry<>(\"name\", ColumnType.STRING));\n        add(new AbstractMap.SimpleEntry<>(\"timestamp\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"count\", ColumnType.DOUBLE));\n        add(new AbstractMap.SimpleEntry<>(\"max\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"mean\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"min\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"stddev\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p50\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p75\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p95\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p98\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p99\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"p999\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"mean_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"m1_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"m5_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"m15_rate\", ColumnType.FLOAT));\n        add(new AbstractMap.SimpleEntry<>(\"rate_unit\", ColumnType.STRING));\n        add(new AbstractMap.SimpleEntry<>(\"duration_unit\", ColumnType.STRING));\n    }}", "var_name": "TIMER_PROPERTIES"}, {"original_string": "private final StreamOperationServiceWithoutMetrics streamOperationService;", "modifier": "private final", "type": "StreamOperationServiceWithoutMetrics", "declarator": "streamOperationService", "var_name": "streamOperationService"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "SiddhiStreamReporter", "parameters": "(MetricRegistry registry,\n                                 StreamOperationServiceWithoutMetrics streamOperationService,\n                                 TimeUnit rateUnit,\n                                 TimeUnit durationUnit,\n                                 Clock clock,\n                                 MetricFilter filter)", "modifiers": "private", "return": "", "signature": " SiddhiStreamReporter(MetricRegistry registry,\n                                 StreamOperationServiceWithoutMetrics streamOperationService,\n                                 TimeUnit rateUnit,\n                                 TimeUnit durationUnit,\n                                 Clock clock,\n                                 MetricFilter filter)", "full_signature": "private  SiddhiStreamReporter(MetricRegistry registry,\n                                 StreamOperationServiceWithoutMetrics streamOperationService,\n                                 TimeUnit rateUnit,\n                                 TimeUnit durationUnit,\n                                 Clock clock,\n                                 MetricFilter filter)", "class_method_signature": "SiddhiStreamReporter.SiddhiStreamReporter(MetricRegistry registry,\n                                 StreamOperationServiceWithoutMetrics streamOperationService,\n                                 TimeUnit rateUnit,\n                                 TimeUnit durationUnit,\n                                 Clock clock,\n                                 MetricFilter filter)", "testcase": false, "constructor": true}, {"identifier": "report", "parameters": "(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "modifiers": "@Override public", "return": "void", "signature": "void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "full_signature": "@Override public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "class_method_signature": "SiddhiStreamReporter.report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "testcase": false, "constructor": false}, {"identifier": "reportTimer", "parameters": "(long timestamp, String name, Timer timer)", "modifiers": "private", "return": "void", "signature": "void reportTimer(long timestamp, String name, Timer timer)", "full_signature": "private void reportTimer(long timestamp, String name, Timer timer)", "class_method_signature": "SiddhiStreamReporter.reportTimer(long timestamp, String name, Timer timer)", "testcase": false, "constructor": false}, {"identifier": "reportMeter", "parameters": "(long timestamp, String name, Meter meter)", "modifiers": "private", "return": "void", "signature": "void reportMeter(long timestamp, String name, Meter meter)", "full_signature": "private void reportMeter(long timestamp, String name, Meter meter)", "class_method_signature": "SiddhiStreamReporter.reportMeter(long timestamp, String name, Meter meter)", "testcase": false, "constructor": false}, {"identifier": "reportHistogram", "parameters": "(long timestamp, String name, Histogram histogram)", "modifiers": "private", "return": "void", "signature": "void reportHistogram(long timestamp, String name, Histogram histogram)", "full_signature": "private void reportHistogram(long timestamp, String name, Histogram histogram)", "class_method_signature": "SiddhiStreamReporter.reportHistogram(long timestamp, String name, Histogram histogram)", "testcase": false, "constructor": false}, {"identifier": "reportCounter", "parameters": "(long timestamp, String name, Counter counter)", "modifiers": "private", "return": "void", "signature": "void reportCounter(long timestamp, String name, Counter counter)", "full_signature": "private void reportCounter(long timestamp, String name, Counter counter)", "class_method_signature": "SiddhiStreamReporter.reportCounter(long timestamp, String name, Counter counter)", "testcase": false, "constructor": false}, {"identifier": "reportGauge", "parameters": "(long timestamp, String name, Gauge gauge)", "modifiers": "private", "return": "void", "signature": "void reportGauge(long timestamp, String name, Gauge gauge)", "full_signature": "private void reportGauge(long timestamp, String name, Gauge gauge)", "class_method_signature": "SiddhiStreamReporter.reportGauge(long timestamp, String name, Gauge gauge)", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "(String streamName, Set<Map.Entry<String, ColumnType>> properties, Object... values)", "modifiers": "private", "return": "void", "signature": "void report(String streamName, Set<Map.Entry<String, ColumnType>> properties, Object... values)", "full_signature": "private void report(String streamName, Set<Map.Entry<String, ColumnType>> properties, Object... values)", "class_method_signature": "SiddhiStreamReporter.report(String streamName, Set<Map.Entry<String, ColumnType>> properties, Object... values)", "testcase": false, "constructor": false}, {"identifier": "createStream", "parameters": "(String name, Set<Map.Entry<String, ColumnType>> attributes)", "modifiers": "private", "return": "void", "signature": "void createStream(String name, Set<Map.Entry<String, ColumnType>> attributes)", "full_signature": "private void createStream(String name, Set<Map.Entry<String, ColumnType>> attributes)", "class_method_signature": "SiddhiStreamReporter.createStream(String name, Set<Map.Entry<String, ColumnType>> attributes)", "testcase": false, "constructor": false}, {"identifier": "forRegistry", "parameters": "(MetricRegistry registry, StreamOperationServiceWithoutMetrics streamOperationService)", "modifiers": "public static", "return": "Builder", "signature": "Builder forRegistry(MetricRegistry registry, StreamOperationServiceWithoutMetrics streamOperationService)", "full_signature": "public static Builder forRegistry(MetricRegistry registry, StreamOperationServiceWithoutMetrics streamOperationService)", "class_method_signature": "SiddhiStreamReporter.forRegistry(MetricRegistry registry, StreamOperationServiceWithoutMetrics streamOperationService)", "testcase": false, "constructor": false}], "file": "engine/src/main/java/com/stratio/decision/metrics/SiddhiStreamReporter.java"}, "focal_method": {"identifier": "report", "parameters": "(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers) {\n        final long timestamp = TimeUnit.MILLISECONDS.toSeconds(clock.getTime());\n\n        for (Map.Entry<String, Gauge> entry : gauges.entrySet()) {\n            reportGauge(timestamp, entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<String, Counter> entry : counters.entrySet()) {\n            reportCounter(timestamp, entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<String, Histogram> entry : histograms.entrySet()) {\n            reportHistogram(timestamp, entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<String, Meter> entry : meters.entrySet()) {\n            reportMeter(timestamp, entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<String, Timer> entry : timers.entrySet()) {\n            reportTimer(timestamp, entry.getKey(), entry.getValue());\n        }\n    }", "signature": "void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "full_signature": "@Override public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "class_method_signature": "SiddhiStreamReporter.report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "testcase": false, "constructor": false, "invocations": ["toSeconds", "getTime", "entrySet", "reportGauge", "getKey", "getValue", "entrySet", "reportCounter", "getKey", "getValue", "entrySet", "reportHistogram", "getKey", "getValue", "entrySet", "reportMeter", "getKey", "getValue", "entrySet", "reportTimer", "getKey", "getValue"]}, "repository": {"repo_id": 20521495, "url": "https://github.com/Stratio/Decision", "language": "Java", "is_fork": false, "fork_count": 85, "stargazer_count": 305, "size": 41858, "license": "licensed"}}