{"test_class": {"identifier": "DataTableUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/excel/DataTableUtilsTest.java"}, "test_case": {"identifier": "mergeComplementaryColumnsThatNeedsMultiplePasses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mergeComplementaryColumnsThatNeedsMultiplePasses() {\n        DataTable dt = new DataTable(1);\n        dt.addRow(\"H1\", \"  \", \"H2\", \"  \", \"H4\");\n        dt.addRow(\"A1\", \"B1\", \"  \", \"D1\", \"  \");\n        dt.addRow(\"A2\", \"B2\", \"  \", \"  \", \"E2\");\n        dt.addRow(\"A3\");\n\n        DataTable merged = DataTableUtils.mergeComplementaryColumns(dt);\n        assertThat(merged.getColumnsCount(), is(3));\n        assertThat(merged.getColumn(0), is(Arrays.asList(\"H1\", \"A1\", \"A2\", \"A3\")));\n        assertThat(merged.getColumn(1), is(Arrays.asList(\"H2\", \"B1\", \"B2\", \"\")));\n        assertThat(merged.getColumn(2), is(Arrays.asList(\"H4\", \"D1\", \"E2\", \"\")));\n\n    }", "signature": "void mergeComplementaryColumnsThatNeedsMultiplePasses()", "full_signature": "@Test public void mergeComplementaryColumnsThatNeedsMultiplePasses()", "class_method_signature": "DataTableUtilsTest.mergeComplementaryColumnsThatNeedsMultiplePasses()", "testcase": true, "constructor": false, "invocations": ["addRow", "addRow", "addRow", "addRow", "mergeComplementaryColumns", "assertThat", "getColumnsCount", "is", "assertThat", "getColumn", "is", "asList", "assertThat", "getColumn", "is", "asList", "assertThat", "getColumn", "is", "asList"]}, "focal_class": {"identifier": "DataTableUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DataTableUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataTableUtils.class)", "var_name": "LOG"}], "methods": [{"identifier": "DataTableUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " DataTableUtils()", "full_signature": "private  DataTableUtils()", "class_method_signature": "DataTableUtils.DataTableUtils()", "testcase": false, "constructor": true}, {"identifier": "mergeTablesSpanningMultiplePages", "parameters": "(List<DataTable> dataTables)", "modifiers": "public static", "return": "List<DataTable>", "signature": "List<DataTable> mergeTablesSpanningMultiplePages(List<DataTable> dataTables)", "full_signature": "public static List<DataTable> mergeTablesSpanningMultiplePages(List<DataTable> dataTables)", "class_method_signature": "DataTableUtils.mergeTablesSpanningMultiplePages(List<DataTable> dataTables)", "testcase": false, "constructor": false}, {"identifier": "mergeComplementaryColumns", "parameters": "(List<DataTable> dataTables)", "modifiers": "public static", "return": "List<DataTable>", "signature": "List<DataTable> mergeComplementaryColumns(List<DataTable> dataTables)", "full_signature": "public static List<DataTable> mergeComplementaryColumns(List<DataTable> dataTables)", "class_method_signature": "DataTableUtils.mergeComplementaryColumns(List<DataTable> dataTables)", "testcase": false, "constructor": false}, {"identifier": "addBlankColumnsToMatchHeaders", "parameters": "(DataTable a, DataTable b)", "modifiers": "public static", "return": "void", "signature": "void addBlankColumnsToMatchHeaders(DataTable a, DataTable b)", "full_signature": "public static void addBlankColumnsToMatchHeaders(DataTable a, DataTable b)", "class_method_signature": "DataTableUtils.addBlankColumnsToMatchHeaders(DataTable a, DataTable b)", "testcase": false, "constructor": false}, {"identifier": "mergeComplementaryColumns", "parameters": "(DataTable dataTable)", "modifiers": "static", "return": "DataTable", "signature": "DataTable mergeComplementaryColumns(DataTable dataTable)", "full_signature": "static DataTable mergeComplementaryColumns(DataTable dataTable)", "class_method_signature": "DataTableUtils.mergeComplementaryColumns(DataTable dataTable)", "testcase": false, "constructor": false}, {"identifier": "areComplementary", "parameters": "(List<String> column1, List<String> column2)", "modifiers": "public static", "return": "boolean", "signature": "boolean areComplementary(List<String> column1, List<String> column2)", "full_signature": "public static boolean areComplementary(List<String> column1, List<String> column2)", "class_method_signature": "DataTableUtils.areComplementary(List<String> column1, List<String> column2)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/excel/DataTableUtils.java"}, "focal_method": {"identifier": "mergeComplementaryColumns", "parameters": "(List<DataTable> dataTables)", "modifiers": "public static", "return": "List<DataTable>", "body": "public static List<DataTable> mergeComplementaryColumns(List<DataTable> dataTables) {\n        List<DataTable> results = new ArrayList<>();\n        for(DataTable dt: dataTables) {\n            results.add(mergeComplementaryColumns(dt));\n        }\n        return results;\n    }", "signature": "List<DataTable> mergeComplementaryColumns(List<DataTable> dataTables)", "full_signature": "public static List<DataTable> mergeComplementaryColumns(List<DataTable> dataTables)", "class_method_signature": "DataTableUtils.mergeComplementaryColumns(List<DataTable> dataTables)", "testcase": false, "constructor": false, "invocations": ["add", "mergeComplementaryColumns"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}