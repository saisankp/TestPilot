{"test_class": {"identifier": "PgpPipeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IPipeLineSession session;", "modifier": "private", "type": "IPipeLineSession", "declarator": "session", "var_name": "session"}, {"original_string": "protected PGPPipe encryptPipe;", "modifier": "protected", "type": "PGPPipe", "declarator": "encryptPipe", "var_name": "encryptPipe"}, {"original_string": "protected PGPPipe decryptPipe;", "modifier": "protected", "type": "PGPPipe", "declarator": "decryptPipe", "var_name": "decryptPipe"}, {"original_string": "private String expectation;", "modifier": "private", "type": "String", "declarator": "expectation", "var_name": "expectation"}, {"original_string": "private String[] encryptParams, decryptParams;", "modifier": "private", "type": "String[]", "declarator": "encryptParams", "var_name": "encryptParams"}, {"original_string": "private final String MESSAGE = \"My Secret!!\";", "modifier": "private final", "type": "String", "declarator": "MESSAGE = \"My Secret!!\"", "var_name": "MESSAGE"}, {"original_string": "private final String PGP_FOLDER = \"PGP/\";", "modifier": "private final", "type": "String", "declarator": "PGP_FOLDER = \"PGP/\"", "var_name": "PGP_FOLDER"}, {"original_string": "private static final String[] sender = {\"test@ibissource.org\", \"ibistest\", \"first/private.asc\", \"first/public.asc\", \"first/public.asc;second/public.asc\"};", "modifier": "private static final", "type": "String[]", "declarator": "sender = {\"test@ibissource.org\", \"ibistest\", \"first/private.asc\", \"first/public.asc\", \"first/public.asc;second/public.asc\"}", "var_name": "sender"}, {"original_string": "private static final String[] recipient = {\"second@ibissource.org\", \"secondtest\", \"second/private.asc\", \"second/public.asc\", \"first/public.asc;second/public.asc\"};", "modifier": "private static final", "type": "String[]", "declarator": "recipient = {\"second@ibissource.org\", \"secondtest\", \"second/private.asc\", \"second/public.asc\", \"first/public.asc;second/public.asc\"}", "var_name": "recipient"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/PgpPipeTest.java"}, "test_case": {"identifier": "dotest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void dotest() throws Throwable {\n\t\ttry {\n\t\t\t// Configure pipes\n\t\t\tconfigurePipe(encryptPipe, encryptParams);\n\t\t\tconfigurePipe(decryptPipe, decryptParams);\n\n\t\t\t// Encryption phase\n\t\t\tMessage encryptMessage = new Message(MESSAGE);\n\t\t\tPipeRunResult encryptionResult = encryptPipe.doPipe(encryptMessage, session);\n\n\t\t\t// Make sure it's PGP message\n\t\t\tString mid = new String((byte[]) encryptionResult.getResult().asObject());\n\t\t\tassertMessage(mid, MESSAGE);\n\n\t\t\t// Decryption phase\n\t\t\tMessage decryptMessage = Message.asMessage(encryptionResult.getResult());\n\t\t\tPipeRunResult decryptionResult = decryptPipe.doPipe(decryptMessage, session);\n\t\t\tbyte[] result = (byte[]) decryptionResult.getResult().asObject();\n\n\t\t\t// Assert decrypted message equals to the original message\n\t\t\tAssert.assertEquals(MESSAGE, new String(result));\n\t\t\tAssert.assertEquals(\"success\", expectation);\n\t\t} catch (Exception e) {\n\t\t\tif (checkExceptionClass(e, expectation)) {\n\t\t\t\tAssert.assertTrue(true);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}", "signature": "void dotest()", "full_signature": "@Test public void dotest()", "class_method_signature": "PgpPipeTest.dotest()", "testcase": true, "constructor": false, "invocations": ["configurePipe", "configurePipe", "doPipe", "asObject", "getResult", "assertMessage", "asMessage", "getResult", "doPipe", "asObject", "getResult", "assertEquals", "assertEquals", "checkExceptionClass", "assertTrue"]}, "focal_class": {"identifier": "PGPPipe", "superclass": "extends StreamingPipe", "interfaces": "", "fields": [{"original_string": "private String action;", "modifier": "private", "type": "String", "declarator": "action", "var_name": "action"}, {"original_string": "private String[] recipients;", "modifier": "private", "type": "String[]", "declarator": "recipients", "var_name": "recipients"}, {"original_string": "private String[] verificationAddresses;", "modifier": "private", "type": "String[]", "declarator": "verificationAddresses", "var_name": "verificationAddresses"}, {"original_string": "private String secretKey;", "modifier": "private", "type": "String", "declarator": "secretKey", "var_name": "secretKey"}, {"original_string": "private String secretPassword;", "modifier": "private", "type": "String", "declarator": "secretPassword", "var_name": "secretPassword"}, {"original_string": "private String[] publicKeys;", "modifier": "private", "type": "String[]", "declarator": "publicKeys", "var_name": "publicKeys"}, {"original_string": "private PGPAction pgpAction;", "modifier": "private", "type": "PGPAction", "declarator": "pgpAction", "var_name": "pgpAction"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "PGPPipe.configure()", "testcase": false, "constructor": false}, {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "PGPPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "setAction", "parameters": "(String action)", "modifiers": "@IbisDoc({\"Action to be taken when pipe is executed. It can be one of the followed: Encrypt (encrypts the input), Sign (Encrypts and Signs the input), Decrypt (Decrypts the input), Verify (Decrypts and verifies the input)\"}) public", "return": "void", "signature": "void setAction(String action)", "full_signature": "@IbisDoc({\"Action to be taken when pipe is executed. It can be one of the followed: Encrypt (encrypts the input), Sign (Encrypts and Signs the input), Decrypt (Decrypts the input), Verify (Decrypts and verifies the input)\"}) public void setAction(String action)", "class_method_signature": "PGPPipe.setAction(String action)", "testcase": false, "constructor": false}, {"identifier": "setRecipients", "parameters": "(String recipients)", "modifiers": "@IbisDoc({\"Recipients to be used during encryption stage. If multiple, separate with ';' (semicolon)\"}) public", "return": "void", "signature": "void setRecipients(String recipients)", "full_signature": "@IbisDoc({\"Recipients to be used during encryption stage. If multiple, separate with ';' (semicolon)\"}) public void setRecipients(String recipients)", "class_method_signature": "PGPPipe.setRecipients(String recipients)", "testcase": false, "constructor": false}, {"identifier": "setVerificationAddresses", "parameters": "(String verificationAddresses)", "modifiers": "@IbisDoc({\"Emails of the senders. This will be used to verify that all the senders have signed the given message. \" + \"If not set, and the action is verify; this pipe will validate that at least one person has signed. \" + \"For signing action, it needs to be set to the email that was used to generate the private key \" + \"that is being used for this process.\"}) public", "return": "void", "signature": "void setVerificationAddresses(String verificationAddresses)", "full_signature": "@IbisDoc({\"Emails of the senders. This will be used to verify that all the senders have signed the given message. \" + \"If not set, and the action is verify; this pipe will validate that at least one person has signed. \" + \"For signing action, it needs to be set to the email that was used to generate the private key \" + \"that is being used for this process.\"}) public void setVerificationAddresses(String verificationAddresses)", "class_method_signature": "PGPPipe.setVerificationAddresses(String verificationAddresses)", "testcase": false, "constructor": false}, {"identifier": "setSecretKey", "parameters": "(String secretKey)", "modifiers": "@IbisDoc({\"Path to the private key. It will be used when signing or decrypting.\"}) public", "return": "void", "signature": "void setSecretKey(String secretKey)", "full_signature": "@IbisDoc({\"Path to the private key. It will be used when signing or decrypting.\"}) public void setSecretKey(String secretKey)", "class_method_signature": "PGPPipe.setSecretKey(String secretKey)", "testcase": false, "constructor": false}, {"identifier": "setSecretPassword", "parameters": "(String secretPassword)", "modifiers": "@IbisDoc({\"Password for the private key.\"}) public", "return": "void", "signature": "void setSecretPassword(String secretPassword)", "full_signature": "@IbisDoc({\"Password for the private key.\"}) public void setSecretPassword(String secretPassword)", "class_method_signature": "PGPPipe.setSecretPassword(String secretPassword)", "testcase": false, "constructor": false}, {"identifier": "setPublicKeys", "parameters": "(String publicKeys)", "modifiers": "@IbisDoc({\"Path to the recipient's public key. It will be used for encryption and verification.\"}) public", "return": "void", "signature": "void setPublicKeys(String publicKeys)", "full_signature": "@IbisDoc({\"Path to the recipient's public key. It will be used for encryption and verification.\"}) public void setPublicKeys(String publicKeys)", "class_method_signature": "PGPPipe.setPublicKeys(String publicKeys)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String str)", "modifiers": "private", "return": "String[]", "signature": "String[] split(String str)", "full_signature": "private String[] split(String str)", "class_method_signature": "PGPPipe.split(String str)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/PGPPipe.java"}, "focal_method": {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "body": "@Override\n\tpublic PipeRunResult doPipe(Message message, IPipeLineSession session) throws PipeRunException {\n\t\ttry (MessageOutputStream target=getTargetStream(session)) {\n\t\t\ttry (OutputStream out = target.asStream()) {\n\t\t\t\tpgpAction.run(message.asInputStream(), out);\n\t\t\t}\n\t\t\treturn target.getPipeRunResult();\n\t\t} catch (Exception e) {\n\t\t\tthrow new PipeRunException(this, \"Exception was thrown during PGPPipe execution.\", e);\n\t\t}\n\t}", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "PGPPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false, "invocations": ["getTargetStream", "asStream", "run", "asInputStream", "getPipeRunResult"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}