{"test_class": {"identifier": "ErrorNamespaceValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "conjure-core/src/test/java/com/palantir/conjure/defs/validator/ErrorNamespaceValidatorTest.java"}, "test_case": {"identifier": "testInvalidErrorNamespaces", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidErrorNamespaces() {\n        for (String invalid :\n                new String[] {\"conjure\", \"palantirFoo\", \"palantir-foo\", \"PALANTIR-FOO\", \"palantir_foo\", \"PALANTIR_FOO\"\n                }) {\n            assertThatThrownBy(() -> ErrorNamespaceValidator.validate(ErrorNamespace.of(invalid)))\n                    .isInstanceOf(IllegalArgumentException.class)\n                    .hasMessageContaining(\"Namespace for errors must match pattern\")\n                    .hasMessageContaining(invalid);\n        }\n    }", "signature": "void testInvalidErrorNamespaces()", "full_signature": "@Test public void testInvalidErrorNamespaces()", "class_method_signature": "ErrorNamespaceValidatorTest.testInvalidErrorNamespaces()", "testcase": true, "constructor": false, "invocations": ["hasMessageContaining", "hasMessageContaining", "isInstanceOf", "assertThatThrownBy", "validate", "of"]}, "focal_class": {"identifier": "ErrorNamespaceValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern UPPER_CAMEL_CASE = Pattern.compile(\"(([A-Z][a-z0-9]+)+)\");", "modifier": "private static final", "type": "Pattern", "declarator": "UPPER_CAMEL_CASE = Pattern.compile(\"(([A-Z][a-z0-9]+)+)\")", "var_name": "UPPER_CAMEL_CASE"}], "methods": [{"identifier": "ErrorNamespaceValidator", "parameters": "()", "modifiers": "private", "return": "", "signature": " ErrorNamespaceValidator()", "full_signature": "private  ErrorNamespaceValidator()", "class_method_signature": "ErrorNamespaceValidator.ErrorNamespaceValidator()", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(ErrorNamespace name)", "modifiers": "public static", "return": "void", "signature": "void validate(ErrorNamespace name)", "full_signature": "public static void validate(ErrorNamespace name)", "class_method_signature": "ErrorNamespaceValidator.validate(ErrorNamespace name)", "testcase": false, "constructor": false}], "file": "conjure-core/src/main/java/com/palantir/conjure/defs/validator/ErrorNamespaceValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(ErrorNamespace name)", "modifiers": "public static", "return": "void", "body": "public static void validate(ErrorNamespace name) {\n        Preconditions.checkArgument(\n                UPPER_CAMEL_CASE.matcher(name.get()).matches(),\n                \"Namespace for errors must match pattern %s: %s\",\n                UPPER_CAMEL_CASE,\n                name);\n    }", "signature": "void validate(ErrorNamespace name)", "full_signature": "public static void validate(ErrorNamespace name)", "class_method_signature": "ErrorNamespaceValidator.validate(ErrorNamespace name)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "matches", "matcher", "get"]}, "repository": {"repo_id": 134616422, "url": "https://github.com/palantir/conjure", "stars": 211, "created": "5/23/2018 7:28:43 PM +00:00", "updates": "2020-01-24T17:51:52+00:00", "fork": "False", "license": "licensed"}}