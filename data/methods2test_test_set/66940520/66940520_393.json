{"test_class": {"identifier": "DefaultDataQueryServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private IdentifiableObjectManager idObjectManager;", "modifier": "@Mock\n    private", "type": "IdentifiableObjectManager", "declarator": "idObjectManager", "var_name": "idObjectManager"}, {"original_string": "@Mock\n    private OrganisationUnitService organisationUnitService;", "modifier": "@Mock\n    private", "type": "OrganisationUnitService", "declarator": "organisationUnitService", "var_name": "organisationUnitService"}, {"original_string": "@Mock\n    private DimensionService dimensionService;", "modifier": "@Mock\n    private", "type": "DimensionService", "declarator": "dimensionService", "var_name": "dimensionService"}, {"original_string": "@Mock\n    private AnalyticsSecurityManager securityManager;", "modifier": "@Mock\n    private", "type": "AnalyticsSecurityManager", "declarator": "securityManager", "var_name": "securityManager"}, {"original_string": "@Mock\n    private SystemSettingManager systemSettingManager;", "modifier": "@Mock\n    private", "type": "SystemSettingManager", "declarator": "systemSettingManager", "var_name": "systemSettingManager"}, {"original_string": "@Mock\n    private AclService aclService;", "modifier": "@Mock\n    private", "type": "AclService", "declarator": "aclService", "var_name": "aclService"}, {"original_string": "@Mock\n    private CurrentUserService currentUserService;", "modifier": "@Mock\n    private", "type": "CurrentUserService", "declarator": "currentUserService", "var_name": "currentUserService"}, {"original_string": "@Mock\n    private I18nManager i18nManager;", "modifier": "@Mock\n    private", "type": "I18nManager", "declarator": "i18nManager", "var_name": "i18nManager"}, {"original_string": "@Mock\n    private I18n i18n;", "modifier": "@Mock\n    private", "type": "I18n", "declarator": "i18n", "var_name": "i18n"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "private DefaultDataQueryService target;", "modifier": "private", "type": "DefaultDataQueryService", "declarator": "target", "var_name": "target"}, {"original_string": "private final static DataElement DATA_ELEMENT_1 = buildDataElement( \"fbfJHSPpUQD\", \"D1\" );", "modifier": "private final static", "type": "DataElement", "declarator": "DATA_ELEMENT_1 = buildDataElement( \"fbfJHSPpUQD\", \"D1\" )", "var_name": "DATA_ELEMENT_1"}, {"original_string": "private final static DataElement DATA_ELEMENT_2 = buildDataElement( \"cYeuwXTCPkU\", \"D2\" );", "modifier": "private final static", "type": "DataElement", "declarator": "DATA_ELEMENT_2 = buildDataElement( \"cYeuwXTCPkU\", \"D2\" )", "var_name": "DATA_ELEMENT_2"}, {"original_string": "private final static DataElement DATA_ELEMENT_3 = buildDataElement( \"Jtf34kNZhzP\", \"D3\" );", "modifier": "private final static", "type": "DataElement", "declarator": "DATA_ELEMENT_3 = buildDataElement( \"Jtf34kNZhzP\", \"D3\" )", "var_name": "DATA_ELEMENT_3"}, {"original_string": "private final static String PERIOD_DIMENSION = \"LAST_12_MONTHS;LAST_YEAR\";", "modifier": "private final static", "type": "String", "declarator": "PERIOD_DIMENSION = \"LAST_12_MONTHS;LAST_YEAR\"", "var_name": "PERIOD_DIMENSION"}, {"original_string": "private RequestBuilder rb;", "modifier": "private", "type": "RequestBuilder", "declarator": "rb", "var_name": "rb"}, {"original_string": "private OrganisationUnit rootOu;", "modifier": "private", "type": "OrganisationUnit", "declarator": "rootOu", "var_name": "rootOu"}, {"original_string": "private BeanRandomizer beanRandomizer;", "modifier": "private", "type": "BeanRandomizer", "declarator": "beanRandomizer", "var_name": "beanRandomizer"}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/data/DefaultDataQueryServiceTest.java"}, "test_case": {"identifier": "convertAnalyticsRequestWithOrgUnitLevelAsFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertAnalyticsRequestWithOrgUnitLevelAsFilter()\n    {\n        OrganisationUnit level2OuA = new OrganisationUnit( \"Bo\" );\n        OrganisationUnit level2OuB = new OrganisationUnit( \"Bombali\" );\n\n        mockDimensionService();\n\n        when( organisationUnitService.getOrganisationUnitLevelByLevelOrUid( \"wjP19dkFeIk\" ) ).thenReturn( 2 );\n\n        when( idObjectManager.getObject( OrganisationUnit.class, UID, \"ImspTQPwCqd\" ) ).thenReturn( rootOu );\n\n        when( organisationUnitService.getOrganisationUnitsAtLevels( Mockito.anyList(),\n            Mockito.anyList() ) ).thenReturn( Lists.newArrayList( level2OuA, level2OuB ) );\n\n        when( organisationUnitService.getOrganisationUnitLevelByLevel( 2 ) )\n            .thenReturn( buildOrgUnitLevel( 2, \"level2UID\", \"District\", null ) );\n\n        rb.addOuFilter( \"LEVEL-wjP19dkFeIk;ImspTQPwCqd\" );\n        rb.addDimension( concatenateUuid( DATA_ELEMENT_1, DATA_ELEMENT_2, DATA_ELEMENT_3 ) );\n        rb.addPeDimension( PERIOD_DIMENSION );\n\n        DataQueryRequest request = DataQueryRequest.newBuilder().filter( rb.getFilterParams() )\n            .dimension( rb.getDimensionParams() ).build();\n\n        DataQueryParams params = target.getFromRequest( request );\n        DimensionalObject filter = params.getFilters().get( 0 );\n\n        assertThat( filter.getDimensionalKeywords().getGroupBy(), hasSize( 2 ) );\n        assertThat( filter.getDimensionalKeywords().getGroupBy(),\n            IsIterableContainingInAnyOrder.containsInAnyOrder(\n                allOf( hasProperty( \"name\", is( \"District\" ) ), hasProperty( \"uid\", is( \"level2UID\" ) ),\n                        hasProperty( \"code\", is( nullValue() ) ) ),\n                allOf( hasProperty( \"name\", is( \"Sierra Leone\" ) ), hasProperty( \"uid\", is( rootOu.getUid() ) ),\n                        hasProperty( \"code\", is( rootOu.getCode() ) ) ) ) );\n\n    }", "signature": "void convertAnalyticsRequestWithOrgUnitLevelAsFilter()", "full_signature": "@Test public void convertAnalyticsRequestWithOrgUnitLevelAsFilter()", "class_method_signature": "DefaultDataQueryServiceTest.convertAnalyticsRequestWithOrgUnitLevelAsFilter()", "testcase": true, "constructor": false, "invocations": ["mockDimensionService", "thenReturn", "when", "getOrganisationUnitLevelByLevelOrUid", "thenReturn", "when", "getObject", "thenReturn", "when", "getOrganisationUnitsAtLevels", "anyList", "anyList", "newArrayList", "thenReturn", "when", "getOrganisationUnitLevelByLevel", "buildOrgUnitLevel", "addOuFilter", "addDimension", "concatenateUuid", "addPeDimension", "build", "dimension", "filter", "newBuilder", "getFilterParams", "getDimensionParams", "getFromRequest", "get", "getFilters", "assertThat", "getGroupBy", "getDimensionalKeywords", "hasSize", "assertThat", "getGroupBy", "getDimensionalKeywords", "containsInAnyOrder", "allOf", "hasProperty", "is", "hasProperty", "is", "hasProperty", "is", "nullValue", "allOf", "hasProperty", "is", "hasProperty", "is", "getUid", "hasProperty", "is", "getCode"]}, "focal_class": {"identifier": "DefaultDataQueryService", "superclass": "", "interfaces": "implements DataQueryService", "fields": [{"original_string": "private IdentifiableObjectManager idObjectManager;", "modifier": "private", "type": "IdentifiableObjectManager", "declarator": "idObjectManager", "var_name": "idObjectManager"}, {"original_string": "private OrganisationUnitService organisationUnitService;", "modifier": "private", "type": "OrganisationUnitService", "declarator": "organisationUnitService", "var_name": "organisationUnitService"}, {"original_string": "private DimensionService dimensionService;", "modifier": "private", "type": "DimensionService", "declarator": "dimensionService", "var_name": "dimensionService"}, {"original_string": "private AnalyticsSecurityManager securityManager;", "modifier": "private", "type": "AnalyticsSecurityManager", "declarator": "securityManager", "var_name": "securityManager"}, {"original_string": "private SystemSettingManager systemSettingManager;", "modifier": "private", "type": "SystemSettingManager", "declarator": "systemSettingManager", "var_name": "systemSettingManager"}, {"original_string": "private AclService aclService;", "modifier": "private", "type": "AclService", "declarator": "aclService", "var_name": "aclService"}, {"original_string": "private CurrentUserService currentUserService;", "modifier": "private", "type": "CurrentUserService", "declarator": "currentUserService", "var_name": "currentUserService"}, {"original_string": "private I18nManager i18nManager;", "modifier": "private", "type": "I18nManager", "declarator": "i18nManager", "var_name": "i18nManager"}], "methods": [{"identifier": "DefaultDataQueryService", "parameters": "( IdentifiableObjectManager idObjectManager,\n        OrganisationUnitService organisationUnitService, DimensionService dimensionService,\n        AnalyticsSecurityManager securityManager, SystemSettingManager systemSettingManager, AclService aclService,\n        CurrentUserService currentUserService, I18nManager i18nManager )", "modifiers": "public", "return": "", "signature": " DefaultDataQueryService( IdentifiableObjectManager idObjectManager,\n        OrganisationUnitService organisationUnitService, DimensionService dimensionService,\n        AnalyticsSecurityManager securityManager, SystemSettingManager systemSettingManager, AclService aclService,\n        CurrentUserService currentUserService, I18nManager i18nManager )", "full_signature": "public  DefaultDataQueryService( IdentifiableObjectManager idObjectManager,\n        OrganisationUnitService organisationUnitService, DimensionService dimensionService,\n        AnalyticsSecurityManager securityManager, SystemSettingManager systemSettingManager, AclService aclService,\n        CurrentUserService currentUserService, I18nManager i18nManager )", "class_method_signature": "DefaultDataQueryService.DefaultDataQueryService( IdentifiableObjectManager idObjectManager,\n        OrganisationUnitService organisationUnitService, DimensionService dimensionService,\n        AnalyticsSecurityManager securityManager, SystemSettingManager systemSettingManager, AclService aclService,\n        CurrentUserService currentUserService, I18nManager i18nManager )", "testcase": false, "constructor": true}, {"identifier": "getFromRequest", "parameters": "( DataQueryRequest request )", "modifiers": "@Override public", "return": "DataQueryParams", "signature": "DataQueryParams getFromRequest( DataQueryRequest request )", "full_signature": "@Override public DataQueryParams getFromRequest( DataQueryRequest request )", "class_method_signature": "DefaultDataQueryService.getFromRequest( DataQueryRequest request )", "testcase": false, "constructor": false}, {"identifier": "getFromAnalyticalObject", "parameters": "( AnalyticalObject object )", "modifiers": "@Override public", "return": "DataQueryParams", "signature": "DataQueryParams getFromAnalyticalObject( AnalyticalObject object )", "full_signature": "@Override public DataQueryParams getFromAnalyticalObject( AnalyticalObject object )", "class_method_signature": "DefaultDataQueryService.getFromAnalyticalObject( AnalyticalObject object )", "testcase": false, "constructor": false}, {"identifier": "getDimensionalObjects", "parameters": "( Set<String> dimensionParams, Date relativePeriodDate, String userOrgUnit,\n        I18nFormat format, boolean allowAllPeriods, IdScheme inputIdScheme )", "modifiers": "@Override public", "return": "List<DimensionalObject>", "signature": "List<DimensionalObject> getDimensionalObjects( Set<String> dimensionParams, Date relativePeriodDate, String userOrgUnit,\n        I18nFormat format, boolean allowAllPeriods, IdScheme inputIdScheme )", "full_signature": "@Override public List<DimensionalObject> getDimensionalObjects( Set<String> dimensionParams, Date relativePeriodDate, String userOrgUnit,\n        I18nFormat format, boolean allowAllPeriods, IdScheme inputIdScheme )", "class_method_signature": "DefaultDataQueryService.getDimensionalObjects( Set<String> dimensionParams, Date relativePeriodDate, String userOrgUnit,\n        I18nFormat format, boolean allowAllPeriods, IdScheme inputIdScheme )", "testcase": false, "constructor": false}, {"identifier": "getDimension", "parameters": "( String dimension, List<String> items, Date relativePeriodDate,\n        List<OrganisationUnit> userOrgUnits, I18nFormat format, boolean allowNull, boolean allowAllPeriodItems, IdScheme inputIdScheme )", "modifiers": "@Override public", "return": "DimensionalObject", "signature": "DimensionalObject getDimension( String dimension, List<String> items, Date relativePeriodDate,\n        List<OrganisationUnit> userOrgUnits, I18nFormat format, boolean allowNull, boolean allowAllPeriodItems, IdScheme inputIdScheme )", "full_signature": "@Override public DimensionalObject getDimension( String dimension, List<String> items, Date relativePeriodDate,\n        List<OrganisationUnit> userOrgUnits, I18nFormat format, boolean allowNull, boolean allowAllPeriodItems, IdScheme inputIdScheme )", "class_method_signature": "DefaultDataQueryService.getDimension( String dimension, List<String> items, Date relativePeriodDate,\n        List<OrganisationUnit> userOrgUnits, I18nFormat format, boolean allowNull, boolean allowAllPeriodItems, IdScheme inputIdScheme )", "testcase": false, "constructor": false}, {"identifier": "getUserOrgUnits", "parameters": "( DataQueryParams params, String userOrgUnit )", "modifiers": "@Override public", "return": "List<OrganisationUnit>", "signature": "List<OrganisationUnit> getUserOrgUnits( DataQueryParams params, String userOrgUnit )", "full_signature": "@Override public List<OrganisationUnit> getUserOrgUnits( DataQueryParams params, String userOrgUnit )", "class_method_signature": "DefaultDataQueryService.getUserOrgUnits( DataQueryParams params, String userOrgUnit )", "testcase": false, "constructor": false}, {"identifier": "getCategoryOptionComboList", "parameters": "( List<String> items, IdScheme inputIdScheme )", "modifiers": "private", "return": "List<DimensionalItemObject>", "signature": "List<DimensionalItemObject> getCategoryOptionComboList( List<String> items, IdScheme inputIdScheme )", "full_signature": "private List<DimensionalItemObject> getCategoryOptionComboList( List<String> items, IdScheme inputIdScheme )", "class_method_signature": "DefaultDataQueryService.getCategoryOptionComboList( List<String> items, IdScheme inputIdScheme )", "testcase": false, "constructor": false}, {"identifier": "getCanReadItems", "parameters": "( User user, DimensionalObject object )", "modifiers": "private", "return": "List<DimensionalItemObject>", "signature": "List<DimensionalItemObject> getCanReadItems( User user, DimensionalObject object )", "full_signature": "private List<DimensionalItemObject> getCanReadItems( User user, DimensionalObject object )", "class_method_signature": "DefaultDataQueryService.getCanReadItems( User user, DimensionalObject object )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/data/DefaultDataQueryService.java"}, "focal_method": {"identifier": "getFromRequest", "parameters": "( DataQueryRequest request )", "modifiers": "@Override public", "return": "DataQueryParams", "body": "@Override\n    public DataQueryParams getFromRequest( DataQueryRequest request )\n    {\n        I18nFormat format = i18nManager.getI18nFormat();\n\n        DataQueryParams.Builder params = DataQueryParams.newBuilder();\n\n        IdScheme inputIdScheme = ObjectUtils.firstNonNull( request.getInputIdScheme(), IdScheme.UID );\n\n        if ( request.getDimension() != null && !request.getDimension().isEmpty() )\n        {\n            params.addDimensions( getDimensionalObjects( request.getDimension(), request.getRelativePeriodDate(), request.getUserOrgUnit(), format,\n                request.isAllowAllPeriods(), inputIdScheme ) );\n        }\n\n        if ( request.getFilter() != null && !request.getFilter().isEmpty() )\n        {\n            params.addFilters( getDimensionalObjects( request.getFilter(), request.getRelativePeriodDate(), request.getUserOrgUnit(), format, request.isAllowAllPeriods(), inputIdScheme ) );\n        }\n\n        if ( request.getMeasureCriteria() != null && !request.getMeasureCriteria().isEmpty() )\n        {\n            params.withMeasureCriteria( getMeasureCriteriaFromParam( request.getMeasureCriteria() ) );\n        }\n\n        if ( request.getPreAggregationMeasureCriteria() != null && !request.getPreAggregationMeasureCriteria().isEmpty() )\n        {\n            params.withPreAggregationMeasureCriteria( getMeasureCriteriaFromParam( request.getPreAggregationMeasureCriteria()) );\n        }\n\n        if ( request.getAggregationType() != null )\n        {\n            params.withAggregationType( AnalyticsAggregationType.fromAggregationType( request.getAggregationType() ) );\n        }\n\n        return params\n            .withStartDate( request.getStartDate() )\n            .withEndDate( request.getEndDate() )\n            .withOrder( request.getOrder() )\n            .withTimeField( request.getTimeField() )\n            .withOrgUnitField( request.getOrgUnitField() )\n            .withSkipMeta( request.isSkipMeta() )\n            .withSkipData( request.isSkipData() )\n            .withSkipRounding( request.isSkipRounding() )\n            .withCompletedOnly( request.isCompletedOnly() )\n            .withIgnoreLimit( request.isIgnoreLimit() )\n            .withHierarchyMeta( request.isHierarchyMeta() )\n            .withHideEmptyRows( request.isHideEmptyRows() )\n            .withHideEmptyColumns( request.isHideEmptyColumns() )\n            .withShowHierarchy( request.isShowHierarchy() )\n            .withIncludeNumDen( request.isIncludeNumDen() )\n            .withIncludeMetadataDetails( request.isIncludeMetadataDetails() )\n            .withDisplayProperty( request.getDisplayProperty() )\n            .withOutputIdScheme( request.getOutputIdScheme() )\n            .withOutputFormat( OutputFormat.ANALYTICS )\n            .withDuplicatesOnly( request.isDuplicatesOnly() )\n            .withApprovalLevel( request.getApprovalLevel() )\n            .withApiVersion( request.getApiVersion() )\n            .withUserOrgUnitType( request.getUserOrgUnitType() )\n            .build();\n    }", "signature": "DataQueryParams getFromRequest( DataQueryRequest request )", "full_signature": "@Override public DataQueryParams getFromRequest( DataQueryRequest request )", "class_method_signature": "DefaultDataQueryService.getFromRequest( DataQueryRequest request )", "testcase": false, "constructor": false, "invocations": ["getI18nFormat", "newBuilder", "firstNonNull", "getInputIdScheme", "getDimension", "isEmpty", "getDimension", "addDimensions", "getDimensionalObjects", "getDimension", "getRelativePeriodDate", "getUserOrgUnit", "isAllowAllPeriods", "getFilter", "isEmpty", "getFilter", "addFilters", "getDimensionalObjects", "getFilter", "getRelativePeriodDate", "getUserOrgUnit", "isAllowAllPeriods", "getMeasureCriteria", "isEmpty", "getMeasureCriteria", "withMeasureCriteria", "getMeasureCriteriaFromParam", "getMeasureCriteria", "getPreAggregationMeasureCriteria", "isEmpty", "getPreAggregationMeasureCriteria", "withPreAggregationMeasureCriteria", "getMeasureCriteriaFromParam", "getPreAggregationMeasureCriteria", "getAggregationType", "withAggregationType", "fromAggregationType", "getAggregationType", "build", "withUserOrgUnitType", "withApiVersion", "withApprovalLevel", "withDuplicatesOnly", "withOutputFormat", "withOutputIdScheme", "withDisplayProperty", "withIncludeMetadataDetails", "withIncludeNumDen", "withShowHierarchy", "withHideEmptyColumns", "withHideEmptyRows", "withHierarchyMeta", "withIgnoreLimit", "withCompletedOnly", "withSkipRounding", "withSkipData", "withSkipMeta", "withOrgUnitField", "withTimeField", "withOrder", "withEndDate", "withStartDate", "getStartDate", "getEndDate", "getOrder", "getTimeField", "getOrgUnitField", "isSkipMeta", "isSkipData", "isSkipRounding", "isCompletedOnly", "isIgnoreLimit", "isHierarchyMeta", "isHideEmptyRows", "isHideEmptyColumns", "isShowHierarchy", "isIncludeNumDen", "isIncludeMetadataDetails", "getDisplayProperty", "getOutputIdScheme", "isDuplicatesOnly", "getApprovalLevel", "getApiVersion", "getUserOrgUnitType"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}