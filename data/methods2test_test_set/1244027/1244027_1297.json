{"test_class": {"identifier": "PrivilegeImplTest", "superclass": "extends MultiUseAbstractTest", "interfaces": "", "fields": [{"original_string": "private PrivilegeImpl p1;", "modifier": "private", "type": "PrivilegeImpl", "declarator": "p1", "var_name": "p1"}, {"original_string": "private PrivilegeImpl p2;", "modifier": "private", "type": "PrivilegeImpl", "declarator": "p2", "var_name": "p2"}, {"original_string": "private PrivilegeImpl p3;", "modifier": "private", "type": "PrivilegeImpl", "declarator": "p3", "var_name": "p3"}, {"original_string": "private PrivilegeImpl p4;", "modifier": "private", "type": "PrivilegeImpl", "declarator": "p4", "var_name": "p4"}, {"original_string": "private PrivilegeImpl p5;", "modifier": "private", "type": "PrivilegeImpl", "declarator": "p5", "var_name": "p5"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/security/acl/PrivilegeImplTest.java"}, "test_case": {"identifier": "testIsAggregate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsAggregate() {\n        assertTrue(!p1.isAggregate());\n        assertTrue(p3.isAggregate());\n    }", "signature": "void testIsAggregate()", "full_signature": "@Test public void testIsAggregate()", "class_method_signature": "PrivilegeImplTest.testIsAggregate()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isAggregate", "assertTrue", "isAggregate"]}, "focal_class": {"identifier": "PrivilegeImpl", "superclass": "", "interfaces": "implements Privilege", "fields": [{"original_string": "private final static String URI = \"http://www.jcp.org/jcr/1.0\";", "modifier": "private final static", "type": "String", "declarator": "URI = \"http://www.jcp.org/jcr/1.0\"", "var_name": "URI"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private Privilege[] declaredPrivileges;", "modifier": "private", "type": "Privilege[]", "declarator": "declaredPrivileges", "var_name": "declaredPrivileges"}, {"original_string": "private boolean isAbstract = false;", "modifier": "private", "type": "boolean", "declarator": "isAbstract = false", "var_name": "isAbstract"}, {"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}], "methods": [{"identifier": "PrivilegeImpl", "parameters": "(Session session, String name, Privilege[] declaredPrivileges)", "modifiers": "public", "return": "", "signature": " PrivilegeImpl(Session session, String name, Privilege[] declaredPrivileges)", "full_signature": "public  PrivilegeImpl(Session session, String name, Privilege[] declaredPrivileges)", "class_method_signature": "PrivilegeImpl.PrivilegeImpl(Session session, String name, Privilege[] declaredPrivileges)", "testcase": false, "constructor": true}, {"identifier": "PrivilegeImpl", "parameters": "(Session session, String name, Privilege[] declaredPrivileges, boolean isAbstract)", "modifiers": "public", "return": "", "signature": " PrivilegeImpl(Session session, String name, Privilege[] declaredPrivileges, boolean isAbstract)", "full_signature": "public  PrivilegeImpl(Session session, String name, Privilege[] declaredPrivileges, boolean isAbstract)", "class_method_signature": "PrivilegeImpl.PrivilegeImpl(Session session, String name, Privilege[] declaredPrivileges, boolean isAbstract)", "testcase": false, "constructor": true}, {"identifier": "localName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String localName()", "full_signature": "public String localName()", "class_method_signature": "PrivilegeImpl.localName()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "PrivilegeImpl.getName()", "testcase": false, "constructor": false}, {"identifier": "isAbstract", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAbstract()", "full_signature": "@Override public boolean isAbstract()", "class_method_signature": "PrivilegeImpl.isAbstract()", "testcase": false, "constructor": false}, {"identifier": "isAggregate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAggregate()", "full_signature": "@Override public boolean isAggregate()", "class_method_signature": "PrivilegeImpl.isAggregate()", "testcase": false, "constructor": false}, {"identifier": "getDeclaredAggregatePrivileges", "parameters": "()", "modifiers": "@Override public", "return": "Privilege[]", "signature": "Privilege[] getDeclaredAggregatePrivileges()", "full_signature": "@Override public Privilege[] getDeclaredAggregatePrivileges()", "class_method_signature": "PrivilegeImpl.getDeclaredAggregatePrivileges()", "testcase": false, "constructor": false}, {"identifier": "getAggregatePrivileges", "parameters": "()", "modifiers": "@Override public", "return": "Privilege[]", "signature": "Privilege[] getAggregatePrivileges()", "full_signature": "@Override public Privilege[] getAggregatePrivileges()", "class_method_signature": "PrivilegeImpl.getAggregatePrivileges()", "testcase": false, "constructor": false}, {"identifier": "aggregate", "parameters": "(ArrayList<Privilege> list, Privilege p)", "modifiers": "private", "return": "void", "signature": "void aggregate(ArrayList<Privilege> list, Privilege p)", "full_signature": "private void aggregate(ArrayList<Privilege> list, Privilege p)", "class_method_signature": "PrivilegeImpl.aggregate(ArrayList<Privilege> list, Privilege p)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Privilege p)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(Privilege p)", "full_signature": "public boolean contains(Privilege p)", "class_method_signature": "PrivilegeImpl.contains(Privilege p)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PrivilegeImpl.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "PrivilegeImpl.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PrivilegeImpl.hashCode()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/security/acl/PrivilegeImpl.java"}, "focal_method": {"identifier": "isAggregate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isAggregate() {\n        return this.declaredPrivileges != null && declaredPrivileges.length > 0;\n    }", "signature": "boolean isAggregate()", "full_signature": "@Override public boolean isAggregate()", "class_method_signature": "PrivilegeImpl.isAggregate()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}