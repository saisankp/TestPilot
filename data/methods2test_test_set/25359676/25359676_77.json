{"test_class": {"identifier": "CellComparatorHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "rice-middleware/kns/src/test/java/org/kuali/rice/kns/web/comparator/CellComparatorHelperTest.java"}, "test_case": {"identifier": "testExtractFromHrefAndRemoveNbsp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testExtractFromHrefAndRemoveNbsp() {\n\n        String href = \"<a href=\\\"haystack\\\">needle&nbsp;</a>\";\n\n        Cell cell = new Cell(href);\n\n        assertEquals(CellComparatorHelper.getSanitizedStaticValue(cell), \"needle\");\n\n    }", "signature": "void testExtractFromHrefAndRemoveNbsp()", "full_signature": "@Test public void testExtractFromHrefAndRemoveNbsp()", "class_method_signature": "CellComparatorHelperTest.testExtractFromHrefAndRemoveNbsp()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getSanitizedStaticValue"]}, "focal_class": {"identifier": "CellComparatorHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "static private Pattern HREF_ENCLOSURE = Pattern.compile(\"<a [^>]+>([^<]*)</a>.*\", Pattern.MULTILINE);", "modifier": "static private", "type": "Pattern", "declarator": "HREF_ENCLOSURE = Pattern.compile(\"<a [^>]+>([^<]*)</a>.*\", Pattern.MULTILINE)", "var_name": "HREF_ENCLOSURE"}], "methods": [{"identifier": "getSanitizedStaticValue", "parameters": "(Cell cell)", "modifiers": "static public", "return": "String", "signature": "String getSanitizedStaticValue(Cell cell)", "full_signature": "static public String getSanitizedStaticValue(Cell cell)", "class_method_signature": "CellComparatorHelper.getSanitizedStaticValue(Cell cell)", "testcase": false, "constructor": false}, {"identifier": "getSanitizedStaticValue", "parameters": "(String staticValue)", "modifiers": "static public", "return": "String", "signature": "String getSanitizedStaticValue(String staticValue)", "full_signature": "static public String getSanitizedStaticValue(String staticValue)", "class_method_signature": "CellComparatorHelper.getSanitizedStaticValue(String staticValue)", "testcase": false, "constructor": false}, {"identifier": "getAppropriateComparatorForPropertyClass", "parameters": "(Class propClass)", "modifiers": "public static", "return": "Comparator", "signature": "Comparator getAppropriateComparatorForPropertyClass(Class propClass)", "full_signature": "public static Comparator getAppropriateComparatorForPropertyClass(Class propClass)", "class_method_signature": "CellComparatorHelper.getAppropriateComparatorForPropertyClass(Class propClass)", "testcase": false, "constructor": false}, {"identifier": "getAppropriateValueComparatorForPropertyClass", "parameters": "(Class propClass)", "modifiers": "public static", "return": "Comparator", "signature": "Comparator getAppropriateValueComparatorForPropertyClass(Class propClass)", "full_signature": "public static Comparator getAppropriateValueComparatorForPropertyClass(Class propClass)", "class_method_signature": "CellComparatorHelper.getAppropriateValueComparatorForPropertyClass(Class propClass)", "testcase": false, "constructor": false}], "file": "rice-middleware/kns/src/main/java/org/kuali/rice/kns/web/comparator/CellComparatorHelper.java"}, "focal_method": {"identifier": "getSanitizedStaticValue", "parameters": "(Cell cell)", "modifiers": "static public", "return": "String", "body": "static public String getSanitizedStaticValue(Cell cell) {\n        if (null == cell) {\n            return null;\n        }\n\n        return null == cell.getStaticValue() ? null : getSanitizedStaticValue(cell.getStaticValue().toString());\n    }", "signature": "String getSanitizedStaticValue(Cell cell)", "full_signature": "static public String getSanitizedStaticValue(Cell cell)", "class_method_signature": "CellComparatorHelper.getSanitizedStaticValue(Cell cell)", "testcase": false, "constructor": false, "invocations": ["getStaticValue", "getSanitizedStaticValue", "toString", "getStaticValue"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}