{"test_class": {"identifier": "CIPLigandRuleTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "static SmilesParser smiles = new SmilesParser(SilentChemObjectBuilder.getInstance());", "modifier": "static", "type": "SmilesParser", "declarator": "smiles = new SmilesParser(SilentChemObjectBuilder.getInstance())", "var_name": "smiles"}], "file": "descriptor/cip/src/test/java/org/openscience/cdk/geometry/cip/rules/CIPLigandRuleTest.java"}, "test_case": {"identifier": "testOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOrder() throws Exception {\n        IAtomContainer molecule = smiles.parseSmiles(\"CC(Br)([13C])[H]\");\n        List<ILigand> ligands = new ArrayList<ILigand>();\n        VisitedAtoms visitedAtoms = new VisitedAtoms();\n        ligands.add(CIPTool.defineLigand(molecule, visitedAtoms, 1, 4));\n        ligands.add(CIPTool.defineLigand(molecule, visitedAtoms, 1, 3));\n        ligands.add(CIPTool.defineLigand(molecule, visitedAtoms, 1, 2));\n        ligands.add(CIPTool.defineLigand(molecule, visitedAtoms, 1, 0));\n\n        Collections.sort(ligands, new CIPLigandRule());\n        Assert.assertEquals(\"H\", ligands.get(0).getLigandAtom().getSymbol());\n        Assert.assertEquals(\"C\", ligands.get(1).getLigandAtom().getSymbol());\n        Assert.assertEquals(\"C\", ligands.get(2).getLigandAtom().getSymbol());\n        Assert.assertEquals(13, ligands.get(2).getLigandAtom().getMassNumber().intValue());\n        Assert.assertEquals(\"Br\", ligands.get(3).getLigandAtom().getSymbol());\n    }", "signature": "void testOrder()", "full_signature": "@Test public void testOrder()", "class_method_signature": "CIPLigandRuleTest.testOrder()", "testcase": true, "constructor": false, "invocations": ["parseSmiles", "add", "defineLigand", "add", "defineLigand", "add", "defineLigand", "add", "defineLigand", "sort", "assertEquals", "getSymbol", "getLigandAtom", "get", "assertEquals", "getSymbol", "getLigandAtom", "get", "assertEquals", "getSymbol", "getLigandAtom", "get", "assertEquals", "intValue", "getMassNumber", "getLigandAtom", "get", "assertEquals", "getSymbol", "getLigandAtom", "get"]}, "focal_class": {"identifier": "CIPLigandRule", "superclass": "", "interfaces": "implements ISequenceSubRule<ILigand>", "fields": [{"original_string": "CombinedAtomicMassNumberRule numberRule = new CombinedAtomicMassNumberRule();", "modifier": "", "type": "CombinedAtomicMassNumberRule", "declarator": "numberRule = new CombinedAtomicMassNumberRule()", "var_name": "numberRule"}], "methods": [{"identifier": "compare", "parameters": "(ILigand ligand1, ILigand ligand2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(ILigand ligand1, ILigand ligand2)", "full_signature": "@Override public int compare(ILigand ligand1, ILigand ligand2)", "class_method_signature": "CIPLigandRule.compare(ILigand ligand1, ILigand ligand2)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(ILigand[] ligands)", "modifiers": "private", "return": "ILigand[]", "signature": "ILigand[] order(ILigand[] ligands)", "full_signature": "private ILigand[] order(ILigand[] ligands)", "class_method_signature": "CIPLigandRule.order(ILigand[] ligands)", "testcase": false, "constructor": false}], "file": "descriptor/cip/src/main/java/org/openscience/cdk/geometry/cip/rules/CIPLigandRule.java"}, "focal_method": {"identifier": "order", "parameters": "(ILigand[] ligands)", "modifiers": "private", "return": "ILigand[]", "body": "private ILigand[] order(ILigand[] ligands) {\n        ILigand[] newLigands = new ILigand[ligands.length];\n        System.arraycopy(ligands, 0, newLigands, 0, ligands.length);\n\n        Arrays.sort(newLigands, numberRule);\n        // this above list is from low to high precendence, so we need to revert the array\n        ILigand[] reverseLigands = new ILigand[newLigands.length];\n        for (int i = 0; i < newLigands.length; i++) {\n            reverseLigands[(newLigands.length - 1) - i] = newLigands[i];\n        }\n        return reverseLigands;\n    }", "signature": "ILigand[] order(ILigand[] ligands)", "full_signature": "private ILigand[] order(ILigand[] ligands)", "class_method_signature": "CIPLigandRule.order(ILigand[] ligands)", "testcase": false, "constructor": false, "invocations": ["arraycopy", "sort"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}