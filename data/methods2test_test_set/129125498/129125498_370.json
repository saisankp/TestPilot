{"test_class": {"identifier": "DetectorControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Spy\n    @InjectMocks\n    private DetectorController controllerUnderTest;", "modifier": "@Spy\n    @InjectMocks\n    private", "type": "DetectorController", "declarator": "controllerUnderTest", "var_name": "controllerUnderTest"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@Mock\n    private DetectorService detectorService;", "modifier": "@Mock\n    private", "type": "DetectorService", "declarator": "detectorService", "var_name": "detectorService"}, {"original_string": "@Mock\n    private Detector detector;", "modifier": "@Mock\n    private", "type": "Detector", "declarator": "detector", "var_name": "detector"}, {"original_string": "@Mock\n    private List<Detector> detectors;", "modifier": "@Mock\n    private", "type": "List<Detector>", "declarator": "detectors", "var_name": "detectors"}, {"original_string": "private UUID someUuid;", "modifier": "private", "type": "UUID", "declarator": "someUuid", "var_name": "someUuid"}, {"original_string": "private Detector legalParamsDetector;", "modifier": "private", "type": "Detector", "declarator": "legalParamsDetector", "var_name": "legalParamsDetector"}, {"original_string": "private HttpHeaders httpHeaders = new HttpHeaders();", "modifier": "private", "type": "HttpHeaders", "declarator": "httpHeaders = new HttpHeaders()", "var_name": "httpHeaders"}, {"original_string": "private Trace trace = Mockito.mock(Trace.class);", "modifier": "private", "type": "Trace", "declarator": "trace = Mockito.mock(Trace.class)", "var_name": "trace"}, {"original_string": "private Tracer noOpsTracer;", "modifier": "private", "type": "Tracer", "declarator": "noOpsTracer", "var_name": "noOpsTracer"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/web/DetectorControllerTest.java"}, "test_case": {"identifier": "testFindByCreatedBy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindByCreatedBy() {\n        when(detectorService.findByCreatedBy(anyString())).thenReturn(detectors);\n        val actualDetectors = controllerUnderTest.findByCreatedBy(\"kashah\");\n        assertNotNull(actualDetectors);\n    }", "signature": "void testFindByCreatedBy()", "full_signature": "@Test public void testFindByCreatedBy()", "class_method_signature": "DetectorControllerTest.testFindByCreatedBy()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByCreatedBy", "anyString", "findByCreatedBy", "assertNotNull"]}, "focal_class": {"identifier": "DetectorController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private DetectorService service;", "modifier": "@Autowired\n    private", "type": "DetectorService", "declarator": "service", "var_name": "service"}, {"original_string": "@Autowired\n    private Trace trace;", "modifier": "@Autowired\n    private", "type": "Trace", "declarator": "trace", "var_name": "trace"}], "methods": [{"identifier": "createDetector", "parameters": "(@Valid @RequestBody Detector detector, @RequestHeader HttpHeaders headers)", "modifiers": "@PostMapping @ResponseStatus(HttpStatus.CREATED) public", "return": "String", "signature": "String createDetector(@Valid @RequestBody Detector detector, @RequestHeader HttpHeaders headers)", "full_signature": "@PostMapping @ResponseStatus(HttpStatus.CREATED) public String createDetector(@Valid @RequestBody Detector detector, @RequestHeader HttpHeaders headers)", "class_method_signature": "DetectorController.createDetector(@Valid @RequestBody Detector detector, @RequestHeader HttpHeaders headers)", "testcase": false, "constructor": false}, {"identifier": "findByUuid", "parameters": "(@RequestParam String uuid, @RequestHeader HttpHeaders headers)", "modifiers": "@GetMapping(path = \"/findByUuid\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "Detector", "signature": "Detector findByUuid(@RequestParam String uuid, @RequestHeader HttpHeaders headers)", "full_signature": "@GetMapping(path = \"/findByUuid\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public Detector findByUuid(@RequestParam String uuid, @RequestHeader HttpHeaders headers)", "class_method_signature": "DetectorController.findByUuid(@RequestParam String uuid, @RequestHeader HttpHeaders headers)", "testcase": false, "constructor": false}, {"identifier": "findByCreatedBy", "parameters": "(@RequestParam String user)", "modifiers": "@GetMapping(path = \"/findByCreatedBy\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "List<Detector>", "signature": "List<Detector> findByCreatedBy(@RequestParam String user)", "full_signature": "@GetMapping(path = \"/findByCreatedBy\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public List<Detector> findByCreatedBy(@RequestParam String user)", "class_method_signature": "DetectorController.findByCreatedBy(@RequestParam String user)", "testcase": false, "constructor": false}, {"identifier": "toggleDetector", "parameters": "(@RequestParam String uuid, @RequestParam Boolean enabled)", "modifiers": "@PostMapping(path = \"/toggleDetector\") @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void toggleDetector(@RequestParam String uuid, @RequestParam Boolean enabled)", "full_signature": "@PostMapping(path = \"/toggleDetector\") @ResponseStatus(HttpStatus.OK) public void toggleDetector(@RequestParam String uuid, @RequestParam Boolean enabled)", "class_method_signature": "DetectorController.toggleDetector(@RequestParam String uuid, @RequestParam Boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "trustDetector", "parameters": "(@RequestParam String uuid, @RequestParam Boolean trusted)", "modifiers": "@PostMapping(path = \"/trustDetector\") @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void trustDetector(@RequestParam String uuid, @RequestParam Boolean trusted)", "full_signature": "@PostMapping(path = \"/trustDetector\") @ResponseStatus(HttpStatus.OK) public void trustDetector(@RequestParam String uuid, @RequestParam Boolean trusted)", "class_method_signature": "DetectorController.trustDetector(@RequestParam String uuid, @RequestParam Boolean trusted)", "testcase": false, "constructor": false}, {"identifier": "getLastUpdatedDetectors", "parameters": "(@RequestParam long interval)", "modifiers": "@GetMapping(path = \"/getLastUpdatedDetectors\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "List<Detector>", "signature": "List<Detector> getLastUpdatedDetectors(@RequestParam long interval)", "full_signature": "@GetMapping(path = \"/getLastUpdatedDetectors\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public List<Detector> getLastUpdatedDetectors(@RequestParam long interval)", "class_method_signature": "DetectorController.getLastUpdatedDetectors(@RequestParam long interval)", "testcase": false, "constructor": false}, {"identifier": "getLastUsedDetectors", "parameters": "(@RequestParam int noOfDays)", "modifiers": "@GetMapping(path = \"/getLastUsedDetectors\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "List<Detector>", "signature": "List<Detector> getLastUsedDetectors(@RequestParam int noOfDays)", "full_signature": "@GetMapping(path = \"/getLastUsedDetectors\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public List<Detector> getLastUsedDetectors(@RequestParam int noOfDays)", "class_method_signature": "DetectorController.getLastUsedDetectors(@RequestParam int noOfDays)", "testcase": false, "constructor": false}, {"identifier": "updateDetector", "parameters": "(@RequestParam String uuid, @RequestBody Detector detector)", "modifiers": "@PutMapping @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void updateDetector(@RequestParam String uuid, @RequestBody Detector detector)", "full_signature": "@PutMapping @ResponseStatus(HttpStatus.OK) public void updateDetector(@RequestParam String uuid, @RequestBody Detector detector)", "class_method_signature": "DetectorController.updateDetector(@RequestParam String uuid, @RequestBody Detector detector)", "testcase": false, "constructor": false}, {"identifier": "updatedDetectorLastUsed", "parameters": "(@RequestBody Map<String, String> params)", "modifiers": "@PostMapping(path = \"/updateDetectorLastUsed\", consumes = \"application/json\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void updatedDetectorLastUsed(@RequestBody Map<String, String> params)", "full_signature": "@PostMapping(path = \"/updateDetectorLastUsed\", consumes = \"application/json\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public void updatedDetectorLastUsed(@RequestBody Map<String, String> params)", "class_method_signature": "DetectorController.updatedDetectorLastUsed(@RequestBody Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "deleteDetector", "parameters": "(@RequestParam String uuid)", "modifiers": "@DeleteMapping @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void deleteDetector(@RequestParam String uuid)", "full_signature": "@DeleteMapping @ResponseStatus(HttpStatus.OK) public void deleteDetector(@RequestParam String uuid)", "class_method_signature": "DetectorController.deleteDetector(@RequestParam String uuid)", "testcase": false, "constructor": false}, {"identifier": "getDetectorsToTrain", "parameters": "(@RequestParam Long timestampMs, @RequestHeader HttpHeaders headers)", "modifiers": "@GetMapping(path = \"/getDetectorsToTrain\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "List<Detector>", "signature": "List<Detector> getDetectorsToTrain(@RequestParam Long timestampMs, @RequestHeader HttpHeaders headers)", "full_signature": "@GetMapping(path = \"/getDetectorsToTrain\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public List<Detector> getDetectorsToTrain(@RequestParam Long timestampMs, @RequestHeader HttpHeaders headers)", "class_method_signature": "DetectorController.getDetectorsToTrain(@RequestParam Long timestampMs, @RequestHeader HttpHeaders headers)", "testcase": false, "constructor": false}, {"identifier": "updateDetectorTrainingTime", "parameters": "(@RequestParam String uuid,\n                                           @RequestParam Long nextRun,\n                                           @RequestHeader HttpHeaders headers)", "modifiers": "@PostMapping(path = \"/updateDetectorTrainingTime\") public", "return": "void", "signature": "void updateDetectorTrainingTime(@RequestParam String uuid,\n                                           @RequestParam Long nextRun,\n                                           @RequestHeader HttpHeaders headers)", "full_signature": "@PostMapping(path = \"/updateDetectorTrainingTime\") public void updateDetectorTrainingTime(@RequestParam String uuid,\n                                           @RequestParam Long nextRun,\n                                           @RequestHeader HttpHeaders headers)", "class_method_signature": "DetectorController.updateDetectorTrainingTime(@RequestParam String uuid,\n                                           @RequestParam Long nextRun,\n                                           @RequestHeader HttpHeaders headers)", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/web/DetectorController.java"}, "focal_method": {"identifier": "findByCreatedBy", "parameters": "(@RequestParam String user)", "modifiers": "@GetMapping(path = \"/findByCreatedBy\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "List<Detector>", "body": "@GetMapping(path = \"/findByCreatedBy\", produces = \"application/json\")\n    @ResponseStatus(HttpStatus.OK)\n    public List<Detector> findByCreatedBy(@RequestParam String user) {\n        List<Detector> detectors = service.findByCreatedBy(user);\n        if (detectors == null || detectors.isEmpty()) {\n            throw new RecordNotFoundException(\"Invalid user: \" + user);\n        }\n\n        return detectors;\n    }", "signature": "List<Detector> findByCreatedBy(@RequestParam String user)", "full_signature": "@GetMapping(path = \"/findByCreatedBy\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public List<Detector> findByCreatedBy(@RequestParam String user)", "class_method_signature": "DetectorController.findByCreatedBy(@RequestParam String user)", "testcase": false, "constructor": false, "invocations": ["findByCreatedBy", "isEmpty"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}