{"test_class": {"identifier": "DatasetAffinityFunctionWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AffinityFunction affinityFunction;", "modifier": "@Mock\n    private", "type": "AffinityFunction", "declarator": "affinityFunction", "var_name": "affinityFunction"}, {"original_string": "private DatasetAffinityFunctionWrapper wrapper;", "modifier": "private", "type": "DatasetAffinityFunctionWrapper", "declarator": "wrapper", "var_name": "wrapper"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/dataset/impl/cache/util/DatasetAffinityFunctionWrapperTest.java"}, "test_case": {"identifier": "testAssignPartitions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAssignPartitions() {\n        List<List<ClusterNode>> nodes = Collections.singletonList(Collections.singletonList(mock(ClusterNode.class)));\n\n        doReturn(nodes).when(affinityFunction).assignPartitions(any());\n\n        List<List<ClusterNode>> resNodes = wrapper.assignPartitions(mock(AffinityFunctionContext.class));\n\n        assertEquals(nodes, resNodes);\n        verify(affinityFunction, times(1)).assignPartitions(any());\n    }", "signature": "void testAssignPartitions()", "full_signature": "@Test public void testAssignPartitions()", "class_method_signature": "DatasetAffinityFunctionWrapperTest.testAssignPartitions()", "testcase": true, "constructor": false, "invocations": ["singletonList", "singletonList", "mock", "assignPartitions", "when", "doReturn", "any", "assignPartitions", "mock", "assertEquals", "assignPartitions", "verify", "times", "any"]}, "focal_class": {"identifier": "DatasetAffinityFunctionWrapper", "superclass": "", "interfaces": "implements AffinityFunction", "fields": [{"original_string": "private static final long serialVersionUID = -8233787063079973753L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8233787063079973753L", "var_name": "serialVersionUID"}, {"original_string": "private final AffinityFunction delegate;", "modifier": "private final", "type": "AffinityFunction", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "DatasetAffinityFunctionWrapper", "parameters": "(AffinityFunction delegate)", "modifiers": "public", "return": "", "signature": " DatasetAffinityFunctionWrapper(AffinityFunction delegate)", "full_signature": "public  DatasetAffinityFunctionWrapper(AffinityFunction delegate)", "class_method_signature": "DatasetAffinityFunctionWrapper.DatasetAffinityFunctionWrapper(AffinityFunction delegate)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "DatasetAffinityFunctionWrapper.reset()", "testcase": false, "constructor": false}, {"identifier": "partitions", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int partitions()", "full_signature": "@Override public int partitions()", "class_method_signature": "DatasetAffinityFunctionWrapper.partitions()", "testcase": false, "constructor": false}, {"identifier": "partition", "parameters": "(Object key)", "modifiers": "@Override public", "return": "int", "signature": "int partition(Object key)", "full_signature": "@Override public int partition(Object key)", "class_method_signature": "DatasetAffinityFunctionWrapper.partition(Object key)", "testcase": false, "constructor": false}, {"identifier": "assignPartitions", "parameters": "(AffinityFunctionContext affCtx)", "modifiers": "@Override public", "return": "List<List<ClusterNode>>", "signature": "List<List<ClusterNode>> assignPartitions(AffinityFunctionContext affCtx)", "full_signature": "@Override public List<List<ClusterNode>> assignPartitions(AffinityFunctionContext affCtx)", "class_method_signature": "DatasetAffinityFunctionWrapper.assignPartitions(AffinityFunctionContext affCtx)", "testcase": false, "constructor": false}, {"identifier": "removeNode", "parameters": "(UUID nodeId)", "modifiers": "@Override public", "return": "void", "signature": "void removeNode(UUID nodeId)", "full_signature": "@Override public void removeNode(UUID nodeId)", "class_method_signature": "DatasetAffinityFunctionWrapper.removeNode(UUID nodeId)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/util/DatasetAffinityFunctionWrapper.java"}, "focal_method": {"identifier": "assignPartitions", "parameters": "(AffinityFunctionContext affCtx)", "modifiers": "@Override public", "return": "List<List<ClusterNode>>", "body": "@Override public List<List<ClusterNode>> assignPartitions(AffinityFunctionContext affCtx) {\n        return delegate.assignPartitions(affCtx);\n    }", "signature": "List<List<ClusterNode>> assignPartitions(AffinityFunctionContext affCtx)", "full_signature": "@Override public List<List<ClusterNode>> assignPartitions(AffinityFunctionContext affCtx)", "class_method_signature": "DatasetAffinityFunctionWrapper.assignPartitions(AffinityFunctionContext affCtx)", "testcase": false, "constructor": false, "invocations": ["assignPartitions"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}