{"test_class": {"identifier": "SuppressedAtomHashGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/SuppressedAtomHashGeneratorTest.java"}, "test_case": {"identifier": "testGenerate_Disconnected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerate_Disconnected() throws Exception {\n        AtomHashGenerator seedMock = mock(AtomHashGenerator.class);\n        IAtomContainer container = mock(IAtomContainer.class);\n\n        SuppressedAtomHashGenerator generator = new SuppressedAtomHashGenerator(mock(AtomHashGenerator.class),\n                new Xorshift(), AtomSuppression.unsuppressed(), 2);\n        // there are no neighbours, the values should be rotated\n        long expected = generator.distribute(generator.distribute(1));\n        assertThat(\n                generator.generate(new long[]{1L, 1L, 1L}, StereoEncoder.EMPTY, new int[][]{{}, {}, {}},\n                        Suppressed.none()), is(new long[]{expected, expected, expected}));\n        BitSet suppressed = new BitSet();\n        suppressed.set(1);\n        assertThat(\n                generator.generate(new long[]{1L, 1L, 1L}, StereoEncoder.EMPTY, new int[][]{{}, {}, {}},\n                        Suppressed.fromBitSet(suppressed)), is(new long[]{expected, 0L, expected}));\n\n    }", "signature": "void testGenerate_Disconnected()", "full_signature": "@Test public void testGenerate_Disconnected()", "class_method_signature": "SuppressedAtomHashGeneratorTest.testGenerate_Disconnected()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "unsuppressed", "distribute", "distribute", "assertThat", "generate", "none", "is", "set", "assertThat", "generate", "fromBitSet", "is"]}, "focal_class": {"identifier": "SuppressedAtomHashGenerator", "superclass": "extends AbstractAtomHashGenerator", "interfaces": "implements AtomHashGenerator", "fields": [{"original_string": "private final AtomHashGenerator    seedGenerator;", "modifier": "private final", "type": "AtomHashGenerator", "declarator": "seedGenerator", "var_name": "seedGenerator"}, {"original_string": "private final StereoEncoderFactory factory;", "modifier": "private final", "type": "StereoEncoderFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final int                  depth;", "modifier": "private final", "type": "int", "declarator": "depth", "var_name": "depth"}, {"original_string": "private final AtomSuppression      suppression;", "modifier": "private final", "type": "AtomSuppression", "declarator": "suppression", "var_name": "suppression"}], "methods": [{"identifier": "SuppressedAtomHashGenerator", "parameters": "(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, AtomSuppression suppression, int depth)", "modifiers": "public", "return": "", "signature": " SuppressedAtomHashGenerator(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, AtomSuppression suppression, int depth)", "full_signature": "public  SuppressedAtomHashGenerator(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, AtomSuppression suppression, int depth)", "class_method_signature": "SuppressedAtomHashGenerator.SuppressedAtomHashGenerator(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, AtomSuppression suppression, int depth)", "testcase": false, "constructor": true}, {"identifier": "SuppressedAtomHashGenerator", "parameters": "(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom,\n            AtomSuppression suppression, int depth)", "modifiers": "public", "return": "", "signature": " SuppressedAtomHashGenerator(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom,\n            AtomSuppression suppression, int depth)", "full_signature": "public  SuppressedAtomHashGenerator(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom,\n            AtomSuppression suppression, int depth)", "class_method_signature": "SuppressedAtomHashGenerator.SuppressedAtomHashGenerator(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom,\n            AtomSuppression suppression, int depth)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "long[]", "signature": "long[] generate(IAtomContainer container)", "full_signature": "@Override public long[] generate(IAtomContainer container)", "class_method_signature": "SuppressedAtomHashGenerator.generate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(long[] current, StereoEncoder encoder, int[][] graph, Suppressed suppressed)", "modifiers": "@Override", "return": "long[]", "signature": "long[] generate(long[] current, StereoEncoder encoder, int[][] graph, Suppressed suppressed)", "full_signature": "@Override long[] generate(long[] current, StereoEncoder encoder, int[][] graph, Suppressed suppressed)", "class_method_signature": "SuppressedAtomHashGenerator.generate(long[] current, StereoEncoder encoder, int[][] graph, Suppressed suppressed)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(int[][] graph, int v, long[] current, long[] unique, long[] included, Suppressed suppressed)", "modifiers": "", "return": "long", "signature": "long next(int[][] graph, int v, long[] current, long[] unique, long[] included, Suppressed suppressed)", "full_signature": " long next(int[][] graph, int v, long[] current, long[] unique, long[] included, Suppressed suppressed)", "class_method_signature": "SuppressedAtomHashGenerator.next(int[][] graph, int v, long[] current, long[] unique, long[] included, Suppressed suppressed)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/SuppressedAtomHashGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "long[]", "body": "@Override\n    public long[] generate(IAtomContainer container) {\n        int[][] graph = toAdjList(container);\n        Suppressed suppressed = suppression.suppress(container);\n        return generate(seedGenerator.generate(container), factory.create(container, graph), graph, suppressed);\n    }", "signature": "long[] generate(IAtomContainer container)", "full_signature": "@Override public long[] generate(IAtomContainer container)", "class_method_signature": "SuppressedAtomHashGenerator.generate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["toAdjList", "suppress", "generate", "generate", "create"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}