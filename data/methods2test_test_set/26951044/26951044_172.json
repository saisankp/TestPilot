{"test_class": {"identifier": "NumberConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/core/src/test/java/org/apache/tamaya/core/internal/converters/NumberConverterTest.java"}, "test_case": {"identifier": "callToConvertAddsMoreSupportedFormatsToTheContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void callToConvertAddsMoreSupportedFormatsToTheContext() throws Exception {\n        ConversionContext context = new ConversionContext.Builder(TypeLiteral.of(Number.class)).build();\n\n        NumberConverter converter = new NumberConverter();\n        converter.convert(\"\", context);\n\n        assertThat(context.getSupportedFormats()).contains(\"<double>, <long> (NumberConverter)\",\n                \"POSITIVE_INFINITY (NumberConverter)\", \"NEGATIVE_INFINITY (NumberConverter)\", \"NAN (NumberConverter)\");\n    }", "signature": "void callToConvertAddsMoreSupportedFormatsToTheContext()", "full_signature": "@Test public void callToConvertAddsMoreSupportedFormatsToTheContext()", "class_method_signature": "NumberConverterTest.callToConvertAddsMoreSupportedFormatsToTheContext()", "testcase": true, "constructor": false, "invocations": ["build", "of", "convert", "contains", "assertThat", "getSupportedFormats"]}, "focal_class": {"identifier": "NumberConverter", "superclass": "", "interfaces": "implements PropertyConverter<Number>", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(NumberConverter.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(NumberConverter.class.getName())", "var_name": "LOGGER"}, {"original_string": "private final LongConverter longConverter = new LongConverter();", "modifier": "private final", "type": "LongConverter", "declarator": "longConverter = new LongConverter()", "var_name": "longConverter"}], "methods": [{"identifier": "convert", "parameters": "(String value, ConversionContext ctx)", "modifiers": "@Override public", "return": "Number", "signature": "Number convert(String value, ConversionContext ctx)", "full_signature": "@Override public Number convert(String value, ConversionContext ctx)", "class_method_signature": "NumberConverter.convert(String value, ConversionContext ctx)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "NumberConverter.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "NumberConverter.hashCode()", "testcase": false, "constructor": false}], "file": "code/core/src/main/java/org/apache/tamaya/core/internal/converters/NumberConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(String value, ConversionContext ctx)", "modifiers": "@Override public", "return": "Number", "body": "@Override\n    public Number convert(String value, ConversionContext ctx) {\n        ctx.addSupportedFormats(getClass(), \"<double>, <long>\", \"0x (hex)\", \"0X... (hex)\", \"POSITIVE_INFINITY\",\n                \"NEGATIVE_INFINITY\", \"NAN\");\n\n        if(value==null){\n            return null;\n        }\n        String trimmed = value.trim();\n        switch(trimmed.toUpperCase(Locale.ENGLISH)) {\n            case \"POSITIVE_INFINITY\":\n                return Double.POSITIVE_INFINITY;\n            case \"NEGATIVE_INFINITY\":\n                return Double.NEGATIVE_INFINITY;\n            case \"NAN\":\n                return Double.NaN;\n            default:\n                Long lVal = longConverter.convert(trimmed, ctx);\n                if (lVal != null) {\n                    return lVal;\n                }\n                try {\n                    return new BigDecimal(trimmed);\n                } catch(Exception e) {\n                    LOGGER.finest(\"Unparseable Number: \" + trimmed);\n                    return null;\n                }\n        }\n    }", "signature": "Number convert(String value, ConversionContext ctx)", "full_signature": "@Override public Number convert(String value, ConversionContext ctx)", "class_method_signature": "NumberConverter.convert(String value, ConversionContext ctx)", "testcase": false, "constructor": false, "invocations": ["addSupportedFormats", "getClass", "trim", "toUpperCase", "convert", "finest"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}