{"test_class": {"identifier": "ThresholdMonitoringReporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MeasurementSession measurementSession = new MeasurementSession(\"testApp\", \"testHost\", \"testInstance\");", "modifier": "private final", "type": "MeasurementSession", "declarator": "measurementSession = new MeasurementSession(\"testApp\", \"testHost\", \"testInstance\")", "var_name": "measurementSession"}, {"original_string": "private ThresholdMonitoringReporter thresholdMonitoringReporter;", "modifier": "private", "type": "ThresholdMonitoringReporter", "declarator": "thresholdMonitoringReporter", "var_name": "thresholdMonitoringReporter"}, {"original_string": "private Alerter alerter;", "modifier": "private", "type": "Alerter", "declarator": "alerter", "var_name": "alerter"}, {"original_string": "private IncidentRepository incidentRepository;", "modifier": "private", "type": "IncidentRepository", "declarator": "incidentRepository", "var_name": "incidentRepository"}, {"original_string": "private AlertingPlugin alertingPlugin;", "modifier": "private", "type": "AlertingPlugin", "declarator": "alertingPlugin", "var_name": "alertingPlugin"}], "file": "stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/ThresholdMonitoringReporterTest.java"}, "test_case": {"identifier": "testNoAlertWhenFailureRecovers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNoAlertWhenFailureRecovers() throws Exception {\n\t\tCheck check = createCheckCheckingMean(2, 6);\n\t\twhen(alertingPlugin.getChecks()).thenReturn(Collections.singletonMap(check.getId(), check));\n\n\t\t// violation\n\t\tcheckMetrics(7, 0, 0);\n\t\tverify(alerter, times(0)).alert(any(Alerter.AlertArguments.class));\n\t\tfinal Incident incident = incidentRepository.getIncidentByCheckId(check.getId());\n\t\tassertNotNull(incident);\n\t\tassertEquals(CheckResult.Status.OK, incident.getOldStatus());\n\t\tassertEquals(CheckResult.Status.WARN, incident.getNewStatus());\n\t\tassertNotNull(incident.getFirstFailureAt());\n\t\tassertNull(incident.getResolvedAt());\n\t\tassertEquals(1, incident.getConsecutiveFailures());\n\t\tSystem.out.println(incident);\n\n\t\t// back to ok\n\t\tcheckMetrics(1, 0, 0);\n\t\tverify(alerter, times(0)).alert(any(Alerter.AlertArguments.class));\n\t\tassertNull(incidentRepository.getIncidentByCheckId(check.getId()));\n\t}", "signature": "void testNoAlertWhenFailureRecovers()", "full_signature": "@Test public void testNoAlertWhenFailureRecovers()", "class_method_signature": "ThresholdMonitoringReporterTest.testNoAlertWhenFailureRecovers()", "testcase": true, "constructor": false, "invocations": ["createCheckCheckingMean", "thenReturn", "when", "getChecks", "singletonMap", "getId", "checkMetrics", "alert", "verify", "times", "any", "getIncidentByCheckId", "getId", "assertNotNull", "assertEquals", "getOldStatus", "assertEquals", "getNewStatus", "assertNotNull", "getFirstFailureAt", "assertNull", "getResolvedAt", "assertEquals", "getConsecutiveFailures", "println", "checkMetrics", "alert", "verify", "times", "any", "assertNull", "getIncidentByCheckId", "getId"]}, "focal_class": {"identifier": "ThresholdMonitoringReporter", "superclass": "extends ScheduledMetrics2Reporter", "interfaces": "", "fields": [{"original_string": "private static final int OPTIMISTIC_CONCURRENCY_CONTROL_RETRIES = 10;", "modifier": "private static final", "type": "int", "declarator": "OPTIMISTIC_CONCURRENCY_CONTROL_RETRIES = 10", "var_name": "OPTIMISTIC_CONCURRENCY_CONTROL_RETRIES"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final AlertSender alertSender;", "modifier": "private final", "type": "AlertSender", "declarator": "alertSender", "var_name": "alertSender"}, {"original_string": "private final IncidentRepository incidentRepository;", "modifier": "private final", "type": "IncidentRepository", "declarator": "incidentRepository", "var_name": "incidentRepository"}, {"original_string": "private final MeasurementSession measurementSession;", "modifier": "private final", "type": "MeasurementSession", "declarator": "measurementSession", "var_name": "measurementSession"}, {"original_string": "private final AlertingPlugin alertingPlugin;", "modifier": "private final", "type": "AlertingPlugin", "declarator": "alertingPlugin", "var_name": "alertingPlugin"}], "methods": [{"identifier": "forRegistry", "parameters": "(Metric2Registry registry)", "modifiers": "public static", "return": "ThresholdMonitoringReporterBuilder", "signature": "ThresholdMonitoringReporterBuilder forRegistry(Metric2Registry registry)", "full_signature": "public static ThresholdMonitoringReporterBuilder forRegistry(Metric2Registry registry)", "class_method_signature": "ThresholdMonitoringReporter.forRegistry(Metric2Registry registry)", "testcase": false, "constructor": false}, {"identifier": "ThresholdMonitoringReporter", "parameters": "(ThresholdMonitoringReporterBuilder builder)", "modifiers": "public", "return": "", "signature": " ThresholdMonitoringReporter(ThresholdMonitoringReporterBuilder builder)", "full_signature": "public  ThresholdMonitoringReporter(ThresholdMonitoringReporterBuilder builder)", "class_method_signature": "ThresholdMonitoringReporter.ThresholdMonitoringReporter(ThresholdMonitoringReporterBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "reportMetrics", "parameters": "(Map<MetricName, Gauge> gauges, Map<MetricName, Counter> counters, Map<MetricName, Histogram> histograms, Map<MetricName, Meter> meters, Map<MetricName, Timer> timers)", "modifiers": "@Override public", "return": "void", "signature": "void reportMetrics(Map<MetricName, Gauge> gauges, Map<MetricName, Counter> counters, Map<MetricName, Histogram> histograms, Map<MetricName, Meter> meters, Map<MetricName, Timer> timers)", "full_signature": "@Override public void reportMetrics(Map<MetricName, Gauge> gauges, Map<MetricName, Counter> counters, Map<MetricName, Histogram> histograms, Map<MetricName, Meter> meters, Map<MetricName, Timer> timers)", "class_method_signature": "ThresholdMonitoringReporter.reportMetrics(Map<MetricName, Gauge> gauges, Map<MetricName, Counter> counters, Map<MetricName, Histogram> histograms, Map<MetricName, Meter> meters, Map<MetricName, Timer> timers)", "testcase": false, "constructor": false}, {"identifier": "addMetrics", "parameters": "(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Map<MetricName, T > metrics)", "modifiers": "private", "return": "void", "signature": "void addMetrics(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Map<MetricName, T > metrics)", "full_signature": "private void addMetrics(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Map<MetricName, T > metrics)", "class_method_signature": "ThresholdMonitoringReporter.addMetrics(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Map<MetricName, T > metrics)", "testcase": false, "constructor": false}, {"identifier": "checkMetrics", "parameters": "(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Check check)", "modifiers": "private", "return": "void", "signature": "void checkMetrics(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Check check)", "full_signature": "private void checkMetrics(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Check check)", "class_method_signature": "ThresholdMonitoringReporter.checkMetrics(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Check check)", "testcase": false, "constructor": false}, {"identifier": "asMap", "parameters": "(Metric metric)", "modifiers": "private", "return": "Map<String, Number>", "signature": "Map<String, Number> asMap(Metric metric)", "full_signature": "private Map<String, Number> asMap(Metric metric)", "class_method_signature": "ThresholdMonitoringReporter.asMap(Metric metric)", "testcase": false, "constructor": false}, {"identifier": "addIncident", "parameters": "(Check check, List<CheckResult> results)", "modifiers": "private", "return": "void", "signature": "void addIncident(Check check, List<CheckResult> results)", "full_signature": "private void addIncident(Check check, List<CheckResult> results)", "class_method_signature": "ThresholdMonitoringReporter.addIncident(Check check, List<CheckResult> results)", "testcase": false, "constructor": false}, {"identifier": "getAndPersistIncident", "parameters": "(Check check, List<CheckResult> results)", "modifiers": "private", "return": "Incident", "signature": "Incident getAndPersistIncident(Check check, List<CheckResult> results)", "full_signature": "private Incident getAndPersistIncident(Check check, List<CheckResult> results)", "class_method_signature": "ThresholdMonitoringReporter.getAndPersistIncident(Check check, List<CheckResult> results)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateIncident", "parameters": "(Check check, List<CheckResult> results)", "modifiers": "private", "return": "Incident", "signature": "Incident getOrCreateIncident(Check check, List<CheckResult> results)", "full_signature": "private Incident getOrCreateIncident(Check check, List<CheckResult> results)", "class_method_signature": "ThresholdMonitoringReporter.getOrCreateIncident(Check check, List<CheckResult> results)", "testcase": false, "constructor": false}, {"identifier": "trySaveOrDeleteIncident", "parameters": "(Check check, Incident incident)", "modifiers": "private", "return": "boolean", "signature": "boolean trySaveOrDeleteIncident(Check check, Incident incident)", "full_signature": "private boolean trySaveOrDeleteIncident(Check check, Incident incident)", "class_method_signature": "ThresholdMonitoringReporter.trySaveOrDeleteIncident(Check check, Incident incident)", "testcase": false, "constructor": false}], "file": "stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/ThresholdMonitoringReporter.java"}, "focal_method": {"identifier": "checkMetrics", "parameters": "(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Check check)", "modifiers": "private", "return": "void", "body": "private void checkMetrics(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Check check) {\n\t\tList<CheckResult> checkResults = new LinkedList<CheckResult>();\n\n\t\tMap<MetricName, Metric> metricsOfName = metricsGroupedByName.get(check.getTarget().getName());\n\t\tif (metricsOfName == null) {\n\t\t\tmetricsOfName = Collections.emptyMap();\n\t\t}\n\t\tfor (Map.Entry<MetricName, Metric> entry : metricsOfName.entrySet()) {\n\t\t\tif (entry.getKey().matches(check.getTarget())) {\n\t\t\t\ttry {\n\t\t\t\t\tcheckResults.addAll(check.check(entry.getKey(), asMap(entry.getValue())));\n\t\t\t\t} catch (RuntimeException e) {\n\t\t\t\t\tlogger.warn(e.getMessage(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\taddIncident(check, checkResults);\n\t\t} catch (RuntimeException e) {\n\t\t\tlogger.warn(e.getMessage(), e);\n\t\t}\n\t}", "signature": "void checkMetrics(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Check check)", "full_signature": "private void checkMetrics(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Check check)", "class_method_signature": "ThresholdMonitoringReporter.checkMetrics(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Check check)", "testcase": false, "constructor": false, "invocations": ["get", "getName", "getTarget", "emptyMap", "entrySet", "matches", "getKey", "getTarget", "addAll", "check", "getKey", "asMap", "getValue", "warn", "getMessage", "addIncident", "warn", "getMessage"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}