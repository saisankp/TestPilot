{"test_class": {"identifier": "LiteralLexerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "LiteralLexer lexer = new LiteralLexer();", "modifier": "", "type": "LiteralLexer", "declarator": "lexer = new LiteralLexer()", "var_name": "lexer"}, {"original_string": "Environment environment = mock(Environment.class);", "modifier": "", "type": "Environment", "declarator": "environment = mock(Environment.class)", "var_name": "environment"}, {"original_string": "Element location = mock(Element.class);", "modifier": "", "type": "Element", "declarator": "location = mock(Element.class)", "var_name": "location"}], "file": "commons/src/test/java/com/karuslabs/commons/command/aot/lexers/LiteralLexerTest.java"}, "test_case": {"identifier": "lex_warnings", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void lex_warnings() {\n        var tokens = lexer.lex(environment, location, \"a|b|b\");\n        var token = tokens.get(0);\n        \n        verify(environment).warn(location, \"Duplicate alias: \\\"b\\\"\");\n        \n        assertEquals(1, tokens.size());\n        assertEquals(location, token.location);\n        assertEquals(\"a|b|b\", token.literal);\n        assertEquals(\"a\", token.lexeme);\n        assertEquals(Set.of(\"b\"), token.aliases);\n    }", "signature": "void lex_warnings()", "full_signature": "@Test void lex_warnings()", "class_method_signature": "LiteralLexerTest.lex_warnings()", "testcase": true, "constructor": false, "invocations": ["lex", "get", "warn", "verify", "assertEquals", "size", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "of"]}, "focal_class": {"identifier": "LiteralLexer", "superclass": "", "interfaces": "implements Lexer", "fields": [], "methods": [{"identifier": "lex", "parameters": "(Logger logger, String lexeme)", "modifiers": "@Override public", "return": "List<Token>", "signature": "List<Token> lex(Logger logger, String lexeme)", "full_signature": "@Override public List<Token> lex(Logger logger, String lexeme)", "class_method_signature": "LiteralLexer.lex(Logger logger, String lexeme)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/aot/lexers/LiteralLexer.java"}, "focal_method": {"identifier": "lex", "parameters": "(Logger logger, String lexeme)", "modifiers": "@Override public", "return": "List<Token>", "body": "@Override\n    public List<Token> lex(Logger logger, String lexeme) {\n        if (lexeme.contains(\"<\") || lexeme.contains(\">\")) {\n            logger.error(lexeme, \"contains \\\"<\\\"s and \\\">\\\"s\", \"a literal should not contain \\\"<\\\"s and \\\">\\\"s\");\n            return EMPTY_LIST;\n        }\n        \n        var identifiers = lexeme.split(\"\\\\|\", -1);\n        \n        for (var identifier : identifiers) {\n            if (identifier.isEmpty()) {\n                logger.error(lexeme, \"contains an empty literal alias or name\", \"should not be empty\");\n                return EMPTY_LIST;\n            }\n        }\n        \n        var aliases = new HashSet<String>();\n        for (int i = 1; i < identifiers.length; i++) {\n            var alias = identifiers[i];\n            if (!aliases.add(alias)) {\n                logger.warn(\"Duplicate alias: \" + quote(alias));\n            }\n        }\n        \n        // We cannot memomize literal identifiers since .equals(...) ignores aliases\n        // but .toString() returns the (raw) lexeme;\n        return List.of(new Token(new Identifier(Type.LITERAL, lexeme, identifiers[0]), aliases));\n    }", "signature": "List<Token> lex(Logger logger, String lexeme)", "full_signature": "@Override public List<Token> lex(Logger logger, String lexeme)", "class_method_signature": "LiteralLexer.lex(Logger logger, String lexeme)", "testcase": false, "constructor": false, "invocations": ["contains", "contains", "error", "split", "isEmpty", "error", "add", "warn", "quote", "of"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}