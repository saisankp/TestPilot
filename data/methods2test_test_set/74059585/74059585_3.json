{"test_class": {"identifier": "TraceRequestInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpGet requestWithHeaders;", "modifier": "private", "type": "HttpGet", "declarator": "requestWithHeaders", "var_name": "requestWithHeaders"}, {"original_string": "private TraceRequestInterceptor requestInterceptor;", "modifier": "private", "type": "TraceRequestInterceptor", "declarator": "requestInterceptor", "var_name": "requestInterceptor"}, {"original_string": "private TraceHttpRequestInterceptor mockDelegate;", "modifier": "private", "type": "TraceHttpRequestInterceptor", "declarator": "mockDelegate", "var_name": "mockDelegate"}, {"original_string": "private TraceContext testContext = new TraceContext(\n      new TestSpanContextHandle(new SpanContext(new TraceId(\n          BigInteger.TEN), new SpanId(22), TraceOptions.forTraceEnabled())));", "modifier": "private", "type": "TraceContext", "declarator": "testContext = new TraceContext(\n      new TestSpanContextHandle(new SpanContext(new TraceId(\n          BigInteger.TEN), new SpanId(22), TraceOptions.forTraceEnabled())))", "var_name": "testContext"}], "file": "apache-http/src/test/java/com/google/cloud/trace/apachehttp/TraceRequestInterceptorTest.java"}, "test_case": {"identifier": "testProcess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testProcess() throws Exception {\n    HttpContext context = new BasicHttpContext();\n    requestInterceptor.process(requestWithHeaders, context);\n    assertThat(context.getAttribute(\"TRACE-CONTEXT\")).isEqualTo(testContext);\n\n    ArgumentCaptor<HttpRequest> captor = ArgumentCaptor.forClass(HttpRequest.class);\n    verify(mockDelegate).process(captor.capture());\n    HttpRequest request = captor.getValue();\n    assertThat(request.getMethod()).isEqualTo(\"GET\");\n    assertThat(request.getProtocol()).isEqualTo(\"HTTP\");\n    assertThat(request.getURI()).isEqualTo(URI.create(\"http://example.com/foo/bar\"));\n    assertThat(request.getHeader(\"User-Agent\")).isEqualTo(\"test-user-agent\");\n  }", "signature": "void testProcess()", "full_signature": "@Test public void testProcess()", "class_method_signature": "TraceRequestInterceptorTest.testProcess()", "testcase": true, "constructor": false, "invocations": ["process", "isEqualTo", "assertThat", "getAttribute", "forClass", "process", "verify", "capture", "getValue", "isEqualTo", "assertThat", "getMethod", "isEqualTo", "assertThat", "getProtocol", "isEqualTo", "assertThat", "getURI", "create", "isEqualTo", "assertThat", "getHeader"]}, "focal_class": {"identifier": "TraceRequestInterceptor", "superclass": "", "interfaces": "implements HttpRequestInterceptor", "fields": [{"original_string": "private final TraceHttpRequestInterceptor interceptor;", "modifier": "private final", "type": "TraceHttpRequestInterceptor", "declarator": "interceptor", "var_name": "interceptor"}], "methods": [{"identifier": "TraceRequestInterceptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " TraceRequestInterceptor()", "full_signature": "public  TraceRequestInterceptor()", "class_method_signature": "TraceRequestInterceptor.TraceRequestInterceptor()", "testcase": false, "constructor": true}, {"identifier": "TraceRequestInterceptor", "parameters": "(TraceHttpRequestInterceptor interceptor)", "modifiers": "public", "return": "", "signature": " TraceRequestInterceptor(TraceHttpRequestInterceptor interceptor)", "full_signature": "public  TraceRequestInterceptor(TraceHttpRequestInterceptor interceptor)", "class_method_signature": "TraceRequestInterceptor.TraceRequestInterceptor(TraceHttpRequestInterceptor interceptor)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(org.apache.http.HttpRequest request, HttpContext context)", "modifiers": "public", "return": "void", "signature": "void process(org.apache.http.HttpRequest request, HttpContext context)", "full_signature": "public void process(org.apache.http.HttpRequest request, HttpContext context)", "class_method_signature": "TraceRequestInterceptor.process(org.apache.http.HttpRequest request, HttpContext context)", "testcase": false, "constructor": false}], "file": "apache-http/src/main/java/com/google/cloud/trace/apachehttp/TraceRequestInterceptor.java"}, "focal_method": {"identifier": "process", "parameters": "(org.apache.http.HttpRequest request, HttpContext context)", "modifiers": "public", "return": "void", "body": "public void process(org.apache.http.HttpRequest request, HttpContext context) throws HttpException, IOException {\n    TraceContext traceContext = interceptor.process(new RequestAdapter(request));\n    request.addHeader(SpanContextFactory.headerKey(),\n        SpanContextFactory.toHeader(traceContext.getHandle().getCurrentSpanContext()));\n    context.setAttribute(TraceInterceptorUtil.TRACE_CONTEXT_KEY, traceContext);\n  }", "signature": "void process(org.apache.http.HttpRequest request, HttpContext context)", "full_signature": "public void process(org.apache.http.HttpRequest request, HttpContext context)", "class_method_signature": "TraceRequestInterceptor.process(org.apache.http.HttpRequest request, HttpContext context)", "testcase": false, "constructor": false, "invocations": ["process", "addHeader", "headerKey", "toHeader", "getCurrentSpanContext", "getHandle", "setAttribute"]}, "repository": {"repo_id": 74059585, "url": "https://github.com/GoogleCloudPlatform/cloud-trace-java-instrumentation", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 141, "license": "licensed"}}