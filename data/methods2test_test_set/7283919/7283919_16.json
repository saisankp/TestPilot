{"test_class": {"identifier": "TypeTransformerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Class ctop = AbstractCollection.class;", "modifier": "private final", "type": "Class", "declarator": "ctop = AbstractCollection.class", "var_name": "ctop"}, {"original_string": "private final Class cmid = AbstractList.class;", "modifier": "private final", "type": "Class", "declarator": "cmid = AbstractList.class", "var_name": "cmid"}, {"original_string": "private final Class clow = ArrayList.class;", "modifier": "private final", "type": "Class", "declarator": "clow = ArrayList.class", "var_name": "clow"}, {"original_string": "private final TypeTransformer normaliserTop = createTypeTransformerFake(\"normaliser Top\");", "modifier": "private final", "type": "TypeTransformer", "declarator": "normaliserTop = createTypeTransformerFake(\"normaliser Top\")", "var_name": "normaliserTop"}, {"original_string": "private final TypeTransformer normaliserMid = createTypeTransformerFake(\"normaliser Mid\");", "modifier": "private final", "type": "TypeTransformer", "declarator": "normaliserMid = createTypeTransformerFake(\"normaliser Mid\")", "var_name": "normaliserMid"}, {"original_string": "private final TypeTransformer normaliserLow = createTypeTransformerFake(\"normaliser Low\");", "modifier": "private final", "type": "TypeTransformer", "declarator": "normaliserLow = createTypeTransformerFake(\"normaliser Low\")", "var_name": "normaliserLow"}, {"original_string": "private TypeTransformerFactory ttf = new TypeTransformerFactory();", "modifier": "private", "type": "TypeTransformerFactory", "declarator": "ttf = new TypeTransformerFactory()", "var_name": "ttf"}], "file": "dbfit-java/core/src/test/java/dbfit/util/TypeTransformerFactoryTest.java"}, "test_case": {"identifier": "normaliserLookupReturnsClosestParentIfNoExactMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void normaliserLookupReturnsClosestParentIfNoExactMatch() {\n        TypeTransformer normaliser = ttf.getTransformer(clow);\n        assertEquals(normaliserMid, normaliser);\n    }", "signature": "void normaliserLookupReturnsClosestParentIfNoExactMatch()", "full_signature": "@Test public void normaliserLookupReturnsClosestParentIfNoExactMatch()", "class_method_signature": "TypeTransformerFactoryTest.normaliserLookupReturnsClosestParentIfNoExactMatch()", "testcase": true, "constructor": false, "invocations": ["getTransformer", "assertEquals"]}, "focal_class": {"identifier": "TypeTransformerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<Class<?>, TypeTransformer> transformers = new HashMap<Class<?>, TypeTransformer>();", "modifier": "private", "type": "Map<Class<?>, TypeTransformer>", "declarator": "transformers = new HashMap<Class<?>, TypeTransformer>()", "var_name": "transformers"}], "methods": [{"identifier": "getCandidateIfAncestor", "parameters": "(Class<?> target, Class<?> candidate)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> getCandidateIfAncestor(Class<?> target, Class<?> candidate)", "full_signature": "private Class<?> getCandidateIfAncestor(Class<?> target, Class<?> candidate)", "class_method_signature": "TypeTransformerFactory.getCandidateIfAncestor(Class<?> target, Class<?> candidate)", "testcase": false, "constructor": false}, {"identifier": "getCandidateIfBetter", "parameters": "(Class<?> currentBest, Class<?> nextCandidate)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> getCandidateIfBetter(Class<?> currentBest, Class<?> nextCandidate)", "full_signature": "private Class<?> getCandidateIfBetter(Class<?> currentBest, Class<?> nextCandidate)", "class_method_signature": "TypeTransformerFactory.getCandidateIfBetter(Class<?> currentBest, Class<?> nextCandidate)", "testcase": false, "constructor": false}, {"identifier": "findClosestAncestor", "parameters": "(Class<?> targetClass)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> findClosestAncestor(Class<?> targetClass)", "full_signature": "private Class<?> findClosestAncestor(Class<?> targetClass)", "class_method_signature": "TypeTransformerFactory.findClosestAncestor(Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "setTransformer", "parameters": "(Class<?> targetClass, TypeTransformer normaliser)", "modifiers": "public", "return": "void", "signature": "void setTransformer(Class<?> targetClass, TypeTransformer normaliser)", "full_signature": "public void setTransformer(Class<?> targetClass, TypeTransformer normaliser)", "class_method_signature": "TypeTransformerFactory.setTransformer(Class<?> targetClass, TypeTransformer normaliser)", "testcase": false, "constructor": false}, {"identifier": "getTransformer", "parameters": "(Class<?> targetClass)", "modifiers": "public", "return": "TypeTransformer", "signature": "TypeTransformer getTransformer(Class<?> targetClass)", "full_signature": "public TypeTransformer getTransformer(Class<?> targetClass)", "class_method_signature": "TypeTransformerFactory.getTransformer(Class<?> targetClass)", "testcase": false, "constructor": false}], "file": "dbfit-java/core/src/main/java/dbfit/util/TypeTransformerFactory.java"}, "focal_method": {"identifier": "getTransformer", "parameters": "(Class<?> targetClass)", "modifiers": "public", "return": "TypeTransformer", "body": "public TypeTransformer getTransformer(Class<?> targetClass) {\n        TypeTransformer normaliser = transformers.get(targetClass);\n\n        if (normaliser == null) {\n            Class<?> bestCandidate = findClosestAncestor(targetClass);\n\n            if (bestCandidate != null) {\n                normaliser = transformers.get(bestCandidate);\n                transformers.put(targetClass, normaliser);\n            }\n        }\n\n        return normaliser;\n    }", "signature": "TypeTransformer getTransformer(Class<?> targetClass)", "full_signature": "public TypeTransformer getTransformer(Class<?> targetClass)", "class_method_signature": "TypeTransformerFactory.getTransformer(Class<?> targetClass)", "testcase": false, "constructor": false, "invocations": ["get", "findClosestAncestor", "get", "put"]}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}