{"test_class": {"identifier": "OntologyCacheImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OntologyCacheImpl service;", "modifier": "private", "type": "OntologyCacheImpl", "declarator": "service", "var_name": "service"}, {"original_string": "private ValueFactory vf = SimpleValueFactory.getInstance();", "modifier": "private", "type": "ValueFactory", "declarator": "vf = SimpleValueFactory.getInstance()", "var_name": "vf"}, {"original_string": "private Resource recordId = vf.createIRI(\"http://test.com/record\");", "modifier": "private", "type": "Resource", "declarator": "recordId = vf.createIRI(\"http://test.com/record\")", "var_name": "recordId"}, {"original_string": "private IRI ontologyIRI = vf.createIRI(\"http://test.com/ontology\");", "modifier": "private", "type": "IRI", "declarator": "ontologyIRI = vf.createIRI(\"http://test.com/ontology\")", "var_name": "ontologyIRI"}, {"original_string": "private String key;", "modifier": "private", "type": "String", "declarator": "key", "var_name": "key"}, {"original_string": "@Mock\n    private CacheManager cacheManager;", "modifier": "@Mock\n    private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "@Mock\n    private Cache<String, Ontology> cache;", "modifier": "@Mock\n    private", "type": "Cache<String, Ontology>", "declarator": "cache", "var_name": "cache"}, {"original_string": "@Mock\n    private Iterator<Cache.Entry<String, Ontology>> it;", "modifier": "@Mock\n    private", "type": "Iterator<Cache.Entry<String, Ontology>>", "declarator": "it", "var_name": "it"}, {"original_string": "@Mock\n    private Cache.Entry<String, Ontology> entry;", "modifier": "@Mock\n    private", "type": "Cache.Entry<String, Ontology>", "declarator": "entry", "var_name": "entry"}, {"original_string": "@Mock\n    private Ontology ontology;", "modifier": "@Mock\n    private", "type": "Ontology", "declarator": "ontology", "var_name": "ontology"}], "file": "com.mobi.ontology.utils/src/test/java/com/mobi/ontology/utils/cache/impl/OntologyCacheImplTest.java"}, "test_case": {"identifier": "getOntologyCacheTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getOntologyCacheTest() throws Exception {\n        Optional<Cache<String, Ontology>> result = service.getOntologyCache();\n        assertTrue(result.isPresent());\n        assertEquals(cache, result.get());\n\n        service.setCacheManager(null);\n        result = service.getOntologyCache();\n        assertFalse(result.isPresent());\n    }", "signature": "void getOntologyCacheTest()", "full_signature": "@Test public void getOntologyCacheTest()", "class_method_signature": "OntologyCacheImplTest.getOntologyCacheTest()", "testcase": true, "constructor": false, "invocations": ["getOntologyCache", "assertTrue", "isPresent", "assertEquals", "get", "setCacheManager", "getOntologyCache", "assertFalse", "isPresent"]}, "focal_class": {"identifier": "OntologyCacheImpl", "superclass": "", "interfaces": "implements OntologyCache", "fields": [{"original_string": "private final String CACHE_NAME = \"ontologyCache\";", "modifier": "private final", "type": "String", "declarator": "CACHE_NAME = \"ontologyCache\"", "var_name": "CACHE_NAME"}, {"original_string": "private CacheManager cacheManager;", "modifier": "private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}], "methods": [{"identifier": "setCacheManager", "parameters": "(CacheManager cacheManager)", "modifiers": "@Reference public", "return": "void", "signature": "void setCacheManager(CacheManager cacheManager)", "full_signature": "@Reference public void setCacheManager(CacheManager cacheManager)", "class_method_signature": "OntologyCacheImpl.setCacheManager(CacheManager cacheManager)", "testcase": false, "constructor": false}, {"identifier": "generateKey", "parameters": "(String recordIri, String commitIri)", "modifiers": "@Override public", "return": "String", "signature": "String generateKey(String recordIri, String commitIri)", "full_signature": "@Override public String generateKey(String recordIri, String commitIri)", "class_method_signature": "OntologyCacheImpl.generateKey(String recordIri, String commitIri)", "testcase": false, "constructor": false}, {"identifier": "getOntologyCache", "parameters": "()", "modifiers": "@Override public", "return": "Optional<Cache<String, Ontology>>", "signature": "Optional<Cache<String, Ontology>> getOntologyCache()", "full_signature": "@Override public Optional<Cache<String, Ontology>> getOntologyCache()", "class_method_signature": "OntologyCacheImpl.getOntologyCache()", "testcase": false, "constructor": false}, {"identifier": "clearCacheImports", "parameters": "(Resource ontologyIRI)", "modifiers": "@Override public", "return": "void", "signature": "void clearCacheImports(Resource ontologyIRI)", "full_signature": "@Override public void clearCacheImports(Resource ontologyIRI)", "class_method_signature": "OntologyCacheImpl.clearCacheImports(Resource ontologyIRI)", "testcase": false, "constructor": false}, {"identifier": "clearCache", "parameters": "(@Nonnull Resource recordId)", "modifiers": "@Override public", "return": "void", "signature": "void clearCache(@Nonnull Resource recordId)", "full_signature": "@Override public void clearCache(@Nonnull Resource recordId)", "class_method_signature": "OntologyCacheImpl.clearCache(@Nonnull Resource recordId)", "testcase": false, "constructor": false}, {"identifier": "removeFromCache", "parameters": "(String recordIdStr, String commitIdStr)", "modifiers": "@Override public", "return": "void", "signature": "void removeFromCache(String recordIdStr, String commitIdStr)", "full_signature": "@Override public void removeFromCache(String recordIdStr, String commitIdStr)", "class_method_signature": "OntologyCacheImpl.removeFromCache(String recordIdStr, String commitIdStr)", "testcase": false, "constructor": false}], "file": "com.mobi.ontology.utils/src/main/java/com/mobi/ontology/utils/cache/impl/OntologyCacheImpl.java"}, "focal_method": {"identifier": "getOntologyCache", "parameters": "()", "modifiers": "@Override public", "return": "Optional<Cache<String, Ontology>>", "body": "@Override\n    public Optional<Cache<String, Ontology>> getOntologyCache() {\n        if (cacheManager != null) {\n            return cacheManager.getCache(CACHE_NAME, String.class, Ontology.class);\n        }\n        return Optional.empty();\n    }", "signature": "Optional<Cache<String, Ontology>> getOntologyCache()", "full_signature": "@Override public Optional<Cache<String, Ontology>> getOntologyCache()", "class_method_signature": "OntologyCacheImpl.getOntologyCache()", "testcase": false, "constructor": false, "invocations": ["getCache", "empty"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}