{"test_class": {"identifier": "NoopAwareSpanHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TraceContext context = TraceContext.newBuilder().traceId(1).spanId(2).sampled(true).build();", "modifier": "", "type": "TraceContext", "declarator": "context = TraceContext.newBuilder().traceId(1).spanId(2).sampled(true).build()", "var_name": "context"}, {"original_string": "MutableSpan span = new MutableSpan();", "modifier": "", "type": "MutableSpan", "declarator": "span = new MutableSpan()", "var_name": "span"}, {"original_string": "AtomicBoolean noop = new AtomicBoolean(false);", "modifier": "", "type": "AtomicBoolean", "declarator": "noop = new AtomicBoolean(false)", "var_name": "noop"}, {"original_string": "@Mock SpanHandler one;", "modifier": "@Mock", "type": "SpanHandler", "declarator": "one", "var_name": "one"}, {"original_string": "@Mock SpanHandler two;", "modifier": "@Mock", "type": "SpanHandler", "declarator": "two", "var_name": "two"}, {"original_string": "@Mock SpanHandler three;", "modifier": "@Mock", "type": "SpanHandler", "declarator": "three", "var_name": "three"}], "file": "brave/src/test/java/brave/internal/handler/NoopAwareSpanHandlerTest.java"}, "test_case": {"identifier": "create_multiple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void create_multiple() {\n    SpanHandler[] handlers = new SpanHandler[2];\n    handlers[0] = one;\n    handlers[1] = two;\n    SpanHandler handler = NoopAwareSpanHandler.create(handlers, noop);\n\n    assertThat(handler).extracting(\"delegate.handlers\")\n        .asInstanceOf(InstanceOfAssertFactories.array(SpanHandler[].class))\n        .containsExactly(one, two);\n  }", "signature": "void create_multiple()", "full_signature": "@Test public void create_multiple()", "class_method_signature": "NoopAwareSpanHandlerTest.create_multiple()", "testcase": true, "constructor": false, "invocations": ["create", "containsExactly", "asInstanceOf", "extracting", "assertThat", "array"]}, "focal_class": {"identifier": "NoopAwareSpanHandler", "superclass": "extends SpanHandler", "interfaces": "", "fields": [{"original_string": "final SpanHandler delegate;", "modifier": "final", "type": "SpanHandler", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "final AtomicBoolean noop;", "modifier": "final", "type": "AtomicBoolean", "declarator": "noop", "var_name": "noop"}], "methods": [{"identifier": "create", "parameters": "(SpanHandler[] handlers,\n      AtomicBoolean noop)", "modifiers": "public static", "return": "SpanHandler", "signature": "SpanHandler create(SpanHandler[] handlers,\n      AtomicBoolean noop)", "full_signature": "public static SpanHandler create(SpanHandler[] handlers,\n      AtomicBoolean noop)", "class_method_signature": "NoopAwareSpanHandler.create(SpanHandler[] handlers,\n      AtomicBoolean noop)", "testcase": false, "constructor": false}, {"identifier": "NoopAwareSpanHandler", "parameters": "(SpanHandler delegate, AtomicBoolean noop)", "modifiers": "", "return": "", "signature": " NoopAwareSpanHandler(SpanHandler delegate, AtomicBoolean noop)", "full_signature": "  NoopAwareSpanHandler(SpanHandler delegate, AtomicBoolean noop)", "class_method_signature": "NoopAwareSpanHandler.NoopAwareSpanHandler(SpanHandler delegate, AtomicBoolean noop)", "testcase": false, "constructor": true}, {"identifier": "begin", "parameters": "(TraceContext context, MutableSpan span, TraceContext parent)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean begin(TraceContext context, MutableSpan span, TraceContext parent)", "full_signature": "@Override public boolean begin(TraceContext context, MutableSpan span, TraceContext parent)", "class_method_signature": "NoopAwareSpanHandler.begin(TraceContext context, MutableSpan span, TraceContext parent)", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "(TraceContext context, MutableSpan span, Cause cause)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean end(TraceContext context, MutableSpan span, Cause cause)", "full_signature": "@Override public boolean end(TraceContext context, MutableSpan span, Cause cause)", "class_method_signature": "NoopAwareSpanHandler.end(TraceContext context, MutableSpan span, Cause cause)", "testcase": false, "constructor": false}, {"identifier": "handlesAbandoned", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handlesAbandoned()", "full_signature": "@Override public boolean handlesAbandoned()", "class_method_signature": "NoopAwareSpanHandler.handlesAbandoned()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "NoopAwareSpanHandler.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "NoopAwareSpanHandler.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "NoopAwareSpanHandler.toString()", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/internal/handler/NoopAwareSpanHandler.java"}, "focal_method": {"identifier": "create", "parameters": "(SpanHandler[] handlers,\n      AtomicBoolean noop)", "modifiers": "public static", "return": "SpanHandler", "body": "public static SpanHandler create(SpanHandler[] handlers,\n      AtomicBoolean noop) {\n    if (handlers.length == 0) return SpanHandler.NOOP;\n    if (handlers.length == 1) return new NoopAwareSpanHandler(handlers[0], noop);\n    return new NoopAwareSpanHandler(new CompositeSpanHandler(handlers), noop);\n  }", "signature": "SpanHandler create(SpanHandler[] handlers,\n      AtomicBoolean noop)", "full_signature": "public static SpanHandler create(SpanHandler[] handlers,\n      AtomicBoolean noop)", "class_method_signature": "NoopAwareSpanHandler.create(SpanHandler[] handlers,\n      AtomicBoolean noop)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}