{"test_class": {"identifier": "KieMemoryCompilerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String EXAMPLE_CLASS = \"package org.kie.memorycompiler;\\n\" +\n            \"\\n\" +\n            \"public class ExampleClass {\\n\" +\n            \"\\n\" +\n            \"    public int sum(Integer a, Integer b){\\n\" +\n            \"        return a + b;\\n\" +\n            \"    }\\n\" +\n            \"}\";", "modifier": "private final static", "type": "String", "declarator": "EXAMPLE_CLASS = \"package org.kie.memorycompiler;\\n\" +\n            \"\\n\" +\n            \"public class ExampleClass {\\n\" +\n            \"\\n\" +\n            \"    public int sum(Integer a, Integer b){\\n\" +\n            \"        return a + b;\\n\" +\n            \"    }\\n\" +\n            \"}\"", "var_name": "EXAMPLE_CLASS"}, {"original_string": "private final static String WARNING_CLASS = \"package org.kie.memorycompiler;\\n\" +\n            \"\\n\" +\n            \"import java.util.List;\\n\" +\n            \"\\n\" +\n            \"public class WarningClass {\\n\" +\n            \"\\n\" +\n            \"    private List<String> warningField;\\n\" +\n            \"\\n\" +\n            \"    public void setWarningField(Object warningField) {\\n\" +\n            \"        this.warningField = (List<String>) warningField;\\n\" +\n            \"    }\\n\" +\n            \"\\n\" +\n            \"    public int minus(Integer a, Integer b) {\\n\" +\n            \"        return a - b;\\n\" +\n            \"    }\\n\" +\n            \"\\n\" +\n            \"};\\n\";", "modifier": "private final static", "type": "String", "declarator": "WARNING_CLASS = \"package org.kie.memorycompiler;\\n\" +\n            \"\\n\" +\n            \"import java.util.List;\\n\" +\n            \"\\n\" +\n            \"public class WarningClass {\\n\" +\n            \"\\n\" +\n            \"    private List<String> warningField;\\n\" +\n            \"\\n\" +\n            \"    public void setWarningField(Object warningField) {\\n\" +\n            \"        this.warningField = (List<String>) warningField;\\n\" +\n            \"    }\\n\" +\n            \"\\n\" +\n            \"    public int minus(Integer a, Integer b) {\\n\" +\n            \"        return a - b;\\n\" +\n            \"    }\\n\" +\n            \"\\n\" +\n            \"};\\n\"", "var_name": "WARNING_CLASS"}], "file": "kie-memory-compiler/src/test/java/org/kie/memorycompiler/KieMemoryCompilerTest.java"}, "test_case": {"identifier": "invalidClass", "parameters": "()", "modifiers": "@Test(expected = KieMemoryCompilerException.class) public", "return": "void", "body": "@Test(expected = KieMemoryCompilerException.class)\n    public void invalidClass() {\n        Map<String, String> source = singletonMap(\"org.kie.memorycompiler.InvalidJavaClass\", \"Invalid Java Code\");\n        KieMemoryCompiler.compile(source, this.getClass().getClassLoader());\n    }", "signature": "void invalidClass()", "full_signature": "@Test(expected = KieMemoryCompilerException.class) public void invalidClass()", "class_method_signature": "KieMemoryCompilerTest.invalidClass()", "testcase": true, "constructor": false, "invocations": ["singletonMap", "compile", "getClassLoader", "getClass"]}, "focal_class": {"identifier": "KieMemoryCompiler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JavaCompiler JAVA_COMPILER = ToolProvider.getSystemJavaCompiler();", "modifier": "private static final", "type": "JavaCompiler", "declarator": "JAVA_COMPILER = ToolProvider.getSystemJavaCompiler()", "var_name": "JAVA_COMPILER"}, {"original_string": "private static final List<String> OPTIONS = Arrays.asList(\"-source\", \"1.8\", \"-target\", \"1.8\", \"-encoding\", \"UTF-8\");", "modifier": "private static final", "type": "List<String>", "declarator": "OPTIONS = Arrays.asList(\"-source\", \"1.8\", \"-target\", \"1.8\", \"-encoding\", \"UTF-8\")", "var_name": "OPTIONS"}], "methods": [{"identifier": "KieMemoryCompiler", "parameters": "()", "modifiers": "private", "return": "", "signature": " KieMemoryCompiler()", "full_signature": "private  KieMemoryCompiler()", "class_method_signature": "KieMemoryCompiler.KieMemoryCompiler()", "testcase": false, "constructor": true}, {"identifier": "compile", "parameters": "(Map<String, String> classNameSourceMap, ClassLoader classLoader)", "modifiers": "public static", "return": "Map<String, Class<?>>", "signature": "Map<String, Class<?>> compile(Map<String, String> classNameSourceMap, ClassLoader classLoader)", "full_signature": "public static Map<String, Class<?>> compile(Map<String, String> classNameSourceMap, ClassLoader classLoader)", "class_method_signature": "KieMemoryCompiler.compile(Map<String, String> classNameSourceMap, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "compilerError", "parameters": "(DiagnosticCollector<JavaFileObject> collector)", "modifiers": "private static", "return": "void", "signature": "void compilerError(DiagnosticCollector<JavaFileObject> collector)", "full_signature": "private static void compilerError(DiagnosticCollector<JavaFileObject> collector)", "class_method_signature": "KieMemoryCompiler.compilerError(DiagnosticCollector<JavaFileObject> collector)", "testcase": false, "constructor": false}], "file": "kie-memory-compiler/src/main/java/org/kie/memorycompiler/KieMemoryCompiler.java"}, "focal_method": {"identifier": "compile", "parameters": "(Map<String, String> classNameSourceMap, ClassLoader classLoader)", "modifiers": "public static", "return": "Map<String, Class<?>>", "body": "public static Map<String, Class<?>> compile(Map<String, String> classNameSourceMap, ClassLoader classLoader) {\n        Map<String, KieMemoryCompilerSourceCode> sourceCodes = classNameSourceMap.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey,\n                                                                                                                               entry -> new KieMemoryCompilerSourceCode(entry.getKey(), entry.getValue())));\n        KieMemoryCompilerClassLoader kieMemoryCompilerClassLoader = new KieMemoryCompilerClassLoader(classLoader);\n        DiagnosticCollector<JavaFileObject> collector = new DiagnosticCollector<>();\n        KieMemoryCompilerFileManager fileManager = new KieMemoryCompilerFileManager(JAVA_COMPILER.getStandardFileManager(null, null, null), kieMemoryCompilerClassLoader);\n        JavaCompiler.CompilationTask task = JAVA_COMPILER.getTask(null, fileManager, collector, OPTIONS, null, sourceCodes.values());\n\n        boolean compilationSuccess = task.call();\n        boolean hasCompilerError = collector.getDiagnostics().stream().anyMatch(d -> d.getKind().equals(Diagnostic.Kind.ERROR));\n        if (!compilationSuccess || hasCompilerError) {\n            compilerError(collector);\n        }\n\n        Map<String, Class<?>> toReturn = new HashMap<>();\n        for (String className : sourceCodes.keySet()) {\n            try {\n                toReturn.put(className, kieMemoryCompilerClassLoader.loadClass(className));\n            } catch (ClassNotFoundException e) {\n                throw new KieMemoryCompilerException(e.getMessage(), e);\n            }\n        }\n        return toReturn;\n    }", "signature": "Map<String, Class<?>> compile(Map<String, String> classNameSourceMap, ClassLoader classLoader)", "full_signature": "public static Map<String, Class<?>> compile(Map<String, String> classNameSourceMap, ClassLoader classLoader)", "class_method_signature": "KieMemoryCompiler.compile(Map<String, String> classNameSourceMap, ClassLoader classLoader)", "testcase": false, "constructor": false, "invocations": ["collect", "stream", "entrySet", "toMap", "getKey", "getValue", "getStandardFileManager", "getTask", "values", "call", "anyMatch", "stream", "getDiagnostics", "equals", "getKind", "compilerError", "keySet", "put", "loadClass", "getMessage"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}