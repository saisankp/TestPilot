{"test_class": {"identifier": "ResourceDimensionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-server-master/src/test/java/com/netflix/titus/master/model/ResourceDimensionsTest.java"}, "test_case": {"identifier": "testResourceDimensionDivide", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResourceDimensionDivide() throws Exception {\n        ResourceDimension large = ResourceDimensionSample.SmallWithGpuAndOpportunisticX2.build();\n        ResourceDimension small = ResourceDimensionSample.SmallWithGpuAndOpportunistic.build();\n\n        Pair<Long, ResourceDimension> result = ResourceDimensions.divide(large, small);\n        assertThat(result.getLeft()).isEqualTo(2);\n        assertThat(result.getRight()).isEqualTo(ResourceDimension.empty());\n    }", "signature": "void testResourceDimensionDivide()", "full_signature": "@Test public void testResourceDimensionDivide()", "class_method_signature": "ResourceDimensionsTest.testResourceDimensionDivide()", "testcase": true, "constructor": false, "invocations": ["build", "build", "divide", "isEqualTo", "assertThat", "getLeft", "isEqualTo", "assertThat", "getRight", "empty"]}, "focal_class": {"identifier": "ResourceDimensions", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "add", "parameters": "(ResourceDimension... parts)", "modifiers": "public static", "return": "ResourceDimension", "signature": "ResourceDimension add(ResourceDimension... parts)", "full_signature": "public static ResourceDimension add(ResourceDimension... parts)", "class_method_signature": "ResourceDimensions.add(ResourceDimension... parts)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Collection<ResourceDimension> parts)", "modifiers": "public static", "return": "ResourceDimension", "signature": "ResourceDimension add(Collection<ResourceDimension> parts)", "full_signature": "public static ResourceDimension add(Collection<ResourceDimension> parts)", "class_method_signature": "ResourceDimensions.add(Collection<ResourceDimension> parts)", "testcase": false, "constructor": false}, {"identifier": "subtractPositive", "parameters": "(ResourceDimension left, ResourceDimension right)", "modifiers": "public static", "return": "ResourceDimension", "signature": "ResourceDimension subtractPositive(ResourceDimension left, ResourceDimension right)", "full_signature": "public static ResourceDimension subtractPositive(ResourceDimension left, ResourceDimension right)", "class_method_signature": "ResourceDimensions.subtractPositive(ResourceDimension left, ResourceDimension right)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(ResourceDimension base, double multiplier)", "modifiers": "public static", "return": "ResourceDimension", "signature": "ResourceDimension multiply(ResourceDimension base, double multiplier)", "full_signature": "public static ResourceDimension multiply(ResourceDimension base, double multiplier)", "class_method_signature": "ResourceDimensions.multiply(ResourceDimension base, double multiplier)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(ResourceDimension left, ResourceDimension right)", "modifiers": "public static", "return": "Pair<Long, ResourceDimension>", "signature": "Pair<Long, ResourceDimension> divide(ResourceDimension left, ResourceDimension right)", "full_signature": "public static Pair<Long, ResourceDimension> divide(ResourceDimension left, ResourceDimension right)", "class_method_signature": "ResourceDimensions.divide(ResourceDimension left, ResourceDimension right)", "testcase": false, "constructor": false}, {"identifier": "divideAndRoundUp", "parameters": "(ResourceDimension left, ResourceDimension right)", "modifiers": "public static", "return": "long", "signature": "long divideAndRoundUp(ResourceDimension left, ResourceDimension right)", "full_signature": "public static long divideAndRoundUp(ResourceDimension left, ResourceDimension right)", "class_method_signature": "ResourceDimensions.divideAndRoundUp(ResourceDimension left, ResourceDimension right)", "testcase": false, "constructor": false}, {"identifier": "alignUp", "parameters": "(ResourceDimension source, ResourceDimension reference)", "modifiers": "public static", "return": "ResourceDimension", "signature": "ResourceDimension alignUp(ResourceDimension source, ResourceDimension reference)", "full_signature": "public static ResourceDimension alignUp(ResourceDimension source, ResourceDimension reference)", "class_method_signature": "ResourceDimensions.alignUp(ResourceDimension source, ResourceDimension reference)", "testcase": false, "constructor": false}, {"identifier": "isBigger", "parameters": "(ResourceDimension dimension, ResourceDimension subDimension)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBigger(ResourceDimension dimension, ResourceDimension subDimension)", "full_signature": "public static boolean isBigger(ResourceDimension dimension, ResourceDimension subDimension)", "class_method_signature": "ResourceDimensions.isBigger(ResourceDimension dimension, ResourceDimension subDimension)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(ResourceDimension input, StringBuilder output)", "modifiers": "public static", "return": "StringBuilder", "signature": "StringBuilder format(ResourceDimension input, StringBuilder output)", "full_signature": "public static StringBuilder format(ResourceDimension input, StringBuilder output)", "class_method_signature": "ResourceDimensions.format(ResourceDimension input, StringBuilder output)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(ResourceDimension input)", "modifiers": "public static", "return": "String", "signature": "String format(ResourceDimension input)", "full_signature": "public static String format(ResourceDimension input)", "class_method_signature": "ResourceDimensions.format(ResourceDimension input)", "testcase": false, "constructor": false}, {"identifier": "fromServerInfo", "parameters": "(ServerInfo serverInfo)", "modifiers": "public static", "return": "ResourceDimension", "signature": "ResourceDimension fromServerInfo(ServerInfo serverInfo)", "full_signature": "public static ResourceDimension fromServerInfo(ServerInfo serverInfo)", "class_method_signature": "ResourceDimensions.fromServerInfo(ServerInfo serverInfo)", "testcase": false, "constructor": false}, {"identifier": "fromAwsInstanceType", "parameters": "(AwsInstanceType instanceType)", "modifiers": "public static", "return": "ResourceDimension", "signature": "ResourceDimension fromAwsInstanceType(AwsInstanceType instanceType)", "full_signature": "public static ResourceDimension fromAwsInstanceType(AwsInstanceType instanceType)", "class_method_signature": "ResourceDimensions.fromAwsInstanceType(AwsInstanceType instanceType)", "testcase": false, "constructor": false}, {"identifier": "toResAllocs", "parameters": "(String name, ResourceDimension resourceDimension)", "modifiers": "public static", "return": "ResAllocs", "signature": "ResAllocs toResAllocs(String name, ResourceDimension resourceDimension)", "full_signature": "public static ResAllocs toResAllocs(String name, ResourceDimension resourceDimension)", "class_method_signature": "ResourceDimensions.toResAllocs(String name, ResourceDimension resourceDimension)", "testcase": false, "constructor": false}, {"identifier": "fromResAllocs", "parameters": "(ResAllocs resAllocs)", "modifiers": "public static", "return": "ResourceDimension", "signature": "ResourceDimension fromResAllocs(ResAllocs resAllocs)", "full_signature": "public static ResourceDimension fromResAllocs(ResAllocs resAllocs)", "class_method_signature": "ResourceDimensions.fromResAllocs(ResAllocs resAllocs)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/model/ResourceDimensions.java"}, "focal_method": {"identifier": "divide", "parameters": "(ResourceDimension left, ResourceDimension right)", "modifiers": "public static", "return": "Pair<Long, ResourceDimension>", "body": "public static Pair<Long, ResourceDimension> divide(ResourceDimension left, ResourceDimension right) {\n        double multiplier = 0;\n\n        if (left.getCpu() != 0) {\n            Preconditions.checkArgument(right.getCpu() != 0, \"CPU: division by 0\");\n            multiplier = left.getCpu() / right.getCpu();\n        }\n        if (left.getMemoryMB() != 0) {\n            Preconditions.checkArgument(right.getMemoryMB() != 0, \"MemoryMB: division by 0\");\n            multiplier = Math.max(multiplier, left.getMemoryMB() / right.getMemoryMB());\n        }\n        if (left.getDiskMB() != 0) {\n            Preconditions.checkArgument(right.getDiskMB() != 0, \"DiskMB: division by 0\");\n            multiplier = Math.max(multiplier, left.getDiskMB() / right.getDiskMB());\n        }\n        if (left.getNetworkMbs() != 0) {\n            Preconditions.checkArgument(right.getNetworkMbs() != 0, \"NetworkMbs: division by 0\");\n            multiplier = Math.max(multiplier, left.getNetworkMbs() / right.getNetworkMbs());\n        }\n        if (left.getGpu() != 0) {\n            Preconditions.checkArgument(right.getGpu() != 0, \"GPU: division by 0\");\n            multiplier = Math.max(multiplier, left.getGpu() / right.getGpu());\n        }\n        if (left.getOpportunisticCpu() != 0) {\n            Preconditions.checkArgument(right.getOpportunisticCpu() != 0, \"Opportunistic CPU: division by 0\");\n            multiplier = Math.max(multiplier, left.getOpportunisticCpu() / right.getOpportunisticCpu());\n        }\n\n        if (multiplier == 0) { // left is empty\n            return Pair.of(0L, ResourceDimension.empty());\n        }\n        if (multiplier < 1) { // left < right\n            return Pair.of(0L, left);\n        }\n        if (multiplier == 1) {\n            return Pair.of(1L, ResourceDimension.empty());\n        }\n\n        long full = (long) multiplier;\n\n        return Pair.of(full,\n                ResourceDimension.newBuilder()\n                        .withCpus(Math.max(0, left.getCpu() - right.getCpu() * full))\n                        .withMemoryMB(Math.max(0, left.getMemoryMB() - right.getMemoryMB() * full))\n                        .withDiskMB(Math.max(0, left.getDiskMB() - right.getDiskMB() * full))\n                        .withNetworkMbs(Math.max(0, left.getNetworkMbs() - right.getNetworkMbs() * full))\n                        .withGpu(Math.max(0, left.getGpu() - right.getGpu() * full))\n                        .withOpportunisticCpus(Math.max(0, left.getOpportunisticCpu() - right.getOpportunisticCpu() * full))\n                        .build()\n        );\n    }", "signature": "Pair<Long, ResourceDimension> divide(ResourceDimension left, ResourceDimension right)", "full_signature": "public static Pair<Long, ResourceDimension> divide(ResourceDimension left, ResourceDimension right)", "class_method_signature": "ResourceDimensions.divide(ResourceDimension left, ResourceDimension right)", "testcase": false, "constructor": false, "invocations": ["getCpu", "checkArgument", "getCpu", "getCpu", "getCpu", "getMemoryMB", "checkArgument", "getMemoryMB", "max", "getMemoryMB", "getMemoryMB", "getDiskMB", "checkArgument", "getDiskMB", "max", "getDiskMB", "getDiskMB", "getNetworkMbs", "checkArgument", "getNetworkMbs", "max", "getNetworkMbs", "getNetworkMbs", "getGpu", "checkArgument", "getGpu", "max", "getGpu", "getGpu", "getOpportunisticCpu", "checkArgument", "getOpportunisticCpu", "max", "getOpportunisticCpu", "getOpportunisticCpu", "of", "empty", "of", "of", "empty", "of", "build", "withOpportunisticCpus", "withGpu", "withNetworkMbs", "withDiskMB", "withMemoryMB", "withCpus", "newBuilder", "max", "getCpu", "getCpu", "max", "getMemoryMB", "getMemoryMB", "max", "getDiskMB", "getDiskMB", "max", "getNetworkMbs", "getNetworkMbs", "max", "getGpu", "getGpu", "max", "getOpportunisticCpu", "getOpportunisticCpu"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}