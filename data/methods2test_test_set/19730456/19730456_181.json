{"test_class": {"identifier": "EthashRuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "BlockHeader validHeader = new BlockHeader(Hex.decode(\"f90211a0d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479405a56e2d52c817161883f50c441c3228cfe54d9fa0d67e4d450343046425ae4271474353857ab860dbc0a1dde64b41b5cd3a532bf3a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bff80000001821388808455ba422499476574682f76312e302e302f6c696e75782f676f312e342e32a0969b900de27b6ac6a67742365dd65f55a0526c41fd18e1b16f1a1215c2e66f5988539bd4979fef1ec4\"));", "modifier": "", "type": "BlockHeader", "declarator": "validHeader = new BlockHeader(Hex.decode(\"f90211a0d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479405a56e2d52c817161883f50c441c3228cfe54d9fa0d67e4d450343046425ae4271474353857ab860dbc0a1dde64b41b5cd3a532bf3a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bff80000001821388808455ba422499476574682f76312e302e302f6c696e75782f676f312e342e32a0969b900de27b6ac6a67742365dd65f55a0526c41fd18e1b16f1a1215c2e66f5988539bd4979fef1ec4\"))", "var_name": "validHeader"}, {"original_string": "BlockHeader partlyValidHeader = new BlockHeader(Hex.decode(\"f9020aa0548911f91c652dd110641a55f09fa4fa83d9c28d3afddce60a64256fb58468e9a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a09c7460dbfd853c07a340e55bab456d4035190400246b731b193ec8c8044f41aea056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bb471fc591457468657265756d4a20706f7765726564a03e2b0549a7219dd2a5c125aee28676a754272fea5d548f314521508635a8387888d3c67376b7804888\"));", "modifier": "", "type": "BlockHeader", "declarator": "partlyValidHeader = new BlockHeader(Hex.decode(\"f9020aa0548911f91c652dd110641a55f09fa4fa83d9c28d3afddce60a64256fb58468e9a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a09c7460dbfd853c07a340e55bab456d4035190400246b731b193ec8c8044f41aea056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bb471fc591457468657265756d4a20706f7765726564a03e2b0549a7219dd2a5c125aee28676a754272fea5d548f314521508635a8387888d3c67376b7804888\"))", "var_name": "partlyValidHeader"}, {"original_string": "BlockHeader invalidHeader = new BlockHeader(Hex.decode(\"f90211a0d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479405a56e2d52c817161883f50c441c3228cfe54d9fa0d67e4d450343046425ae4271474353857ab860dbc0a1dde64b41b5cd3a532bf3a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bff80000001821388808455ba422499476574682f76312e302e302f6c696e75782f676f312e342e32a0969b900de27b6ac6a67742365dd65f55a0526c41fd18e1b16f1a1215c2e66f5a88539bd4979fef1ec4\"));", "modifier": "", "type": "BlockHeader", "declarator": "invalidHeader = new BlockHeader(Hex.decode(\"f90211a0d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479405a56e2d52c817161883f50c441c3228cfe54d9fa0d67e4d450343046425ae4271474353857ab860dbc0a1dde64b41b5cd3a532bf3a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bff80000001821388808455ba422499476574682f76312e302e302f6c696e75782f676f312e342e32a0969b900de27b6ac6a67742365dd65f55a0526c41fd18e1b16f1a1215c2e66f5a88539bd4979fef1ec4\"))", "var_name": "invalidHeader"}, {"original_string": "BlockSummary dummySummaryNum_1 = new BlockSummary(new Block(validHeader, Collections.emptyList(), Collections.emptyList()),\n            Collections.emptyMap(), Collections.emptyList(), Collections.emptyList());", "modifier": "", "type": "BlockSummary", "declarator": "dummySummaryNum_1 = new BlockSummary(new Block(validHeader, Collections.emptyList(), Collections.emptyList()),\n            Collections.emptyMap(), Collections.emptyList(), Collections.emptyList())", "var_name": "dummySummaryNum_1"}], "file": "ethereumj-core/src/test/java/org/ethereum/validator/EthashRuleTest.java"}, "test_case": {"identifier": "testFake", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFake() {\n        CompositeEthereumListener listener = new CompositeEthereumListenerMock();\n        EthashRule rule = new EthashRule(EthashRule.Mode.fake, EthashRule.ChainType.main, listener);\n\n        assertEquals(Success, rule.validate(validHeader));\n        assertEquals(Success, rule.validate(partlyValidHeader));\n        assertNotEquals(Success, rule.validate(invalidHeader));\n    }", "signature": "void testFake()", "full_signature": "@Test public void testFake()", "class_method_signature": "EthashRuleTest.testFake()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "validate", "assertEquals", "validate", "assertNotEquals", "validate"]}, "focal_class": {"identifier": "EthashRule", "superclass": "extends BlockHeaderRule", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(\"blockchain\");", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"blockchain\")", "var_name": "logger"}, {"original_string": "EthashValidationHelper ethashHelper;", "modifier": "", "type": "EthashValidationHelper", "declarator": "ethashHelper", "var_name": "ethashHelper"}, {"original_string": "ProofOfWorkRule powRule = new ProofOfWorkRule();", "modifier": "", "type": "ProofOfWorkRule", "declarator": "powRule = new ProofOfWorkRule()", "var_name": "powRule"}, {"original_string": "private static final int MIX_DENOMINATOR = 5;", "modifier": "private static final", "type": "int", "declarator": "MIX_DENOMINATOR = 5", "var_name": "MIX_DENOMINATOR"}, {"original_string": "private Mode mode = mixed;", "modifier": "private", "type": "Mode", "declarator": "mode = mixed", "var_name": "mode"}, {"original_string": "private ChainType chain = main;", "modifier": "private", "type": "ChainType", "declarator": "chain = main", "var_name": "chain"}, {"original_string": "private boolean syncDone = false;", "modifier": "private", "type": "boolean", "declarator": "syncDone = false", "var_name": "syncDone"}, {"original_string": "private Random rnd = new Random();", "modifier": "private", "type": "Random", "declarator": "rnd = new Random()", "var_name": "rnd"}], "methods": [{"identifier": "createRegular", "parameters": "(SystemProperties systemProperties, CompositeEthereumListener listener)", "modifiers": "public static", "return": "EthashRule", "signature": "EthashRule createRegular(SystemProperties systemProperties, CompositeEthereumListener listener)", "full_signature": "public static EthashRule createRegular(SystemProperties systemProperties, CompositeEthereumListener listener)", "class_method_signature": "EthashRule.createRegular(SystemProperties systemProperties, CompositeEthereumListener listener)", "testcase": false, "constructor": false}, {"identifier": "createReverse", "parameters": "(SystemProperties systemProperties)", "modifiers": "public static", "return": "EthashRule", "signature": "EthashRule createReverse(SystemProperties systemProperties)", "full_signature": "public static EthashRule createReverse(SystemProperties systemProperties)", "class_method_signature": "EthashRule.createReverse(SystemProperties systemProperties)", "testcase": false, "constructor": false}, {"identifier": "EthashRule", "parameters": "(Mode mode, ChainType chain, CompositeEthereumListener listener)", "modifiers": "public", "return": "", "signature": " EthashRule(Mode mode, ChainType chain, CompositeEthereumListener listener)", "full_signature": "public  EthashRule(Mode mode, ChainType chain, CompositeEthereumListener listener)", "class_method_signature": "EthashRule.EthashRule(Mode mode, ChainType chain, CompositeEthereumListener listener)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(BlockHeader header)", "modifiers": "@Override public", "return": "ValidationResult", "signature": "ValidationResult validate(BlockHeader header)", "full_signature": "@Override public ValidationResult validate(BlockHeader header)", "class_method_signature": "EthashRule.validate(BlockHeader header)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/validator/EthashRule.java"}, "focal_method": {"identifier": "validate", "parameters": "(BlockHeader header)", "modifiers": "@Override public", "return": "ValidationResult", "body": "@Override\n    public ValidationResult validate(BlockHeader header) {\n\n        if (header.isGenesis())\n            return Success;\n\n        if (ethashHelper == null)\n            return powRule.validate(header);\n\n        // trigger cache for side chains before mixed mode condition\n        if (chain.isSide())\n            ethashHelper.preCache(header.getNumber());\n\n        // mixed mode payload\n        if (mode == mixed && !syncDone && rnd.nextInt(100) % MIX_DENOMINATOR > 0)\n            return powRule.validate(header);\n\n        try {\n            Pair<byte[], byte[]> res = ethashHelper.ethashWorkFor(header, header.getNonce(), true);\n            // no cache for the epoch? fallback into fake rule\n            if (res == null) {\n                return powRule.validate(header);\n            }\n\n            if (!FastByteComparisons.equal(res.getLeft(), header.getMixHash())) {\n                return fault(String.format(\"#%d: mixHash doesn't match\", header.getNumber()));\n            }\n\n            if (FastByteComparisons.compareTo(res.getRight(), 0, 32, header.getPowBoundary(), 0, 32) > 0) {\n                return fault(String.format(\"#%d: proofValue > header.getPowBoundary()\", header.getNumber()));\n            }\n\n            return Success;\n        } catch (Exception e) {\n            logger.error(\"Failed to verify ethash work for block {}\", header.getShortDescr(), e);\n            return fault(\"Failed to verify ethash work for block \" + header.getShortDescr());\n        }\n    }", "signature": "ValidationResult validate(BlockHeader header)", "full_signature": "@Override public ValidationResult validate(BlockHeader header)", "class_method_signature": "EthashRule.validate(BlockHeader header)", "testcase": false, "constructor": false, "invocations": ["isGenesis", "validate", "isSide", "preCache", "getNumber", "nextInt", "validate", "ethashWorkFor", "getNonce", "validate", "equal", "getLeft", "getMixHash", "fault", "format", "getNumber", "compareTo", "getRight", "getPowBoundary", "fault", "format", "getNumber", "error", "getShortDescr", "fault", "getShortDescr"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}