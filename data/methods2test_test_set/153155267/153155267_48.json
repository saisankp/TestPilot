{"test_class": {"identifier": "HttpMessageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(8089);", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(8089)", "var_name": "wireMockRule"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private HttpSink sink;", "modifier": "private", "type": "HttpSink", "declarator": "sink", "var_name": "sink"}], "file": "smallrye-reactive-messaging-http/src/test/java/io/smallrye/reactive/messaging/http/HttpMessageTest.java"}, "test_case": {"identifier": "testHeadersAndUrlAndQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHeadersAndUrlAndQuery() {\n        stubFor(post(urlEqualTo(\"/items\"))\n                .willReturn(aResponse()\n                        .withStatus(404)));\n\n        stubFor(post(urlPathMatching(\"/record?.*\"))\n                .willReturn(aResponse()\n                        .withStatus(204)));\n\n        String uuid = UUID.randomUUID().toString();\n        HttpMessage<String> message = HttpMessage.HttpMessageBuilder.<String> create()\n                .withHeader(\"X-foo\", \"value\")\n                .withUrl(\"http://localhost:8089/record\")\n                .withQueryParameter(\"name\", \"clement\")\n                .withPayload(uuid)\n                .build();\n\n        sink.send(message).subscribeAsCompletionStage();\n        awaitForRequest();\n\n        assertThat(bodies(\"/record?name=clement\")).hasSize(1);\n        LoggedRequest request = requests(\"/record?name=clement\").get(0);\n        assertThat(request.getBodyAsString()).isEqualTo(uuid);\n        assertThat(request.getHeader(\"X-foo\")).isEqualTo(\"value\");\n        assertThat(request.getMethod().getName()).isEqualToIgnoringCase(\"POST\");\n        QueryParameter name = request.getQueryParams().get(\"name\");\n        assertThat(name).isNotNull();\n        assertThat(name.isSingleValued()).isTrue();\n        assertThat(name.firstValue()).isEqualToIgnoringCase(\"clement\");\n    }", "signature": "void testHeadersAndUrlAndQuery()", "full_signature": "@Test public void testHeadersAndUrlAndQuery()", "class_method_signature": "HttpMessageTest.testHeadersAndUrlAndQuery()", "testcase": true, "constructor": false, "invocations": ["stubFor", "willReturn", "post", "urlEqualTo", "withStatus", "aResponse", "stubFor", "willReturn", "post", "urlPathMatching", "withStatus", "aResponse", "toString", "randomUUID", "build", "withPayload", "withQueryParameter", "withUrl", "withHeader", "create", "subscribeAsCompletionStage", "send", "awaitForRequest", "hasSize", "assertThat", "bodies", "get", "requests", "isEqualTo", "assertThat", "getBodyAsString", "isEqualTo", "assertThat", "getHeader", "isEqualToIgnoringCase", "assertThat", "getName", "getMethod", "get", "getQueryParams", "isNotNull", "assertThat", "isTrue", "assertThat", "isSingleValued", "isEqualToIgnoringCase", "assertThat", "firstValue"]}, "focal_class": {"identifier": "HttpMessage", "superclass": "", "interfaces": "implements Message<T>", "fields": [{"original_string": "private final T payload;", "modifier": "private final", "type": "T", "declarator": "payload", "var_name": "payload"}, {"original_string": "private final Supplier<CompletionStage<Void>> ack;", "modifier": "private final", "type": "Supplier<CompletionStage<Void>>", "declarator": "ack", "var_name": "ack"}, {"original_string": "private final Metadata metadata;", "modifier": "private final", "type": "Metadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private final HttpResponseMetadata outgoingHttpMetadata;", "modifier": "private final", "type": "HttpResponseMetadata", "declarator": "outgoingHttpMetadata", "var_name": "outgoingHttpMetadata"}, {"original_string": "private final HttpRequestMetadata incomingHttpMetadata;", "modifier": "private final", "type": "HttpRequestMetadata", "declarator": "incomingHttpMetadata", "var_name": "incomingHttpMetadata"}], "methods": [{"identifier": "HttpMessage", "parameters": "(HttpRequestMetadata metadata, T payload, Supplier<CompletionStage<Void>> ack)", "modifiers": "", "return": "", "signature": " HttpMessage(HttpRequestMetadata metadata, T payload, Supplier<CompletionStage<Void>> ack)", "full_signature": "  HttpMessage(HttpRequestMetadata metadata, T payload, Supplier<CompletionStage<Void>> ack)", "class_method_signature": "HttpMessage.HttpMessage(HttpRequestMetadata metadata, T payload, Supplier<CompletionStage<Void>> ack)", "testcase": false, "constructor": true}, {"identifier": "HttpMessage", "parameters": "(String method, String url, T payload, Map<String, List<String>> query,\n            Map<String, List<String>> headers, Supplier<CompletionStage<Void>> ack)", "modifiers": "", "return": "", "signature": " HttpMessage(String method, String url, T payload, Map<String, List<String>> query,\n            Map<String, List<String>> headers, Supplier<CompletionStage<Void>> ack)", "full_signature": "  HttpMessage(String method, String url, T payload, Map<String, List<String>> query,\n            Map<String, List<String>> headers, Supplier<CompletionStage<Void>> ack)", "class_method_signature": "HttpMessage.HttpMessage(String method, String url, T payload, Map<String, List<String>> query,\n            Map<String, List<String>> headers, Supplier<CompletionStage<Void>> ack)", "testcase": false, "constructor": true}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "HttpMessageBuilder<T>", "signature": "HttpMessageBuilder<T> builder()", "full_signature": "public static HttpMessageBuilder<T> builder()", "class_method_signature": "HttpMessage.builder()", "testcase": false, "constructor": false}, {"identifier": "getPayload", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T getPayload()", "full_signature": "@Override public T getPayload()", "class_method_signature": "HttpMessage.getPayload()", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMethod()", "full_signature": "public String getMethod()", "class_method_signature": "HttpMessage.getMethod()", "testcase": false, "constructor": false}, {"identifier": "ack", "parameters": "()", "modifiers": "@Override public", "return": "CompletionStage<Void>", "signature": "CompletionStage<Void> ack()", "full_signature": "@Override public CompletionStage<Void> ack()", "class_method_signature": "HttpMessage.ack()", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "()", "modifiers": "@Override public", "return": "Metadata", "signature": "Metadata getMetadata()", "full_signature": "@Override public Metadata getMetadata()", "class_method_signature": "HttpMessage.getMetadata()", "testcase": false, "constructor": false}, {"identifier": "getHeaders", "parameters": "()", "modifiers": "public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getHeaders()", "full_signature": "public Map<String, List<String>> getHeaders()", "class_method_signature": "HttpMessage.getHeaders()", "testcase": false, "constructor": false}, {"identifier": "getQuery", "parameters": "()", "modifiers": "public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getQuery()", "full_signature": "public Map<String, List<String>> getQuery()", "class_method_signature": "HttpMessage.getQuery()", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUrl()", "full_signature": "public String getUrl()", "class_method_signature": "HttpMessage.getUrl()", "testcase": false, "constructor": false}], "file": "smallrye-reactive-messaging-http/src/main/java/io/smallrye/reactive/messaging/http/HttpMessage.java"}, "focal_method": {"identifier": "getMethod", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getMethod() {\n        if (incomingHttpMetadata != null) {\n            return incomingHttpMetadata.getMethod();\n        }\n        return outgoingHttpMetadata.getMethod();\n    }", "signature": "String getMethod()", "full_signature": "public String getMethod()", "class_method_signature": "HttpMessage.getMethod()", "testcase": false, "constructor": false, "invocations": ["getMethod", "getMethod"]}, "repository": {"repo_id": 153155267, "url": "https://github.com/smallrye/smallrye-reactive-messaging", "stars": 45, "created": "10/15/2018 5:36:05 PM +00:00", "updates": "2020-01-26T16:55:44+00:00", "fork": "False", "license": "licensed"}}