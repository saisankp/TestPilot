{"test_class": {"identifier": "TimingBloomFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/membership/TimingBloomFilterTest.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testAdd() {\n        int capacity = 100000;\n        TimingBloomFilter filter = new TimingBloomFilter(capacity*2, 10);\n        filter.startDecay();\n        \n        System.out.println(\"Adding\");\n        for (int i=0; i<capacity; i++)\n            filter.add(\"idx_\" + i);\n        \n        System.out.println(\"MembershipTest(+)\");\n        for (int i=0; i<capacity; i++)\n            assertTrue(\"False negative\", filter.membershipTest(\"idx_\" + i));\n        \n        System.out.println(\"MembershipTest(-)\");\n        int c = 0;\n        for (int i=capacity; i<2*capacity; i++) {\n            c += (filter.membershipTest(\"idx_\" + i) == true) ? 1 : 0;\n        }\n        \n        double falsePos = ((double)c) / ((double)capacity);\n        System.out.println(\"C: \" + c);\n        System.out.println(\"False positives: \" + falsePos);\n        System.out.println(\"Error threshold: \" + filter.getError());\n        assertTrue(\"Too many false positives\", falsePos <= filter.getError());\n    }", "signature": "void testAdd()", "full_signature": "@Test @Ignore public void testAdd()", "class_method_signature": "TimingBloomFilterTest.testAdd()", "testcase": true, "constructor": false, "invocations": ["startDecay", "println", "add", "println", "assertTrue", "membershipTest", "println", "membershipTest", "println", "println", "println", "getError", "assertTrue", "getError"]}, "focal_class": {"identifier": "TimingBloomFilter", "superclass": "extends TimerTask", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TimingBloomFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TimingBloomFilter.class)", "var_name": "LOG"}, {"original_string": "private static final int ENTRIES_PER_8BYTE = 1;", "modifier": "private static final", "type": "int", "declarator": "ENTRIES_PER_8BYTE = 1", "var_name": "ENTRIES_PER_8BYTE"}, {"original_string": "private int capacity;", "modifier": "private", "type": "int", "declarator": "capacity", "var_name": "capacity"}, {"original_string": "private int numBytes;", "modifier": "private", "type": "int", "declarator": "numBytes", "var_name": "numBytes"}, {"original_string": "private int numHashes;", "modifier": "private", "type": "int", "declarator": "numHashes", "var_name": "numHashes"}, {"original_string": "private int decayTime;", "modifier": "private", "type": "int", "declarator": "decayTime", "var_name": "decayTime"}, {"original_string": "private int ringSize;", "modifier": "private", "type": "int", "declarator": "ringSize", "var_name": "ringSize"}, {"original_string": "private int dN;", "modifier": "private", "type": "int", "declarator": "dN", "var_name": "dN"}, {"original_string": "private int numNonZero;", "modifier": "private", "type": "int", "declarator": "numNonZero", "var_name": "numNonZero"}, {"original_string": "private int[] data;", "modifier": "private", "type": "int[]", "declarator": "data", "var_name": "data"}, {"original_string": "private double error;", "modifier": "private", "type": "double", "declarator": "error", "var_name": "error"}, {"original_string": "private double secondsPerTick;", "modifier": "private", "type": "double", "declarator": "secondsPerTick", "var_name": "secondsPerTick"}, {"original_string": "private Timer timer;", "modifier": "private", "type": "Timer", "declarator": "timer", "var_name": "timer"}, {"original_string": "private MurmurHash3 hash;", "modifier": "private", "type": "MurmurHash3", "declarator": "hash", "var_name": "hash"}, {"original_string": "private int seed;", "modifier": "private", "type": "int", "declarator": "seed", "var_name": "seed"}], "methods": [{"identifier": "TimingBloomFilter", "parameters": "(int capacity, int decayTime)", "modifiers": "public", "return": "", "signature": " TimingBloomFilter(int capacity, int decayTime)", "full_signature": "public  TimingBloomFilter(int capacity, int decayTime)", "class_method_signature": "TimingBloomFilter.TimingBloomFilter(int capacity, int decayTime)", "testcase": false, "constructor": true}, {"identifier": "TimingBloomFilter", "parameters": "(int capacity, int decayTime, double error)", "modifiers": "public", "return": "", "signature": " TimingBloomFilter(int capacity, int decayTime, double error)", "full_signature": "public  TimingBloomFilter(int capacity, int decayTime, double error)", "class_method_signature": "TimingBloomFilter.TimingBloomFilter(int capacity, int decayTime, double error)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initialize()", "full_signature": "private void initialize()", "class_method_signature": "TimingBloomFilter.initialize()", "testcase": false, "constructor": false}, {"identifier": "startDecay", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startDecay()", "full_signature": "public void startDecay()", "class_method_signature": "TimingBloomFilter.startDecay()", "testcase": false, "constructor": false}, {"identifier": "decay", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void decay()", "full_signature": "public void decay()", "class_method_signature": "TimingBloomFilter.decay()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "TimingBloomFilter.run()", "testcase": false, "constructor": false}, {"identifier": "indexes", "parameters": "(Object key)", "modifiers": "private", "return": "int[]", "signature": "int[] indexes(Object key)", "full_signature": "private int[] indexes(Object key)", "class_method_signature": "TimingBloomFilter.indexes(Object key)", "testcase": false, "constructor": false}, {"identifier": "tick", "parameters": "(long timestamp)", "modifiers": "private", "return": "int", "signature": "int tick(long timestamp)", "full_signature": "private int tick(long timestamp)", "class_method_signature": "TimingBloomFilter.tick(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "time", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long time()", "full_signature": "private long time()", "class_method_signature": "TimingBloomFilter.time()", "testcase": false, "constructor": false}, {"identifier": "tickRange", "parameters": "()", "modifiers": "private", "return": "int[]", "signature": "int[] tickRange()", "full_signature": "private int[] tickRange()", "class_method_signature": "TimingBloomFilter.tickRange()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Object key)", "modifiers": "public", "return": "void", "signature": "void add(Object key)", "full_signature": "public void add(Object key)", "class_method_signature": "TimingBloomFilter.add(Object key)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Object key, long timestamp)", "modifiers": "public", "return": "void", "signature": "void add(Object key, long timestamp)", "full_signature": "public void add(Object key, long timestamp)", "class_method_signature": "TimingBloomFilter.add(Object key, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "testInterval", "parameters": "(int[] ticks, int data)", "modifiers": "private", "return": "boolean", "signature": "boolean testInterval(int[] ticks, int data)", "full_signature": "private boolean testInterval(int[] ticks, int data)", "class_method_signature": "TimingBloomFilter.testInterval(int[] ticks, int data)", "testcase": false, "constructor": false}, {"identifier": "membershipTest", "parameters": "(Object key)", "modifiers": "public", "return": "boolean", "signature": "boolean membershipTest(Object key)", "full_signature": "public boolean membershipTest(Object key)", "class_method_signature": "TimingBloomFilter.membershipTest(Object key)", "testcase": false, "constructor": false}, {"identifier": "getError", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getError()", "full_signature": "public double getError()", "class_method_signature": "TimingBloomFilter.getError()", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/membership/TimingBloomFilter.java"}, "focal_method": {"identifier": "add", "parameters": "(Object key)", "modifiers": "public", "return": "void", "body": "public void add(Object key) {\n        add(key, time());\n    }", "signature": "void add(Object key)", "full_signature": "public void add(Object key)", "class_method_signature": "TimingBloomFilter.add(Object key)", "testcase": false, "constructor": false, "invocations": ["add", "time"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}