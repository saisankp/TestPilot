{"test_class": {"identifier": "ScreenRecorderActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final AndroidProjectRule myRule = AndroidProjectRule.inMemory();", "modifier": "@Rule\n  public final", "type": "AndroidProjectRule", "declarator": "myRule = AndroidProjectRule.inMemory()", "var_name": "myRule"}, {"original_string": "private DeviceContext myContext;", "modifier": "private", "type": "DeviceContext", "declarator": "myContext", "var_name": "myContext"}, {"original_string": "private Features myFeatures;", "modifier": "private", "type": "Features", "declarator": "myFeatures", "var_name": "myFeatures"}, {"original_string": "private Presentation myPresentation;", "modifier": "private", "type": "Presentation", "declarator": "myPresentation", "var_name": "myPresentation"}, {"original_string": "private AnActionEvent myEvent;", "modifier": "private", "type": "AnActionEvent", "declarator": "myEvent", "var_name": "myEvent"}], "file": "android/testSrc/com/android/tools/idea/ddms/actions/ScreenRecorderActionTest.java"}, "test_case": {"identifier": "updateDeviceHasScreenRecord", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void updateDeviceHasScreenRecord() {\n    IDevice device = Mockito.mock(IDevice.class);\n    Mockito.when(device.isOnline()).thenReturn(true);\n\n    Mockito.when(myContext.getSelectedDevice()).thenReturn(device);\n    Mockito.when(myFeatures.screenRecord(device)).thenReturn(true);\n\n    new ScreenRecorderAction(myRule.getProject(), myContext, myFeatures).update(myEvent);\n\n    assertTrue(myPresentation.isEnabled());\n    assertEquals(\"Screen Record\", myPresentation.getText());\n  }", "signature": "void updateDeviceHasScreenRecord()", "full_signature": "@Test public void updateDeviceHasScreenRecord()", "class_method_signature": "ScreenRecorderActionTest.updateDeviceHasScreenRecord()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "isOnline", "thenReturn", "when", "getSelectedDevice", "thenReturn", "when", "screenRecord", "update", "getProject", "assertTrue", "isEnabled", "assertEquals", "getText"]}, "focal_class": {"identifier": "ScreenRecorderAction", "superclass": "extends AbstractDeviceAction", "interfaces": "", "fields": [{"original_string": "static final String REMOTE_PATH = \"/sdcard/ddmsrec.mp4\";", "modifier": "static final", "type": "String", "declarator": "REMOTE_PATH = \"/sdcard/ddmsrec.mp4\"", "var_name": "REMOTE_PATH"}, {"original_string": "static final String TITLE = \"Screen Recorder\";", "modifier": "static final", "type": "String", "declarator": "TITLE = \"Screen Recorder\"", "var_name": "TITLE"}, {"original_string": "private static final String EMU_TMP_FILENAME = \"tmp.webm\";", "modifier": "private static final", "type": "String", "declarator": "EMU_TMP_FILENAME = \"tmp.webm\"", "var_name": "EMU_TMP_FILENAME"}, {"original_string": "private final Features myFeatures;", "modifier": "private final", "type": "Features", "declarator": "myFeatures", "var_name": "myFeatures"}, {"original_string": "private final Project myProject;", "modifier": "private final", "type": "Project", "declarator": "myProject", "var_name": "myProject"}], "methods": [{"identifier": "ScreenRecorderAction", "parameters": "(@NotNull Project project, @NotNull DeviceContext context)", "modifiers": "public", "return": "", "signature": " ScreenRecorderAction(@NotNull Project project, @NotNull DeviceContext context)", "full_signature": "public  ScreenRecorderAction(@NotNull Project project, @NotNull DeviceContext context)", "class_method_signature": "ScreenRecorderAction.ScreenRecorderAction(@NotNull Project project, @NotNull DeviceContext context)", "testcase": false, "constructor": true}, {"identifier": "ScreenRecorderAction", "parameters": "(@NotNull Project project, @NotNull DeviceContext context, @NotNull Features features)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ScreenRecorderAction(@NotNull Project project, @NotNull DeviceContext context, @NotNull Features features)", "full_signature": "@VisibleForTesting  ScreenRecorderAction(@NotNull Project project, @NotNull DeviceContext context, @NotNull Features features)", "class_method_signature": "ScreenRecorderAction.ScreenRecorderAction(@NotNull Project project, @NotNull DeviceContext context, @NotNull Features features)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(@NotNull AnActionEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void update(@NotNull AnActionEvent event)", "full_signature": "@Override public void update(@NotNull AnActionEvent event)", "class_method_signature": "ScreenRecorderAction.update(@NotNull AnActionEvent event)", "testcase": false, "constructor": false}, {"identifier": "performAction", "parameters": "(@NotNull IDevice device)", "modifiers": "@Override protected", "return": "void", "signature": "void performAction(@NotNull IDevice device)", "full_signature": "@Override protected void performAction(@NotNull IDevice device)", "class_method_signature": "ScreenRecorderAction.performAction(@NotNull IDevice device)", "testcase": false, "constructor": false}, {"identifier": "startRecordingAsync", "parameters": "(@NotNull ScreenRecorderOptionsDialog dialog, @NotNull IDevice device, boolean showTouchEnabled)", "modifiers": "private", "return": "void", "signature": "void startRecordingAsync(@NotNull ScreenRecorderOptionsDialog dialog, @NotNull IDevice device, boolean showTouchEnabled)", "full_signature": "private void startRecordingAsync(@NotNull ScreenRecorderOptionsDialog dialog, @NotNull IDevice device, boolean showTouchEnabled)", "class_method_signature": "ScreenRecorderAction.startRecordingAsync(@NotNull ScreenRecorderOptionsDialog dialog, @NotNull IDevice device, boolean showTouchEnabled)", "testcase": false, "constructor": false}, {"identifier": "getVirtualDeviceManager", "parameters": "()", "modifiers": "@Nullable private static", "return": "AvdManager", "signature": "AvdManager getVirtualDeviceManager()", "full_signature": "@Nullable private static AvdManager getVirtualDeviceManager()", "class_method_signature": "ScreenRecorderAction.getVirtualDeviceManager()", "testcase": false, "constructor": false}, {"identifier": "getTemporaryVideoPathForVirtualDevice", "parameters": "(@NotNull IDevice device, @NotNull AvdManager manager)", "modifiers": "@Nullable @VisibleForTesting", "return": "Path", "signature": "Path getTemporaryVideoPathForVirtualDevice(@NotNull IDevice device, @NotNull AvdManager manager)", "full_signature": "@Nullable @VisibleForTesting Path getTemporaryVideoPathForVirtualDevice(@NotNull IDevice device, @NotNull AvdManager manager)", "class_method_signature": "ScreenRecorderAction.getTemporaryVideoPathForVirtualDevice(@NotNull IDevice device, @NotNull AvdManager manager)", "testcase": false, "constructor": false}, {"identifier": "setShowTouch", "parameters": "(@NotNull IDevice device, boolean isEnabled)", "modifiers": "private static", "return": "void", "signature": "void setShowTouch(@NotNull IDevice device, boolean isEnabled)", "full_signature": "private static void setShowTouch(@NotNull IDevice device, boolean isEnabled)", "class_method_signature": "ScreenRecorderAction.setShowTouch(@NotNull IDevice device, boolean isEnabled)", "testcase": false, "constructor": false}, {"identifier": "isShowTouchEnabled", "parameters": "(@NotNull IDevice device)", "modifiers": "private static", "return": "boolean", "signature": "boolean isShowTouchEnabled(@NotNull IDevice device)", "full_signature": "private static boolean isShowTouchEnabled(@NotNull IDevice device)", "class_method_signature": "ScreenRecorderAction.isShowTouchEnabled(@NotNull IDevice device)", "testcase": false, "constructor": false}, {"identifier": "getEmulatorScreenRecorderOptions", "parameters": "(@NotNull Path filePath, @NotNull ScreenRecorderOptions options)", "modifiers": "@VisibleForTesting static", "return": "String", "signature": "String getEmulatorScreenRecorderOptions(@NotNull Path filePath, @NotNull ScreenRecorderOptions options)", "full_signature": "@VisibleForTesting static String getEmulatorScreenRecorderOptions(@NotNull Path filePath, @NotNull ScreenRecorderOptions options)", "class_method_signature": "ScreenRecorderAction.getEmulatorScreenRecorderOptions(@NotNull Path filePath, @NotNull ScreenRecorderOptions options)", "testcase": false, "constructor": false}, {"identifier": "showError", "parameters": "(@Nullable final Project project, @NotNull final String message, @Nullable final Throwable throwable)", "modifiers": "static", "return": "void", "signature": "void showError(@Nullable final Project project, @NotNull final String message, @Nullable final Throwable throwable)", "full_signature": "static void showError(@Nullable final Project project, @NotNull final String message, @Nullable final Throwable throwable)", "class_method_signature": "ScreenRecorderAction.showError(@Nullable final Project project, @NotNull final String message, @Nullable final Throwable throwable)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/ddms/actions/ScreenRecorderAction.java"}, "focal_method": {"identifier": "update", "parameters": "(@NotNull AnActionEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void update(@NotNull AnActionEvent event) {\n    Presentation presentation = event.getPresentation();\n\n    if (!isEnabled()) {\n      presentation.setEnabled(false);\n      presentation.setText(AndroidBundle.messagePointer(\"android.ddms.actions.screenrecord\"));\n\n      return;\n    }\n\n    IDevice device = myDeviceContext.getSelectedDevice();\n\n    if (myFeatures.watch(device)) {\n      presentation.setEnabled(false);\n      presentation.setText(\"Screen Record Is Unavailable for Wear OS\");\n\n      return;\n    }\n\n    presentation.setEnabled(myFeatures.screenRecord(device));\n    presentation.setText(AndroidBundle.messagePointer(\"android.ddms.actions.screenrecord\"));\n  }", "signature": "void update(@NotNull AnActionEvent event)", "full_signature": "@Override public void update(@NotNull AnActionEvent event)", "class_method_signature": "ScreenRecorderAction.update(@NotNull AnActionEvent event)", "testcase": false, "constructor": false, "invocations": ["getPresentation", "isEnabled", "setEnabled", "setText", "messagePointer", "getSelectedDevice", "watch", "setEnabled", "setText", "setEnabled", "screenRecord", "setText", "messagePointer"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}