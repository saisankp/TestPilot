{"test_class": {"identifier": "CompressionUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_FILE = \"CHANGELOG.md\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILE = \"CHANGELOG.md\"", "var_name": "TEST_FILE"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/CompressionUtilTest.java"}, "test_case": {"identifier": "compressNoOverwrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void compressNoOverwrite() throws Exception {\n        // test file to use for tests\n        File originalSourceFile = new File(TEST_FILE);\n\n        // copy original source to build directory -- becomes our actual source file\n        File sourceFile = new File(\"target\", originalSourceFile.getName());\n        FileUtil.copy(originalSourceFile, sourceFile, true);\n\n        // NOTE: just for junit, let's make sure the compressed file does not exist yet\n        // it may exist if \"ant clean\" not run between tests\n        Algorithm a = Algorithm.findByName(\"gzip\");\n        File expectedCompressedFile = new File(sourceFile.getParentFile(), sourceFile.getName() + \".\" + a.getFileExtension());\n        expectedCompressedFile.delete();\n\n        // compress the source file (original should have been deleted)\n        CompressionUtil.compress(sourceFile, a.getName(), false);\n\n        try {\n            CompressionUtil.compress(sourceFile, a.getName(), false);\n            Assert.fail(\"Should have failed\");\n        } catch (FileAlreadyExistsException e) {\n            // correct behavior\n        }\n    }", "signature": "void compressNoOverwrite()", "full_signature": "@Test public void compressNoOverwrite()", "class_method_signature": "CompressionUtilTest.compressNoOverwrite()", "testcase": true, "constructor": false, "invocations": ["getName", "copy", "findByName", "getParentFile", "getName", "getFileExtension", "delete", "compress", "getName", "compress", "getName", "fail"]}, "focal_class": {"identifier": "CompressionUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CompressionUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CompressionUtil.class)", "var_name": "logger"}], "methods": [{"identifier": "isAlgorithmSupported", "parameters": "(String algorithm)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAlgorithmSupported(String algorithm)", "full_signature": "public static boolean isAlgorithmSupported(String algorithm)", "class_method_signature": "CompressionUtil.isAlgorithmSupported(String algorithm)", "testcase": false, "constructor": false}, {"identifier": "isFileExtensionSupported", "parameters": "(String fileExt)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileExtensionSupported(String fileExt)", "full_signature": "public static boolean isFileExtensionSupported(String fileExt)", "class_method_signature": "CompressionUtil.isFileExtensionSupported(String fileExt)", "testcase": false, "constructor": false}, {"identifier": "compress", "parameters": "(File sourceFile, String algorithm, boolean deleteSourceFileAfterCompressed)", "modifiers": "public static", "return": "File", "signature": "File compress(File sourceFile, String algorithm, boolean deleteSourceFileAfterCompressed)", "full_signature": "public static File compress(File sourceFile, String algorithm, boolean deleteSourceFileAfterCompressed)", "class_method_signature": "CompressionUtil.compress(File sourceFile, String algorithm, boolean deleteSourceFileAfterCompressed)", "testcase": false, "constructor": false}, {"identifier": "compress", "parameters": "(File sourceFile, File targetDir, String algorithm, boolean deleteSourceFileAfterCompressed)", "modifiers": "public static", "return": "File", "signature": "File compress(File sourceFile, File targetDir, String algorithm, boolean deleteSourceFileAfterCompressed)", "full_signature": "public static File compress(File sourceFile, File targetDir, String algorithm, boolean deleteSourceFileAfterCompressed)", "class_method_signature": "CompressionUtil.compress(File sourceFile, File targetDir, String algorithm, boolean deleteSourceFileAfterCompressed)", "testcase": false, "constructor": false}, {"identifier": "uncompress", "parameters": "(File sourceFile, boolean deleteSourceFileAfterUncompressed)", "modifiers": "public static", "return": "File", "signature": "File uncompress(File sourceFile, boolean deleteSourceFileAfterUncompressed)", "full_signature": "public static File uncompress(File sourceFile, boolean deleteSourceFileAfterUncompressed)", "class_method_signature": "CompressionUtil.uncompress(File sourceFile, boolean deleteSourceFileAfterUncompressed)", "testcase": false, "constructor": false}, {"identifier": "uncompress", "parameters": "(File sourceFile, File targetDir, boolean deleteSourceFileAfterUncompressed)", "modifiers": "public static", "return": "File", "signature": "File uncompress(File sourceFile, File targetDir, boolean deleteSourceFileAfterUncompressed)", "full_signature": "public static File uncompress(File sourceFile, File targetDir, boolean deleteSourceFileAfterUncompressed)", "class_method_signature": "CompressionUtil.uncompress(File sourceFile, File targetDir, boolean deleteSourceFileAfterUncompressed)", "testcase": false, "constructor": false}, {"identifier": "compress", "parameters": "(Algorithm a, File sourceFile, File targetFile, boolean deleteSourceFileAfterCompressed)", "modifiers": "private static", "return": "void", "signature": "void compress(Algorithm a, File sourceFile, File targetFile, boolean deleteSourceFileAfterCompressed)", "full_signature": "private static void compress(Algorithm a, File sourceFile, File targetFile, boolean deleteSourceFileAfterCompressed)", "class_method_signature": "CompressionUtil.compress(Algorithm a, File sourceFile, File targetFile, boolean deleteSourceFileAfterCompressed)", "testcase": false, "constructor": false}, {"identifier": "uncompress", "parameters": "(Algorithm a, File sourceFile, File targetFile, boolean deleteSourceFileAfterUncompressed)", "modifiers": "private static", "return": "void", "signature": "void uncompress(Algorithm a, File sourceFile, File targetFile, boolean deleteSourceFileAfterUncompressed)", "full_signature": "private static void uncompress(Algorithm a, File sourceFile, File targetFile, boolean deleteSourceFileAfterUncompressed)", "class_method_signature": "CompressionUtil.uncompress(Algorithm a, File sourceFile, File targetFile, boolean deleteSourceFileAfterUncompressed)", "testcase": false, "constructor": false}, {"identifier": "uncompress", "parameters": "(Algorithm a, InputStream srcIn, OutputStream destOut)", "modifiers": "private static", "return": "void", "signature": "void uncompress(Algorithm a, InputStream srcIn, OutputStream destOut)", "full_signature": "private static void uncompress(Algorithm a, InputStream srcIn, OutputStream destOut)", "class_method_signature": "CompressionUtil.uncompress(Algorithm a, InputStream srcIn, OutputStream destOut)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/CompressionUtil.java"}, "focal_method": {"identifier": "compress", "parameters": "(File sourceFile, String algorithm, boolean deleteSourceFileAfterCompressed)", "modifiers": "public static", "return": "File", "body": "public static File compress(File sourceFile, String algorithm, boolean deleteSourceFileAfterCompressed) throws FileAlreadyExistsException, IOException {\n        return compress(sourceFile, sourceFile.getParentFile(), algorithm, deleteSourceFileAfterCompressed);\n    }", "signature": "File compress(File sourceFile, String algorithm, boolean deleteSourceFileAfterCompressed)", "full_signature": "public static File compress(File sourceFile, String algorithm, boolean deleteSourceFileAfterCompressed)", "class_method_signature": "CompressionUtil.compress(File sourceFile, String algorithm, boolean deleteSourceFileAfterCompressed)", "testcase": false, "constructor": false, "invocations": ["compress", "getParentFile"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}