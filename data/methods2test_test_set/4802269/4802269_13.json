{"test_class": {"identifier": "DXFileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private DXProject testProject;", "modifier": "private", "type": "DXProject", "declarator": "testProject", "var_name": "testProject"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "src/java/src/test/java/com/dnanexus/DXFileTest.java"}, "test_case": {"identifier": "testGetInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetInstance() {\n        DXFile file = DXFile.getInstance(\"file-000000000000000000000000\");\n        Assert.assertEquals(\"file-000000000000000000000000\", file.getId());\n        Assert.assertEquals(null, file.getProject());\n\n        DXFile file2 =\n                DXFile.getInstance(\"file-000000000000000000000001\",\n                        DXProject.getInstance(\"project-123412341234123412341234\"));\n        Assert.assertEquals(\"file-000000000000000000000001\", file2.getId());\n        Assert.assertEquals(\"project-123412341234123412341234\", file2.getProject().getId());\n\n        try {\n            DXFile.getInstance(null);\n            Assert.fail(\"Expected creation without setting ID to fail\");\n        } catch (NullPointerException e) {\n            // Expected\n        }\n        try {\n            DXFile.getInstance(\"file-123412341234123412341234\", (DXContainer) null);\n            Assert.fail(\"Expected creation without setting project to fail\");\n        } catch (NullPointerException e) {\n            // Expected\n        }\n        try {\n            DXFile.getInstance(null, DXProject.getInstance(\"project-123412341234123412341234\"));\n            Assert.fail(\"Expected creation without setting ID to fail\");\n        } catch (NullPointerException e) {\n            // Expected\n        }\n    }", "signature": "void testGetInstance()", "full_signature": "@Test public void testGetInstance()", "class_method_signature": "DXFileTest.testGetInstance()", "testcase": true, "constructor": false, "invocations": ["getInstance", "assertEquals", "getId", "assertEquals", "getProject", "getInstance", "getInstance", "assertEquals", "getId", "assertEquals", "getId", "getProject", "getInstance", "fail", "getInstance", "fail", "getInstance", "getInstance", "fail"]}, "focal_class": {"identifier": "DXFile", "superclass": "extends DXDataObject", "interfaces": "", "fields": [{"original_string": "private static final String USER_AGENT = DXUserAgent.getUserAgent();", "modifier": "private static final", "type": "String", "declarator": "USER_AGENT = DXUserAgent.getUserAgent()", "var_name": "USER_AGENT"}, {"original_string": "private final int maxDownloadChunkSize = 16 * 1024 * 1024;", "modifier": "private final", "type": "int", "declarator": "maxDownloadChunkSize = 16 * 1024 * 1024", "var_name": "maxDownloadChunkSize"}, {"original_string": "private final int minDownloadChunkSize = 64 * 1024;", "modifier": "private final", "type": "int", "declarator": "minDownloadChunkSize = 64 * 1024", "var_name": "minDownloadChunkSize"}, {"original_string": "private final int numRequestsBetweenRamp = 4;", "modifier": "private final", "type": "int", "declarator": "numRequestsBetweenRamp = 4", "var_name": "numRequestsBetweenRamp"}, {"original_string": "private final int ramp = 2;", "modifier": "private final", "type": "int", "declarator": "ramp = 2", "var_name": "ramp"}, {"original_string": "@VisibleForTesting\n    int uploadChunkSize = 16 * 1024 * 1024;", "modifier": "@VisibleForTesting", "type": "int", "declarator": "uploadChunkSize = 16 * 1024 * 1024", "var_name": "uploadChunkSize"}], "methods": [{"identifier": "create", "parameters": "(Map<String, Object> value)", "modifiers": "@JsonCreator private static", "return": "DXFile", "signature": "DXFile create(Map<String, Object> value)", "full_signature": "@JsonCreator private static DXFile create(Map<String, Object> value)", "class_method_signature": "DXFile.create(Map<String, Object> value)", "testcase": false, "constructor": false}, {"identifier": "executeRequestWithRetry", "parameters": "(HttpClient httpclient, HttpRequestBase request)", "modifiers": "private static", "return": "HttpResponse", "signature": "HttpResponse executeRequestWithRetry(HttpClient httpclient, HttpRequestBase request)", "full_signature": "private static HttpResponse executeRequestWithRetry(HttpClient httpclient, HttpRequestBase request)", "class_method_signature": "DXFile.executeRequestWithRetry(HttpClient httpclient, HttpRequestBase request)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(String fileId)", "modifiers": "public static", "return": "DXFile", "signature": "DXFile getInstance(String fileId)", "full_signature": "public static DXFile getInstance(String fileId)", "class_method_signature": "DXFile.getInstance(String fileId)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(String fileId, DXContainer project)", "modifiers": "public static", "return": "DXFile", "signature": "DXFile getInstance(String fileId, DXContainer project)", "full_signature": "public static DXFile getInstance(String fileId, DXContainer project)", "class_method_signature": "DXFile.getInstance(String fileId, DXContainer project)", "testcase": false, "constructor": false}, {"identifier": "getInstanceWithCachedDescribe", "parameters": "(String fileId, DXContainer project, DXEnvironment env,\n            JsonNode describe)", "modifiers": "static", "return": "DXFile", "signature": "DXFile getInstanceWithCachedDescribe(String fileId, DXContainer project, DXEnvironment env,\n            JsonNode describe)", "full_signature": "static DXFile getInstanceWithCachedDescribe(String fileId, DXContainer project, DXEnvironment env,\n            JsonNode describe)", "class_method_signature": "DXFile.getInstanceWithCachedDescribe(String fileId, DXContainer project, DXEnvironment env,\n            JsonNode describe)", "testcase": false, "constructor": false}, {"identifier": "getInstanceWithEnvironment", "parameters": "(String fileId, DXContainer project, DXEnvironment env)", "modifiers": "public static", "return": "DXFile", "signature": "DXFile getInstanceWithEnvironment(String fileId, DXContainer project, DXEnvironment env)", "full_signature": "public static DXFile getInstanceWithEnvironment(String fileId, DXContainer project, DXEnvironment env)", "class_method_signature": "DXFile.getInstanceWithEnvironment(String fileId, DXContainer project, DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "getInstanceWithEnvironment", "parameters": "(String fileId, DXEnvironment env)", "modifiers": "public static", "return": "DXFile", "signature": "DXFile getInstanceWithEnvironment(String fileId, DXEnvironment env)", "full_signature": "public static DXFile getInstanceWithEnvironment(String fileId, DXEnvironment env)", "class_method_signature": "DXFile.getInstanceWithEnvironment(String fileId, DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "newFile", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder newFile()", "full_signature": "public static Builder newFile()", "class_method_signature": "DXFile.newFile()", "testcase": false, "constructor": false}, {"identifier": "newFileWithEnvironment", "parameters": "(DXEnvironment env)", "modifiers": "public static", "return": "Builder", "signature": "Builder newFileWithEnvironment(DXEnvironment env)", "full_signature": "public static Builder newFileWithEnvironment(DXEnvironment env)", "class_method_signature": "DXFile.newFileWithEnvironment(DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "(int seconds)", "modifiers": "private static", "return": "void", "signature": "void sleep(int seconds)", "full_signature": "private static void sleep(int seconds)", "class_method_signature": "DXFile.sleep(int seconds)", "testcase": false, "constructor": false}, {"identifier": "DXFile", "parameters": "(String fileId, DXContainer project, DXEnvironment env, JsonNode describe)", "modifiers": "private", "return": "", "signature": " DXFile(String fileId, DXContainer project, DXEnvironment env, JsonNode describe)", "full_signature": "private  DXFile(String fileId, DXContainer project, DXEnvironment env, JsonNode describe)", "class_method_signature": "DXFile.DXFile(String fileId, DXContainer project, DXEnvironment env, JsonNode describe)", "testcase": false, "constructor": true}, {"identifier": "DXFile", "parameters": "(String fileId, DXEnvironment env)", "modifiers": "private", "return": "", "signature": " DXFile(String fileId, DXEnvironment env)", "full_signature": "private  DXFile(String fileId, DXEnvironment env)", "class_method_signature": "DXFile.DXFile(String fileId, DXEnvironment env)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "DXFile", "signature": "DXFile close()", "full_signature": "@Override public DXFile close()", "class_method_signature": "DXFile.close()", "testcase": false, "constructor": false}, {"identifier": "closeAndWait", "parameters": "()", "modifiers": "@Override public", "return": "DXFile", "signature": "DXFile closeAndWait()", "full_signature": "@Override public DXFile closeAndWait()", "class_method_signature": "DXFile.closeAndWait()", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "()", "modifiers": "@Override public", "return": "Describe", "signature": "Describe describe()", "full_signature": "@Override public Describe describe()", "class_method_signature": "DXFile.describe()", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "(DXDataObject.DescribeOptions options)", "modifiers": "@Override public", "return": "Describe", "signature": "Describe describe(DXDataObject.DescribeOptions options)", "full_signature": "@Override public Describe describe(DXDataObject.DescribeOptions options)", "class_method_signature": "DXFile.describe(DXDataObject.DescribeOptions options)", "testcase": false, "constructor": false}, {"identifier": "downloadBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] downloadBytes()", "full_signature": "public byte[] downloadBytes()", "class_method_signature": "DXFile.downloadBytes()", "testcase": false, "constructor": false}, {"identifier": "downloadBytes", "parameters": "(long start, long end)", "modifiers": "public", "return": "byte[]", "signature": "byte[] downloadBytes(long start, long end)", "full_signature": "public byte[] downloadBytes(long start, long end)", "class_method_signature": "DXFile.downloadBytes(long start, long end)", "testcase": false, "constructor": false}, {"identifier": "downloadToOutputStream", "parameters": "(OutputStream os)", "modifiers": "public", "return": "void", "signature": "void downloadToOutputStream(OutputStream os)", "full_signature": "public void downloadToOutputStream(OutputStream os)", "class_method_signature": "DXFile.downloadToOutputStream(OutputStream os)", "testcase": false, "constructor": false}, {"identifier": "downloadToOutputStream", "parameters": "(OutputStream os, long start, long end)", "modifiers": "public", "return": "void", "signature": "void downloadToOutputStream(OutputStream os, long start, long end)", "full_signature": "public void downloadToOutputStream(OutputStream os, long start, long end)", "class_method_signature": "DXFile.downloadToOutputStream(OutputStream os, long start, long end)", "testcase": false, "constructor": false}, {"identifier": "getCachedDescribe", "parameters": "()", "modifiers": "@Override public", "return": "Describe", "signature": "Describe getCachedDescribe()", "full_signature": "@Override public Describe getCachedDescribe()", "class_method_signature": "DXFile.getCachedDescribe()", "testcase": false, "constructor": false}, {"identifier": "getDownloadStream", "parameters": "()", "modifiers": "public", "return": "InputStream", "signature": "InputStream getDownloadStream()", "full_signature": "public InputStream getDownloadStream()", "class_method_signature": "DXFile.getDownloadStream()", "testcase": false, "constructor": false}, {"identifier": "getDownloadStream", "parameters": "(long start, long end)", "modifiers": "public", "return": "InputStream", "signature": "InputStream getDownloadStream(long start, long end)", "full_signature": "public InputStream getDownloadStream(long start, long end)", "class_method_signature": "DXFile.getDownloadStream(long start, long end)", "testcase": false, "constructor": false}, {"identifier": "getDownloadStream", "parameters": "(long start, long end, PartDownloader downloader)", "modifiers": "@VisibleForTesting", "return": "InputStream", "signature": "InputStream getDownloadStream(long start, long end, PartDownloader downloader)", "full_signature": "@VisibleForTesting InputStream getDownloadStream(long start, long end, PartDownloader downloader)", "class_method_signature": "DXFile.getDownloadStream(long start, long end, PartDownloader downloader)", "testcase": false, "constructor": false}, {"identifier": "getDownloadStream", "parameters": "(PartDownloader downloader)", "modifiers": "@VisibleForTesting", "return": "InputStream", "signature": "InputStream getDownloadStream(PartDownloader downloader)", "full_signature": "@VisibleForTesting InputStream getDownloadStream(PartDownloader downloader)", "class_method_signature": "DXFile.getDownloadStream(PartDownloader downloader)", "testcase": false, "constructor": false}, {"identifier": "getUploadStream", "parameters": "()", "modifiers": "public", "return": "OutputStream", "signature": "OutputStream getUploadStream()", "full_signature": "public OutputStream getUploadStream()", "class_method_signature": "DXFile.getUploadStream()", "testcase": false, "constructor": false}, {"identifier": "partUploadRequest", "parameters": "(byte[] dataChunk, int index)", "modifiers": "private", "return": "void", "signature": "void partUploadRequest(byte[] dataChunk, int index)", "full_signature": "private void partUploadRequest(byte[] dataChunk, int index)", "class_method_signature": "DXFile.partUploadRequest(byte[] dataChunk, int index)", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "(byte[] data)", "modifiers": "public", "return": "void", "signature": "void upload(byte[] data)", "full_signature": "public void upload(byte[] data)", "class_method_signature": "DXFile.upload(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "(InputStream data)", "modifiers": "public", "return": "void", "signature": "void upload(InputStream data)", "full_signature": "public void upload(InputStream data)", "class_method_signature": "DXFile.upload(InputStream data)", "testcase": false, "constructor": false}], "file": "src/java/src/main/java/com/dnanexus/DXFile.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(String fileId)", "modifiers": "public static", "return": "DXFile", "body": "public static DXFile getInstance(String fileId) {\n        return new DXFile(fileId, null);\n    }", "signature": "DXFile getInstance(String fileId)", "full_signature": "public static DXFile getInstance(String fileId)", "class_method_signature": "DXFile.getInstance(String fileId)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4802269, "url": "https://github.com/dnanexus/dx-toolkit", "stars": 59, "created": "6/27/2012 12:23:47 AM +00:00", "updates": "2020-01-21T16:35:18+00:00", "fork": "False", "license": "licensed"}}