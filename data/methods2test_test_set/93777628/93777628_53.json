{"test_class": {"identifier": "BitAddressTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "CoinType BTC = BitcoinMain.get();", "modifier": "", "type": "CoinType", "declarator": "BTC = BitcoinMain.get()", "var_name": "BTC"}, {"original_string": "CoinType LTC = LitecoinMain.get();", "modifier": "", "type": "CoinType", "declarator": "LTC = LitecoinMain.get()", "var_name": "LTC"}, {"original_string": "ECKey pubKey = ECKey.fromPublicOnly(Hex.decode(\"037a305e15ddef015bb64d147eb479d64c9f3c85d9bf6f3f8c39252e29e11c0db8\"));", "modifier": "", "type": "ECKey", "declarator": "pubKey = ECKey.fromPublicOnly(Hex.decode(\"037a305e15ddef015bb64d147eb479d64c9f3c85d9bf6f3f8c39252e29e11c0db8\"))", "var_name": "pubKey"}, {"original_string": "final static byte[] HASH160 = Hex.decode(\"9d00cbda32e56ef87058e8dacfd20f3e297fc84c\");", "modifier": "final static", "type": "byte[]", "declarator": "HASH160 = Hex.decode(\"9d00cbda32e56ef87058e8dacfd20f3e297fc84c\")", "var_name": "HASH160"}, {"original_string": "final static byte[] P2PKH_SCRIPT = Hex.decode(\"76a9149d00cbda32e56ef87058e8dacfd20f3e297fc84c88ac\");", "modifier": "final static", "type": "byte[]", "declarator": "P2PKH_SCRIPT = Hex.decode(\"76a9149d00cbda32e56ef87058e8dacfd20f3e297fc84c88ac\")", "var_name": "P2PKH_SCRIPT"}, {"original_string": "final static byte[] P2SH_SCRIPT = Hex.decode(\"a9149d00cbda32e56ef87058e8dacfd20f3e297fc84c87\");", "modifier": "final static", "type": "byte[]", "declarator": "P2SH_SCRIPT = Hex.decode(\"a9149d00cbda32e56ef87058e8dacfd20f3e297fc84c87\")", "var_name": "P2SH_SCRIPT"}, {"original_string": "final static String BTC_P2PKH_ADDR = \"1FKA3SpU5rkCJhza3d4mGjs7unVy3jgH9T\";", "modifier": "final static", "type": "String", "declarator": "BTC_P2PKH_ADDR = \"1FKA3SpU5rkCJhza3d4mGjs7unVy3jgH9T\"", "var_name": "BTC_P2PKH_ADDR"}, {"original_string": "final static String BTC_P2SH_ADDR = \"3G1AxzJudm4aPsh1AijMhNE44Jngf2oCSe\";", "modifier": "final static", "type": "String", "declarator": "BTC_P2SH_ADDR = \"3G1AxzJudm4aPsh1AijMhNE44Jngf2oCSe\"", "var_name": "BTC_P2SH_ADDR"}, {"original_string": "final static String LTC_P2PKH_ADDR = \"LZY7Jf8JAWzFZWgjDm44Ykvt7zsF9YHFyW\";", "modifier": "final static", "type": "String", "declarator": "LTC_P2PKH_ADDR = \"LZY7Jf8JAWzFZWgjDm44Ykvt7zsF9YHFyW\"", "var_name": "LTC_P2PKH_ADDR"}, {"original_string": "final static String LTC_P2SH_ADDR = \"3G1AxzJudm4aPsh1AijMhNE44Jngf2oCSe\";", "modifier": "final static", "type": "String", "declarator": "LTC_P2SH_ADDR = \"3G1AxzJudm4aPsh1AijMhNE44Jngf2oCSe\"", "var_name": "LTC_P2SH_ADDR"}], "file": "core/src/test/java/com/coinomi/core/wallet/families/bitcoin/BitAddressTest.java"}, "test_case": {"identifier": "testFromMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromMethods() throws AddressFormatException, AddressMalformedException {\n        // BTC\n        Address address = new Address(BTC, BTC_P2PKH_ADDR);\n        AbstractAddress abstractAddress = new AbstractAddress() {\n            @Override public CoinType getType() { return BTC; }\n            @Override public long getId() { return 0; }\n            @Override public String toString() { return BTC_P2PKH_ADDR; }\n        };\n\n        assertEquals(BTC_P2PKH_ADDR, BitAddress.from(BTC, BTC_P2PKH_ADDR).toString());\n        assertEquals(BTC_P2PKH_ADDR, BitAddress.from(BTC, BTC.getAddressHeader(), HASH160).toString());\n        assertEquals(BTC_P2PKH_ADDR, BitAddress.from(BTC, new Script(P2PKH_SCRIPT)).toString());\n        assertEquals(BTC_P2PKH_ADDR, BitAddress.from(BTC, pubKey).toString());\n        assertEquals(BTC_P2PKH_ADDR, BitAddress.from(abstractAddress).toString());\n        assertEquals(BTC_P2PKH_ADDR, BitAddress.from(address).toString());\n\n        address = new Address(BTC, BTC_P2SH_ADDR);\n        abstractAddress = new AbstractAddress() {\n            @Override public CoinType getType() { return BTC; }\n            @Override public long getId() { return 0; }\n            @Override public String toString() { return BTC_P2SH_ADDR; }\n        };\n\n        assertEquals(BTC_P2SH_ADDR, BitAddress.from(BTC, BTC_P2SH_ADDR).toString());\n        assertEquals(BTC_P2SH_ADDR, BitAddress.from(BTC, BTC.getP2SHHeader(), HASH160).toString());\n        assertEquals(BTC_P2SH_ADDR, BitAddress.from(BTC, new Script(P2SH_SCRIPT)).toString());\n        assertEquals(BTC_P2SH_ADDR, BitAddress.from(abstractAddress).toString());\n        assertEquals(BTC_P2SH_ADDR, BitAddress.from(address).toString());\n\n        // LTC\n        address = new Address(LTC, LTC_P2PKH_ADDR);\n        abstractAddress = new AbstractAddress() {\n            @Override public CoinType getType() { return LTC; }\n            @Override public long getId() { return 0; }\n            @Override public String toString() { return LTC_P2PKH_ADDR; }\n        };\n\n        assertEquals(LTC_P2PKH_ADDR, BitAddress.from(LTC, LTC_P2PKH_ADDR).toString());\n        assertEquals(LTC_P2PKH_ADDR, BitAddress.from(LTC, LTC.getAddressHeader(), HASH160).toString());\n        assertEquals(LTC_P2PKH_ADDR, BitAddress.from(LTC, new Script(P2PKH_SCRIPT)).toString());\n        assertEquals(LTC_P2PKH_ADDR, BitAddress.from(LTC, pubKey).toString());\n        assertEquals(LTC_P2PKH_ADDR, BitAddress.from(abstractAddress).toString());\n        assertEquals(LTC_P2PKH_ADDR, BitAddress.from(address).toString());\n\n        address = new Address(LTC, LTC_P2SH_ADDR);\n        abstractAddress = new AbstractAddress() {\n            @Override public CoinType getType() { return LTC; }\n            @Override public long getId() { return 0; }\n            @Override public String toString() { return LTC_P2SH_ADDR; }\n        };\n\n        assertEquals(LTC_P2SH_ADDR, BitAddress.from(LTC, LTC_P2SH_ADDR).toString());\n        assertEquals(LTC_P2SH_ADDR, BitAddress.from(LTC, LTC.getP2SHHeader(), HASH160).toString());\n        assertEquals(LTC_P2SH_ADDR, BitAddress.from(LTC, new Script(P2SH_SCRIPT)).toString());\n        assertEquals(LTC_P2SH_ADDR, BitAddress.from(abstractAddress).toString());\n        assertEquals(LTC_P2SH_ADDR, BitAddress.from(address).toString());\n    }", "signature": "void testFromMethods()", "full_signature": "@Test public void testFromMethods()", "class_method_signature": "BitAddressTest.testFromMethods()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "from", "assertEquals", "toString", "from", "getAddressHeader", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "getP2SHHeader", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "getAddressHeader", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "getP2SHHeader", "assertEquals", "toString", "from", "assertEquals", "toString", "from", "assertEquals", "toString", "from"]}, "focal_class": {"identifier": "BitAddress", "superclass": "extends Address", "interfaces": "implements AbstractAddress", "fields": [], "methods": [{"identifier": "BitAddress", "parameters": "(Address address)", "modifiers": "", "return": "", "signature": " BitAddress(Address address)", "full_signature": "  BitAddress(Address address)", "class_method_signature": "BitAddress.BitAddress(Address address)", "testcase": false, "constructor": true}, {"identifier": "BitAddress", "parameters": "(CoinType type, byte[] hash160)", "modifiers": "", "return": "", "signature": " BitAddress(CoinType type, byte[] hash160)", "full_signature": "  BitAddress(CoinType type, byte[] hash160)", "class_method_signature": "BitAddress.BitAddress(CoinType type, byte[] hash160)", "testcase": false, "constructor": true}, {"identifier": "BitAddress", "parameters": "(CoinType type, int version, byte[] hash160)", "modifiers": "", "return": "", "signature": " BitAddress(CoinType type, int version, byte[] hash160)", "full_signature": "  BitAddress(CoinType type, int version, byte[] hash160)", "class_method_signature": "BitAddress.BitAddress(CoinType type, int version, byte[] hash160)", "testcase": false, "constructor": true}, {"identifier": "BitAddress", "parameters": "(CoinType type, String address)", "modifiers": "", "return": "", "signature": " BitAddress(CoinType type, String address)", "full_signature": "  BitAddress(CoinType type, String address)", "class_method_signature": "BitAddress.BitAddress(CoinType type, String address)", "testcase": false, "constructor": true}, {"identifier": "from", "parameters": "(CoinType type, String address)", "modifiers": "public static", "return": "BitAddress", "signature": "BitAddress from(CoinType type, String address)", "full_signature": "public static BitAddress from(CoinType type, String address)", "class_method_signature": "BitAddress.from(CoinType type, String address)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(CoinType type, int version, byte[] hash160)", "modifiers": "public static", "return": "BitAddress", "signature": "BitAddress from(CoinType type, int version, byte[] hash160)", "full_signature": "public static BitAddress from(CoinType type, int version, byte[] hash160)", "class_method_signature": "BitAddress.from(CoinType type, int version, byte[] hash160)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(CoinType type, byte[] publicKeyHash160)", "modifiers": "public static", "return": "BitAddress", "signature": "BitAddress from(CoinType type, byte[] publicKeyHash160)", "full_signature": "public static BitAddress from(CoinType type, byte[] publicKeyHash160)", "class_method_signature": "BitAddress.from(CoinType type, byte[] publicKeyHash160)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(CoinType type, Script script)", "modifiers": "public static", "return": "BitAddress", "signature": "BitAddress from(CoinType type, Script script)", "full_signature": "public static BitAddress from(CoinType type, Script script)", "class_method_signature": "BitAddress.from(CoinType type, Script script)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(CoinType type, ECKey key)", "modifiers": "public static", "return": "BitAddress", "signature": "BitAddress from(CoinType type, ECKey key)", "full_signature": "public static BitAddress from(CoinType type, ECKey key)", "class_method_signature": "BitAddress.from(CoinType type, ECKey key)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(AbstractAddress address)", "modifiers": "public static", "return": "BitAddress", "signature": "BitAddress from(AbstractAddress address)", "full_signature": "public static BitAddress from(AbstractAddress address)", "class_method_signature": "BitAddress.from(AbstractAddress address)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(Address address)", "modifiers": "public static", "return": "BitAddress", "signature": "BitAddress from(Address address)", "full_signature": "public static BitAddress from(Address address)", "class_method_signature": "BitAddress.from(Address address)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "CoinType", "signature": "CoinType getType()", "full_signature": "@Override public CoinType getType()", "class_method_signature": "BitAddress.getType()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getId()", "full_signature": "@Override public long getId()", "class_method_signature": "BitAddress.getId()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/coinomi/core/wallet/families/bitcoin/BitAddress.java"}, "focal_method": {"identifier": "from", "parameters": "(CoinType type, String address)", "modifiers": "public static", "return": "BitAddress", "body": "public static BitAddress from(CoinType type, String address) throws AddressMalformedException {\n        try {\n            return new BitAddress(type, address);\n        } catch (AddressFormatException e) {\n            throw new AddressMalformedException(e);\n        }\n    }", "signature": "BitAddress from(CoinType type, String address)", "full_signature": "public static BitAddress from(CoinType type, String address)", "class_method_signature": "BitAddress.from(CoinType type, String address)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 93777628, "url": "https://github.com/cosmojg/open-coinomi-android", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 24, "size": 22591, "license": "licensed"}}