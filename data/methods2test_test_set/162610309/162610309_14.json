{"test_class": {"identifier": "ExpressionTest", "superclass": "extends BaseExpressionTest", "interfaces": "", "fields": [], "file": "worldedit-core/src/test/java/com/sk89q/worldedit/internal/expression/ExpressionTest.java"}, "test_case": {"identifier": "testEvaluate", "parameters": "()", "modifiers": "@TestFactory public", "return": "Stream<DynamicNode>", "body": "@TestFactory\n    public Stream<DynamicNode> testEvaluate() throws ExpressionException {\n        List<ExpressionTestCase> testCases = ImmutableList.of(\n            // basic arithmetic\n            testCase(\"1 - 2 + 3\", 2),\n            // unary ops\n            testCase(\"2 + +4\", 6),\n            testCase(\"2 - -4\", 6),\n            testCase(\"2 * -4\", -8),\n            // check functions\n            testCase(\"sin(5)\", sin(5)),\n            testCase(\"atan2(3, 4)\", atan2(3, 4)),\n            // check conditionals\n            testCase(\"0 || 5\", 5),\n            testCase(\"2 || 5\", 2),\n            testCase(\"2 && 5\", 5),\n            testCase(\"5 && 0\", 0),\n            // check ternaries\n            testCase(\"false ? 1 : 2\", 2),\n            testCase(\"true ? 1 : 2\", 1),\n            // - ternary binds inside\n            testCase(\"true ? true ? 1 : 2 : 3\", 1),\n            testCase(\"true ? false ? 1 : 2 : 3\", 2),\n            testCase(\"false ? true ? 1 : 2 : 3\", 3),\n            testCase(\"false ? false ? 1 : 2 : 3\", 3),\n            // check return\n            testCase(\"return 1; 0\", 1)\n        );\n        return testCases.stream()\n            .map(testCase -> dynamicTest(\n                testCase.getExpression(),\n                () -> checkTestCase(testCase)\n            ));\n    }", "signature": "Stream<DynamicNode> testEvaluate()", "full_signature": "@TestFactory public Stream<DynamicNode> testEvaluate()", "class_method_signature": "ExpressionTest.testEvaluate()", "testcase": true, "constructor": false, "invocations": ["of", "testCase", "testCase", "testCase", "testCase", "testCase", "sin", "testCase", "atan2", "testCase", "testCase", "testCase", "testCase", "testCase", "testCase", "testCase", "testCase", "testCase", "testCase", "testCase", "map", "stream", "dynamicTest", "getExpression", "checkTestCase"]}, "focal_class": {"identifier": "Expression", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "private final SlotTable slots = new SlotTable();", "modifier": "private final", "type": "SlotTable", "declarator": "slots = new SlotTable()", "var_name": "slots"}, {"original_string": "private final List<String> providedSlots;", "modifier": "private final", "type": "List<String>", "declarator": "providedSlots", "var_name": "providedSlots"}, {"original_string": "private final ExpressionParser.AllStatementsContext root;", "modifier": "private final", "type": "ExpressionParser.AllStatementsContext", "declarator": "root", "var_name": "root"}, {"original_string": "private final Functions functions = Functions.create();", "modifier": "private final", "type": "Functions", "declarator": "functions = Functions.create()", "var_name": "functions"}, {"original_string": "private final CompiledExpression compiledExpression;", "modifier": "private final", "type": "CompiledExpression", "declarator": "compiledExpression", "var_name": "compiledExpression"}, {"original_string": "private final String initialExpression;", "modifier": "private final", "type": "String", "declarator": "initialExpression", "var_name": "initialExpression"}], "methods": [{"identifier": "compile", "parameters": "(String expression, String... variableNames)", "modifiers": "public static", "return": "Expression", "signature": "Expression compile(String expression, String... variableNames)", "full_signature": "public static Expression compile(String expression, String... variableNames)", "class_method_signature": "Expression.compile(String expression, String... variableNames)", "testcase": false, "constructor": false}, {"identifier": "Expression", "parameters": "(String expression, String... variableNames)", "modifiers": "private", "return": "", "signature": " Expression(String expression, String... variableNames)", "full_signature": "private  Expression(String expression, String... variableNames)", "class_method_signature": "Expression.Expression(String expression, String... variableNames)", "testcase": false, "constructor": true}, {"identifier": "Expression", "parameters": "(String expression, Set<String> variableNames)", "modifiers": "private", "return": "", "signature": " Expression(String expression, Set<String> variableNames)", "full_signature": "private  Expression(String expression, Set<String> variableNames)", "class_method_signature": "Expression.Expression(String expression, Set<String> variableNames)", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(double... values)", "modifiers": "public", "return": "double", "signature": "double evaluate(double... values)", "full_signature": "public double evaluate(double... values)", "class_method_signature": "Expression.evaluate(double... values)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(double[] values, int timeout)", "modifiers": "public", "return": "double", "signature": "double evaluate(double[] values, int timeout)", "full_signature": "public double evaluate(double[] values, int timeout)", "class_method_signature": "Expression.evaluate(double[] values, int timeout)", "testcase": false, "constructor": false}, {"identifier": "optimize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void optimize()", "full_signature": "public void optimize()", "class_method_signature": "Expression.optimize()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Expression.toString()", "testcase": false, "constructor": false}, {"identifier": "getSlots", "parameters": "()", "modifiers": "public", "return": "SlotTable", "signature": "SlotTable getSlots()", "full_signature": "public SlotTable getSlots()", "class_method_signature": "Expression.getSlots()", "testcase": false, "constructor": false}, {"identifier": "getEnvironment", "parameters": "()", "modifiers": "public", "return": "ExpressionEnvironment", "signature": "ExpressionEnvironment getEnvironment()", "full_signature": "public ExpressionEnvironment getEnvironment()", "class_method_signature": "Expression.getEnvironment()", "testcase": false, "constructor": false}, {"identifier": "setEnvironment", "parameters": "(ExpressionEnvironment environment)", "modifiers": "public", "return": "void", "signature": "void setEnvironment(ExpressionEnvironment environment)", "full_signature": "public void setEnvironment(ExpressionEnvironment environment)", "class_method_signature": "Expression.setEnvironment(ExpressionEnvironment environment)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Expression", "signature": "Expression clone()", "full_signature": "public Expression clone()", "class_method_signature": "Expression.clone()", "testcase": false, "constructor": false}], "file": "worldedit-core/src/main/java/com/sk89q/worldedit/internal/expression/Expression.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(double... values)", "modifiers": "public", "return": "double", "body": "public double evaluate(double... values) throws EvaluationException {\n        return evaluate(values, WorldEdit.getInstance().getConfiguration().calculationTimeout);\n    }", "signature": "double evaluate(double... values)", "full_signature": "public double evaluate(double... values)", "class_method_signature": "Expression.evaluate(double... values)", "testcase": false, "constructor": false, "invocations": ["evaluate", "getConfiguration", "getInstance"]}, "repository": {"repo_id": 162610309, "url": "https://github.com/IntellectualSites/FastAsyncWorldEdit-1.13", "stars": 52, "created": "12/20/2018 5:22:31 PM +00:00", "updates": "2020-01-26T18:10:28+00:00", "fork": "False", "license": "licensed"}}