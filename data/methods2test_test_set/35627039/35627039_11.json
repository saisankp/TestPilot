{"test_class": {"identifier": "AmbariMetricsServiceWithStormQuerierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String TEST_COLLECTOR_API_PATH = \"/ws/v1/timeline/metrics\";", "modifier": "private final", "type": "String", "declarator": "TEST_COLLECTOR_API_PATH = \"/ws/v1/timeline/metrics\"", "var_name": "TEST_COLLECTOR_API_PATH"}, {"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(18089);", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(18089)", "var_name": "wireMockRule"}, {"original_string": "private AmbariMetricsServiceWithStormQuerier querier;", "modifier": "private", "type": "AmbariMetricsServiceWithStormQuerier", "declarator": "querier", "var_name": "querier"}], "file": "streams/runners/storm/metrics/src/test/java/com/hortonworks/streamline/streams/metrics/storm/ambari/AmbariMetricsServiceWithStormQuerierTest.java"}, "test_case": {"identifier": "testAggregateWithWeightedAverageLacksWeightInformation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAggregateWithWeightedAverageLacksWeightInformation() {\n        Map<Long, List<Pair<String, Double>>> keyMetric = new HashMap<>();\n\n        List<Pair<String, Double>> keyPoints1 = new ArrayList<>();\n        keyPoints1.add(Pair.of(\"stream1\", 10.0));\n        keyPoints1.add(Pair.of(\"stream2\", 20.0));\n        keyMetric.put(1L, keyPoints1);\n\n        List<Pair<String, Double>> keyPoints2 = new ArrayList<>();\n        keyPoints2.add(Pair.of(\"stream1\", 10.0));\n        keyPoints2.add(Pair.of(\"stream2\", 20.0));\n        keyMetric.put(2L, keyPoints2);\n\n        List<Pair<String, Double>> keyPoints3 = new ArrayList<>();\n        keyPoints3.add(Pair.of(\"stream1\", 10.0));\n        keyPoints3.add(Pair.of(\"stream2\", 20.0));\n        keyMetric.put(3L, keyPoints3);\n\n        Map<Long, List<Pair<String, Double>>> weightMetric = new HashMap<>();\n\n        // no weight for 1L\n\n        // total weight is zero for 2L\n        List<Pair<String, Double>> weightPoints2 = new ArrayList<>();\n        weightPoints2.add(Pair.of(\"stream1\", 0.0));\n        weightPoints2.add(Pair.of(\"stream2\", 0.0));\n        weightMetric.put(2L, weightPoints2);\n\n        // no weight for 3L - stream2\n        List<Pair<String, Double>> weightPoints3 = new ArrayList<>();\n        weightPoints3.add(Pair.of(\"stream1\", 10.0));\n        weightMetric.put(3L, weightPoints3);\n\n        Map<Long, Double> ret = querier.aggregateWithApplyingWeightedAverage(keyMetric, weightMetric);\n        Assert.assertEquals(3, ret.size());\n\n        Double aggregated = ret.get(1L);\n        Assert.assertNotNull(aggregated);\n        Assert.assertEquals(0.0d, aggregated, 0.00001d);\n\n        aggregated = ret.get(2L);\n        Assert.assertNotNull(aggregated);\n        Assert.assertEquals(0.0d, aggregated, 0.00001d);\n\n        aggregated = ret.get(3L);\n        Assert.assertNotNull(aggregated);\n        // only weight and value for stream1 is considered\n        Assert.assertEquals(10.0d, aggregated, 0.00001d);\n    }", "signature": "void testAggregateWithWeightedAverageLacksWeightInformation()", "full_signature": "@Test public void testAggregateWithWeightedAverageLacksWeightInformation()", "class_method_signature": "AmbariMetricsServiceWithStormQuerierTest.testAggregateWithWeightedAverageLacksWeightInformation()", "testcase": true, "constructor": false, "invocations": ["add", "of", "add", "of", "put", "add", "of", "add", "of", "put", "add", "of", "add", "of", "put", "add", "of", "add", "of", "put", "add", "of", "put", "aggregateWithApplyingWeightedAverage", "assertEquals", "size", "get", "assertNotNull", "assertEquals", "get", "assertNotNull", "assertEquals", "get", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "AmbariMetricsServiceWithStormQuerier", "superclass": "extends AbstractTimeSeriesQuerier", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AmbariMetricsServiceWithStormQuerier.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AmbariMetricsServiceWithStormQuerier.class)", "var_name": "log"}, {"original_string": "public static final String METRIC_NAME_PREFIX_KAFKA_OFFSET = \"kafkaOffset.\";", "modifier": "public static final", "type": "String", "declarator": "METRIC_NAME_PREFIX_KAFKA_OFFSET = \"kafkaOffset.\"", "var_name": "METRIC_NAME_PREFIX_KAFKA_OFFSET"}, {"original_string": "static final String COLLECTOR_API_URL = \"collectorApiUrl\";", "modifier": "static final", "type": "String", "declarator": "COLLECTOR_API_URL = \"collectorApiUrl\"", "var_name": "COLLECTOR_API_URL"}, {"original_string": "static final String APP_ID = \"appId\";", "modifier": "static final", "type": "String", "declarator": "APP_ID = \"appId\"", "var_name": "APP_ID"}, {"original_string": "private static final List<String> METRICS_NEED_AGGREGATION_ON_STREAMS = ImmutableList.<String>builder().add(\n            \"__complete-latency\", \"__emit-count\", \"__ack-count\", \"__fail-count\",\n            \"__process-latency\", \"__execute-count\", \"__execute-latency\"\n    ).build();", "modifier": "private static final", "type": "List<String>", "declarator": "METRICS_NEED_AGGREGATION_ON_STREAMS = ImmutableList.<String>builder().add(\n            \"__complete-latency\", \"__emit-count\", \"__ack-count\", \"__fail-count\",\n            \"__process-latency\", \"__execute-count\", \"__execute-latency\"\n    ).build()", "var_name": "METRICS_NEED_AGGREGATION_ON_STREAMS"}, {"original_string": "private static final Map<String, String> METRICS_APPLY_WEIGHTED_AVERAGE_PAIR =\n            ImmutableMap.<String, String>builder()\n                    .put(\"--complete-latency\", \"--ack-count\")\n                    .put(\"--process-latency\", \"--execute-count\")\n                    .put(\"--execute-latency\", \"--execute-count\")\n                    .build();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "METRICS_APPLY_WEIGHTED_AVERAGE_PAIR =\n            ImmutableMap.<String, String>builder()\n                    .put(\"--complete-latency\", \"--ack-count\")\n                    .put(\"--process-latency\", \"--execute-count\")\n                    .put(\"--execute-latency\", \"--execute-count\")\n                    .build()", "var_name": "METRICS_APPLY_WEIGHTED_AVERAGE_PAIR"}, {"original_string": "private static final List<String> SYSTEM_STREAM_PREFIX = ImmutableList.<String>builder()\n            .add(\"--metric\", \"--ack-init\", \"--ack-ack\", \"--ack-fail\", \"--ack-reset-timeout\", \"--system\").build();", "modifier": "private static final", "type": "List<String>", "declarator": "SYSTEM_STREAM_PREFIX = ImmutableList.<String>builder()\n            .add(\"--metric\", \"--ack-init\", \"--ack-ack\", \"--ack-fail\", \"--ack-reset-timeout\", \"--system\").build()", "var_name": "SYSTEM_STREAM_PREFIX"}, {"original_string": "static final String DEFAULT_APP_ID = \"nimbus\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_APP_ID = \"nimbus\"", "var_name": "DEFAULT_APP_ID"}, {"original_string": "private static final String WILDCARD_ALL_COMPONENTS = \"%\";", "modifier": "private static final", "type": "String", "declarator": "WILDCARD_ALL_COMPONENTS = \"%\"", "var_name": "WILDCARD_ALL_COMPONENTS"}, {"original_string": "private Client client;", "modifier": "private", "type": "Client", "declarator": "client", "var_name": "client"}, {"original_string": "private URI collectorApiUri;", "modifier": "private", "type": "URI", "declarator": "collectorApiUri", "var_name": "collectorApiUri"}, {"original_string": "private String appId;", "modifier": "private", "type": "String", "declarator": "appId", "var_name": "appId"}], "methods": [{"identifier": "AmbariMetricsServiceWithStormQuerier", "parameters": "()", "modifiers": "public", "return": "", "signature": " AmbariMetricsServiceWithStormQuerier()", "full_signature": "public  AmbariMetricsServiceWithStormQuerier()", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.AmbariMetricsServiceWithStormQuerier()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Map<String, String> conf)", "modifiers": "@Override public", "return": "void", "signature": "void init(Map<String, String> conf)", "full_signature": "@Override public void init(Map<String, String> conf)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.init(Map<String, String> conf)", "testcase": false, "constructor": false}, {"identifier": "getTopologyLevelMetrics", "parameters": "(String topologyName, String metricName,\n                                                     AggregateFunction aggrFunction, long from, long to)", "modifiers": "@Override public", "return": "Map<Long, Double>", "signature": "Map<Long, Double> getTopologyLevelMetrics(String topologyName, String metricName,\n                                                     AggregateFunction aggrFunction, long from, long to)", "full_signature": "@Override public Map<Long, Double> getTopologyLevelMetrics(String topologyName, String metricName,\n                                                     AggregateFunction aggrFunction, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.getTopologyLevelMetrics(String topologyName, String metricName,\n                                                     AggregateFunction aggrFunction, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to)", "modifiers": "@Override public", "return": "Map<Long, Double>", "signature": "Map<Long, Double> getMetrics(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to)", "full_signature": "@Override public Map<Long, Double> getMetrics(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.getMetrics(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "getRawMetrics", "parameters": "(String metricName, String parameters, long from, long to)", "modifiers": "@Override public", "return": "Map<String, Map<Long, Double>>", "signature": "Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to)", "full_signature": "@Override public Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.getRawMetrics(String metricName, String parameters, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "composeRawQueryParameters", "parameters": "(String metricName, Map<String, String> queryParams, long from, long to)", "modifiers": "private", "return": "URI", "signature": "URI composeRawQueryParameters(String metricName, Map<String, String> queryParams, long from, long to)", "full_signature": "private URI composeRawQueryParameters(String metricName, Map<String, String> queryParams, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.composeRawQueryParameters(String metricName, Map<String, String> queryParams, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "composeQueryParameters", "parameters": "(String topologyName, String componentId, String metricName,\n                                       long from, long to)", "modifiers": "private", "return": "URI", "signature": "URI composeQueryParameters(String topologyName, String componentId, String metricName,\n                                       long from, long to)", "full_signature": "private URI composeQueryParameters(String topologyName, String componentId, String metricName,\n                                       long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.composeQueryParameters(String topologyName, String componentId, String metricName,\n                                       long from, long to)", "testcase": false, "constructor": false}, {"identifier": "buildMetricName", "parameters": "(String topologyName, String componentId, String metricName)", "modifiers": "private", "return": "String", "signature": "String buildMetricName(String topologyName, String componentId, String metricName)", "full_signature": "private String buildMetricName(String topologyName, String componentId, String metricName)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.buildMetricName(String topologyName, String componentId, String metricName)", "testcase": false, "constructor": false}, {"identifier": "createKafkaOffsetMetricName", "parameters": "(String topologyName, String kafkaOffsetMetricName)", "modifiers": "private", "return": "String", "signature": "String createKafkaOffsetMetricName(String topologyName, String kafkaOffsetMetricName)", "full_signature": "private String createKafkaOffsetMetricName(String topologyName, String kafkaOffsetMetricName)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.createKafkaOffsetMetricName(String topologyName, String kafkaOffsetMetricName)", "testcase": false, "constructor": false}, {"identifier": "aggregateWithApplyingWeightedAverage", "parameters": "(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric)", "modifiers": "@VisibleForTesting", "return": "Map<Long, Double>", "signature": "Map<Long, Double> aggregateWithApplyingWeightedAverage(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric)", "full_signature": "@VisibleForTesting Map<Long, Double> aggregateWithApplyingWeightedAverage(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.aggregateWithApplyingWeightedAverage(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric)", "testcase": false, "constructor": false}, {"identifier": "findWeightMetric", "parameters": "(String metricName)", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> findWeightMetric(String metricName)", "full_signature": "private Optional<String> findWeightMetric(String metricName)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.findWeightMetric(String metricName)", "testcase": false, "constructor": false}, {"identifier": "aggregateStreamsForMetricsValues", "parameters": "(Map<Long, List<Pair<String, Double>>> ret, AggregateFunction aggrFunction)", "modifiers": "private", "return": "Map<Long, Double>", "signature": "Map<Long, Double> aggregateStreamsForMetricsValues(Map<Long, List<Pair<String, Double>>> ret, AggregateFunction aggrFunction)", "full_signature": "private Map<Long, Double> aggregateStreamsForMetricsValues(Map<Long, List<Pair<String, Double>>> ret, AggregateFunction aggrFunction)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.aggregateStreamsForMetricsValues(Map<Long, List<Pair<String, Double>>> ret, AggregateFunction aggrFunction)", "testcase": false, "constructor": false}, {"identifier": "getMetricsStreamToValueMap", "parameters": "(String topologyName, String componentId,\n                                                                             String metricName, long from, long to)", "modifiers": "private", "return": "Map<Long, List<Pair<String, Double>>>", "signature": "Map<Long, List<Pair<String, Double>>> getMetricsStreamToValueMap(String topologyName, String componentId,\n                                                                             String metricName, long from, long to)", "full_signature": "private Map<Long, List<Pair<String, Double>>> getMetricsStreamToValueMap(String topologyName, String componentId,\n                                                                             String metricName, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.getMetricsStreamToValueMap(String topologyName, String componentId,\n                                                                             String metricName, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "getMetricsMap", "parameters": "(String topologyName, String componentId, String metricName, long from, long to)", "modifiers": "private", "return": "List<Map<String, ?>>", "signature": "List<Map<String, ?>> getMetricsMap(String topologyName, String componentId, String metricName, long from, long to)", "full_signature": "private List<Map<String, ?>> getMetricsMap(String topologyName, String componentId, String metricName, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.getMetricsMap(String topologyName, String componentId, String metricName, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "isMetricFromSystemStream", "parameters": "(String metricName)", "modifiers": "private", "return": "boolean", "signature": "boolean isMetricFromSystemStream(String metricName)", "full_signature": "private boolean isMetricFromSystemStream(String metricName)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.isMetricFromSystemStream(String metricName)", "testcase": false, "constructor": false}], "file": "streams/runners/storm/metrics/src/main/java/com/hortonworks/streamline/streams/metrics/storm/ambari/AmbariMetricsServiceWithStormQuerier.java"}, "focal_method": {"identifier": "aggregateWithApplyingWeightedAverage", "parameters": "(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric)", "modifiers": "@VisibleForTesting", "return": "Map<Long, Double>", "body": "@VisibleForTesting\n    Map<Long, Double> aggregateWithApplyingWeightedAverage(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric) {\n        Map<Long, Double> ret = new HashMap<>();\n        for (Map.Entry<Long, List<Pair<String, Double>>> keyMetricEntry : keyMetric.entrySet()) {\n            long timestamp = keyMetricEntry.getKey();\n            List<Pair<String, Double>> keyStreamToValueList = keyMetricEntry.getValue();\n            List<Pair<String, Double>> weightStreamToValueList = weightMetric.get(timestamp);\n\n            if (weightStreamToValueList == null || weightStreamToValueList.isEmpty()) {\n                // weight information not found\n                ret.put(timestamp, 0.0d);\n                continue;\n            }\n\n            Double totalWeight = weightStreamToValueList.stream().mapToDouble(p -> p.getRight()).sum();\n            if (DoubleUtils.equalsToZero(totalWeight)) {\n                // total weight is zero\n                ret.put(timestamp, 0.0d);\n                continue;\n            }\n\n            double weightedSum = keyStreamToValueList.stream().map(pair -> {\n                String stream = pair.getLeft();\n                Double value = pair.getRight();\n                Double weightForStream = weightStreamToValueList.stream()\n                        .filter(p -> p.getLeft().equals(stream)).findAny().map(op -> op.getRight()).orElse(0.0);\n                Double weight = weightForStream / totalWeight;\n                return value * weight;\n            }).mapToDouble(d -> d).sum();\n\n            ret.put(timestamp, weightedSum);\n        }\n\n        return ret;\n    }", "signature": "Map<Long, Double> aggregateWithApplyingWeightedAverage(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric)", "full_signature": "@VisibleForTesting Map<Long, Double> aggregateWithApplyingWeightedAverage(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.aggregateWithApplyingWeightedAverage(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getValue", "get", "isEmpty", "put", "sum", "mapToDouble", "stream", "getRight", "equalsToZero", "put", "sum", "mapToDouble", "map", "stream", "getLeft", "getRight", "orElse", "map", "findAny", "filter", "stream", "equals", "getLeft", "getRight", "put"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}