{"test_class": {"identifier": "DoubleColumnTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/tech/tablesaw/api/DoubleColumnTest.java"}, "test_case": {"identifier": "unique", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void unique() {\n    DoubleColumn uniq = DoubleColumn.create(\"test\", 5, 4, 3, 2, 1, 5, 4, 3, 2, 1).unique();\n    double[] arr = uniq.asDoubleArray();\n    Arrays.sort(arr);\n    assertArrayEquals(new double[] {1.0, 2.0, 3.0, 4.0, 5.0}, arr);\n  }", "signature": "void unique()", "full_signature": "@Test public void unique()", "class_method_signature": "DoubleColumnTest.unique()", "testcase": true, "constructor": false, "invocations": ["unique", "create", "asDoubleArray", "sort", "assertArrayEquals"]}, "focal_class": {"identifier": "DoubleColumn", "superclass": "extends NumberColumn<DoubleColumn, Double>", "interfaces": "implements NumberFillers<DoubleColumn>", "fields": [{"original_string": "private final DoubleArrayList data;", "modifier": "private final", "type": "DoubleArrayList", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "DoubleColumn", "parameters": "(String name, DoubleArrayList data)", "modifiers": "protected", "return": "", "signature": " DoubleColumn(String name, DoubleArrayList data)", "full_signature": "protected  DoubleColumn(String name, DoubleArrayList data)", "class_method_signature": "DoubleColumn.DoubleColumn(String name, DoubleArrayList data)", "testcase": false, "constructor": true}, {"identifier": "valueIsMissing", "parameters": "(double value)", "modifiers": "public static", "return": "boolean", "signature": "boolean valueIsMissing(double value)", "full_signature": "public static boolean valueIsMissing(double value)", "class_method_signature": "DoubleColumn.valueIsMissing(double value)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(int row)", "modifiers": "@Override public", "return": "String", "signature": "String getString(int row)", "full_signature": "@Override public String getString(int row)", "class_method_signature": "DoubleColumn.getString(int row)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "DoubleColumn.size()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "DoubleColumn.clear()", "testcase": false, "constructor": false}, {"identifier": "setMissing", "parameters": "(int index)", "modifiers": "public", "return": "DoubleColumn", "signature": "DoubleColumn setMissing(int index)", "full_signature": "public DoubleColumn setMissing(int index)", "class_method_signature": "DoubleColumn.setMissing(int index)", "testcase": false, "constructor": false}, {"identifier": "DoubleColumn", "parameters": "(String name)", "modifiers": "protected", "return": "", "signature": " DoubleColumn(String name)", "full_signature": "protected  DoubleColumn(String name)", "class_method_signature": "DoubleColumn.DoubleColumn(String name)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(String name, double... arr)", "modifiers": "public static", "return": "DoubleColumn", "signature": "DoubleColumn create(String name, double... arr)", "full_signature": "public static DoubleColumn create(String name, double... arr)", "class_method_signature": "DoubleColumn.create(String name, double... arr)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name)", "modifiers": "public static", "return": "DoubleColumn", "signature": "DoubleColumn create(String name)", "full_signature": "public static DoubleColumn create(String name)", "class_method_signature": "DoubleColumn.create(String name)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, float... arr)", "modifiers": "public static", "return": "DoubleColumn", "signature": "DoubleColumn create(String name, float... arr)", "full_signature": "public static DoubleColumn create(String name, float... arr)", "class_method_signature": "DoubleColumn.create(String name, float... arr)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, int... arr)", "modifiers": "public static", "return": "DoubleColumn", "signature": "DoubleColumn create(String name, int... arr)", "full_signature": "public static DoubleColumn create(String name, int... arr)", "class_method_signature": "DoubleColumn.create(String name, int... arr)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, long... arr)", "modifiers": "public static", "return": "DoubleColumn", "signature": "DoubleColumn create(String name, long... arr)", "full_signature": "public static DoubleColumn create(String name, long... arr)", "class_method_signature": "DoubleColumn.create(String name, long... arr)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Collection<? extends Number> numberList)", "modifiers": "public static", "return": "DoubleColumn", "signature": "DoubleColumn create(String name, Collection<? extends Number> numberList)", "full_signature": "public static DoubleColumn create(String name, Collection<? extends Number> numberList)", "class_method_signature": "DoubleColumn.create(String name, Collection<? extends Number> numberList)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Number[] numbers)", "modifiers": "public static", "return": "DoubleColumn", "signature": "DoubleColumn create(String name, Number[] numbers)", "full_signature": "public static DoubleColumn create(String name, Number[] numbers)", "class_method_signature": "DoubleColumn.create(String name, Number[] numbers)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, int initialSize)", "modifiers": "public static", "return": "DoubleColumn", "signature": "DoubleColumn create(String name, int initialSize)", "full_signature": "public static DoubleColumn create(String name, int initialSize)", "class_method_signature": "DoubleColumn.create(String name, int initialSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, DoubleStream stream)", "modifiers": "public static", "return": "DoubleColumn", "signature": "DoubleColumn create(String name, DoubleStream stream)", "full_signature": "public static DoubleColumn create(String name, DoubleStream stream)", "class_method_signature": "DoubleColumn.create(String name, DoubleStream stream)", "testcase": false, "constructor": false}, {"identifier": "createCol", "parameters": "(String name, int initialSize)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn createCol(String name, int initialSize)", "full_signature": "@Override public DoubleColumn createCol(String name, int initialSize)", "class_method_signature": "DoubleColumn.createCol(String name, int initialSize)", "testcase": false, "constructor": false}, {"identifier": "createCol", "parameters": "(String name)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn createCol(String name)", "full_signature": "@Override public DoubleColumn createCol(String name)", "class_method_signature": "DoubleColumn.createCol(String name)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "Double", "signature": "Double get(int index)", "full_signature": "@Override public Double get(int index)", "class_method_signature": "DoubleColumn.get(int index)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(Selection selection)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn where(Selection selection)", "full_signature": "@Override public DoubleColumn where(Selection selection)", "class_method_signature": "DoubleColumn.where(Selection selection)", "testcase": false, "constructor": false}, {"identifier": "subset", "parameters": "(int[] rows)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn subset(int[] rows)", "full_signature": "@Override public DoubleColumn subset(int[] rows)", "class_method_signature": "DoubleColumn.subset(int[] rows)", "testcase": false, "constructor": false}, {"identifier": "unique", "parameters": "()", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn unique()", "full_signature": "@Override public DoubleColumn unique()", "class_method_signature": "DoubleColumn.unique()", "testcase": false, "constructor": false}, {"identifier": "top", "parameters": "(int n)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn top(int n)", "full_signature": "@Override public DoubleColumn top(int n)", "class_method_signature": "DoubleColumn.top(int n)", "testcase": false, "constructor": false}, {"identifier": "bottom", "parameters": "(final int n)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn bottom(final int n)", "full_signature": "@Override public DoubleColumn bottom(final int n)", "class_method_signature": "DoubleColumn.bottom(final int n)", "testcase": false, "constructor": false}, {"identifier": "lag", "parameters": "(int n)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn lag(int n)", "full_signature": "@Override public DoubleColumn lag(int n)", "class_method_signature": "DoubleColumn.lag(int n)", "testcase": false, "constructor": false}, {"identifier": "removeMissing", "parameters": "()", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn removeMissing()", "full_signature": "@Override public DoubleColumn removeMissing()", "class_method_signature": "DoubleColumn.removeMissing()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(final float f)", "modifiers": "public", "return": "DoubleColumn", "signature": "DoubleColumn append(final float f)", "full_signature": "public DoubleColumn append(final float f)", "class_method_signature": "DoubleColumn.append(final float f)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(double d)", "modifiers": "public", "return": "DoubleColumn", "signature": "DoubleColumn append(double d)", "full_signature": "public DoubleColumn append(double d)", "class_method_signature": "DoubleColumn.append(double d)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(int i)", "modifiers": "public", "return": "DoubleColumn", "signature": "DoubleColumn append(int i)", "full_signature": "public DoubleColumn append(int i)", "class_method_signature": "DoubleColumn.append(int i)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Double val)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn append(Double val)", "full_signature": "@Override public DoubleColumn append(Double val)", "class_method_signature": "DoubleColumn.append(Double val)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Number val)", "modifiers": "public", "return": "DoubleColumn", "signature": "DoubleColumn append(Number val)", "full_signature": "public DoubleColumn append(Number val)", "class_method_signature": "DoubleColumn.append(Number val)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn copy()", "full_signature": "@Override public DoubleColumn copy()", "class_method_signature": "DoubleColumn.copy()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Double>", "signature": "Iterator<Double> iterator()", "full_signature": "@Override public Iterator<Double> iterator()", "class_method_signature": "DoubleColumn.iterator()", "testcase": false, "constructor": false}, {"identifier": "asObjectArray", "parameters": "()", "modifiers": "@Override public", "return": "Double[]", "signature": "Double[] asObjectArray()", "full_signature": "@Override public Double[] asObjectArray()", "class_method_signature": "DoubleColumn.asObjectArray()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Double o1, Double o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(Double o1, Double o2)", "full_signature": "@Override public int compare(Double o1, Double o2)", "class_method_signature": "DoubleColumn.compare(Double o1, Double o2)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int i, Double val)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn set(int i, Double val)", "full_signature": "@Override public DoubleColumn set(int i, Double val)", "class_method_signature": "DoubleColumn.set(int i, Double val)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int i, double val)", "modifiers": "public", "return": "DoubleColumn", "signature": "DoubleColumn set(int i, double val)", "full_signature": "public DoubleColumn set(int i, double val)", "class_method_signature": "DoubleColumn.set(int i, double val)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(DoublePredicate condition, NumericColumn<?> other)", "modifiers": "public", "return": "DoubleColumn", "signature": "DoubleColumn set(DoublePredicate condition, NumericColumn<?> other)", "full_signature": "public DoubleColumn set(DoublePredicate condition, NumericColumn<?> other)", "class_method_signature": "DoubleColumn.set(DoublePredicate condition, NumericColumn<?> other)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int row, String stringValue, AbstractColumnParser<?> parser)", "modifiers": "@Override public", "return": "Column<Double>", "signature": "Column<Double> set(int row, String stringValue, AbstractColumnParser<?> parser)", "full_signature": "@Override public Column<Double> set(int row, String stringValue, AbstractColumnParser<?> parser)", "class_method_signature": "DoubleColumn.set(int row, String stringValue, AbstractColumnParser<?> parser)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(final Column<Double> column)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn append(final Column<Double> column)", "full_signature": "@Override public DoubleColumn append(final Column<Double> column)", "class_method_signature": "DoubleColumn.append(final Column<Double> column)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Column<Double> column, int row)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn append(Column<Double> column, int row)", "full_signature": "@Override public DoubleColumn append(Column<Double> column, int row)", "class_method_signature": "DoubleColumn.append(Column<Double> column, int row)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int row, Column<Double> column, int sourceRow)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn set(int row, Column<Double> column, int sourceRow)", "full_signature": "@Override public DoubleColumn set(int row, Column<Double> column, int sourceRow)", "class_method_signature": "DoubleColumn.set(int row, Column<Double> column, int sourceRow)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(DoublePredicate test)", "modifiers": "public", "return": "DoubleColumn", "signature": "DoubleColumn filter(DoublePredicate test)", "full_signature": "public DoubleColumn filter(DoublePredicate test)", "class_method_signature": "DoubleColumn.filter(DoublePredicate test)", "testcase": false, "constructor": false}, {"identifier": "asBytes", "parameters": "(int rowNumber)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] asBytes(int rowNumber)", "full_signature": "@Override public byte[] asBytes(int rowNumber)", "class_method_signature": "DoubleColumn.asBytes(int rowNumber)", "testcase": false, "constructor": false}, {"identifier": "countUnique", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int countUnique()", "full_signature": "@Override public int countUnique()", "class_method_signature": "DoubleColumn.countUnique()", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "(int row)", "modifiers": "@Override public", "return": "double", "signature": "double getDouble(int row)", "full_signature": "@Override public double getDouble(int row)", "class_method_signature": "DoubleColumn.getDouble(int row)", "testcase": false, "constructor": false}, {"identifier": "isMissingValue", "parameters": "(double value)", "modifiers": "public", "return": "boolean", "signature": "boolean isMissingValue(double value)", "full_signature": "public boolean isMissingValue(double value)", "class_method_signature": "DoubleColumn.isMissingValue(double value)", "testcase": false, "constructor": false}, {"identifier": "isMissing", "parameters": "(int rowNumber)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMissing(int rowNumber)", "full_signature": "@Override public boolean isMissing(int rowNumber)", "class_method_signature": "DoubleColumn.isMissing(int rowNumber)", "testcase": false, "constructor": false}, {"identifier": "sortAscending", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void sortAscending()", "full_signature": "@Override public void sortAscending()", "class_method_signature": "DoubleColumn.sortAscending()", "testcase": false, "constructor": false}, {"identifier": "sortDescending", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void sortDescending()", "full_signature": "@Override public void sortDescending()", "class_method_signature": "DoubleColumn.sortDescending()", "testcase": false, "constructor": false}, {"identifier": "appendMissing", "parameters": "()", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn appendMissing()", "full_signature": "@Override public DoubleColumn appendMissing()", "class_method_signature": "DoubleColumn.appendMissing()", "testcase": false, "constructor": false}, {"identifier": "appendObj", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn appendObj(Object obj)", "full_signature": "@Override public DoubleColumn appendObj(Object obj)", "class_method_signature": "DoubleColumn.appendObj(Object obj)", "testcase": false, "constructor": false}, {"identifier": "appendCell", "parameters": "(final String value)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn appendCell(final String value)", "full_signature": "@Override public DoubleColumn appendCell(final String value)", "class_method_signature": "DoubleColumn.appendCell(final String value)", "testcase": false, "constructor": false}, {"identifier": "appendCell", "parameters": "(final String value, AbstractColumnParser<?> parser)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn appendCell(final String value, AbstractColumnParser<?> parser)", "full_signature": "@Override public DoubleColumn appendCell(final String value, AbstractColumnParser<?> parser)", "class_method_signature": "DoubleColumn.appendCell(final String value, AbstractColumnParser<?> parser)", "testcase": false, "constructor": false}, {"identifier": "getUnformattedString", "parameters": "(final int row)", "modifiers": "@Override public", "return": "String", "signature": "String getUnformattedString(final int row)", "full_signature": "@Override public String getUnformattedString(final int row)", "class_method_signature": "DoubleColumn.getUnformattedString(final int row)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(final DoubleIterator iterator)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn fillWith(final DoubleIterator iterator)", "full_signature": "@Override public DoubleColumn fillWith(final DoubleIterator iterator)", "class_method_signature": "DoubleColumn.fillWith(final DoubleIterator iterator)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(final DoubleRangeIterable iterable)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn fillWith(final DoubleRangeIterable iterable)", "full_signature": "@Override public DoubleColumn fillWith(final DoubleRangeIterable iterable)", "class_method_signature": "DoubleColumn.fillWith(final DoubleRangeIterable iterable)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(final DoubleSupplier supplier)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn fillWith(final DoubleSupplier supplier)", "full_signature": "@Override public DoubleColumn fillWith(final DoubleSupplier supplier)", "class_method_signature": "DoubleColumn.fillWith(final DoubleSupplier supplier)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(double d)", "modifiers": "@Override public", "return": "DoubleColumn", "signature": "DoubleColumn fillWith(double d)", "full_signature": "@Override public DoubleColumn fillWith(double d)", "class_method_signature": "DoubleColumn.fillWith(double d)", "testcase": false, "constructor": false}, {"identifier": "asLongColumn", "parameters": "()", "modifiers": "@Override public", "return": "LongColumn", "signature": "LongColumn asLongColumn()", "full_signature": "@Override public LongColumn asLongColumn()", "class_method_signature": "DoubleColumn.asLongColumn()", "testcase": false, "constructor": false}, {"identifier": "asIntColumn", "parameters": "()", "modifiers": "@Override public", "return": "IntColumn", "signature": "IntColumn asIntColumn()", "full_signature": "@Override public IntColumn asIntColumn()", "class_method_signature": "DoubleColumn.asIntColumn()", "testcase": false, "constructor": false}, {"identifier": "asShortColumn", "parameters": "()", "modifiers": "@Override public", "return": "ShortColumn", "signature": "ShortColumn asShortColumn()", "full_signature": "@Override public ShortColumn asShortColumn()", "class_method_signature": "DoubleColumn.asShortColumn()", "testcase": false, "constructor": false}, {"identifier": "asFloatColumn", "parameters": "()", "modifiers": "@Override public", "return": "FloatColumn", "signature": "FloatColumn asFloatColumn()", "full_signature": "@Override public FloatColumn asFloatColumn()", "class_method_signature": "DoubleColumn.asFloatColumn()", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/api/DoubleColumn.java"}, "focal_method": {"identifier": "unique", "parameters": "()", "modifiers": "@Override public", "return": "DoubleColumn", "body": "@Override\n  public DoubleColumn unique() {\n    final DoubleSet doubles = new DoubleOpenHashSet();\n    for (int i = 0; i < size(); i++) {\n      doubles.add(getDouble(i));\n    }\n    final DoubleColumn column = DoubleColumn.create(name() + \" Unique values\");\n    doubles.forEach((DoubleConsumer) column::append);\n    return column;\n  }", "signature": "DoubleColumn unique()", "full_signature": "@Override public DoubleColumn unique()", "class_method_signature": "DoubleColumn.unique()", "testcase": false, "constructor": false, "invocations": ["size", "add", "getDouble", "create", "name", "forEach"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}