{"test_class": {"identifier": "PeriodogramTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/data/PeriodogramTest.java"}, "test_case": {"identifier": "testSum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSum() {\n        for (int K = 12; K < 120; ++K) {\n            DataBlock z = new DataBlock(K);\n            z.randomize(0);\n            Periodogram p = new Periodogram(z, false);\n            DataBlock q = new DataBlock(p.getP());\n            assertTrue(Math.abs(q.sum() - K) < 1e-6);\n            p = new Periodogram(z, true);\n            q = new DataBlock(p.getP());\n            assertTrue(Math.abs(q.sum() - K) < 1e-6);\n        }\n    }", "signature": "void testSum()", "full_signature": "@Test public void testSum()", "class_method_signature": "PeriodogramTest.testSum()", "testcase": true, "constructor": false, "invocations": ["randomize", "getP", "assertTrue", "abs", "sum", "getP", "assertTrue", "abs", "sum"]}, "focal_class": {"identifier": "Periodogram", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double m_sy, m_sy2;", "modifier": "private", "type": "double", "declarator": "m_sy", "var_name": "m_sy"}, {"original_string": "private int m_n;", "modifier": "private", "type": "int", "declarator": "m_n", "var_name": "m_n"}, {"original_string": "private int[] m_w;", "modifier": "private", "type": "int[]", "declarator": "m_w", "var_name": "m_w"}, {"original_string": "private double[] m_data, m_p, m_s;", "modifier": "private", "type": "double[]", "declarator": "m_data", "var_name": "m_data"}, {"original_string": "private final boolean m_mean;", "modifier": "private final", "type": "boolean", "declarator": "m_mean", "var_name": "m_mean"}], "methods": [{"identifier": "getSeasonalFrequencies", "parameters": "(int freq)", "modifiers": "public static", "return": "double[]", "signature": "double[] getSeasonalFrequencies(int freq)", "full_signature": "public static double[] getSeasonalFrequencies(int freq)", "class_method_signature": "Periodogram.getSeasonalFrequencies(int freq)", "testcase": false, "constructor": false}, {"identifier": "getTradingDaysFrequencies", "parameters": "(int freq)", "modifiers": "public static", "return": "double[]", "signature": "double[] getTradingDaysFrequencies(int freq)", "full_signature": "public static double[] getTradingDaysFrequencies(int freq)", "class_method_signature": "Periodogram.getTradingDaysFrequencies(int freq)", "testcase": false, "constructor": false}, {"identifier": "Periodogram", "parameters": "(IReadDataBlock data)", "modifiers": "public", "return": "", "signature": " Periodogram(IReadDataBlock data)", "full_signature": "public  Periodogram(IReadDataBlock data)", "class_method_signature": "Periodogram.Periodogram(IReadDataBlock data)", "testcase": false, "constructor": true}, {"identifier": "Periodogram", "parameters": "(IReadDataBlock data, boolean mean)", "modifiers": "public", "return": "", "signature": " Periodogram(IReadDataBlock data, boolean mean)", "full_signature": "public  Periodogram(IReadDataBlock data, boolean mean)", "class_method_signature": "Periodogram.Periodogram(IReadDataBlock data, boolean mean)", "testcase": false, "constructor": true}, {"identifier": "isMeanCorrection", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMeanCorrection()", "full_signature": "public boolean isMeanCorrection()", "class_method_signature": "Periodogram.isMeanCorrection()", "testcase": false, "constructor": false}, {"identifier": "getSsq", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSsq()", "full_signature": "public double getSsq()", "class_method_signature": "Periodogram.getSsq()", "testcase": false, "constructor": false}, {"identifier": "calcp", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void calcp()", "full_signature": "private void calcp()", "class_method_signature": "Periodogram.calcp()", "testcase": false, "constructor": false}, {"identifier": "calcs", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void calcs()", "full_signature": "private void calcs()", "class_method_signature": "Periodogram.calcs()", "testcase": false, "constructor": false}, {"identifier": "calcwnd", "parameters": "(int n)", "modifiers": "private", "return": "void", "signature": "void calcwnd(int n)", "full_signature": "private void calcwnd(int n)", "class_method_signature": "Periodogram.calcwnd(int n)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getData()", "full_signature": "public double[] getData()", "class_method_signature": "Periodogram.getData()", "testcase": false, "constructor": false}, {"identifier": "getIntervalInRadians", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getIntervalInRadians()", "full_signature": "public double getIntervalInRadians()", "class_method_signature": "Periodogram.getIntervalInRadians()", "testcase": false, "constructor": false}, {"identifier": "getP", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getP()", "full_signature": "public double[] getP()", "class_method_signature": "Periodogram.getP()", "testcase": false, "constructor": false}, {"identifier": "getS", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getS()", "full_signature": "public double[] getS()", "class_method_signature": "Periodogram.getS()", "testcase": false, "constructor": false}, {"identifier": "getWindowLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getWindowLength()", "full_signature": "public int getWindowLength()", "class_method_signature": "Periodogram.getWindowLength()", "testcase": false, "constructor": false}, {"identifier": "searchPeaks", "parameters": "(double dMin, boolean smoothed)", "modifiers": "public", "return": "int[]", "signature": "int[] searchPeaks(double dMin, boolean smoothed)", "full_signature": "public int[] searchPeaks(double dMin, boolean smoothed)", "class_method_signature": "Periodogram.searchPeaks(double dMin, boolean smoothed)", "testcase": false, "constructor": false}, {"identifier": "setWindowLength", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void setWindowLength(int value)", "full_signature": "public void setWindowLength(int value)", "class_method_signature": "Periodogram.setWindowLength(int value)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/data/Periodogram.java"}, "focal_method": {"identifier": "getP", "parameters": "()", "modifiers": "public", "return": "double[]", "body": "public double[] getP() {\n        calcp();\n        return m_p;\n    }", "signature": "double[] getP()", "full_signature": "public double[] getP()", "class_method_signature": "Periodogram.getP()", "testcase": false, "constructor": false, "invocations": ["calcp"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}