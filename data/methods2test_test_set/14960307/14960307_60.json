{"test_class": {"identifier": "SxmpServletProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SxmpServletProcessorTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SxmpServletProcessorTest.class)", "var_name": "logger"}, {"original_string": "@Rule\n    public ExpectedException thrown= ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown= ExpectedException.none()", "var_name": "thrown"}], "file": "ch-sxmp/src/test/java/com/cloudhopper/sxmp/servlet/SxmpServletProcessorTest.java"}, "test_case": {"identifier": "doProcessBadAPIVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doProcessBadAPIVersion() throws Exception {\n        SxmpServletProcessor processor = new SxmpServletProcessor();\n\n        try {\n            processor.doProcess(null, null, null, \"/any/path/to/servlet/2.0\", \"POST\", \"text/xml\");\n        } catch (HttpStatusCodeException e) {\n            // correct behavior\n            Assert.assertEquals(HttpStatus.SC_BAD_REQUEST, e.getStatusCode());\n            Assert.assertThat(e.getMessage(), CoreMatchers.containsString(\"Unsupported API version\"));\n        }\n    }", "signature": "void doProcessBadAPIVersion()", "full_signature": "@Test public void doProcessBadAPIVersion()", "class_method_signature": "SxmpServletProcessorTest.doProcessBadAPIVersion()", "testcase": true, "constructor": false, "invocations": ["doProcess", "assertEquals", "getStatusCode", "assertThat", "getMessage", "containsString"]}, "focal_class": {"identifier": "SxmpServletProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SxmpServletProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SxmpServletProcessor.class)", "var_name": "logger"}, {"original_string": "private static final Marker fatal = MarkerFactory.getMarker(\"FATAL\");", "modifier": "private static final", "type": "Marker", "declarator": "fatal = MarkerFactory.getMarker(\"FATAL\")", "var_name": "fatal"}], "methods": [{"identifier": "SxmpServletProcessor", "parameters": "()", "modifiers": "public", "return": "", "signature": " SxmpServletProcessor()", "full_signature": "public  SxmpServletProcessor()", "class_method_signature": "SxmpServletProcessor.SxmpServletProcessor()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(SxmpProcessor processor, HttpServletRequest request, HttpServletResponse response)", "modifiers": "public", "return": "void", "signature": "void process(SxmpProcessor processor, HttpServletRequest request, HttpServletResponse response)", "full_signature": "public void process(SxmpProcessor processor, HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "SxmpServletProcessor.process(SxmpProcessor processor, HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "doProcess", "parameters": "(SxmpProcessor processor, InputStream in, PrintWriter out, String uri, String method, String contentType)", "modifiers": "public static", "return": "void", "signature": "void doProcess(SxmpProcessor processor, InputStream in, PrintWriter out, String uri, String method, String contentType)", "full_signature": "public static void doProcess(SxmpProcessor processor, InputStream in, PrintWriter out, String uri, String method, String contentType)", "class_method_signature": "SxmpServletProcessor.doProcess(SxmpProcessor processor, InputStream in, PrintWriter out, String uri, String method, String contentType)", "testcase": false, "constructor": false}], "file": "ch-sxmp/src/main/java/com/cloudhopper/sxmp/servlet/SxmpServletProcessor.java"}, "focal_method": {"identifier": "doProcess", "parameters": "(SxmpProcessor processor, InputStream in, PrintWriter out, String uri, String method, String contentType)", "modifiers": "public static", "return": "void", "body": "public static void doProcess(SxmpProcessor processor, InputStream in, PrintWriter out, String uri, String method, String contentType) throws IOException, HttpStatusCodeException {\n        // validate the user went to the correct URL\n        // E.g. /api/sxmp/1.0\n        // find the next position of last / (to extract version)\n        int posOfVersion = uri.lastIndexOf('/');\n        if (posOfVersion < 0 || posOfVersion+1 >= uri.length()) {\n            throw new HttpStatusCodeException(HttpServletResponse.SC_NOT_FOUND, \"Bad URL used, could not extract version or no data for version\");\n        }\n\n        String version = uri.substring(posOfVersion+1);\n        //logger.debug(\"Parsed API Version: \" + version);\n\n        // check if the version is supported\n        if (!version.equals(SxmpParser.VERSION_1_0) && !version.equals(SxmpParser.VERSION_1_1)) {\n            throw new HttpStatusCodeException(HttpServletResponse.SC_BAD_REQUEST, \"Unsupported API version in URL\");\n        }\n\n        // validate the user did a POST\n        if (!method.equalsIgnoreCase(\"POST\")) {\n            throw new HttpStatusCodeException(HttpServletResponse.SC_METHOD_NOT_ALLOWED, \"Only HTTP POST methods are acceptable\");\n        }\n\n        // validate the user posted \"text/xml\"\n        //logger.debug(\"Request contentType: \" + contentType);\n        if (contentType == null || !contentType.toLowerCase().startsWith(\"text/xml\")) {\n            throw new HttpStatusCodeException(HttpServletResponse.SC_BAD_REQUEST, \"Unsupported Content-Type HTTP Header - Must Be text/xml\");\n        }\n\n        // create a new session tied to this processor\n        SxmpSession session = new SxmpSession(processor, version);\n\n        Response response = null;\n        try {\n            // process request, get response\n            response = session.process(in);\n        } catch (Exception e) {\n            // any exception thrown in process() should generate a non-200 HTTP status code\n            // the exception also would have already been logged in the SxmpSession, so we\n            // won't print it here and duplicate it -- any error during processing\n            // would actually have returned an ErrorResponse\n            throw new HttpStatusCodeException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());\n        }\n\n        // at this point, we should have a response\n        if (response == null) {\n            logger.error(fatal, \"The response from SxmpSession.process() was null -- should be impossible\");\n            throw new HttpStatusCodeException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Response was empty\");\n        }\n\n        try {\n            // if we get here, write a response\n            SxmpWriter.write(out, response);\n        } catch (SxmpErrorException e) {\n            logger.error(\"Error while writing response\", e);\n            throw new HttpStatusCodeException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Unable to cleanly write response to OutputStream\");\n        }\n    }", "signature": "void doProcess(SxmpProcessor processor, InputStream in, PrintWriter out, String uri, String method, String contentType)", "full_signature": "public static void doProcess(SxmpProcessor processor, InputStream in, PrintWriter out, String uri, String method, String contentType)", "class_method_signature": "SxmpServletProcessor.doProcess(SxmpProcessor processor, InputStream in, PrintWriter out, String uri, String method, String contentType)", "testcase": false, "constructor": false, "invocations": ["lastIndexOf", "length", "substring", "equals", "equals", "equalsIgnoreCase", "startsWith", "toLowerCase", "process", "getMessage", "error", "write", "error"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}