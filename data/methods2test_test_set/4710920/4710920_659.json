{"test_class": {"identifier": "JavaBeanSerializeUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtilTest.java"}, "test_case": {"identifier": "testSerialize_Array", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerialize_Array() {\n        int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        JavaBeanDescriptor descriptor = JavaBeanSerializeUtil.serialize(array, JavaBeanAccessor.METHOD);\n        Assertions.assertTrue(descriptor.isArrayType());\n        Assertions.assertEquals(int.class.getName(), descriptor.getClassName());\n        for (int i = 0; i < array.length; i++) {\n            Assertions.assertEquals(array[i],\n                    ((JavaBeanDescriptor) descriptor.getProperty(i)).getPrimitiveProperty());\n        }\n\n        Integer[] integers = new Integer[]{1, 2, 3, 4, null, null, null};\n        descriptor = JavaBeanSerializeUtil.serialize(integers, JavaBeanAccessor.METHOD);\n        Assertions.assertTrue(descriptor.isArrayType());\n        Assertions.assertEquals(Integer.class.getName(), descriptor.getClassName());\n        Assertions.assertEquals(integers.length, descriptor.propertySize());\n        for (int i = 0; i < integers.length; i++) {\n            if (integers[i] == null) {\n                Assertions.assertSame(integers[i], descriptor.getProperty(i));\n            } else {\n                Assertions.assertEquals(integers[i], ((JavaBeanDescriptor) descriptor.getProperty(i))\n                        .getPrimitiveProperty());\n            }\n        }\n\n        int[][] second = {{1, 2}, {3, 4}};\n        descriptor = JavaBeanSerializeUtil.serialize(second, JavaBeanAccessor.METHOD);\n        Assertions.assertTrue(descriptor.isArrayType());\n        Assertions.assertEquals(int[].class.getName(), descriptor.getClassName());\n        for (int i = 0; i < second.length; i++) {\n            for (int j = 0; j < second[i].length; j++) {\n                JavaBeanDescriptor item = (((JavaBeanDescriptor) descriptor.getProperty(i)));\n                Assertions.assertTrue(item.isArrayType());\n                Assertions.assertEquals(int.class.getName(), item.getClassName());\n                Assertions.assertEquals(second[i][j], ((JavaBeanDescriptor) item.getProperty(j)).getPrimitiveProperty());\n            }\n        }\n\n        BigPerson[] persons = new BigPerson[]{createBigPerson(), createBigPerson()};\n        descriptor = JavaBeanSerializeUtil.serialize(persons);\n        Assertions.assertTrue(descriptor.isArrayType());\n        Assertions.assertEquals(BigPerson.class.getName(), descriptor.getClassName());\n        for (int i = 0; i < persons.length; i++) {\n            assertEqualsBigPerson(persons[i], descriptor.getProperty(i));\n        }\n    }", "signature": "void testSerialize_Array()", "full_signature": "@Test public void testSerialize_Array()", "class_method_signature": "JavaBeanSerializeUtilTest.testSerialize_Array()", "testcase": true, "constructor": false, "invocations": ["serialize", "assertTrue", "isArrayType", "assertEquals", "getName", "getClassName", "assertEquals", "getPrimitiveProperty", "getProperty", "serialize", "assertTrue", "isArrayType", "assertEquals", "getName", "getClassName", "assertEquals", "propertySize", "assertSame", "getProperty", "assertEquals", "getPrimitiveProperty", "getProperty", "serialize", "assertTrue", "isArrayType", "assertEquals", "getName", "getClassName", "getProperty", "assertTrue", "isArrayType", "assertEquals", "getName", "getClassName", "assertEquals", "getPrimitiveProperty", "getProperty", "createBigPerson", "createBigPerson", "serialize", "assertTrue", "isArrayType", "assertEquals", "getName", "getClassName", "assertEqualsBigPerson", "getProperty"]}, "focal_class": {"identifier": "JavaBeanSerializeUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(JavaBeanSerializeUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JavaBeanSerializeUtil.class)", "var_name": "logger"}, {"original_string": "private static final Map<String, Class<?>> TYPES = new HashMap<String, Class<?>>();", "modifier": "private static final", "type": "Map<String, Class<?>>", "declarator": "TYPES = new HashMap<String, Class<?>>()", "var_name": "TYPES"}, {"original_string": "private static final String ARRAY_PREFIX = \"[\";", "modifier": "private static final", "type": "String", "declarator": "ARRAY_PREFIX = \"[\"", "var_name": "ARRAY_PREFIX"}, {"original_string": "private static final String REFERENCE_TYPE_PREFIX = \"L\";", "modifier": "private static final", "type": "String", "declarator": "REFERENCE_TYPE_PREFIX = \"L\"", "var_name": "REFERENCE_TYPE_PREFIX"}, {"original_string": "private static final String REFERENCE_TYPE_SUFFIX = \";\";", "modifier": "private static final", "type": "String", "declarator": "REFERENCE_TYPE_SUFFIX = \";\"", "var_name": "REFERENCE_TYPE_SUFFIX"}], "methods": [{"identifier": "JavaBeanSerializeUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " JavaBeanSerializeUtil()", "full_signature": "private  JavaBeanSerializeUtil()", "class_method_signature": "JavaBeanSerializeUtil.JavaBeanSerializeUtil()", "testcase": false, "constructor": true}, {"identifier": "serialize", "parameters": "(Object obj)", "modifiers": "public static", "return": "JavaBeanDescriptor", "signature": "JavaBeanDescriptor serialize(Object obj)", "full_signature": "public static JavaBeanDescriptor serialize(Object obj)", "class_method_signature": "JavaBeanSerializeUtil.serialize(Object obj)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Object obj, JavaBeanAccessor accessor)", "modifiers": "public static", "return": "JavaBeanDescriptor", "signature": "JavaBeanDescriptor serialize(Object obj, JavaBeanAccessor accessor)", "full_signature": "public static JavaBeanDescriptor serialize(Object obj, JavaBeanAccessor accessor)", "class_method_signature": "JavaBeanSerializeUtil.serialize(Object obj, JavaBeanAccessor accessor)", "testcase": false, "constructor": false}, {"identifier": "createDescriptorForSerialize", "parameters": "(Class<?> cl)", "modifiers": "private static", "return": "JavaBeanDescriptor", "signature": "JavaBeanDescriptor createDescriptorForSerialize(Class<?> cl)", "full_signature": "private static JavaBeanDescriptor createDescriptorForSerialize(Class<?> cl)", "class_method_signature": "JavaBeanSerializeUtil.createDescriptorForSerialize(Class<?> cl)", "testcase": false, "constructor": false}, {"identifier": "createDescriptorIfAbsent", "parameters": "(Object obj, JavaBeanAccessor accessor,\n                                                               IdentityHashMap<Object, JavaBeanDescriptor> cache)", "modifiers": "private static", "return": "JavaBeanDescriptor", "signature": "JavaBeanDescriptor createDescriptorIfAbsent(Object obj, JavaBeanAccessor accessor,\n                                                               IdentityHashMap<Object, JavaBeanDescriptor> cache)", "full_signature": "private static JavaBeanDescriptor createDescriptorIfAbsent(Object obj, JavaBeanAccessor accessor,\n                                                               IdentityHashMap<Object, JavaBeanDescriptor> cache)", "class_method_signature": "JavaBeanSerializeUtil.createDescriptorIfAbsent(Object obj, JavaBeanAccessor accessor,\n                                                               IdentityHashMap<Object, JavaBeanDescriptor> cache)", "testcase": false, "constructor": false}, {"identifier": "serializeInternal", "parameters": "(JavaBeanDescriptor descriptor, Object obj, JavaBeanAccessor accessor,\n                                          IdentityHashMap<Object, JavaBeanDescriptor> cache)", "modifiers": "private static", "return": "void", "signature": "void serializeInternal(JavaBeanDescriptor descriptor, Object obj, JavaBeanAccessor accessor,\n                                          IdentityHashMap<Object, JavaBeanDescriptor> cache)", "full_signature": "private static void serializeInternal(JavaBeanDescriptor descriptor, Object obj, JavaBeanAccessor accessor,\n                                          IdentityHashMap<Object, JavaBeanDescriptor> cache)", "class_method_signature": "JavaBeanSerializeUtil.serializeInternal(JavaBeanDescriptor descriptor, Object obj, JavaBeanAccessor accessor,\n                                          IdentityHashMap<Object, JavaBeanDescriptor> cache)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(JavaBeanDescriptor beanDescriptor)", "modifiers": "public static", "return": "Object", "signature": "Object deserialize(JavaBeanDescriptor beanDescriptor)", "full_signature": "public static Object deserialize(JavaBeanDescriptor beanDescriptor)", "class_method_signature": "JavaBeanSerializeUtil.deserialize(JavaBeanDescriptor beanDescriptor)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(JavaBeanDescriptor beanDescriptor, ClassLoader loader)", "modifiers": "public static", "return": "Object", "signature": "Object deserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader)", "full_signature": "public static Object deserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader)", "class_method_signature": "JavaBeanSerializeUtil.deserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "deserializeInternal", "parameters": "(Object result, JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                            IdentityHashMap<JavaBeanDescriptor, Object> cache)", "modifiers": "private static", "return": "void", "signature": "void deserializeInternal(Object result, JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                            IdentityHashMap<JavaBeanDescriptor, Object> cache)", "full_signature": "private static void deserializeInternal(Object result, JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                            IdentityHashMap<JavaBeanDescriptor, Object> cache)", "class_method_signature": "JavaBeanSerializeUtil.deserializeInternal(Object result, JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                            IdentityHashMap<JavaBeanDescriptor, Object> cache)", "testcase": false, "constructor": false}, {"identifier": "getSetterMethod", "parameters": "(Class<?> cls, String property, Class<?> valueCls)", "modifiers": "private static", "return": "Method", "signature": "Method getSetterMethod(Class<?> cls, String property, Class<?> valueCls)", "full_signature": "private static Method getSetterMethod(Class<?> cls, String property, Class<?> valueCls)", "class_method_signature": "JavaBeanSerializeUtil.getSetterMethod(Class<?> cls, String property, Class<?> valueCls)", "testcase": false, "constructor": false}, {"identifier": "instantiate", "parameters": "(Class<?> cl)", "modifiers": "private static", "return": "Object", "signature": "Object instantiate(Class<?> cl)", "full_signature": "private static Object instantiate(Class<?> cl)", "class_method_signature": "JavaBeanSerializeUtil.instantiate(Class<?> cl)", "testcase": false, "constructor": false}, {"identifier": "getConstructorArg", "parameters": "(Class<?> cl)", "modifiers": "public static", "return": "Object", "signature": "Object getConstructorArg(Class<?> cl)", "full_signature": "public static Object getConstructorArg(Class<?> cl)", "class_method_signature": "JavaBeanSerializeUtil.getConstructorArg(Class<?> cl)", "testcase": false, "constructor": false}, {"identifier": "instantiateForDeserialize", "parameters": "(JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                                    IdentityHashMap<JavaBeanDescriptor, Object> cache)", "modifiers": "private static", "return": "Object", "signature": "Object instantiateForDeserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                                    IdentityHashMap<JavaBeanDescriptor, Object> cache)", "full_signature": "private static Object instantiateForDeserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                                    IdentityHashMap<JavaBeanDescriptor, Object> cache)", "class_method_signature": "JavaBeanSerializeUtil.instantiateForDeserialize(JavaBeanDescriptor beanDescriptor, ClassLoader loader,\n                                                    IdentityHashMap<JavaBeanDescriptor, Object> cache)", "testcase": false, "constructor": false}, {"identifier": "name2Class", "parameters": "(ClassLoader loader, String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> name2Class(ClassLoader loader, String name)", "full_signature": "public static Class<?> name2Class(ClassLoader loader, String name)", "class_method_signature": "JavaBeanSerializeUtil.name2Class(ClassLoader loader, String name)", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "(String type)", "modifiers": "private static", "return": "boolean", "signature": "boolean isArray(String type)", "full_signature": "private static boolean isArray(String type)", "class_method_signature": "JavaBeanSerializeUtil.isArray(String type)", "testcase": false, "constructor": false}, {"identifier": "isReferenceType", "parameters": "(String type)", "modifiers": "private static", "return": "boolean", "signature": "boolean isReferenceType(String type)", "full_signature": "private static boolean isReferenceType(String type)", "class_method_signature": "JavaBeanSerializeUtil.isReferenceType(String type)", "testcase": false, "constructor": false}, {"identifier": "getEnumValueOfMethod", "parameters": "(Class cl)", "modifiers": "private static", "return": "Method", "signature": "Method getEnumValueOfMethod(Class cl)", "full_signature": "private static Method getEnumValueOfMethod(Class cl)", "class_method_signature": "JavaBeanSerializeUtil.getEnumValueOfMethod(Class cl)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java"}, "focal_method": {"identifier": "serialize", "parameters": "(Object obj)", "modifiers": "public static", "return": "JavaBeanDescriptor", "body": "public static JavaBeanDescriptor serialize(Object obj) {\n        return serialize(obj, JavaBeanAccessor.FIELD);\n    }", "signature": "JavaBeanDescriptor serialize(Object obj)", "full_signature": "public static JavaBeanDescriptor serialize(Object obj)", "class_method_signature": "JavaBeanSerializeUtil.serialize(Object obj)", "testcase": false, "constructor": false, "invocations": ["serialize"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}