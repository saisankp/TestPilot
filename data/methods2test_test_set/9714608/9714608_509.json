{"test_class": {"identifier": "GridTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private ArrayList<MapPoint> reference = null;", "modifier": "private", "type": "ArrayList<MapPoint>", "declarator": "reference = null", "var_name": "reference"}, {"original_string": "private Rectangle2d bounds = null;", "modifier": "private", "type": "Rectangle2d", "declarator": "bounds = null", "var_name": "bounds"}, {"original_string": "private Grid<MapPoint> grid = null;", "modifier": "private", "type": "Grid<MapPoint>", "declarator": "grid = null", "var_name": "grid"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/grid/GridTest.java"}, "test_case": {"identifier": "testGetGridCellsAround", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetGridCellsAround() {\n\t\tGridCell<MapPoint> cell;\n\n\t\tAroundCellIterable<MapPoint> iterable = this.grid.getGridCellsAround(new Point2d(480, 230), Double.POSITIVE_INFINITY);\n\t\tAroundCellIterator<MapPoint> iterator = iterable.aroundIterator();\n\n\t\tassertTrue(iterator.hasNext());\n\t\tcell = iterator.next();\n\t\tassertNotNull(cell);\n\t\tassertEquals(7, cell.column());\n\t\tassertEquals(0, cell.row());\n\t\tassertEquals(3, iterator.getLevel());\n\n\t\tassertTrue(iterator.hasNext());\n\t\tcell = iterator.next();\n\t\tassertNotNull(cell);\n\t\tassertEquals(8, cell.column());\n\t\tassertEquals(0, cell.row());\n\t\tassertEquals(4, iterator.getLevel());\n\n\t\tassertTrue(iterator.hasNext());\n\t\tcell = iterator.next();\n\t\tassertNotNull(cell);\n\t\tassertEquals(0, cell.column());\n\t\tassertEquals(0, cell.row());\n\t\tassertEquals(4, iterator.getLevel());\n\n\t\tassertTrue(iterator.hasNext());\n\t\tcell = iterator.next();\n\t\tassertNotNull(cell);\n\t\tassertEquals(0, cell.column());\n\t\tassertEquals(7, cell.row());\n\t\tassertEquals(5, iterator.getLevel());\n\n\t\tassertTrue(iterator.hasNext());\n\t\tcell = iterator.next();\n\t\tassertNotNull(cell);\n\t\tassertEquals(1, cell.column());\n\t\tassertEquals(7, cell.row());\n\t\tassertEquals(5, iterator.getLevel());\n\n\t\tassertTrue(iterator.hasNext());\n\t\tcell = iterator.next();\n\t\tassertNotNull(cell);\n\t\tassertEquals(4, cell.column());\n\t\tassertEquals(7, cell.row());\n\t\tassertEquals(5, iterator.getLevel());\n\n\t\tassertTrue(iterator.hasNext());\n\t\tcell = iterator.next();\n\t\tassertNotNull(cell);\n\t\tassertEquals(5, cell.column());\n\t\tassertEquals(7, cell.row());\n\t\tassertEquals(5, iterator.getLevel());\n\n\t\tassertTrue(iterator.hasNext());\n\t\tcell = iterator.next();\n\t\tassertNotNull(cell);\n\t\tassertEquals(0, cell.column());\n\t\tassertEquals(8, cell.row());\n\t\tassertEquals(6, iterator.getLevel());\n\n\t\tassertTrue(iterator.hasNext());\n\t\tcell = iterator.next();\n\t\tassertNotNull(cell);\n\t\tassertEquals(1, cell.column());\n\t\tassertEquals(8, cell.row());\n\t\tassertEquals(6, iterator.getLevel());\n\n\t\tassertTrue(iterator.hasNext());\n\t\tcell = iterator.next();\n\t\tassertNotNull(cell);\n\t\tassertEquals(4, cell.column());\n\t\tassertEquals(8, cell.row());\n\t\tassertEquals(6, iterator.getLevel());\n\n\t\tassertTrue(iterator.hasNext());\n\t\tcell = iterator.next();\n\t\tassertNotNull(cell);\n\t\tassertEquals(5, cell.column());\n\t\tassertEquals(8, cell.row());\n\t\tassertEquals(6, iterator.getLevel());\n\n\t\tassertTrue(iterator.hasNext());\n\t\tcell = iterator.next();\n\t\tassertNotNull(cell);\n\t\tassertEquals(9, cell.column());\n\t\tassertEquals(9, cell.row());\n\t\tassertEquals(7, iterator.getLevel());\n\n\t\tassertFalse(iterator.hasNext());\n\t}", "signature": "void testGetGridCellsAround()", "full_signature": "@Test public void testGetGridCellsAround()", "class_method_signature": "GridTest.testGetGridCellsAround()", "testcase": true, "constructor": false, "invocations": ["getGridCellsAround", "aroundIterator", "assertTrue", "hasNext", "next", "assertNotNull", "assertEquals", "column", "assertEquals", "row", "assertEquals", "getLevel", "assertTrue", "hasNext", "next", "assertNotNull", "assertEquals", "column", "assertEquals", "row", "assertEquals", "getLevel", "assertTrue", "hasNext", "next", "assertNotNull", "assertEquals", "column", "assertEquals", "row", "assertEquals", "getLevel", "assertTrue", "hasNext", "next", "assertNotNull", "assertEquals", "column", "assertEquals", "row", "assertEquals", "getLevel", "assertTrue", "hasNext", "next", "assertNotNull", "assertEquals", "column", "assertEquals", "row", "assertEquals", "getLevel", "assertTrue", "hasNext", "next", "assertNotNull", "assertEquals", "column", "assertEquals", "row", "assertEquals", "getLevel", "assertTrue", "hasNext", "next", "assertNotNull", "assertEquals", "column", "assertEquals", "row", "assertEquals", "getLevel", "assertTrue", "hasNext", "next", "assertNotNull", "assertEquals", "column", "assertEquals", "row", "assertEquals", "getLevel", "assertTrue", "hasNext", "next", "assertNotNull", "assertEquals", "column", "assertEquals", "row", "assertEquals", "getLevel", "assertTrue", "hasNext", "next", "assertNotNull", "assertEquals", "column", "assertEquals", "row", "assertEquals", "getLevel", "assertTrue", "hasNext", "next", "assertNotNull", "assertEquals", "column", "assertEquals", "row", "assertEquals", "getLevel", "assertTrue", "hasNext", "next", "assertNotNull", "assertEquals", "column", "assertEquals", "row", "assertEquals", "getLevel", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "Grid", "superclass": "", "interfaces": "implements Iterable<P>", "fields": [{"original_string": "private final int nrows;", "modifier": "private final", "type": "int", "declarator": "nrows", "var_name": "nrows"}, {"original_string": "private final int ncolumns;", "modifier": "private final", "type": "int", "declarator": "ncolumns", "var_name": "ncolumns"}, {"original_string": "private final Rectangle2d bounds;", "modifier": "private final", "type": "Rectangle2d", "declarator": "bounds", "var_name": "bounds"}, {"original_string": "private GridCell<P>[][] cells;", "modifier": "private", "type": "GridCell<P>[][]", "declarator": "cells", "var_name": "cells"}, {"original_string": "private int elementCount;", "modifier": "private", "type": "int", "declarator": "elementCount", "var_name": "elementCount"}, {"original_string": "private int cellCount;", "modifier": "private", "type": "int", "declarator": "cellCount", "var_name": "cellCount"}], "methods": [{"identifier": "Grid", "parameters": "(int nRows, int nColumns, Rectangle2d bounds)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "", "signature": " Grid(int nRows, int nColumns, Rectangle2d bounds)", "full_signature": "@SuppressWarnings(\"unchecked\")  Grid(int nRows, int nColumns, Rectangle2d bounds)", "class_method_signature": "Grid.Grid(int nRows, int nColumns, Rectangle2d bounds)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override @Pure public", "return": "String", "signature": "String toString()", "full_signature": "@Override @Pure public String toString()", "class_method_signature": "Grid.toString()", "testcase": false, "constructor": false}, {"identifier": "getRowCount", "parameters": "()", "modifiers": "@Pure public", "return": "int", "signature": "int getRowCount()", "full_signature": "@Pure public int getRowCount()", "class_method_signature": "Grid.getRowCount()", "testcase": false, "constructor": false}, {"identifier": "getColumnCount", "parameters": "()", "modifiers": "@Pure public", "return": "int", "signature": "int getColumnCount()", "full_signature": "@Pure public int getColumnCount()", "class_method_signature": "Grid.getColumnCount()", "testcase": false, "constructor": false}, {"identifier": "getBounds", "parameters": "()", "modifiers": "@Pure public", "return": "Rectangle2d", "signature": "Rectangle2d getBounds()", "full_signature": "@Pure public Rectangle2d getBounds()", "class_method_signature": "Grid.getBounds()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void clear()", "full_signature": "@SuppressWarnings(\"unchecked\") public void clear()", "class_method_signature": "Grid.clear()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Pure public boolean isEmpty()", "class_method_signature": "Grid.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getElementCount", "parameters": "()", "modifiers": "@Pure public", "return": "int", "signature": "int getElementCount()", "full_signature": "@Pure public int getElementCount()", "class_method_signature": "Grid.getElementCount()", "testcase": false, "constructor": false}, {"identifier": "getCellAt", "parameters": "(int row, int column)", "modifiers": "@Pure public", "return": "GridCell<P>", "signature": "GridCell<P> getCellAt(int row, int column)", "full_signature": "@Pure public GridCell<P> getCellAt(int row, int column)", "class_method_signature": "Grid.getCellAt(int row, int column)", "testcase": false, "constructor": false}, {"identifier": "getCellBounds", "parameters": "(int row, int column)", "modifiers": "@Pure public", "return": "Rectangle2d", "signature": "Rectangle2d getCellBounds(int row, int column)", "full_signature": "@Pure public Rectangle2d getCellBounds(int row, int column)", "class_method_signature": "Grid.getCellBounds(int row, int column)", "testcase": false, "constructor": false}, {"identifier": "createCellAt", "parameters": "(int row, int column)", "modifiers": "public", "return": "GridCell<P>", "signature": "GridCell<P> createCellAt(int row, int column)", "full_signature": "public GridCell<P> createCellAt(int row, int column)", "class_method_signature": "Grid.createCellAt(int row, int column)", "testcase": false, "constructor": false}, {"identifier": "removeCellAt", "parameters": "(int row, int column)", "modifiers": "public", "return": "GridCell<P>", "signature": "GridCell<P> removeCellAt(int row, int column)", "full_signature": "public GridCell<P> removeCellAt(int row, int column)", "class_method_signature": "Grid.removeCellAt(int row, int column)", "testcase": false, "constructor": false}, {"identifier": "addElement", "parameters": "(P element)", "modifiers": "public", "return": "boolean", "signature": "boolean addElement(P element)", "full_signature": "public boolean addElement(P element)", "class_method_signature": "Grid.addElement(P element)", "testcase": false, "constructor": false}, {"identifier": "removeElement", "parameters": "(P element)", "modifiers": "public", "return": "boolean", "signature": "boolean removeElement(P element)", "full_signature": "public boolean removeElement(P element)", "class_method_signature": "Grid.removeElement(P element)", "testcase": false, "constructor": false}, {"identifier": "getCellCount", "parameters": "()", "modifiers": "@Pure public", "return": "int", "signature": "int getCellCount()", "full_signature": "@Pure public int getCellCount()", "class_method_signature": "Grid.getCellCount()", "testcase": false, "constructor": false}, {"identifier": "getGridCells", "parameters": "()", "modifiers": "@Pure public", "return": "Iterable<GridCell<P>>", "signature": "Iterable<GridCell<P>> getGridCells()", "full_signature": "@Pure public Iterable<GridCell<P>> getGridCells()", "class_method_signature": "Grid.getGridCells()", "testcase": false, "constructor": false}, {"identifier": "getGridCellsOn", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "modifiers": "@Pure public", "return": "Iterable<GridCell<P>>", "signature": "Iterable<GridCell<P>> getGridCellsOn(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "full_signature": "@Pure public Iterable<GridCell<P>> getGridCellsOn(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "class_method_signature": "Grid.getGridCellsOn(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "testcase": false, "constructor": false}, {"identifier": "getGridCellsOn", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, boolean createCells)", "modifiers": "protected", "return": "Iterable<GridCell<P>>", "signature": "Iterable<GridCell<P>> getGridCellsOn(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, boolean createCells)", "full_signature": "protected Iterable<GridCell<P>> getGridCellsOn(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, boolean createCells)", "class_method_signature": "Grid.getGridCellsOn(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, boolean createCells)", "testcase": false, "constructor": false}, {"identifier": "getCellWidth", "parameters": "()", "modifiers": "@Pure public", "return": "double", "signature": "double getCellWidth()", "full_signature": "@Pure public double getCellWidth()", "class_method_signature": "Grid.getCellWidth()", "testcase": false, "constructor": false}, {"identifier": "getCellHeight", "parameters": "()", "modifiers": "@Pure public", "return": "double", "signature": "double getCellHeight()", "full_signature": "@Pure public double getCellHeight()", "class_method_signature": "Grid.getCellHeight()", "testcase": false, "constructor": false}, {"identifier": "getColumnFor", "parameters": "(double x)", "modifiers": "@Pure public", "return": "int", "signature": "int getColumnFor(double x)", "full_signature": "@Pure public int getColumnFor(double x)", "class_method_signature": "Grid.getColumnFor(double x)", "testcase": false, "constructor": false}, {"identifier": "getRowFor", "parameters": "(double y)", "modifiers": "@Pure public", "return": "int", "signature": "int getRowFor(double y)", "full_signature": "@Pure public int getRowFor(double y)", "class_method_signature": "Grid.getRowFor(double y)", "testcase": false, "constructor": false}, {"identifier": "getGridCellsAround", "parameters": "(Point2D<?, ?> position, double maximalDistance)", "modifiers": "@Pure public", "return": "AroundCellIterable<P>", "signature": "AroundCellIterable<P> getGridCellsAround(Point2D<?, ?> position, double maximalDistance)", "full_signature": "@Pure public AroundCellIterable<P> getGridCellsAround(Point2D<?, ?> position, double maximalDistance)", "class_method_signature": "Grid.getGridCellsAround(Point2D<?, ?> position, double maximalDistance)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override @Pure public", "return": "Iterator<P>", "signature": "Iterator<P> iterator()", "full_signature": "@Override @Pure public Iterator<P> iterator()", "class_method_signature": "Grid.iterator()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "modifiers": "@Pure public", "return": "Iterator<P>", "signature": "Iterator<P> iterator(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "full_signature": "@Pure public Iterator<P> iterator(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "class_method_signature": "Grid.iterator(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, int budget)", "modifiers": "@Pure public", "return": "Iterator<P>", "signature": "Iterator<P> iterator(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, int budget)", "full_signature": "@Pure public Iterator<P> iterator(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, int budget)", "class_method_signature": "Grid.iterator(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, int budget)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(P element)", "modifiers": "@Pure public", "return": "int", "signature": "int indexOf(P element)", "full_signature": "@Pure public int indexOf(P element)", "class_method_signature": "Grid.indexOf(P element)", "testcase": false, "constructor": false}, {"identifier": "getElementAt", "parameters": "(int index)", "modifiers": "@Pure public", "return": "P", "signature": "P getElementAt(int index)", "full_signature": "@Pure public P getElementAt(int index)", "class_method_signature": "Grid.getElementAt(int index)", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/grid/Grid.java"}, "focal_method": {"identifier": "getGridCellsAround", "parameters": "(Point2D<?, ?> position, double maximalDistance)", "modifiers": "@Pure public", "return": "AroundCellIterable<P>", "body": "@Pure\n\tpublic AroundCellIterable<P> getGridCellsAround(Point2D<?, ?> position, double maximalDistance) {\n\t\tfinal int column = getColumnFor(position.getX());\n\t\tfinal int row = getRowFor(position.getY());\n\t\treturn new AroundIterable(row, column, position, maximalDistance);\n\t}", "signature": "AroundCellIterable<P> getGridCellsAround(Point2D<?, ?> position, double maximalDistance)", "full_signature": "@Pure public AroundCellIterable<P> getGridCellsAround(Point2D<?, ?> position, double maximalDistance)", "class_method_signature": "Grid.getGridCellsAround(Point2D<?, ?> position, double maximalDistance)", "testcase": false, "constructor": false, "invocations": ["getColumnFor", "getX", "getRowFor", "getY"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}