{"test_class": {"identifier": "SlabTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int SLAB_SIZE = 1000;", "modifier": "private final", "type": "int", "declarator": "SLAB_SIZE = 1000", "var_name": "SLAB_SIZE"}, {"original_string": "private final int PAGE_SIZE = 10;", "modifier": "private final", "type": "int", "declarator": "PAGE_SIZE = 10", "var_name": "PAGE_SIZE"}, {"original_string": "private final int PAGES = SLAB_SIZE / PAGE_SIZE;", "modifier": "private final", "type": "int", "declarator": "PAGES = SLAB_SIZE / PAGE_SIZE", "var_name": "PAGES"}], "file": "zava/src/test/java/com/github/geophile/erdo/segmentfilemanager/pagememorymanager/SlabTest.java"}, "test_case": {"identifier": "testInitialAllocations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitialAllocations()\n    {\n        Slab slab = new Slab(0, SLAB_SIZE, PAGE_SIZE);\n        int[] arrayOffsets = new int[PAGES];\n        for (int p = 0; p < PAGES; p++) {\n            ByteBuffer buffer = slab.takePageBuffer();\n            assertNotNull(buffer);\n            assertEquals(0, buffer.position());\n            assertEquals(PAGE_SIZE, buffer.limit());\n            arrayOffsets[p] = buffer.arrayOffset();\n        }\n        assertNull(slab.takePageBuffer());\n        Arrays.sort(arrayOffsets);\n        int expectedArrayOffset = 0;\n        for (int b = 0; b < PAGES; b++) {\n            assertEquals(expectedArrayOffset, arrayOffsets[b]);\n            expectedArrayOffset += PAGE_SIZE;\n        }\n    }", "signature": "void testInitialAllocations()", "full_signature": "@Test public void testInitialAllocations()", "class_method_signature": "SlabTest.testInitialAllocations()", "testcase": true, "constructor": false, "invocations": ["takePageBuffer", "assertNotNull", "assertEquals", "position", "assertEquals", "limit", "arrayOffset", "assertNull", "takePageBuffer", "sort", "assertEquals"]}, "focal_class": {"identifier": "Slab", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(Slab.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(Slab.class.getName())", "var_name": "LOG"}, {"original_string": "private final int slabId;", "modifier": "private final", "type": "int", "declarator": "slabId", "var_name": "slabId"}, {"original_string": "private final int pageSize;", "modifier": "private final", "type": "int", "declarator": "pageSize", "var_name": "pageSize"}, {"original_string": "private final ByteBuffer slab;", "modifier": "private final", "type": "ByteBuffer", "declarator": "slab", "var_name": "slab"}, {"original_string": "private Queue<ByteBuffer> available = new ArrayDeque<>();", "modifier": "private", "type": "Queue<ByteBuffer>", "declarator": "available = new ArrayDeque<>()", "var_name": "available"}], "methods": [{"identifier": "takePageBuffer", "parameters": "()", "modifiers": "public synchronized", "return": "ByteBuffer", "signature": "ByteBuffer takePageBuffer()", "full_signature": "public synchronized ByteBuffer takePageBuffer()", "class_method_signature": "Slab.takePageBuffer()", "testcase": false, "constructor": false}, {"identifier": "returnPageBuffer", "parameters": "(ByteBuffer pageBuffer)", "modifiers": "public", "return": "void", "signature": "void returnPageBuffer(ByteBuffer pageBuffer)", "full_signature": "public void returnPageBuffer(ByteBuffer pageBuffer)", "class_method_signature": "Slab.returnPageBuffer(ByteBuffer pageBuffer)", "testcase": false, "constructor": false}, {"identifier": "Slab", "parameters": "(int slabId, int slabSize, int pageSize)", "modifiers": "public", "return": "", "signature": " Slab(int slabId, int slabSize, int pageSize)", "full_signature": "public  Slab(int slabId, int slabSize, int pageSize)", "class_method_signature": "Slab.Slab(int slabId, int slabSize, int pageSize)", "testcase": false, "constructor": true}, {"identifier": "slabId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int slabId()", "full_signature": "public int slabId()", "class_method_signature": "Slab.slabId()", "testcase": false, "constructor": false}, {"identifier": "byteArray", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] byteArray()", "full_signature": "public byte[] byteArray()", "class_method_signature": "Slab.byteArray()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Slab.clear()", "testcase": false, "constructor": false}, {"identifier": "takeNew", "parameters": "()", "modifiers": "private", "return": "ByteBuffer", "signature": "ByteBuffer takeNew()", "full_signature": "private ByteBuffer takeNew()", "class_method_signature": "Slab.takeNew()", "testcase": false, "constructor": false}, {"identifier": "takeUsed", "parameters": "()", "modifiers": "private", "return": "ByteBuffer", "signature": "ByteBuffer takeUsed()", "full_signature": "private ByteBuffer takeUsed()", "class_method_signature": "Slab.takeUsed()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/github/geophile/erdo/segmentfilemanager/pagememorymanager/Slab.java"}, "focal_method": {"identifier": "takePageBuffer", "parameters": "()", "modifiers": "public synchronized", "return": "ByteBuffer", "body": "public synchronized ByteBuffer takePageBuffer()\n    {\n        ByteBuffer buffer = available.isEmpty() ? takeNew() : takeUsed();\n        if (buffer != null) {\n            assert buffer.position() == 0;\n            assert buffer.remaining() == pageSize;\n        }\n        return buffer;\n    }", "signature": "ByteBuffer takePageBuffer()", "full_signature": "public synchronized ByteBuffer takePageBuffer()", "class_method_signature": "Slab.takePageBuffer()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "takeNew", "takeUsed", "position", "remaining"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}