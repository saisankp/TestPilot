{"test_class": {"identifier": "FeatureTransformerHtmlTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FeatureTransformerHtmlTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FeatureTransformerHtmlTest.class)", "var_name": "LOGGER"}], "file": "ogcapi-stable/ogcapi-features-html/src/test/java/de/ii/ldproxy/ogcapi/features/html/app/FeatureTransformerHtmlTest.java"}, "test_case": {"identifier": "testWriteField", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteField() {\n    String input = \"Abc|\\n---|\\n1|\";\n    String actual = StringTemplateFilters.applyFilterMarkdown(input);\n\n    LOGGER.info(actual);\n    }", "signature": "void testWriteField()", "full_signature": "@Test public void testWriteField()", "class_method_signature": "FeatureTransformerHtmlTest.testWriteField()", "testcase": true, "constructor": false, "invocations": ["applyFilterMarkdown", "info"]}, "focal_class": {"identifier": "FeatureTransformerHtml", "superclass": "", "interfaces": "implements FeatureTransformer2", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FeatureTransformerHtml.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FeatureTransformerHtml.class)", "var_name": "LOGGER"}, {"original_string": "private final OutputStreamWriter outputStreamWriter;", "modifier": "private final", "type": "OutputStreamWriter", "declarator": "outputStreamWriter", "var_name": "outputStreamWriter"}, {"original_string": "private final MustacheRenderer mustacheRenderer;", "modifier": "private final", "type": "MustacheRenderer", "declarator": "mustacheRenderer", "var_name": "mustacheRenderer"}, {"original_string": "private final boolean isFeatureCollection;", "modifier": "private final", "type": "boolean", "declarator": "isFeatureCollection", "var_name": "isFeatureCollection"}, {"original_string": "private final int page;", "modifier": "private final", "type": "int", "declarator": "page", "var_name": "page"}, {"original_string": "private final int pageSize;", "modifier": "private final", "type": "int", "declarator": "pageSize", "var_name": "pageSize"}, {"original_string": "private final int offset;", "modifier": "private final", "type": "int", "declarator": "offset", "var_name": "offset"}, {"original_string": "private final CrsTransformer crsTransformer;", "modifier": "private final", "type": "CrsTransformer", "declarator": "crsTransformer", "var_name": "crsTransformer"}, {"original_string": "private final FeatureCollectionView dataset;", "modifier": "private final", "type": "FeatureCollectionView", "declarator": "dataset", "var_name": "dataset"}, {"original_string": "private final FeaturesHtmlConfiguration htmlConfiguration;", "modifier": "private final", "type": "FeaturesHtmlConfiguration", "declarator": "htmlConfiguration", "var_name": "htmlConfiguration"}, {"original_string": "private final Optional<FeatureSchema> featureSchema;", "modifier": "private final", "type": "Optional<FeatureSchema>", "declarator": "featureSchema", "var_name": "featureSchema"}, {"original_string": "private final Map<String, HtmlPropertyTransformations> transformations;", "modifier": "private final", "type": "Map<String, HtmlPropertyTransformations>", "declarator": "transformations", "var_name": "transformations"}, {"original_string": "private final boolean isSchemaOrgEnabled;", "modifier": "private final", "type": "boolean", "declarator": "isSchemaOrgEnabled", "var_name": "isSchemaOrgEnabled"}, {"original_string": "private ObjectDTO currentFeature;", "modifier": "private", "type": "ObjectDTO", "declarator": "currentFeature", "var_name": "currentFeature"}, {"original_string": "private MicrodataGeometryMapping.MICRODATA_GEOMETRY_TYPE currentGeometryType;", "modifier": "private", "type": "MicrodataGeometryMapping.MICRODATA_GEOMETRY_TYPE", "declarator": "currentGeometryType", "var_name": "currentGeometryType"}, {"original_string": "private ImmutableCoordinatesTransformer.Builder coordinatesTransformerBuilder;", "modifier": "private", "type": "ImmutableCoordinatesTransformer.Builder", "declarator": "coordinatesTransformerBuilder", "var_name": "coordinatesTransformerBuilder"}, {"original_string": "private FeatureProperty currentFeatureProperty;", "modifier": "private", "type": "FeatureProperty", "declarator": "currentFeatureProperty", "var_name": "currentFeatureProperty"}, {"original_string": "private StringBuilder currentValue = new StringBuilder();", "modifier": "private", "type": "StringBuilder", "declarator": "currentValue = new StringBuilder()", "var_name": "currentValue"}, {"original_string": "private Writer coordinatesWriter;", "modifier": "private", "type": "Writer", "declarator": "coordinatesWriter", "var_name": "coordinatesWriter"}, {"original_string": "private Writer coordinatesOutput;", "modifier": "private", "type": "Writer", "declarator": "coordinatesOutput", "var_name": "coordinatesOutput"}, {"original_string": "private PropertyDTO currentGeometryPart;", "modifier": "private", "type": "PropertyDTO", "declarator": "currentGeometryPart", "var_name": "currentGeometryPart"}, {"original_string": "private int currentGeometryParts;", "modifier": "private", "type": "int", "declarator": "currentGeometryParts", "var_name": "currentGeometryParts"}, {"original_string": "private boolean currentGeometryWritten;", "modifier": "private", "type": "boolean", "declarator": "currentGeometryWritten", "var_name": "currentGeometryWritten"}, {"original_string": "private boolean combineCurrentPropertyValues;", "modifier": "private", "type": "boolean", "declarator": "combineCurrentPropertyValues", "var_name": "combineCurrentPropertyValues"}], "methods": [{"identifier": "FeatureTransformerHtml", "parameters": "(FeatureTransformationContextHtml transformationContext, HttpClient httpClient)", "modifiers": "public", "return": "", "signature": " FeatureTransformerHtml(FeatureTransformationContextHtml transformationContext, HttpClient httpClient)", "full_signature": "public  FeatureTransformerHtml(FeatureTransformationContextHtml transformationContext, HttpClient httpClient)", "class_method_signature": "FeatureTransformerHtml.FeatureTransformerHtml(FeatureTransformationContextHtml transformationContext, HttpClient httpClient)", "testcase": false, "constructor": true}, {"identifier": "getTargetFormat", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTargetFormat()", "full_signature": "@Override public String getTargetFormat()", "class_method_signature": "FeatureTransformerHtml.getTargetFormat()", "testcase": false, "constructor": false}, {"identifier": "onStart", "parameters": "(OptionalLong numberReturned, OptionalLong numberMatched)", "modifiers": "@Override public", "return": "void", "signature": "void onStart(OptionalLong numberReturned, OptionalLong numberMatched)", "full_signature": "@Override public void onStart(OptionalLong numberReturned, OptionalLong numberMatched)", "class_method_signature": "FeatureTransformerHtml.onStart(OptionalLong numberReturned, OptionalLong numberMatched)", "testcase": false, "constructor": false}, {"identifier": "onEnd", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onEnd()", "full_signature": "@Override public void onEnd()", "class_method_signature": "FeatureTransformerHtml.onEnd()", "testcase": false, "constructor": false}, {"identifier": "onFeatureStart", "parameters": "(FeatureType featureType)", "modifiers": "@Override public", "return": "void", "signature": "void onFeatureStart(FeatureType featureType)", "full_signature": "@Override public void onFeatureStart(FeatureType featureType)", "class_method_signature": "FeatureTransformerHtml.onFeatureStart(FeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "onFeatureEnd", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onFeatureEnd()", "full_signature": "@Override public void onFeatureEnd()", "class_method_signature": "FeatureTransformerHtml.onFeatureEnd()", "testcase": false, "constructor": false}, {"identifier": "onPropertyStart", "parameters": "(FeatureProperty featureProperty, List<Integer> multiplicities)", "modifiers": "@Override public", "return": "void", "signature": "void onPropertyStart(FeatureProperty featureProperty, List<Integer> multiplicities)", "full_signature": "@Override public void onPropertyStart(FeatureProperty featureProperty, List<Integer> multiplicities)", "class_method_signature": "FeatureTransformerHtml.onPropertyStart(FeatureProperty featureProperty, List<Integer> multiplicities)", "testcase": false, "constructor": false}, {"identifier": "onPropertyText", "parameters": "(String text)", "modifiers": "@Override public", "return": "void", "signature": "void onPropertyText(String text)", "full_signature": "@Override public void onPropertyText(String text)", "class_method_signature": "FeatureTransformerHtml.onPropertyText(String text)", "testcase": false, "constructor": false}, {"identifier": "onPropertyEnd", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onPropertyEnd()", "full_signature": "@Override public void onPropertyEnd()", "class_method_signature": "FeatureTransformerHtml.onPropertyEnd()", "testcase": false, "constructor": false}, {"identifier": "writeField", "parameters": "(FeatureProperty featureProperty, String value)", "modifiers": "protected", "return": "void", "signature": "void writeField(FeatureProperty featureProperty, String value)", "full_signature": "protected void writeField(FeatureProperty featureProperty, String value)", "class_method_signature": "FeatureTransformerHtml.writeField(FeatureProperty featureProperty, String value)", "testcase": false, "constructor": false}, {"identifier": "onGeometryStart", "parameters": "(FeatureProperty featureProperty, SimpleFeatureGeometry type,\n                                Integer dimension)", "modifiers": "@Override public", "return": "void", "signature": "void onGeometryStart(FeatureProperty featureProperty, SimpleFeatureGeometry type,\n                                Integer dimension)", "full_signature": "@Override public void onGeometryStart(FeatureProperty featureProperty, SimpleFeatureGeometry type,\n                                Integer dimension)", "class_method_signature": "FeatureTransformerHtml.onGeometryStart(FeatureProperty featureProperty, SimpleFeatureGeometry type,\n                                Integer dimension)", "testcase": false, "constructor": false}, {"identifier": "onGeometryNestedStart", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onGeometryNestedStart()", "full_signature": "@Override public void onGeometryNestedStart()", "class_method_signature": "FeatureTransformerHtml.onGeometryNestedStart()", "testcase": false, "constructor": false}, {"identifier": "onGeometryCoordinates", "parameters": "(String text)", "modifiers": "@Override public", "return": "void", "signature": "void onGeometryCoordinates(String text)", "full_signature": "@Override public void onGeometryCoordinates(String text)", "class_method_signature": "FeatureTransformerHtml.onGeometryCoordinates(String text)", "testcase": false, "constructor": false}, {"identifier": "onGeometryNestedEnd", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onGeometryNestedEnd()", "full_signature": "@Override public void onGeometryNestedEnd()", "class_method_signature": "FeatureTransformerHtml.onGeometryNestedEnd()", "testcase": false, "constructor": false}, {"identifier": "onGeometryEnd", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onGeometryEnd()", "full_signature": "@Override public void onGeometryEnd()", "class_method_signature": "FeatureTransformerHtml.onGeometryEnd()", "testcase": false, "constructor": false}], "file": "ogcapi-stable/ogcapi-features-html/src/main/java/de/ii/ldproxy/ogcapi/features/html/app/FeatureTransformerHtml.java"}, "focal_method": {"identifier": "writeField", "parameters": "(FeatureProperty featureProperty, String value)", "modifiers": "protected", "return": "void", "body": "protected void writeField(FeatureProperty featureProperty, String value) {\n\n        if (featureProperty.isId()) {\n          currentFeature.id = new PropertyDTO();\n          currentFeature.id.addValue(value);\n          currentFeature.id.itemProp = \"url\";\n        }\n\n        PropertyDTO property = new PropertyDTO();\n        property.name = featureProperty.getName();\n        property.addValue(value);\n\n        if (currentFeature.name != null) {\n            int pos = currentFeature.name.indexOf(\"{{\" + property.name + \"}}\");\n            if (pos > -1) {\n                currentFeature.name = currentFeature.name.substring(0, pos) + value + currentFeature.name.substring(pos);\n            }\n        }\n\n        String tkey = featureProperty.getName()\n                                     .replaceAll(\"\\\\[[^\\\\]]+?\\\\]\", \"[]\");\n        if (transformations.containsKey(tkey)) {\n\n            Optional<ValueDTO> transformedProperty = property.values.size()>0 ?\n                    transformations.get(tkey)\n                                   .transform(property.values.get(0), featureProperty) :\n                    Optional.empty();\n\n            if (transformedProperty.isPresent()) {\n                if (transformedProperty.get().property.name.equals(featureProperty.getName()) && featureSchema.isPresent()) {\n                    String propertyName = featureProperty.getName().replace(\"[]\", \"\");\n                    FeatureSchema schema = featureSchema.get()\n                                                        .getProperties()\n                                                        .stream()\n                                                        .filter(prop -> prop.getName().equals(propertyName))\n                                                        .findAny()\n                                                        .orElse(null);\n                    if (schema!=null) {\n                        transformedProperty.get().property.name = schema.getLabel().orElse(schema.getName());\n                    }\n                }\n\n                property.values.set(0,transformedProperty.get());\n                currentFeature.addChild(property);\n            }\n        } else {\n            if (featureSchema.isPresent()) {\n                String propertyName = featureProperty.getName().replace(\"[]\", \"\");\n                FeatureSchema schema = featureSchema.get()\n                                                    .getProperties()\n                                                    .stream()\n                                                    .filter(prop -> prop.getName().equals(propertyName))\n                                                    .findAny()\n                                                    .orElse(null);\n                if (schema!=null) {\n                    property.name = schema.getLabel().orElse(schema.getName());\n                }\n            }\n\n            currentFeature.addChild(property);\n        }\n    }", "signature": "void writeField(FeatureProperty featureProperty, String value)", "full_signature": "protected void writeField(FeatureProperty featureProperty, String value)", "class_method_signature": "FeatureTransformerHtml.writeField(FeatureProperty featureProperty, String value)", "testcase": false, "constructor": false, "invocations": ["isId", "addValue", "getName", "addValue", "indexOf", "substring", "substring", "replaceAll", "getName", "containsKey", "size", "transform", "get", "get", "empty", "isPresent", "equals", "get", "getName", "isPresent", "replace", "getName", "orElse", "findAny", "filter", "stream", "getProperties", "get", "equals", "getName", "get", "orElse", "getLabel", "getName", "set", "get", "addChild", "isPresent", "replace", "getName", "orElse", "findAny", "filter", "stream", "getProperties", "get", "equals", "getName", "orElse", "getLabel", "getName", "addChild"]}, "repository": {"repo_id": 48321891, "url": "https://github.com/interactive-instruments/ldproxy", "stars": 11, "created": "12/20/2015 1:36:53 PM +00:00", "updates": "2019-12-17T13:19:56+00:00", "fork": "False", "license": "licensed"}}