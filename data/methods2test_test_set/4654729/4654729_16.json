{"test_class": {"identifier": "TypeContainerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TypeContainer typeContainer;", "modifier": "", "type": "TypeContainer", "declarator": "typeContainer", "var_name": "typeContainer"}], "file": "core/src/test/java/com/github/jsr330/instance/TypeContainerTest.java"}, "test_case": {"identifier": "gatherInformation_Singleton", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void gatherInformation_Singleton() {\n        Constructor<Bean4> ctor = null;\n        \n        for (Constructor<?> tmp : Bean4.class.getDeclaredConstructors()) {\n            if (tmp.getParameterTypes().length == 0) {\n                ctor = (Constructor<Bean4>) tmp;\n                break;\n            }\n        }\n        \n        typeContainer = new TypeContainer(Bean4.class, ctor);\n        \n        assertNull(typeContainer.injectionSets);\n        \n        typeContainer.gatherInformation();\n        \n        assertNotNull(typeContainer.injectionSets);\n        assertEquals(4, typeContainer.injectionSets.length);\n        assertEquals(Bean1.class, typeContainer.injectionSets[0].type);\n        assertEquals(Bean2.class, typeContainer.injectionSets[1].type);\n        assertEquals(Bean3.class, typeContainer.injectionSets[2].type);\n        assertEquals(Bean4.class, typeContainer.injectionSets[3].type);\n        assertTrue(typeContainer.singleton);\n        \n        assertEquals(1, typeContainer.injectionSets[0].methods.length);\n        assertEquals(\"contained1_1\", typeContainer.injectionSets[0].methods[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[0].staticMethods.length);\n        assertEquals(\"contained1_2\", typeContainer.injectionSets[0].staticMethods[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[0].staticFields.length);\n        assertEquals(\"contained1_3\", typeContainer.injectionSets[0].staticFields[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[0].fields.length);\n        assertEquals(\"contained1_4\", typeContainer.injectionSets[0].fields[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[1].methods.length);\n        assertEquals(\"contained2_1\", typeContainer.injectionSets[1].methods[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[1].staticMethods.length);\n        assertEquals(\"contained2_2\", typeContainer.injectionSets[1].staticMethods[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[1].staticFields.length);\n        assertEquals(\"contained2_3\", typeContainer.injectionSets[1].staticFields[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[1].fields.length);\n        assertEquals(\"contained2_4\", typeContainer.injectionSets[1].fields[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[2].methods.length);\n        assertEquals(\"contained3_1\", typeContainer.injectionSets[2].methods[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[2].staticMethods.length);\n        assertEquals(\"contained3_2\", typeContainer.injectionSets[2].staticMethods[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[2].staticFields.length);\n        assertEquals(\"contained3_3\", typeContainer.injectionSets[2].staticFields[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[2].fields.length);\n        assertEquals(\"contained3_4\", typeContainer.injectionSets[2].fields[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[3].methods.length);\n        assertEquals(\"contained4_1\", typeContainer.injectionSets[3].methods[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[3].staticMethods.length);\n        assertEquals(\"contained4_2\", typeContainer.injectionSets[3].staticMethods[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[3].staticFields.length);\n        assertEquals(\"contained4_3\", typeContainer.injectionSets[3].staticFields[0].getName());\n        \n        assertEquals(1, typeContainer.injectionSets[3].fields.length);\n        assertEquals(\"contained4_4\", typeContainer.injectionSets[3].fields[0].getName());\n    }", "signature": "void gatherInformation_Singleton()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void gatherInformation_Singleton()", "class_method_signature": "TypeContainerTest.gatherInformation_Singleton()", "testcase": true, "constructor": false, "invocations": ["getDeclaredConstructors", "getParameterTypes", "assertNull", "gatherInformation", "assertNotNull", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertTrue", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName", "assertEquals", "assertEquals", "getName"]}, "focal_class": {"identifier": "TypeContainer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Field[] EMPTY_FIELD_ARRAY = new Field[] {};", "modifier": "private static final", "type": "Field[]", "declarator": "EMPTY_FIELD_ARRAY = new Field[] {}", "var_name": "EMPTY_FIELD_ARRAY"}, {"original_string": "private static final Method[] EMPTY_METHOD_ARRAY = new Method[] {};", "modifier": "private static final", "type": "Method[]", "declarator": "EMPTY_METHOD_ARRAY = new Method[] {}", "var_name": "EMPTY_METHOD_ARRAY"}, {"original_string": "private static final InjectionSet[] EMPTY_INJECTIONSET_ARRAY = new InjectionSet[] {};", "modifier": "private static final", "type": "InjectionSet[]", "declarator": "EMPTY_INJECTIONSET_ARRAY = new InjectionSet[] {}", "var_name": "EMPTY_INJECTIONSET_ARRAY"}, {"original_string": "protected InjectionSet[] injectionSets;", "modifier": "protected", "type": "InjectionSet[]", "declarator": "injectionSets", "var_name": "injectionSets"}, {"original_string": "protected Class<?> type;", "modifier": "protected", "type": "Class<?>", "declarator": "type", "var_name": "type"}, {"original_string": "protected Constructor<?> constructor;", "modifier": "protected", "type": "Constructor<?>", "declarator": "constructor", "var_name": "constructor"}, {"original_string": "protected Provider<?> provider;", "modifier": "protected", "type": "Provider<?>", "declarator": "provider", "var_name": "provider"}, {"original_string": "protected Method factoryMethod;", "modifier": "protected", "type": "Method", "declarator": "factoryMethod", "var_name": "factoryMethod"}, {"original_string": "protected boolean singleton = false;", "modifier": "protected", "type": "boolean", "declarator": "singleton = false", "var_name": "singleton"}, {"original_string": "protected InstanceMode instanceMode = InstanceMode.CONSTRUCTOR;", "modifier": "protected", "type": "InstanceMode", "declarator": "instanceMode = InstanceMode.CONSTRUCTOR", "var_name": "instanceMode"}], "methods": [{"identifier": "TypeContainer", "parameters": "(Class<?> type, Constructor<?> constructor)", "modifiers": "public", "return": "", "signature": " TypeContainer(Class<?> type, Constructor<?> constructor)", "full_signature": "public  TypeContainer(Class<?> type, Constructor<?> constructor)", "class_method_signature": "TypeContainer.TypeContainer(Class<?> type, Constructor<?> constructor)", "testcase": false, "constructor": true}, {"identifier": "gatherInformation", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void gatherInformation()", "full_signature": "public void gatherInformation()", "class_method_signature": "TypeContainer.gatherInformation()", "testcase": false, "constructor": false}, {"identifier": "getMethodInformation", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void getMethodInformation()", "full_signature": "protected void getMethodInformation()", "class_method_signature": "TypeContainer.getMethodInformation()", "testcase": false, "constructor": false}, {"identifier": "getPackageName", "parameters": "(Method method)", "modifiers": "protected", "return": "String", "signature": "String getPackageName(Method method)", "full_signature": "protected String getPackageName(Method method)", "class_method_signature": "TypeContainer.getPackageName(Method method)", "testcase": false, "constructor": false}, {"identifier": "isSamePackage", "parameters": "(Method oldMethod, Method method)", "modifiers": "protected", "return": "boolean", "signature": "boolean isSamePackage(Method oldMethod, Method method)", "full_signature": "protected boolean isSamePackage(Method oldMethod, Method method)", "class_method_signature": "TypeContainer.isSamePackage(Method oldMethod, Method method)", "testcase": false, "constructor": false}, {"identifier": "getFieldInformation", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void getFieldInformation()", "full_signature": "protected void getFieldInformation()", "class_method_signature": "TypeContainer.getFieldInformation()", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "()", "modifiers": "public", "return": "Provider<?>", "signature": "Provider<?> getProvider()", "full_signature": "public Provider<?> getProvider()", "class_method_signature": "TypeContainer.getProvider()", "testcase": false, "constructor": false}, {"identifier": "setProvider", "parameters": "(Provider<?> provider)", "modifiers": "public", "return": "void", "signature": "void setProvider(Provider<?> provider)", "full_signature": "public void setProvider(Provider<?> provider)", "class_method_signature": "TypeContainer.setProvider(Provider<?> provider)", "testcase": false, "constructor": false}, {"identifier": "getInjectionSets", "parameters": "()", "modifiers": "public", "return": "InjectionSet[]", "signature": "InjectionSet[] getInjectionSets()", "full_signature": "public InjectionSet[] getInjectionSets()", "class_method_signature": "TypeContainer.getInjectionSets()", "testcase": false, "constructor": false}, {"identifier": "setInjectionSets", "parameters": "(InjectionSet[] injectionSets)", "modifiers": "public", "return": "void", "signature": "void setInjectionSets(InjectionSet[] injectionSets)", "full_signature": "public void setInjectionSets(InjectionSet[] injectionSets)", "class_method_signature": "TypeContainer.setInjectionSets(InjectionSet[] injectionSets)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getType()", "full_signature": "public Class<?> getType()", "class_method_signature": "TypeContainer.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(Class<?> type)", "modifiers": "public", "return": "void", "signature": "void setType(Class<?> type)", "full_signature": "public void setType(Class<?> type)", "class_method_signature": "TypeContainer.setType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getConstructor", "parameters": "()", "modifiers": "public", "return": "Constructor<?>", "signature": "Constructor<?> getConstructor()", "full_signature": "public Constructor<?> getConstructor()", "class_method_signature": "TypeContainer.getConstructor()", "testcase": false, "constructor": false}, {"identifier": "setConstructor", "parameters": "(Constructor<?> constructor)", "modifiers": "public", "return": "void", "signature": "void setConstructor(Constructor<?> constructor)", "full_signature": "public void setConstructor(Constructor<?> constructor)", "class_method_signature": "TypeContainer.setConstructor(Constructor<?> constructor)", "testcase": false, "constructor": false}, {"identifier": "isSingleton", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSingleton()", "full_signature": "public boolean isSingleton()", "class_method_signature": "TypeContainer.isSingleton()", "testcase": false, "constructor": false}, {"identifier": "setSingleton", "parameters": "(boolean singleton)", "modifiers": "public", "return": "void", "signature": "void setSingleton(boolean singleton)", "full_signature": "public void setSingleton(boolean singleton)", "class_method_signature": "TypeContainer.setSingleton(boolean singleton)", "testcase": false, "constructor": false}, {"identifier": "getFactoryMethod", "parameters": "()", "modifiers": "public", "return": "Method", "signature": "Method getFactoryMethod()", "full_signature": "public Method getFactoryMethod()", "class_method_signature": "TypeContainer.getFactoryMethod()", "testcase": false, "constructor": false}, {"identifier": "setFactoryMethod", "parameters": "(Method factoryMethod)", "modifiers": "public", "return": "void", "signature": "void setFactoryMethod(Method factoryMethod)", "full_signature": "public void setFactoryMethod(Method factoryMethod)", "class_method_signature": "TypeContainer.setFactoryMethod(Method factoryMethod)", "testcase": false, "constructor": false}, {"identifier": "getInstanceMode", "parameters": "()", "modifiers": "public", "return": "InstanceMode", "signature": "InstanceMode getInstanceMode()", "full_signature": "public InstanceMode getInstanceMode()", "class_method_signature": "TypeContainer.getInstanceMode()", "testcase": false, "constructor": false}, {"identifier": "setInstanceMode", "parameters": "(InstanceMode instanceMode)", "modifiers": "public", "return": "void", "signature": "void setInstanceMode(InstanceMode instanceMode)", "full_signature": "public void setInstanceMode(InstanceMode instanceMode)", "class_method_signature": "TypeContainer.setInstanceMode(InstanceMode instanceMode)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TypeContainer.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/jsr330/instance/TypeContainer.java"}, "focal_method": {"identifier": "gatherInformation", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void gatherInformation() {\n        Stack<Class<?>> hierarchie;\n        Class<?> parent;\n        InjectionSet injectionSet;\n        List<InjectionSet> injectionSets = new ArrayList<InjectionSet>();\n        \n        hierarchie = new Stack<Class<?>>();\n        hierarchie.push(parent = type);\n        while ((parent = parent.getSuperclass()) != null) {\n            if (!parent.equals(Object.class)) {\n                hierarchie.push(parent);\n            }\n        }\n        \n        while (!hierarchie.isEmpty()) {\n            parent = hierarchie.pop();\n            if (!parent.equals(Object.class)) {\n                injectionSet = new InjectionSet();\n                injectionSet.type = parent;\n                injectionSets.add(injectionSet);\n            }\n        }\n        \n        this.injectionSets = injectionSets.toArray(EMPTY_INJECTIONSET_ARRAY);\n        \n        singleton = type.isAnnotationPresent(Singleton.class);\n        getFieldInformation();\n        getMethodInformation();\n    }", "signature": "void gatherInformation()", "full_signature": "public void gatherInformation()", "class_method_signature": "TypeContainer.gatherInformation()", "testcase": false, "constructor": false, "invocations": ["push", "getSuperclass", "equals", "push", "isEmpty", "pop", "equals", "add", "toArray", "isAnnotationPresent", "getFieldInformation", "getMethodInformation"]}, "repository": {"repo_id": 4654729, "url": "https://github.com/rstiller/JSR-330", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 10, "size": 747, "license": "licensed"}}