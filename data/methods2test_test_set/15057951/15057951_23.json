{"test_class": {"identifier": "SimpleJdbcRepositoryTest", "superclass": "extends DatabaseTest", "interfaces": "", "fields": [], "file": "smartparam-repository-jdbc/src/test/java/org/smartparam/repository/jdbc/dao/SimpleJdbcRepositoryTest.java"}, "test_case": {"identifier": "shouldDeleteAllEntriesOfParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDeleteAllEntriesOfParameter() {\n        // given\n        database().withParameter(\"parameter\").withLevels(\"parameter\", 5).withParameterEntries(\"parameter\", 5).build();\n        SimpleJdbcRepository repository = get(SimpleJdbcRepository.class);\n        QueryRunner runner = queryRunner();\n\n        // when\n        repository.deleteParameterEntries(runner, \"parameter\");\n        runner.close();\n\n        // then\n        assertDatabase().hasNoEntriesForParameter(\"parameter\").close();\n    }", "signature": "void shouldDeleteAllEntriesOfParameter()", "full_signature": "@Test public void shouldDeleteAllEntriesOfParameter()", "class_method_signature": "SimpleJdbcRepositoryTest.shouldDeleteAllEntriesOfParameter()", "testcase": true, "constructor": false, "invocations": ["build", "withParameterEntries", "withLevels", "withParameter", "database", "get", "queryRunner", "deleteParameterEntries", "close", "close", "hasNoEntriesForParameter", "assertDatabase"]}, "focal_class": {"identifier": "SimpleJdbcRepository", "superclass": "", "interfaces": "implements JdbcRepository", "fields": [{"original_string": "private final JdbcConfig configuration;", "modifier": "private final", "type": "JdbcConfig", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final ParameterDAO parameterDAO;", "modifier": "private final", "type": "ParameterDAO", "declarator": "parameterDAO", "var_name": "parameterDAO"}, {"original_string": "private final LevelDAO levelDAO;", "modifier": "private final", "type": "LevelDAO", "declarator": "levelDAO", "var_name": "levelDAO"}, {"original_string": "private final ParameterEntryDAO parameterEntryDAO;", "modifier": "private final", "type": "ParameterEntryDAO", "declarator": "parameterEntryDAO", "var_name": "parameterEntryDAO"}], "methods": [{"identifier": "SimpleJdbcRepository", "parameters": "(JdbcConfig configuration, ParameterDAO parameterDAO, LevelDAO levelDAO, ParameterEntryDAO parameterEntryDAO)", "modifiers": "public", "return": "", "signature": " SimpleJdbcRepository(JdbcConfig configuration, ParameterDAO parameterDAO, LevelDAO levelDAO, ParameterEntryDAO parameterEntryDAO)", "full_signature": "public  SimpleJdbcRepository(JdbcConfig configuration, ParameterDAO parameterDAO, LevelDAO levelDAO, ParameterEntryDAO parameterEntryDAO)", "class_method_signature": "SimpleJdbcRepository.SimpleJdbcRepository(JdbcConfig configuration, ParameterDAO parameterDAO, LevelDAO levelDAO, ParameterEntryDAO parameterEntryDAO)", "testcase": false, "constructor": true}, {"identifier": "checkConfiguration", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkConfiguration()", "full_signature": "private void checkConfiguration()", "class_method_signature": "SimpleJdbcRepository.checkConfiguration()", "testcase": false, "constructor": false}, {"identifier": "createParameter", "parameters": "(QueryRunner runner, Parameter parameter)", "modifiers": "@Override public", "return": "long", "signature": "long createParameter(QueryRunner runner, Parameter parameter)", "full_signature": "@Override public long createParameter(QueryRunner runner, Parameter parameter)", "class_method_signature": "SimpleJdbcRepository.createParameter(QueryRunner runner, Parameter parameter)", "testcase": false, "constructor": false}, {"identifier": "parameterExists", "parameters": "(QueryRunner runner, String parameterName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean parameterExists(QueryRunner runner, String parameterName)", "full_signature": "@Override public boolean parameterExists(QueryRunner runner, String parameterName)", "class_method_signature": "SimpleJdbcRepository.parameterExists(QueryRunner runner, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(QueryRunner runner, String parameterName)", "modifiers": "@Override public", "return": "JdbcParameter", "signature": "JdbcParameter getParameter(QueryRunner runner, String parameterName)", "full_signature": "@Override public JdbcParameter getParameter(QueryRunner runner, String parameterName)", "class_method_signature": "SimpleJdbcRepository.getParameter(QueryRunner runner, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "getParameterMetadata", "parameters": "(QueryRunner runner, String parameterName)", "modifiers": "@Override public", "return": "JdbcParameter", "signature": "JdbcParameter getParameterMetadata(QueryRunner runner, String parameterName)", "full_signature": "@Override public JdbcParameter getParameterMetadata(QueryRunner runner, String parameterName)", "class_method_signature": "SimpleJdbcRepository.getParameterMetadata(QueryRunner runner, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "listParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> listParameterNames()", "full_signature": "@Override public Set<String> listParameterNames()", "class_method_signature": "SimpleJdbcRepository.listParameterNames()", "testcase": false, "constructor": false}, {"identifier": "listParameterNames", "parameters": "(ParameterFilter filter)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> listParameterNames(ParameterFilter filter)", "full_signature": "@Override public List<String> listParameterNames(ParameterFilter filter)", "class_method_signature": "SimpleJdbcRepository.listParameterNames(ParameterFilter filter)", "testcase": false, "constructor": false}, {"identifier": "getParameterEntries", "parameters": "(QueryRunner runner, String parameterName)", "modifiers": "@Override public", "return": "Set<ParameterEntry>", "signature": "Set<ParameterEntry> getParameterEntries(QueryRunner runner, String parameterName)", "full_signature": "@Override public Set<ParameterEntry> getParameterEntries(QueryRunner runner, String parameterName)", "class_method_signature": "SimpleJdbcRepository.getParameterEntries(QueryRunner runner, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "writeParameterEntries", "parameters": "(QueryRunner runner, String parameterName, Iterable<ParameterEntry> entries)", "modifiers": "@Override public", "return": "List<Long>", "signature": "List<Long> writeParameterEntries(QueryRunner runner, String parameterName, Iterable<ParameterEntry> entries)", "full_signature": "@Override public List<Long> writeParameterEntries(QueryRunner runner, String parameterName, Iterable<ParameterEntry> entries)", "class_method_signature": "SimpleJdbcRepository.writeParameterEntries(QueryRunner runner, String parameterName, Iterable<ParameterEntry> entries)", "testcase": false, "constructor": false}, {"identifier": "deleteParameter", "parameters": "(QueryRunner runner, String parameterName)", "modifiers": "@Override public", "return": "void", "signature": "void deleteParameter(QueryRunner runner, String parameterName)", "full_signature": "@Override public void deleteParameter(QueryRunner runner, String parameterName)", "class_method_signature": "SimpleJdbcRepository.deleteParameter(QueryRunner runner, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "updateParameter", "parameters": "(QueryRunner runner, String parameterName, Parameter parameter)", "modifiers": "@Override public", "return": "void", "signature": "void updateParameter(QueryRunner runner, String parameterName, Parameter parameter)", "full_signature": "@Override public void updateParameter(QueryRunner runner, String parameterName, Parameter parameter)", "class_method_signature": "SimpleJdbcRepository.updateParameter(QueryRunner runner, String parameterName, Parameter parameter)", "testcase": false, "constructor": false}, {"identifier": "addLevel", "parameters": "(QueryRunner runner, String parameterName, Level level)", "modifiers": "@Override public", "return": "long", "signature": "long addLevel(QueryRunner runner, String parameterName, Level level)", "full_signature": "@Override public long addLevel(QueryRunner runner, String parameterName, Level level)", "class_method_signature": "SimpleJdbcRepository.addLevel(QueryRunner runner, String parameterName, Level level)", "testcase": false, "constructor": false}, {"identifier": "updateLevel", "parameters": "(QueryRunner runner, long levelId, Level level)", "modifiers": "@Override public", "return": "void", "signature": "void updateLevel(QueryRunner runner, long levelId, Level level)", "full_signature": "@Override public void updateLevel(QueryRunner runner, long levelId, Level level)", "class_method_signature": "SimpleJdbcRepository.updateLevel(QueryRunner runner, long levelId, Level level)", "testcase": false, "constructor": false}, {"identifier": "reorderLevels", "parameters": "(QueryRunner runner, long[] orderedLevelIds)", "modifiers": "@Override public", "return": "void", "signature": "void reorderLevels(QueryRunner runner, long[] orderedLevelIds)", "full_signature": "@Override public void reorderLevels(QueryRunner runner, long[] orderedLevelIds)", "class_method_signature": "SimpleJdbcRepository.reorderLevels(QueryRunner runner, long[] orderedLevelIds)", "testcase": false, "constructor": false}, {"identifier": "deleteLevel", "parameters": "(QueryRunner queryRunner, String parameterName, long levelId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteLevel(QueryRunner queryRunner, String parameterName, long levelId)", "full_signature": "@Override public void deleteLevel(QueryRunner queryRunner, String parameterName, long levelId)", "class_method_signature": "SimpleJdbcRepository.deleteLevel(QueryRunner queryRunner, String parameterName, long levelId)", "testcase": false, "constructor": false}, {"identifier": "getEntries", "parameters": "(QueryRunner runner, List<Long> ids)", "modifiers": "@Override public", "return": "List<ParameterEntry>", "signature": "List<ParameterEntry> getEntries(QueryRunner runner, List<Long> ids)", "full_signature": "@Override public List<ParameterEntry> getEntries(QueryRunner runner, List<Long> ids)", "class_method_signature": "SimpleJdbcRepository.getEntries(QueryRunner runner, List<Long> ids)", "testcase": false, "constructor": false}, {"identifier": "listEntries", "parameters": "(QueryRunner runner, String parameterName, ParameterEntriesFilter filter)", "modifiers": "@Override public", "return": "List<ParameterEntry>", "signature": "List<ParameterEntry> listEntries(QueryRunner runner, String parameterName, ParameterEntriesFilter filter)", "full_signature": "@Override public List<ParameterEntry> listEntries(QueryRunner runner, String parameterName, ParameterEntriesFilter filter)", "class_method_signature": "SimpleJdbcRepository.listEntries(QueryRunner runner, String parameterName, ParameterEntriesFilter filter)", "testcase": false, "constructor": false}, {"identifier": "addParameterEntry", "parameters": "(QueryRunner runner, String parameterName, ParameterEntry entry)", "modifiers": "@Override public", "return": "long", "signature": "long addParameterEntry(QueryRunner runner, String parameterName, ParameterEntry entry)", "full_signature": "@Override public long addParameterEntry(QueryRunner runner, String parameterName, ParameterEntry entry)", "class_method_signature": "SimpleJdbcRepository.addParameterEntry(QueryRunner runner, String parameterName, ParameterEntry entry)", "testcase": false, "constructor": false}, {"identifier": "updateParameterEntry", "parameters": "(QueryRunner runner, long entryId, ParameterEntry entry)", "modifiers": "@Override public", "return": "void", "signature": "void updateParameterEntry(QueryRunner runner, long entryId, ParameterEntry entry)", "full_signature": "@Override public void updateParameterEntry(QueryRunner runner, long entryId, ParameterEntry entry)", "class_method_signature": "SimpleJdbcRepository.updateParameterEntry(QueryRunner runner, long entryId, ParameterEntry entry)", "testcase": false, "constructor": false}, {"identifier": "deleteParameterEntry", "parameters": "(QueryRunner runner, long entryId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteParameterEntry(QueryRunner runner, long entryId)", "full_signature": "@Override public void deleteParameterEntry(QueryRunner runner, long entryId)", "class_method_signature": "SimpleJdbcRepository.deleteParameterEntry(QueryRunner runner, long entryId)", "testcase": false, "constructor": false}, {"identifier": "deleteParameterEntries", "parameters": "(QueryRunner runner, Iterable<Long> entriesIds)", "modifiers": "@Override public", "return": "void", "signature": "void deleteParameterEntries(QueryRunner runner, Iterable<Long> entriesIds)", "full_signature": "@Override public void deleteParameterEntries(QueryRunner runner, Iterable<Long> entriesIds)", "class_method_signature": "SimpleJdbcRepository.deleteParameterEntries(QueryRunner runner, Iterable<Long> entriesIds)", "testcase": false, "constructor": false}, {"identifier": "deleteParameterEntries", "parameters": "(QueryRunner runner, String parameterName)", "modifiers": "@Override public", "return": "void", "signature": "void deleteParameterEntries(QueryRunner runner, String parameterName)", "full_signature": "@Override public void deleteParameterEntries(QueryRunner runner, String parameterName)", "class_method_signature": "SimpleJdbcRepository.deleteParameterEntries(QueryRunner runner, String parameterName)", "testcase": false, "constructor": false}], "file": "smartparam-repository-jdbc/src/main/java/org/smartparam/repository/jdbc/dao/SimpleJdbcRepository.java"}, "focal_method": {"identifier": "deleteParameterEntries", "parameters": "(QueryRunner runner, Iterable<Long> entriesIds)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void deleteParameterEntries(QueryRunner runner, Iterable<Long> entriesIds) {\n        parameterEntryDAO.delete(runner, entriesIds);\n    }", "signature": "void deleteParameterEntries(QueryRunner runner, Iterable<Long> entriesIds)", "full_signature": "@Override public void deleteParameterEntries(QueryRunner runner, Iterable<Long> entriesIds)", "class_method_signature": "SimpleJdbcRepository.deleteParameterEntries(QueryRunner runner, Iterable<Long> entriesIds)", "testcase": false, "constructor": false, "invocations": ["delete"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}