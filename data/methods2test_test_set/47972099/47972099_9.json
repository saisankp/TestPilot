{"test_class": {"identifier": "StackTraceSampleCoordinatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ActorSystem system;", "modifier": "private static", "type": "ActorSystem", "declarator": "system", "var_name": "system"}, {"original_string": "private StackTraceSampleCoordinator coord;", "modifier": "private", "type": "StackTraceSampleCoordinator", "declarator": "coord", "var_name": "coord"}], "file": "flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/StackTraceSampleCoordinatorTest.java"}, "test_case": {"identifier": "testShutDown", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testShutDown() throws Exception {\n\t\tExecutionVertex[] vertices = new ExecutionVertex[] {\n\t\t\t\tmockExecutionVertex(new ExecutionAttemptID(), ExecutionState.RUNNING, true),\n\t\t};\n\n\t\tList<Future<StackTraceSample>> sampleFutures = new ArrayList<>();\n\n\t\t// Trigger\n\t\tsampleFutures.add(coord.triggerStackTraceSample(\n\t\t\t\tvertices, 1, new FiniteDuration(100, TimeUnit.MILLISECONDS), 0));\n\n\t\tsampleFutures.add(coord.triggerStackTraceSample(\n\t\t\t\tvertices, 1, new FiniteDuration(100, TimeUnit.MILLISECONDS), 0));\n\n\t\tfor (Future<StackTraceSample> future : sampleFutures) {\n\t\t\tassertFalse(future.isCompleted());\n\t\t}\n\n\t\t// Shut down\n\t\tcoord.shutDown();\n\n\t\t// Verify all completed\n\t\tfor (Future<StackTraceSample> future : sampleFutures) {\n\t\t\tassertTrue(future.isCompleted());\n\t\t}\n\n\t\t// Verify new trigger returns failed future\n\t\tFuture<StackTraceSample> future = coord.triggerStackTraceSample(\n\t\t\t\tvertices, 1, new FiniteDuration(100, TimeUnit.MILLISECONDS), 0);\n\n\t\tassertTrue(future.isCompleted());\n\t\tassertTrue(future.failed().isCompleted());\n\t}", "signature": "void testShutDown()", "full_signature": "@Test public void testShutDown()", "class_method_signature": "StackTraceSampleCoordinatorTest.testShutDown()", "testcase": true, "constructor": false, "invocations": ["mockExecutionVertex", "add", "triggerStackTraceSample", "add", "triggerStackTraceSample", "assertFalse", "isCompleted", "shutDown", "assertTrue", "isCompleted", "triggerStackTraceSample", "assertTrue", "isCompleted", "assertTrue", "isCompleted", "failed"]}, "focal_class": {"identifier": "StackTraceSampleCoordinator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(StackTraceSampleCoordinator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(StackTraceSampleCoordinator.class)", "var_name": "LOG"}, {"original_string": "private static final int NUM_GHOST_SAMPLE_IDS = 10;", "modifier": "private static final", "type": "int", "declarator": "NUM_GHOST_SAMPLE_IDS = 10", "var_name": "NUM_GHOST_SAMPLE_IDS"}, {"original_string": "private final Object lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "private final ActorGateway responseActor;", "modifier": "private final", "type": "ActorGateway", "declarator": "responseActor", "var_name": "responseActor"}, {"original_string": "private final int sampleTimeout;", "modifier": "private final", "type": "int", "declarator": "sampleTimeout", "var_name": "sampleTimeout"}, {"original_string": "private final Map<Integer, PendingStackTraceSample> pendingSamples = new HashMap<>();", "modifier": "private final", "type": "Map<Integer, PendingStackTraceSample>", "declarator": "pendingSamples = new HashMap<>()", "var_name": "pendingSamples"}, {"original_string": "private final ArrayDeque<Integer> recentPendingSamples = new ArrayDeque<>(NUM_GHOST_SAMPLE_IDS);", "modifier": "private final", "type": "ArrayDeque<Integer>", "declarator": "recentPendingSamples = new ArrayDeque<>(NUM_GHOST_SAMPLE_IDS)", "var_name": "recentPendingSamples"}, {"original_string": "private int sampleIdCounter;", "modifier": "private", "type": "int", "declarator": "sampleIdCounter", "var_name": "sampleIdCounter"}, {"original_string": "private Timer timer;", "modifier": "private", "type": "Timer", "declarator": "timer", "var_name": "timer"}, {"original_string": "private boolean isShutDown;", "modifier": "private", "type": "boolean", "declarator": "isShutDown", "var_name": "isShutDown"}], "methods": [{"identifier": "StackTraceSampleCoordinator", "parameters": "(ActorSystem actorSystem, int sampleTimeout)", "modifiers": "public", "return": "", "signature": " StackTraceSampleCoordinator(ActorSystem actorSystem, int sampleTimeout)", "full_signature": "public  StackTraceSampleCoordinator(ActorSystem actorSystem, int sampleTimeout)", "class_method_signature": "StackTraceSampleCoordinator.StackTraceSampleCoordinator(ActorSystem actorSystem, int sampleTimeout)", "testcase": false, "constructor": true}, {"identifier": "triggerStackTraceSample", "parameters": "(\n\t\t\tExecutionVertex[] tasksToSample,\n\t\t\tint numSamples,\n\t\t\tFiniteDuration delayBetweenSamples,\n\t\t\tint maxStackTraceDepth)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Future<StackTraceSample>", "signature": "Future<StackTraceSample> triggerStackTraceSample(\n\t\t\tExecutionVertex[] tasksToSample,\n\t\t\tint numSamples,\n\t\t\tFiniteDuration delayBetweenSamples,\n\t\t\tint maxStackTraceDepth)", "full_signature": "@SuppressWarnings(\"unchecked\") public Future<StackTraceSample> triggerStackTraceSample(\n\t\t\tExecutionVertex[] tasksToSample,\n\t\t\tint numSamples,\n\t\t\tFiniteDuration delayBetweenSamples,\n\t\t\tint maxStackTraceDepth)", "class_method_signature": "StackTraceSampleCoordinator.triggerStackTraceSample(\n\t\t\tExecutionVertex[] tasksToSample,\n\t\t\tint numSamples,\n\t\t\tFiniteDuration delayBetweenSamples,\n\t\t\tint maxStackTraceDepth)", "testcase": false, "constructor": false}, {"identifier": "cancelStackTraceSample", "parameters": "(int sampleId, Exception cause)", "modifiers": "public", "return": "void", "signature": "void cancelStackTraceSample(int sampleId, Exception cause)", "full_signature": "public void cancelStackTraceSample(int sampleId, Exception cause)", "class_method_signature": "StackTraceSampleCoordinator.cancelStackTraceSample(int sampleId, Exception cause)", "testcase": false, "constructor": false}, {"identifier": "shutDown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutDown()", "full_signature": "public void shutDown()", "class_method_signature": "StackTraceSampleCoordinator.shutDown()", "testcase": false, "constructor": false}, {"identifier": "collectStackTraces", "parameters": "(\n\t\t\tint sampleId,\n\t\t\tExecutionAttemptID executionId,\n\t\t\tList<StackTraceElement[]> stackTraces)", "modifiers": "public", "return": "void", "signature": "void collectStackTraces(\n\t\t\tint sampleId,\n\t\t\tExecutionAttemptID executionId,\n\t\t\tList<StackTraceElement[]> stackTraces)", "full_signature": "public void collectStackTraces(\n\t\t\tint sampleId,\n\t\t\tExecutionAttemptID executionId,\n\t\t\tList<StackTraceElement[]> stackTraces)", "class_method_signature": "StackTraceSampleCoordinator.collectStackTraces(\n\t\t\tint sampleId,\n\t\t\tExecutionAttemptID executionId,\n\t\t\tList<StackTraceElement[]> stackTraces)", "testcase": false, "constructor": false}, {"identifier": "rememberRecentSampleId", "parameters": "(int sampleId)", "modifiers": "private", "return": "void", "signature": "void rememberRecentSampleId(int sampleId)", "full_signature": "private void rememberRecentSampleId(int sampleId)", "class_method_signature": "StackTraceSampleCoordinator.rememberRecentSampleId(int sampleId)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfPendingSamples", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getNumberOfPendingSamples()", "full_signature": " int getNumberOfPendingSamples()", "class_method_signature": "StackTraceSampleCoordinator.getNumberOfPendingSamples()", "testcase": false, "constructor": false}], "file": "flink-runtime-web/src/main/java/org/apache/flink/runtime/webmonitor/StackTraceSampleCoordinator.java"}, "focal_method": {"identifier": "shutDown", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void shutDown() {\n\t\tsynchronized (lock) {\n\t\t\tif (!isShutDown) {\n\t\t\t\tLOG.info(\"Shutting down stack trace sample coordinator.\");\n\n\t\t\t\tfor (PendingStackTraceSample pending : pendingSamples.values()) {\n\t\t\t\t\tpending.discard(new RuntimeException(\"Shut down\"));\n\t\t\t\t}\n\n\t\t\t\tpendingSamples.clear();\n\n\t\t\t\tif (timer != null) {\n\t\t\t\t\ttimer.cancel();\n\t\t\t\t}\n\n\t\t\t\tisShutDown = true;\n\t\t\t}\n\t\t}\n\t}", "signature": "void shutDown()", "full_signature": "public void shutDown()", "class_method_signature": "StackTraceSampleCoordinator.shutDown()", "testcase": false, "constructor": false, "invocations": ["info", "values", "discard", "clear", "cancel"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}