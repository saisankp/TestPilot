{"test_class": {"identifier": "ColorHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/core-map/src/test/java/org/orbisgis/coremap/renderer/se/parameter/color/ColorHelperTest.java"}, "test_case": {"identifier": "testInvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvert() {\n        System.out.println(\"invert\");\n        Color c = new Color(40, 40, 40);\n        Color expResult = new Color(215, 215, 215);\n        Color result = ColorHelper.invert(c);\n        assertEquals(expResult, result);\n        //When the inverted color is too dark or too light, we are supposed to obtain some default yellow.\n        c = new Color(5,5,5);\n        expResult = new Color(ColorHelper.MAX_RGB_VALUE, ColorHelper.MAX_RGB_VALUE, 40);\n        result = ColorHelper.invert(c);\n        assertEquals(expResult, result);\n        c = new Color(250,250,250);\n        expResult = new Color(ColorHelper.MAX_RGB_VALUE, ColorHelper.MAX_RGB_VALUE, 40);\n        result = ColorHelper.invert(c);\n        assertEquals(expResult, result);\n        \n    }", "signature": "void testInvert()", "full_signature": "@Test public void testInvert()", "class_method_signature": "ColorHelperTest.testInvert()", "testcase": true, "constructor": false, "invocations": ["println", "invert", "assertEquals", "invert", "assertEquals", "invert", "assertEquals"]}, "focal_class": {"identifier": "ColorHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MAX_RGB_VALUE = 255;", "modifier": "public static final", "type": "int", "declarator": "MAX_RGB_VALUE = 255", "var_name": "MAX_RGB_VALUE"}, {"original_string": "private static final float INTERVAL_SIZE = 60.0f;", "modifier": "private static final", "type": "float", "declarator": "INTERVAL_SIZE = 60.0f", "var_name": "INTERVAL_SIZE"}, {"original_string": "private static final float DEGREES = 360.0f;", "modifier": "private static final", "type": "float", "declarator": "DEGREES = 360.0f", "var_name": "DEGREES"}], "methods": [{"identifier": "ColorHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " ColorHelper()", "full_signature": "private  ColorHelper()", "class_method_signature": "ColorHelper.ColorHelper()", "testcase": false, "constructor": true}, {"identifier": "getColorWithAlpha", "parameters": "(Color c, double alpha)", "modifiers": "public static", "return": "Color", "signature": "Color getColorWithAlpha(Color c, double alpha)", "full_signature": "public static Color getColorWithAlpha(Color c, double alpha)", "class_method_signature": "ColorHelper.getColorWithAlpha(Color c, double alpha)", "testcase": false, "constructor": false}, {"identifier": "invert", "parameters": "(Color c)", "modifiers": "public static", "return": "Color", "signature": "Color invert(Color c)", "full_signature": "public static Color invert(Color c)", "class_method_signature": "ColorHelper.invert(Color c)", "testcase": false, "constructor": false}, {"identifier": "getColorFromHSL", "parameters": "(double h, double s, double l)", "modifiers": "public static", "return": "Color", "signature": "Color getColorFromHSL(double h, double s, double l)", "full_signature": "public static Color getColorFromHSL(double h, double s, double l)", "class_method_signature": "ColorHelper.getColorFromHSL(double h, double s, double l)", "testcase": false, "constructor": false}, {"identifier": "getColorSpaceImage", "parameters": "()", "modifiers": "public static", "return": "BufferedImage", "signature": "BufferedImage getColorSpaceImage()", "full_signature": "public static BufferedImage getColorSpaceImage()", "class_method_signature": "ColorHelper.getColorSpaceImage()", "testcase": false, "constructor": false}, {"identifier": "getHue", "parameters": "(Color color)", "modifiers": "public static", "return": "float", "signature": "float getHue(Color color)", "full_signature": "public static float getHue(Color color)", "class_method_signature": "ColorHelper.getHue(Color color)", "testcase": false, "constructor": false}, {"identifier": "getLightness", "parameters": "(Color color)", "modifiers": "public static", "return": "float", "signature": "float getLightness(Color color)", "full_signature": "public static float getLightness(Color color)", "class_method_signature": "ColorHelper.getLightness(Color color)", "testcase": false, "constructor": false}], "file": "bundles/core-map/src/main/java/org/orbisgis/coremap/renderer/se/parameter/color/ColorHelper.java"}, "focal_method": {"identifier": "invert", "parameters": "(Color c)", "modifiers": "public static", "return": "Color", "body": "public static Color invert(Color c){\n        //  TODO : improve\n        int a = c.getAlpha();\n        int r = MAX_RGB_VALUE - c.getRed();\n        int g = MAX_RGB_VALUE - c.getGreen();\n        int b = MAX_RGB_VALUE - c.getBlue();\n\n        // if the resulting color is to light (e.g. initial color is black, resulting color is white...)\n        if ((r + g + b > 740) || (r + g + b < 20)){\n            // return a standard yellow\n            return new Color(MAX_RGB_VALUE, MAX_RGB_VALUE, 40, a);\n        }\n        else{\n            return new Color(r,g,b,a);\n        }\n    }", "signature": "Color invert(Color c)", "full_signature": "public static Color invert(Color c)", "class_method_signature": "ColorHelper.invert(Color c)", "testcase": false, "constructor": false, "invocations": ["getAlpha", "getRed", "getGreen", "getBlue"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}