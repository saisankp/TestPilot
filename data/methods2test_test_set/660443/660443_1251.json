{"test_class": {"identifier": "PharmacophoreMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static ConformerContainer conformers = null;", "modifier": "public static", "type": "ConformerContainer", "declarator": "conformers = null", "var_name": "conformers"}], "file": "tool/pcore/src/test/java/org/openscience/cdk/pharmacophore/PharmacophoreMatcherTest.java"}, "test_case": {"identifier": "testAngleMatch1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAngleMatch1() throws Exception {\n        String filename = \"data/mdl/cnssmarts.sdf\";\n        InputStream ins = PharmacophoreMatcherTest.class.getClassLoader().getResourceAsStream(filename);\n        IteratingSDFReader reader = new IteratingSDFReader(ins, SilentChemObjectBuilder.getInstance());\n\n        PharmacophoreQuery query = new PharmacophoreQuery();\n        PharmacophoreQueryAtom n1 = new PharmacophoreQueryAtom(\"BasicAmine\", \"[NX3;h2,h1,H1,H2;!$(NC=O)]\");\n        PharmacophoreQueryAtom n2 = new PharmacophoreQueryAtom(\"BasicAmine\", \"[NX3;h2,h1,H1,H2;!$(NC=O)]\");\n        PharmacophoreQueryAtom n3 = new PharmacophoreQueryAtom(\"BasicAmine\", \"[NX3;h2,h1,H1,H2;!$(NC=O)]\");\n        PharmacophoreQueryAngleBond b1 = new PharmacophoreQueryAngleBond(n1, n2, n3, 85, 90);\n        query.addAtom(n1);\n        query.addAtom(n2);\n        query.addAtom(n3);\n        query.addBond(b1);\n\n        reader.hasNext();\n        IAtomContainer mol = (IAtomContainer) reader.next();\n        reader.close();\n\n        PharmacophoreMatcher matcher = new PharmacophoreMatcher(query);\n        boolean status = matcher.matches(mol);\n        Assert.assertTrue(status);\n    }", "signature": "void testAngleMatch1()", "full_signature": "@Test public void testAngleMatch1()", "class_method_signature": "PharmacophoreMatcherTest.testAngleMatch1()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getInstance", "addAtom", "addAtom", "addAtom", "addBond", "hasNext", "next", "close", "matches", "assertTrue"]}, "focal_class": {"identifier": "PharmacophoreMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ILoggingTool                  logger                = LoggingToolFactory\n                                                                        .createLoggingTool(PharmacophoreMatcher.class);", "modifier": "private", "type": "ILoggingTool", "declarator": "logger                = LoggingToolFactory\n                                                                        .createLoggingTool(PharmacophoreMatcher.class)", "var_name": "logger"}, {"original_string": "private PharmacophoreQuery            pharmacophoreQuery    = null;", "modifier": "private", "type": "PharmacophoreQuery", "declarator": "pharmacophoreQuery    = null", "var_name": "pharmacophoreQuery"}, {"original_string": "private IAtomContainer                pharmacophoreMolecule = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "pharmacophoreMolecule = null", "var_name": "pharmacophoreMolecule"}, {"original_string": "private Mappings mappings = null;", "modifier": "private", "type": "Mappings", "declarator": "mappings = null", "var_name": "mappings"}], "methods": [{"identifier": "PharmacophoreMatcher", "parameters": "()", "modifiers": "public", "return": "", "signature": " PharmacophoreMatcher()", "full_signature": "public  PharmacophoreMatcher()", "class_method_signature": "PharmacophoreMatcher.PharmacophoreMatcher()", "testcase": false, "constructor": true}, {"identifier": "PharmacophoreMatcher", "parameters": "(PharmacophoreQuery pharmacophoreQuery)", "modifiers": "public", "return": "", "signature": " PharmacophoreMatcher(PharmacophoreQuery pharmacophoreQuery)", "full_signature": "public  PharmacophoreMatcher(PharmacophoreQuery pharmacophoreQuery)", "class_method_signature": "PharmacophoreMatcher.PharmacophoreMatcher(PharmacophoreQuery pharmacophoreQuery)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(IAtomContainer atomContainer)", "full_signature": "public boolean matches(IAtomContainer atomContainer)", "class_method_signature": "PharmacophoreMatcher.matches(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(IAtomContainer atomContainer, boolean initializeTarget)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(IAtomContainer atomContainer, boolean initializeTarget)", "full_signature": "public boolean matches(IAtomContainer atomContainer, boolean initializeTarget)", "class_method_signature": "PharmacophoreMatcher.matches(IAtomContainer atomContainer, boolean initializeTarget)", "testcase": false, "constructor": false}, {"identifier": "getMatchingPharmacophoreBonds", "parameters": "()", "modifiers": "public", "return": "List<List<IBond>>", "signature": "List<List<IBond>> getMatchingPharmacophoreBonds()", "full_signature": "public List<List<IBond>> getMatchingPharmacophoreBonds()", "class_method_signature": "PharmacophoreMatcher.getMatchingPharmacophoreBonds()", "testcase": false, "constructor": false}, {"identifier": "getTargetQueryBondMappings", "parameters": "()", "modifiers": "public", "return": "List<HashMap<IBond, IBond>>", "signature": "List<HashMap<IBond, IBond>> getTargetQueryBondMappings()", "full_signature": "public List<HashMap<IBond, IBond>> getTargetQueryBondMappings()", "class_method_signature": "PharmacophoreMatcher.getTargetQueryBondMappings()", "testcase": false, "constructor": false}, {"identifier": "getMatchingPharmacophoreAtoms", "parameters": "()", "modifiers": "public", "return": "List<List<PharmacophoreAtom>>", "signature": "List<List<PharmacophoreAtom>> getMatchingPharmacophoreAtoms()", "full_signature": "public List<List<PharmacophoreAtom>> getMatchingPharmacophoreAtoms()", "class_method_signature": "PharmacophoreMatcher.getMatchingPharmacophoreAtoms()", "testcase": false, "constructor": false}, {"identifier": "getUniqueMatchingPharmacophoreAtoms", "parameters": "()", "modifiers": "public", "return": "List<List<PharmacophoreAtom>>", "signature": "List<List<PharmacophoreAtom>> getUniqueMatchingPharmacophoreAtoms()", "full_signature": "public List<List<PharmacophoreAtom>> getUniqueMatchingPharmacophoreAtoms()", "class_method_signature": "PharmacophoreMatcher.getUniqueMatchingPharmacophoreAtoms()", "testcase": false, "constructor": false}, {"identifier": "getPCoreAtoms", "parameters": "(Mappings mappings)", "modifiers": "private", "return": "List<List<PharmacophoreAtom>>", "signature": "List<List<PharmacophoreAtom>> getPCoreAtoms(Mappings mappings)", "full_signature": "private List<List<PharmacophoreAtom>> getPCoreAtoms(Mappings mappings)", "class_method_signature": "PharmacophoreMatcher.getPCoreAtoms(Mappings mappings)", "testcase": false, "constructor": false}, {"identifier": "getPharmacophoreQuery", "parameters": "()", "modifiers": "public", "return": "PharmacophoreQuery", "signature": "PharmacophoreQuery getPharmacophoreQuery()", "full_signature": "public PharmacophoreQuery getPharmacophoreQuery()", "class_method_signature": "PharmacophoreMatcher.getPharmacophoreQuery()", "testcase": false, "constructor": false}, {"identifier": "setPharmacophoreQuery", "parameters": "(PharmacophoreQuery query)", "modifiers": "public", "return": "void", "signature": "void setPharmacophoreQuery(PharmacophoreQuery query)", "full_signature": "public void setPharmacophoreQuery(PharmacophoreQuery query)", "class_method_signature": "PharmacophoreMatcher.setPharmacophoreQuery(PharmacophoreQuery query)", "testcase": false, "constructor": false}, {"identifier": "getPharmacophoreMolecule", "parameters": "(IAtomContainer input)", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer getPharmacophoreMolecule(IAtomContainer input)", "full_signature": "private IAtomContainer getPharmacophoreMolecule(IAtomContainer input)", "class_method_signature": "PharmacophoreMatcher.getPharmacophoreMolecule(IAtomContainer input)", "testcase": false, "constructor": false}, {"identifier": "newPCoreAtom", "parameters": "(IAtomContainer input, PharmacophoreQueryAtom qatom, String smarts, int[] mapping)", "modifiers": "private", "return": "PharmacophoreAtom", "signature": "PharmacophoreAtom newPCoreAtom(IAtomContainer input, PharmacophoreQueryAtom qatom, String smarts, int[] mapping)", "full_signature": "private PharmacophoreAtom newPCoreAtom(IAtomContainer input, PharmacophoreQueryAtom qatom, String smarts, int[] mapping)", "class_method_signature": "PharmacophoreMatcher.newPCoreAtom(IAtomContainer input, PharmacophoreQueryAtom qatom, String smarts, int[] mapping)", "testcase": false, "constructor": false}, {"identifier": "prepareInput", "parameters": "(IAtomContainer input)", "modifiers": "private", "return": "void", "signature": "void prepareInput(IAtomContainer input)", "full_signature": "private void prepareInput(IAtomContainer input)", "class_method_signature": "PharmacophoreMatcher.prepareInput(IAtomContainer input)", "testcase": false, "constructor": false}, {"identifier": "hasDistanceConstraints", "parameters": "(IQueryAtomContainer query)", "modifiers": "private", "return": "boolean", "signature": "boolean hasDistanceConstraints(IQueryAtomContainer query)", "full_signature": "private boolean hasDistanceConstraints(IQueryAtomContainer query)", "class_method_signature": "PharmacophoreMatcher.hasDistanceConstraints(IQueryAtomContainer query)", "testcase": false, "constructor": false}, {"identifier": "hasAngleConstraints", "parameters": "(IQueryAtomContainer query)", "modifiers": "private", "return": "boolean", "signature": "boolean hasAngleConstraints(IQueryAtomContainer query)", "full_signature": "private boolean hasAngleConstraints(IQueryAtomContainer query)", "class_method_signature": "PharmacophoreMatcher.hasAngleConstraints(IQueryAtomContainer query)", "testcase": false, "constructor": false}, {"identifier": "intIndices", "parameters": "(List<Integer> atomIndices)", "modifiers": "private", "return": "int[]", "signature": "int[] intIndices(List<Integer> atomIndices)", "full_signature": "private int[] intIndices(List<Integer> atomIndices)", "class_method_signature": "PharmacophoreMatcher.intIndices(List<Integer> atomIndices)", "testcase": false, "constructor": false}, {"identifier": "getEffectiveCoordinates", "parameters": "(IAtomContainer atomContainer, List<Integer> atomIndices)", "modifiers": "private", "return": "Point3d", "signature": "Point3d getEffectiveCoordinates(IAtomContainer atomContainer, List<Integer> atomIndices)", "full_signature": "private Point3d getEffectiveCoordinates(IAtomContainer atomContainer, List<Integer> atomIndices)", "class_method_signature": "PharmacophoreMatcher.getEffectiveCoordinates(IAtomContainer atomContainer, List<Integer> atomIndices)", "testcase": false, "constructor": false}, {"identifier": "getEffectiveCoordinates", "parameters": "(IAtomContainer atomContainer, int[] atomIndices)", "modifiers": "private", "return": "Point3d", "signature": "Point3d getEffectiveCoordinates(IAtomContainer atomContainer, int[] atomIndices)", "full_signature": "private Point3d getEffectiveCoordinates(IAtomContainer atomContainer, int[] atomIndices)", "class_method_signature": "PharmacophoreMatcher.getEffectiveCoordinates(IAtomContainer atomContainer, int[] atomIndices)", "testcase": false, "constructor": false}, {"identifier": "checkQuery", "parameters": "(IQueryAtomContainer query)", "modifiers": "private", "return": "boolean", "signature": "boolean checkQuery(IQueryAtomContainer query)", "full_signature": "private boolean checkQuery(IQueryAtomContainer query)", "class_method_signature": "PharmacophoreMatcher.checkQuery(IQueryAtomContainer query)", "testcase": false, "constructor": false}], "file": "tool/pcore/src/main/java/org/openscience/cdk/pharmacophore/PharmacophoreMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public", "return": "boolean", "body": "public boolean matches(IAtomContainer atomContainer) throws CDKException {\n        return matches(atomContainer, true);\n    }", "signature": "boolean matches(IAtomContainer atomContainer)", "full_signature": "public boolean matches(IAtomContainer atomContainer)", "class_method_signature": "PharmacophoreMatcher.matches(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["matches"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}