{"test_class": {"identifier": "TestPublicSuffixListParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LIST_FILE = \"/suffixlist.txt\";", "modifier": "private static final", "type": "String", "declarator": "LIST_FILE = \"/suffixlist.txt\"", "var_name": "LIST_FILE"}, {"original_string": "private PublicSuffixFilter filter;", "modifier": "private", "type": "PublicSuffixFilter", "declarator": "filter", "var_name": "filter"}], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/impl/cookie/TestPublicSuffixListParser.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() throws Exception {\n        BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n\n        cookie.setDomain(\".jp\");\n        Assert.assertFalse(filter.match(cookie, new CookieOrigin(\"apache.jp\", 80, \"/stuff\", false)));\n\n        cookie.setDomain(\".ac.jp\");\n        Assert.assertFalse(filter.match(cookie, new CookieOrigin(\"apache.ac.jp\", 80, \"/stuff\", false)));\n\n        cookie.setDomain(\".any.tokyo.jp\");\n        Assert.assertFalse(filter.match(cookie, new CookieOrigin(\"apache.any.tokyo.jp\", 80, \"/stuff\", false)));\n\n        // exception\n        cookie.setDomain(\".metro.tokyo.jp\");\n        Assert.assertTrue(filter.match(cookie, new CookieOrigin(\"apache.metro.tokyo.jp\", 80, \"/stuff\", false)));\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "TestPublicSuffixListParser.testParse()", "testcase": true, "constructor": false, "invocations": ["setDomain", "assertFalse", "match", "setDomain", "assertFalse", "match", "setDomain", "assertFalse", "match", "setDomain", "assertTrue", "match"]}, "focal_class": {"identifier": "PublicSuffixListParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_LINE_LEN = 256;", "modifier": "private static final", "type": "int", "declarator": "MAX_LINE_LEN = 256", "var_name": "MAX_LINE_LEN"}, {"original_string": "private final PublicSuffixFilter filter;", "modifier": "private final", "type": "PublicSuffixFilter", "declarator": "filter", "var_name": "filter"}], "methods": [{"identifier": "PublicSuffixListParser", "parameters": "(PublicSuffixFilter filter)", "modifiers": "", "return": "", "signature": " PublicSuffixListParser(PublicSuffixFilter filter)", "full_signature": "  PublicSuffixListParser(PublicSuffixFilter filter)", "class_method_signature": "PublicSuffixListParser.PublicSuffixListParser(PublicSuffixFilter filter)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(Reader list)", "modifiers": "public", "return": "void", "signature": "void parse(Reader list)", "full_signature": "public void parse(Reader list)", "class_method_signature": "PublicSuffixListParser.parse(Reader list)", "testcase": false, "constructor": false}, {"identifier": "readLine", "parameters": "(Reader r, StringBuilder sb)", "modifiers": "private", "return": "boolean", "signature": "boolean readLine(Reader r, StringBuilder sb)", "full_signature": "private boolean readLine(Reader r, StringBuilder sb)", "class_method_signature": "PublicSuffixListParser.readLine(Reader r, StringBuilder sb)", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/cookie/PublicSuffixListParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(Reader list)", "modifiers": "public", "return": "void", "body": "public void parse(Reader list) throws IOException {\n        Collection<String> rules = new ArrayList<String>();\n        Collection<String> exceptions = new ArrayList<String>();\n        BufferedReader r = new BufferedReader(list);\n        StringBuilder sb = new StringBuilder(256);\n        boolean more = true;\n        while (more) {\n            more = readLine(r, sb);\n            String line = sb.toString();\n            if (line.length() == 0) continue;\n            if (line.startsWith(\"//\")) continue; //entire lines can also be commented using //\n            if (line.startsWith(\".\")) line = line.substring(1); // A leading dot is optional\n            // An exclamation mark (!) at the start of a rule marks an exception to a previous wildcard rule\n            boolean isException = line.startsWith(\"!\");\n            if (isException) line = line.substring(1);\n\n            if (isException) {\n                exceptions.add(line);\n            } else {\n                rules.add(line);\n            }\n        }\n\n        filter.setPublicSuffixes(rules);\n        filter.setExceptions(exceptions);\n    }", "signature": "void parse(Reader list)", "full_signature": "public void parse(Reader list)", "class_method_signature": "PublicSuffixListParser.parse(Reader list)", "testcase": false, "constructor": false, "invocations": ["readLine", "toString", "length", "startsWith", "startsWith", "substring", "startsWith", "substring", "add", "add", "setPublicSuffixes", "setExceptions"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}