{"test_class": {"identifier": "ObservableFromCallableTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/observable/ObservableFromCallableTest.java"}, "test_case": {"identifier": "shouldNotInvokeFuncUntilSubscription", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void shouldNotInvokeFuncUntilSubscription() throws Exception {\n        Callable<Object> func = mock(Callable.class);\n\n        when(func.call()).thenReturn(new Object());\n\n        Observable<Object> fromCallableObservable = Observable.fromCallable(func);\n\n        verifyZeroInteractions(func);\n\n        fromCallableObservable.subscribe();\n\n        verify(func).call();\n    }", "signature": "void shouldNotInvokeFuncUntilSubscription()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void shouldNotInvokeFuncUntilSubscription()", "class_method_signature": "ObservableFromCallableTest.shouldNotInvokeFuncUntilSubscription()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "call", "fromCallable", "verifyZeroInteractions", "subscribe", "call", "verify"]}, "focal_class": {"identifier": "ObservableFromCallable", "superclass": "extends Observable<T>", "interfaces": "implements Callable<T>", "fields": [{"original_string": "final Callable<? extends T> callable;", "modifier": "final", "type": "Callable<? extends T>", "declarator": "callable", "var_name": "callable"}], "methods": [{"identifier": "ObservableFromCallable", "parameters": "(Callable<? extends T> callable)", "modifiers": "public", "return": "", "signature": " ObservableFromCallable(Callable<? extends T> callable)", "full_signature": "public  ObservableFromCallable(Callable<? extends T> callable)", "class_method_signature": "ObservableFromCallable.ObservableFromCallable(Callable<? extends T> callable)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(Observer<? super T> s)", "modifiers": "@Override public", "return": "void", "signature": "void subscribeActual(Observer<? super T> s)", "full_signature": "@Override public void subscribeActual(Observer<? super T> s)", "class_method_signature": "ObservableFromCallable.subscribeActual(Observer<? super T> s)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T call()", "full_signature": "@Override public T call()", "class_method_signature": "ObservableFromCallable.call()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableFromCallable.java"}, "focal_method": {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public T call() throws Exception {\n        return ObjectHelper.requireNonNull(callable.call(), \"The callable returned a null value\");\n    }", "signature": "T call()", "full_signature": "@Override public T call()", "class_method_signature": "ObservableFromCallable.call()", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "call"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}