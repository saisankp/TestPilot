{"test_class": {"identifier": "ServiceDescriptionFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONFIG_FILE_NAME = \"GenericWrapperConfigFileExample.xml\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_FILE_NAME = \"GenericWrapperConfigFileExample.xml\"", "var_name": "CONFIG_FILE_NAME"}, {"original_string": "private ServiceDescriptionFactory serviceDescriptionFactory;", "modifier": "private", "type": "ServiceDescriptionFactory", "declarator": "serviceDescriptionFactory", "var_name": "serviceDescriptionFactory"}, {"original_string": "private static final String SERVICE_PROVIDER = \"TestProvider\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_PROVIDER = \"TestProvider\"", "var_name": "SERVICE_PROVIDER"}], "file": "framework/generic/src/test/java/eu/planets_project/ifr/core/services/migration/genericwrapper2/ServiceDescriptionFactoryTest.java"}, "test_case": {"identifier": "testGetServiceDescription", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetServiceDescription() throws Exception {\n\n\tfinal ServiceDescription serviceDescription = serviceDescriptionFactory\n\t\t.getServiceDescription();\n\n\tassertNotNull(serviceDescription);\n\n\tassertEquals(\"Un-expected author (creator) information.\",\n\t\t\"\\\"Easter Bunny <easter.bunny@bunny.net>\\\"\", serviceDescription\n\t\t\t.getAuthor());\n\n\tfinal String expectedDescription = \"Example description of a service \"\n\t\t+ \"wrapping of a fantastic\\n            command line tool for migrating an \"\n\t\t+ \"egg to eggnog.\";\n\tassertEquals(\"Un-expected description.\", expectedDescription,\n\t\tserviceDescription.getDescription());\n\n\tfinal URI expectedFurtherInfoURI = new URI(\"http://example.org\");\n\tassertEquals(\"Un-expected text returned by getFurtherInfo().\",\n\t\texpectedFurtherInfoURI, serviceDescription.getFurtherInfo());\n\n\tassertEquals(\"Un-expected identifier.\", \"-3995df4febea7decc4848e2864b7f863\",\n\t\tserviceDescription.getIdentifier());\n\n\tassertEquals(\"Un-expected input formats.\", getExpectedInputFormats(),\n\t\tnew HashSet<URI>(serviceDescription.getInputFormats()));\n\n\tfinal String expectedInstructions = \"Example: Please install the XYZ \"\n\t\t+ \"tool on the system to\\n            make this service work.\";\n\tassertEquals(\"Un-expected instructions.\", expectedInstructions,\n\t\tserviceDescription.getInstructions());\n\n\tfinal String expectedLogoURL = \"http://www.planets-project.eu/graphics\"\n\t\t+ \"/Planets_Logo.png\";\n\tassertEquals(\"Un-expected logo URI.\", expectedLogoURL,\n\t\tserviceDescription.getLogo().toString());\n\n\tfinal String expctedServiceName = \"Example: Eggnog migration service.\";\n\tassertEquals(\"Un-expected service name.\", expctedServiceName,\n\t\tserviceDescription.getName());\n\n\tassertEquals(\"Un-expected service class name.\", this.getClass()\n\t\t.getCanonicalName(), serviceDescription.getClassname());\n\n\tverifyParameters(serviceDescription.getParameters());\n\n\tverifyToolDescription(serviceDescription.getTool());\n\n\tassertEquals(\"Un-expected service version.\", \"3.141592653589793\",\n\t\tserviceDescription.getVersion());\n\n\tassertEquals(\"Not testing a service, thus un-expected end-point URL.\",\n\t\tnull, serviceDescription.getEndpoint());\n\n\tverifyProperties(serviceDescription.getProperties());\n\n\tassertEquals(\"Un-expected service provider information.\",\n\t\tSERVICE_PROVIDER, serviceDescription.getServiceProvider());\n\n\tassertEquals(\"Un-expected interface type.\",\n\t\t\"eu.planets_project.services.migrate.Migrate\",\n\t\tserviceDescription.getType());\n\n\tverifyMigrationPaths(serviceDescription.getPaths());\n    }", "signature": "void testGetServiceDescription()", "full_signature": "@Test public void testGetServiceDescription()", "class_method_signature": "ServiceDescriptionFactoryTest.testGetServiceDescription()", "testcase": true, "constructor": false, "invocations": ["getServiceDescription", "assertNotNull", "assertEquals", "getAuthor", "assertEquals", "getDescription", "assertEquals", "getFurtherInfo", "assertEquals", "getIdentifier", "assertEquals", "getExpectedInputFormats", "getInputFormats", "assertEquals", "getInstructions", "assertEquals", "toString", "getLogo", "assertEquals", "getName", "assertEquals", "getCanonicalName", "getClass", "getClassname", "verifyParameters", "getParameters", "verifyToolDescription", "getTool", "assertEquals", "getVersion", "assertEquals", "getEndpoint", "verifyProperties", "getProperties", "assertEquals", "getServiceProvider", "assertEquals", "getType", "verifyMigrationPaths", "getPaths"]}, "focal_class": {"identifier": "ServiceDescriptionFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"unused\")\n\tprivate Logger log = Logger.getLogger(ServiceDescriptionFactory.class\n            .getName());", "modifier": "@SuppressWarnings(\"unused\")\n\tprivate", "type": "Logger", "declarator": "log = Logger.getLogger(ServiceDescriptionFactory.class\n            .getName())", "var_name": "log"}, {"original_string": "private final XPathFactory xPathFactory;", "modifier": "private final", "type": "XPathFactory", "declarator": "xPathFactory", "var_name": "xPathFactory"}, {"original_string": "private final Document configuration;", "modifier": "private final", "type": "Document", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final String canonicalServiceName;", "modifier": "private final", "type": "String", "declarator": "canonicalServiceName", "var_name": "canonicalServiceName"}, {"original_string": "private final String serviceProvider;", "modifier": "private final", "type": "String", "declarator": "serviceProvider", "var_name": "serviceProvider"}], "methods": [{"identifier": "ServiceDescriptionFactory", "parameters": "(String canonicalServiceName,\n            String serviceProvider, Document wrapperConfiguration)", "modifiers": "", "return": "", "signature": " ServiceDescriptionFactory(String canonicalServiceName,\n            String serviceProvider, Document wrapperConfiguration)", "full_signature": "  ServiceDescriptionFactory(String canonicalServiceName,\n            String serviceProvider, Document wrapperConfiguration)", "class_method_signature": "ServiceDescriptionFactory.ServiceDescriptionFactory(String canonicalServiceName,\n            String serviceProvider, Document wrapperConfiguration)", "testcase": false, "constructor": true}, {"identifier": "getServiceDescription", "parameters": "()", "modifiers": "", "return": "ServiceDescription", "signature": "ServiceDescription getServiceDescription()", "full_signature": " ServiceDescription getServiceDescription()", "class_method_signature": "ServiceDescriptionFactory.getServiceDescription()", "testcase": false, "constructor": false}, {"identifier": "getOptionalElementText", "parameters": "(Node nodeWithOptionalElement,\n            String elementName)", "modifiers": "private", "return": "String", "signature": "String getOptionalElementText(Node nodeWithOptionalElement,\n            String elementName)", "full_signature": "private String getOptionalElementText(Node nodeWithOptionalElement,\n            String elementName)", "class_method_signature": "ServiceDescriptionFactory.getOptionalElementText(Node nodeWithOptionalElement,\n            String elementName)", "testcase": false, "constructor": false}, {"identifier": "getMandatoryElementText", "parameters": "(Node nodeWithMandatoryElement,\n            String elementName)", "modifiers": "private", "return": "String", "signature": "String getMandatoryElementText(Node nodeWithMandatoryElement,\n            String elementName)", "full_signature": "private String getMandatoryElementText(Node nodeWithMandatoryElement,\n            String elementName)", "class_method_signature": "ServiceDescriptionFactory.getMandatoryElementText(Node nodeWithMandatoryElement,\n            String elementName)", "testcase": false, "constructor": false}, {"identifier": "getOptionalURIElement", "parameters": "(Node nodeWithOptionalURIElement,\n            String elementName)", "modifiers": "private", "return": "URI", "signature": "URI getOptionalURIElement(Node nodeWithOptionalURIElement,\n            String elementName)", "full_signature": "private URI getOptionalURIElement(Node nodeWithOptionalURIElement,\n            String elementName)", "class_method_signature": "ServiceDescriptionFactory.getOptionalURIElement(Node nodeWithOptionalURIElement,\n            String elementName)", "testcase": false, "constructor": false}, {"identifier": "getOptionalURLElement", "parameters": "(Node nodeWithOptionalURLElement,\n            String elementName)", "modifiers": "private", "return": "URL", "signature": "URL getOptionalURLElement(Node nodeWithOptionalURLElement,\n            String elementName)", "full_signature": "private URL getOptionalURLElement(Node nodeWithOptionalURLElement,\n            String elementName)", "class_method_signature": "ServiceDescriptionFactory.getOptionalURLElement(Node nodeWithOptionalURLElement,\n            String elementName)", "testcase": false, "constructor": false}, {"identifier": "getServiceProperties", "parameters": "(Node serviceDescriptionNode)", "modifiers": "private", "return": "Property[]", "signature": "Property[] getServiceProperties(Node serviceDescriptionNode)", "full_signature": "private Property[] getServiceProperties(Node serviceDescriptionNode)", "class_method_signature": "ServiceDescriptionFactory.getServiceProperties(Node serviceDescriptionNode)", "testcase": false, "constructor": false}, {"identifier": "addValue", "parameters": "(Property.Builder propertyBuilder,\n            Node nodeWithValueElement)", "modifiers": "private", "return": "Builder", "signature": "Builder addValue(Property.Builder propertyBuilder,\n            Node nodeWithValueElement)", "full_signature": "private Builder addValue(Property.Builder propertyBuilder,\n            Node nodeWithValueElement)", "class_method_signature": "ServiceDescriptionFactory.addValue(Property.Builder propertyBuilder,\n            Node nodeWithValueElement)", "testcase": false, "constructor": false}, {"identifier": "getUniqueParameters", "parameters": "(MigrationPaths migrationPaths)", "modifiers": "private", "return": "List<Parameter>", "signature": "List<Parameter> getUniqueParameters(MigrationPaths migrationPaths)", "full_signature": "private List<Parameter> getUniqueParameters(MigrationPaths migrationPaths)", "class_method_signature": "ServiceDescriptionFactory.getUniqueParameters(MigrationPaths migrationPaths)", "testcase": false, "constructor": false}, {"identifier": "getToolDescriptionElement", "parameters": "(Node nodeWithToolDescription)", "modifiers": "private", "return": "Tool", "signature": "Tool getToolDescriptionElement(Node nodeWithToolDescription)", "full_signature": "private Tool getToolDescriptionElement(Node nodeWithToolDescription)", "class_method_signature": "ServiceDescriptionFactory.getToolDescriptionElement(Node nodeWithToolDescription)", "testcase": false, "constructor": false}], "file": "framework/generic/src/main/java/eu/planets_project/ifr/core/services/migration/genericwrapper2/ServiceDescriptionFactory.java"}, "focal_method": {"identifier": "getServiceDescription", "parameters": "()", "modifiers": "", "return": "ServiceDescription", "body": "ServiceDescription getServiceDescription() throws ConfigurationException {\n\n        final XPath pathsXPath = this.xPathFactory.newXPath();\n        try {\n            final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(\n                    ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH,\n                    this.configuration, XPathConstants.NODE);\n\n            final String title = getMandatoryElementText(\n                    serviceDescriptionNode,\n                    ConfigurationFileTagsV1.TITLE_ELEMENT);\n\n            // Start the creation of a service description for a migration\n            // service.\n            ServiceDescription.Builder builder = new ServiceDescription.Builder(\n                    title, Migrate.class.getCanonicalName());\n\n            Property[] serviceProperties = getServiceProperties(serviceDescriptionNode);\n\n            builder.author(getMandatoryElementText(serviceDescriptionNode,\n                    ConfigurationFileTagsV1.CREATOR_ELEMENT));\n\n            builder.classname(this.canonicalServiceName);\n\n            builder.description(getOptionalElementText(serviceDescriptionNode,\n                    ConfigurationFileTagsV1.DESCRIPTION_ELEMENT));\n\n            final String serviceVersion = getOptionalElementText(\n                    serviceDescriptionNode,\n                    ConfigurationFileTagsV1.VERSION_ELEMENT);\n\n            final Tool toolDescription = getToolDescriptionElement(serviceDescriptionNode);\n\n            // Get the migration service identifier or create an identifier if\n            // it has not been specified in the configuration document.\n            String identifier = getOptionalElementText(serviceDescriptionNode,\n                    ConfigurationFileTagsV1.IDENTIFIER_ELEMENT);\n\n            if (identifier == null || \"\".equals(identifier)) {\n                \n                // Construct an identifier in the form of a MD5 digest of\n                // the tool ID, the canonical class name of the migration\n                // service and its version number.\n                try {\n                    final MessageDigest identDigest = MessageDigest\n                            .getInstance(\"MD5\");\n                    identDigest.update(this.canonicalServiceName.getBytes());\n\n                    final String versionInfo = (serviceVersion != null) ? serviceVersion\n                            : \"\";\n                    identDigest.update(versionInfo.getBytes());\n\n                    final URI toolIDURI = toolDescription.getIdentifier();\n                    final String toolIdentifier = toolIDURI == null ? \"\"\n                            : toolIDURI.toString();\n                    identDigest.update(toolIdentifier.getBytes());\n\n                    final BigInteger md5hash = new BigInteger(identDigest.digest());\n                    identifier = md5hash.toString(16);\n\n                } catch (NoSuchAlgorithmException nsae) {\n                    // There is nothing we can do...\n                    throw new RuntimeException(nsae);\n                }\n            }\n\n            builder.identifier(identifier);\n            builder.version(serviceVersion);\n            builder.tool(toolDescription);\n\n            builder.instructions(getOptionalElementText(serviceDescriptionNode,\n                    ConfigurationFileTagsV1.INSTRUCTIONS_ELEMENT));\n\n            builder.furtherInfo(getOptionalURIElement(serviceDescriptionNode,\n                    ConfigurationFileTagsV1.FURTHER_INFO_ELEMENT));\n\n            builder.logo(getOptionalURIElement(serviceDescriptionNode,\n                    ConfigurationFileTagsV1.LOGO_ELEMENT));\n\n            builder.serviceProvider(this.serviceProvider);\n\n            final DBMigrationPathFactory migrationPathFactory = new DBMigrationPathFactory(\n                    this.configuration);\n\n            final MigrationPaths migrationPaths = migrationPathFactory\n                    .getAllMigrationPaths();\n\n            builder\n                    .paths(MigrationPathConverter\n                            .toPlanetsPaths(migrationPaths));\n\n            builder.inputFormats(migrationPaths.getInputFormatURIs().toArray(\n                    new URI[0]));\n\n            builder.parameters(getUniqueParameters(migrationPaths));\n\n            builder.properties(serviceProperties);\n\n            return builder.build();\n\n        } catch (XPathExpressionException xPathExpressionException) {\n            throw new ConfigurationException(String.format(\n                    \"Failed parsing the '%s' element in the '%s' element.\",\n                    ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH,\n                    this.configuration.getNodeName()), xPathExpressionException);\n        } catch (NullPointerException nullPointerException) {\n            throw new ConfigurationException(String.format(\n                    \"Failed parsing the '%s' element in the '%s' element.\",\n                    ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH,\n                    this.configuration.getNodeName()), nullPointerException);\n        }\n    }", "signature": "ServiceDescription getServiceDescription()", "full_signature": " ServiceDescription getServiceDescription()", "class_method_signature": "ServiceDescriptionFactory.getServiceDescription()", "testcase": false, "constructor": false, "invocations": ["newXPath", "evaluate", "getMandatoryElementText", "getCanonicalName", "getServiceProperties", "author", "getMandatoryElementText", "classname", "description", "getOptionalElementText", "getOptionalElementText", "getToolDescriptionElement", "getOptionalElementText", "equals", "getInstance", "update", "getBytes", "update", "getBytes", "getIdentifier", "toString", "update", "getBytes", "digest", "toString", "identifier", "version", "tool", "instructions", "getOptionalElementText", "furtherInfo", "getOptionalURIElement", "logo", "getOptionalURIElement", "serviceProvider", "getAllMigrationPaths", "paths", "toPlanetsPaths", "inputFormats", "toArray", "getInputFormatURIs", "parameters", "getUniqueParameters", "properties", "build", "format", "getNodeName", "format", "getNodeName"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}