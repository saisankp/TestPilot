{"test_class": {"identifier": "DoubleBondAcceptingAromaticityDetectorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/aromaticity/DoubleBondAcceptingAromaticityDetectorTest.java"}, "test_case": {"identifier": "testThiazole", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testThiazole() throws Exception {\n        IAtomContainer molecule = TestMoleculeFactory.makeThiazole();\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        Assert.assertTrue(\"Molecule is not detected as aromatic\",\n                DoubleBondAcceptingAromaticityDetector.detectAromaticity(molecule));\n\n        for (int f = 0; f < molecule.getAtomCount(); f++) {\n            Assert.assertTrue(\"Atom \" + f + \" is not correctly marked\",\n                    molecule.getAtom(f).getFlag(CDKConstants.ISAROMATIC));\n        }\n    }", "signature": "void testThiazole()", "full_signature": "@Test public void testThiazole()", "class_method_signature": "DoubleBondAcceptingAromaticityDetectorTest.testThiazole()", "testcase": true, "constructor": false, "invocations": ["makeThiazole", "percieveAtomTypesAndConfigureAtoms", "assertTrue", "detectAromaticity", "getAtomCount", "assertTrue", "getFlag", "getAtom"]}, "focal_class": {"identifier": "DoubleBondAcceptingAromaticityDetector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static AtomTypeFactory factory = null;", "modifier": "private static", "type": "AtomTypeFactory", "declarator": "factory = null", "var_name": "factory"}], "methods": [{"identifier": "detectAromaticity", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public static", "return": "boolean", "signature": "boolean detectAromaticity(IAtomContainer atomContainer)", "full_signature": "public static boolean detectAromaticity(IAtomContainer atomContainer)", "class_method_signature": "DoubleBondAcceptingAromaticityDetector.detectAromaticity(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "isHueckelValid", "parameters": "(IAtomContainer singleRing)", "modifiers": "private static", "return": "boolean", "signature": "boolean isHueckelValid(IAtomContainer singleRing)", "full_signature": "private static boolean isHueckelValid(IAtomContainer singleRing)", "class_method_signature": "DoubleBondAcceptingAromaticityDetector.isHueckelValid(IAtomContainer singleRing)", "testcase": false, "constructor": false}, {"identifier": "atomIsPotentiallyAromatic", "parameters": "(IAtom atom)", "modifiers": "private static", "return": "boolean", "signature": "boolean atomIsPotentiallyAromatic(IAtom atom)", "full_signature": "private static boolean atomIsPotentiallyAromatic(IAtom atom)", "class_method_signature": "DoubleBondAcceptingAromaticityDetector.atomIsPotentiallyAromatic(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getLonePairCount", "parameters": "(IAtom atom)", "modifiers": "private static", "return": "int", "signature": "int getLonePairCount(IAtom atom)", "full_signature": "private static int getLonePairCount(IAtom atom)", "class_method_signature": "DoubleBondAcceptingAromaticityDetector.getLonePairCount(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "markRingAtomsAndBondsAromatic", "parameters": "(IAtomContainer container)", "modifiers": "private static", "return": "void", "signature": "void markRingAtomsAndBondsAromatic(IAtomContainer container)", "full_signature": "private static void markRingAtomsAndBondsAromatic(IAtomContainer container)", "class_method_signature": "DoubleBondAcceptingAromaticityDetector.markRingAtomsAndBondsAromatic(IAtomContainer container)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/aromaticity/DoubleBondAcceptingAromaticityDetector.java"}, "focal_method": {"identifier": "detectAromaticity", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public static", "return": "boolean", "body": "public static boolean detectAromaticity(IAtomContainer atomContainer) throws CDKException {\n        SpanningTree spanningTree = new SpanningTree(atomContainer);\n        IAtomContainer ringSystems = spanningTree.getCyclicFragmentsContainer();\n        if (ringSystems.getAtomCount() == 0) {\n            // If there are no rings, then there cannot be any aromaticity\n            return false;\n        }\n        // disregard all atoms we know that cannot be aromatic anyway\n        for (IAtom atom : ringSystems.atoms())\n            if (!atomIsPotentiallyAromatic(atom)) ringSystems.removeAtom(atom);\n\n        // FIXME: should not really mark them here\n        Iterator<IAtom> atoms = ringSystems.atoms().iterator();\n        while (atoms.hasNext())\n            atoms.next().setFlag(CDKConstants.ISINRING, true);\n        Iterator<IBond> bonds = ringSystems.bonds().iterator();\n        while (bonds.hasNext())\n            bonds.next().setFlag(CDKConstants.ISINRING, true);\n\n        boolean foundSomeAromaticity = false;\n        Iterator<IAtomContainer> isolatedRingSystems = ConnectivityChecker.partitionIntoMolecules(ringSystems)\n                .atomContainers().iterator();\n        while (isolatedRingSystems.hasNext()) {\n            IAtomContainer isolatedSystem = isolatedRingSystems.next();\n            IRingSet singleRings = Cycles.sssr(isolatedSystem).toRingSet();\n            Iterator<IAtomContainer> singleRingsIterator = singleRings.atomContainers().iterator();\n            int maxRingSize = 20;\n            boolean allRingsAreAromatic = true;\n            // test single rings in SSSR\n            while (singleRingsIterator.hasNext()) {\n                IAtomContainer singleRing = singleRingsIterator.next();\n                if (singleRing.getAtomCount() > maxRingSize) maxRingSize = singleRing.getAtomCount();\n                // possibly aromatic\n                boolean ringIsAromatic = isHueckelValid(singleRing);\n                foundSomeAromaticity |= ringIsAromatic;\n                allRingsAreAromatic &= ringIsAromatic;\n                if (ringIsAromatic) markRingAtomsAndBondsAromatic(singleRing);\n            }\n            // OK, what about the one larger ring (if no aromaticity found in SSSR)?\n            if (!allRingsAreAromatic && singleRings.getAtomContainerCount() <= 3) {\n                // every ring system consisting of more than two rings is too difficult\n                Iterator<IAtomContainer> allRingsIterator = new AllRingsFinder()\n                        .findAllRingsInIsolatedRingSystem(isolatedSystem).atomContainers().iterator();\n                while (allRingsIterator.hasNext()) {\n                    // there should be exactly three rings, of which only one has a size larger\n                    // than the two previous ones\n                    IAtomContainer ring = allRingsIterator.next();\n                    if (ring.getAtomCount() <= maxRingSize) {\n                        // possibly aromatic\n                        boolean ringIsAromatic = isHueckelValid(ring);\n                        foundSomeAromaticity |= ringIsAromatic;\n                        if (ringIsAromatic) markRingAtomsAndBondsAromatic(ring);\n                    }\n                }\n            }\n        }\n\n        return foundSomeAromaticity;\n    }", "signature": "boolean detectAromaticity(IAtomContainer atomContainer)", "full_signature": "public static boolean detectAromaticity(IAtomContainer atomContainer)", "class_method_signature": "DoubleBondAcceptingAromaticityDetector.detectAromaticity(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["getCyclicFragmentsContainer", "getAtomCount", "atoms", "atomIsPotentiallyAromatic", "removeAtom", "iterator", "atoms", "hasNext", "setFlag", "next", "iterator", "bonds", "hasNext", "setFlag", "next", "iterator", "atomContainers", "partitionIntoMolecules", "hasNext", "next", "toRingSet", "sssr", "iterator", "atomContainers", "hasNext", "next", "getAtomCount", "getAtomCount", "isHueckelValid", "markRingAtomsAndBondsAromatic", "getAtomContainerCount", "iterator", "atomContainers", "findAllRingsInIsolatedRingSystem", "hasNext", "next", "getAtomCount", "isHueckelValid", "markRingAtomsAndBondsAromatic"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}