{"test_class": {"identifier": "TestRelayPullThread", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = Logger.getLogger(\"TestRelayPullThread\");", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(\"TestRelayPullThread\")", "var_name": "LOG"}, {"original_string": "public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse(\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"LiarJobRelay\\\",\\\"namespace\\\":\\\"com.linkedin.events.liar.jobrelay\\\",\\\"fields\\\":[{\\\"name\\\":\\\"txn\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=TXN;dbFieldPosition=0;\\\"},{\\\"name\\\":\\\"key\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=KEY;dbFieldPosition=1;\\\"},{\\\"name\\\":\\\"eventId\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=EVENT_ID;dbFieldPosition=2;\\\"},{\\\"name\\\":\\\"isDelete\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=IS_DELETE;dbFieldPosition=3;\\\"},{\\\"name\\\":\\\"state\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=STATE;dbFieldPosition=4;\\\"}],\\\"meta\\\":\\\"dbFieldName=SY$LIAR_JOB_RELAY_1;\\\"}\");", "modifier": "public static final", "type": "org.apache.avro.Schema", "declarator": "SCHEMA$ = org.apache.avro.Schema.parse(\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"LiarJobRelay\\\",\\\"namespace\\\":\\\"com.linkedin.events.liar.jobrelay\\\",\\\"fields\\\":[{\\\"name\\\":\\\"txn\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=TXN;dbFieldPosition=0;\\\"},{\\\"name\\\":\\\"key\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=KEY;dbFieldPosition=1;\\\"},{\\\"name\\\":\\\"eventId\\\",\\\"type\\\":[\\\"int\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=EVENT_ID;dbFieldPosition=2;\\\"},{\\\"name\\\":\\\"isDelete\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=IS_DELETE;dbFieldPosition=3;\\\"},{\\\"name\\\":\\\"state\\\",\\\"type\\\":[\\\"string\\\",\\\"null\\\"],\\\"meta\\\":\\\"dbFieldName=STATE;dbFieldPosition=4;\\\"}],\\\"meta\\\":\\\"dbFieldName=SY$LIAR_JOB_RELAY_1;\\\"}\")", "var_name": "SCHEMA"}, {"original_string": "public static final String _HOSTNAME = \"localhost\";", "modifier": "public static final", "type": "String", "declarator": "_HOSTNAME = \"localhost\"", "var_name": "_HOSTNAME"}, {"original_string": "public static final String _SVCNAME = \"UnitTestService\";", "modifier": "public static final", "type": "String", "declarator": "_SVCNAME = \"UnitTestService\"", "var_name": "_SVCNAME"}], "file": "databus-client/databus-client-http/src/test/java/com/linkedin/databus/client/TestRelayPullThread.java"}, "test_case": {"identifier": "testRelayTransition", "parameters": "()", "modifiers": "@Test(groups={\"small\", \"functional\"}) public", "return": "void", "body": "@Test(groups={\"small\", \"functional\"})\n  public void testRelayTransition() throws Exception\n  {\n    final Logger log = Logger.getLogger(\"TestRelayPullThread.testRelayTransition\");\n    log.info(\"---------- start ---------------\");\n    // Test Case : Initial State Check\n    {\n      RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n      //RelayPullThread relayPuller = createRelayPullThread(false, false);\n      RelayPullThread relayPuller = bldr.createRelayPullThread();\n      Assert.assertEquals(relayPuller.getConnectionState().getStateId(), StateId.INITIAL, \"Initial State Check\");\n\n      //Let the show begin\n      Thread relayPullerThread = new Thread(relayPuller);\n      relayPullerThread.setDaemon(false);\n      relayPullerThread.start();\n\n      relayPuller.enqueueMessage(LifecycleMessage.createStartMessage());\n\n      try\n      {\n        Thread.sleep(500);\n      } catch (InterruptedException ie){}\n\n      for (int i = 0 ; i < 100; i++ )\n      {\n        try\n        {\n          Thread.sleep(5);\n          Assert.assertTrue(relayPuller.getConnectionState().getStateId() != StateId.INITIAL,\"StateId can never be INITIAL once started\");\n        } catch (InterruptedException ie){}\n      }\n      //EasyMock.verify(mockConnFactory);\n\n      relayPuller.enqueueMessage(LifecycleMessage.createShutdownMessage());\n      relayPuller.awaitShutdown();\n    }\n\n\n    // Main Transition Test (Without Server-Set Change)\n    {\n      // PICK_SERVER - Happy Path\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n      }\n\n      // PICK_SERVER  - Relays exhausted\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(true, false);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.PICK_SERVER, \"SUSPEND_ON_ERROR\");\n      }\n\n\n      // PICK_SERVER  - No Servers\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        relayPuller.getServers().clear();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.PICK_SERVER, \"SUSPEND_ON_ERROR\");\n      }\n\n\n      // Request_Sources to Re Sources_Request_Sent\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, true);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_REQUEST_SENT, \"\");\n      }\n\n\n      // Request_Sources to Sources_Response_Success\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n      }\n\n      // Sources_Response_Success - Happy Path\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, true);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_REQUEST_SENT, \"\");\n        List<IdNamePair> sourcesResponse = new ArrayList<IdNamePair>();\n        sourcesResponse.add(new IdNamePair(1L, \"source1\"));\n        connState.switchToSourcesSuccess(sourcesResponse, _HOSTNAME, _SVCNAME);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        validateConnState(connState);\n        String expSubsListStr = \"[{\\\"physicalSource\\\":{\\\"uri\\\":\\\"databus:physical-source:ANY\\\",\\\"role\\\":\\\"ANY\\\"},\\\"physicalPartition\\\":{\\\"id\\\":-1,\\\"name\\\":\\\"*\\\"},\\\"logicalPartition\\\":{\\\"source\\\":{\\\"id\\\":1,\\\"name\\\":\\\"source1\\\"},\\\"id\\\":-1}}]\";\n        String expSourcesIdListStr = \"1\";\n        Assert.assertEquals(connState.getSourcesIdListString(), expSourcesIdListStr,\n                            \"SourcesId Added\");\n        String subsListStr = connState.getSubsListString();\n        Assert.assertEquals(subsListStr, expSubsListStr);\n      }\n\n      // Sources_Response_Success - When source not found in server\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, true);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_REQUEST_SENT, \"\");\n        List<IdNamePair> sourcesResponse = new ArrayList<IdNamePair>();\n        sourcesResponse.add(new IdNamePair(1L, \"source1\"));\n        connState.switchToSourcesSuccess(sourcesResponse, _HOSTNAME, _SVCNAME);\n        relayPuller.getMessageQueue().clear();\n        connState.getSourcesNameMap().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.PICK_SERVER);\n              validateConnState(connState);\n      }\n\n      // Request_Register to Register_Request_Sent\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, true);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_REQUEST_SENT, \"\");\n        List<IdNamePair> sourcesResponse = new ArrayList<IdNamePair>();\n        sourcesResponse.add(new IdNamePair(1L, \"source1\"));\n        connState.switchToSourcesSuccess(sourcesResponse, _HOSTNAME, _SVCNAME);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        String subsListString = \"[{\\\"physicalSource\\\":{\\\"uri\\\":\\\"databus:physical-source:ANY\\\",\\\"role\\\":\\\"MASTER\\\"},\\\"physicalPartition\\\":{\\\"id\\\":-1,\\\"name\\\":\\\"*\\\"},\\\"logicalPartition\\\":{\\\"source\\\":{\\\"id\\\":0,\\\"name\\\":\\\"source1\\\"},\\\"id\\\":-1}}]\";\n        String sourcesIdListString = \"1\";\n        connState.switchToRequestSourcesSchemas(sourcesIdListString, subsListString);\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_REQUEST_SENT,\"\");\n        validateConnState(connState);\n      }\n\n      // Request_Register to Register_Response_success\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n      }\n\n      // Register_Response_Success : Error Case\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        connState.getSourcesSchemas().clear();\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.PICK_SERVER);\n      }\n\n      // Register_Response_Success to Request Stream\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        Assert.assertEquals(relayPuller.getConnectionState().isSCNRegress(), false, \"SCN Regress check\");\n      }\n\n      // Register_Response_Success to Request Stream, when partially consumed window\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        Checkpoint cp = new Checkpoint();\n        cp.setConsumptionMode(DbusClientMode.ONLINE_CONSUMPTION);\n        cp.setWindowScn(100L);\n        cp.setWindowOffset(20);\n        cp.setPrevScn(80L);\n        relayPuller.getConnectionState().setCheckpoint(cp);\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        Assert.assertEquals(relayPuller.getConnectionState().getCheckpoint().getWindowScn(), 80L, \"WindowSCN check\");\n        Assert.assertEquals(relayPuller.getConnectionState().getCheckpoint().getWindowOffset(), new Long(-1), \"WindowOffset check\");\n        Assert.assertEquals(relayPuller.getConnectionState().isSCNRegress(), true, \"SCN Regress check\");\n      }\n\n      // Register_Response_Success, No PrevSCN for partially consumed window\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        Checkpoint cp = new Checkpoint();\n        cp.setConsumptionMode(DbusClientMode.ONLINE_CONSUMPTION);\n        cp.setWindowScn(100L);\n        cp.setWindowOffset(20);\n        relayPuller.getConnectionState().setCheckpoint(cp);\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS,StateId.REGISTER_RESPONSE_SUCCESS, \"SUSPEND_ON_ERROR\");\n      }\n\n      // Register_Response_Success to Bootstrap ( when checkpoint is Bootstrap_SnapShot\n      {\n        //RelayPullThread relayPuller = createRelayPullThread(false, false, true);\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(true);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), false, \"Is Relay FellOff\");\n\n        Checkpoint cp = new Checkpoint();\n        cp.setConsumptionMode(DbusClientMode.BOOTSTRAP_SNAPSHOT);\n        connState.setCheckpoint(cp);\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.BOOTSTRAP);\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), true, \"Is Relay FellOff\");\n        Assert.assertEquals(relayPuller.getConnectionState().isSCNRegress(), false, \"SCN Regress check\");\n      }\n\n      // Register_Response_Success to Bootstrap ( when checkpoint is Bootstrap_Catchup\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(true);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), false, \"Is Relay FellOff\");\n\n        Checkpoint cp = new Checkpoint();\n        cp.setConsumptionMode(DbusClientMode.BOOTSTRAP_CATCHUP);\n        connState.setCheckpoint(cp);\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.BOOTSTRAP);\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), true, \"Is Relay FellOff\");\n        Assert.assertEquals(relayPuller.getConnectionState().isSCNRegress(), false, \"SCN Regress check\");\n      }\n\n\n      // Request_Stream to Request_Stream_Sent\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, true);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_REQUEST_SENT, \"\");\n        List<IdNamePair> sourcesResponse = new ArrayList<IdNamePair>();\n        sourcesResponse.add(new IdNamePair(1L, \"source1\"));\n        connState.switchToSourcesSuccess(sourcesResponse, _HOSTNAME, _SVCNAME);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        String subsListString = \"[{\\\"physicalSource\\\":{\\\"uri\\\":\\\"databus:physical-source:ANY\\\",\\\"role\\\":\\\"MASTER\\\"},\\\"physicalPartition\\\":{\\\"id\\\":-1,\\\"name\\\":\\\"*\\\"},\\\"logicalPartition\\\":{\\\"source\\\":{\\\"id\\\":0,\\\"name\\\":\\\"source1\\\"},\\\"id\\\":-1}}]\";\n        String sourcesIdListString = \"1\";\n        connState.switchToRequestSourcesSchemas(sourcesIdListString, subsListString);\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_REQUEST_SENT,\"\");\n        relayPuller.getMessageQueue().clear();\n        MockRelayConnection conn = (MockRelayConnection)connState.getRelayConnection();\n        connState.switchToRegisterSuccess(conn.getRegisterResponse(), conn.getRegisterResponse(), conn.getRegisterMetadataResponse());\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SENT, \"\");\n              validateConnState(connState);\n      }\n\n      // Request_Stream to Stream_Response_Success\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n      }\n\n\n      //Stream_Request_Success to Stream_Request_Done\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.STREAM_RESPONSE_DONE);\n      }\n\n\n      //Stream_Request_Success : ScnNotFoundException but retries set to 5 and  bootstrap enabled\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(true).setReadLatestScnEnabled(false).setReadDataThrowException(false)\n        .setReadDataException(true).setExceptionName(ScnNotFoundException.class.getName()).setNumRetriesOnFellOff(5);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n\n        for ( int i = 1; i <= 6 ; i++)\n        {\n          System.out.println(\"Iteration :\" + i);\n          testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n          relayPuller.getMessageQueue().clear();\n          if ( i < 6 )\n          {\n            testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.PICK_SERVER);\n            Assert.assertEquals(relayPuller.getRetryonFallOff().getRemainingRetriesNum(), 6-i ,\"Retry State\");\n          } else {\n            testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.BOOTSTRAP);\n            Assert.assertEquals(relayPuller.getRetryonFallOff().getRemainingRetriesNum(), 5 ,\"Retry State\"); //reset\n          }\n          relayPuller.getMessageQueue().clear();\n        }\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), true, \"RelayFellOff State\");\n      }\n\n      //Stream_Request_Success : ScnNotFoundException and  bootstrap enabled\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(true).setReadLatestScnEnabled(false).setReadDataThrowException(false)\n        .setReadDataException(true).setExceptionName(ScnNotFoundException.class.getName());\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.BOOTSTRAP);\n      }\n\n      //Stream_Request_Success : ScnNotFoundException but retries set to 5, bootstrap disabled and readLatestScnOnFallOff enabled.\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(false).setReadLatestScnEnabled(true).setReadDataThrowException(false)\n        .setReadDataException(true).setExceptionName(ScnNotFoundException.class.getName()).setNumRetriesOnFellOff(5);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        for (int i=1; i<=6;i++)\n        {\n          testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n          relayPuller.getMessageQueue().clear();\n          if ( i < 6 )\n          {\n            testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.PICK_SERVER);\n            Assert.assertEquals(relayPuller.getRetryonFallOff().getRemainingRetriesNum(), 6-i ,\"Retry State\");\n          } else {\n            testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.STREAM_RESPONSE_DONE);\n            Assert.assertEquals(relayPuller.getRetryonFallOff().getRemainingRetriesNum(), 5 ,\"Retry State\"); //reset\n          }\n          relayPuller.getMessageQueue().clear();\n        }\n        MockRelayConnection conn = (MockRelayConnection)connState.getRelayConnection();\n        Assert.assertEquals(conn.isReadFromLatestScn(),true, \"ReadFromLatestScn set\");\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), false, \"RelayFellOff State\");\n\n      }\n\n      //Stream_Request_Success : ScnNotFoundException, bootstrap disabled and readLatestScnOnFallOff enabled.\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(false).setReadLatestScnEnabled(true).setReadDataThrowException(false)\n        .setReadDataException(true).setExceptionName(ScnNotFoundException.class.getName());\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.STREAM_RESPONSE_DONE);\n        MockRelayConnection conn = (MockRelayConnection)connState.getRelayConnection();\n        Assert.assertEquals(conn.isReadFromLatestScn(),true, \"ReadFromLatestScn set\");\n      }\n\n      //Stream_Request_Success : ScnNotFoundException but retries set to 5, bootstrap disabled and readLatestScnOnFallOff disabled.\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(false).setReadLatestScnEnabled(false).setReadDataThrowException(false)\n        .setReadDataException(true).setExceptionName(ScnNotFoundException.class.getName()).setNumRetriesOnFellOff(5);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        for (int i = 1; i <= 6; i++)\n        {\n          testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n          relayPuller.getMessageQueue().clear();\n          testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n          relayPuller.getMessageQueue().clear();\n          if ( i < 6 )\n          {\n            testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.PICK_SERVER);\n            Assert.assertEquals(relayPuller.getRetryonFallOff().getRemainingRetriesNum(), 6-i ,\"Retry State\");\n          } else {\n            testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.STREAM_REQUEST_SUCCESS, \"SUSPEND_ON_ERROR\");\n            Assert.assertEquals(relayPuller.getRetryonFallOff().getRemainingRetriesNum(), 5 ,\"Retry State\"); //reset\n          }\n          relayPuller.getMessageQueue().clear();\n        }\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), true, \"RelayFellOff State\");\n\n      }\n\n\n      //Stream_Request_Success : ScnNotFoundException, bootstrap disabled and readLatestScnOnFallOff disabled.\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(false).setReadLatestScnEnabled(false).setReadDataThrowException(false)\n        .setReadDataException(true).setExceptionName(ScnNotFoundException.class.getName());\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.STREAM_REQUEST_SUCCESS, \"SUSPEND_ON_ERROR\");\n      }\n\n      //Stream_Request_Success : Non-ScnNotFoundException\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(true).setReadLatestScnEnabled(false).setReadDataThrowException(false)\n        .setReadDataException(true).setExceptionName(\"DummyError\");\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.STREAM_RESPONSE_ERROR);\n      }\n\n      //Stream_Request_Done to Request_Stream\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.STREAM_RESPONSE_DONE);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.STREAM_RESPONSE_DONE,StateId.REQUEST_STREAM);\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), false, \"Is Relay FellOff\");\n      }\n\n      // Bootstrap to Bootstrap_Requested\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(true).setReadLatestScnEnabled(false).setReadDataThrowException(false)\n        .setReadDataException(true).setExceptionName(ScnNotFoundException.class.getName());\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.BOOTSTRAP);\n        relayPuller.getMessageQueue().clear();\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), true, \"Is Relay FellOff\");\n        testTransitionCase(relayPuller, StateId.BOOTSTRAP,StateId.BOOTSTRAP_REQUESTED,\"\");\n      }\n\n      //Exception while doBootstrap()\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(true).setReadLatestScnEnabled(false).setReadDataThrowException(true)\n        .setReadDataException(true).setExceptionName(ScnNotFoundException.class.getName());\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), false, \"Is Relay FellOff\");\n        testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.BOOTSTRAP);\n        relayPuller.getMessageQueue().clear();\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), true, \"Is Relay FellOff\");\n        testTransitionCase(relayPuller, StateId.BOOTSTRAP,StateId.BOOTSTRAP, \"SUSPEND_ON_ERROR\");\n      }\n\n      // Bootstrap Failed : Case 1\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(true).setReadLatestScnEnabled(false).setReadDataThrowException(false)\n        .setReadDataException(true).setExceptionName(ScnNotFoundException.class.getName());\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.BOOTSTRAP);\n        relayPuller.getMessageQueue().clear();\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), true, \"Is Relay FellOff\");\n        testTransitionCase(relayPuller, StateId.BOOTSTRAP,StateId.BOOTSTRAP_REQUESTED,\"\");\n        BootstrapResultMessage msg = BootstrapResultMessage.createBootstrapFailedMessage(new Exception(\"Dummy\"));\n        doExecuteAndChangeState(relayPuller,msg);\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), true, \"Is Relay FellOff\");\n        Assert.assertEquals(connState.getStateId(),StateId.BOOTSTRAP, \"BOOTSTRAP_REQUESTED to BOOTSTRAP\");\n        Assert.assertEquals(relayPuller.getQueueListString(), \"RelayPuller queue: [BOOTSTRAP]\", \"Queue :BOOTSTRAP_REQUESTED to BOOTSTRAP\");\n      }\n\n      // Bootstrap Failed : Case 2\n      {\n        //RelayPullThread relayPuller = createRelayPullThread(false, false, true, false, false, true, ScnNotFoundException.class.getName());\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(true).setReadLatestScnEnabled(false).setReadDataThrowException(false)\n        .setReadDataException(true).setExceptionName(ScnNotFoundException.class.getName());\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.BOOTSTRAP);\n        relayPuller.getMessageQueue().clear();\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), true, \"Is Relay FellOff\");\n        testTransitionCase(relayPuller, StateId.BOOTSTRAP,StateId.BOOTSTRAP_REQUESTED,\"\");\n        BootstrapResultMessage msg = BootstrapResultMessage.createBootstrapCompleteMessage(null);\n        doExecuteAndChangeState(relayPuller,msg);\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), true, \"Is Relay FellOff\");\n        Assert.assertEquals(connState.getStateId(),StateId.BOOTSTRAP, \"BOOTSTRAP_REQUESTED to BOOTSTRAP\");\n        Assert.assertEquals(relayPuller.getQueueListString(), \"RelayPuller queue: [BOOTSTRAP]\", \"Queue :BOOTSTRAP_REQUESTED to BOOTSTRAP\");\n      }\n\n      // Bootstrap Success\n      {\n        //RelayPullThread relayPuller = createRelayPullThread(false, false, true, false, false, true, ScnNotFoundException.class.getName());\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(true).setReadLatestScnEnabled(false).setReadDataThrowException(false)\n        .setReadDataException(true).setExceptionName(ScnNotFoundException.class.getName());\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_SOURCES, StateId.SOURCES_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_SUCCESS, StateId.REQUEST_REGISTER);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_REGISTER, StateId.REGISTER_RESPONSE_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_SUCCESS, StateId.REQUEST_STREAM);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.REQUEST_STREAM, StateId.STREAM_REQUEST_SUCCESS);\n        relayPuller.getMessageQueue().clear();\n        testTransitionCase(relayPuller, StateId.STREAM_REQUEST_SUCCESS,StateId.BOOTSTRAP);\n        relayPuller.getMessageQueue().clear();\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), true, \"Is Relay FellOff\");\n        testTransitionCase(relayPuller, StateId.BOOTSTRAP,StateId.BOOTSTRAP_REQUESTED,\"\");\n        BootstrapResultMessage msg = BootstrapResultMessage.createBootstrapCompleteMessage(new Checkpoint());\n        doExecuteAndChangeState(relayPuller,msg);\n        Assert.assertEquals(relayPuller.getConnectionState().isRelayFellOff(), false, \"Is Relay FellOff\");\n        Assert.assertEquals(connState.getStateId(),StateId.REQUEST_STREAM, \"BOOTSTRAP_REQUESTED to REQUEST_STREAM\");\n        Assert.assertEquals(relayPuller.getQueueListString(), \"RelayPuller queue: [REQUEST_STREAM]\", \"Queue :BOOTSTRAP_REQUESTED to REQUEST_STREAM\");\n      }\n\n      // Error States to Pick_Server\n      {\n        RelayPullThreadBuilder bldr = new RelayPullThreadBuilder(false, false);\n        bldr.setBootstrapEnabled(true).setReadLatestScnEnabled(false).setReadDataThrowException(false)\n        .setReadDataException(true).setExceptionName(ScnNotFoundException.class.getName());\n        RelayPullThread relayPuller = bldr.createRelayPullThread();\n        relayPuller.getComponentStatus().start();\n        ConnectionState connState = relayPuller.getConnectionState();\n        connState.switchToPickServer();\n        testTransitionCase(relayPuller, StateId.PICK_SERVER, StateId.REQUEST_SOURCES);\n        relayPuller.getMessageQueue().clear();\n        connState.switchToSourcesRequestError();\n        testTransitionCase(relayPuller, StateId.SOURCES_REQUEST_ERROR, StateId.PICK_SERVER);\n        relayPuller.getMessageQueue().clear();\n        connState.switchToSourcesResponseError();\n        testTransitionCase(relayPuller, StateId.SOURCES_RESPONSE_ERROR, StateId.PICK_SERVER);\n        relayPuller.getMessageQueue().clear();\n        connState.switchToRegisterRequestError();\n        testTransitionCase(relayPuller, StateId.REGISTER_REQUEST_ERROR, StateId.PICK_SERVER);\n        relayPuller.getMessageQueue().clear();\n        connState.switchToRegisterResponseError();\n        testTransitionCase(relayPuller, StateId.REGISTER_RESPONSE_ERROR, StateId.PICK_SERVER);\n        relayPuller.getMessageQueue().clear();\n        connState.switchToStreamRequestError();\n        testTransitionCase(relayPuller, StateId.STREAM_REQUEST_ERROR, StateId.PICK_SERVER);\n        relayPuller.getMessageQueue().clear();\n        connState.switchToStreamResponseError();\n        testTransitionCase(relayPuller, StateId.STREAM_RESPONSE_ERROR, StateId.PICK_SERVER);\n      }\n    }\n    log.info(\"--------- end -------------\");\n  }", "signature": "void testRelayTransition()", "full_signature": "@Test(groups={\"small\", \"functional\"}) public void testRelayTransition()", "class_method_signature": "TestRelayPullThread.testRelayTransition()", "testcase": true, "constructor": false, "invocations": ["getLogger", "info", "createRelayPullThread", "assertEquals", "getStateId", "getConnectionState", "setDaemon", "start", "enqueueMessage", "createStartMessage", "sleep", "sleep", "assertTrue", "getStateId", "getConnectionState", "enqueueMessage", "createShutdownMessage", "awaitShutdown", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "createRelayPullThread", "start", "getComponentStatus", "clear", "getServers", "getConnectionState", "switchToPickServer", "testTransitionCase", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "add", "switchToSourcesSuccess", "clear", "getMessageQueue", "testTransitionCase", "validateConnState", "assertEquals", "getSourcesIdListString", "getSubsListString", "assertEquals", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "add", "switchToSourcesSuccess", "clear", "getMessageQueue", "clear", "getSourcesNameMap", "testTransitionCase", "validateConnState", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "add", "switchToSourcesSuccess", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "switchToRequestSourcesSchemas", "testTransitionCase", "validateConnState", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getSourcesSchemas", "clear", "getMessageQueue", "testTransitionCase", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "assertEquals", "isSCNRegress", "getConnectionState", "createRelayPullThread", "setConsumptionMode", "setWindowScn", "setWindowOffset", "setPrevScn", "setCheckpoint", "getConnectionState", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "assertEquals", "getWindowScn", "getCheckpoint", "getConnectionState", "assertEquals", "getWindowOffset", "getCheckpoint", "getConnectionState", "assertEquals", "isSCNRegress", "getConnectionState", "createRelayPullThread", "setConsumptionMode", "setWindowScn", "setWindowOffset", "setCheckpoint", "getConnectionState", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "setBootstrapEnabled", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "assertEquals", "isRelayFellOff", "getConnectionState", "setConsumptionMode", "setCheckpoint", "testTransitionCase", "assertEquals", "isRelayFellOff", "getConnectionState", "assertEquals", "isSCNRegress", "getConnectionState", "setBootstrapEnabled", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "assertEquals", "isRelayFellOff", "getConnectionState", "setConsumptionMode", "setCheckpoint", "testTransitionCase", "assertEquals", "isRelayFellOff", "getConnectionState", "assertEquals", "isSCNRegress", "getConnectionState", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "add", "switchToSourcesSuccess", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "switchToRequestSourcesSchemas", "testTransitionCase", "clear", "getMessageQueue", "getRelayConnection", "switchToRegisterSuccess", "getRegisterResponse", "getRegisterResponse", "getRegisterMetadataResponse", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "validateConnState", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "setNumRetriesOnFellOff", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "getName", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "println", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "assertEquals", "getRemainingRetriesNum", "getRetryonFallOff", "testTransitionCase", "assertEquals", "getRemainingRetriesNum", "getRetryonFallOff", "clear", "getMessageQueue", "assertEquals", "isRelayFellOff", "getConnectionState", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "getName", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "setNumRetriesOnFellOff", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "getName", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "assertEquals", "getRemainingRetriesNum", "getRetryonFallOff", "testTransitionCase", "assertEquals", "getRemainingRetriesNum", "getRetryonFallOff", "clear", "getMessageQueue", "getRelayConnection", "assertEquals", "isReadFromLatestScn", "assertEquals", "isRelayFellOff", "getConnectionState", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "getName", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "getRelayConnection", "assertEquals", "isReadFromLatestScn", "setNumRetriesOnFellOff", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "getName", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "assertEquals", "getRemainingRetriesNum", "getRetryonFallOff", "testTransitionCase", "assertEquals", "getRemainingRetriesNum", "getRetryonFallOff", "clear", "getMessageQueue", "assertEquals", "isRelayFellOff", "getConnectionState", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "getName", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "assertEquals", "isRelayFellOff", "getConnectionState", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "getName", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "assertEquals", "isRelayFellOff", "getConnectionState", "testTransitionCase", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "getName", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "assertEquals", "isRelayFellOff", "getConnectionState", "testTransitionCase", "clear", "getMessageQueue", "assertEquals", "isRelayFellOff", "getConnectionState", "testTransitionCase", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "getName", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "assertEquals", "isRelayFellOff", "getConnectionState", "testTransitionCase", "createBootstrapFailedMessage", "doExecuteAndChangeState", "assertEquals", "isRelayFellOff", "getConnectionState", "assertEquals", "getStateId", "assertEquals", "getQueueListString", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "getName", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "assertEquals", "isRelayFellOff", "getConnectionState", "testTransitionCase", "createBootstrapCompleteMessage", "doExecuteAndChangeState", "assertEquals", "isRelayFellOff", "getConnectionState", "assertEquals", "getStateId", "assertEquals", "getQueueListString", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "getName", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "testTransitionCase", "clear", "getMessageQueue", "assertEquals", "isRelayFellOff", "getConnectionState", "testTransitionCase", "createBootstrapCompleteMessage", "doExecuteAndChangeState", "assertEquals", "isRelayFellOff", "getConnectionState", "assertEquals", "getStateId", "assertEquals", "getQueueListString", "setExceptionName", "setReadDataException", "setReadDataThrowException", "setReadLatestScnEnabled", "setBootstrapEnabled", "getName", "createRelayPullThread", "start", "getComponentStatus", "getConnectionState", "switchToPickServer", "testTransitionCase", "clear", "getMessageQueue", "switchToSourcesRequestError", "testTransitionCase", "clear", "getMessageQueue", "switchToSourcesResponseError", "testTransitionCase", "clear", "getMessageQueue", "switchToRegisterRequestError", "testTransitionCase", "clear", "getMessageQueue", "switchToRegisterResponseError", "testTransitionCase", "clear", "getMessageQueue", "switchToStreamRequestError", "testTransitionCase", "clear", "getMessageQueue", "switchToStreamResponseError", "testTransitionCase", "info"]}, "focal_class": {"identifier": "RelayPullThread", "superclass": "extends BasePullThread", "interfaces": "", "fields": [{"original_string": "private final static int RELAY_CALLS_MERGE_FREQ = 10;", "modifier": "private final static", "type": "int", "declarator": "RELAY_CALLS_MERGE_FREQ = 10", "var_name": "RELAY_CALLS_MERGE_FREQ"}, {"original_string": "private static final ArrayList<RegisterResponseEntry> EMPTY_REGISTER_LIST =\n      new ArrayList<RegisterResponseEntry>();", "modifier": "private static final", "type": "ArrayList<RegisterResponseEntry>", "declarator": "EMPTY_REGISTER_LIST =\n      new ArrayList<RegisterResponseEntry>()", "var_name": "EMPTY_REGISTER_LIST"}, {"original_string": "private static final ArrayList<Integer> EMPTY_STREAM_LIST =\n      new ArrayList<Integer>();", "modifier": "private static final", "type": "ArrayList<Integer>", "declarator": "EMPTY_STREAM_LIST =\n      new ArrayList<Integer>()", "var_name": "EMPTY_STREAM_LIST"}, {"original_string": "private final boolean _isConsumeCurrent ;", "modifier": "private final", "type": "boolean", "declarator": "_isConsumeCurrent", "var_name": "_isConsumeCurrent"}, {"original_string": "private final HttpStatisticsCollector _relayCallsStats;", "modifier": "private final", "type": "HttpStatisticsCollector", "declarator": "_relayCallsStats", "var_name": "_relayCallsStats"}, {"original_string": "private DatabusRelayConnection _lastOpenConnection;", "modifier": "private", "type": "DatabusRelayConnection", "declarator": "_lastOpenConnection", "var_name": "_lastOpenConnection"}, {"original_string": "private DbusKeyCompositeFilter _relayFilter;", "modifier": "private", "type": "DbusKeyCompositeFilter", "declarator": "_relayFilter", "var_name": "_relayFilter"}, {"original_string": "private final List<DbusKeyCompositeFilterConfig> _relayFilterConfigs;", "modifier": "private final", "type": "List<DbusKeyCompositeFilterConfig>", "declarator": "_relayFilterConfigs", "var_name": "_relayFilterConfigs"}, {"original_string": "private int _unmergedHttpCallsStats = 0;", "modifier": "private", "type": "int", "declarator": "_unmergedHttpCallsStats = 0", "var_name": "_unmergedHttpCallsStats"}, {"original_string": "private long _streamCallStartMs = 0;", "modifier": "private", "type": "long", "declarator": "_streamCallStartMs = 0", "var_name": "_streamCallStartMs"}, {"original_string": "private long _noEventsConnectionResetTimeSec;", "modifier": "private", "type": "long", "declarator": "_noEventsConnectionResetTimeSec", "var_name": "_noEventsConnectionResetTimeSec"}, {"original_string": "private long _timeSinceEventsSec = System.currentTimeMillis();", "modifier": "private", "type": "long", "declarator": "_timeSinceEventsSec = System.currentTimeMillis()", "var_name": "_timeSinceEventsSec"}, {"original_string": "private final BackoffTimer _retriesOnFallOff;", "modifier": "private final", "type": "BackoffTimer", "declarator": "_retriesOnFallOff", "var_name": "_retriesOnFallOff"}, {"original_string": "final private RemoteExceptionHandler _remoteExceptionHandler;", "modifier": "final private", "type": "RemoteExceptionHandler", "declarator": "_remoteExceptionHandler", "var_name": "_remoteExceptionHandler"}, {"original_string": "private final boolean _isReadLatestScnOnErrorEnabled;", "modifier": "private final", "type": "boolean", "declarator": "_isReadLatestScnOnErrorEnabled", "var_name": "_isReadLatestScnOnErrorEnabled"}, {"original_string": "private final double _pullerBufferUtilizationPct ;", "modifier": "private final", "type": "double", "declarator": "_pullerBufferUtilizationPct", "var_name": "_pullerBufferUtilizationPct"}], "methods": [{"identifier": "RelayPullThread", "parameters": "(String name,\n                         DatabusSourcesConnection sourcesConn,\n                         DbusEventBuffer dbusEventBuffer,\n                         ConnectionStateFactory connStateFactory,\n                         Set<ServerInfo> relays,\n                         List<DbusKeyCompositeFilterConfig> relayFilterConfigs,\n                         boolean isConsumeCurrent,\n                         boolean isReadLatestScnOnErrorEnabled,\n                         double pullerBufferUtilPct,\n                         int noEventsConnectionResetTimeSec,\n                         MBeanServer mbeanServer,\n                         DbusEventFactory eventFactory,\n                         Logger log)", "modifiers": "public", "return": "", "signature": " RelayPullThread(String name,\n                         DatabusSourcesConnection sourcesConn,\n                         DbusEventBuffer dbusEventBuffer,\n                         ConnectionStateFactory connStateFactory,\n                         Set<ServerInfo> relays,\n                         List<DbusKeyCompositeFilterConfig> relayFilterConfigs,\n                         boolean isConsumeCurrent,\n                         boolean isReadLatestScnOnErrorEnabled,\n                         double pullerBufferUtilPct,\n                         int noEventsConnectionResetTimeSec,\n                         MBeanServer mbeanServer,\n                         DbusEventFactory eventFactory,\n                         Logger log)", "full_signature": "public  RelayPullThread(String name,\n                         DatabusSourcesConnection sourcesConn,\n                         DbusEventBuffer dbusEventBuffer,\n                         ConnectionStateFactory connStateFactory,\n                         Set<ServerInfo> relays,\n                         List<DbusKeyCompositeFilterConfig> relayFilterConfigs,\n                         boolean isConsumeCurrent,\n                         boolean isReadLatestScnOnErrorEnabled,\n                         double pullerBufferUtilPct,\n                         int noEventsConnectionResetTimeSec,\n                         MBeanServer mbeanServer,\n                         DbusEventFactory eventFactory,\n                         Logger log)", "class_method_signature": "RelayPullThread.RelayPullThread(String name,\n                         DatabusSourcesConnection sourcesConn,\n                         DbusEventBuffer dbusEventBuffer,\n                         ConnectionStateFactory connStateFactory,\n                         Set<ServerInfo> relays,\n                         List<DbusKeyCompositeFilterConfig> relayFilterConfigs,\n                         boolean isConsumeCurrent,\n                         boolean isReadLatestScnOnErrorEnabled,\n                         double pullerBufferUtilPct,\n                         int noEventsConnectionResetTimeSec,\n                         MBeanServer mbeanServer,\n                         DbusEventFactory eventFactory,\n                         Logger log)", "testcase": false, "constructor": true}, {"identifier": "onResume", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onResume()", "full_signature": "@Override protected void onResume()", "class_method_signature": "RelayPullThread.onResume()", "testcase": false, "constructor": false}, {"identifier": "onShutdown", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onShutdown()", "full_signature": "@Override protected void onShutdown()", "class_method_signature": "RelayPullThread.onShutdown()", "testcase": false, "constructor": false}, {"identifier": "doSuspendOnError", "parameters": "(LifecycleMessage lcMessage)", "modifiers": "@Override protected", "return": "void", "signature": "void doSuspendOnError(LifecycleMessage lcMessage)", "full_signature": "@Override protected void doSuspendOnError(LifecycleMessage lcMessage)", "class_method_signature": "RelayPullThread.doSuspendOnError(LifecycleMessage lcMessage)", "testcase": false, "constructor": false}, {"identifier": "shouldDelayTearConnection", "parameters": "(StateId stateId)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean shouldDelayTearConnection(StateId stateId)", "full_signature": "@Override protected boolean shouldDelayTearConnection(StateId stateId)", "class_method_signature": "RelayPullThread.shouldDelayTearConnection(StateId stateId)", "testcase": false, "constructor": false}, {"identifier": "executeAndChangeState", "parameters": "(Object message)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean executeAndChangeState(Object message)", "full_signature": "@Override protected boolean executeAndChangeState(Object message)", "class_method_signature": "RelayPullThread.executeAndChangeState(Object message)", "testcase": false, "constructor": false}, {"identifier": "doBootstrapFailed", "parameters": "(BootstrapResultMessage bootstrapResultMessage)", "modifiers": "private", "return": "void", "signature": "void doBootstrapFailed(BootstrapResultMessage bootstrapResultMessage)", "full_signature": "private void doBootstrapFailed(BootstrapResultMessage bootstrapResultMessage)", "class_method_signature": "RelayPullThread.doBootstrapFailed(BootstrapResultMessage bootstrapResultMessage)", "testcase": false, "constructor": false}, {"identifier": "doBootstrapComplete", "parameters": "(BootstrapResultMessage bootstrapResultMessage)", "modifiers": "private", "return": "void", "signature": "void doBootstrapComplete(BootstrapResultMessage bootstrapResultMessage)", "full_signature": "private void doBootstrapComplete(BootstrapResultMessage bootstrapResultMessage)", "class_method_signature": "RelayPullThread.doBootstrapComplete(BootstrapResultMessage bootstrapResultMessage)", "testcase": false, "constructor": false}, {"identifier": "doStart", "parameters": "(LifecycleMessage lcMessage)", "modifiers": "@Override protected", "return": "void", "signature": "void doStart(LifecycleMessage lcMessage)", "full_signature": "@Override protected void doStart(LifecycleMessage lcMessage)", "class_method_signature": "RelayPullThread.doStart(LifecycleMessage lcMessage)", "testcase": false, "constructor": false}, {"identifier": "doPickRelay", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doPickRelay(ConnectionState curState)", "full_signature": "protected void doPickRelay(ConnectionState curState)", "class_method_signature": "RelayPullThread.doPickRelay(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doRequestSources", "parameters": "(final ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doRequestSources(final ConnectionState curState)", "full_signature": "protected void doRequestSources(final ConnectionState curState)", "class_method_signature": "RelayPullThread.doRequestSources(final ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "buildSubsList", "parameters": "(List<DatabusSubscription> subs, Map<String, IdNamePair> sourceNameMap)", "modifiers": "private", "return": "String", "signature": "String buildSubsList(List<DatabusSubscription> subs, Map<String, IdNamePair> sourceNameMap)", "full_signature": "private String buildSubsList(List<DatabusSubscription> subs, Map<String, IdNamePair> sourceNameMap)", "class_method_signature": "RelayPullThread.buildSubsList(List<DatabusSubscription> subs, Map<String, IdNamePair> sourceNameMap)", "testcase": false, "constructor": false}, {"identifier": "doSourcesResponseSuccess", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doSourcesResponseSuccess(ConnectionState curState)", "full_signature": "protected void doSourcesResponseSuccess(ConnectionState curState)", "class_method_signature": "RelayPullThread.doSourcesResponseSuccess(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doRequestRegister", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doRequestRegister(ConnectionState curState)", "full_signature": "protected void doRequestRegister(ConnectionState curState)", "class_method_signature": "RelayPullThread.doRequestRegister(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doRegisterResponseSuccess", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doRegisterResponseSuccess(ConnectionState curState)", "full_signature": "protected void doRegisterResponseSuccess(ConnectionState curState)", "class_method_signature": "RelayPullThread.doRegisterResponseSuccess(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doRequestStream", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doRequestStream(ConnectionState curState)", "full_signature": "protected void doRequestStream(ConnectionState curState)", "class_method_signature": "RelayPullThread.doRequestStream(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doReadDataEvents", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doReadDataEvents(ConnectionState curState)", "full_signature": "protected void doReadDataEvents(ConnectionState curState)", "class_method_signature": "RelayPullThread.doReadDataEvents(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doStreamResponseDone", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doStreamResponseDone(ConnectionState curState)", "full_signature": "protected void doStreamResponseDone(ConnectionState curState)", "class_method_signature": "RelayPullThread.doStreamResponseDone(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "doBootstrap", "parameters": "(ConnectionState curState)", "modifiers": "protected", "return": "void", "signature": "void doBootstrap(ConnectionState curState)", "full_signature": "protected void doBootstrap(ConnectionState curState)", "class_method_signature": "RelayPullThread.doBootstrap(ConnectionState curState)", "testcase": false, "constructor": false}, {"identifier": "mergeRelayCallsStats", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void mergeRelayCallsStats()", "full_signature": "private void mergeRelayCallsStats()", "class_method_signature": "RelayPullThread.mergeRelayCallsStats()", "testcase": false, "constructor": false}, {"identifier": "processSourcesRequestError", "parameters": "(ConnectionState state)", "modifiers": "private", "return": "void", "signature": "void processSourcesRequestError(ConnectionState state)", "full_signature": "private void processSourcesRequestError(ConnectionState state)", "class_method_signature": "RelayPullThread.processSourcesRequestError(ConnectionState state)", "testcase": false, "constructor": false}, {"identifier": "processSourcesResponseError", "parameters": "(ConnectionState state)", "modifiers": "private", "return": "void", "signature": "void processSourcesResponseError(ConnectionState state)", "full_signature": "private void processSourcesResponseError(ConnectionState state)", "class_method_signature": "RelayPullThread.processSourcesResponseError(ConnectionState state)", "testcase": false, "constructor": false}, {"identifier": "processRegisterRequestError", "parameters": "(ConnectionState state)", "modifiers": "private", "return": "void", "signature": "void processRegisterRequestError(ConnectionState state)", "full_signature": "private void processRegisterRequestError(ConnectionState state)", "class_method_signature": "RelayPullThread.processRegisterRequestError(ConnectionState state)", "testcase": false, "constructor": false}, {"identifier": "processRegisterResponseError", "parameters": "(ConnectionState state)", "modifiers": "private", "return": "void", "signature": "void processRegisterResponseError(ConnectionState state)", "full_signature": "private void processRegisterResponseError(ConnectionState state)", "class_method_signature": "RelayPullThread.processRegisterResponseError(ConnectionState state)", "testcase": false, "constructor": false}, {"identifier": "processStreamRequestError", "parameters": "(ConnectionState state)", "modifiers": "private", "return": "void", "signature": "void processStreamRequestError(ConnectionState state)", "full_signature": "private void processStreamRequestError(ConnectionState state)", "class_method_signature": "RelayPullThread.processStreamRequestError(ConnectionState state)", "testcase": false, "constructor": false}, {"identifier": "processStreamResponseError", "parameters": "(ConnectionState state)", "modifiers": "private", "return": "void", "signature": "void processStreamResponseError(ConnectionState state)", "full_signature": "private void processStreamResponseError(ConnectionState state)", "class_method_signature": "RelayPullThread.processStreamResponseError(ConnectionState state)", "testcase": false, "constructor": false}, {"identifier": "resetConnection", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void resetConnection()", "full_signature": "@Override protected void resetConnection()", "class_method_signature": "RelayPullThread.resetConnection()", "testcase": false, "constructor": false}, {"identifier": "onRelayFellOff", "parameters": "(ConnectionState curState, Checkpoint cp, Throwable knownRemoteError)", "modifiers": "private", "return": "boolean", "signature": "boolean onRelayFellOff(ConnectionState curState, Checkpoint cp, Throwable knownRemoteError)", "full_signature": "private boolean onRelayFellOff(ConnectionState curState, Checkpoint cp, Throwable knownRemoteError)", "class_method_signature": "RelayPullThread.onRelayFellOff(ConnectionState curState, Checkpoint cp, Throwable knownRemoteError)", "testcase": false, "constructor": false}, {"identifier": "tearConnection", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void tearConnection()", "full_signature": "@Override protected void tearConnection()", "class_method_signature": "RelayPullThread.tearConnection()", "testcase": false, "constructor": false}, {"identifier": "setNoEventsConnectionResetTimeSec", "parameters": "(long noEventsConnectionResetTimeSec)", "modifiers": "public", "return": "void", "signature": "void setNoEventsConnectionResetTimeSec(long noEventsConnectionResetTimeSec)", "full_signature": "public void setNoEventsConnectionResetTimeSec(long noEventsConnectionResetTimeSec)", "class_method_signature": "RelayPullThread.setNoEventsConnectionResetTimeSec(long noEventsConnectionResetTimeSec)", "testcase": false, "constructor": false}, {"identifier": "getRetryonFallOff", "parameters": "()", "modifiers": "protected", "return": "BackoffTimer", "signature": "BackoffTimer getRetryonFallOff()", "full_signature": "protected BackoffTimer getRetryonFallOff()", "class_method_signature": "RelayPullThread.getRetryonFallOff()", "testcase": false, "constructor": false}, {"identifier": "writeEventToRelayDispatcher", "parameters": "(ConnectionState curState, DbusEvent event, String message)", "modifiers": "private", "return": "void", "signature": "void writeEventToRelayDispatcher(ConnectionState curState, DbusEvent event, String message)", "full_signature": "private void writeEventToRelayDispatcher(ConnectionState curState, DbusEvent event, String message)", "class_method_signature": "RelayPullThread.writeEventToRelayDispatcher(ConnectionState curState, DbusEvent event, String message)", "testcase": false, "constructor": false}, {"identifier": "getLastOpenConnection", "parameters": "()", "modifiers": "public", "return": "DatabusRelayConnection", "signature": "DatabusRelayConnection getLastOpenConnection()", "full_signature": "public DatabusRelayConnection getLastOpenConnection()", "class_method_signature": "RelayPullThread.getLastOpenConnection()", "testcase": false, "constructor": false}], "file": "databus-client/databus-client-http/src/main/java/com/linkedin/databus/client/RelayPullThread.java"}, "focal_method": {"identifier": "getRetryonFallOff", "parameters": "()", "modifiers": "protected", "return": "BackoffTimer", "body": "protected BackoffTimer getRetryonFallOff()\n  {\n    return _retriesOnFallOff;\n  }", "signature": "BackoffTimer getRetryonFallOff()", "full_signature": "protected BackoffTimer getRetryonFallOff()", "class_method_signature": "RelayPullThread.getRetryonFallOff()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}