{"test_class": {"identifier": "HibernateProjectedResultMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ProjectedResultMapper mapper = mock(ProjectedResultMapper.class);", "modifier": "private final", "type": "ProjectedResultMapper", "declarator": "mapper = mock(ProjectedResultMapper.class)", "var_name": "mapper"}, {"original_string": "private final HibernateProjectedResultMapper hMapper = new HibernateProjectedResultMapper(mapper);", "modifier": "private final", "type": "HibernateProjectedResultMapper", "declarator": "hMapper = new HibernateProjectedResultMapper(mapper)", "var_name": "hMapper"}, {"original_string": "private final String[] field = new String[] { \"field\" };", "modifier": "private final", "type": "String[]", "declarator": "field = new String[] { \"field\" }", "var_name": "field"}, {"original_string": "private final String[] fields = new String[] { \"id\", \"name\" };", "modifier": "private final", "type": "String[]", "declarator": "fields = new String[] { \"id\", \"name\" }", "var_name": "fields"}, {"original_string": "private final Query<Integer,String> projected = QueryBuilder.builderFor(Integer.class, String.class, field).build();", "modifier": "private final", "type": "Query<Integer,String>", "declarator": "projected = QueryBuilder.builderFor(Integer.class, String.class, field).build()", "var_name": "projected"}, {"original_string": "private final Query<Integer,TestClass> projected2 = QueryBuilder.builderFor(Integer.class, TestClass.class, fields).build();", "modifier": "private final", "type": "Query<Integer,TestClass>", "declarator": "projected2 = QueryBuilder.builderFor(Integer.class, TestClass.class, fields).build()", "var_name": "projected2"}, {"original_string": "private final Query<String,String> unprojected = QueryBuilder.builderFor(String.class).build();", "modifier": "private final", "type": "Query<String,String>", "declarator": "unprojected = QueryBuilder.builderFor(String.class).build()", "var_name": "unprojected"}, {"original_string": "final TestClass test = new TestClass(1L, \"one\", 0D, 0D);", "modifier": "final", "type": "TestClass", "declarator": "test = new TestClass(1L, \"one\", 0D, 0D)", "var_name": "test"}, {"original_string": "final String string = \"test string\";", "modifier": "final", "type": "String", "declarator": "string = \"test string\"", "var_name": "string"}, {"original_string": "final List<String> strings = Arrays.asList(\"a\",\"b\",\"c\",\"d\");", "modifier": "final", "type": "List<String>", "declarator": "strings = Arrays.asList(\"a\",\"b\",\"c\",\"d\")", "var_name": "strings"}, {"original_string": "private final Object input = new Object();", "modifier": "private final", "type": "Object", "declarator": "input = new Object()", "var_name": "input"}, {"original_string": "private final List<?> inputs = Arrays.asList(1,2,3,4,5);", "modifier": "private final", "type": "List<?>", "declarator": "inputs = Arrays.asList(1,2,3,4,5)", "var_name": "inputs"}], "file": "seeking-hibernate/src/test/java/com/eharmony/matching/seeking/mapper/HibernateProjectedResultMapperTest.java"}, "test_case": {"identifier": "returnFields_none", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void returnFields_none() {\n        assertArrayEquals(new String[0], hMapper.returnFields(unprojected));\n    }", "signature": "void returnFields_none()", "full_signature": "@Test public void returnFields_none()", "class_method_signature": "HibernateProjectedResultMapperTest.returnFields_none()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "returnFields"]}, "focal_class": {"identifier": "HibernateProjectedResultMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ProjectedResultMapper mapper;", "modifier": "private final", "type": "ProjectedResultMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "HibernateProjectedResultMapper", "parameters": "(ProjectedResultMapper mapper)", "modifiers": "public", "return": "", "signature": " HibernateProjectedResultMapper(ProjectedResultMapper mapper)", "full_signature": "public  HibernateProjectedResultMapper(ProjectedResultMapper mapper)", "class_method_signature": "HibernateProjectedResultMapper.HibernateProjectedResultMapper(ProjectedResultMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "returnFields", "parameters": "(Query<T, R> query)", "modifiers": "protected", "return": "String[]", "signature": "String[] returnFields(Query<T, R> query)", "full_signature": "protected String[] returnFields(Query<T, R> query)", "class_method_signature": "HibernateProjectedResultMapper.returnFields(Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "mapResult", "parameters": "(Object o, Query<T, R> query, String[] returnFields)", "modifiers": "public", "return": "R", "signature": "R mapResult(Object o, Query<T, R> query, String[] returnFields)", "full_signature": "public R mapResult(Object o, Query<T, R> query, String[] returnFields)", "class_method_signature": "HibernateProjectedResultMapper.mapResult(Object o, Query<T, R> query, String[] returnFields)", "testcase": false, "constructor": false}, {"identifier": "mapResult", "parameters": "(Object o, Query<T, R> query)", "modifiers": "public", "return": "R", "signature": "R mapResult(Object o, Query<T, R> query)", "full_signature": "public R mapResult(Object o, Query<T, R> query)", "class_method_signature": "HibernateProjectedResultMapper.mapResult(Object o, Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "mapResults", "parameters": "(List<?> objects, final Query<T, R> query)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<R>", "signature": "List<R> mapResults(List<?> objects, final Query<T, R> query)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<R> mapResults(List<?> objects, final Query<T, R> query)", "class_method_signature": "HibernateProjectedResultMapper.mapResults(List<?> objects, final Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "mapResults", "parameters": "(ScrollableResults objects, final Query<T, R> query)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Iterable<R>", "signature": "Iterable<R> mapResults(ScrollableResults objects, final Query<T, R> query)", "full_signature": "@SuppressWarnings(\"unchecked\") public Iterable<R> mapResults(ScrollableResults objects, final Query<T, R> query)", "class_method_signature": "HibernateProjectedResultMapper.mapResults(ScrollableResults objects, final Query<T, R> query)", "testcase": false, "constructor": false}], "file": "seeking-hibernate/src/main/java/com/eharmony/matching/seeking/mapper/HibernateProjectedResultMapper.java"}, "focal_method": {"identifier": "returnFields", "parameters": "(Query<T, R> query)", "modifiers": "protected", "return": "String[]", "body": "protected <T, R> String[] returnFields(Query<T, R> query) {\n        List<String> list = query.getReturnFields();\n        String[] array = new String[list.size()];\n        return list.toArray(array);\n    }", "signature": "String[] returnFields(Query<T, R> query)", "full_signature": "protected String[] returnFields(Query<T, R> query)", "class_method_signature": "HibernateProjectedResultMapper.returnFields(Query<T, R> query)", "testcase": false, "constructor": false, "invocations": ["getReturnFields", "size", "toArray"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}