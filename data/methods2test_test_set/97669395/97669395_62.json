{"test_class": {"identifier": "CookbookUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "recipe-generator/src/test/java/ca/derekcormier/recipe/cookbook/CookbookUtilsTest.java"}, "test_case": {"identifier": "testEnumHasValue_hasValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEnumHasValue_hasValue() {\n    List<Enum> enums = new ArrayList<>();\n    List<String> enumValues = new ArrayList<>();\n    enumValues.add(\"A\");\n    enumValues.add(\"B\");\n    enums.add(new Enum(\"MyEnum\", enumValues));\n\n    Cookbook cookbook = new Cookbook(\"test\", new ArrayList<>(), enums);\n    assertTrue(CookbookUtils.enumHasValue(cookbook, \"MyEnum\", \"A\"));\n  }", "signature": "void testEnumHasValue_hasValue()", "full_signature": "@Test public void testEnumHasValue_hasValue()", "class_method_signature": "CookbookUtilsTest.testEnumHasValue_hasValue()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "assertTrue", "enumHasValue"]}, "focal_class": {"identifier": "CookbookUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isPrimitiveType", "parameters": "(String type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitiveType(String type)", "full_signature": "public static boolean isPrimitiveType(String type)", "class_method_signature": "CookbookUtils.isPrimitiveType(String type)", "testcase": false, "constructor": false}, {"identifier": "isFlagType", "parameters": "(String flag)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFlagType(String flag)", "full_signature": "public static boolean isFlagType(String flag)", "class_method_signature": "CookbookUtils.isFlagType(String flag)", "testcase": false, "constructor": false}, {"identifier": "isKnownType", "parameters": "(Cookbook cookbook, String type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isKnownType(Cookbook cookbook, String type)", "full_signature": "public static boolean isKnownType(Cookbook cookbook, String type)", "class_method_signature": "CookbookUtils.isKnownType(Cookbook cookbook, String type)", "testcase": false, "constructor": false}, {"identifier": "isEnumType", "parameters": "(Cookbook cookbook, String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEnumType(Cookbook cookbook, String name)", "full_signature": "public static boolean isEnumType(Cookbook cookbook, String name)", "class_method_signature": "CookbookUtils.isEnumType(Cookbook cookbook, String name)", "testcase": false, "constructor": false}, {"identifier": "enumHasValue", "parameters": "(Cookbook cookbook, String enumName, String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean enumHasValue(Cookbook cookbook, String enumName, String value)", "full_signature": "public static boolean enumHasValue(Cookbook cookbook, String enumName, String value)", "class_method_signature": "CookbookUtils.enumHasValue(Cookbook cookbook, String enumName, String value)", "testcase": false, "constructor": false}, {"identifier": "isPrimitiveType", "parameters": "(Type type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitiveType(Type type)", "full_signature": "public static boolean isPrimitiveType(Type type)", "class_method_signature": "CookbookUtils.isPrimitiveType(Type type)", "testcase": false, "constructor": false}, {"identifier": "isNonPrimitive", "parameters": "(String type, Cookbook cookbook)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNonPrimitive(String type, Cookbook cookbook)", "full_signature": "public static boolean isNonPrimitive(String type, Cookbook cookbook)", "class_method_signature": "CookbookUtils.isNonPrimitive(String type, Cookbook cookbook)", "testcase": false, "constructor": false}, {"identifier": "getNonPrimitiveTypes", "parameters": "(Ingredient ingredient, Cookbook cookbook)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getNonPrimitiveTypes(Ingredient ingredient, Cookbook cookbook)", "full_signature": "public static Set<String> getNonPrimitiveTypes(Ingredient ingredient, Cookbook cookbook)", "class_method_signature": "CookbookUtils.getNonPrimitiveTypes(Ingredient ingredient, Cookbook cookbook)", "testcase": false, "constructor": false}, {"identifier": "getBaseType", "parameters": "(String type, Cookbook cookbook)", "modifiers": "public static", "return": "String", "signature": "String getBaseType(String type, Cookbook cookbook)", "full_signature": "public static String getBaseType(String type, Cookbook cookbook)", "class_method_signature": "CookbookUtils.getBaseType(String type, Cookbook cookbook)", "testcase": false, "constructor": false}, {"identifier": "parseType", "parameters": "(String type, Cookbook cookbook)", "modifiers": "public static", "return": "ParamType", "signature": "ParamType parseType(String type, Cookbook cookbook)", "full_signature": "public static ParamType parseType(String type, Cookbook cookbook)", "class_method_signature": "CookbookUtils.parseType(String type, Cookbook cookbook)", "testcase": false, "constructor": false}, {"identifier": "_parseType", "parameters": "(String type, Cookbook cookbook)", "modifiers": "private static", "return": "Type", "signature": "Type _parseType(String type, Cookbook cookbook)", "full_signature": "private static Type _parseType(String type, Cookbook cookbook)", "class_method_signature": "CookbookUtils._parseType(String type, Cookbook cookbook)", "testcase": false, "constructor": false}], "file": "recipe-generator/src/main/java/ca/derekcormier/recipe/cookbook/CookbookUtils.java"}, "focal_method": {"identifier": "enumHasValue", "parameters": "(Cookbook cookbook, String enumName, String value)", "modifiers": "public static", "return": "boolean", "body": "public static boolean enumHasValue(Cookbook cookbook, String enumName, String value) {\n    return CookbookUtils.isEnumType(cookbook, enumName)\n        && cookbook.getEnums().stream()\n            .filter(e -> e.getName().equals(enumName))\n            .collect(Collectors.toList())\n            .get(0)\n            .getValues()\n            .contains(value);\n  }", "signature": "boolean enumHasValue(Cookbook cookbook, String enumName, String value)", "full_signature": "public static boolean enumHasValue(Cookbook cookbook, String enumName, String value)", "class_method_signature": "CookbookUtils.enumHasValue(Cookbook cookbook, String enumName, String value)", "testcase": false, "constructor": false, "invocations": ["isEnumType", "contains", "getValues", "get", "collect", "filter", "stream", "getEnums", "equals", "getName", "toList"]}, "repository": {"repo_id": 97669395, "url": "https://github.com/kormide/recipe", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 727, "license": "licensed"}}