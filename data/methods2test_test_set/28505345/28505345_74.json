{"test_class": {"identifier": "GsonRequestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockWebServer server = new MockWebServer();", "modifier": "@Rule\n    public final", "type": "MockWebServer", "declarator": "server = new MockWebServer()", "var_name": "server"}, {"original_string": "private RequestQueue queue;", "modifier": "private", "type": "RequestQueue", "declarator": "queue", "var_name": "queue"}, {"original_string": "private Gson gson;", "modifier": "private", "type": "Gson", "declarator": "gson", "var_name": "gson"}], "file": "converter/jus-gson/src/test/java/io/apptik/comm/jus/request/GsonRequestTest.java"}, "test_case": {"identifier": "anImplementation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void anImplementation() throws IOException, InterruptedException, ExecutionException {\n        server.enqueue(new MockResponse().setBody(\"{\\\"theName\\\":\\\"value\\\"}\"));\n\n        GsonRequest<AnImplementation> request =\n                new GsonRequest<AnImplementation>(Request.Method.POST,\n                        server.url(\"\").toString(), AnImplementation.class)\n                        .setRequestData(new AnImplementation(\"value\"), gson);\n\n        AnImplementation body = queue.add(request)\n                .getFuture().get();\n\n        assertThat(body.theName).isEqualTo(\"value\");\n\n        RecordedRequest sRequest = server.takeRequest();\n        assertThat(sRequest.getBody().readUtf8()).isEqualTo(\"{\\\"theName\\\":\\\"value\\\"}\");\n        assertThat(sRequest.getHeader(\"Content-Type\")).isEqualTo(\"application/json; charset=UTF-8\");\n        assertThat(sRequest.getHeader(\"Accept\")).isEqualTo(\"application/json\");\n    }", "signature": "void anImplementation()", "full_signature": "@Test public void anImplementation()", "class_method_signature": "GsonRequestTest.anImplementation()", "testcase": true, "constructor": false, "invocations": ["enqueue", "setBody", "setRequestData", "toString", "url", "get", "getFuture", "add", "isEqualTo", "assertThat", "takeRequest", "isEqualTo", "assertThat", "readUtf8", "getBody", "isEqualTo", "assertThat", "getHeader", "isEqualTo", "assertThat", "getHeader"]}, "focal_class": {"identifier": "GsonRequest", "superclass": "extends Request<T>", "interfaces": "", "fields": [], "methods": [{"identifier": "GsonRequest", "parameters": "(String method, HttpUrl url, TypeAdapter<T> typeAdapter)", "modifiers": "public", "return": "", "signature": " GsonRequest(String method, HttpUrl url, TypeAdapter<T> typeAdapter)", "full_signature": "public  GsonRequest(String method, HttpUrl url, TypeAdapter<T> typeAdapter)", "class_method_signature": "GsonRequest.GsonRequest(String method, HttpUrl url, TypeAdapter<T> typeAdapter)", "testcase": false, "constructor": true}, {"identifier": "GsonRequest", "parameters": "(String method, HttpUrl url, Class<T> tClass, Gson gson)", "modifiers": "public", "return": "", "signature": " GsonRequest(String method, HttpUrl url, Class<T> tClass, Gson gson)", "full_signature": "public  GsonRequest(String method, HttpUrl url, Class<T> tClass, Gson gson)", "class_method_signature": "GsonRequest.GsonRequest(String method, HttpUrl url, Class<T> tClass, Gson gson)", "testcase": false, "constructor": true}, {"identifier": "GsonRequest", "parameters": "(String method, HttpUrl url, Class<T> tClass)", "modifiers": "public", "return": "", "signature": " GsonRequest(String method, HttpUrl url, Class<T> tClass)", "full_signature": "public  GsonRequest(String method, HttpUrl url, Class<T> tClass)", "class_method_signature": "GsonRequest.GsonRequest(String method, HttpUrl url, Class<T> tClass)", "testcase": false, "constructor": true}, {"identifier": "GsonRequest", "parameters": "(String method, String url, TypeAdapter<T> typeAdapter)", "modifiers": "public", "return": "", "signature": " GsonRequest(String method, String url, TypeAdapter<T> typeAdapter)", "full_signature": "public  GsonRequest(String method, String url, TypeAdapter<T> typeAdapter)", "class_method_signature": "GsonRequest.GsonRequest(String method, String url, TypeAdapter<T> typeAdapter)", "testcase": false, "constructor": true}, {"identifier": "GsonRequest", "parameters": "(String method, String url, Class<T> tClass, Gson gson)", "modifiers": "public", "return": "", "signature": " GsonRequest(String method, String url, Class<T> tClass, Gson gson)", "full_signature": "public  GsonRequest(String method, String url, Class<T> tClass, Gson gson)", "class_method_signature": "GsonRequest.GsonRequest(String method, String url, Class<T> tClass, Gson gson)", "testcase": false, "constructor": true}, {"identifier": "GsonRequest", "parameters": "(String method, String url, Class<T> tClass)", "modifiers": "public", "return": "", "signature": " GsonRequest(String method, String url, Class<T> tClass)", "full_signature": "public  GsonRequest(String method, String url, Class<T> tClass)", "class_method_signature": "GsonRequest.GsonRequest(String method, String url, Class<T> tClass)", "testcase": false, "constructor": true}, {"identifier": "setRequestData", "parameters": "(R requestData, Gson gson, TypeAdapter adapter)", "modifiers": "public", "return": "GsonRequest<T>", "signature": "GsonRequest<T> setRequestData(R requestData, Gson gson, TypeAdapter adapter)", "full_signature": "public GsonRequest<T> setRequestData(R requestData, Gson gson, TypeAdapter adapter)", "class_method_signature": "GsonRequest.setRequestData(R requestData, Gson gson, TypeAdapter adapter)", "testcase": false, "constructor": false}, {"identifier": "setRequestData", "parameters": "(R requestData, Gson gson)", "modifiers": "public", "return": "GsonRequest<T>", "signature": "GsonRequest<T> setRequestData(R requestData, Gson gson)", "full_signature": "public GsonRequest<T> setRequestData(R requestData, Gson gson)", "class_method_signature": "GsonRequest.setRequestData(R requestData, Gson gson)", "testcase": false, "constructor": false}, {"identifier": "setRequestData", "parameters": "(R requestData)", "modifiers": "public", "return": "GsonRequest<T>", "signature": "GsonRequest<T> setRequestData(R requestData)", "full_signature": "public GsonRequest<T> setRequestData(R requestData)", "class_method_signature": "GsonRequest.setRequestData(R requestData)", "testcase": false, "constructor": false}], "file": "converter/jus-gson/src/main/java/io/apptik/comm/jus/request/GsonRequest.java"}, "focal_method": {"identifier": "setRequestData", "parameters": "(R requestData, Gson gson, TypeAdapter adapter)", "modifiers": "public", "return": "GsonRequest<T>", "body": "public <R> GsonRequest<T> setRequestData(R requestData, Gson gson, TypeAdapter adapter) {\n        try {\n            super.setRequestData(requestData, new GsonRequestConverter<>(gson, adapter));\n        } catch (IOException e) {\n            throw new RuntimeException(\"Unable to convert \" + requestData + \" to NetworkRequest\", e);\n        }\n        setNetworkRequest(NetworkRequest.Builder.from(getNetworkRequest())\n                .setHeader(\"Accept\", \"application/json\")\n                .build());\n        return this;\n    }", "signature": "GsonRequest<T> setRequestData(R requestData, Gson gson, TypeAdapter adapter)", "full_signature": "public GsonRequest<T> setRequestData(R requestData, Gson gson, TypeAdapter adapter)", "class_method_signature": "GsonRequest.setRequestData(R requestData, Gson gson, TypeAdapter adapter)", "testcase": false, "constructor": false, "invocations": ["setRequestData", "setNetworkRequest", "build", "setHeader", "from", "getNetworkRequest"]}, "repository": {"repo_id": 28505345, "url": "https://github.com/apptik/jus", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 56, "size": 2057, "license": "licensed"}}