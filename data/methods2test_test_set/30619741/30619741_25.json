{"test_class": {"identifier": "MonitoringMicroserviceProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MonitoringSilverService monitoringSilverService = null;", "modifier": "private", "type": "MonitoringSilverService", "declarator": "monitoringSilverService = null", "var_name": "monitoringSilverService"}], "file": "monitoring-microservice-provider/src/test/java/io/silverware/microservices/providers/monitoring/MonitoringMicroserviceProviderTest.java"}, "test_case": {"identifier": "testMonitoring", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testMonitoring() throws Exception {\n      final BootUtil bootUtil = new BootUtil();\n      final Map<String, Object> platformProperties = bootUtil.getContext().getProperties();\n      platformProperties.put(HttpServerSilverService.HTTP_SERVER_PORT, 18080);\n      final Thread platform = bootUtil.getMicroservicePlatform(this.getClass().getPackage().getName(), HttpServerMicroserviceProvider.class.getPackage().getName());\n      platform.start();\n\n      while (monitoringSilverService == null) {\n         monitoringSilverService = (MonitoringSilverService) bootUtil.getContext().getProvider(MonitoringSilverService.class);\n         Thread.sleep(200);\n      }\n\n      Assert.assertTrue(Utils.waitForHttp(\"http://\" + platformProperties.get(HttpServerSilverService.HTTP_SERVER_ADDRESS) + \":\" +\n            platformProperties.get(HttpServerSilverService.HTTP_SERVER_PORT) + \"/\" +\n            platformProperties.get(MonitoringSilverService.MONITORING_URL) + \"/\", 200));\n\n      platform.interrupt();\n      platform.join();\n   }", "signature": "void testMonitoring()", "full_signature": "@Test public void testMonitoring()", "class_method_signature": "MonitoringMicroserviceProviderTest.testMonitoring()", "testcase": true, "constructor": false, "invocations": ["getProperties", "getContext", "put", "getMicroservicePlatform", "getName", "getPackage", "getClass", "getName", "getPackage", "start", "getProvider", "getContext", "sleep", "assertTrue", "waitForHttp", "get", "get", "get", "interrupt", "join"]}, "focal_class": {"identifier": "MonitoringMicroserviceProvider", "superclass": "", "interfaces": "implements MicroserviceProvider, MonitoringSilverService", "fields": [{"original_string": "private static final Logger log = LogManager.getLogger(MonitoringMicroserviceProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LogManager.getLogger(MonitoringMicroserviceProvider.class)", "var_name": "log"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private HttpServerSilverService http;", "modifier": "private", "type": "HttpServerSilverService", "declarator": "http", "var_name": "http"}], "methods": [{"identifier": "initialize", "parameters": "(final Context context)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(final Context context)", "full_signature": "@Override public void initialize(final Context context)", "class_method_signature": "MonitoringMicroserviceProvider.initialize(final Context context)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "@Override public", "return": "Context", "signature": "Context getContext()", "full_signature": "@Override public Context getContext()", "class_method_signature": "MonitoringMicroserviceProvider.getContext()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "MonitoringMicroserviceProvider.run()", "testcase": false, "constructor": false}, {"identifier": "getServletDescriptor", "parameters": "()", "modifiers": "private", "return": "ServletDescriptor", "signature": "ServletDescriptor getServletDescriptor()", "full_signature": "private ServletDescriptor getServletDescriptor()", "class_method_signature": "MonitoringMicroserviceProvider.getServletDescriptor()", "testcase": false, "constructor": false}], "file": "monitoring-microservice-provider/src/main/java/io/silverware/microservices/providers/monitoring/MonitoringMicroserviceProvider.java"}, "focal_method": {"identifier": "getContext", "parameters": "()", "modifiers": "@Override public", "return": "Context", "body": "@Override\n   public Context getContext() {\n      return context;\n   }", "signature": "Context getContext()", "full_signature": "@Override public Context getContext()", "class_method_signature": "MonitoringMicroserviceProvider.getContext()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 30619741, "url": "https://github.com/SilverThings/SilverWare", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 21, "size": 3333, "license": "licensed"}}