{"test_class": {"identifier": "MobilityModuleTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [], "file": "omicron-core/src/test/java/com/lyndir/omicron/api/MobilityModuleTest.java"}, "test_case": {"identifier": "testCostForMovingInLevel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCostForMovingInLevel()\n            throws Exception {\n\n        MobilityModule module = MobilityModule.createWithStandardResourceCost()\n                                              .movementSpeed( 0 )\n                                              .movementCost( ImmutableMap.of( LevelType.GROUND, 1d ) )\n                                              .levelingCost( ImmutableMap.<LevelType, Double>of() );\n        createUnit( testUnitType( \"Ground Mover\", module ) );\n\n        assertEquals( 1d, module.costForMovingInLevel( LevelType.GROUND ) );\n        assertEquals( Double.MAX_VALUE, module.costForMovingInLevel( LevelType.SKY ) );\n        assertEquals( Double.MAX_VALUE, module.costForMovingInLevel( LevelType.SPACE ) );\n        module.getGameObject().getController().die();\n\n        ImmutableMap.Builder<LevelType, Double> builder = ImmutableMap.builder();\n        for (final LevelType levelType : LevelType.values())\n            builder.put( levelType, (double) levelType.ordinal() );\n\n        module = MobilityModule.createWithStandardResourceCost()\n                               .movementSpeed( 0 )\n                               .movementCost( builder.build() )\n                               .levelingCost( ImmutableMap.<LevelType, Double>of() );\n        createUnit( testUnitType( \"Everywhere Mover\", module ) );\n\n        for (final LevelType levelType : LevelType.values())\n            assertEquals( (double) levelType.ordinal(), module.costForMovingInLevel( levelType ) );\n    }", "signature": "void testCostForMovingInLevel()", "full_signature": "@Test public void testCostForMovingInLevel()", "class_method_signature": "MobilityModuleTest.testCostForMovingInLevel()", "testcase": true, "constructor": false, "invocations": ["levelingCost", "movementCost", "movementSpeed", "createWithStandardResourceCost", "of", "of", "createUnit", "testUnitType", "assertEquals", "costForMovingInLevel", "assertEquals", "costForMovingInLevel", "assertEquals", "costForMovingInLevel", "die", "getController", "getGameObject", "builder", "values", "put", "ordinal", "levelingCost", "movementCost", "movementSpeed", "createWithStandardResourceCost", "build", "of", "createUnit", "testUnitType", "values", "assertEquals", "ordinal", "costForMovingInLevel"]}, "focal_class": {"identifier": "MobilityModule", "superclass": "extends Module", "interfaces": "implements IMobilityModule, IMobilityModuleController", "fields": [{"original_string": "private final int movementSpeed;", "modifier": "private final", "type": "int", "declarator": "movementSpeed", "var_name": "movementSpeed"}, {"original_string": "private final Map<LevelType, Double> movementCost = Collections.synchronizedMap( new EnumMap<>( LevelType.class ) );", "modifier": "private final", "type": "Map<LevelType, Double>", "declarator": "movementCost = Collections.synchronizedMap( new EnumMap<>( LevelType.class ) )", "var_name": "movementCost"}, {"original_string": "private final Map<LevelType, Double> levelingCost = Collections.synchronizedMap( new EnumMap<>( LevelType.class ) );", "modifier": "private final", "type": "Map<LevelType, Double>", "declarator": "levelingCost = Collections.synchronizedMap( new EnumMap<>( LevelType.class ) )", "var_name": "levelingCost"}, {"original_string": "private double remainingSpeed;", "modifier": "private", "type": "double", "declarator": "remainingSpeed", "var_name": "remainingSpeed"}], "methods": [{"identifier": "MobilityModule", "parameters": "(final ImmutableResourceCost resourceCost, final int movementSpeed, final Map<LevelType, Double> movementCost,\n                             final Map<LevelType, Double> levelingCost)", "modifiers": "protected", "return": "", "signature": " MobilityModule(final ImmutableResourceCost resourceCost, final int movementSpeed, final Map<LevelType, Double> movementCost,\n                             final Map<LevelType, Double> levelingCost)", "full_signature": "protected  MobilityModule(final ImmutableResourceCost resourceCost, final int movementSpeed, final Map<LevelType, Double> movementCost,\n                             final Map<LevelType, Double> levelingCost)", "class_method_signature": "MobilityModule.MobilityModule(final ImmutableResourceCost resourceCost, final int movementSpeed, final Map<LevelType, Double> movementCost,\n                             final Map<LevelType, Double> levelingCost)", "testcase": false, "constructor": true}, {"identifier": "createWithStandardResourceCost", "parameters": "()", "modifiers": "static", "return": "Builder0", "signature": "Builder0 createWithStandardResourceCost()", "full_signature": "static Builder0 createWithStandardResourceCost()", "class_method_signature": "MobilityModule.createWithStandardResourceCost()", "testcase": false, "constructor": false}, {"identifier": "createWithExtraResourceCost", "parameters": "(final ImmutableResourceCost resourceCost)", "modifiers": "static", "return": "Builder0", "signature": "Builder0 createWithExtraResourceCost(final ImmutableResourceCost resourceCost)", "full_signature": "static Builder0 createWithExtraResourceCost(final ImmutableResourceCost resourceCost)", "class_method_signature": "MobilityModule.createWithExtraResourceCost(final ImmutableResourceCost resourceCost)", "testcase": false, "constructor": false}, {"identifier": "getRemainingSpeed", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getRemainingSpeed()", "full_signature": "@Override public double getRemainingSpeed()", "class_method_signature": "MobilityModule.getRemainingSpeed()", "testcase": false, "constructor": false}, {"identifier": "getMovementSpeed", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getMovementSpeed()", "full_signature": "@Override public double getMovementSpeed()", "class_method_signature": "MobilityModule.getMovementSpeed()", "testcase": false, "constructor": false}, {"identifier": "costForMovingInLevel", "parameters": "(final LevelType levelType)", "modifiers": "@Override public", "return": "double", "signature": "double costForMovingInLevel(final LevelType levelType)", "full_signature": "@Override public double costForMovingInLevel(final LevelType levelType)", "class_method_signature": "MobilityModule.costForMovingInLevel(final LevelType levelType)", "testcase": false, "constructor": false}, {"identifier": "costForLevelingToLevel", "parameters": "(final LevelType levelType)", "modifiers": "@Override public", "return": "double", "signature": "double costForLevelingToLevel(final LevelType levelType)", "full_signature": "@Override public double costForLevelingToLevel(final LevelType levelType)", "class_method_signature": "MobilityModule.costForLevelingToLevel(final LevelType levelType)", "testcase": false, "constructor": false}, {"identifier": "leveling", "parameters": "(final LevelType levelType)", "modifiers": "@Override public", "return": "Leveling", "signature": "Leveling leveling(final LevelType levelType)", "full_signature": "@Override public Leveling leveling(final LevelType levelType)", "class_method_signature": "MobilityModule.leveling(final LevelType levelType)", "testcase": false, "constructor": false}, {"identifier": "movement", "parameters": "(final ITile target)", "modifiers": "@Override public", "return": "Movement", "signature": "Movement movement(final ITile target)", "full_signature": "@Override public Movement movement(final ITile target)", "class_method_signature": "MobilityModule.movement(final ITile target)", "testcase": false, "constructor": false}, {"identifier": "onReset", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onReset()", "full_signature": "@Override protected void onReset()", "class_method_signature": "MobilityModule.onReset()", "testcase": false, "constructor": false}, {"identifier": "onNewTurn", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onNewTurn()", "full_signature": "@Override protected void onNewTurn()", "class_method_signature": "MobilityModule.onNewTurn()", "testcase": false, "constructor": false}, {"identifier": "getController", "parameters": "()", "modifiers": "@Override public", "return": "IMobilityModuleController", "signature": "IMobilityModuleController getController()", "full_signature": "@Override public IMobilityModuleController getController()", "class_method_signature": "MobilityModule.getController()", "testcase": false, "constructor": false}, {"identifier": "getModule", "parameters": "()", "modifiers": "@Override public", "return": "IMobilityModule", "signature": "IMobilityModule getModule()", "full_signature": "@Override public IMobilityModule getModule()", "class_method_signature": "MobilityModule.getModule()", "testcase": false, "constructor": false}], "file": "omicron-core/src/main/java/com/lyndir/omicron/api/MobilityModule.java"}, "focal_method": {"identifier": "costForMovingInLevel", "parameters": "(final LevelType levelType)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double costForMovingInLevel(final LevelType levelType)\n            throws NotAuthenticatedException, NotObservableException {\n        assertObservable();\n\n        return ifNotNullElse( movementCost.get( levelType ), Double.MAX_VALUE );\n    }", "signature": "double costForMovingInLevel(final LevelType levelType)", "full_signature": "@Override public double costForMovingInLevel(final LevelType levelType)", "class_method_signature": "MobilityModule.costForMovingInLevel(final LevelType levelType)", "testcase": false, "constructor": false, "invocations": ["assertObservable", "ifNotNullElse", "get"]}, "repository": {"repo_id": 5915204, "url": "https://github.com/Lyndir/Omicron", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 3199, "license": "licensed"}}