{"test_class": {"identifier": "FunctionExecutionServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AtomicBoolean beforeFunctionCallHasBeenCall = new AtomicBoolean(false);", "modifier": "", "type": "AtomicBoolean", "declarator": "beforeFunctionCallHasBeenCall = new AtomicBoolean(false)", "var_name": "beforeFunctionCallHasBeenCall"}, {"original_string": "int functionCallTimeout = 985;", "modifier": "", "type": "int", "declarator": "functionCallTimeout = 985", "var_name": "functionCallTimeout"}], "file": "step-functions/step-functions-client/src/test/java/step/functions/execution/FunctionExecutionServiceImplTest.java"}, "test_case": {"identifier": "testReserveTimeoutError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReserveTimeoutError() {\n\t\tFunctionExecutionService f = getFunctionExecutionServiceForGridClientTest(null, null, new AgentCallTimeoutException(functionCallTimeout, \"Reserve error\", null), null);\n\t\t\n\t\tFunctionExecutionServiceException e = null;\n\t\ttry {\n\t\t\tf.getTokenHandle(new HashMap<>(), new HashMap<>(), true, null);\n\t\t} catch (FunctionExecutionServiceException e1) {\n\t\t\te = e1;\n\t\t}\n\t\tAssert.assertNotNull(e);\n\t\tAssert.assertEquals(\"Timeout after \"+functionCallTimeout+\"ms while reserving the agent token. You can increase the call timeout by setting 'grid.client.token.reserve.timeout.ms' in step.properties\", e.getMessage());\n\t}", "signature": "void testReserveTimeoutError()", "full_signature": "@Test public void testReserveTimeoutError()", "class_method_signature": "FunctionExecutionServiceImplTest.testReserveTimeoutError()", "testcase": true, "constructor": false, "invocations": ["getFunctionExecutionServiceForGridClientTest", "getTokenHandle", "assertNotNull", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "FunctionExecutionServiceImpl", "superclass": "", "interfaces": "implements FunctionExecutionService", "fields": [{"original_string": "private final GridClient gridClient;", "modifier": "private final", "type": "GridClient", "declarator": "gridClient", "var_name": "gridClient"}, {"original_string": "private final FunctionTypeRegistry functionTypeRegistry;", "modifier": "private final", "type": "FunctionTypeRegistry", "declarator": "functionTypeRegistry", "var_name": "functionTypeRegistry"}, {"original_string": "private final DynamicBeanResolver dynamicBeanResolver;", "modifier": "private final", "type": "DynamicBeanResolver", "declarator": "dynamicBeanResolver", "var_name": "dynamicBeanResolver"}, {"original_string": "private final FileVersionId functionHandlerPackage;", "modifier": "private final", "type": "FileVersionId", "declarator": "functionHandlerPackage", "var_name": "functionHandlerPackage"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private static final String KEYWORD_NAME_PROP = \"$keywordName\";", "modifier": "private static final", "type": "String", "declarator": "KEYWORD_NAME_PROP = \"$keywordName\"", "var_name": "KEYWORD_NAME_PROP"}, {"original_string": "private static final String KEYWORD_TIMEOUT_PROP = \"$keywordTimeout\";", "modifier": "private static final", "type": "String", "declarator": "KEYWORD_TIMEOUT_PROP = \"$keywordTimeout\"", "var_name": "KEYWORD_TIMEOUT_PROP"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(FunctionExecutionServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FunctionExecutionServiceImpl.class)", "var_name": "logger"}], "methods": [{"identifier": "FunctionExecutionServiceImpl", "parameters": "(GridClient gridClient, FunctionTypeRegistry functionTypeRegistry, DynamicBeanResolver dynamicBeanResolver)", "modifiers": "public", "return": "", "signature": " FunctionExecutionServiceImpl(GridClient gridClient, FunctionTypeRegistry functionTypeRegistry, DynamicBeanResolver dynamicBeanResolver)", "full_signature": "public  FunctionExecutionServiceImpl(GridClient gridClient, FunctionTypeRegistry functionTypeRegistry, DynamicBeanResolver dynamicBeanResolver)", "class_method_signature": "FunctionExecutionServiceImpl.FunctionExecutionServiceImpl(GridClient gridClient, FunctionTypeRegistry functionTypeRegistry, DynamicBeanResolver dynamicBeanResolver)", "testcase": false, "constructor": true}, {"identifier": "getLocalTokenHandle", "parameters": "()", "modifiers": "@Override public", "return": "TokenWrapper", "signature": "TokenWrapper getLocalTokenHandle()", "full_signature": "@Override public TokenWrapper getLocalTokenHandle()", "class_method_signature": "FunctionExecutionServiceImpl.getLocalTokenHandle()", "testcase": false, "constructor": false}, {"identifier": "getTokenHandle", "parameters": "(Map<String, String> attributes, Map<String, Interest> interests, boolean createSession, TokenWrapperOwner tokenWrapperOwner)", "modifiers": "@Override public", "return": "TokenWrapper", "signature": "TokenWrapper getTokenHandle(Map<String, String> attributes, Map<String, Interest> interests, boolean createSession, TokenWrapperOwner tokenWrapperOwner)", "full_signature": "@Override public TokenWrapper getTokenHandle(Map<String, String> attributes, Map<String, Interest> interests, boolean createSession, TokenWrapperOwner tokenWrapperOwner)", "class_method_signature": "FunctionExecutionServiceImpl.getTokenHandle(Map<String, String> attributes, Map<String, Interest> interests, boolean createSession, TokenWrapperOwner tokenWrapperOwner)", "testcase": false, "constructor": false}, {"identifier": "returnTokenHandle", "parameters": "(String tokenHandleId)", "modifiers": "@Override public", "return": "void", "signature": "void returnTokenHandle(String tokenHandleId)", "full_signature": "@Override public void returnTokenHandle(String tokenHandleId)", "class_method_signature": "FunctionExecutionServiceImpl.returnTokenHandle(String tokenHandleId)", "testcase": false, "constructor": false}, {"identifier": "callFunction", "parameters": "(String tokenHandleId, Function function, FunctionInput<IN> functionInput, Class<OUT> outputClass)", "modifiers": "@Override public", "return": "Output<OUT>", "signature": "Output<OUT> callFunction(String tokenHandleId, Function function, FunctionInput<IN> functionInput, Class<OUT> outputClass)", "full_signature": "@Override public Output<OUT> callFunction(String tokenHandleId, Function function, FunctionInput<IN> functionInput, Class<OUT> outputClass)", "class_method_signature": "FunctionExecutionServiceImpl.callFunction(String tokenHandleId, Function function, FunctionInput<IN> functionInput, Class<OUT> outputClass)", "testcase": false, "constructor": false}, {"identifier": "newAgentError", "parameters": "(String message)", "modifiers": "private", "return": "Error", "signature": "Error newAgentError(String message)", "full_signature": "private Error newAgentError(String message)", "class_method_signature": "FunctionExecutionServiceImpl.newAgentError(String message)", "testcase": false, "constructor": false}, {"identifier": "registerFile", "parameters": "(File file, String properyName)", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> registerFile(File file, String properyName)", "full_signature": "protected Map<String, String> registerFile(File file, String properyName)", "class_method_signature": "FunctionExecutionServiceImpl.registerFile(File file, String properyName)", "testcase": false, "constructor": false}, {"identifier": "fileVersionIdToMap", "parameters": "(String propertyName, FileVersionId fileVersionId)", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> fileVersionIdToMap(String propertyName, FileVersionId fileVersionId)", "full_signature": "protected Map<String, String> fileVersionIdToMap(String propertyName, FileVersionId fileVersionId)", "class_method_signature": "FunctionExecutionServiceImpl.fileVersionIdToMap(String propertyName, FileVersionId fileVersionId)", "testcase": false, "constructor": false}, {"identifier": "attachUnexpectedExceptionToOutput", "parameters": "(Output<?> output, Exception e)", "modifiers": "private", "return": "void", "signature": "void attachUnexpectedExceptionToOutput(Output<?> output, Exception e)", "full_signature": "private void attachUnexpectedExceptionToOutput(Output<?> output, Exception e)", "class_method_signature": "FunctionExecutionServiceImpl.attachUnexpectedExceptionToOutput(Output<?> output, Exception e)", "testcase": false, "constructor": false}, {"identifier": "attachUnexpectedExceptionToOutput", "parameters": "(Output<?> output, String message, Exception e)", "modifiers": "private", "return": "void", "signature": "void attachUnexpectedExceptionToOutput(Output<?> output, String message, Exception e)", "full_signature": "private void attachUnexpectedExceptionToOutput(Output<?> output, String message, Exception e)", "class_method_signature": "FunctionExecutionServiceImpl.attachUnexpectedExceptionToOutput(Output<?> output, String message, Exception e)", "testcase": false, "constructor": false}, {"identifier": "attachExceptionToOutput", "parameters": "(Output<?> output, Exception e)", "modifiers": "private", "return": "void", "signature": "void attachExceptionToOutput(Output<?> output, Exception e)", "full_signature": "private void attachExceptionToOutput(Output<?> output, Exception e)", "class_method_signature": "FunctionExecutionServiceImpl.attachExceptionToOutput(Output<?> output, Exception e)", "testcase": false, "constructor": false}], "file": "step-functions/step-functions-client/src/main/java/step/functions/execution/FunctionExecutionServiceImpl.java"}, "focal_method": {"identifier": "getTokenHandle", "parameters": "(Map<String, String> attributes, Map<String, Interest> interests, boolean createSession, TokenWrapperOwner tokenWrapperOwner)", "modifiers": "@Override public", "return": "TokenWrapper", "body": "@Override\n\tpublic TokenWrapper getTokenHandle(Map<String, String> attributes, Map<String, Interest> interests, boolean createSession, TokenWrapperOwner tokenWrapperOwner) throws FunctionExecutionServiceException {\n\t\ttry {\n\t\t\treturn gridClient.getTokenHandle(attributes, interests, createSession, tokenWrapperOwner);\n\t\t} catch (AgentCallTimeoutException e) {\n\t\t\tthrow new FunctionExecutionServiceException(\"Timeout after \"+e.getCallTimeout()+\"ms while reserving the agent token. You can increase the call timeout by setting 'grid.client.token.reserve.timeout.ms' in step.properties\",e );\n\t\t} catch (AgentSideException e) {\n\t\t\tthrow new FunctionExecutionServiceException(\"Unexepected error on the agent side while reserving the agent token: \"+e.getMessage(),e);\n\t\t} catch (AgentCommunicationException e) {\n\t\t\tthrow new FunctionExecutionServiceException(\"Communication error between the controller and the agent while reserving the agent token\",e);\n\t\t} \n\t}", "signature": "TokenWrapper getTokenHandle(Map<String, String> attributes, Map<String, Interest> interests, boolean createSession, TokenWrapperOwner tokenWrapperOwner)", "full_signature": "@Override public TokenWrapper getTokenHandle(Map<String, String> attributes, Map<String, Interest> interests, boolean createSession, TokenWrapperOwner tokenWrapperOwner)", "class_method_signature": "FunctionExecutionServiceImpl.getTokenHandle(Map<String, String> attributes, Map<String, Interest> interests, boolean createSession, TokenWrapperOwner tokenWrapperOwner)", "testcase": false, "constructor": false, "invocations": ["getTokenHandle", "getCallTimeout", "getMessage"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}