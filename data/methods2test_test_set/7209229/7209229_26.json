{"test_class": {"identifier": "TestResourceVersionedSchemaSetProvider", "superclass": "", "interfaces": "", "fields": [], "file": "databus-core/databus-core-schemas/src/test/java/com/linkedin/databus2/schemas/TestResourceVersionedSchemaSetProvider.java"}, "test_case": {"identifier": "testStandardSchema", "parameters": "()", "modifiers": "@Test /** * NOTE: if this test is failing when run in Eclipse, run it once from the command to populate * the resources/ directory. * */ public", "return": "void", "body": "@Test\n  /**\n   * NOTE: if this test is failing when run in Eclipse, run it once from the command to populate\n   * the resources/ directory.\n   * */\n  public void testStandardSchema() throws Exception\n  {\n    ResourceVersionedSchemaSetProvider resourceProvider = new ResourceVersionedSchemaSetProvider(this.getClass().getClassLoader());\n    VersionedSchemaSet schemaSet = resourceProvider.loadSchemas();\n\n    VersionedSchema fakeExistingSchema = schemaSet.getLatestVersionByName(\"com.linkedin.events.example.fake.FakeSchema\");\n    Assert.assertNotNull(fakeExistingSchema);\n    Assert.assertTrue(fakeExistingSchema.getVersion() >= 2, \"version >= 2: \" + fakeExistingSchema.getVersion());\n\n    VersionedSchema personSchema = schemaSet.getLatestVersionByName(\"com.linkedin.events.example.person.Person\");\n    Assert.assertNotNull(personSchema);\n\n    VersionedSchema fakeNonExistingSchema = schemaSet.getLatestVersionByName(\"fake.schema\");\n    Assert.assertTrue(null == fakeNonExistingSchema);\n  }", "signature": "void testStandardSchema()", "full_signature": "@Test /** * NOTE: if this test is failing when run in Eclipse, run it once from the command to populate * the resources/ directory. * */ public void testStandardSchema()", "class_method_signature": "TestResourceVersionedSchemaSetProvider.testStandardSchema()", "testcase": true, "constructor": false, "invocations": ["getClassLoader", "getClass", "loadSchemas", "getLatestVersionByName", "assertNotNull", "assertTrue", "getVersion", "getVersion", "getLatestVersionByName", "assertNotNull", "getLatestVersionByName", "assertTrue"]}, "focal_class": {"identifier": "ResourceVersionedSchemaSetProvider", "superclass": "", "interfaces": "implements VersionedSchemaSetProvider", "fields": [{"original_string": "public static final String MODULE = ResourceVersionedSchemaSetProvider.class.getName();", "modifier": "public static final", "type": "String", "declarator": "MODULE = ResourceVersionedSchemaSetProvider.class.getName()", "var_name": "MODULE"}, {"original_string": "public static final Logger LOG = Logger.getLogger(MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(MODULE)", "var_name": "LOG"}, {"original_string": "public static final String INDEX_RESOURCE_NAME = \"index.schemas_registry\";", "modifier": "public static final", "type": "String", "declarator": "INDEX_RESOURCE_NAME = \"index.schemas_registry\"", "var_name": "INDEX_RESOURCE_NAME"}, {"original_string": "private final ClassLoader _classLoader;", "modifier": "private final", "type": "ClassLoader", "declarator": "_classLoader", "var_name": "_classLoader"}], "methods": [{"identifier": "ResourceVersionedSchemaSetProvider", "parameters": "(ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " ResourceVersionedSchemaSetProvider(ClassLoader classLoader)", "full_signature": "public  ResourceVersionedSchemaSetProvider(ClassLoader classLoader)", "class_method_signature": "ResourceVersionedSchemaSetProvider.ResourceVersionedSchemaSetProvider(ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "loadSchemas", "parameters": "()", "modifiers": "@Override public", "return": "VersionedSchemaSet", "signature": "VersionedSchemaSet loadSchemas()", "full_signature": "@Override public VersionedSchemaSet loadSchemas()", "class_method_signature": "ResourceVersionedSchemaSetProvider.loadSchemas()", "testcase": false, "constructor": false}, {"identifier": "readSchemaFromResource", "parameters": "(String resource)", "modifiers": "private", "return": "VersionedSchema", "signature": "VersionedSchema readSchemaFromResource(String resource)", "full_signature": "private VersionedSchema readSchemaFromResource(String resource)", "class_method_signature": "ResourceVersionedSchemaSetProvider.readSchemaFromResource(String resource)", "testcase": false, "constructor": false}, {"identifier": "readIndex", "parameters": "(BufferedReader indexReader)", "modifiers": "private", "return": "List<String>", "signature": "List<String> readIndex(BufferedReader indexReader)", "full_signature": "private List<String> readIndex(BufferedReader indexReader)", "class_method_signature": "ResourceVersionedSchemaSetProvider.readIndex(BufferedReader indexReader)", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-schemas/src/main/java/com/linkedin/databus2/schemas/ResourceVersionedSchemaSetProvider.java"}, "focal_method": {"identifier": "loadSchemas", "parameters": "()", "modifiers": "@Override public", "return": "VersionedSchemaSet", "body": "@Override\n  public VersionedSchemaSet loadSchemas()\n  {\n    VersionedSchemaSet result = new VersionedSchemaSet();\n\n    InputStream indexIns = null;\n    indexIns = _classLoader.getResourceAsStream(INDEX_RESOURCE_NAME);\n    if (null == indexIns)\n    {\n      LOG.info(\"resource not found: \" + INDEX_RESOURCE_NAME + \"; no schemas will be loaded\");\n    }\n    else\n    {\n      BufferedReader indexReader = null;\n      try\n      {\n        indexReader = new BufferedReader(new InputStreamReader(indexIns, \"UTF-8\"));\n\n        List<String> resourceNames = readIndex(indexReader);\n        LOG.info(\"schema resources found: \" + resourceNames);\n        for (String resource: resourceNames)\n        {\n          VersionedSchema schema = readSchemaFromResource(resource);\n          if (null != schema) result.add(schema);\n        }\n      }\n      catch (IOException ioe)\n      {\n        LOG.error(\"i/o error: \" + ioe.getMessage(), ioe);\n      }\n      finally\n      {\n        try {\n          indexIns.close();\n          if (null != indexReader) indexReader.close();\n        }\n        catch (IOException e1)\n        {\n          LOG.error(\"cleanup failed: \" + e1.getMessage(), e1);\n        }\n      }\n    }\n    return result;\n  }", "signature": "VersionedSchemaSet loadSchemas()", "full_signature": "@Override public VersionedSchemaSet loadSchemas()", "class_method_signature": "ResourceVersionedSchemaSetProvider.loadSchemas()", "testcase": false, "constructor": false, "invocations": ["getResourceAsStream", "info", "readIndex", "info", "readSchemaFromResource", "add", "error", "getMessage", "close", "close", "error", "getMessage"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}