{"test_class": {"identifier": "StormProcessingItemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int PARRALLELISM_HINT_2 = 2;", "modifier": "private static final", "type": "int", "declarator": "PARRALLELISM_HINT_2 = 2", "var_name": "PARRALLELISM_HINT_2"}, {"original_string": "private static final int PARRALLELISM_HINT_4 = 4;", "modifier": "private static final", "type": "int", "declarator": "PARRALLELISM_HINT_4 = 4", "var_name": "PARRALLELISM_HINT_4"}, {"original_string": "private static final String ID = \"id\";", "modifier": "private static final", "type": "String", "declarator": "ID = \"id\"", "var_name": "ID"}, {"original_string": "@Tested private StormProcessingItem pi;", "modifier": "@Tested private", "type": "StormProcessingItem", "declarator": "pi", "var_name": "pi"}, {"original_string": "@Mocked private Processor processor;", "modifier": "@Mocked private", "type": "Processor", "declarator": "processor", "var_name": "processor"}, {"original_string": "@Mocked private StormTopology topology;", "modifier": "@Mocked private", "type": "StormTopology", "declarator": "topology", "var_name": "topology"}, {"original_string": "@Mocked private TopologyBuilder stormBuilder = new TopologyBuilder();", "modifier": "@Mocked private", "type": "TopologyBuilder", "declarator": "stormBuilder = new TopologyBuilder()", "var_name": "stormBuilder"}], "file": "samoa-storm/src/test/java/com/yahoo/labs/samoa/topology/impl/StormProcessingItemTest.java"}, "test_case": {"identifier": "testAddToTopology", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddToTopology() {\n        new Expectations() {\n            {\n                topology.getStormBuilder();\n                result = stormBuilder;\n\n                stormBuilder.setBolt(ID, (IRichBolt) any, anyInt);\n                result = new MockUp<BoltDeclarer>() {\n                }.getMockInstance();\n            }\n        };\n\n        pi.addToTopology(topology, PARRALLELISM_HINT_4); // this parallelism hint is ignored\n\n        new Verifications() {\n            {\n                assertEquals(pi.getProcessor(), processor);\n                // TODO add methods to explore a topology and verify them\n                assertEquals(pi.getParallelism(), PARRALLELISM_HINT_2);\n                assertEquals(pi.getId(), ID);\n            }\n        };\n    }", "signature": "void testAddToTopology()", "full_signature": "@Test public void testAddToTopology()", "class_method_signature": "StormProcessingItemTest.testAddToTopology()", "testcase": true, "constructor": false, "invocations": ["getStormBuilder", "setBolt", "getMockInstance", "addToTopology", "assertEquals", "getProcessor", "assertEquals", "getParallelism", "assertEquals", "getId"]}, "focal_class": {"identifier": "StormProcessingItem", "superclass": "extends AbstractProcessingItem", "interfaces": "implements StormTopologyNode", "fields": [{"original_string": "private final ProcessingItemBolt piBolt;", "modifier": "private final", "type": "ProcessingItemBolt", "declarator": "piBolt", "var_name": "piBolt"}, {"original_string": "private BoltDeclarer piBoltDeclarer;", "modifier": "private", "type": "BoltDeclarer", "declarator": "piBoltDeclarer", "var_name": "piBoltDeclarer"}], "methods": [{"identifier": "StormProcessingItem", "parameters": "(Processor processor, int parallelismHint)", "modifiers": "", "return": "", "signature": " StormProcessingItem(Processor processor, int parallelismHint)", "full_signature": "  StormProcessingItem(Processor processor, int parallelismHint)", "class_method_signature": "StormProcessingItem.StormProcessingItem(Processor processor, int parallelismHint)", "testcase": false, "constructor": true}, {"identifier": "StormProcessingItem", "parameters": "(Processor processor, String friendlyId, int parallelismHint)", "modifiers": "", "return": "", "signature": " StormProcessingItem(Processor processor, String friendlyId, int parallelismHint)", "full_signature": "  StormProcessingItem(Processor processor, String friendlyId, int parallelismHint)", "class_method_signature": "StormProcessingItem.StormProcessingItem(Processor processor, String friendlyId, int parallelismHint)", "testcase": false, "constructor": true}, {"identifier": "addInputStream", "parameters": "(Stream inputStream, PartitioningScheme scheme)", "modifiers": "@Override protected", "return": "ProcessingItem", "signature": "ProcessingItem addInputStream(Stream inputStream, PartitioningScheme scheme)", "full_signature": "@Override protected ProcessingItem addInputStream(Stream inputStream, PartitioningScheme scheme)", "class_method_signature": "StormProcessingItem.addInputStream(Stream inputStream, PartitioningScheme scheme)", "testcase": false, "constructor": false}, {"identifier": "addToTopology", "parameters": "(StormTopology topology, int parallelismHint)", "modifiers": "@Override public", "return": "void", "signature": "void addToTopology(StormTopology topology, int parallelismHint)", "full_signature": "@Override public void addToTopology(StormTopology topology, int parallelismHint)", "class_method_signature": "StormProcessingItem.addToTopology(StormTopology topology, int parallelismHint)", "testcase": false, "constructor": false}, {"identifier": "createStream", "parameters": "()", "modifiers": "@Override public", "return": "StormStream", "signature": "StormStream createStream()", "full_signature": "@Override public StormStream createStream()", "class_method_signature": "StormProcessingItem.createStream()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "StormProcessingItem.getId()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StormProcessingItem.toString()", "testcase": false, "constructor": false}], "file": "samoa-storm/src/main/java/com/yahoo/labs/samoa/topology/impl/StormProcessingItem.java"}, "focal_method": {"identifier": "addToTopology", "parameters": "(StormTopology topology, int parallelismHint)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void addToTopology(StormTopology topology, int parallelismHint) {\n\t\tif(piBoltDeclarer != null){\n\t\t\t//throw exception that one PI only belong to one topology\n\t\t}else{\t\t\n\t\t\tTopologyBuilder stormBuilder = topology.getStormBuilder();\n\t\t\tthis.piBoltDeclarer = stormBuilder.setBolt(this.getName(), \n\t\t\t\t\tthis.piBolt, parallelismHint);\n\t\t}\t\n\t}", "signature": "void addToTopology(StormTopology topology, int parallelismHint)", "full_signature": "@Override public void addToTopology(StormTopology topology, int parallelismHint)", "class_method_signature": "StormProcessingItem.addToTopology(StormTopology topology, int parallelismHint)", "testcase": false, "constructor": false, "invocations": ["getStormBuilder", "setBolt", "getName"]}, "repository": {"repo_id": 13505122, "url": "https://github.com/YahooArchive/samoa", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 424, "size": 6642, "license": "licensed"}}