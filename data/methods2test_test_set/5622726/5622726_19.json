{"test_class": {"identifier": "UrlStripHtmlSanitizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final UrlStripHtmlSanitizer _sanitizer = new UrlStripHtmlSanitizer();", "modifier": "private final", "type": "UrlStripHtmlSanitizer", "declarator": "_sanitizer = new UrlStripHtmlSanitizer()", "var_name": "_sanitizer"}], "file": "inputvalidation/src/test/java/com/switchfly/inputvalidation/sanitizer/UrlStripHtmlSanitizerTest.java"}, "test_case": {"identifier": "testExecuteWithXSS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteWithXSS() throws Exception {\n        assertEquals(\"http://www.foo.com/path/page.cfm?a=1&num_rooms=1&children=0&int=VA&b=2&d=\", _sanitizer.execute(\n            \"http://www.foo.com/path/page.cfm?a=1&num_rooms=1&children=0&int=VA&b=2&d=%3C%2Fscript%3E%3Cscript%3Ealert%281%29%3C%2Fscript%3E\"));\n    }", "signature": "void testExecuteWithXSS()", "full_signature": "@Test public void testExecuteWithXSS()", "class_method_signature": "UrlStripHtmlSanitizerTest.testExecuteWithXSS()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "execute"]}, "focal_class": {"identifier": "UrlStripHtmlSanitizer", "superclass": "", "interfaces": "implements Sanitizer<String>", "fields": [{"original_string": "private static final String ENCODING = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "ENCODING = \"UTF-8\"", "var_name": "ENCODING"}, {"original_string": "private static final String PARAMETER_SEPARATOR = \"&\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER_SEPARATOR = \"&\"", "var_name": "PARAMETER_SEPARATOR"}, {"original_string": "private static final String NAME_VALUE_SEPARATOR = \"=\";", "modifier": "private static final", "type": "String", "declarator": "NAME_VALUE_SEPARATOR = \"=\"", "var_name": "NAME_VALUE_SEPARATOR"}], "methods": [{"identifier": "execute", "parameters": "(String content)", "modifiers": "@Override public", "return": "String", "signature": "String execute(String content)", "full_signature": "@Override public String execute(String content)", "class_method_signature": "UrlStripHtmlSanitizer.execute(String content)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(URI uri)", "modifiers": "public static", "return": "List<NameValuePair>", "signature": "List<NameValuePair> parse(URI uri)", "full_signature": "public static List<NameValuePair> parse(URI uri)", "class_method_signature": "UrlStripHtmlSanitizer.parse(URI uri)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String queryString)", "modifiers": "public static", "return": "List<NameValuePair>", "signature": "List<NameValuePair> parse(String queryString)", "full_signature": "public static List<NameValuePair> parse(String queryString)", "class_method_signature": "UrlStripHtmlSanitizer.parse(String queryString)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(List<NameValuePair> parameters, Scanner scanner)", "modifiers": "private static", "return": "void", "signature": "void parse(List<NameValuePair> parameters, Scanner scanner)", "full_signature": "private static void parse(List<NameValuePair> parameters, Scanner scanner)", "class_method_signature": "UrlStripHtmlSanitizer.parse(List<NameValuePair> parameters, Scanner scanner)", "testcase": false, "constructor": false}], "file": "inputvalidation/src/main/java/com/switchfly/inputvalidation/sanitizer/UrlStripHtmlSanitizer.java"}, "focal_method": {"identifier": "execute", "parameters": "(String content)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String execute(String content) {\n        if (StringUtils.isBlank(content)) {\n            return content;\n        }\n\n        URI uri;\n        try {\n            uri = new URI(content);\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n\n        List<NameValuePair> cleanedPairs = parse(uri);\n\n        String queryString = cleanedPairs.isEmpty() ? null : URLEncodedUtils.format(cleanedPairs, ENCODING);\n\n        try {\n            return URIUtils.createURI(uri.getScheme(), uri.getHost(), uri.getPort(), uri.getPath(), queryString, uri.getFragment()).toString();\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "String execute(String content)", "full_signature": "@Override public String execute(String content)", "class_method_signature": "UrlStripHtmlSanitizer.execute(String content)", "testcase": false, "constructor": false, "invocations": ["isBlank", "parse", "isEmpty", "format", "toString", "createURI", "getScheme", "getHost", "getPort", "getPath", "getFragment"]}, "repository": {"repo_id": 5622726, "url": "https://github.com/switchfly/switchfly-java", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 752, "license": "licensed"}}