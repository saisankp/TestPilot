{"test_class": {"identifier": "AssembleUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "opentracing-specialagent-util/src/test/java/io/opentracing/contrib/specialagent/AssembleUtilTest.java"}, "test_case": {"identifier": "testContainsAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testContainsAll() {\n    String[] a, b;\n\n    a = new String[] {\"a\", \"b\", \"c\", \"d\"};\n    b = new String[] {\"a\", \"b\", \"c\", \"d\"};\n    assertTrue(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"b\", \"c\", \"d\"};\n    b = new String[] {\"a\", \"b\", \"c\", \"d\"};\n    assertFalse(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"b\", \"c\", \"d\"};\n    b = new String[] {\"b\", \"c\", \"d\"};\n    assertTrue(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"b\", \"c\"};\n    b = new String[] {\"a\", \"b\", \"c\", \"d\"};\n    assertFalse(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"b\", \"c\", \"d\"};\n    b = new String[] {\"a\", \"b\", \"c\"};\n    assertTrue(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"b\", \"d\"};\n    b = new String[] {\"a\", \"b\", \"c\", \"d\"};\n    assertFalse(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"b\", \"c\", \"d\"};\n    b = new String[] {\"a\", \"b\", \"d\"};\n    assertTrue(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"c\", \"d\"};\n    b = new String[] {\"a\", \"b\", \"c\", \"d\"};\n    assertFalse(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"b\", \"c\", \"d\"};\n    b = new String[] {\"a\", \"c\", \"d\"};\n    assertTrue(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"d\"};\n    b = new String[] {\"a\", \"b\", \"c\", \"d\"};\n    assertFalse(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"b\", \"c\", \"d\"};\n    b = new String[] {\"a\", \"d\"};\n    assertTrue(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"c\", \"d\"};\n    b = new String[] {\"a\", \"b\", \"d\"};\n    assertFalse(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"b\", \"d\"};\n    b = new String[] {\"a\", \"c\", \"d\"};\n    assertFalse(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"c\", \"d\"};\n    b = new String[] {\"a\", \"b\", \"d\"};\n    assertFalse(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"b\"};\n    b = new String[] {\"a\", \"c\"};\n    assertFalse(AssembleUtil.containsAll(a, b));\n\n    a = new String[] {\"a\", \"b\"};\n    b = new String[] {\"c\", \"d\"};\n    assertFalse(AssembleUtil.containsAll(a, b));\n  }", "signature": "void testContainsAll()", "full_signature": "@Test public void testContainsAll()", "class_method_signature": "AssembleUtilTest.testContainsAll()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "containsAll", "assertFalse", "containsAll", "assertTrue", "containsAll", "assertFalse", "containsAll", "assertTrue", "containsAll", "assertFalse", "containsAll", "assertTrue", "containsAll", "assertFalse", "containsAll", "assertTrue", "containsAll", "assertFalse", "containsAll", "assertTrue", "containsAll", "assertFalse", "containsAll", "assertFalse", "containsAll", "assertFalse", "containsAll", "assertFalse", "containsAll", "assertFalse", "containsAll"]}, "focal_class": {"identifier": "AssembleUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(AssembleUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(AssembleUtil.class)", "var_name": "logger"}, {"original_string": "private static final int DEFAULT_SOCKET_BUFFER_SIZE = 65536;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_SOCKET_BUFFER_SIZE = 65536", "var_name": "DEFAULT_SOCKET_BUFFER_SIZE"}, {"original_string": "private static boolean propertiesLoaded = false;", "modifier": "private static", "type": "boolean", "declarator": "propertiesLoaded = false", "var_name": "propertiesLoaded"}], "methods": [{"identifier": "hasFileInJar", "parameters": "(final File jarFile, final String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasFileInJar(final File jarFile, final String name)", "full_signature": "public static boolean hasFileInJar(final File jarFile, final String name)", "class_method_signature": "AssembleUtil.hasFileInJar(final File jarFile, final String name)", "testcase": false, "constructor": false}, {"identifier": "readFileFromJar", "parameters": "(final File jarFile, final String name)", "modifiers": "public static", "return": "String", "signature": "String readFileFromJar(final File jarFile, final String name)", "full_signature": "public static String readFileFromJar(final File jarFile, final String name)", "class_method_signature": "AssembleUtil.readFileFromJar(final File jarFile, final String name)", "testcase": false, "constructor": false}, {"identifier": "getEntryFromJar", "parameters": "(final ZipFile zipFile, final String name)", "modifiers": "private static", "return": "ZipEntry", "signature": "ZipEntry getEntryFromJar(final ZipFile zipFile, final String name)", "full_signature": "private static ZipEntry getEntryFromJar(final ZipFile zipFile, final String name)", "class_method_signature": "AssembleUtil.getEntryFromJar(final ZipFile zipFile, final String name)", "testcase": false, "constructor": false}, {"identifier": "getLocations", "parameters": "(final Class<?> ... classes)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getLocations(final Class<?> ... classes)", "full_signature": "public static Set<String> getLocations(final Class<?> ... classes)", "class_method_signature": "AssembleUtil.getLocations(final Class<?> ... classes)", "testcase": false, "constructor": false}, {"identifier": "readBytes", "parameters": "(final URL url)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readBytes(final URL url)", "full_signature": "public static byte[] readBytes(final URL url)", "class_method_signature": "AssembleUtil.readBytes(final URL url)", "testcase": false, "constructor": false}, {"identifier": "readBytes", "parameters": "(final InputStream in)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readBytes(final InputStream in)", "full_signature": "public static byte[] readBytes(final InputStream in)", "class_method_signature": "AssembleUtil.readBytes(final InputStream in)", "testcase": false, "constructor": false}, {"identifier": "toIndentedString", "parameters": "(final Object[] a)", "modifiers": "public static", "return": "String", "signature": "String toIndentedString(final Object[] a)", "full_signature": "public static String toIndentedString(final Object[] a)", "class_method_signature": "AssembleUtil.toIndentedString(final Object[] a)", "testcase": false, "constructor": false}, {"identifier": "toIndentedString", "parameters": "(final Collection<?> l)", "modifiers": "public static", "return": "String", "signature": "String toIndentedString(final Collection<?> l)", "full_signature": "public static String toIndentedString(final Collection<?> l)", "class_method_signature": "AssembleUtil.toIndentedString(final Collection<?> l)", "testcase": false, "constructor": false}, {"identifier": "toIndentedString", "parameters": "(final Map<?,?> m)", "modifiers": "public static", "return": "String", "signature": "String toIndentedString(final Map<?,?> m)", "full_signature": "public static String toIndentedString(final Map<?,?> m)", "class_method_signature": "AssembleUtil.toIndentedString(final Map<?,?> m)", "testcase": false, "constructor": false}, {"identifier": "recurseDir", "parameters": "(final File dir, final Predicate<File> predicate)", "modifiers": "public static", "return": "boolean", "signature": "boolean recurseDir(final File dir, final Predicate<File> predicate)", "full_signature": "public static boolean recurseDir(final File dir, final Predicate<File> predicate)", "class_method_signature": "AssembleUtil.recurseDir(final File dir, final Predicate<File> predicate)", "testcase": false, "constructor": false}, {"identifier": "recurseDir", "parameters": "(final File dir, final Function<File,FileVisitResult> function)", "modifiers": "public static", "return": "FileVisitResult", "signature": "FileVisitResult recurseDir(final File dir, final Function<File,FileVisitResult> function)", "full_signature": "public static FileVisitResult recurseDir(final File dir, final Function<File,FileVisitResult> function)", "class_method_signature": "AssembleUtil.recurseDir(final File dir, final Function<File,FileVisitResult> function)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(final T[] a, final T[] b)", "modifiers": "public static", "return": "int", "signature": "int compare(final T[] a, final T[] b)", "full_signature": "public static int compare(final T[] a, final T[] b)", "class_method_signature": "AssembleUtil.compare(final T[] a, final T[] b)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(final List<T> a, final List<T> b)", "modifiers": "public static", "return": "int", "signature": "int compare(final List<T> a, final List<T> b)", "full_signature": "public static int compare(final List<T> a, final List<T> b)", "class_method_signature": "AssembleUtil.compare(final List<T> a, final List<T> b)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(final T[] a, final T[] b)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsAll(final T[] a, final T[] b)", "full_signature": "public static boolean containsAll(final T[] a, final T[] b)", "class_method_signature": "AssembleUtil.containsAll(final T[] a, final T[] b)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(final T[] a, final T[] b, final Comparator<T> c)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsAll(final T[] a, final T[] b, final Comparator<T> c)", "full_signature": "public static boolean containsAll(final T[] a, final T[] b, final Comparator<T> c)", "class_method_signature": "AssembleUtil.containsAll(final T[] a, final T[] b, final Comparator<T> c)", "testcase": false, "constructor": false}, {"identifier": "retain", "parameters": "(final T[] a, final T[] b, final int i, final int j, final int r)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T[]", "signature": "T[] retain(final T[] a, final T[] b, final int i, final int j, final int r)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T[] retain(final T[] a, final T[] b, final int i, final int j, final int r)", "class_method_signature": "AssembleUtil.retain(final T[] a, final T[] b, final int i, final int j, final int r)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(final T[] array)", "modifiers": "public static", "return": "T[]", "signature": "T[] sort(final T[] array)", "full_signature": "public static T[] sort(final T[] array)", "class_method_signature": "AssembleUtil.sort(final T[] array)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(final List<T> list)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> sort(final List<T> list)", "full_signature": "public static List<T> sort(final List<T> list)", "class_method_signature": "AssembleUtil.sort(final List<T> list)", "testcase": false, "constructor": false}, {"identifier": "getNameId", "parameters": "(final Object obj)", "modifiers": "public static", "return": "String", "signature": "String getNameId(final Object obj)", "full_signature": "public static String getNameId(final Object obj)", "class_method_signature": "AssembleUtil.getNameId(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "getSimpleNameId", "parameters": "(final Object obj)", "modifiers": "public static", "return": "String", "signature": "String getSimpleNameId(final Object obj)", "full_signature": "public static String getSimpleNameId(final Object obj)", "class_method_signature": "AssembleUtil.getSimpleNameId(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final Object[] a, final String del)", "modifiers": "public static", "return": "String", "signature": "String toString(final Object[] a, final String del)", "full_signature": "public static String toString(final Object[] a, final String del)", "class_method_signature": "AssembleUtil.toString(final Object[] a, final String del)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final Collection<?> c, final String del)", "modifiers": "public static", "return": "String", "signature": "String toString(final Collection<?> c, final String del)", "full_signature": "public static String toString(final Collection<?> c, final String del)", "class_method_signature": "AssembleUtil.toString(final Collection<?> c, final String del)", "testcase": false, "constructor": false}, {"identifier": "absorbProperties", "parameters": "(final String command)", "modifiers": "public static", "return": "void", "signature": "void absorbProperties(final String command)", "full_signature": "public static void absorbProperties(final String command)", "class_method_signature": "AssembleUtil.absorbProperties(final String command)", "testcase": false, "constructor": false}, {"identifier": "forEachClass", "parameters": "(final URL[] urls, final T arg, final BiConsumer<String,T> consumer)", "modifiers": "public static", "return": "void", "signature": "void forEachClass(final URL[] urls, final T arg, final BiConsumer<String,T> consumer)", "full_signature": "public static void forEachClass(final URL[] urls, final T arg, final BiConsumer<String,T> consumer)", "class_method_signature": "AssembleUtil.forEachClass(final URL[] urls, final T arg, final BiConsumer<String,T> consumer)", "testcase": false, "constructor": false}, {"identifier": "_toURL", "parameters": "(final File file)", "modifiers": "private static", "return": "URL", "signature": "URL _toURL(final File file)", "full_signature": "private static URL _toURL(final File file)", "class_method_signature": "AssembleUtil._toURL(final File file)", "testcase": false, "constructor": false}, {"identifier": "toURL", "parameters": "(final File file)", "modifiers": "public static", "return": "URL", "signature": "URL toURL(final File file)", "full_signature": "public static URL toURL(final File file)", "class_method_signature": "AssembleUtil.toURL(final File file)", "testcase": false, "constructor": false}, {"identifier": "toURLs", "parameters": "(final File ... files)", "modifiers": "public static", "return": "URL[]", "signature": "URL[] toURLs(final File ... files)", "full_signature": "public static URL[] toURLs(final File ... files)", "class_method_signature": "AssembleUtil.toURLs(final File ... files)", "testcase": false, "constructor": false}, {"identifier": "toURLs", "parameters": "(final List<File> files)", "modifiers": "public static", "return": "URL[]", "signature": "URL[] toURLs(final List<File> files)", "full_signature": "public static URL[] toURLs(final List<File> files)", "class_method_signature": "AssembleUtil.toURLs(final List<File> files)", "testcase": false, "constructor": false}, {"identifier": "toURLs", "parameters": "(final Collection<File> files)", "modifiers": "public static", "return": "URL[]", "signature": "URL[] toURLs(final Collection<File> files)", "full_signature": "public static URL[] toURLs(final Collection<File> files)", "class_method_signature": "AssembleUtil.toURLs(final Collection<File> files)", "testcase": false, "constructor": false}, {"identifier": "convertToRegex", "parameters": "(String pattern)", "modifiers": "public static", "return": "String", "signature": "String convertToRegex(String pattern)", "full_signature": "public static String convertToRegex(String pattern)", "class_method_signature": "AssembleUtil.convertToRegex(String pattern)", "testcase": false, "constructor": false}, {"identifier": "classNameToResource", "parameters": "(final String className)", "modifiers": "public static", "return": "String", "signature": "String classNameToResource(final String className)", "full_signature": "public static String classNameToResource(final String className)", "class_method_signature": "AssembleUtil.classNameToResource(final String className)", "testcase": false, "constructor": false}, {"identifier": "classNameToResource", "parameters": "(final Class<?> cls)", "modifiers": "public static", "return": "String", "signature": "String classNameToResource(final Class<?> cls)", "full_signature": "public static String classNameToResource(final Class<?> cls)", "class_method_signature": "AssembleUtil.classNameToResource(final Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "resourceToClassName", "parameters": "(final String resource)", "modifiers": "public static", "return": "String", "signature": "String resourceToClassName(final String resource)", "full_signature": "public static String resourceToClassName(final String resource)", "class_method_signature": "AssembleUtil.resourceToClassName(final String resource)", "testcase": false, "constructor": false}, {"identifier": "isSystemProperty", "parameters": "(final String key, final String deprecatedKey)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSystemProperty(final String key, final String deprecatedKey)", "full_signature": "public static boolean isSystemProperty(final String key, final String deprecatedKey)", "class_method_signature": "AssembleUtil.isSystemProperty(final String key, final String deprecatedKey)", "testcase": false, "constructor": false}, {"identifier": "convertToNameRegex", "parameters": "(String pattern)", "modifiers": "public static", "return": "Pattern", "signature": "Pattern convertToNameRegex(String pattern)", "full_signature": "public static Pattern convertToNameRegex(String pattern)", "class_method_signature": "AssembleUtil.convertToNameRegex(String pattern)", "testcase": false, "constructor": false}, {"identifier": "getSourceLocation", "parameters": "(final URL url, final String resourcePath)", "modifiers": "public static", "return": "File", "signature": "File getSourceLocation(final URL url, final String resourcePath)", "full_signature": "public static File getSourceLocation(final URL url, final String resourcePath)", "class_method_signature": "AssembleUtil.getSourceLocation(final URL url, final String resourcePath)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(final String path)", "modifiers": "public static", "return": "String", "signature": "String getName(final String path)", "full_signature": "public static String getName(final String path)", "class_method_signature": "AssembleUtil.getName(final String path)", "testcase": false, "constructor": false}, {"identifier": "loadProperties", "parameters": "(final Map<String,String> properties, final BufferedReader reader)", "modifiers": "private static", "return": "void", "signature": "void loadProperties(final Map<String,String> properties, final BufferedReader reader)", "full_signature": "private static void loadProperties(final Map<String,String> properties, final BufferedReader reader)", "class_method_signature": "AssembleUtil.loadProperties(final Map<String,String> properties, final BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "loadProperties", "parameters": "()", "modifiers": "static", "return": "void", "signature": "void loadProperties()", "full_signature": "static void loadProperties()", "class_method_signature": "AssembleUtil.loadProperties()", "testcase": false, "constructor": false}, {"identifier": "classPathToFiles", "parameters": "(final String classpath)", "modifiers": "public static", "return": "File[]", "signature": "File[] classPathToFiles(final String classpath)", "full_signature": "public static File[] classPathToFiles(final String classpath)", "class_method_signature": "AssembleUtil.classPathToFiles(final String classpath)", "testcase": false, "constructor": false}, {"identifier": "toURL", "parameters": "(final String path)", "modifiers": "public static", "return": "URL", "signature": "URL toURL(final String path)", "full_signature": "public static URL toURL(final String path)", "class_method_signature": "AssembleUtil.toURL(final String path)", "testcase": false, "constructor": false}, {"identifier": "AssembleUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " AssembleUtil()", "full_signature": "private  AssembleUtil()", "class_method_signature": "AssembleUtil.AssembleUtil()", "testcase": false, "constructor": true}], "file": "opentracing-specialagent-util/src/main/java/io/opentracing/contrib/specialagent/AssembleUtil.java"}, "focal_method": {"identifier": "containsAll", "parameters": "(final T[] a, final T[] b)", "modifiers": "public static", "return": "boolean", "body": "public static <T extends Comparable<? super T>>boolean containsAll(final T[] a, final T[] b) {\n    for (int i = 0, j = 0;;) {\n      if (j == b.length)\n        return true;\n\n      if (i == a.length)\n        return false;\n\n      final int comparison = a[i].compareTo(b[j]);\n      if (comparison > 0)\n        return false;\n\n      ++i;\n      if (comparison == 0)\n        ++j;\n    }\n  }", "signature": "boolean containsAll(final T[] a, final T[] b)", "full_signature": "public static boolean containsAll(final T[] a, final T[] b)", "class_method_signature": "AssembleUtil.containsAll(final T[] a, final T[] b)", "testcase": false, "constructor": false, "invocations": ["compareTo"]}, "repository": {"repo_id": 155277206, "url": "https://github.com/opentracing-contrib/java-specialagent", "stars": 88, "created": "10/29/2018 8:31:40 PM +00:00", "updates": "2020-01-27T16:00:44+00:00", "fork": "False", "license": "licensed"}}