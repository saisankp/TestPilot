{"test_class": {"identifier": "Slf4jLoggerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONFIG_KEY = \"someMethod()\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_KEY = \"someMethod()\"", "var_name": "CONFIG_KEY"}, {"original_string": "private static final Request REQUEST =\n      new RequestTemplate().method(HttpMethod.GET).target(\"http://api.example.com\")\n          .resolve(Collections.emptyMap()).request();", "modifier": "private static final", "type": "Request", "declarator": "REQUEST =\n      new RequestTemplate().method(HttpMethod.GET).target(\"http://api.example.com\")\n          .resolve(Collections.emptyMap()).request()", "var_name": "REQUEST"}, {"original_string": "private static final Response RESPONSE =\n      Response.builder()\n          .status(200)\n          .reason(\"OK\")\n          .request(Request.create(HttpMethod.GET, \"/api\", Collections.emptyMap(), null, Util.UTF_8))\n          .headers(Collections.<String, Collection<String>>emptyMap())\n          .body(new byte[0])\n          .build();", "modifier": "private static final", "type": "Response", "declarator": "RESPONSE =\n      Response.builder()\n          .status(200)\n          .reason(\"OK\")\n          .request(Request.create(HttpMethod.GET, \"/api\", Collections.emptyMap(), null, Util.UTF_8))\n          .headers(Collections.<String, Collection<String>>emptyMap())\n          .body(new byte[0])\n          .build()", "var_name": "RESPONSE"}, {"original_string": "@Rule\n  public final RecordingSimpleLogger slf4j = new RecordingSimpleLogger();", "modifier": "@Rule\n  public final", "type": "RecordingSimpleLogger", "declarator": "slf4j = new RecordingSimpleLogger()", "var_name": "slf4j"}, {"original_string": "private Slf4jLogger logger;", "modifier": "private", "type": "Slf4jLogger", "declarator": "logger", "var_name": "logger"}], "file": "slf4j/src/test/java/feign/slf4j/Slf4jLoggerTest.java"}, "test_case": {"identifier": "useFeignLoggerByDefault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void useFeignLoggerByDefault() throws Exception {\n    slf4j.logLevel(\"debug\");\n    slf4j.expectMessages(\n        \"DEBUG feign.Logger - [someMethod] This is my message\" + System.lineSeparator());\n\n    logger = new Slf4jLogger();\n    logger.log(CONFIG_KEY, \"This is my message\");\n  }", "signature": "void useFeignLoggerByDefault()", "full_signature": "@Test public void useFeignLoggerByDefault()", "class_method_signature": "Slf4jLoggerTest.useFeignLoggerByDefault()", "testcase": true, "constructor": false, "invocations": ["logLevel", "expectMessages", "lineSeparator", "log"]}, "focal_class": {"identifier": "Slf4jLogger", "superclass": "extends feign.Logger", "interfaces": "", "fields": [{"original_string": "private final Logger logger;", "modifier": "private final", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "Slf4jLogger", "parameters": "()", "modifiers": "public", "return": "", "signature": " Slf4jLogger()", "full_signature": "public  Slf4jLogger()", "class_method_signature": "Slf4jLogger.Slf4jLogger()", "testcase": false, "constructor": true}, {"identifier": "Slf4jLogger", "parameters": "(Class<?> clazz)", "modifiers": "public", "return": "", "signature": " Slf4jLogger(Class<?> clazz)", "full_signature": "public  Slf4jLogger(Class<?> clazz)", "class_method_signature": "Slf4jLogger.Slf4jLogger(Class<?> clazz)", "testcase": false, "constructor": true}, {"identifier": "Slf4jLogger", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " Slf4jLogger(String name)", "full_signature": "public  Slf4jLogger(String name)", "class_method_signature": "Slf4jLogger.Slf4jLogger(String name)", "testcase": false, "constructor": true}, {"identifier": "Slf4jLogger", "parameters": "(Logger logger)", "modifiers": "", "return": "", "signature": " Slf4jLogger(Logger logger)", "full_signature": "  Slf4jLogger(Logger logger)", "class_method_signature": "Slf4jLogger.Slf4jLogger(Logger logger)", "testcase": false, "constructor": true}, {"identifier": "logRequest", "parameters": "(String configKey, Level logLevel, Request request)", "modifiers": "@Override protected", "return": "void", "signature": "void logRequest(String configKey, Level logLevel, Request request)", "full_signature": "@Override protected void logRequest(String configKey, Level logLevel, Request request)", "class_method_signature": "Slf4jLogger.logRequest(String configKey, Level logLevel, Request request)", "testcase": false, "constructor": false}, {"identifier": "logAndRebufferResponse", "parameters": "(String configKey,\n                                            Level logLevel,\n                                            Response response,\n                                            long elapsedTime)", "modifiers": "@Override protected", "return": "Response", "signature": "Response logAndRebufferResponse(String configKey,\n                                            Level logLevel,\n                                            Response response,\n                                            long elapsedTime)", "full_signature": "@Override protected Response logAndRebufferResponse(String configKey,\n                                            Level logLevel,\n                                            Response response,\n                                            long elapsedTime)", "class_method_signature": "Slf4jLogger.logAndRebufferResponse(String configKey,\n                                            Level logLevel,\n                                            Response response,\n                                            long elapsedTime)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(String configKey, String format, Object... args)", "modifiers": "@Override protected", "return": "void", "signature": "void log(String configKey, String format, Object... args)", "full_signature": "@Override protected void log(String configKey, String format, Object... args)", "class_method_signature": "Slf4jLogger.log(String configKey, String format, Object... args)", "testcase": false, "constructor": false}], "file": "slf4j/src/main/java/feign/slf4j/Slf4jLogger.java"}, "focal_method": {"identifier": "log", "parameters": "(String configKey, String format, Object... args)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void log(String configKey, String format, Object... args) {\n    // Not using SLF4J's support for parameterized messages (even though it would be more efficient)\n    // because it would\n    // require the incoming message formats to be SLF4J-specific.\n    if (logger.isDebugEnabled()) {\n      logger.debug(String.format(methodTag(configKey) + format, args));\n    }\n  }", "signature": "void log(String configKey, String format, Object... args)", "full_signature": "@Override protected void log(String configKey, String format, Object... args)", "class_method_signature": "Slf4jLogger.log(String configKey, String format, Object... args)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "format", "methodTag"]}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}