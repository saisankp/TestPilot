{"test_class": {"identifier": "GrabberCollectionTest", "superclass": "extends AbstractCollectionTest", "interfaces": "", "fields": [], "file": "ontopia-engine/src/test/java/net/ontopia/utils/GrabberCollectionTest.java"}, "test_case": {"identifier": "testGrabberCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGrabberCollection() {\n    UpperCaseGrabber grbU = new UpperCaseGrabber();\n    testCollection(new GrabberCollection(getCollectionLow(intended_size), grbU), getCollection(intended_size), getCollection(intended_size - 5));\n    testCollection(new GrabberCollection(getCollectionLow(intended_size), grbU, getDeciders(intended_size)), getCollection(intended_size), getCollection(intended_size - 5));\n    intended_size = 10;\n  }", "signature": "void testGrabberCollection()", "full_signature": "@Test public void testGrabberCollection()", "class_method_signature": "GrabberCollectionTest.testGrabberCollection()", "testcase": true, "constructor": false, "invocations": ["testCollection", "getCollectionLow", "getCollection", "getCollection", "testCollection", "getCollectionLow", "getDeciders", "getCollection", "getCollection"]}, "focal_class": {"identifier": "GrabberCollection", "superclass": "", "interfaces": "implements Collection<G>, CachedIF", "fields": [{"original_string": "protected Collection<O> coll;", "modifier": "protected", "type": "Collection<O>", "declarator": "coll", "var_name": "coll"}, {"original_string": "protected GrabberIF<O, G> grabber;", "modifier": "protected", "type": "GrabberIF<O, G>", "declarator": "grabber", "var_name": "grabber"}, {"original_string": "protected DeciderIF<G> decider;", "modifier": "protected", "type": "DeciderIF<G>", "declarator": "decider", "var_name": "decider"}, {"original_string": "protected boolean grabbed;", "modifier": "protected", "type": "boolean", "declarator": "grabbed", "var_name": "grabbed"}, {"original_string": "protected Collection<G> grabbed_coll;", "modifier": "protected", "type": "Collection<G>", "declarator": "grabbed_coll", "var_name": "grabbed_coll"}], "methods": [{"identifier": "GrabberCollection", "parameters": "(Collection<O> coll, GrabberIF<O, G> grabber)", "modifiers": "public", "return": "", "signature": " GrabberCollection(Collection<O> coll, GrabberIF<O, G> grabber)", "full_signature": "public  GrabberCollection(Collection<O> coll, GrabberIF<O, G> grabber)", "class_method_signature": "GrabberCollection.GrabberCollection(Collection<O> coll, GrabberIF<O, G> grabber)", "testcase": false, "constructor": true}, {"identifier": "GrabberCollection", "parameters": "(Collection<O> coll, GrabberIF<O, G> grabber, DeciderIF<G> decider)", "modifiers": "public", "return": "", "signature": " GrabberCollection(Collection<O> coll, GrabberIF<O, G> grabber, DeciderIF<G> decider)", "full_signature": "public  GrabberCollection(Collection<O> coll, GrabberIF<O, G> grabber, DeciderIF<G> decider)", "class_method_signature": "GrabberCollection.GrabberCollection(Collection<O> coll, GrabberIF<O, G> grabber, DeciderIF<G> decider)", "testcase": false, "constructor": true}, {"identifier": "refresh", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void refresh()", "full_signature": "@Override public void refresh()", "class_method_signature": "GrabberCollection.refresh()", "testcase": false, "constructor": false}, {"identifier": "getCollection", "parameters": "()", "modifiers": "protected", "return": "Collection<G>", "signature": "Collection<G> getCollection()", "full_signature": "protected Collection<G> getCollection()", "class_method_signature": "GrabberCollection.getCollection()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "GrabberCollection.clear()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override public boolean contains(Object o)", "class_method_signature": "GrabberCollection.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsAll(Collection<?> c)", "full_signature": "@Override public boolean containsAll(Collection<?> c)", "class_method_signature": "GrabberCollection.containsAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "GrabberCollection.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "GrabberCollection.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<G>", "signature": "Iterator<G> iterator()", "full_signature": "@Override public Iterator<G> iterator()", "class_method_signature": "GrabberCollection.iterator()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "GrabberCollection.size()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "@Override public Object[] toArray()", "class_method_signature": "GrabberCollection.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(G[] a)", "modifiers": "@Override public", "return": "G[]", "signature": "G[] toArray(G[] a)", "full_signature": "@Override public G[] toArray(G[] a)", "class_method_signature": "GrabberCollection.toArray(G[] a)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(G o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(G o)", "full_signature": "@Override public boolean add(G o)", "class_method_signature": "GrabberCollection.add(G o)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Collection<? extends G> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(Collection<? extends G> c)", "full_signature": "@Override public boolean addAll(Collection<? extends G> c)", "class_method_signature": "GrabberCollection.addAll(Collection<? extends G> c)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object o)", "full_signature": "@Override public boolean remove(Object o)", "class_method_signature": "GrabberCollection.remove(Object o)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(Collection<?> c)", "full_signature": "@Override public boolean removeAll(Collection<?> c)", "class_method_signature": "GrabberCollection.removeAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean retainAll(Collection<?> c)", "full_signature": "@Override public boolean retainAll(Collection<?> c)", "class_method_signature": "GrabberCollection.retainAll(Collection<?> c)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/utils/GrabberCollection.java"}, "focal_method": {"identifier": "GrabberCollection", "parameters": "(Collection<O> coll, GrabberIF<O, G> grabber)", "modifiers": "public", "return": "", "body": "public GrabberCollection(Collection<O> coll, GrabberIF<O, G> grabber) {\n    this.coll = coll;\n    this.grabber = grabber;\n  }", "signature": " GrabberCollection(Collection<O> coll, GrabberIF<O, G> grabber)", "full_signature": "public  GrabberCollection(Collection<O> coll, GrabberIF<O, G> grabber)", "class_method_signature": "GrabberCollection.GrabberCollection(Collection<O> coll, GrabberIF<O, G> grabber)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}