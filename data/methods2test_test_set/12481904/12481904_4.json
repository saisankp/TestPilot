{"test_class": {"identifier": "AccountabilityTest", "superclass": "extends AbstractIntegrationTest", "interfaces": "", "fields": [], "file": "dayatang-hrm-organisation/src/test/java/org/dayatang/hrm/organisation/domain/AccountabilityTest.java"}, "test_case": {"identifier": "testFindAccountabilities", "parameters": "()", "modifiers": "@SuppressWarnings(\"rawtypes\") @Test public final", "return": "void", "body": "@SuppressWarnings(\"rawtypes\")\n\t@Test\n\tpublic final void testFindAccountabilities() {\n\t\tOrganisationUtils organisationUtils = new OrganisationUtils();\n\t\tDate date = DateUtils.date(2012, 1, 3);\n\t\tCompany company = organisationUtils.createCompany(\"\u603b\u516c\u53f8\", date);\n\t\tDepartment financial = organisationUtils.createDepartment(\"\u8d22\u52a1\u90e8\", company, date);\n\t\tEmployee employee = organisationUtils.createEmployee(\"\u5f20\u4e09\", date);\n\t\tEmployment employment = new Employment(company, employee, date);\n\t\temployment.save();\n\t\tList<Accountability> results = Accountability.findAccountabilities(Accountability.class, date);\n\t\t// \u65ad\u8a00\u627e\u5230\u6240\u6709\u7684\u5b50\u7c7b\u5b9e\u4f8b\u3002\n\t\tOrgLineMgmt lineMgmt = OrgLineMgmt.getByResponsible(financial, date);\n\t\tassertTrue(results.contains(lineMgmt));\n\t\tassertTrue(results.contains(employment));\n\t}", "signature": "void testFindAccountabilities()", "full_signature": "@SuppressWarnings(\"rawtypes\") @Test public final void testFindAccountabilities()", "class_method_signature": "AccountabilityTest.testFindAccountabilities()", "testcase": true, "constructor": false, "invocations": ["date", "createCompany", "createDepartment", "createEmployee", "save", "findAccountabilities", "getByResponsible", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "Accountability", "superclass": "extends AbstractEntity", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 3456398163374995470L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 3456398163374995470L", "var_name": "serialVersionUID"}, {"original_string": "@ManyToOne(targetEntity = Party.class, cascade = CascadeType.ALL)\n    @JoinColumn(name = \"commissioner_id\")\n    private C commissioner;", "modifier": "@ManyToOne(targetEntity = Party.class, cascade = CascadeType.ALL)\n    @JoinColumn(name = \"commissioner_id\")\n    private", "type": "C", "declarator": "commissioner", "var_name": "commissioner"}, {"original_string": "@ManyToOne(targetEntity = Party.class, cascade = CascadeType.ALL)\n    @JoinColumn(name = \"responsible_id\")\n    private R responsible;", "modifier": "@ManyToOne(targetEntity = Party.class, cascade = CascadeType.ALL)\n    @JoinColumn(name = \"responsible_id\")\n    private", "type": "R", "declarator": "responsible", "var_name": "responsible"}, {"original_string": "@Temporal(TemporalType.DATE)\n    @Column(name = \"from_date\")\n    private Date fromDate;", "modifier": "@Temporal(TemporalType.DATE)\n    @Column(name = \"from_date\")\n    private", "type": "Date", "declarator": "fromDate", "var_name": "fromDate"}, {"original_string": "@Temporal(TemporalType.DATE)\n    @Column(name = \"to_date\")\n    private Date toDate;", "modifier": "@Temporal(TemporalType.DATE)\n    @Column(name = \"to_date\")\n    private", "type": "Date", "declarator": "toDate", "var_name": "toDate"}], "methods": [{"identifier": "Accountability", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Accountability()", "full_signature": "protected  Accountability()", "class_method_signature": "Accountability.Accountability()", "testcase": false, "constructor": true}, {"identifier": "Accountability", "parameters": "(C commissioner, R responsible, Date fromDate)", "modifiers": "public", "return": "", "signature": " Accountability(C commissioner, R responsible, Date fromDate)", "full_signature": "public  Accountability(C commissioner, R responsible, Date fromDate)", "class_method_signature": "Accountability.Accountability(C commissioner, R responsible, Date fromDate)", "testcase": false, "constructor": true}, {"identifier": "getCommissioner", "parameters": "()", "modifiers": "public", "return": "C", "signature": "C getCommissioner()", "full_signature": "public C getCommissioner()", "class_method_signature": "Accountability.getCommissioner()", "testcase": false, "constructor": false}, {"identifier": "getResponsible", "parameters": "()", "modifiers": "public", "return": "R", "signature": "R getResponsible()", "full_signature": "public R getResponsible()", "class_method_signature": "Accountability.getResponsible()", "testcase": false, "constructor": false}, {"identifier": "getFromDate", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getFromDate()", "full_signature": "public Date getFromDate()", "class_method_signature": "Accountability.getFromDate()", "testcase": false, "constructor": false}, {"identifier": "getToDate", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getToDate()", "full_signature": "public Date getToDate()", "class_method_signature": "Accountability.getToDate()", "testcase": false, "constructor": false}, {"identifier": "businessKeys", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] businessKeys()", "full_signature": "@Override public String[] businessKeys()", "class_method_signature": "Accountability.businessKeys()", "testcase": false, "constructor": false}, {"identifier": "terminate", "parameters": "(Date date)", "modifiers": "public", "return": "void", "signature": "void terminate(Date date)", "full_signature": "public void terminate(Date date)", "class_method_signature": "Accountability.terminate(Date date)", "testcase": false, "constructor": false}, {"identifier": "findAccountabilities", "parameters": "(Class<T> accountabilityClass, Date date)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "List<T>", "signature": "List<T> findAccountabilities(Class<T> accountabilityClass, Date date)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static List<T> findAccountabilities(Class<T> accountabilityClass, Date date)", "class_method_signature": "Accountability.findAccountabilities(Class<T> accountabilityClass, Date date)", "testcase": false, "constructor": false}, {"identifier": "findAccountabilitiesByParty", "parameters": "(Party party, Date date)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "List<Accountability>", "signature": "List<Accountability> findAccountabilitiesByParty(Party party, Date date)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static List<Accountability> findAccountabilitiesByParty(Party party, Date date)", "class_method_signature": "Accountability.findAccountabilitiesByParty(Party party, Date date)", "testcase": false, "constructor": false}], "file": "dayatang-hrm-organisation/src/main/java/org/dayatang/hrm/organisation/domain/Accountability.java"}, "focal_method": {"identifier": "findAccountabilities", "parameters": "(Class<T> accountabilityClass, Date date)", "modifiers": "@SuppressWarnings(\"rawtypes\") public static", "return": "List<T>", "body": "@SuppressWarnings(\"rawtypes\")\n    public static <T extends Accountability> List<T> findAccountabilities(Class<T> accountabilityClass, Date date) {\n        return getRepository().createCriteriaQuery(accountabilityClass).le(\"fromDate\", date).gt(\"toDate\", date).list();\n    }", "signature": "List<T> findAccountabilities(Class<T> accountabilityClass, Date date)", "full_signature": "@SuppressWarnings(\"rawtypes\") public static List<T> findAccountabilities(Class<T> accountabilityClass, Date date)", "class_method_signature": "Accountability.findAccountabilities(Class<T> accountabilityClass, Date date)", "testcase": false, "constructor": false, "invocations": ["list", "gt", "le", "createCriteriaQuery", "getRepository"]}, "repository": {"repo_id": 12481904, "url": "https://github.com/dayatang/hrm-demo", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 80, "size": 853, "license": "licensed"}}