{"test_class": {"identifier": "InformationMappingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final InformationMapping<Integer> mapping = new InformationMapping<>(Integer.class);", "modifier": "static final", "type": "InformationMapping<Integer>", "declarator": "mapping = new InformationMapping<>(Integer.class)", "var_name": "mapping"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/information/InformationMappingTest.java"}, "test_case": {"identifier": "testSearchAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSearchAll() {\n        Map<String, Object> all = mapping.searchAll(3, \"*s*\", Object.class);\n        assertTrue(all.size() == 32);\n        Map<String, Integer> allInt = mapping.searchAll(3, \"*s*\", Integer.class);\n        assertTrue(allInt.size() == 21);\n    }", "signature": "void testSearchAll()", "full_signature": "@Test public void testSearchAll()", "class_method_signature": "InformationMappingTest.testSearchAll()", "testcase": true, "constructor": false, "invocations": ["searchAll", "assertTrue", "size", "searchAll", "assertTrue", "size"]}, "focal_class": {"identifier": "InformationMapping", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String LSTART = \"(\", LEND = \")\";", "modifier": "public static final", "type": "String", "declarator": "LSTART = \"(\"", "var_name": "LSTART"}, {"original_string": "private final LinkedHashMap<String, TFunction<S, ?>> map = new LinkedHashMap<>();", "modifier": "private final", "type": "LinkedHashMap<String, TFunction<S, ?>>", "declarator": "map = new LinkedHashMap<>()", "var_name": "map"}, {"original_string": "private final LinkedHashMap<String, TListFunction<S, ?>> lmap = new LinkedHashMap<>();", "modifier": "private final", "type": "LinkedHashMap<String, TListFunction<S, ?>>", "declarator": "lmap = new LinkedHashMap<>()", "var_name": "lmap"}, {"original_string": "private final Class<S> sourceClass;", "modifier": "private final", "type": "Class<S>", "declarator": "sourceClass", "var_name": "sourceClass"}], "methods": [{"identifier": "listKey", "parameters": "(String prefix, int item)", "modifiers": "public static", "return": "String", "signature": "String listKey(String prefix, int item)", "full_signature": "public static String listKey(String prefix, int item)", "class_method_signature": "InformationMapping.listKey(String prefix, int item)", "testcase": false, "constructor": false}, {"identifier": "wcKey", "parameters": "(String prefix, char wc)", "modifiers": "public static", "return": "String", "signature": "String wcKey(String prefix, char wc)", "full_signature": "public static String wcKey(String prefix, char wc)", "class_method_signature": "InformationMapping.wcKey(String prefix, char wc)", "testcase": false, "constructor": false}, {"identifier": "listItem", "parameters": "(String prefix, String key)", "modifiers": "public static", "return": "int", "signature": "int listItem(String prefix, String key)", "full_signature": "public static int listItem(String prefix, String key)", "class_method_signature": "InformationMapping.listItem(String prefix, String key)", "testcase": false, "constructor": false}, {"identifier": "isIParamItem", "parameters": "(String prefix, String key)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIParamItem(String prefix, String key)", "full_signature": "public static boolean isIParamItem(String prefix, String key)", "class_method_signature": "InformationMapping.isIParamItem(String prefix, String key)", "testcase": false, "constructor": false}, {"identifier": "InformationMapping", "parameters": "(Class<S> sourceClass)", "modifiers": "public", "return": "", "signature": " InformationMapping(Class<S> sourceClass)", "full_signature": "public  InformationMapping(Class<S> sourceClass)", "class_method_signature": "InformationMapping.InformationMapping(Class<S> sourceClass)", "testcase": false, "constructor": true}, {"identifier": "updateAll", "parameters": "(ClassLoader loader)", "modifiers": "public static", "return": "void", "signature": "void updateAll(ClassLoader loader)", "full_signature": "public static void updateAll(ClassLoader loader)", "class_method_signature": "InformationMapping.updateAll(ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Class sourceClass, ClassLoader loader)", "modifiers": "public static", "return": "boolean", "signature": "boolean update(Class sourceClass, ClassLoader loader)", "full_signature": "public static boolean update(Class sourceClass, ClassLoader loader)", "class_method_signature": "InformationMapping.update(Class sourceClass, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void update()", "full_signature": "public void update()", "class_method_signature": "InformationMapping.update()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(ClassLoader loader)", "modifiers": "public", "return": "void", "signature": "void update(ClassLoader loader)", "full_signature": "public void update(ClassLoader loader)", "class_method_signature": "InformationMapping.update(ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String name, Class<T> tclass, Function<S, T> extractor)", "modifiers": "public", "return": "void", "signature": "void set(String name, Class<T> tclass, Function<S, T> extractor)", "full_signature": "public void set(String name, Class<T> tclass, Function<S, T> extractor)", "class_method_signature": "InformationMapping.set(String name, Class<T> tclass, Function<S, T> extractor)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String name, Function<S, TsData> extractor)", "modifiers": "public", "return": "void", "signature": "void set(String name, Function<S, TsData> extractor)", "full_signature": "public void set(String name, Function<S, TsData> extractor)", "class_method_signature": "InformationMapping.set(String name, Function<S, TsData> extractor)", "testcase": false, "constructor": false}, {"identifier": "setList", "parameters": "(String prefix, int start, int end, Class<T> tclass, BiFunction<S, Integer, T> extractor)", "modifiers": "public", "return": "void", "signature": "void setList(String prefix, int start, int end, Class<T> tclass, BiFunction<S, Integer, T> extractor)", "full_signature": "public void setList(String prefix, int start, int end, Class<T> tclass, BiFunction<S, Integer, T> extractor)", "class_method_signature": "InformationMapping.setList(String prefix, int start, int end, Class<T> tclass, BiFunction<S, Integer, T> extractor)", "testcase": false, "constructor": false}, {"identifier": "setList", "parameters": "(String prefix, int start, int end, BiFunction<S, Integer, TsData> extractor)", "modifiers": "public", "return": "void", "signature": "void setList(String prefix, int start, int end, BiFunction<S, Integer, TsData> extractor)", "full_signature": "public void setList(String prefix, int start, int end, BiFunction<S, Integer, TsData> extractor)", "class_method_signature": "InformationMapping.setList(String prefix, int start, int end, BiFunction<S, Integer, TsData> extractor)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String prefix, int defparam, Class<T> tclass, BiFunction<S, Integer, T> extractor)", "modifiers": "public", "return": "void", "signature": "void set(String prefix, int defparam, Class<T> tclass, BiFunction<S, Integer, T> extractor)", "full_signature": "public void set(String prefix, int defparam, Class<T> tclass, BiFunction<S, Integer, T> extractor)", "class_method_signature": "InformationMapping.set(String prefix, int defparam, Class<T> tclass, BiFunction<S, Integer, T> extractor)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String prefix, int defparam, BiFunction<S, Integer, TsData> extractor)", "modifiers": "public", "return": "void", "signature": "void set(String prefix, int defparam, BiFunction<S, Integer, TsData> extractor)", "full_signature": "public void set(String prefix, int defparam, BiFunction<S, Integer, TsData> extractor)", "class_method_signature": "InformationMapping.set(String prefix, int defparam, BiFunction<S, Integer, TsData> extractor)", "testcase": false, "constructor": false}, {"identifier": "fillDictionary", "parameters": "(String prefix, Map<String, Class> dic, boolean compact)", "modifiers": "public", "return": "void", "signature": "void fillDictionary(String prefix, Map<String, Class> dic, boolean compact)", "full_signature": "public void fillDictionary(String prefix, Map<String, Class> dic, boolean compact)", "class_method_signature": "InformationMapping.fillDictionary(String prefix, Map<String, Class> dic, boolean compact)", "testcase": false, "constructor": false}, {"identifier": "lmapsize", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int lmapsize()", "full_signature": "private int lmapsize()", "class_method_signature": "InformationMapping.lmapsize()", "testcase": false, "constructor": false}, {"identifier": "keys", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] keys()", "full_signature": "public String[] keys()", "class_method_signature": "InformationMapping.keys()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String id)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(String id)", "full_signature": "public boolean contains(String id)", "class_method_signature": "InformationMapping.contains(String id)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(S source, String id, Class<T> tclass)", "modifiers": "public", "return": "T", "signature": "T getData(S source, String id, Class<T> tclass)", "full_signature": "public T getData(S source, String id, Class<T> tclass)", "class_method_signature": "InformationMapping.getData(S source, String id, Class<T> tclass)", "testcase": false, "constructor": false}, {"identifier": "searchAll", "parameters": "(S source, String pattern, Class<T> tclass)", "modifiers": "public", "return": "Map<String, T>", "signature": "Map<String, T> searchAll(S source, String pattern, Class<T> tclass)", "full_signature": "public Map<String, T> searchAll(S source, String pattern, Class<T> tclass)", "class_method_signature": "InformationMapping.searchAll(S source, String pattern, Class<T> tclass)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/information/InformationMapping.java"}, "focal_method": {"identifier": "searchAll", "parameters": "(S source, String pattern, Class<T> tclass)", "modifiers": "public", "return": "Map<String, T>", "body": "public <T> Map<String, T> searchAll(S source, String pattern, Class<T> tclass) {\n        LinkedHashMap<String, T> list = new LinkedHashMap<>();\n        WildCards wc = new WildCards(pattern);\n        synchronized (this) {\n            for (Entry<String, TFunction<S, ?>> x : map.entrySet()) {\n                if (wc.match(x.getKey())) {\n                    TFunction<S, ?> fn = x.getValue();\n                    if (tclass.isAssignableFrom(fn.targetClass)) {\n                        list.put(x.getKey(), (T) fn.extractor.apply(source));\n                    }\n                }\n            }\n            for (Entry<String, TListFunction<S, ?>> x : lmap.entrySet()) {\n                TListFunction<S, ?> fn = x.getValue();\n                if (tclass.isAssignableFrom(fn.targetClass)) {\n                    // far to be optimal... TO IMPROVE\n                    for (int i = fn.start; i <= fn.end; ++i) {\n                        String key = listKey(x.getKey(), i);\n                        if (wc.match(key)) {\n                            list.put(key, (T) fn.extractor.apply(source, i));\n                        }\n                    }\n                }\n            }\n        }\n        return list;\n    }", "signature": "Map<String, T> searchAll(S source, String pattern, Class<T> tclass)", "full_signature": "public Map<String, T> searchAll(S source, String pattern, Class<T> tclass)", "class_method_signature": "InformationMapping.searchAll(S source, String pattern, Class<T> tclass)", "testcase": false, "constructor": false, "invocations": ["entrySet", "match", "getKey", "getValue", "isAssignableFrom", "put", "getKey", "apply", "entrySet", "getValue", "isAssignableFrom", "listKey", "getKey", "match", "put", "apply"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}