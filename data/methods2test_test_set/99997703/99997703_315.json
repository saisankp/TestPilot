{"test_class": {"identifier": "EventUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/event/EventUtilTest.java"}, "test_case": {"identifier": "testEventTimeToString_PrimitiveDouble_MaxUnpaddedTime", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testEventTimeToString_PrimitiveDouble_MaxUnpaddedTime() {\n        assertEquals(\"9999-12-31 23:59:59.999\", EventUtil.eventTimeToString(253402300799999d));\n    }", "signature": "void testEventTimeToString_PrimitiveDouble_MaxUnpaddedTime()", "full_signature": "@Test void testEventTimeToString_PrimitiveDouble_MaxUnpaddedTime()", "class_method_signature": "EventUtilTest.testEventTimeToString_PrimitiveDouble_MaxUnpaddedTime()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "eventTimeToString"]}, "focal_class": {"identifier": "EventUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "dateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\")", "var_name": "dateTimeFormatter"}, {"original_string": "private static final DateTimeFormatter isoDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "isoDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")", "var_name": "isoDateTimeFormatter"}, {"original_string": "private static final DateTimeFormatter dateTimeWithoutMsFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "dateTimeWithoutMsFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")", "var_name": "dateTimeWithoutMsFormatter"}, {"original_string": "private static final ZoneId UTC = ZoneId.of(\"UTC\");", "modifier": "private static final", "type": "ZoneId", "declarator": "UTC = ZoneId.of(\"UTC\")", "var_name": "UTC"}, {"original_string": "private static final long MIN_TIMESTAMP = -62135596800000L;", "modifier": "private static final", "type": "long", "declarator": "MIN_TIMESTAMP = -62135596800000L", "var_name": "MIN_TIMESTAMP"}], "methods": [{"identifier": "eventTimeToFormat", "parameters": "(double eventTime, DateTimeFormatter dateTimeFormatter)", "modifiers": "private static", "return": "String", "signature": "String eventTimeToFormat(double eventTime, DateTimeFormatter dateTimeFormatter)", "full_signature": "private static String eventTimeToFormat(double eventTime, DateTimeFormatter dateTimeFormatter)", "class_method_signature": "EventUtil.eventTimeToFormat(double eventTime, DateTimeFormatter dateTimeFormatter)", "testcase": false, "constructor": false}, {"identifier": "roundToLong", "parameters": "(double eventTime)", "modifiers": "private static", "return": "long", "signature": "long roundToLong(double eventTime)", "full_signature": "private static long roundToLong(double eventTime)", "class_method_signature": "EventUtil.roundToLong(double eventTime)", "testcase": false, "constructor": false}, {"identifier": "eventTimeToFormat", "parameters": "(long eventTime, DateTimeFormatter dateTimeFormatter)", "modifiers": "private static", "return": "String", "signature": "String eventTimeToFormat(long eventTime, DateTimeFormatter dateTimeFormatter)", "full_signature": "private static String eventTimeToFormat(long eventTime, DateTimeFormatter dateTimeFormatter)", "class_method_signature": "EventUtil.eventTimeToFormat(long eventTime, DateTimeFormatter dateTimeFormatter)", "testcase": false, "constructor": false}, {"identifier": "eventTimeToString", "parameters": "(double eventTime)", "modifiers": "public static", "return": "String", "signature": "String eventTimeToString(double eventTime)", "full_signature": "public static String eventTimeToString(double eventTime)", "class_method_signature": "EventUtil.eventTimeToString(double eventTime)", "testcase": false, "constructor": false}, {"identifier": "eventTimeToString", "parameters": "(@Nullable Double eventTime)", "modifiers": "public static", "return": "String", "signature": "String eventTimeToString(@Nullable Double eventTime)", "full_signature": "public static String eventTimeToString(@Nullable Double eventTime)", "class_method_signature": "EventUtil.eventTimeToString(@Nullable Double eventTime)", "testcase": false, "constructor": false}, {"identifier": "eventTimeToString", "parameters": "(long eventTime)", "modifiers": "public static", "return": "String", "signature": "String eventTimeToString(long eventTime)", "full_signature": "public static String eventTimeToString(long eventTime)", "class_method_signature": "EventUtil.eventTimeToString(long eventTime)", "testcase": false, "constructor": false}, {"identifier": "eventTimeToString", "parameters": "(@Nullable Long eventTime)", "modifiers": "public static", "return": "String", "signature": "String eventTimeToString(@Nullable Long eventTime)", "full_signature": "public static String eventTimeToString(@Nullable Long eventTime)", "class_method_signature": "EventUtil.eventTimeToString(@Nullable Long eventTime)", "testcase": false, "constructor": false}, {"identifier": "eventTimeToIsoString", "parameters": "(double eventTime)", "modifiers": "public static", "return": "String", "signature": "String eventTimeToIsoString(double eventTime)", "full_signature": "public static String eventTimeToIsoString(double eventTime)", "class_method_signature": "EventUtil.eventTimeToIsoString(double eventTime)", "testcase": false, "constructor": false}, {"identifier": "eventTimeToStringWithoutMs", "parameters": "(double eventTime)", "modifiers": "public static", "return": "String", "signature": "String eventTimeToStringWithoutMs(double eventTime)", "full_signature": "public static String eventTimeToStringWithoutMs(double eventTime)", "class_method_signature": "EventUtil.eventTimeToStringWithoutMs(double eventTime)", "testcase": false, "constructor": false}, {"identifier": "durationToString", "parameters": "(double duration)", "modifiers": "public static", "return": "String", "signature": "String durationToString(double duration)", "full_signature": "public static String durationToString(double duration)", "class_method_signature": "EventUtil.durationToString(double duration)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/event/EventUtil.java"}, "focal_method": {"identifier": "eventTimeToString", "parameters": "(double eventTime)", "modifiers": "public static", "return": "String", "body": "public static String eventTimeToString(double eventTime) {\n        return eventTimeToFormat(eventTime, dateTimeFormatter);\n    }", "signature": "String eventTimeToString(double eventTime)", "full_signature": "public static String eventTimeToString(double eventTime)", "class_method_signature": "EventUtil.eventTimeToString(double eventTime)", "testcase": false, "constructor": false, "invocations": ["eventTimeToFormat"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}