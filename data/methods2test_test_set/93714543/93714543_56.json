{"test_class": {"identifier": "RocketChatVerifierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private RocketChatVerifier.VersionVerifier verifier;", "modifier": "@Mock\n    private", "type": "RocketChatVerifier.VersionVerifier", "declarator": "verifier", "var_name": "verifier"}, {"original_string": "@Mock\n    private SimpleCallback callback;", "modifier": "@Mock\n    private", "type": "SimpleCallback", "declarator": "callback", "var_name": "callback"}, {"original_string": "@Captor\n    ArgumentCaptor<String> versionCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<String>", "declarator": "versionCaptor", "var_name": "versionCaptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<RocketChatException> exceptionCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<RocketChatException>", "declarator": "exceptionCaptor", "var_name": "exceptionCaptor"}, {"original_string": "private DefaultMockServer mockServer;", "modifier": "private", "type": "DefaultMockServer", "declarator": "mockServer", "var_name": "mockServer"}, {"original_string": "private OkHttpClient client;", "modifier": "private", "type": "OkHttpClient", "declarator": "client", "var_name": "client"}, {"original_string": "private HttpUrl baseUrl;", "modifier": "private", "type": "HttpUrl", "declarator": "baseUrl", "var_name": "baseUrl"}], "file": "rocketchat-common/src/test/java/com/rocketchat/common/utils/RocketChatVerifierTest.java"}, "test_case": {"identifier": "shouldNotCallVersionVerifierOnNetworkError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotCallVersionVerifierOnNetworkError() {\n        mockServer.shutdown();\n        RocketChatVerifier.checkServerVersion(client, baseUrl.toString(), verifier, callback);\n\n        verify(verifier, timeout(1000).times(0))\n                .isValidVersion(versionCaptor.capture());\n    }", "signature": "void shouldNotCallVersionVerifierOnNetworkError()", "full_signature": "@Test public void shouldNotCallVersionVerifierOnNetworkError()", "class_method_signature": "RocketChatVerifierTest.shouldNotCallVersionVerifierOnNetworkError()", "testcase": true, "constructor": false, "invocations": ["shutdown", "checkServerVersion", "toString", "isValidVersion", "verify", "times", "timeout", "capture"]}, "focal_class": {"identifier": "RocketChatVerifier", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "checkServerVersion", "parameters": "(OkHttpClient client, String baseUrl,\n                                          final VersionVerifier versionVerifier,\n                                          final SimpleCallback callback)", "modifiers": "public static", "return": "void", "signature": "void checkServerVersion(OkHttpClient client, String baseUrl,\n                                          final VersionVerifier versionVerifier,\n                                          final SimpleCallback callback)", "full_signature": "public static void checkServerVersion(OkHttpClient client, String baseUrl,\n                                          final VersionVerifier versionVerifier,\n                                          final SimpleCallback callback)", "class_method_signature": "RocketChatVerifier.checkServerVersion(OkHttpClient client, String baseUrl,\n                                          final VersionVerifier versionVerifier,\n                                          final SimpleCallback callback)", "testcase": false, "constructor": false}], "file": "rocketchat-common/src/main/java/com/rocketchat/common/utils/RocketChatVerifier.java"}, "focal_method": {"identifier": "checkServerVersion", "parameters": "(OkHttpClient client, String baseUrl,\n                                          final VersionVerifier versionVerifier,\n                                          final SimpleCallback callback)", "modifiers": "public static", "return": "void", "body": "public static void checkServerVersion(OkHttpClient client, String baseUrl,\n                                          final VersionVerifier versionVerifier,\n                                          final SimpleCallback callback) {\n        checkNotNull(client, \"client == null\");\n        checkNotNull(baseUrl, \"baseUrl == null\");\n        checkNotNull(versionVerifier, \"versionVerifier == null\");\n        checkNotNull(callback, \"callback == null\");\n\n        final Moshi moshi = new Moshi.Builder().add(CommonJsonAdapterFactory.create()).build();\n\n        HttpUrl url = HttpUrl.parse(baseUrl).newBuilder()\n                .addPathSegment(\"api\")\n                .addPathSegment(\"info\")\n                .build();\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                callback.onError(new RocketChatNetworkErrorException(\"network error\", e));\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                try {\n                    if (!response.isSuccessful()) {\n                        JSONObject json = new JSONObject(response.body().string());\n                        String message = json.optString(\"error\");\n                        String errorType = json.optString(\"errorType\");\n                        callback.onError(new RocketChatApiException(response.code(), message,\n                                errorType));\n                    }\n\n                    JsonAdapter<ServerInfo> adapter = moshi.adapter(ServerInfo.class);\n                    ServerInfo info = adapter.fromJson(response.body().string());\n\n                    if (versionVerifier.isValidVersion(info.version())) {\n                        callback.onSuccess();\n                    } else {\n                        callback.onError(new RocketChatException(\"Unsupported version: \"\n                                + info.version()));\n                    }\n                } catch (IOException | JSONException e) {\n                    callback.onError(new RocketChatException(e.getMessage(), e));\n                }\n            }\n        });\n    }", "signature": "void checkServerVersion(OkHttpClient client, String baseUrl,\n                                          final VersionVerifier versionVerifier,\n                                          final SimpleCallback callback)", "full_signature": "public static void checkServerVersion(OkHttpClient client, String baseUrl,\n                                          final VersionVerifier versionVerifier,\n                                          final SimpleCallback callback)", "class_method_signature": "RocketChatVerifier.checkServerVersion(OkHttpClient client, String baseUrl,\n                                          final VersionVerifier versionVerifier,\n                                          final SimpleCallback callback)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "checkNotNull", "checkNotNull", "build", "add", "create", "build", "addPathSegment", "addPathSegment", "newBuilder", "parse", "build", "get", "url", "enqueue", "newCall", "onError", "isSuccessful", "string", "body", "optString", "optString", "onError", "code", "adapter", "fromJson", "string", "body", "isValidVersion", "version", "onSuccess", "onError", "version", "onError", "getMessage"]}, "repository": {"repo_id": 93714543, "url": "https://github.com/RocketChat/Rocket.Chat.Java.SDK", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 26, "size": 2962, "license": "licensed"}}