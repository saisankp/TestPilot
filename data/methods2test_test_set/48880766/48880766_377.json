{"test_class": {"identifier": "DataFrameJoinerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Table ONE_YEAR =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\n                      \"Date,1 Yr Treasury Rate\",\n                      \"\\\"Dec 1, 2017\\\",1.65%\",\n                      \"\\\"Nov 1, 2017\\\",1.56%\",\n                      \"\\\"Oct 1, 2017\\\",1.40%\",\n                      \"\\\"Sep 1, 2017\\\",1.28%\",\n                      \"\\\"Aug 1, 2017\\\",1.23%\",\n                      \"\\\"Jul 1, 2017\\\",1.22%\"),\n              \"1 Yr Treasury Rate\");", "modifier": "private static final", "type": "Table", "declarator": "ONE_YEAR =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\n                      \"Date,1 Yr Treasury Rate\",\n                      \"\\\"Dec 1, 2017\\\",1.65%\",\n                      \"\\\"Nov 1, 2017\\\",1.56%\",\n                      \"\\\"Oct 1, 2017\\\",1.40%\",\n                      \"\\\"Sep 1, 2017\\\",1.28%\",\n                      \"\\\"Aug 1, 2017\\\",1.23%\",\n                      \"\\\"Jul 1, 2017\\\",1.22%\"),\n              \"1 Yr Treasury Rate\")", "var_name": "ONE_YEAR"}, {"original_string": "private static final Table SP500 =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\n                      \"Date,S&P 500\",\n                      \"\\\"Nov 1, 2017\\\",2579.36\",\n                      \"\\\"Oct 1, 2017\\\",2521.20\",\n                      \"\\\"Sep 1, 2017\\\",2474.42\",\n                      \"\\\"Aug 1, 2017\\\",2477.10\",\n                      \"\\\"Jul 1, 2017\\\",2431.39\",\n                      \"\\\"Jun 1, 2017\\\",2430.06\"),\n              \"S&P 500\");", "modifier": "private static final", "type": "Table", "declarator": "SP500 =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\n                      \"Date,S&P 500\",\n                      \"\\\"Nov 1, 2017\\\",2579.36\",\n                      \"\\\"Oct 1, 2017\\\",2521.20\",\n                      \"\\\"Sep 1, 2017\\\",2474.42\",\n                      \"\\\"Aug 1, 2017\\\",2477.10\",\n                      \"\\\"Jul 1, 2017\\\",2431.39\",\n                      \"\\\"Jun 1, 2017\\\",2430.06\"),\n              \"S&P 500\")", "var_name": "SP500"}, {"original_string": "private static final Table ANIMAL_NAMES =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\n                      \"Animal,Name\",\n                      \"Pig,Bob\",\n                      \"Pig,James\",\n                      \"Horse,David\",\n                      \"Goat,Samantha\",\n                      \"Tigon,Rudhrani\",\n                      \"Rabbit,Taylor\"),\n              \"Animal Names\");", "modifier": "private static final", "type": "Table", "declarator": "ANIMAL_NAMES =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\n                      \"Animal,Name\",\n                      \"Pig,Bob\",\n                      \"Pig,James\",\n                      \"Horse,David\",\n                      \"Goat,Samantha\",\n                      \"Tigon,Rudhrani\",\n                      \"Rabbit,Taylor\"),\n              \"Animal Names\")", "var_name": "ANIMAL_NAMES"}, {"original_string": "private static final Table ANIMAL_FEED =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\n                      \"Animal,Feed\",\n                      \"Pig,Mush\",\n                      \"Horse,Hay\",\n                      \"Goat,Anything\",\n                      \"Guanaco,Grass\",\n                      \"Monkey,Banana\"),\n              \"Animal Feed\");", "modifier": "private static final", "type": "Table", "declarator": "ANIMAL_FEED =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\n                      \"Animal,Feed\",\n                      \"Pig,Mush\",\n                      \"Horse,Hay\",\n                      \"Goat,Anything\",\n                      \"Guanaco,Grass\",\n                      \"Monkey,Banana\"),\n              \"Animal Feed\")", "var_name": "ANIMAL_FEED"}, {"original_string": "private static final Table STRING_INDEXED_PEOPLE =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,First Name\", \"aa,Bob\", \"ab,James\", \"ac,David\", \"ad,Samantha\"),\n              \"People\");", "modifier": "private static final", "type": "Table", "declarator": "STRING_INDEXED_PEOPLE =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,First Name\", \"aa,Bob\", \"ab,James\", \"ac,David\", \"ad,Samantha\"),\n              \"People\")", "var_name": "STRING_INDEXED_PEOPLE"}, {"original_string": "private static final Table DOUBLE_INDEXED_PEOPLE =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,Name\", \"1.1,Bob\", \"2.1,James\", \"3.0,David\", \"4.0,Samantha\"),\n              \"People\");", "modifier": "private static final", "type": "Table", "declarator": "DOUBLE_INDEXED_PEOPLE =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,Name\", \"1.1,Bob\", \"2.1,James\", \"3.0,David\", \"4.0,Samantha\"),\n              \"People\")", "var_name": "DOUBLE_INDEXED_PEOPLE"}, {"original_string": "private static final Table DOUBLE_INDEXED_DOGS =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,Dog Name\", \"1.1,Spot\", \"3.0,Fido\", \"4.0,Sasha\", \"5.0,King\"),\n              \"Dogs\");", "modifier": "private static final", "type": "Table", "declarator": "DOUBLE_INDEXED_DOGS =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,Dog Name\", \"1.1,Spot\", \"3.0,Fido\", \"4.0,Sasha\", \"5.0,King\"),\n              \"Dogs\")", "var_name": "DOUBLE_INDEXED_DOGS"}, {"original_string": "private static final Table DOUBLE_INDEXED_CATS =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,Cat Name\", \"1.1,Spot2\", \"2.1,Fido\", \"6.0,Sasha\", \"8.0,King2\"),\n              \"Cats\");", "modifier": "private static final", "type": "Table", "declarator": "DOUBLE_INDEXED_CATS =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,Cat Name\", \"1.1,Spot2\", \"2.1,Fido\", \"6.0,Sasha\", \"8.0,King2\"),\n              \"Cats\")", "var_name": "DOUBLE_INDEXED_CATS"}, {"original_string": "private static final Table DOUBLE_INDEXED_FISH =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,Fish Name\", \"11.1,Spot3\", \"2.1,Fido\", \"4.0,Sasha\", \"6.0,King2\"),\n              \"Fish\");", "modifier": "private static final", "type": "Table", "declarator": "DOUBLE_INDEXED_FISH =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,Fish Name\", \"11.1,Spot3\", \"2.1,Fido\", \"4.0,Sasha\", \"6.0,King2\"),\n              \"Fish\")", "var_name": "DOUBLE_INDEXED_FISH"}, {"original_string": "private static final Table DOUBLE_INDEXED_MICE =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,Mice_Name\", \"2.1,Jerry\", \"3.0,Fido\", \"6.0,Sasha\", \"9.0,Market\"),\n              \"Mice\");", "modifier": "private static final", "type": "Table", "declarator": "DOUBLE_INDEXED_MICE =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,Mice_Name\", \"2.1,Jerry\", \"3.0,Fido\", \"6.0,Sasha\", \"9.0,Market\"),\n              \"Mice\")", "var_name": "DOUBLE_INDEXED_MICE"}, {"original_string": "private static final Table DOUBLE_INDEXED_BIRDS =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,Bird_Name\", \"2.1,JerryB\", \"3.0,FidoB\", \"6.25,SashaB\", \"9.0,Market\"),\n              \"Birds\");", "modifier": "private static final", "type": "Table", "declarator": "DOUBLE_INDEXED_BIRDS =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\"ID,Bird_Name\", \"2.1,JerryB\", \"3.0,FidoB\", \"6.25,SashaB\", \"9.0,Market\"),\n              \"Birds\")", "var_name": "DOUBLE_INDEXED_BIRDS"}, {"original_string": "private static final Table DUPLICATE_COL_NAME_DOGS =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\n                      \"ID,Dog Name, Good\",\n                      \"1.1,Spot,true\",\n                      \"3.0,Fido,true\",\n                      \"4.0,Sasha,true\",\n                      \"5.0,King,true\",\n                      \"1.1,Spot,false\",\n                      \"3.0,Fido,false\",\n                      \"4.0,Sasha,false\",\n                      \"5.0,King,false\"),\n              \"Dogs\");", "modifier": "private static final", "type": "Table", "declarator": "DUPLICATE_COL_NAME_DOGS =\n      Table.read()\n          .csv(\n              Joiner.on(System.lineSeparator())\n                  .join(\n                      \"ID,Dog Name, Good\",\n                      \"1.1,Spot,true\",\n                      \"3.0,Fido,true\",\n                      \"4.0,Sasha,true\",\n                      \"5.0,King,true\",\n                      \"1.1,Spot,false\",\n                      \"3.0,Fido,false\",\n                      \"4.0,Sasha,false\",\n                      \"5.0,King,false\"),\n              \"Dogs\")", "var_name": "DUPLICATE_COL_NAME_DOGS"}], "file": "core/src/test/java/tech/tablesaw/joining/DataFrameJoinerTest.java"}, "test_case": {"identifier": "innerJoinOnAge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void innerJoinOnAge() {\n    Table table1 = createANIMALHOMES();\n    Table table2 = createDOUBLEINDEXEDPEOPLENameHomeAgeMoveInDate();\n    Table joined = table1.joinOn(\"Age\").inner(table2, \"Age\", true);\n    assertEquals(9, joined.columnCount());\n    assertEquals(18, joined.rowCount());\n  }", "signature": "void innerJoinOnAge()", "full_signature": "@Test public void innerJoinOnAge()", "class_method_signature": "DataFrameJoinerTest.innerJoinOnAge()", "testcase": true, "constructor": false, "invocations": ["createANIMALHOMES", "createDOUBLEINDEXEDPEOPLENameHomeAgeMoveInDate", "inner", "joinOn", "assertEquals", "columnCount", "assertEquals", "rowCount"]}, "focal_class": {"identifier": "DataFrameJoiner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TABLE_ALIAS = \"T\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_ALIAS = \"T\"", "var_name": "TABLE_ALIAS"}, {"original_string": "private final Table table;", "modifier": "private final", "type": "Table", "declarator": "table", "var_name": "table"}, {"original_string": "private final String[] joinColumnNames;", "modifier": "private final", "type": "String[]", "declarator": "joinColumnNames", "var_name": "joinColumnNames"}, {"original_string": "private final List<Integer> joinColumnIndexes;", "modifier": "private final", "type": "List<Integer>", "declarator": "joinColumnIndexes", "var_name": "joinColumnIndexes"}, {"original_string": "private final AtomicInteger joinTableId = new AtomicInteger(2);", "modifier": "private final", "type": "AtomicInteger", "declarator": "joinTableId = new AtomicInteger(2)", "var_name": "joinTableId"}], "methods": [{"identifier": "DataFrameJoiner", "parameters": "(Table table, String... joinColumnNames)", "modifiers": "public", "return": "", "signature": " DataFrameJoiner(Table table, String... joinColumnNames)", "full_signature": "public  DataFrameJoiner(Table table, String... joinColumnNames)", "class_method_signature": "DataFrameJoiner.DataFrameJoiner(Table table, String... joinColumnNames)", "testcase": false, "constructor": true}, {"identifier": "getJoinIndexes", "parameters": "(Table table, String[] columnNames)", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> getJoinIndexes(Table table, String[] columnNames)", "full_signature": "private List<Integer> getJoinIndexes(Table table, String[] columnNames)", "class_method_signature": "DataFrameJoiner.getJoinIndexes(Table table, String[] columnNames)", "testcase": false, "constructor": false}, {"identifier": "inner", "parameters": "(Table... tables)", "modifiers": "public", "return": "Table", "signature": "Table inner(Table... tables)", "full_signature": "public Table inner(Table... tables)", "class_method_signature": "DataFrameJoiner.inner(Table... tables)", "testcase": false, "constructor": false}, {"identifier": "inner", "parameters": "(boolean allowDuplicateColumnNames, Table... tables)", "modifiers": "public", "return": "Table", "signature": "Table inner(boolean allowDuplicateColumnNames, Table... tables)", "full_signature": "public Table inner(boolean allowDuplicateColumnNames, Table... tables)", "class_method_signature": "DataFrameJoiner.inner(boolean allowDuplicateColumnNames, Table... tables)", "testcase": false, "constructor": false}, {"identifier": "inner", "parameters": "(Table table2, String col2Name)", "modifiers": "public", "return": "Table", "signature": "Table inner(Table table2, String col2Name)", "full_signature": "public Table inner(Table table2, String col2Name)", "class_method_signature": "DataFrameJoiner.inner(Table table2, String col2Name)", "testcase": false, "constructor": false}, {"identifier": "inner", "parameters": "(Table table2, String[] col2Names)", "modifiers": "public", "return": "Table", "signature": "Table inner(Table table2, String[] col2Names)", "full_signature": "public Table inner(Table table2, String[] col2Names)", "class_method_signature": "DataFrameJoiner.inner(Table table2, String[] col2Names)", "testcase": false, "constructor": false}, {"identifier": "inner", "parameters": "(Table table2, String col2Name, boolean allowDuplicateColumnNames)", "modifiers": "public", "return": "Table", "signature": "Table inner(Table table2, String col2Name, boolean allowDuplicateColumnNames)", "full_signature": "public Table inner(Table table2, String col2Name, boolean allowDuplicateColumnNames)", "class_method_signature": "DataFrameJoiner.inner(Table table2, String col2Name, boolean allowDuplicateColumnNames)", "testcase": false, "constructor": false}, {"identifier": "inner", "parameters": "(Table table2, boolean allowDuplicateColumnNames, String... col2Names)", "modifiers": "public", "return": "Table", "signature": "Table inner(Table table2, boolean allowDuplicateColumnNames, String... col2Names)", "full_signature": "public Table inner(Table table2, boolean allowDuplicateColumnNames, String... col2Names)", "class_method_signature": "DataFrameJoiner.inner(Table table2, boolean allowDuplicateColumnNames, String... col2Names)", "testcase": false, "constructor": false}, {"identifier": "joinInternal", "parameters": "(\n      Table table1,\n      Table table2,\n      JoinType joinType,\n      boolean allowDuplicates,\n      String... table2JoinColumnNames)", "modifiers": "private", "return": "Table", "signature": "Table joinInternal(\n      Table table1,\n      Table table2,\n      JoinType joinType,\n      boolean allowDuplicates,\n      String... table2JoinColumnNames)", "full_signature": "private Table joinInternal(\n      Table table1,\n      Table table2,\n      JoinType joinType,\n      boolean allowDuplicates,\n      String... table2JoinColumnNames)", "class_method_signature": "DataFrameJoiner.joinInternal(\n      Table table1,\n      Table table2,\n      JoinType joinType,\n      boolean allowDuplicates,\n      String... table2JoinColumnNames)", "testcase": false, "constructor": false}, {"identifier": "validateIndexes", "parameters": "(List<Index> table1Indexes, List<Index> table2Indexes)", "modifiers": "private", "return": "void", "signature": "void validateIndexes(List<Index> table1Indexes, List<Index> table2Indexes)", "full_signature": "private void validateIndexes(List<Index> table1Indexes, List<Index> table2Indexes)", "class_method_signature": "DataFrameJoiner.validateIndexes(List<Index> table1Indexes, List<Index> table2Indexes)", "testcase": false, "constructor": false}, {"identifier": "buildIndexesForJoinColumns", "parameters": "(List<Integer> joinColumnIndexes, Table table)", "modifiers": "private", "return": "List<Index>", "signature": "List<Index> buildIndexesForJoinColumns(List<Integer> joinColumnIndexes, Table table)", "full_signature": "private List<Index> buildIndexesForJoinColumns(List<Integer> joinColumnIndexes, Table table)", "class_method_signature": "DataFrameJoiner.buildIndexesForJoinColumns(List<Integer> joinColumnIndexes, Table table)", "testcase": false, "constructor": false}, {"identifier": "indexFor", "parameters": "(Table table, int colIndex)", "modifiers": "private", "return": "Index", "signature": "Index indexFor(Table table, int colIndex)", "full_signature": "private Index indexFor(Table table, int colIndex)", "class_method_signature": "DataFrameJoiner.indexFor(Table table, int colIndex)", "testcase": false, "constructor": false}, {"identifier": "selectionForColumn", "parameters": "(Column<?> valueColumn, int rowIndex, Index rawIndex)", "modifiers": "private", "return": "Selection", "signature": "Selection selectionForColumn(Column<?> valueColumn, int rowIndex, Index rawIndex)", "full_signature": "private Selection selectionForColumn(Column<?> valueColumn, int rowIndex, Index rawIndex)", "class_method_signature": "DataFrameJoiner.selectionForColumn(Column<?> valueColumn, int rowIndex, Index rawIndex)", "testcase": false, "constructor": false}, {"identifier": "createMultiColSelection", "parameters": "(\n      Table table1, int ri, List<Index> indexes, int selectionSize)", "modifiers": "private", "return": "Selection", "signature": "Selection createMultiColSelection(\n      Table table1, int ri, List<Index> indexes, int selectionSize)", "full_signature": "private Selection createMultiColSelection(\n      Table table1, int ri, List<Index> indexes, int selectionSize)", "class_method_signature": "DataFrameJoiner.createMultiColSelection(\n      Table table1, int ri, List<Index> indexes, int selectionSize)", "testcase": false, "constructor": false}, {"identifier": "newName", "parameters": "(String table2Alias, String columnName)", "modifiers": "private", "return": "String", "signature": "String newName(String table2Alias, String columnName)", "full_signature": "private String newName(String table2Alias, String columnName)", "class_method_signature": "DataFrameJoiner.newName(String table2Alias, String columnName)", "testcase": false, "constructor": false}, {"identifier": "fullOuter", "parameters": "(Table... tables)", "modifiers": "public", "return": "Table", "signature": "Table fullOuter(Table... tables)", "full_signature": "public Table fullOuter(Table... tables)", "class_method_signature": "DataFrameJoiner.fullOuter(Table... tables)", "testcase": false, "constructor": false}, {"identifier": "fullOuter", "parameters": "(boolean allowDuplicateColumnNames, Table... tables)", "modifiers": "public", "return": "Table", "signature": "Table fullOuter(boolean allowDuplicateColumnNames, Table... tables)", "full_signature": "public Table fullOuter(boolean allowDuplicateColumnNames, Table... tables)", "class_method_signature": "DataFrameJoiner.fullOuter(boolean allowDuplicateColumnNames, Table... tables)", "testcase": false, "constructor": false}, {"identifier": "fullOuter", "parameters": "(Table table2, String col2Name)", "modifiers": "public", "return": "Table", "signature": "Table fullOuter(Table table2, String col2Name)", "full_signature": "public Table fullOuter(Table table2, String col2Name)", "class_method_signature": "DataFrameJoiner.fullOuter(Table table2, String col2Name)", "testcase": false, "constructor": false}, {"identifier": "leftOuter", "parameters": "(Table... tables)", "modifiers": "public", "return": "Table", "signature": "Table leftOuter(Table... tables)", "full_signature": "public Table leftOuter(Table... tables)", "class_method_signature": "DataFrameJoiner.leftOuter(Table... tables)", "testcase": false, "constructor": false}, {"identifier": "leftOuter", "parameters": "(boolean allowDuplicateColumnNames, Table... tables)", "modifiers": "public", "return": "Table", "signature": "Table leftOuter(boolean allowDuplicateColumnNames, Table... tables)", "full_signature": "public Table leftOuter(boolean allowDuplicateColumnNames, Table... tables)", "class_method_signature": "DataFrameJoiner.leftOuter(boolean allowDuplicateColumnNames, Table... tables)", "testcase": false, "constructor": false}, {"identifier": "leftOuter", "parameters": "(Table table2, String[] col2Names)", "modifiers": "public", "return": "Table", "signature": "Table leftOuter(Table table2, String[] col2Names)", "full_signature": "public Table leftOuter(Table table2, String[] col2Names)", "class_method_signature": "DataFrameJoiner.leftOuter(Table table2, String[] col2Names)", "testcase": false, "constructor": false}, {"identifier": "leftOuter", "parameters": "(Table table2, String col2Name)", "modifiers": "public", "return": "Table", "signature": "Table leftOuter(Table table2, String col2Name)", "full_signature": "public Table leftOuter(Table table2, String col2Name)", "class_method_signature": "DataFrameJoiner.leftOuter(Table table2, String col2Name)", "testcase": false, "constructor": false}, {"identifier": "leftOuter", "parameters": "(Table table2, boolean allowDuplicateColumnNames, String... col2Names)", "modifiers": "public", "return": "Table", "signature": "Table leftOuter(Table table2, boolean allowDuplicateColumnNames, String... col2Names)", "full_signature": "public Table leftOuter(Table table2, boolean allowDuplicateColumnNames, String... col2Names)", "class_method_signature": "DataFrameJoiner.leftOuter(Table table2, boolean allowDuplicateColumnNames, String... col2Names)", "testcase": false, "constructor": false}, {"identifier": "rightOuter", "parameters": "(Table... tables)", "modifiers": "public", "return": "Table", "signature": "Table rightOuter(Table... tables)", "full_signature": "public Table rightOuter(Table... tables)", "class_method_signature": "DataFrameJoiner.rightOuter(Table... tables)", "testcase": false, "constructor": false}, {"identifier": "rightOuter", "parameters": "(boolean allowDuplicateColumnNames, Table... tables)", "modifiers": "public", "return": "Table", "signature": "Table rightOuter(boolean allowDuplicateColumnNames, Table... tables)", "full_signature": "public Table rightOuter(boolean allowDuplicateColumnNames, Table... tables)", "class_method_signature": "DataFrameJoiner.rightOuter(boolean allowDuplicateColumnNames, Table... tables)", "testcase": false, "constructor": false}, {"identifier": "rightOuter", "parameters": "(Table table2, String col2Name)", "modifiers": "public", "return": "Table", "signature": "Table rightOuter(Table table2, String col2Name)", "full_signature": "public Table rightOuter(Table table2, String col2Name)", "class_method_signature": "DataFrameJoiner.rightOuter(Table table2, String col2Name)", "testcase": false, "constructor": false}, {"identifier": "rightOuter", "parameters": "(Table table2, String[] col2Names)", "modifiers": "public", "return": "Table", "signature": "Table rightOuter(Table table2, String[] col2Names)", "full_signature": "public Table rightOuter(Table table2, String[] col2Names)", "class_method_signature": "DataFrameJoiner.rightOuter(Table table2, String[] col2Names)", "testcase": false, "constructor": false}, {"identifier": "rightOuter", "parameters": "(Table table2, boolean allowDuplicateColumnNames, String... col2Names)", "modifiers": "public", "return": "Table", "signature": "Table rightOuter(Table table2, boolean allowDuplicateColumnNames, String... col2Names)", "full_signature": "public Table rightOuter(Table table2, boolean allowDuplicateColumnNames, String... col2Names)", "class_method_signature": "DataFrameJoiner.rightOuter(Table table2, boolean allowDuplicateColumnNames, String... col2Names)", "testcase": false, "constructor": false}, {"identifier": "emptyTableFromColumns", "parameters": "(\n      Table destination,\n      Table table1,\n      Table table2,\n      JoinType joinType,\n      boolean allowDuplicates,\n      List<Integer> table2JoinColumnIndexes)", "modifiers": "private", "return": "Set<Integer>", "signature": "Set<Integer> emptyTableFromColumns(\n      Table destination,\n      Table table1,\n      Table table2,\n      JoinType joinType,\n      boolean allowDuplicates,\n      List<Integer> table2JoinColumnIndexes)", "full_signature": "private Set<Integer> emptyTableFromColumns(\n      Table destination,\n      Table table1,\n      Table table2,\n      JoinType joinType,\n      boolean allowDuplicates,\n      List<Integer> table2JoinColumnIndexes)", "class_method_signature": "DataFrameJoiner.emptyTableFromColumns(\n      Table destination,\n      Table table1,\n      Table table2,\n      JoinType joinType,\n      boolean allowDuplicates,\n      List<Integer> table2JoinColumnIndexes)", "testcase": false, "constructor": false}, {"identifier": "crossProduct", "parameters": "(\n      Table destination,\n      Table table1,\n      Table table2,\n      Selection table1Rows,\n      Selection table2Rows,\n      Set<Integer> ignoreColumns)", "modifiers": "@SuppressWarnings({\"rawtypes\", \"unchecked\"}) private", "return": "void", "signature": "void crossProduct(\n      Table destination,\n      Table table1,\n      Table table2,\n      Selection table1Rows,\n      Selection table2Rows,\n      Set<Integer> ignoreColumns)", "full_signature": "@SuppressWarnings({\"rawtypes\", \"unchecked\"}) private void crossProduct(\n      Table destination,\n      Table table1,\n      Table table2,\n      Selection table1Rows,\n      Selection table2Rows,\n      Set<Integer> ignoreColumns)", "class_method_signature": "DataFrameJoiner.crossProduct(\n      Table destination,\n      Table table1,\n      Table table2,\n      Selection table1Rows,\n      Selection table2Rows,\n      Set<Integer> ignoreColumns)", "testcase": false, "constructor": false}, {"identifier": "withMissingLeftJoin", "parameters": "(\n      Table destination, Table table1, Selection table1Rows, Set<Integer> ignoreColumns)", "modifiers": "@SuppressWarnings({\"rawtypes\", \"unchecked\"}) private", "return": "void", "signature": "void withMissingLeftJoin(\n      Table destination, Table table1, Selection table1Rows, Set<Integer> ignoreColumns)", "full_signature": "@SuppressWarnings({\"rawtypes\", \"unchecked\"}) private void withMissingLeftJoin(\n      Table destination, Table table1, Selection table1Rows, Set<Integer> ignoreColumns)", "class_method_signature": "DataFrameJoiner.withMissingLeftJoin(\n      Table destination, Table table1, Selection table1Rows, Set<Integer> ignoreColumns)", "testcase": false, "constructor": false}, {"identifier": "withMissingRight", "parameters": "(\n      Table destination,\n      int table1ColCount,\n      Table table2,\n      Selection table2Rows,\n      JoinType joinType,\n      List<Integer> col2Indexes,\n      Set<Integer> ignoreColumns)", "modifiers": "@SuppressWarnings({\"rawtypes\", \"unchecked\"}) private", "return": "void", "signature": "void withMissingRight(\n      Table destination,\n      int table1ColCount,\n      Table table2,\n      Selection table2Rows,\n      JoinType joinType,\n      List<Integer> col2Indexes,\n      Set<Integer> ignoreColumns)", "full_signature": "@SuppressWarnings({\"rawtypes\", \"unchecked\"}) private void withMissingRight(\n      Table destination,\n      int table1ColCount,\n      Table table2,\n      Selection table2Rows,\n      JoinType joinType,\n      List<Integer> col2Indexes,\n      Set<Integer> ignoreColumns)", "class_method_signature": "DataFrameJoiner.withMissingRight(\n      Table destination,\n      int table1ColCount,\n      Table table2,\n      Selection table2Rows,\n      JoinType joinType,\n      List<Integer> col2Indexes,\n      Set<Integer> ignoreColumns)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/joining/DataFrameJoiner.java"}, "focal_method": {"identifier": "inner", "parameters": "(Table... tables)", "modifiers": "public", "return": "Table", "body": "public Table inner(Table... tables) {\n    return inner(false, tables);\n  }", "signature": "Table inner(Table... tables)", "full_signature": "public Table inner(Table... tables)", "class_method_signature": "DataFrameJoiner.inner(Table... tables)", "testcase": false, "constructor": false, "invocations": ["inner"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}