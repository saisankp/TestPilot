{"test_class": {"identifier": "ServiceServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private ServiceServlet underTest;", "modifier": "@InjectMocks\n    private", "type": "ServiceServlet", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private HttpServletRequest req;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "req", "var_name": "req"}, {"original_string": "@Mock\n    private HttpServletResponse resp;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "resp", "var_name": "resp"}, {"original_string": "@Mock\n    private PrintWriter printWriter;", "modifier": "@Mock\n    private", "type": "PrintWriter", "declarator": "printWriter", "var_name": "printWriter"}, {"original_string": "@Mock\n    private ServiceMap serviceMap;", "modifier": "@Mock\n    private", "type": "ServiceMap", "declarator": "serviceMap", "var_name": "serviceMap"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/service/ServiceServletTest.java"}, "test_case": {"identifier": "testDoGetShouldReturnWithServiceListForEmptyServicePost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoGetShouldReturnWithServiceListForEmptyServicePost() throws ServletException, IOException {\n        //GIVEN\n        given(resp.getWriter()).willReturn(printWriter);\n        given(req.getRequestURI()).willReturn(\"/public/services/\");\n        given(req.getMethod()).willReturn(\"post\");\n        given(serviceMap.getMapAsResponse()).willReturn(\"blah\");\n        //WHEN\n        underTest.doGet(req, resp);\n        //THEN\n        verify(resp).setContentType(\"application/json\");\n        verify(resp).setStatus(HttpServletResponse.SC_NOT_FOUND);\n        String response = \"blah\";\n        verify(printWriter).write(response);\n        verify(printWriter).flush();\n        verify(printWriter).close();\n    }", "signature": "void testDoGetShouldReturnWithServiceListForEmptyServicePost()", "full_signature": "@Test public void testDoGetShouldReturnWithServiceListForEmptyServicePost()", "class_method_signature": "ServiceServletTest.testDoGetShouldReturnWithServiceListForEmptyServicePost()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getWriter", "willReturn", "given", "getRequestURI", "willReturn", "given", "getMethod", "willReturn", "given", "getMapAsResponse", "doGet", "setContentType", "verify", "setStatus", "verify", "write", "verify", "flush", "verify", "close", "verify"]}, "focal_class": {"identifier": "ServiceServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "private static final String LEADING_TEXT = \"/public/services/\";", "modifier": "private static final", "type": "String", "declarator": "LEADING_TEXT = \"/public/services/\"", "var_name": "LEADING_TEXT"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(ServiceServlet.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ServiceServlet.class)", "var_name": "logger"}, {"original_string": "private final ServiceMap serviceMap;", "modifier": "private final", "type": "ServiceMap", "declarator": "serviceMap", "var_name": "serviceMap"}], "methods": [{"identifier": "ServiceServlet", "parameters": "(ServiceMap serviceMap)", "modifiers": "@Autowired public", "return": "", "signature": " ServiceServlet(ServiceMap serviceMap)", "full_signature": "@Autowired public  ServiceServlet(ServiceMap serviceMap)", "class_method_signature": "ServiceServlet.ServiceServlet(ServiceMap serviceMap)", "testcase": false, "constructor": true}, {"identifier": "doGet", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "ServiceServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "doPost", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doPost(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "ServiceServlet.doPost(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "doPut", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doPut(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doPut(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "ServiceServlet.doPut(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "doDelete", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doDelete(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doDelete(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "ServiceServlet.doDelete(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "getUniqueId", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getUniqueId()", "full_signature": "private String getUniqueId()", "class_method_signature": "ServiceServlet.getUniqueId()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/service/ServiceServlet.java"}, "focal_method": {"identifier": "doGet", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {\n        //first identify the requested service\n        String requestUri = req.getRequestURI();\n        logger.info(\"Service call to: \" + requestUri + \", method: \" + req.getMethod());\n        int positionOfLeadingText = requestUri.indexOf(LEADING_TEXT);\n        int requestedServicePosition = positionOfLeadingText + LEADING_TEXT.length();\n        String requestedService = positionOfLeadingText >= 0 ? requestUri.substring(requestedServicePosition) : \"\";\n\n        //set the default answer\n        resp.setContentType(\"application/json\");\n        resp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        String response = null;\n\n        //call the built-in service, as necessary - later should be part of the registered services !!!\n        if (\"UniqueIdGenerator/uniqueId\".equalsIgnoreCase(requestedService) && \"get\".equalsIgnoreCase(req.getMethod())) {\n            // get a new unique id\n            response = getUniqueId();\n            resp.setStatus(HttpServletResponse.SC_OK);\n        }\n\n        //call further registered services\n        if (response == null) {\n            response = serviceMap.callExternalService(req, requestedService, resp);\n        }\n\n        //if we still don't have the response, then either provide the service map, or send back that it is unknown request\n        if (response == null) {\n            if (requestedService.length() > 0) {\n                response = \"{ \\\"unknownServiceCall\\\": \\\"\" + req.getMethod() + \" \" + requestedService + \"\\\" }\";\n            } else {\n                //call the built-in listing service (service-map)\n                response = serviceMap.getMapAsResponse();\n                resp.setStatus(HttpServletResponse.SC_OK);\n            }\n        }\n\n        //write the answer back\n        PrintWriter out = resp.getWriter();\n        out.write(response);\n        out.flush();\n        out.close();\n    }", "signature": "void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "ServiceServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false, "invocations": ["getRequestURI", "info", "getMethod", "indexOf", "length", "substring", "setContentType", "setStatus", "equalsIgnoreCase", "equalsIgnoreCase", "getMethod", "getUniqueId", "setStatus", "callExternalService", "length", "getMethod", "getMapAsResponse", "setStatus", "getWriter", "write", "flush", "close"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}