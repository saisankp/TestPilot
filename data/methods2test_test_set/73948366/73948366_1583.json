{"test_class": {"identifier": "JDBCObjectStoreFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zms/src/test/java/com/yahoo/athenz/zms/store/impl/JDBCObjectStoreFactoryTest.java"}, "test_case": {"identifier": "testCreateReadWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateReadWrite() {\n\n        System.setProperty(ZMSConsts.ZMS_PROP_JDBC_RW_STORE, \"jdbc:mysql://localhost\");\n        System.setProperty(ZMSConsts.ZMS_PROP_JDBC_RW_USER, \"user\");\n        System.setProperty(ZMSConsts.ZMS_PROP_JDBC_RW_PASSWORD, \"password\");\n\n        System.setProperty(ZMSConsts.ZMS_PROP_JDBC_RO_STORE, \"jdbc:mysql://localhost\");\n        System.setProperty(ZMSConsts.ZMS_PROP_JDBC_RO_USER, \"user\");\n        System.setProperty(ZMSConsts.ZMS_PROP_JDBC_RO_PASSWORD, \"password\");\n\n        PrivateKeyStore keyStore = Mockito.mock(PrivateKeyStore.class);\n        Mockito.doReturn(\"password\").when(keyStore).getApplicationSecret(\"jdbc\", \"password\");\n\n        JDBCObjectStoreFactory factory = new JDBCObjectStoreFactory();\n        ObjectStore store = factory.create(keyStore);\n        assertNotNull(store);\n    }", "signature": "void testCreateReadWrite()", "full_signature": "@Test public void testCreateReadWrite()", "class_method_signature": "JDBCObjectStoreFactoryTest.testCreateReadWrite()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "mock", "getApplicationSecret", "when", "doReturn", "create", "assertNotNull"]}, "focal_class": {"identifier": "JDBCObjectStoreFactory", "superclass": "", "interfaces": "implements ObjectStoreFactory", "fields": [{"original_string": "private static final String JDBC               = \"jdbc\";", "modifier": "private static final", "type": "String", "declarator": "JDBC               = \"jdbc\"", "var_name": "JDBC"}], "methods": [{"identifier": "create", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "ObjectStore", "signature": "ObjectStore create(PrivateKeyStore keyStore)", "full_signature": "@Override public ObjectStore create(PrivateKeyStore keyStore)", "class_method_signature": "JDBCObjectStoreFactory.create(PrivateKeyStore keyStore)", "testcase": false, "constructor": false}], "file": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/impl/JDBCObjectStoreFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "ObjectStore", "body": "@Override\n    public ObjectStore create(PrivateKeyStore keyStore) {\n        final String jdbcStore = System.getProperty(ZMSConsts.ZMS_PROP_JDBC_RW_STORE);\n        final String jdbcUser = System.getProperty(ZMSConsts.ZMS_PROP_JDBC_RW_USER);\n        final String password = System.getProperty(ZMSConsts.ZMS_PROP_JDBC_RW_PASSWORD, \"\");\n        final String jdbcAppName = System.getProperty(ZMSConsts.ZMS_PROP_JDBC_APP_NAME, JDBC);\n        String jdbcPassword = keyStore.getApplicationSecret(jdbcAppName, password);\n        \n        Properties readWriteProperties = new Properties();\n        readWriteProperties.setProperty(ZMSConsts.DB_PROP_USER, jdbcUser);\n        readWriteProperties.setProperty(ZMSConsts.DB_PROP_PASSWORD, jdbcPassword);\n        readWriteProperties.setProperty(ZMSConsts.DB_PROP_VERIFY_SERVER_CERT,\n                System.getProperty(ZMSConsts.ZMS_PROP_JDBC_VERIFY_SERVER_CERT, \"false\"));\n        readWriteProperties.setProperty(ZMSConsts.DB_PROP_USE_SSL,\n                System.getProperty(ZMSConsts.ZMS_PROP_JDBC_USE_SSL, \"false\"));\n        readWriteProperties.setProperty(ZMSConsts.DB_PROP_TLS_PROTOCOLS,\n                System.getProperty(ZMSConsts.ZMS_PROP_JDBC_TLS_VERSIONS, \"TLSv1.2,TLSv1.3\"));\n\n        PoolableDataSource readWriteSrc = DataSourceFactory.create(jdbcStore, readWriteProperties);\n        \n        // now check to see if we also have a read-only jdbc store configured\n        // if no username and password are specified then we'll use the\n        // read-write store credentials\n        \n        PoolableDataSource readOnlySrc = null;\n        String jdbcReadOnlyStore = System.getProperty(ZMSConsts.ZMS_PROP_JDBC_RO_STORE);\n        if (jdbcReadOnlyStore != null && jdbcReadOnlyStore.startsWith(\"jdbc:\")) {\n            final String jdbcReadOnlyUser = System.getProperty(ZMSConsts.ZMS_PROP_JDBC_RO_USER, jdbcUser);\n            final String readOnlyPassword = System.getProperty(ZMSConsts.ZMS_PROP_JDBC_RO_PASSWORD, password);\n            final String jdbcReadOnlyPassword = keyStore.getApplicationSecret(jdbcAppName, readOnlyPassword);\n            \n            Properties readOnlyProperties = new Properties();\n            readOnlyProperties.setProperty(ZMSConsts.DB_PROP_USER, jdbcReadOnlyUser);\n            readOnlyProperties.setProperty(ZMSConsts.DB_PROP_PASSWORD, jdbcReadOnlyPassword);\n            readOnlyProperties.setProperty(ZMSConsts.DB_PROP_VERIFY_SERVER_CERT,\n                    System.getProperty(ZMSConsts.ZMS_PROP_JDBC_VERIFY_SERVER_CERT, \"false\"));\n            readOnlyProperties.setProperty(ZMSConsts.DB_PROP_USE_SSL,\n                    System.getProperty(ZMSConsts.ZMS_PROP_JDBC_USE_SSL, \"false\"));\n            readOnlyProperties.setProperty(ZMSConsts.DB_PROP_TLS_PROTOCOLS,\n                    System.getProperty(ZMSConsts.ZMS_PROP_JDBC_TLS_VERSIONS, \"TLSv1.2,TLSv1.3\"));\n            readOnlySrc = DataSourceFactory.create(jdbcReadOnlyStore, readOnlyProperties);\n        }\n        \n        return new JDBCObjectStore(readWriteSrc, readOnlySrc);\n    }", "signature": "ObjectStore create(PrivateKeyStore keyStore)", "full_signature": "@Override public ObjectStore create(PrivateKeyStore keyStore)", "class_method_signature": "JDBCObjectStoreFactory.create(PrivateKeyStore keyStore)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getProperty", "getProperty", "getProperty", "getApplicationSecret", "setProperty", "setProperty", "setProperty", "getProperty", "setProperty", "getProperty", "setProperty", "getProperty", "create", "getProperty", "startsWith", "getProperty", "getProperty", "getApplicationSecret", "setProperty", "setProperty", "setProperty", "getProperty", "setProperty", "getProperty", "setProperty", "getProperty", "create"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}