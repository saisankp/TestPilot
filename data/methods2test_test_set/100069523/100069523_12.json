{"test_class": {"identifier": "CvidRequestHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final CvidRequestHandler HANDLER = new CvidRequestHandler();", "modifier": "private static final", "type": "CvidRequestHandler", "declarator": "HANDLER = new CvidRequestHandler()", "var_name": "HANDLER"}, {"original_string": "private EmbeddedChannel client;", "modifier": "private", "type": "EmbeddedChannel", "declarator": "client", "var_name": "client"}, {"original_string": "private CvidHandshakeCompletionEvent event;", "modifier": "private", "type": "CvidHandshakeCompletionEvent", "declarator": "event", "var_name": "event"}], "file": "module/com.sandpolis.core.net/src/test/java/com/sandpolis/core/net/cvid/CvidRequestHandlerTest.java"}, "test_case": {"identifier": "testInitiate", "parameters": "()", "modifiers": "@Test @DisplayName(\"Initiate a CVID handshake\")", "return": "void", "body": "@Test\n\t@DisplayName(\"Initiate a CVID handshake\")\n\tvoid testInitiate() {\n\t\tHANDLER.handshake(client, InstanceType.CLIENT, InstanceFlavor.MEGA, \"testuuid\");\n\n\t\tMSG msg = client.readOutbound();\n\t\tRQ_Cvid rq = msg.getRqCvid();\n\n\t\tassertTrue(rq != null);\n\t\tassertEquals(InstanceType.CLIENT, rq.getInstance());\n\t\tassertEquals(InstanceFlavor.MEGA, rq.getInstanceFlavor());\n\t\tassertEquals(\"testuuid\", rq.getUuid());\n\t}", "signature": "void testInitiate()", "full_signature": "@Test @DisplayName(\"Initiate a CVID handshake\") void testInitiate()", "class_method_signature": "CvidRequestHandlerTest.testInitiate()", "testcase": true, "constructor": false, "invocations": ["handshake", "readOutbound", "getRqCvid", "assertTrue", "assertEquals", "getInstance", "assertEquals", "getInstanceFlavor", "assertEquals", "getUuid"]}, "focal_class": {"identifier": "CvidRequestHandler", "superclass": "extends AbstractCvidHandler", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(CvidRequestHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CvidRequestHandler.class)", "var_name": "log"}], "methods": [{"identifier": "channelRead0", "parameters": "(ChannelHandlerContext ctx, MSG msg)", "modifiers": "@Override protected", "return": "void", "signature": "void channelRead0(ChannelHandlerContext ctx, MSG msg)", "full_signature": "@Override protected void channelRead0(ChannelHandlerContext ctx, MSG msg)", "class_method_signature": "CvidRequestHandler.channelRead0(ChannelHandlerContext ctx, MSG msg)", "testcase": false, "constructor": false}, {"identifier": "channelActive", "parameters": "(ChannelHandlerContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void channelActive(ChannelHandlerContext ctx)", "full_signature": "@Override public void channelActive(ChannelHandlerContext ctx)", "class_method_signature": "CvidRequestHandler.channelActive(ChannelHandlerContext ctx)", "testcase": false, "constructor": false}, {"identifier": "handshake", "parameters": "(Channel channel, InstanceType instance, InstanceFlavor flavor, String uuid)", "modifiers": "", "return": "void", "signature": "void handshake(Channel channel, InstanceType instance, InstanceFlavor flavor, String uuid)", "full_signature": " void handshake(Channel channel, InstanceType instance, InstanceFlavor flavor, String uuid)", "class_method_signature": "CvidRequestHandler.handshake(Channel channel, InstanceType instance, InstanceFlavor flavor, String uuid)", "testcase": false, "constructor": false}], "file": "module/com.sandpolis.core.net/src/main/java/com/sandpolis/core/net/cvid/CvidRequestHandler.java"}, "focal_method": {"identifier": "handshake", "parameters": "(Channel channel, InstanceType instance, InstanceFlavor flavor, String uuid)", "modifiers": "", "return": "void", "body": "void handshake(Channel channel, InstanceType instance, InstanceFlavor flavor, String uuid) {\n\t\tlog.debug(\"Initiating CVID handshake\");\n\t\tchannel.writeAndFlush(\n\t\t\t\tMsgUtil.rq(RQ_Cvid.newBuilder().setInstance(instance).setInstanceFlavor(flavor).setUuid(uuid)).build());\n\t}", "signature": "void handshake(Channel channel, InstanceType instance, InstanceFlavor flavor, String uuid)", "full_signature": " void handshake(Channel channel, InstanceType instance, InstanceFlavor flavor, String uuid)", "class_method_signature": "CvidRequestHandler.handshake(Channel channel, InstanceType instance, InstanceFlavor flavor, String uuid)", "testcase": false, "constructor": false, "invocations": ["debug", "writeAndFlush", "build", "rq", "setUuid", "setInstanceFlavor", "setInstance", "newBuilder"]}, "repository": {"repo_id": 100069523, "url": "https://github.com/Subterranean-Security/Sandpolis", "stars": 25, "created": "8/11/2017 8:55:30 PM +00:00", "updates": "2020-01-27T01:41:01+00:00", "fork": "False", "license": "licensed"}}