{"test_class": {"identifier": "EnvironmentUrlResourceProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    URLResourceProvider urlResourceProvider;", "modifier": "@Mock", "type": "URLResourceProvider", "declarator": "urlResourceProvider", "var_name": "urlResourceProvider"}, {"original_string": "@Mock\n    Injector injector;", "modifier": "@Mock", "type": "Injector", "declarator": "injector", "var_name": "injector"}], "file": "provider/core/src/test/java/org/arquillian/algeron/provider/core/deployment/EnvironmentUrlResourceProviderTest.java"}, "test_case": {"identifier": "should_resolve_url_with_default_provider", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_resolve_url_with_default_provider() throws NoSuchFieldException, MalformedURLException {\n\n        try {\n            System.setProperty(\"urlvar\", \"http://www.arquillian.org\");\n            EnvironmentUrlResourceProvider environmentUrlResourceProvider = new EnvironmentUrlResourceProvider();\n            environmentUrlResourceProvider.algeronProviderConfigurationInstance = () -> {\n                final HashMap<String, String> config = new HashMap<>();\n                config.put(\"skipDeployment\", \"false\");\n                return AlgeronProviderConfiguration.fromMap(config);\n            };\n\n            when(injector.inject(Matchers.any())).thenReturn(urlResourceProvider);\n            when(urlResourceProvider.doLookup(Matchers.any(), Matchers.any())).thenReturn(new URL(\"http://mocked.org\"));\n\n            environmentUrlResourceProvider.injectorInstance = () -> injector;\n\n            final Field urlField = TestWithFieldEnricher.class.getField(\"url\");\n            final Object url = environmentUrlResourceProvider.doLookup(urlField.getAnnotation(ArquillianResource.class),\n                urlField.getAnnotation(Environment.class));\n\n            assertThat(url).isInstanceOf(URL.class);\n            URL urlObject = (URL) url;\n            assertThat(urlObject).hasHost(\"mocked.org\");\n        } finally {\n            System.clearProperty(\"urlvar\");\n        }\n    }", "signature": "void should_resolve_url_with_default_provider()", "full_signature": "@Test public void should_resolve_url_with_default_provider()", "class_method_signature": "EnvironmentUrlResourceProviderTest.should_resolve_url_with_default_provider()", "testcase": true, "constructor": false, "invocations": ["setProperty", "put", "fromMap", "thenReturn", "when", "inject", "any", "thenReturn", "when", "doLookup", "any", "any", "getField", "doLookup", "getAnnotation", "getAnnotation", "isInstanceOf", "assertThat", "hasHost", "assertThat", "clearProperty"]}, "focal_class": {"identifier": "EnvironmentUrlResourceProvider", "superclass": "extends OperatesOnDeploymentAwareProvider", "interfaces": "", "fields": [{"original_string": "private static final String CUSTOM_SWARM_URL_PROVIDER =\n        \"org.wildfly.swarm.arquillian.resources.SwarmURIResourceProvider\";", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_SWARM_URL_PROVIDER =\n        \"org.wildfly.swarm.arquillian.resources.SwarmURIResourceProvider\"", "var_name": "CUSTOM_SWARM_URL_PROVIDER"}, {"original_string": "private static final String DEFAULT_URL_PROVIDER =\n        \"org.jboss.arquillian.container.test.impl.enricher.resource.URLResourceProvider\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_URL_PROVIDER =\n        \"org.jboss.arquillian.container.test.impl.enricher.resource.URLResourceProvider\"", "var_name": "DEFAULT_URL_PROVIDER"}, {"original_string": "@Inject\n    Instance<AlgeronProviderConfiguration> algeronProviderConfigurationInstance;", "modifier": "@Inject", "type": "Instance<AlgeronProviderConfiguration>", "declarator": "algeronProviderConfigurationInstance", "var_name": "algeronProviderConfigurationInstance"}, {"original_string": "@Inject\n    Instance<Injector> injectorInstance;", "modifier": "@Inject", "type": "Instance<Injector>", "declarator": "injectorInstance", "var_name": "injectorInstance"}], "methods": [{"identifier": "EnvironmentUrlResourceProvider", "parameters": "()", "modifiers": "public", "return": "", "signature": " EnvironmentUrlResourceProvider()", "full_signature": "public  EnvironmentUrlResourceProvider()", "class_method_signature": "EnvironmentUrlResourceProvider.EnvironmentUrlResourceProvider()", "testcase": false, "constructor": true}, {"identifier": "doLookup", "parameters": "(ArquillianResource resource, Annotation... qualifiers)", "modifiers": "@Override public", "return": "Object", "signature": "Object doLookup(ArquillianResource resource, Annotation... qualifiers)", "full_signature": "@Override public Object doLookup(ArquillianResource resource, Annotation... qualifiers)", "class_method_signature": "EnvironmentUrlResourceProvider.doLookup(ArquillianResource resource, Annotation... qualifiers)", "testcase": false, "constructor": false}, {"identifier": "resolveResourceProvider", "parameters": "(ArquillianResource resource, Annotation[] qualifiers)", "modifiers": "private", "return": "Object", "signature": "Object resolveResourceProvider(ArquillianResource resource, Annotation[] qualifiers)", "full_signature": "private Object resolveResourceProvider(ArquillianResource resource, Annotation[] qualifiers)", "class_method_signature": "EnvironmentUrlResourceProvider.resolveResourceProvider(ArquillianResource resource, Annotation[] qualifiers)", "testcase": false, "constructor": false}, {"identifier": "createDefaultUrlResourceProvider", "parameters": "()", "modifiers": "private", "return": "OperatesOnDeploymentAwareProvider", "signature": "OperatesOnDeploymentAwareProvider createDefaultUrlResourceProvider()", "full_signature": "private OperatesOnDeploymentAwareProvider createDefaultUrlResourceProvider()", "class_method_signature": "EnvironmentUrlResourceProvider.createDefaultUrlResourceProvider()", "testcase": false, "constructor": false}, {"identifier": "createSwarmUrlResourceProvider", "parameters": "()", "modifiers": "private", "return": "OperatesOnDeploymentAwareProvider", "signature": "OperatesOnDeploymentAwareProvider createSwarmUrlResourceProvider()", "full_signature": "private OperatesOnDeploymentAwareProvider createSwarmUrlResourceProvider()", "class_method_signature": "EnvironmentUrlResourceProvider.createSwarmUrlResourceProvider()", "testcase": false, "constructor": false}, {"identifier": "isSwarmUrlProviderOverriden", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isSwarmUrlProviderOverriden()", "full_signature": "private boolean isSwarmUrlProviderOverriden()", "class_method_signature": "EnvironmentUrlResourceProvider.isSwarmUrlProviderOverriden()", "testcase": false, "constructor": false}, {"identifier": "getEnvironmentAnnotation", "parameters": "(Annotation[] annotations)", "modifiers": "private", "return": "Optional<Environment>", "signature": "Optional<Environment> getEnvironmentAnnotation(Annotation[] annotations)", "full_signature": "private Optional<Environment> getEnvironmentAnnotation(Annotation[] annotations)", "class_method_signature": "EnvironmentUrlResourceProvider.getEnvironmentAnnotation(Annotation[] annotations)", "testcase": false, "constructor": false}, {"identifier": "resolveAnnotation", "parameters": "(Environment environmentVar)", "modifiers": "private", "return": "URL", "signature": "URL resolveAnnotation(Environment environmentVar)", "full_signature": "private URL resolveAnnotation(Environment environmentVar)", "class_method_signature": "EnvironmentUrlResourceProvider.resolveAnnotation(Environment environmentVar)", "testcase": false, "constructor": false}, {"identifier": "canProvide", "parameters": "(Class<?> type)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canProvide(Class<?> type)", "full_signature": "@Override public boolean canProvide(Class<?> type)", "class_method_signature": "EnvironmentUrlResourceProvider.canProvide(Class<?> type)", "testcase": false, "constructor": false}], "file": "provider/core/src/main/java/org/arquillian/algeron/provider/core/deployment/EnvironmentUrlResourceProvider.java"}, "focal_method": {"identifier": "doLookup", "parameters": "(ArquillianResource resource, Annotation... qualifiers)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object doLookup(ArquillianResource resource, Annotation... qualifiers) {\n        if (DeploymentEnabler.shouldEnableDeployment(algeronProviderConfigurationInstance.get())) {\n            return resolveResourceProvider(resource, qualifiers);\n        } else {\n            final Optional<Environment> environmentAnnotation = getEnvironmentAnnotation(qualifiers);\n            if (environmentAnnotation.isPresent()) {\n                return resolveAnnotation(environmentAnnotation.get());\n            } else {\n                return resolveResourceProvider(resource, qualifiers);\n            }\n        }\n    }", "signature": "Object doLookup(ArquillianResource resource, Annotation... qualifiers)", "full_signature": "@Override public Object doLookup(ArquillianResource resource, Annotation... qualifiers)", "class_method_signature": "EnvironmentUrlResourceProvider.doLookup(ArquillianResource resource, Annotation... qualifiers)", "testcase": false, "constructor": false, "invocations": ["shouldEnableDeployment", "get", "resolveResourceProvider", "getEnvironmentAnnotation", "isPresent", "resolveAnnotation", "get", "resolveResourceProvider"]}, "repository": {"repo_id": 67030086, "url": "https://github.com/arquillian/arquillian-algeron", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 661, "license": "licensed"}}