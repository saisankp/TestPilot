{"test_class": {"identifier": "ComputeUtilsTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [{"original_string": "private static final int NODE_COUNT = 10;", "modifier": "private static final", "type": "int", "declarator": "NODE_COUNT = 10", "var_name": "NODE_COUNT"}, {"original_string": "private Ignite ignite;", "modifier": "private", "type": "Ignite", "declarator": "ignite", "var_name": "ignite"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/dataset/impl/cache/util/ComputeUtilsTest.java"}, "test_case": {"identifier": "testInitContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitContext() {\n        ClusterNode node = grid(1).cluster().localNode();\n\n        String upstreamCacheName = \"CACHE_1_\" + UUID.randomUUID();\n        String datasetCacheName = \"CACHE_2_\" + UUID.randomUUID();\n\n        CacheConfiguration<Integer, Integer> upstreamCacheConfiguration = new CacheConfiguration<>();\n        upstreamCacheConfiguration.setName(upstreamCacheName);\n        upstreamCacheConfiguration.setAffinity(new TestAffinityFunction(node));\n        IgniteCache<Integer, Integer> upstreamCache = ignite.createCache(upstreamCacheConfiguration);\n\n        CacheConfiguration<Integer, Integer> datasetCacheConfiguration = new CacheConfiguration<>();\n        datasetCacheConfiguration.setName(datasetCacheName);\n        datasetCacheConfiguration.setAffinity(new TestAffinityFunction(node));\n        IgniteCache<Integer, Integer> datasetCache = ignite.createCache(datasetCacheConfiguration);\n\n        upstreamCache.put(42, 42);\n\n        ComputeUtils.<Integer, Integer, Integer>initContext(\n            ignite,\n            upstreamCacheName,\n            UpstreamTransformerBuilder.identity(),\n            (k, v) -> true,\n            datasetCacheName,\n            (env, upstream, upstreamSize) -> {\n\n                assertEquals(1, upstreamSize);\n\n                UpstreamEntry<Integer, Integer> e = upstream.next();\n                return e.getKey() + e.getValue();\n            },\n            TestUtils.testEnvBuilder(),\n            0,\n            0,\n            false,\n            DeployingContext.unitialized()\n        );\n\n        assertEquals(1, datasetCache.size());\n        assertEquals(84, datasetCache.get(0).intValue());\n    }", "signature": "void testInitContext()", "full_signature": "@Test public void testInitContext()", "class_method_signature": "ComputeUtilsTest.testInitContext()", "testcase": true, "constructor": false, "invocations": ["localNode", "cluster", "grid", "randomUUID", "randomUUID", "setName", "setAffinity", "createCache", "setName", "setAffinity", "createCache", "put", "initContext", "identity", "assertEquals", "next", "getKey", "getValue", "testEnvBuilder", "unitialized", "assertEquals", "size", "assertEquals", "intValue", "get"]}, "focal_class": {"identifier": "ComputeUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DATA_STORAGE_KEY_TEMPLATE = \"part_data_storage_%s\";", "modifier": "private static final", "type": "String", "declarator": "DATA_STORAGE_KEY_TEMPLATE = \"part_data_storage_%s\"", "var_name": "DATA_STORAGE_KEY_TEMPLATE"}, {"original_string": "private static final String ENVIRONMENT_STORAGE_KEY_TEMPLATE = \"part_environment_storage_%s\";", "modifier": "private static final", "type": "String", "declarator": "ENVIRONMENT_STORAGE_KEY_TEMPLATE = \"part_environment_storage_%s\"", "var_name": "ENVIRONMENT_STORAGE_KEY_TEMPLATE"}], "methods": [{"identifier": "affinityCallWithRetries", "parameters": "(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext)", "modifiers": "public static", "return": "Collection<R>", "signature": "Collection<R> affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext)", "full_signature": "public static Collection<R> affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext)", "class_method_signature": "ComputeUtils.affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, int interval, DeployingContext deployingContext)", "testcase": false, "constructor": false}, {"identifier": "affinityCallWithRetries", "parameters": "(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, DeployingContext deployingContext)", "modifiers": "public static", "return": "Collection<R>", "signature": "Collection<R> affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, DeployingContext deployingContext)", "full_signature": "public static Collection<R> affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, DeployingContext deployingContext)", "class_method_signature": "ComputeUtils.affinityCallWithRetries(Ignite ignite, Collection<String> cacheNames,\n        IgniteFunction<Integer, R> fun, int retries, DeployingContext deployingContext)", "testcase": false, "constructor": false}, {"identifier": "getLearningEnvironment", "parameters": "(Ignite ignite,\n        UUID datasetId,\n        int part,\n        LearningEnvironmentBuilder envBuilder)", "modifiers": "public static", "return": "LearningEnvironment", "signature": "LearningEnvironment getLearningEnvironment(Ignite ignite,\n        UUID datasetId,\n        int part,\n        LearningEnvironmentBuilder envBuilder)", "full_signature": "public static LearningEnvironment getLearningEnvironment(Ignite ignite,\n        UUID datasetId,\n        int part,\n        LearningEnvironmentBuilder envBuilder)", "class_method_signature": "ComputeUtils.getLearningEnvironment(Ignite ignite,\n        UUID datasetId,\n        int part,\n        LearningEnvironmentBuilder envBuilder)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(\n        Ignite ignite,\n        String upstreamCacheName, IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder,\n        String datasetCacheName, UUID datasetId,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment env,\n        boolean isKeepBinary)", "modifiers": "public static", "return": "D", "signature": "D getData(\n        Ignite ignite,\n        String upstreamCacheName, IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder,\n        String datasetCacheName, UUID datasetId,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment env,\n        boolean isKeepBinary)", "full_signature": "public static D getData(\n        Ignite ignite,\n        String upstreamCacheName, IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder,\n        String datasetCacheName, UUID datasetId,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment env,\n        boolean isKeepBinary)", "class_method_signature": "ComputeUtils.getData(\n        Ignite ignite,\n        String upstreamCacheName, IgniteBiPredicate<K, V> filter,\n        UpstreamTransformerBuilder transformerBuilder,\n        String datasetCacheName, UUID datasetId,\n        PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment env,\n        boolean isKeepBinary)", "testcase": false, "constructor": false}, {"identifier": "removeData", "parameters": "(Ignite ignite, UUID datasetId)", "modifiers": "public static", "return": "void", "signature": "void removeData(Ignite ignite, UUID datasetId)", "full_signature": "public static void removeData(Ignite ignite, UUID datasetId)", "class_method_signature": "ComputeUtils.removeData(Ignite ignite, UUID datasetId)", "testcase": false, "constructor": false}, {"identifier": "removeLearningEnv", "parameters": "(Ignite ignite, UUID datasetId)", "modifiers": "public static", "return": "void", "signature": "void removeLearningEnv(Ignite ignite, UUID datasetId)", "full_signature": "public static void removeLearningEnv(Ignite ignite, UUID datasetId)", "class_method_signature": "ComputeUtils.removeLearningEnv(Ignite ignite, UUID datasetId)", "testcase": false, "constructor": false}, {"identifier": "initContext", "parameters": "(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext)", "modifiers": "public static", "return": "void", "signature": "void initContext(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext)", "full_signature": "public static void initContext(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext)", "class_method_signature": "ComputeUtils.initContext(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "(Ignite ignite, String datasetCacheName, int part)", "modifiers": "public static", "return": "C", "signature": "C getContext(Ignite ignite, String datasetCacheName, int part)", "full_signature": "public static C getContext(Ignite ignite, String datasetCacheName, int part)", "class_method_signature": "ComputeUtils.getContext(Ignite ignite, String datasetCacheName, int part)", "testcase": false, "constructor": false}, {"identifier": "saveContext", "parameters": "(Ignite ignite, String datasetCacheName, int part, C ctx)", "modifiers": "public static", "return": "void", "signature": "void saveContext(Ignite ignite, String datasetCacheName, int part, C ctx)", "full_signature": "public static void saveContext(Ignite ignite, String datasetCacheName, int part, C ctx)", "class_method_signature": "ComputeUtils.saveContext(Ignite ignite, String datasetCacheName, int part, C ctx)", "testcase": false, "constructor": false}, {"identifier": "computeCount", "parameters": "(\n        IgniteCache<K, V> cache,\n        ScanQuery<K, V> qry,\n        UpstreamTransformer transformer)", "modifiers": "private static", "return": "long", "signature": "long computeCount(\n        IgniteCache<K, V> cache,\n        ScanQuery<K, V> qry,\n        UpstreamTransformer transformer)", "full_signature": "private static long computeCount(\n        IgniteCache<K, V> cache,\n        ScanQuery<K, V> qry,\n        UpstreamTransformer transformer)", "class_method_signature": "ComputeUtils.computeCount(\n        IgniteCache<K, V> cache,\n        ScanQuery<K, V> qry,\n        UpstreamTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "computeCount", "parameters": "(Iterator<?> iter)", "modifiers": "private static", "return": "long", "signature": "long computeCount(Iterator<?> iter)", "full_signature": "private static long computeCount(Iterator<?> iter)", "class_method_signature": "ComputeUtils.computeCount(Iterator<?> iter)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/util/ComputeUtils.java"}, "focal_method": {"identifier": "initContext", "parameters": "(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext)", "modifiers": "public static", "return": "void", "body": "public static <K, V, C extends Serializable> void initContext(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext) {\n\n        affinityCallWithRetries(ignite, Arrays.asList(datasetCacheName, upstreamCacheName), part -> {\n            Ignite locIgnite = Ignition.localIgnite();\n            LearningEnvironment env = envBuilder.buildForWorker(part);\n\n            IgniteCache<K, V> locUpstreamCache = locIgnite.cache(upstreamCacheName);\n\n            if (isKeepBinary)\n                locUpstreamCache = locUpstreamCache.withKeepBinary();\n\n            ScanQuery<K, V> qry = new ScanQuery<>();\n            qry.setLocal(true);\n            qry.setPartition(part);\n            qry.setFilter(filter);\n\n            C ctx;\n            UpstreamTransformer transformer = transformerBuilder.build(env);\n            UpstreamTransformer transformerCp = Utils.copy(transformer);\n\n            long cnt = computeCount(locUpstreamCache, qry, transformer);\n\n            try (QueryCursor<UpstreamEntry<K, V>> cursor = locUpstreamCache.query(qry,\n                e -> new UpstreamEntry<>(e.getKey(), e.getValue()))) {\n\n                Iterator<UpstreamEntry<K, V>> it = cursor.iterator();\n                Stream<UpstreamEntry> transformedStream = transformerCp.transform(Utils.asStream(it, cnt).map(x -> (UpstreamEntry)x));\n                it = Utils.asStream(transformedStream.iterator()).map(x -> (UpstreamEntry<K, V>)x).iterator();\n\n                Iterator<UpstreamEntry<K, V>> iter = new IteratorWithConcurrentModificationChecker<>(\n                    it,\n                    cnt,\n                    \"Cache expected to be not modified during dataset data building [partition=\" + part + ']');\n\n                ctx = ctxBuilder.build(env, iter, cnt);\n            }\n\n            IgniteCache<Integer, C> datasetCache = locIgnite.cache(datasetCacheName);\n\n            datasetCache.put(part, ctx);\n\n            return part;\n        }, retries, interval, deployingContext);\n    }", "signature": "void initContext(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext)", "full_signature": "public static void initContext(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext)", "class_method_signature": "ComputeUtils.initContext(\n        Ignite ignite,\n        String upstreamCacheName,\n        UpstreamTransformerBuilder transformerBuilder,\n        IgniteBiPredicate<K, V> filter,\n        String datasetCacheName,\n        PartitionContextBuilder<K, V, C> ctxBuilder,\n        LearningEnvironmentBuilder envBuilder,\n        int retries,\n        int interval,\n        boolean isKeepBinary,\n        DeployingContext deployingContext)", "testcase": false, "constructor": false, "invocations": ["affinityCallWithRetries", "asList", "localIgnite", "buildForWorker", "cache", "withKeepBinary", "setLocal", "setPartition", "setFilter", "build", "copy", "computeCount", "query", "getKey", "getValue", "iterator", "transform", "map", "asStream", "iterator", "map", "asStream", "iterator", "build", "cache", "put"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}