{"test_class": {"identifier": "EntitiesServiceImplTest", "superclass": "extends GaeTestBase", "interfaces": "", "fields": [{"original_string": "private static final String ALL_NAMESPACES = null;", "modifier": "private static final", "type": "String", "declarator": "ALL_NAMESPACES = null", "var_name": "ALL_NAMESPACES"}, {"original_string": "private static final String KIND_NAME = \"FakeEntity\";", "modifier": "private static final", "type": "String", "declarator": "KIND_NAME = \"FakeEntity\"", "var_name": "KIND_NAME"}, {"original_string": "private static final String PROPERTY_NAME = \"property-name\";", "modifier": "private static final", "type": "String", "declarator": "PROPERTY_NAME = \"property-name\"", "var_name": "PROPERTY_NAME"}, {"original_string": "private static final String UNINDEXED_PROPERTY_NAME = \"unindexed-property-name\";", "modifier": "private static final", "type": "String", "declarator": "UNINDEXED_PROPERTY_NAME = \"unindexed-property-name\"", "var_name": "UNINDEXED_PROPERTY_NAME"}, {"original_string": "private static final String A_NAME = \"a-name\";", "modifier": "private static final", "type": "String", "declarator": "A_NAME = \"a-name\"", "var_name": "A_NAME"}, {"original_string": "private static final String ANOTHER_NAME = \"another-name\";", "modifier": "private static final", "type": "String", "declarator": "ANOTHER_NAME = \"another-name\"", "var_name": "ANOTHER_NAME"}, {"original_string": "private static final String A_NAMESPACE = \"a-namespace\";", "modifier": "private static final", "type": "String", "declarator": "A_NAMESPACE = \"a-namespace\"", "var_name": "A_NAMESPACE"}, {"original_string": "private static final String DEFAULT_NAMESPACE = \"\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_NAMESPACE = \"\"", "var_name": "DEFAULT_NAMESPACE"}, {"original_string": "@Inject\n    EntitiesService entitiesService;", "modifier": "@Inject", "type": "EntitiesService", "declarator": "entitiesService", "var_name": "entitiesService"}], "file": "gae-studio/gae-studio-server/src/test/java/com/arcbees/gaestudio/server/service/visualizer/EntitiesServiceImplTest.java"}, "test_case": {"identifier": "createEmptyEntity_entityStored_shouldKeepIndexes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createEmptyEntity_entityStored_shouldKeepIndexes()\n            throws EntityNotFoundException, InstantiationException, IllegalAccessException {\n        // given\n        createEntityWithMultipleProperties();\n\n        // when\n        Entity entity = entitiesService.createEmptyEntity(KIND_NAME);\n\n        // then\n        assertNotNull(entity);\n        assertEquals(KIND_NAME, entity.getKind());\n        assertEquals(\"\", entity.getProperty(PROPERTY_NAME));\n        assertFalse(entity.isUnindexedProperty(PROPERTY_NAME));\n        assertEquals(\"\", entity.getProperty(UNINDEXED_PROPERTY_NAME));\n        assertTrue(entity.isUnindexedProperty(UNINDEXED_PROPERTY_NAME));\n    }", "signature": "void createEmptyEntity_entityStored_shouldKeepIndexes()", "full_signature": "@Test public void createEmptyEntity_entityStored_shouldKeepIndexes()", "class_method_signature": "EntitiesServiceImplTest.createEmptyEntity_entityStored_shouldKeepIndexes()", "testcase": true, "constructor": false, "invocations": ["createEntityWithMultipleProperties", "createEmptyEntity", "assertNotNull", "assertEquals", "getKind", "assertEquals", "getProperty", "assertFalse", "isUnindexedProperty", "assertEquals", "getProperty", "assertTrue", "isUnindexedProperty"]}, "focal_class": {"identifier": "EntitiesServiceImpl", "superclass": "", "interfaces": "implements EntitiesService", "fields": [{"original_string": "private final DatastoreHelper datastoreHelper;", "modifier": "private final", "type": "DatastoreHelper", "declarator": "datastoreHelper", "var_name": "datastoreHelper"}, {"original_string": "private final DefaultValueGenerator defaultValueGenerator;", "modifier": "private final", "type": "DefaultValueGenerator", "declarator": "defaultValueGenerator", "var_name": "defaultValueGenerator"}, {"original_string": "private final DatastoreCountProvider countProvider;", "modifier": "private final", "type": "DatastoreCountProvider", "declarator": "countProvider", "var_name": "countProvider"}], "methods": [{"identifier": "EntitiesServiceImpl", "parameters": "(\n            DatastoreHelper datastoreHelper,\n            DefaultValueGenerator defaultValueGenerator,\n            DatastoreCountProvider countProvider)", "modifiers": "@Inject", "return": "", "signature": " EntitiesServiceImpl(\n            DatastoreHelper datastoreHelper,\n            DefaultValueGenerator defaultValueGenerator,\n            DatastoreCountProvider countProvider)", "full_signature": "@Inject  EntitiesServiceImpl(\n            DatastoreHelper datastoreHelper,\n            DefaultValueGenerator defaultValueGenerator,\n            DatastoreCountProvider countProvider)", "class_method_signature": "EntitiesServiceImpl.EntitiesServiceImpl(\n            DatastoreHelper datastoreHelper,\n            DefaultValueGenerator defaultValueGenerator,\n            DatastoreCountProvider countProvider)", "testcase": false, "constructor": true}, {"identifier": "getEntities", "parameters": "(String kind, String namespace, Integer offset, Integer limit)", "modifiers": "@Override public", "return": "Iterable<Entity>", "signature": "Iterable<Entity> getEntities(String kind, String namespace, Integer offset, Integer limit)", "full_signature": "@Override public Iterable<Entity> getEntities(String kind, String namespace, Integer offset, Integer limit)", "class_method_signature": "EntitiesServiceImpl.getEntities(String kind, String namespace, Integer offset, Integer limit)", "testcase": false, "constructor": false}, {"identifier": "getEntities", "parameters": "(List<Key> keys)", "modifiers": "@Override public", "return": "Collection<Entity>", "signature": "Collection<Entity> getEntities(List<Key> keys)", "full_signature": "@Override public Collection<Entity> getEntities(List<Key> keys)", "class_method_signature": "EntitiesServiceImpl.getEntities(List<Key> keys)", "testcase": false, "constructor": false}, {"identifier": "createEmptyEntity", "parameters": "(String kind)", "modifiers": "@Override public", "return": "Entity", "signature": "Entity createEmptyEntity(String kind)", "full_signature": "@Override public Entity createEmptyEntity(String kind)", "class_method_signature": "EntitiesServiceImpl.createEmptyEntity(String kind)", "testcase": false, "constructor": false}, {"identifier": "deleteEntities", "parameters": "(String kind, String namespace, DeleteEntities deleteType, String encodedKeys)", "modifiers": "@Override public", "return": "void", "signature": "void deleteEntities(String kind, String namespace, DeleteEntities deleteType, String encodedKeys)", "full_signature": "@Override public void deleteEntities(String kind, String namespace, DeleteEntities deleteType, String encodedKeys)", "class_method_signature": "EntitiesServiceImpl.deleteEntities(String kind, String namespace, DeleteEntities deleteType, String encodedKeys)", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "(String kind, String namespace)", "modifiers": "@Override public", "return": "long", "signature": "long getCount(String kind, String namespace)", "full_signature": "@Override public long getCount(String kind, String namespace)", "class_method_signature": "EntitiesServiceImpl.getCount(String kind, String namespace)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Iterable<Entity> entities)", "modifiers": "@Override public", "return": "List<Key>", "signature": "List<Key> put(Iterable<Entity> entities)", "full_signature": "@Override public List<Key> put(Iterable<Entity> entities)", "class_method_signature": "EntitiesServiceImpl.put(Iterable<Entity> entities)", "testcase": false, "constructor": false}, {"identifier": "putAsync", "parameters": "(Iterable<Entity> entities)", "modifiers": "@Override public", "return": "Future<List<Key>>", "signature": "Future<List<Key>> putAsync(Iterable<Entity> entities)", "full_signature": "@Override public Future<List<Key>> putAsync(Iterable<Entity> entities)", "class_method_signature": "EntitiesServiceImpl.putAsync(Iterable<Entity> entities)", "testcase": false, "constructor": false}, {"identifier": "createEmptyEntityFromTemplate", "parameters": "(Entity template)", "modifiers": "private", "return": "Entity", "signature": "Entity createEmptyEntityFromTemplate(Entity template)", "full_signature": "private Entity createEmptyEntityFromTemplate(Entity template)", "class_method_signature": "EntitiesServiceImpl.createEmptyEntityFromTemplate(Entity template)", "testcase": false, "constructor": false}, {"identifier": "emptyProperties", "parameters": "(Entity entity)", "modifiers": "private", "return": "void", "signature": "void emptyProperties(Entity entity)", "full_signature": "private void emptyProperties(Entity entity)", "class_method_signature": "EntitiesServiceImpl.emptyProperties(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "createEmptyKey", "parameters": "(Key key)", "modifiers": "private", "return": "Object", "signature": "Object createEmptyKey(Key key)", "full_signature": "private Object createEmptyKey(Key key)", "class_method_signature": "EntitiesServiceImpl.createEmptyKey(Key key)", "testcase": false, "constructor": false}, {"identifier": "createEmptyPropertyObject", "parameters": "(Object property)", "modifiers": "private", "return": "Object", "signature": "Object createEmptyPropertyObject(Object property)", "full_signature": "private Object createEmptyPropertyObject(Object property)", "class_method_signature": "EntitiesServiceImpl.createEmptyPropertyObject(Object property)", "testcase": false, "constructor": false}, {"identifier": "deleteSet", "parameters": "(String encodedKeys)", "modifiers": "private", "return": "void", "signature": "void deleteSet(String encodedKeys)", "full_signature": "private void deleteSet(String encodedKeys)", "class_method_signature": "EntitiesServiceImpl.deleteSet(String encodedKeys)", "testcase": false, "constructor": false}, {"identifier": "deleteByNamespace", "parameters": "(String namespace)", "modifiers": "private", "return": "void", "signature": "void deleteByNamespace(String namespace)", "full_signature": "private void deleteByNamespace(String namespace)", "class_method_signature": "EntitiesServiceImpl.deleteByNamespace(String namespace)", "testcase": false, "constructor": false}, {"identifier": "deleteByKindAndNamespace", "parameters": "(String kind, String namespace)", "modifiers": "private", "return": "void", "signature": "void deleteByKindAndNamespace(String kind, String namespace)", "full_signature": "private void deleteByKindAndNamespace(String kind, String namespace)", "class_method_signature": "EntitiesServiceImpl.deleteByKindAndNamespace(String kind, String namespace)", "testcase": false, "constructor": false}, {"identifier": "deleteByKind", "parameters": "(String kind)", "modifiers": "private", "return": "void", "signature": "void deleteByKind(String kind)", "full_signature": "private void deleteByKind(String kind)", "class_method_signature": "EntitiesServiceImpl.deleteByKind(String kind)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deleteAll()", "full_signature": "private void deleteAll()", "class_method_signature": "EntitiesServiceImpl.deleteAll()", "testcase": false, "constructor": false}, {"identifier": "getAllEntitiesInCurrentNamespace", "parameters": "()", "modifiers": "private", "return": "Iterable<Entity>", "signature": "Iterable<Entity> getAllEntitiesInCurrentNamespace()", "full_signature": "private Iterable<Entity> getAllEntitiesInCurrentNamespace()", "class_method_signature": "EntitiesServiceImpl.getAllEntitiesInCurrentNamespace()", "testcase": false, "constructor": false}, {"identifier": "getAllEntitiesOfKind", "parameters": "(String kind)", "modifiers": "private", "return": "Iterable<Entity>", "signature": "Iterable<Entity> getAllEntitiesOfKind(String kind)", "full_signature": "private Iterable<Entity> getAllEntitiesOfKind(String kind)", "class_method_signature": "EntitiesServiceImpl.getAllEntitiesOfKind(String kind)", "testcase": false, "constructor": false}, {"identifier": "deleteEntities", "parameters": "(Iterable<Entity> entities)", "modifiers": "private", "return": "void", "signature": "void deleteEntities(Iterable<Entity> entities)", "full_signature": "private void deleteEntities(Iterable<Entity> entities)", "class_method_signature": "EntitiesServiceImpl.deleteEntities(Iterable<Entity> entities)", "testcase": false, "constructor": false}, {"identifier": "deleteKeys", "parameters": "(List<Key> keys)", "modifiers": "private", "return": "void", "signature": "void deleteKeys(List<Key> keys)", "full_signature": "private void deleteKeys(List<Key> keys)", "class_method_signature": "EntitiesServiceImpl.deleteKeys(List<Key> keys)", "testcase": false, "constructor": false}, {"identifier": "getAllEntitiesOfAllNamespaces", "parameters": "()", "modifiers": "private", "return": "Iterable<Entity>", "signature": "Iterable<Entity> getAllEntitiesOfAllNamespaces()", "full_signature": "private Iterable<Entity> getAllEntitiesOfAllNamespaces()", "class_method_signature": "EntitiesServiceImpl.getAllEntitiesOfAllNamespaces()", "testcase": false, "constructor": false}], "file": "gae-studio/gae-studio-server/src/main/java/com/arcbees/gaestudio/server/service/visualizer/EntitiesServiceImpl.java"}, "focal_method": {"identifier": "createEmptyEntity", "parameters": "(String kind)", "modifiers": "@Override public", "return": "Entity", "body": "@Override\n    public Entity createEmptyEntity(String kind) {\n        AppEngineHelper.disableApiHooks();\n\n        DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();\n\n        // TODO: Entities can have multiple model versions. We should either select the latest entity or specify an ID\n        // to fetch the template (ie. the selected entity) so we get a\n        Query query = new Query(kind);\n        FetchOptions fetchOptions = FetchOptions.Builder.withOffset(0).limit(1);\n        List<Entity> entities = datastore.prepare(query).asList(fetchOptions);\n\n        Entity emptyEntity = null;\n\n        if (!entities.isEmpty()) {\n            Entity template = entities.get(0);\n\n            emptyEntity = createEmptyEntityFromTemplate(template);\n        }\n\n        return emptyEntity;\n    }", "signature": "Entity createEmptyEntity(String kind)", "full_signature": "@Override public Entity createEmptyEntity(String kind)", "class_method_signature": "EntitiesServiceImpl.createEmptyEntity(String kind)", "testcase": false, "constructor": false, "invocations": ["disableApiHooks", "getDatastoreService", "limit", "withOffset", "asList", "prepare", "isEmpty", "get", "createEmptyEntityFromTemplate"]}, "repository": {"repo_id": 29952888, "url": "https://github.com/ArcBees/gae-studio", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 21, "size": 11408, "license": "licensed"}}