{"test_class": {"identifier": "BaseGuidancePresenterTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [{"original_string": "private NavigationManager mNavigationManager;", "modifier": "private", "type": "NavigationManager", "declarator": "mNavigationManager", "var_name": "mNavigationManager"}, {"original_string": "private BaseGuidancePresenter mBaseGuidancePresenter;", "modifier": "private", "type": "BaseGuidancePresenter", "declarator": "mBaseGuidancePresenter", "var_name": "mBaseGuidancePresenter"}, {"original_string": "@Captor\n    private ArgumentCaptor<WeakReference<NavigationManager.ManeuverEventListener>> mManeuverEventCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<WeakReference<NavigationManager.ManeuverEventListener>>", "declarator": "mManeuverEventCaptor", "var_name": "mManeuverEventCaptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<WeakReference<NavigationManager.NewInstructionEventListener>> mNewInstructionCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<WeakReference<NavigationManager.NewInstructionEventListener>>", "declarator": "mNewInstructionCaptor", "var_name": "mNewInstructionCaptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<WeakReference<NavigationManager.PositionListener>> mPositionListenerCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<WeakReference<NavigationManager.PositionListener>>", "declarator": "mPositionListenerCaptor", "var_name": "mPositionListenerCaptor"}], "file": "MSDKUIKit/MSDKUILib/src/test/java/com/here/msdkui/guidance/base/BaseGuidancePresenterTest.java"}, "test_case": {"identifier": "testGetDestinationDistance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDestinationDistance() {\n        mBaseGuidancePresenter.getDestinationDistance();\n        verify(mNavigationManager).getDestinationDistance();\n    }", "signature": "void testGetDestinationDistance()", "full_signature": "@Test public void testGetDestinationDistance()", "class_method_signature": "BaseGuidancePresenterTest.testGetDestinationDistance()", "testcase": true, "constructor": false, "invocations": ["getDestinationDistance", "getDestinationDistance", "verify"]}, "focal_class": {"identifier": "BaseGuidancePresenter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final NavigationManager mNavigationManager;", "modifier": "private final", "type": "NavigationManager", "declarator": "mNavigationManager", "var_name": "mNavigationManager"}, {"original_string": "private final NavigationManager.ManeuverEventListener mManeuverEventListener =\n            new NavigationManager.ManeuverEventListener() {\n                @Override\n                public void onManeuverEvent() {\n                    handleManeuverEvent();\n                }\n            };", "modifier": "private final", "type": "NavigationManager.ManeuverEventListener", "declarator": "mManeuverEventListener =\n            new NavigationManager.ManeuverEventListener() {\n                @Override\n                public void onManeuverEvent() {\n                    handleManeuverEvent();\n                }\n            }", "var_name": "mManeuverEventListener"}, {"original_string": "private final NavigationManager.NewInstructionEventListener mNewInstructionEventListener =\n            new NavigationManager.NewInstructionEventListener() {\n                @Override\n                public void onNewInstructionEvent() {\n                    handleNewInstructionEvent();\n                }\n            };", "modifier": "private final", "type": "NavigationManager.NewInstructionEventListener", "declarator": "mNewInstructionEventListener =\n            new NavigationManager.NewInstructionEventListener() {\n                @Override\n                public void onNewInstructionEvent() {\n                    handleNewInstructionEvent();\n                }\n            }", "var_name": "mNewInstructionEventListener"}, {"original_string": "private final NavigationManager.PositionListener mPositionListener =\n            new NavigationManager.PositionListener() {\n                @Override\n                public void onPositionUpdated(final GeoPosition loc) {\n                    handlePositionUpdate();\n                }\n            };", "modifier": "private final", "type": "NavigationManager.PositionListener", "declarator": "mPositionListener =\n            new NavigationManager.PositionListener() {\n                @Override\n                public void onPositionUpdated(final GeoPosition loc) {\n                    handlePositionUpdate();\n                }\n            }", "var_name": "mPositionListener"}, {"original_string": "private final NavigationManager.GpsSignalListener mGpsSignalListener =\n            new NavigationManager.GpsSignalListener() {\n                @Override public void onGpsLost() {\n                    handleGpsLost();\n                }\n\n                @Override public void onGpsRestored() {\n                    handleGpsRestore();\n                }\n            };", "modifier": "private final", "type": "NavigationManager.GpsSignalListener", "declarator": "mGpsSignalListener =\n            new NavigationManager.GpsSignalListener() {\n                @Override public void onGpsLost() {\n                    handleGpsLost();\n                }\n\n                @Override public void onGpsRestored() {\n                    handleGpsRestore();\n                }\n            }", "var_name": "mGpsSignalListener"}, {"original_string": "private final NavigationManager.RerouteListener mRerouteListener =\n            new NavigationManager.RerouteListener() {\n                @Override public void onRerouteBegin() {\n                    handleRerouteBegin();\n                }\n\n                @Override public void onRerouteEnd(RouteResult routeResult, RoutingError error) {\n                    if (error == RoutingError.NONE) {\n                        handleRerouteEnd(routeResult);\n                    } else {\n                        handleRerouteFailed(error);\n                    }\n                }\n            };", "modifier": "private final", "type": "NavigationManager.RerouteListener", "declarator": "mRerouteListener =\n            new NavigationManager.RerouteListener() {\n                @Override public void onRerouteBegin() {\n                    handleRerouteBegin();\n                }\n\n                @Override public void onRerouteEnd(RouteResult routeResult, RoutingError error) {\n                    if (error == RoutingError.NONE) {\n                        handleRerouteEnd(routeResult);\n                    } else {\n                        handleRerouteFailed(error);\n                    }\n                }\n            }", "var_name": "mRerouteListener"}, {"original_string": "private NavigationManager.SpeedWarningListener mSpeedWarningListener;", "modifier": "private", "type": "NavigationManager.SpeedWarningListener", "declarator": "mSpeedWarningListener", "var_name": "mSpeedWarningListener"}, {"original_string": "private Route mRoute;", "modifier": "private", "type": "Route", "declarator": "mRoute", "var_name": "mRoute"}], "methods": [{"identifier": "BaseGuidancePresenter", "parameters": "(@NonNull NavigationManager navigationManager, Route route)", "modifiers": "protected", "return": "", "signature": " BaseGuidancePresenter(@NonNull NavigationManager navigationManager, Route route)", "full_signature": "protected  BaseGuidancePresenter(@NonNull NavigationManager navigationManager, Route route)", "class_method_signature": "BaseGuidancePresenter.BaseGuidancePresenter(@NonNull NavigationManager navigationManager, Route route)", "testcase": false, "constructor": true}, {"identifier": "resume", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resume()", "full_signature": "public void resume()", "class_method_signature": "BaseGuidancePresenter.resume()", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pause()", "full_signature": "public void pause()", "class_method_signature": "BaseGuidancePresenter.pause()", "testcase": false, "constructor": false}, {"identifier": "enableSpeedWarnings", "parameters": "()", "modifiers": "protected final", "return": "void", "signature": "void enableSpeedWarnings()", "full_signature": "protected final void enableSpeedWarnings()", "class_method_signature": "BaseGuidancePresenter.enableSpeedWarnings()", "testcase": false, "constructor": false}, {"identifier": "disableSpeedWarnings", "parameters": "()", "modifiers": "protected final", "return": "void", "signature": "void disableSpeedWarnings()", "full_signature": "protected final void disableSpeedWarnings()", "class_method_signature": "BaseGuidancePresenter.disableSpeedWarnings()", "testcase": false, "constructor": false}, {"identifier": "handleManeuverEvent", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void handleManeuverEvent()", "full_signature": "protected void handleManeuverEvent()", "class_method_signature": "BaseGuidancePresenter.handleManeuverEvent()", "testcase": false, "constructor": false}, {"identifier": "handleNewInstructionEvent", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void handleNewInstructionEvent()", "full_signature": "protected void handleNewInstructionEvent()", "class_method_signature": "BaseGuidancePresenter.handleNewInstructionEvent()", "testcase": false, "constructor": false}, {"identifier": "handleGpsLost", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void handleGpsLost()", "full_signature": "protected void handleGpsLost()", "class_method_signature": "BaseGuidancePresenter.handleGpsLost()", "testcase": false, "constructor": false}, {"identifier": "handleGpsRestore", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void handleGpsRestore()", "full_signature": "protected void handleGpsRestore()", "class_method_signature": "BaseGuidancePresenter.handleGpsRestore()", "testcase": false, "constructor": false}, {"identifier": "handleRerouteBegin", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void handleRerouteBegin()", "full_signature": "protected void handleRerouteBegin()", "class_method_signature": "BaseGuidancePresenter.handleRerouteBegin()", "testcase": false, "constructor": false}, {"identifier": "handleRerouteEnd", "parameters": "(RouteResult routeResult)", "modifiers": "protected", "return": "void", "signature": "void handleRerouteEnd(RouteResult routeResult)", "full_signature": "protected void handleRerouteEnd(RouteResult routeResult)", "class_method_signature": "BaseGuidancePresenter.handleRerouteEnd(RouteResult routeResult)", "testcase": false, "constructor": false}, {"identifier": "handleRerouteFailed", "parameters": "(RoutingError error)", "modifiers": "protected", "return": "void", "signature": "void handleRerouteFailed(RoutingError error)", "full_signature": "protected void handleRerouteFailed(RoutingError error)", "class_method_signature": "BaseGuidancePresenter.handleRerouteFailed(RoutingError error)", "testcase": false, "constructor": false}, {"identifier": "handlePositionUpdate", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void handlePositionUpdate()", "full_signature": "protected void handlePositionUpdate()", "class_method_signature": "BaseGuidancePresenter.handlePositionUpdate()", "testcase": false, "constructor": false}, {"identifier": "handleSpeedExceeded", "parameters": "(float speedLimit)", "modifiers": "protected", "return": "void", "signature": "void handleSpeedExceeded(float speedLimit)", "full_signature": "protected void handleSpeedExceeded(float speedLimit)", "class_method_signature": "BaseGuidancePresenter.handleSpeedExceeded(float speedLimit)", "testcase": false, "constructor": false}, {"identifier": "handleSpeedExceededEnd", "parameters": "(float speedLimit)", "modifiers": "protected", "return": "void", "signature": "void handleSpeedExceededEnd(float speedLimit)", "full_signature": "protected void handleSpeedExceededEnd(float speedLimit)", "class_method_signature": "BaseGuidancePresenter.handleSpeedExceededEnd(float speedLimit)", "testcase": false, "constructor": false}, {"identifier": "getNextManeuver", "parameters": "()", "modifiers": "public", "return": "Maneuver", "signature": "Maneuver getNextManeuver()", "full_signature": "public Maneuver getNextManeuver()", "class_method_signature": "BaseGuidancePresenter.getNextManeuver()", "testcase": false, "constructor": false}, {"identifier": "getAfterNextManeuver", "parameters": "()", "modifiers": "public", "return": "Maneuver", "signature": "Maneuver getAfterNextManeuver()", "full_signature": "public Maneuver getAfterNextManeuver()", "class_method_signature": "BaseGuidancePresenter.getAfterNextManeuver()", "testcase": false, "constructor": false}, {"identifier": "getNextManeuverDistance", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNextManeuverDistance()", "full_signature": "public long getNextManeuverDistance()", "class_method_signature": "BaseGuidancePresenter.getNextManeuverDistance()", "testcase": false, "constructor": false}, {"identifier": "getRoute", "parameters": "()", "modifiers": "public", "return": "Route", "signature": "Route getRoute()", "full_signature": "public Route getRoute()", "class_method_signature": "BaseGuidancePresenter.getRoute()", "testcase": false, "constructor": false}, {"identifier": "setRoute", "parameters": "(Route route)", "modifiers": "public", "return": "void", "signature": "void setRoute(Route route)", "full_signature": "public void setRoute(Route route)", "class_method_signature": "BaseGuidancePresenter.setRoute(Route route)", "testcase": false, "constructor": false}, {"identifier": "getEta", "parameters": "()", "modifiers": "public @Nullable", "return": "Date", "signature": "Date getEta()", "full_signature": "public @Nullable Date getEta()", "class_method_signature": "BaseGuidancePresenter.getEta()", "testcase": false, "constructor": false}, {"identifier": "getDestinationDistance", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getDestinationDistance()", "full_signature": "public long getDestinationDistance()", "class_method_signature": "BaseGuidancePresenter.getDestinationDistance()", "testcase": false, "constructor": false}, {"identifier": "getTimeToArrival", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getTimeToArrival()", "full_signature": "public Integer getTimeToArrival()", "class_method_signature": "BaseGuidancePresenter.getTimeToArrival()", "testcase": false, "constructor": false}], "file": "MSDKUIKit/MSDKUILib/src/main/java/com/here/msdkui/guidance/base/BaseGuidancePresenter.java"}, "focal_method": {"identifier": "getDestinationDistance", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long getDestinationDistance() {\n        return mNavigationManager.getDestinationDistance();\n    }", "signature": "long getDestinationDistance()", "full_signature": "public long getDestinationDistance()", "class_method_signature": "BaseGuidancePresenter.getDestinationDistance()", "testcase": false, "constructor": false, "invocations": ["getDestinationDistance"]}, "repository": {"repo_id": 141680627, "url": "https://github.com/heremaps/msdkui-android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 35, "size": 5559, "license": "licensed"}}