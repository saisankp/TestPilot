{"test_class": {"identifier": "CveSearchWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "CveSearchApi cveSearchApi;", "modifier": "", "type": "CveSearchApi", "declarator": "cveSearchApi", "var_name": "cveSearchApi"}, {"original_string": "CveSearchWrapper cveSearchWrapper;", "modifier": "", "type": "CveSearchWrapper", "declarator": "cveSearchWrapper", "var_name": "cveSearchWrapper"}, {"original_string": "String VENDORNAME = \"zyxel\";", "modifier": "", "type": "String", "declarator": "VENDORNAME = \"zyxel\"", "var_name": "VENDORNAME"}, {"original_string": "String PRODUCTNAME = \"zywall\";", "modifier": "", "type": "String", "declarator": "PRODUCTNAME = \"zywall\"", "var_name": "PRODUCTNAME"}, {"original_string": "String CPE = \"cpe:2.3:a:zyxel:zywall:1050\";", "modifier": "", "type": "String", "declarator": "CPE = \"cpe:2.3:a:zyxel:zywall:1050\"", "var_name": "CPE"}], "file": "backend/src/src-cvesearch/src/test/java/org/eclipse/sw360/cvesearch/datasource/CveSearchWrapperTest.java"}, "test_case": {"identifier": "compareToWithoutWrapper", "parameters": "()", "modifiers": "@Ignore(\"meanwhile cveSearchWrapper implementation changed, test maybe suitable for later use\") @Test public", "return": "void", "body": "@Ignore(\"meanwhile cveSearchWrapper implementation changed, test maybe suitable for later use\")\n    @Test\n    public  void compareToWithoutWrapper() throws IOException {\n        Release release = new ReleaseBuilder()\n                .setName(PRODUCTNAME)\n                .setVendorFullname(VENDORNAME)\n                .get();\n\n        List<CveSearchData> resultDirect = cveSearchApi.search(VENDORNAME, PRODUCTNAME);\n\n        Optional<List<CveSearchData>> resultWrapped = cveSearchWrapper.searchForRelease(release);\n\n        assert(resultWrapped.isPresent());\n        assert(resultWrapped.get() != null);\n        assert(resultWrapped.get().size() > 0);\n        assert(isEquivalent(resultDirect,resultWrapped.get()));\n    }", "signature": "void compareToWithoutWrapper()", "full_signature": "@Ignore(\"meanwhile cveSearchWrapper implementation changed, test maybe suitable for later use\") @Test public void compareToWithoutWrapper()", "class_method_signature": "CveSearchWrapperTest.compareToWithoutWrapper()", "testcase": true, "constructor": false, "invocations": ["get", "setVendorFullname", "setName", "search", "searchForRelease", "isPresent", "get", "size", "get", "isEquivalent", "get"]}, "focal_class": {"identifier": "CveSearchWrapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(CveSearchWrapper.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(CveSearchWrapper.class)", "var_name": "log"}, {"original_string": "private final Heuristic heuristic;", "modifier": "private final", "type": "Heuristic", "declarator": "heuristic", "var_name": "heuristic"}], "methods": [{"identifier": "CveSearchWrapper", "parameters": "(CveSearchApi cveSearchApi)", "modifiers": "public", "return": "", "signature": " CveSearchWrapper(CveSearchApi cveSearchApi)", "full_signature": "public  CveSearchWrapper(CveSearchApi cveSearchApi)", "class_method_signature": "CveSearchWrapper.CveSearchWrapper(CveSearchApi cveSearchApi)", "testcase": false, "constructor": true}, {"identifier": "searchForRelease", "parameters": "(Release release)", "modifiers": "public", "return": "Optional<List<CveSearchData>>", "signature": "Optional<List<CveSearchData>> searchForRelease(Release release)", "full_signature": "public Optional<List<CveSearchData>> searchForRelease(Release release)", "class_method_signature": "CveSearchWrapper.searchForRelease(Release release)", "testcase": false, "constructor": false}], "file": "backend/src/src-cvesearch/src/main/java/org/eclipse/sw360/cvesearch/datasource/CveSearchWrapper.java"}, "focal_method": {"identifier": "searchForRelease", "parameters": "(Release release)", "modifiers": "public", "return": "Optional<List<CveSearchData>>", "body": "public Optional<List<CveSearchData>> searchForRelease(Release release) {\n        try {\n            return Optional.of(heuristic.run(release));\n        } catch (IOException e) {\n            log.error(\"Was not able to search for release with name=\" + release.getName() + \" and id=\" + release.getId(), e);\n        }\n        return Optional.empty();\n    }", "signature": "Optional<List<CveSearchData>> searchForRelease(Release release)", "full_signature": "public Optional<List<CveSearchData>> searchForRelease(Release release)", "class_method_signature": "CveSearchWrapper.searchForRelease(Release release)", "testcase": false, "constructor": false, "invocations": ["of", "run", "error", "getName", "getId", "empty"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}