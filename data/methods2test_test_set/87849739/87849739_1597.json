{"test_class": {"identifier": "SubjectNodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "model/enforcers/src/test/java/org/eclipse/ditto/model/enforcers/tree/SubjectNodeTest.java"}, "test_case": {"identifier": "tryToCreateInstanceWithNullName", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void tryToCreateInstanceWithNullName() {\n        SubjectNode.of(null);\n    }", "signature": "void tryToCreateInstanceWithNullName()", "full_signature": "@Test(expected = NullPointerException.class) public void tryToCreateInstanceWithNullName()", "class_method_signature": "SubjectNodeTest.tryToCreateInstanceWithNullName()", "testcase": true, "constructor": false, "invocations": ["of"]}, "focal_class": {"identifier": "SubjectNode", "superclass": "", "interfaces": "implements PolicyTreeNode", "fields": [{"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final Map<String, PolicyTreeNode> children = new HashMap<>();", "modifier": "private final", "type": "Map<String, PolicyTreeNode>", "declarator": "children = new HashMap<>()", "var_name": "children"}], "methods": [{"identifier": "SubjectNode", "parameters": "(final String name)", "modifiers": "private", "return": "", "signature": " SubjectNode(final String name)", "full_signature": "private  SubjectNode(final String name)", "class_method_signature": "SubjectNode.SubjectNode(final String name)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final String name)", "modifiers": "public static", "return": "SubjectNode", "signature": "SubjectNode of(final String name)", "full_signature": "public static SubjectNode of(final String name)", "class_method_signature": "SubjectNode.of(final String name)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "SubjectNode.getName()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Nonnull @Override public", "return": "Type", "signature": "Type getType()", "full_signature": "@Nonnull @Override public Type getType()", "class_method_signature": "SubjectNode.getType()", "testcase": false, "constructor": false}, {"identifier": "getChild", "parameters": "(final String resourceName)", "modifiers": "@Override public", "return": "Optional<PolicyTreeNode>", "signature": "Optional<PolicyTreeNode> getChild(final String resourceName)", "full_signature": "@Override public Optional<PolicyTreeNode> getChild(final String resourceName)", "class_method_signature": "SubjectNode.getChild(final String resourceName)", "testcase": false, "constructor": false}, {"identifier": "addChild", "parameters": "(final PolicyTreeNode childNode)", "modifiers": "@Override public", "return": "void", "signature": "void addChild(final PolicyTreeNode childNode)", "full_signature": "@Override public void addChild(final PolicyTreeNode childNode)", "class_method_signature": "SubjectNode.addChild(final PolicyTreeNode childNode)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(@Nonnull final Visitor visitor)", "modifiers": "@Override public", "return": "void", "signature": "void accept(@Nonnull final Visitor visitor)", "full_signature": "@Override public void accept(@Nonnull final Visitor visitor)", "class_method_signature": "SubjectNode.accept(@Nonnull final Visitor visitor)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, PolicyTreeNode>", "signature": "Map<String, PolicyTreeNode> getChildren()", "full_signature": "@Override public Map<String, PolicyTreeNode> getChildren()", "class_method_signature": "SubjectNode.getChildren()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "SubjectNode.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SubjectNode.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SubjectNode.toString()", "testcase": false, "constructor": false}], "file": "model/enforcers/src/main/java/org/eclipse/ditto/model/enforcers/tree/SubjectNode.java"}, "focal_method": {"identifier": "of", "parameters": "(final String name)", "modifiers": "public static", "return": "SubjectNode", "body": "public static SubjectNode of(final String name) {\n        checkNotNull(name, \"Name\");\n\n        return new SubjectNode(name);\n    }", "signature": "SubjectNode of(final String name)", "full_signature": "public static SubjectNode of(final String name)", "class_method_signature": "SubjectNode.of(final String name)", "testcase": false, "constructor": false, "invocations": ["checkNotNull"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}