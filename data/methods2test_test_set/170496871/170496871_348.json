{"test_class": {"identifier": "GmmTrainerTest", "superclass": "extends TrainerTest", "interfaces": "", "fields": [{"original_string": "private static final Map<Integer, double[]> data = new HashMap<>();", "modifier": "private static final", "type": "Map<Integer, double[]>", "declarator": "data = new HashMap<>()", "var_name": "data"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/clustering/gmm/GmmTrainerTest.java"}, "test_case": {"identifier": "testFit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFit() {\n        GmmTrainer trainer = new GmmTrainer(2, 1)\n            .withInitialMeans(Arrays.asList(\n                VectorUtils.of(1.0, 2.0),\n                VectorUtils.of(-1.0, -2.0)));\n        GmmModel model = trainer.fit(\n            new LocalDatasetBuilder<>(data, parts),\n            new DoubleArrayVectorizer<Integer>().labeled(Vectorizer.LabelCoordinate.LAST)\n        );\n\n        Assert.assertEquals(2, model.countOfComponents());\n        Assert.assertEquals(2, model.dimension());\n        Assert.assertArrayEquals(new double[] {1.33, 1.33}, model.distributions().get(0).mean().asArray(), 1e-2);\n        Assert.assertArrayEquals(new double[] {-1.33, -1.33}, model.distributions().get(1).mean().asArray(), 1e-2);\n    }", "signature": "void testFit()", "full_signature": "@Test public void testFit()", "class_method_signature": "GmmTrainerTest.testFit()", "testcase": true, "constructor": false, "invocations": ["withInitialMeans", "asList", "of", "of", "fit", "labeled", "assertEquals", "countOfComponents", "assertEquals", "dimension", "assertArrayEquals", "asArray", "mean", "get", "distributions", "assertArrayEquals", "asArray", "mean", "get", "distributions"]}, "focal_class": {"identifier": "GmmTrainer", "superclass": "extends SingleLabelDatasetTrainer<GmmModel>", "interfaces": "", "fields": [{"original_string": "private double eps = 1e-3;", "modifier": "private", "type": "double", "declarator": "eps = 1e-3", "var_name": "eps"}, {"original_string": "private int countOfComponents = 2;", "modifier": "private", "type": "int", "declarator": "countOfComponents = 2", "var_name": "countOfComponents"}, {"original_string": "private int maxCountOfIterations = 10;", "modifier": "private", "type": "int", "declarator": "maxCountOfIterations = 10", "var_name": "maxCountOfIterations"}, {"original_string": "private Vector[] initialMeans;", "modifier": "private", "type": "Vector[]", "declarator": "initialMeans", "var_name": "initialMeans"}, {"original_string": "private int maxCountOfInitTries = 3;", "modifier": "private", "type": "int", "declarator": "maxCountOfInitTries = 3", "var_name": "maxCountOfInitTries"}, {"original_string": "private int maxCountOfClusters = 2;", "modifier": "private", "type": "int", "declarator": "maxCountOfClusters = 2", "var_name": "maxCountOfClusters"}, {"original_string": "private double maxLikelihoodDivergence = 5;", "modifier": "private", "type": "double", "declarator": "maxLikelihoodDivergence = 5", "var_name": "maxLikelihoodDivergence"}, {"original_string": "private double minElementsForNewCluster = 300;", "modifier": "private", "type": "double", "declarator": "minElementsForNewCluster = 300", "var_name": "minElementsForNewCluster"}, {"original_string": "private double minClusterProbability = 0.05;", "modifier": "private", "type": "double", "declarator": "minClusterProbability = 0.05", "var_name": "minClusterProbability"}], "methods": [{"identifier": "GmmTrainer", "parameters": "()", "modifiers": "public", "return": "", "signature": " GmmTrainer()", "full_signature": "public  GmmTrainer()", "class_method_signature": "GmmTrainer.GmmTrainer()", "testcase": false, "constructor": true}, {"identifier": "GmmTrainer", "parameters": "(int countOfComponents, int maxCountOfIterations)", "modifiers": "public", "return": "", "signature": " GmmTrainer(int countOfComponents, int maxCountOfIterations)", "full_signature": "public  GmmTrainer(int countOfComponents, int maxCountOfIterations)", "class_method_signature": "GmmTrainer.GmmTrainer(int countOfComponents, int maxCountOfIterations)", "testcase": false, "constructor": true}, {"identifier": "GmmTrainer", "parameters": "(int countOfComponents)", "modifiers": "public", "return": "", "signature": " GmmTrainer(int countOfComponents)", "full_signature": "public  GmmTrainer(int countOfComponents)", "class_method_signature": "GmmTrainer.GmmTrainer(int countOfComponents)", "testcase": false, "constructor": true}, {"identifier": "fitWithInitializedDeployingContext", "parameters": "(DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> extractor)", "modifiers": "@Override public", "return": "GmmModel", "signature": "GmmModel fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> extractor)", "full_signature": "@Override public GmmModel fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> extractor)", "class_method_signature": "GmmTrainer.fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> extractor)", "testcase": false, "constructor": false}, {"identifier": "selectNRandomXsMapper", "parameters": "(int n)", "modifiers": "private static", "return": "IgniteBiFunction<GmmPartitionData, LearningEnvironment, Vector[][]>", "signature": "IgniteBiFunction<GmmPartitionData, LearningEnvironment, Vector[][]> selectNRandomXsMapper(int n)", "full_signature": "private static IgniteBiFunction<GmmPartitionData, LearningEnvironment, Vector[][]> selectNRandomXsMapper(int n)", "class_method_signature": "GmmTrainer.selectNRandomXsMapper(int n)", "testcase": false, "constructor": false}, {"identifier": "selectNRandomXsReducer", "parameters": "(Vector[][] l, Vector[][] r)", "modifiers": "private static", "return": "Vector[][]", "signature": "Vector[][] selectNRandomXsReducer(Vector[][] l, Vector[][] r)", "full_signature": "private static Vector[][] selectNRandomXsReducer(Vector[][] l, Vector[][] r)", "class_method_signature": "GmmTrainer.selectNRandomXsReducer(Vector[][] l, Vector[][] r)", "testcase": false, "constructor": false}, {"identifier": "withInitialCountOfComponents", "parameters": "(int numberOfComponents)", "modifiers": "public", "return": "GmmTrainer", "signature": "GmmTrainer withInitialCountOfComponents(int numberOfComponents)", "full_signature": "public GmmTrainer withInitialCountOfComponents(int numberOfComponents)", "class_method_signature": "GmmTrainer.withInitialCountOfComponents(int numberOfComponents)", "testcase": false, "constructor": false}, {"identifier": "withInitialMeans", "parameters": "(List<Vector> means)", "modifiers": "public", "return": "GmmTrainer", "signature": "GmmTrainer withInitialMeans(List<Vector> means)", "full_signature": "public GmmTrainer withInitialMeans(List<Vector> means)", "class_method_signature": "GmmTrainer.withInitialMeans(List<Vector> means)", "testcase": false, "constructor": false}, {"identifier": "withMaxCountIterations", "parameters": "(int maxCountOfIterations)", "modifiers": "public", "return": "GmmTrainer", "signature": "GmmTrainer withMaxCountIterations(int maxCountOfIterations)", "full_signature": "public GmmTrainer withMaxCountIterations(int maxCountOfIterations)", "class_method_signature": "GmmTrainer.withMaxCountIterations(int maxCountOfIterations)", "testcase": false, "constructor": false}, {"identifier": "withEps", "parameters": "(double eps)", "modifiers": "public", "return": "GmmTrainer", "signature": "GmmTrainer withEps(double eps)", "full_signature": "public GmmTrainer withEps(double eps)", "class_method_signature": "GmmTrainer.withEps(double eps)", "testcase": false, "constructor": false}, {"identifier": "withMaxCountOfInitTries", "parameters": "(int maxCountOfInitTries)", "modifiers": "public", "return": "GmmTrainer", "signature": "GmmTrainer withMaxCountOfInitTries(int maxCountOfInitTries)", "full_signature": "public GmmTrainer withMaxCountOfInitTries(int maxCountOfInitTries)", "class_method_signature": "GmmTrainer.withMaxCountOfInitTries(int maxCountOfInitTries)", "testcase": false, "constructor": false}, {"identifier": "withMaxCountOfClusters", "parameters": "(int maxCountOfClusters)", "modifiers": "public", "return": "GmmTrainer", "signature": "GmmTrainer withMaxCountOfClusters(int maxCountOfClusters)", "full_signature": "public GmmTrainer withMaxCountOfClusters(int maxCountOfClusters)", "class_method_signature": "GmmTrainer.withMaxCountOfClusters(int maxCountOfClusters)", "testcase": false, "constructor": false}, {"identifier": "withMaxLikelihoodDivergence", "parameters": "(double maxLikelihoodDivergence)", "modifiers": "public", "return": "GmmTrainer", "signature": "GmmTrainer withMaxLikelihoodDivergence(double maxLikelihoodDivergence)", "full_signature": "public GmmTrainer withMaxLikelihoodDivergence(double maxLikelihoodDivergence)", "class_method_signature": "GmmTrainer.withMaxLikelihoodDivergence(double maxLikelihoodDivergence)", "testcase": false, "constructor": false}, {"identifier": "fit", "parameters": "(Dataset<EmptyContext, GmmPartitionData> dataset)", "modifiers": "private", "return": "Optional<GmmModel>", "signature": "Optional<GmmModel> fit(Dataset<EmptyContext, GmmPartitionData> dataset)", "full_signature": "private Optional<GmmModel> fit(Dataset<EmptyContext, GmmPartitionData> dataset)", "class_method_signature": "GmmTrainer.fit(Dataset<EmptyContext, GmmPartitionData> dataset)", "testcase": false, "constructor": false}, {"identifier": "withMinElementsForNewCluster", "parameters": "(int minElementsForNewCluster)", "modifiers": "public", "return": "GmmTrainer", "signature": "GmmTrainer withMinElementsForNewCluster(int minElementsForNewCluster)", "full_signature": "public GmmTrainer withMinElementsForNewCluster(int minElementsForNewCluster)", "class_method_signature": "GmmTrainer.withMinElementsForNewCluster(int minElementsForNewCluster)", "testcase": false, "constructor": false}, {"identifier": "withMinClusterProbability", "parameters": "(double minClusterProbability)", "modifiers": "public", "return": "GmmTrainer", "signature": "GmmTrainer withMinClusterProbability(double minClusterProbability)", "full_signature": "public GmmTrainer withMinClusterProbability(double minClusterProbability)", "class_method_signature": "GmmTrainer.withMinClusterProbability(double minClusterProbability)", "testcase": false, "constructor": false}, {"identifier": "filterModel", "parameters": "(GmmModel model)", "modifiers": "private", "return": "GmmModel", "signature": "GmmModel filterModel(GmmModel model)", "full_signature": "private GmmModel filterModel(GmmModel model)", "class_method_signature": "GmmTrainer.filterModel(GmmModel model)", "testcase": false, "constructor": false}, {"identifier": "updateModel", "parameters": "(Dataset<EmptyContext, GmmPartitionData> dataset, GmmModel model)", "modifiers": "@NotNull private", "return": "UpdateResult", "signature": "UpdateResult updateModel(Dataset<EmptyContext, GmmPartitionData> dataset, GmmModel model)", "full_signature": "@NotNull private UpdateResult updateModel(Dataset<EmptyContext, GmmPartitionData> dataset, GmmModel model)", "class_method_signature": "GmmTrainer.updateModel(Dataset<EmptyContext, GmmPartitionData> dataset, GmmModel model)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Dataset<EmptyContext, GmmPartitionData> dataset)", "modifiers": "private", "return": "Optional<GmmModel>", "signature": "Optional<GmmModel> init(Dataset<EmptyContext, GmmPartitionData> dataset)", "full_signature": "private Optional<GmmModel> init(Dataset<EmptyContext, GmmPartitionData> dataset)", "class_method_signature": "GmmTrainer.init(Dataset<EmptyContext, GmmPartitionData> dataset)", "testcase": false, "constructor": false}, {"identifier": "isUpdateable", "parameters": "(GmmModel mdl)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUpdateable(GmmModel mdl)", "full_signature": "@Override public boolean isUpdateable(GmmModel mdl)", "class_method_signature": "GmmTrainer.isUpdateable(GmmModel mdl)", "testcase": false, "constructor": false}, {"identifier": "updateModel", "parameters": "(GmmModel mdl, DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> extractor)", "modifiers": "@Override protected", "return": "GmmModel", "signature": "GmmModel updateModel(GmmModel mdl, DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> extractor)", "full_signature": "@Override protected GmmModel updateModel(GmmModel mdl, DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> extractor)", "class_method_signature": "GmmTrainer.updateModel(GmmModel mdl, DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> extractor)", "testcase": false, "constructor": false}, {"identifier": "buildComponents", "parameters": "(Vector[] means, List<Matrix> covs)", "modifiers": "private", "return": "List<MultivariateGaussianDistribution>", "signature": "List<MultivariateGaussianDistribution> buildComponents(Vector[] means, List<Matrix> covs)", "full_signature": "private List<MultivariateGaussianDistribution> buildComponents(Vector[] means, List<Matrix> covs)", "class_method_signature": "GmmTrainer.buildComponents(Vector[] means, List<Matrix> covs)", "testcase": false, "constructor": false}, {"identifier": "isConverged", "parameters": "(GmmModel oldModel, GmmModel newModel)", "modifiers": "private", "return": "boolean", "signature": "boolean isConverged(GmmModel oldModel, GmmModel newModel)", "full_signature": "private boolean isConverged(GmmModel oldModel, GmmModel newModel)", "class_method_signature": "GmmTrainer.isConverged(GmmModel oldModel, GmmModel newModel)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/clustering/gmm/GmmTrainer.java"}, "focal_method": {"identifier": "fit", "parameters": "(Dataset<EmptyContext, GmmPartitionData> dataset)", "modifiers": "private", "return": "Optional<GmmModel>", "body": "private Optional<GmmModel> fit(Dataset<EmptyContext, GmmPartitionData> dataset) {\n        return init(dataset).map(model -> {\n            GmmModel currentModel = model;\n\n            do {\n                UpdateResult updateResult = updateModel(dataset, currentModel);\n                currentModel = updateResult.model;\n\n                double minCompProb = currentModel.componentsProbs().minElement().get();\n                if (countOfComponents >= maxCountOfClusters || minCompProb < minClusterProbability)\n                    break;\n\n                double maxXProb = updateResult.maxProbInDataset;\n                NewComponentStatisticsAggregator newMeanAdder = NewComponentStatisticsAggregator.computeNewMean(dataset,\n                    maxXProb, maxLikelihoodDivergence, currentModel);\n\n                Vector newMean = newMeanAdder.mean();\n                if (newMeanAdder.rowCountForNewCluster() < minElementsForNewCluster)\n                    break;\n\n                countOfComponents += 1;\n                Vector[] newMeans = new Vector[countOfComponents];\n                for (int i = 0; i < currentModel.countOfComponents(); i++)\n                    newMeans[i] = currentModel.distributions().get(i).mean();\n                newMeans[countOfComponents - 1] = newMean;\n\n                initialMeans = newMeans;\n\n                Optional<GmmModel> newModelOpt = init(dataset);\n                if (newModelOpt.isPresent())\n                    currentModel = newModelOpt.get();\n                else\n                    break;\n            }\n            while (true);\n\n            return filterModel(currentModel);\n        });\n    }", "signature": "Optional<GmmModel> fit(Dataset<EmptyContext, GmmPartitionData> dataset)", "full_signature": "private Optional<GmmModel> fit(Dataset<EmptyContext, GmmPartitionData> dataset)", "class_method_signature": "GmmTrainer.fit(Dataset<EmptyContext, GmmPartitionData> dataset)", "testcase": false, "constructor": false, "invocations": ["map", "init", "updateModel", "get", "minElement", "componentsProbs", "computeNewMean", "mean", "rowCountForNewCluster", "countOfComponents", "mean", "get", "distributions", "init", "isPresent", "get", "filterModel"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}