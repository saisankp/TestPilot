{"test_class": {"identifier": "ReadTransactionSuccessTest", "superclass": "extends AbstractTransactionSuccessTest<ReadTransactionSuccess>", "interfaces": "", "fields": [{"original_string": "private static final NormalizedNode<?, ?> NODE = Builders.containerBuilder().withNodeIdentifier(\n            YangInstanceIdentifier.NodeIdentifier.create(QName.create(\"namespace\", \"localName\"))).build();", "modifier": "private static final", "type": "NormalizedNode<?, ?>", "declarator": "NODE = Builders.containerBuilder().withNodeIdentifier(\n            YangInstanceIdentifier.NodeIdentifier.create(QName.create(\"namespace\", \"localName\"))).build()", "var_name": "NODE"}, {"original_string": "private static final ReadTransactionSuccess OBJECT = new ReadTransactionSuccess(\n            TRANSACTION_IDENTIFIER, 0, Optional.of(NODE));", "modifier": "private static final", "type": "ReadTransactionSuccess", "declarator": "OBJECT = new ReadTransactionSuccess(\n            TRANSACTION_IDENTIFIER, 0, Optional.of(NODE))", "var_name": "OBJECT"}], "file": "opendaylight/md-sal/cds-access-api/src/test/java/org/opendaylight/controller/cluster/access/commands/ReadTransactionSuccessTest.java"}, "test_case": {"identifier": "getDataTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDataTest() {\n        final Optional<NormalizedNode<?, ?>> result = OBJECT.getData();\n        Assert.assertTrue(result.isPresent());\n        Assert.assertEquals(NODE.getValue(), result.get().getValue());\n    }", "signature": "void getDataTest()", "full_signature": "@Test public void getDataTest()", "class_method_signature": "ReadTransactionSuccessTest.getDataTest()", "testcase": true, "constructor": false, "invocations": ["getData", "assertTrue", "isPresent", "assertEquals", "getValue", "getValue", "get"]}, "focal_class": {"identifier": "ReadTransactionSuccess", "superclass": "extends TransactionSuccess<ReadTransactionSuccess>", "interfaces": "implements SliceableMessage", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final Optional<NormalizedNode<?, ?>> data;", "modifier": "private final", "type": "Optional<NormalizedNode<?, ?>>", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "ReadTransactionSuccess", "parameters": "(final TransactionIdentifier identifier, final long sequence,\n            final Optional<NormalizedNode<?, ?>> data)", "modifiers": "public", "return": "", "signature": " ReadTransactionSuccess(final TransactionIdentifier identifier, final long sequence,\n            final Optional<NormalizedNode<?, ?>> data)", "full_signature": "public  ReadTransactionSuccess(final TransactionIdentifier identifier, final long sequence,\n            final Optional<NormalizedNode<?, ?>> data)", "class_method_signature": "ReadTransactionSuccess.ReadTransactionSuccess(final TransactionIdentifier identifier, final long sequence,\n            final Optional<NormalizedNode<?, ?>> data)", "testcase": false, "constructor": true}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "Optional<NormalizedNode<?, ?>>", "signature": "Optional<NormalizedNode<?, ?>> getData()", "full_signature": "public Optional<NormalizedNode<?, ?>> getData()", "class_method_signature": "ReadTransactionSuccess.getData()", "testcase": false, "constructor": false}, {"identifier": "externalizableProxy", "parameters": "(final ABIVersion version)", "modifiers": "@Override protected", "return": "AbstractTransactionSuccessProxy<ReadTransactionSuccess>", "signature": "AbstractTransactionSuccessProxy<ReadTransactionSuccess> externalizableProxy(final ABIVersion version)", "full_signature": "@Override protected AbstractTransactionSuccessProxy<ReadTransactionSuccess> externalizableProxy(final ABIVersion version)", "class_method_signature": "ReadTransactionSuccess.externalizableProxy(final ABIVersion version)", "testcase": false, "constructor": false}, {"identifier": "cloneAsVersion", "parameters": "(final ABIVersion version)", "modifiers": "@Override protected", "return": "ReadTransactionSuccess", "signature": "ReadTransactionSuccess cloneAsVersion(final ABIVersion version)", "full_signature": "@Override protected ReadTransactionSuccess cloneAsVersion(final ABIVersion version)", "class_method_signature": "ReadTransactionSuccess.cloneAsVersion(final ABIVersion version)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/cds-access-api/src/main/java/org/opendaylight/controller/cluster/access/commands/ReadTransactionSuccess.java"}, "focal_method": {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "Optional<NormalizedNode<?, ?>>", "body": "public Optional<NormalizedNode<?, ?>> getData() {\n        return data;\n    }", "signature": "Optional<NormalizedNode<?, ?>> getData()", "full_signature": "public Optional<NormalizedNode<?, ?>> getData()", "class_method_signature": "ReadTransactionSuccess.getData()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}