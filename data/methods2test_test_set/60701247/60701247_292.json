{"test_class": {"identifier": "ScreenRecorderActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final AndroidProjectRule myRule = AndroidProjectRule.inMemory();", "modifier": "@Rule\n  public final", "type": "AndroidProjectRule", "declarator": "myRule = AndroidProjectRule.inMemory()", "var_name": "myRule"}, {"original_string": "private DeviceContext myContext;", "modifier": "private", "type": "DeviceContext", "declarator": "myContext", "var_name": "myContext"}, {"original_string": "private Features myFeatures;", "modifier": "private", "type": "Features", "declarator": "myFeatures", "var_name": "myFeatures"}, {"original_string": "private Presentation myPresentation;", "modifier": "private", "type": "Presentation", "declarator": "myPresentation", "var_name": "myPresentation"}, {"original_string": "private AnActionEvent myEvent;", "modifier": "private", "type": "AnActionEvent", "declarator": "myEvent", "var_name": "myEvent"}], "file": "android/testSrc/com/android/tools/idea/ddms/actions/ScreenRecorderActionTest.java"}, "test_case": {"identifier": "getEmulatorScreenRecorderOptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getEmulatorScreenRecorderOptions() {\n    Path path = Jimfs.newFileSystem().getPath(\"sdcard\", \"1.mp4\");\n    String expectedPath = path.toString();\n    assert expectedPath.equals(\"sdcard\" + File.separator + \"1.mp4\");\n\n    ScreenRecorderOptions options = new ScreenRecorderOptions.Builder()\n      .setBitRate(6)\n      .setSize(600, 400)\n      .build();\n\n    assertEquals(\"--size 600x400 --bit-rate 6000000 \" + expectedPath,\n                 ScreenRecorderAction.getEmulatorScreenRecorderOptions(path, options));\n\n    options = new ScreenRecorderOptions.Builder()\n      .setTimeLimit(100, TimeUnit.SECONDS)\n      .build();\n\n    assertEquals(\"--time-limit 100 \" + expectedPath, ScreenRecorderAction.getEmulatorScreenRecorderOptions(path, options));\n\n    options = new ScreenRecorderOptions.Builder()\n      .setTimeLimit(4, TimeUnit.MINUTES)\n      .build();\n\n    assertEquals(\"--time-limit 180 \" + expectedPath, ScreenRecorderAction.getEmulatorScreenRecorderOptions(path, options));\n  }", "signature": "void getEmulatorScreenRecorderOptions()", "full_signature": "@Test public void getEmulatorScreenRecorderOptions()", "class_method_signature": "ScreenRecorderActionTest.getEmulatorScreenRecorderOptions()", "testcase": true, "constructor": false, "invocations": ["getPath", "newFileSystem", "toString", "equals", "build", "setSize", "setBitRate", "assertEquals", "getEmulatorScreenRecorderOptions", "build", "setTimeLimit", "assertEquals", "getEmulatorScreenRecorderOptions", "build", "setTimeLimit", "assertEquals", "getEmulatorScreenRecorderOptions"]}, "focal_class": {"identifier": "ScreenRecorderAction", "superclass": "extends AbstractDeviceAction", "interfaces": "", "fields": [{"original_string": "static final String REMOTE_PATH = \"/sdcard/ddmsrec.mp4\";", "modifier": "static final", "type": "String", "declarator": "REMOTE_PATH = \"/sdcard/ddmsrec.mp4\"", "var_name": "REMOTE_PATH"}, {"original_string": "static final String TITLE = \"Screen Recorder\";", "modifier": "static final", "type": "String", "declarator": "TITLE = \"Screen Recorder\"", "var_name": "TITLE"}, {"original_string": "private static final String EMU_TMP_FILENAME = \"tmp.webm\";", "modifier": "private static final", "type": "String", "declarator": "EMU_TMP_FILENAME = \"tmp.webm\"", "var_name": "EMU_TMP_FILENAME"}, {"original_string": "private final Features myFeatures;", "modifier": "private final", "type": "Features", "declarator": "myFeatures", "var_name": "myFeatures"}, {"original_string": "private final Project myProject;", "modifier": "private final", "type": "Project", "declarator": "myProject", "var_name": "myProject"}], "methods": [{"identifier": "ScreenRecorderAction", "parameters": "(@NotNull Project project, @NotNull DeviceContext context)", "modifiers": "public", "return": "", "signature": " ScreenRecorderAction(@NotNull Project project, @NotNull DeviceContext context)", "full_signature": "public  ScreenRecorderAction(@NotNull Project project, @NotNull DeviceContext context)", "class_method_signature": "ScreenRecorderAction.ScreenRecorderAction(@NotNull Project project, @NotNull DeviceContext context)", "testcase": false, "constructor": true}, {"identifier": "ScreenRecorderAction", "parameters": "(@NotNull Project project, @NotNull DeviceContext context, @NotNull Features features)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ScreenRecorderAction(@NotNull Project project, @NotNull DeviceContext context, @NotNull Features features)", "full_signature": "@VisibleForTesting  ScreenRecorderAction(@NotNull Project project, @NotNull DeviceContext context, @NotNull Features features)", "class_method_signature": "ScreenRecorderAction.ScreenRecorderAction(@NotNull Project project, @NotNull DeviceContext context, @NotNull Features features)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(@NotNull AnActionEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void update(@NotNull AnActionEvent event)", "full_signature": "@Override public void update(@NotNull AnActionEvent event)", "class_method_signature": "ScreenRecorderAction.update(@NotNull AnActionEvent event)", "testcase": false, "constructor": false}, {"identifier": "performAction", "parameters": "(@NotNull IDevice device)", "modifiers": "@Override protected", "return": "void", "signature": "void performAction(@NotNull IDevice device)", "full_signature": "@Override protected void performAction(@NotNull IDevice device)", "class_method_signature": "ScreenRecorderAction.performAction(@NotNull IDevice device)", "testcase": false, "constructor": false}, {"identifier": "startRecordingAsync", "parameters": "(@NotNull ScreenRecorderOptionsDialog dialog, @NotNull IDevice device, boolean showTouchEnabled)", "modifiers": "private", "return": "void", "signature": "void startRecordingAsync(@NotNull ScreenRecorderOptionsDialog dialog, @NotNull IDevice device, boolean showTouchEnabled)", "full_signature": "private void startRecordingAsync(@NotNull ScreenRecorderOptionsDialog dialog, @NotNull IDevice device, boolean showTouchEnabled)", "class_method_signature": "ScreenRecorderAction.startRecordingAsync(@NotNull ScreenRecorderOptionsDialog dialog, @NotNull IDevice device, boolean showTouchEnabled)", "testcase": false, "constructor": false}, {"identifier": "getVirtualDeviceManager", "parameters": "()", "modifiers": "@Nullable private static", "return": "AvdManager", "signature": "AvdManager getVirtualDeviceManager()", "full_signature": "@Nullable private static AvdManager getVirtualDeviceManager()", "class_method_signature": "ScreenRecorderAction.getVirtualDeviceManager()", "testcase": false, "constructor": false}, {"identifier": "getTemporaryVideoPathForVirtualDevice", "parameters": "(@NotNull IDevice device, @NotNull AvdManager manager)", "modifiers": "@Nullable @VisibleForTesting", "return": "Path", "signature": "Path getTemporaryVideoPathForVirtualDevice(@NotNull IDevice device, @NotNull AvdManager manager)", "full_signature": "@Nullable @VisibleForTesting Path getTemporaryVideoPathForVirtualDevice(@NotNull IDevice device, @NotNull AvdManager manager)", "class_method_signature": "ScreenRecorderAction.getTemporaryVideoPathForVirtualDevice(@NotNull IDevice device, @NotNull AvdManager manager)", "testcase": false, "constructor": false}, {"identifier": "setShowTouch", "parameters": "(@NotNull IDevice device, boolean isEnabled)", "modifiers": "private static", "return": "void", "signature": "void setShowTouch(@NotNull IDevice device, boolean isEnabled)", "full_signature": "private static void setShowTouch(@NotNull IDevice device, boolean isEnabled)", "class_method_signature": "ScreenRecorderAction.setShowTouch(@NotNull IDevice device, boolean isEnabled)", "testcase": false, "constructor": false}, {"identifier": "isShowTouchEnabled", "parameters": "(@NotNull IDevice device)", "modifiers": "private static", "return": "boolean", "signature": "boolean isShowTouchEnabled(@NotNull IDevice device)", "full_signature": "private static boolean isShowTouchEnabled(@NotNull IDevice device)", "class_method_signature": "ScreenRecorderAction.isShowTouchEnabled(@NotNull IDevice device)", "testcase": false, "constructor": false}, {"identifier": "getEmulatorScreenRecorderOptions", "parameters": "(@NotNull Path filePath, @NotNull ScreenRecorderOptions options)", "modifiers": "@VisibleForTesting static", "return": "String", "signature": "String getEmulatorScreenRecorderOptions(@NotNull Path filePath, @NotNull ScreenRecorderOptions options)", "full_signature": "@VisibleForTesting static String getEmulatorScreenRecorderOptions(@NotNull Path filePath, @NotNull ScreenRecorderOptions options)", "class_method_signature": "ScreenRecorderAction.getEmulatorScreenRecorderOptions(@NotNull Path filePath, @NotNull ScreenRecorderOptions options)", "testcase": false, "constructor": false}, {"identifier": "showError", "parameters": "(@Nullable final Project project, @NotNull final String message, @Nullable final Throwable throwable)", "modifiers": "static", "return": "void", "signature": "void showError(@Nullable final Project project, @NotNull final String message, @Nullable final Throwable throwable)", "full_signature": "static void showError(@Nullable final Project project, @NotNull final String message, @Nullable final Throwable throwable)", "class_method_signature": "ScreenRecorderAction.showError(@Nullable final Project project, @NotNull final String message, @Nullable final Throwable throwable)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/ddms/actions/ScreenRecorderAction.java"}, "focal_method": {"identifier": "getEmulatorScreenRecorderOptions", "parameters": "(@NotNull Path filePath, @NotNull ScreenRecorderOptions options)", "modifiers": "@VisibleForTesting static", "return": "String", "body": "@VisibleForTesting\n  static String getEmulatorScreenRecorderOptions(@NotNull Path filePath, @NotNull ScreenRecorderOptions options) {\n    StringBuilder sb = new StringBuilder();\n\n    if (options.width > 0 && options.height > 0) {\n      sb.append(\"--size \");\n      sb.append(options.width);\n      sb.append('x');\n      sb.append(options.height);\n      sb.append(' ');\n    }\n\n    if (options.bitrateMbps > 0) {\n      sb.append(\"--bit-rate \");\n      sb.append(options.bitrateMbps * 1000000);\n      sb.append(' ');\n    }\n\n    if (options.timeLimit > 0) {\n      sb.append(\"--time-limit \");\n      long seconds = TimeUnit.SECONDS.convert(options.timeLimit, options.timeLimitUnits);\n      if (seconds > 180) {\n        seconds = 180;\n      }\n      sb.append(seconds);\n      sb.append(' ');\n    }\n\n    sb.append(filePath);\n\n    return sb.toString();\n  }", "signature": "String getEmulatorScreenRecorderOptions(@NotNull Path filePath, @NotNull ScreenRecorderOptions options)", "full_signature": "@VisibleForTesting static String getEmulatorScreenRecorderOptions(@NotNull Path filePath, @NotNull ScreenRecorderOptions options)", "class_method_signature": "ScreenRecorderAction.getEmulatorScreenRecorderOptions(@NotNull Path filePath, @NotNull ScreenRecorderOptions options)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "append", "append", "convert", "append", "append", "append", "toString"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}