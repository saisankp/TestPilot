{"test_class": {"identifier": "GeoLocationPointTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private Point2d coords11;", "modifier": "private", "type": "Point2d", "declarator": "coords11", "var_name": "coords11"}, {"original_string": "private Point2d coords12;", "modifier": "private", "type": "Point2d", "declarator": "coords12", "var_name": "coords12"}, {"original_string": "private Point2d coords13;", "modifier": "private", "type": "Point2d", "declarator": "coords13", "var_name": "coords13"}, {"original_string": "private Point2d coords21;", "modifier": "private", "type": "Point2d", "declarator": "coords21", "var_name": "coords21"}, {"original_string": "private Point2d coords22;", "modifier": "private", "type": "Point2d", "declarator": "coords22", "var_name": "coords22"}, {"original_string": "private Point2d coords23;", "modifier": "private", "type": "Point2d", "declarator": "coords23", "var_name": "coords23"}, {"original_string": "private GeoLocationPoint location11;", "modifier": "private", "type": "GeoLocationPoint", "declarator": "location11", "var_name": "location11"}, {"original_string": "private GeoLocationPoint location12;", "modifier": "private", "type": "GeoLocationPoint", "declarator": "location12", "var_name": "location12"}, {"original_string": "private GeoLocationPoint location13;", "modifier": "private", "type": "GeoLocationPoint", "declarator": "location13", "var_name": "location13"}, {"original_string": "private GeoLocationPoint location21;", "modifier": "private", "type": "GeoLocationPoint", "declarator": "location21", "var_name": "location21"}, {"original_string": "private GeoLocationPoint location22;", "modifier": "private", "type": "GeoLocationPoint", "declarator": "location22", "var_name": "location22"}, {"original_string": "private GeoLocationPoint location23;", "modifier": "private", "type": "GeoLocationPoint", "declarator": "location23", "var_name": "location23"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/location/GeoLocationPointTest.java"}, "test_case": {"identifier": "testGetY", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetY() {\n\t\tassertEpsilonEquals(GeoLocationUtil.castDistance(this.coords11.getY()), this.location11.getY());\n\t\tassertEpsilonEquals(GeoLocationUtil.castDistance(this.coords12.getY()), this.location12.getY());\n\t\tassertEpsilonEquals(GeoLocationUtil.castDistance(this.coords13.getY()), this.location13.getY());\n\t\tassertEpsilonEquals(GeoLocationUtil.castDistance(this.coords21.getY()), this.location21.getY());\n\t\tassertEpsilonEquals(GeoLocationUtil.castDistance(this.coords22.getY()), this.location22.getY());\n\t\tassertEpsilonEquals(GeoLocationUtil.castDistance(this.coords23.getY()), this.location23.getY());\n\t}", "signature": "void testGetY()", "full_signature": "@Test public void testGetY()", "class_method_signature": "GeoLocationPointTest.testGetY()", "testcase": true, "constructor": false, "invocations": ["assertEpsilonEquals", "castDistance", "getY", "getY", "assertEpsilonEquals", "castDistance", "getY", "getY", "assertEpsilonEquals", "castDistance", "getY", "getY", "assertEpsilonEquals", "castDistance", "getY", "getY", "assertEpsilonEquals", "castDistance", "getY", "getY", "assertEpsilonEquals", "castDistance", "getY", "getY"]}, "focal_class": {"identifier": "GeoLocationPoint", "superclass": "extends AbstractGeoLocation", "interfaces": "", "fields": [{"original_string": "private final float x;", "modifier": "private final", "type": "float", "declarator": "x", "var_name": "x"}, {"original_string": "private final float y;", "modifier": "private final", "type": "float", "declarator": "y", "var_name": "y"}], "methods": [{"identifier": "GeoLocationPoint", "parameters": "(double x, double y)", "modifiers": "public", "return": "", "signature": " GeoLocationPoint(double x, double y)", "full_signature": "public  GeoLocationPoint(double x, double y)", "class_method_signature": "GeoLocationPoint.GeoLocationPoint(double x, double y)", "testcase": false, "constructor": true}, {"identifier": "toGeoId", "parameters": "()", "modifiers": "@Override @Pure public", "return": "GeoId", "signature": "GeoId toGeoId()", "full_signature": "@Override @Pure public GeoId toGeoId()", "class_method_signature": "GeoLocationPoint.toGeoId()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"checkstyle:equalshashcode\") @Pure public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override @SuppressWarnings(\"checkstyle:equalshashcode\") @Pure public int hashCode()", "class_method_signature": "GeoLocationPoint.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "()", "modifiers": "@Pure public", "return": "float", "signature": "float getX()", "full_signature": "@Pure public float getX()", "class_method_signature": "GeoLocationPoint.getX()", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "()", "modifiers": "@Pure public", "return": "float", "signature": "float getY()", "full_signature": "@Pure public float getY()", "class_method_signature": "GeoLocationPoint.getY()", "testcase": false, "constructor": false}, {"identifier": "getPoint", "parameters": "()", "modifiers": "@Pure public", "return": "Point2d", "signature": "Point2d getPoint()", "full_signature": "@Pure public Point2d getPoint()", "class_method_signature": "GeoLocationPoint.getPoint()", "testcase": false, "constructor": false}, {"identifier": "toBounds2D", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Rectangle2d", "signature": "Rectangle2d toBounds2D()", "full_signature": "@Pure @Override public Rectangle2d toBounds2D()", "class_method_signature": "GeoLocationPoint.toBounds2D()", "testcase": false, "constructor": false}, {"identifier": "toGeodesicPosition", "parameters": "()", "modifiers": "@Pure @Override public", "return": "GeodesicPosition", "signature": "GeodesicPosition toGeodesicPosition()", "full_signature": "@Pure @Override public GeodesicPosition toGeodesicPosition()", "class_method_signature": "GeoLocationPoint.toGeodesicPosition()", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/location/GeoLocationPoint.java"}, "focal_method": {"identifier": "getY", "parameters": "()", "modifiers": "@Pure public", "return": "float", "body": "@Pure\n\tpublic float getY() {\n\t\treturn this.y;\n\t}", "signature": "float getY()", "full_signature": "@Pure public float getY()", "class_method_signature": "GeoLocationPoint.getY()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}