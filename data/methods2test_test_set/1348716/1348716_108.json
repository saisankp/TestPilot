{"test_class": {"identifier": "AccountApplyPaymentActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ActionMapping actionMapping;", "modifier": "@Mock\n    private", "type": "ActionMapping", "declarator": "actionMapping", "var_name": "actionMapping"}, {"original_string": "@Mock\n    private AccountApplyPaymentActionForm form;", "modifier": "@Mock\n    private", "type": "AccountApplyPaymentActionForm", "declarator": "form", "var_name": "form"}, {"original_string": "@Mock\n    private HttpServletRequest request;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private HttpServletResponse response;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private AccountServiceFacade accountServiceFacade;", "modifier": "@Mock\n    private", "type": "AccountServiceFacade", "declarator": "accountServiceFacade", "var_name": "accountServiceFacade"}, {"original_string": "@Mock\n    private UserContext userContext;", "modifier": "@Mock\n    private", "type": "UserContext", "declarator": "userContext", "var_name": "userContext"}, {"original_string": "@Mock\n    private LegacyAcceptedPaymentTypeDao legacyAcceptedPaymentTypeDao;", "modifier": "@Mock\n    private", "type": "LegacyAcceptedPaymentTypeDao", "declarator": "legacyAcceptedPaymentTypeDao", "var_name": "legacyAcceptedPaymentTypeDao"}, {"original_string": "private AccountApplyPaymentAction accountApplyPaymentAction;", "modifier": "private", "type": "AccountApplyPaymentAction", "declarator": "accountApplyPaymentAction", "var_name": "accountApplyPaymentAction"}], "file": "application/src/test/java/org/mifos/accounts/struts/action/AccountApplyPaymentActionTest.java"}, "test_case": {"identifier": "loadShouldSetLastPaymentDateOnForm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void loadShouldSetLastPaymentDateOnForm() throws Exception {\n        when(accountServiceFacade.getAccountPaymentInformation(Matchers.<Integer>any(), Matchers.<String>any(),\n                        Matchers.<Short> any(), Matchers.<UserReferenceDto> any(), Matchers.<Date> any())).thenReturn(\n                new AccountPaymentDto(null, 0, null, null, null, new Date(1234), null, null));\n        when(form.getAccountId()).thenReturn(\"1\");\n        accountApplyPaymentAction = new AccountApplyPaymentAction(accountServiceFacade, legacyAcceptedPaymentTypeDao) {\n\n            @Override\n            protected UserContext getUserContext(HttpServletRequest request) {\n                return userContext;\n            }\n\n            @Override\n            void setValuesInSession(HttpServletRequest request, AccountApplyPaymentActionForm actionForm, AccountPaymentDto accountPaymentDto) throws PageExpiredException {\n            }\n        };\n        accountApplyPaymentAction.load(actionMapping, form, request, response);\n        verify(form).setLastPaymentDate(new Date(1234));\n    }", "signature": "void loadShouldSetLastPaymentDateOnForm()", "full_signature": "@Test public void loadShouldSetLastPaymentDateOnForm()", "class_method_signature": "AccountApplyPaymentActionTest.loadShouldSetLastPaymentDateOnForm()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAccountPaymentInformation", "any", "any", "any", "any", "any", "thenReturn", "when", "getAccountId", "load", "setLastPaymentDate", "verify"]}, "focal_class": {"identifier": "AccountApplyPaymentAction", "superclass": "extends BaseAction", "interfaces": "", "fields": [{"original_string": "private AccountService accountService = null;", "modifier": "private", "type": "AccountService", "declarator": "accountService = null", "var_name": "accountService"}], "methods": [{"identifier": "AccountApplyPaymentAction", "parameters": "()", "modifiers": "public", "return": "", "signature": " AccountApplyPaymentAction()", "full_signature": "public  AccountApplyPaymentAction()", "class_method_signature": "AccountApplyPaymentAction.AccountApplyPaymentAction()", "testcase": false, "constructor": true}, {"identifier": "AccountApplyPaymentAction", "parameters": "(AccountServiceFacade accountServiceFacade,\n            LegacyAcceptedPaymentTypeDao legacyAcceptedPaymentTypeDao)", "modifiers": "@Deprecated // For unit testing public", "return": "", "signature": " AccountApplyPaymentAction(AccountServiceFacade accountServiceFacade,\n            LegacyAcceptedPaymentTypeDao legacyAcceptedPaymentTypeDao)", "full_signature": "@Deprecated // For unit testing public  AccountApplyPaymentAction(AccountServiceFacade accountServiceFacade,\n            LegacyAcceptedPaymentTypeDao legacyAcceptedPaymentTypeDao)", "class_method_signature": "AccountApplyPaymentAction.AccountApplyPaymentAction(AccountServiceFacade accountServiceFacade,\n            LegacyAcceptedPaymentTypeDao legacyAcceptedPaymentTypeDao)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "modifiers": "@TransactionDemarcate(joinToken = true) public", "return": "ActionForward", "signature": "ActionForward load(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "full_signature": "@TransactionDemarcate(joinToken = true) public ActionForward load(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "class_method_signature": "AccountApplyPaymentAction.load(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "setValuesInSession", "parameters": "(HttpServletRequest request, AccountApplyPaymentActionForm actionForm, AccountPaymentDto accountPaymentDto)", "modifiers": "", "return": "void", "signature": "void setValuesInSession(HttpServletRequest request, AccountApplyPaymentActionForm actionForm, AccountPaymentDto accountPaymentDto)", "full_signature": " void setValuesInSession(HttpServletRequest request, AccountApplyPaymentActionForm actionForm, AccountPaymentDto accountPaymentDto)", "class_method_signature": "AccountApplyPaymentAction.setValuesInSession(HttpServletRequest request, AccountApplyPaymentActionForm actionForm, AccountPaymentDto accountPaymentDto)", "testcase": false, "constructor": false}, {"identifier": "preview", "parameters": "(ActionMapping mapping, @SuppressWarnings(\"unused\") ActionForm form, @SuppressWarnings(\"unused\") HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "modifiers": "@TransactionDemarcate(joinToken = true) public", "return": "ActionForward", "signature": "ActionForward preview(ActionMapping mapping, @SuppressWarnings(\"unused\") ActionForm form, @SuppressWarnings(\"unused\") HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "full_signature": "@TransactionDemarcate(joinToken = true) public ActionForward preview(ActionMapping mapping, @SuppressWarnings(\"unused\") ActionForm form, @SuppressWarnings(\"unused\") HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "class_method_signature": "AccountApplyPaymentAction.preview(ActionMapping mapping, @SuppressWarnings(\"unused\") ActionForm form, @SuppressWarnings(\"unused\") HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "(ActionMapping mapping, @SuppressWarnings(\"unused\") ActionForm form, @SuppressWarnings(\"unused\") HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "modifiers": "@TransactionDemarcate(joinToken = true) public", "return": "ActionForward", "signature": "ActionForward previous(ActionMapping mapping, @SuppressWarnings(\"unused\") ActionForm form, @SuppressWarnings(\"unused\") HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "full_signature": "@TransactionDemarcate(joinToken = true) public ActionForward previous(ActionMapping mapping, @SuppressWarnings(\"unused\") ActionForm form, @SuppressWarnings(\"unused\") HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "class_method_signature": "AccountApplyPaymentAction.previous(ActionMapping mapping, @SuppressWarnings(\"unused\") ActionForm form, @SuppressWarnings(\"unused\") HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "applyPayment", "parameters": "(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "modifiers": "@TransactionDemarcate(validateAndResetToken = true) @CloseSession public", "return": "ActionForward", "signature": "ActionForward applyPayment(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "full_signature": "@TransactionDemarcate(validateAndResetToken = true) @CloseSession public ActionForward applyPayment(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "class_method_signature": "AccountApplyPaymentAction.applyPayment(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "validateAmount", "parameters": "(AccountPaymentDto accountPaymentDto, String amount)", "modifiers": "private", "return": "void", "signature": "void validateAmount(AccountPaymentDto accountPaymentDto, String amount)", "full_signature": "private void validateAmount(AccountPaymentDto accountPaymentDto, String amount)", "class_method_signature": "AccountApplyPaymentAction.validateAmount(AccountPaymentDto accountPaymentDto, String amount)", "testcase": false, "constructor": false}, {"identifier": "validateAccountPayment", "parameters": "(AccountPaymentDto accountPaymentDto, Integer accountId, HttpServletRequest request)", "modifiers": "private", "return": "void", "signature": "void validateAccountPayment(AccountPaymentDto accountPaymentDto, Integer accountId, HttpServletRequest request)", "full_signature": "private void validateAccountPayment(AccountPaymentDto accountPaymentDto, Integer accountId, HttpServletRequest request)", "class_method_signature": "AccountApplyPaymentAction.validateAccountPayment(AccountPaymentDto accountPaymentDto, Integer accountId, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "checkVersion", "parameters": "(HttpServletRequest request, int accountVersion)", "modifiers": "private", "return": "void", "signature": "void checkVersion(HttpServletRequest request, int accountVersion)", "full_signature": "private void checkVersion(HttpServletRequest request, int accountVersion)", "class_method_signature": "AccountApplyPaymentAction.checkVersion(HttpServletRequest request, int accountVersion)", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "(Integer accountId)", "modifiers": "private", "return": "void", "signature": "void checkPermission(Integer accountId)", "full_signature": "private void checkPermission(Integer accountId)", "class_method_signature": "AccountApplyPaymentAction.checkPermission(Integer accountId)", "testcase": false, "constructor": false}, {"identifier": "getLoanPaymentTypeDtoForId", "parameters": "(short id)", "modifiers": "private", "return": "PaymentTypeDto", "signature": "PaymentTypeDto getLoanPaymentTypeDtoForId(short id)", "full_signature": "private PaymentTypeDto getLoanPaymentTypeDtoForId(short id)", "class_method_signature": "AccountApplyPaymentAction.getLoanPaymentTypeDtoForId(short id)", "testcase": false, "constructor": false}, {"identifier": "getFeePaymentTypeDtoForId", "parameters": "(short id)", "modifiers": "private", "return": "PaymentTypeDto", "signature": "PaymentTypeDto getFeePaymentTypeDtoForId(short id)", "full_signature": "private PaymentTypeDto getFeePaymentTypeDtoForId(short id)", "class_method_signature": "AccountApplyPaymentAction.getFeePaymentTypeDtoForId(short id)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(ActionMapping mapping, ActionForm form, @SuppressWarnings(\"unused\") HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "modifiers": "@TransactionDemarcate(validateAndResetToken = true) public", "return": "ActionForward", "signature": "ActionForward cancel(ActionMapping mapping, ActionForm form, @SuppressWarnings(\"unused\") HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "full_signature": "@TransactionDemarcate(validateAndResetToken = true) public ActionForward cancel(ActionMapping mapping, ActionForm form, @SuppressWarnings(\"unused\") HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "class_method_signature": "AccountApplyPaymentAction.cancel(ActionMapping mapping, ActionForm form, @SuppressWarnings(\"unused\") HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getForward", "parameters": "(String input)", "modifiers": "private", "return": "String", "signature": "String getForward(String input)", "full_signature": "private String getForward(String input)", "class_method_signature": "AccountApplyPaymentAction.getForward(String input)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(ActionMapping mapping, @SuppressWarnings(\"unused\") ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "modifiers": "@TransactionDemarcate(joinToken = true) public", "return": "ActionForward", "signature": "ActionForward validate(ActionMapping mapping, @SuppressWarnings(\"unused\") ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "full_signature": "@TransactionDemarcate(joinToken = true) public ActionForward validate(ActionMapping mapping, @SuppressWarnings(\"unused\") ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "class_method_signature": "AccountApplyPaymentAction.validate(ActionMapping mapping, @SuppressWarnings(\"unused\") ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "application/src/main/java/org/mifos/accounts/struts/action/AccountApplyPaymentAction.java"}, "focal_method": {"identifier": "load", "parameters": "(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "modifiers": "@TransactionDemarcate(joinToken = true) public", "return": "ActionForward", "body": "@TransactionDemarcate(joinToken = true)\n    public ActionForward load(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response) throws Exception {\n        UserContext userContext = getUserContext(request);\n        AccountApplyPaymentActionForm actionForm = (AccountApplyPaymentActionForm) form;\n        actionForm.setReceiptDate(null);\n        actionForm.setReceiptId(null);\n        actionForm.setPaymentTypeId(null);\n        actionForm.setTransactionDate(DateUtils.makeDateAsSentFromBrowser());\n        actionForm.setPrintReceipt(false);\n        actionForm.setTruePrintReceipt(false);\n\n        final AccountReferenceDto accountReferenceDto = new AccountReferenceDto(Integer.valueOf(actionForm.getAccountId()));\n        AccountPaymentDto accountPaymentDto = accountServiceFacade.getAccountPaymentInformation(\n                accountReferenceDto.getAccountId(), request.getParameter(Constants.INPUT), userContext.getLocaleId(),\n                new UserReferenceDto(userContext.getId()), DateUtils.getCurrentJavaDateTime());\n\n        setValuesInSession(request, actionForm, accountPaymentDto);\n        actionForm.setLastPaymentDate(accountPaymentDto.getLastPaymentDate());\n        actionForm.setAmount(accountPaymentDto.getTotalPaymentDue());\n        actionForm.setTransferPaymentTypeId(this.legacyAcceptedPaymentTypeDao.getSavingsTransferId());\n        return mapping.findForward(ActionForwards.load_success.toString());\n    }", "signature": "ActionForward load(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "full_signature": "@TransactionDemarcate(joinToken = true) public ActionForward load(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "class_method_signature": "AccountApplyPaymentAction.load(ActionMapping mapping, ActionForm form, HttpServletRequest request,\n            @SuppressWarnings(\"unused\") HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["getUserContext", "setReceiptDate", "setReceiptId", "setPaymentTypeId", "setTransactionDate", "makeDateAsSentFromBrowser", "setPrintReceipt", "setTruePrintReceipt", "valueOf", "getAccountId", "getAccountPaymentInformation", "getAccountId", "getParameter", "getLocaleId", "getId", "getCurrentJavaDateTime", "setValuesInSession", "setLastPaymentDate", "getLastPaymentDate", "setAmount", "getTotalPaymentDue", "setTransferPaymentTypeId", "getSavingsTransferId", "findForward", "toString"]}, "repository": {"repo_id": 1348716, "url": "https://github.com/mifos/head", "language": "Java", "is_fork": false, "fork_count": 91, "stargazer_count": 55, "size": 532732, "license": "licensed"}}