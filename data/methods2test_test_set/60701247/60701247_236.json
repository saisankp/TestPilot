{"test_class": {"identifier": "AndroidRunConfigurationEditorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final AndroidProjectRule myRule = AndroidProjectRule.inMemory();", "modifier": "@Rule\n  public final", "type": "AndroidProjectRule", "declarator": "myRule = AndroidProjectRule.inMemory()", "var_name": "myRule"}], "file": "android/testSrc/com/android/tools/idea/run/editor/AndroidRunConfigurationEditorTest.java"}, "test_case": {"identifier": "applyEditorTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void applyEditorTo() {\n    // Arrange\n    AndroidDebuggerContext androidDebuggerContext = Mockito.mock(AndroidDebuggerContext.class);\n    DeployTargetProvider provider = new CloudTestMatrixTargetProvider();\n    List<DeployTargetProvider> providers = Arrays.asList(new DeviceAndSnapshotComboBoxTargetProvider(), provider);\n\n    AndroidTestRunConfiguration configuration1 = Mockito.mock(AndroidTestRunConfiguration.class);\n    Mockito.when(configuration1.getAndroidDebuggerContext()).thenReturn(androidDebuggerContext);\n    Mockito.when(configuration1.getApplicableDeployTargetProviders()).thenReturn(providers);\n    Mockito.when(configuration1.getProfilerState()).thenReturn(new ProfilerState());\n\n    @SuppressWarnings(\"unchecked\")\n    ConfigurationSpecificEditor<AndroidTestRunConfiguration> configurationSpecificEditor = Mockito.mock(ConfigurationSpecificEditor.class);\n    Mockito.when(configurationSpecificEditor.getComponent()).thenReturn(new JLabel());\n\n    AndroidRunConfigurationEditor<AndroidTestRunConfiguration> androidRunConfigurationEditor =\n      new AndroidRunConfigurationEditor<>(\n        myRule.getProject(),\n        facet -> false,\n        configuration1,\n        true,\n        moduleSelector -> configurationSpecificEditor);\n\n    DeployTargetContext deployTargetContext = new DeployTargetContext(providers);\n\n    AndroidTestRunConfiguration configuration2 = Mockito.mock(AndroidTestRunConfiguration.class);\n    Mockito.when(configuration2.getDeployTargetContext()).thenReturn(deployTargetContext);\n    Mockito.when(configuration2.getProfilerState()).thenReturn(new ProfilerState());\n\n    // Act\n    androidRunConfigurationEditor.getDeploymentTargetOptions().getTargetComboBox().setSelectedItem(provider);\n    androidRunConfigurationEditor.applyEditorTo(configuration2);\n\n    // Assert\n    assertEquals(TargetSelectionMode.FIREBASE_DEVICE_MATRIX, deployTargetContext.getTargetSelectionMode());\n  }", "signature": "void applyEditorTo()", "full_signature": "@Test public void applyEditorTo()", "class_method_signature": "AndroidRunConfigurationEditorTest.applyEditorTo()", "testcase": true, "constructor": false, "invocations": ["mock", "asList", "mock", "thenReturn", "when", "getAndroidDebuggerContext", "thenReturn", "when", "getApplicableDeployTargetProviders", "thenReturn", "when", "getProfilerState", "mock", "thenReturn", "when", "getComponent", "getProject", "mock", "thenReturn", "when", "getDeployTargetContext", "thenReturn", "when", "getProfilerState", "setSelectedItem", "getTargetComboBox", "getDeploymentTargetOptions", "applyEditorTo", "assertEquals", "getTargetSelectionMode"]}, "focal_class": {"identifier": "AndroidRunConfigurationEditor", "superclass": "extends SettingsEditor<T>", "interfaces": "implements PanelWithAnchor,\n                                                                                                                       ActionListener", "fields": [{"original_string": "private JPanel myPanel;", "modifier": "private", "type": "JPanel", "declarator": "myPanel", "var_name": "myPanel"}, {"original_string": "protected JBTabbedPane myTabbedPane;", "modifier": "protected", "type": "JBTabbedPane", "declarator": "myTabbedPane", "var_name": "myTabbedPane"}, {"original_string": "private JBLabel myModuleJBLabel;", "modifier": "private", "type": "JBLabel", "declarator": "myModuleJBLabel", "var_name": "myModuleJBLabel"}, {"original_string": "private ModulesComboBox myModulesComboBox;", "modifier": "private", "type": "ModulesComboBox", "declarator": "myModulesComboBox", "var_name": "myModulesComboBox"}, {"original_string": "private JPanel myConfigurationSpecificPanel;", "modifier": "private", "type": "JPanel", "declarator": "myConfigurationSpecificPanel", "var_name": "myConfigurationSpecificPanel"}, {"original_string": "private final DeploymentTargetOptions myDeploymentTargetOptions;", "modifier": "private final", "type": "DeploymentTargetOptions", "declarator": "myDeploymentTargetOptions", "var_name": "myDeploymentTargetOptions"}, {"original_string": "private JCheckBox myClearLogCheckBox;", "modifier": "private", "type": "JCheckBox", "declarator": "myClearLogCheckBox", "var_name": "myClearLogCheckBox"}, {"original_string": "private JCheckBox myShowLogcatCheckBox;", "modifier": "private", "type": "JCheckBox", "declarator": "myShowLogcatCheckBox", "var_name": "myShowLogcatCheckBox"}, {"original_string": "private JCheckBox mySkipNoOpApkInstallation;", "modifier": "private", "type": "JCheckBox", "declarator": "mySkipNoOpApkInstallation", "var_name": "mySkipNoOpApkInstallation"}, {"original_string": "private JCheckBox myForceStopRunningApplicationCheckBox;", "modifier": "private", "type": "JCheckBox", "declarator": "myForceStopRunningApplicationCheckBox", "var_name": "myForceStopRunningApplicationCheckBox"}, {"original_string": "private JComponent anchor;", "modifier": "private", "type": "JComponent", "declarator": "anchor", "var_name": "anchor"}, {"original_string": "private final ConfigurationModuleSelector myModuleSelector;", "modifier": "private final", "type": "ConfigurationModuleSelector", "declarator": "myModuleSelector", "var_name": "myModuleSelector"}, {"original_string": "private ConfigurationSpecificEditor<T> myConfigurationSpecificEditor;", "modifier": "private", "type": "ConfigurationSpecificEditor<T>", "declarator": "myConfigurationSpecificEditor", "var_name": "myConfigurationSpecificEditor"}, {"original_string": "private AndroidDebuggerPanel myAndroidDebuggerPanel;", "modifier": "private", "type": "AndroidDebuggerPanel", "declarator": "myAndroidDebuggerPanel", "var_name": "myAndroidDebuggerPanel"}, {"original_string": "private final AndroidProfilersPanel myAndroidProfilersPanel;", "modifier": "private final", "type": "AndroidProfilersPanel", "declarator": "myAndroidProfilersPanel", "var_name": "myAndroidProfilersPanel"}], "methods": [{"identifier": "AndroidRunConfigurationEditor", "parameters": "(Project project,\n                                       Predicate<AndroidFacet> libraryProjectValidator,\n                                       T config,\n                                       boolean showLogcatCheckbox,\n                                       Function<ConfigurationModuleSelector, ConfigurationSpecificEditor<T>> configurationSpecificEditorFactory)", "modifiers": "public", "return": "", "signature": " AndroidRunConfigurationEditor(Project project,\n                                       Predicate<AndroidFacet> libraryProjectValidator,\n                                       T config,\n                                       boolean showLogcatCheckbox,\n                                       Function<ConfigurationModuleSelector, ConfigurationSpecificEditor<T>> configurationSpecificEditorFactory)", "full_signature": "public  AndroidRunConfigurationEditor(Project project,\n                                       Predicate<AndroidFacet> libraryProjectValidator,\n                                       T config,\n                                       boolean showLogcatCheckbox,\n                                       Function<ConfigurationModuleSelector, ConfigurationSpecificEditor<T>> configurationSpecificEditorFactory)", "class_method_signature": "AndroidRunConfigurationEditor.AndroidRunConfigurationEditor(Project project,\n                                       Predicate<AndroidFacet> libraryProjectValidator,\n                                       T config,\n                                       boolean showLogcatCheckbox,\n                                       Function<ConfigurationModuleSelector, ConfigurationSpecificEditor<T>> configurationSpecificEditorFactory)", "testcase": false, "constructor": true}, {"identifier": "checkValidationResults", "parameters": "(@NotNull List<ValidationError> errors)", "modifiers": "private", "return": "void", "signature": "void checkValidationResults(@NotNull List<ValidationError> errors)", "full_signature": "private void checkValidationResults(@NotNull List<ValidationError> errors)", "class_method_signature": "AndroidRunConfigurationEditor.checkValidationResults(@NotNull List<ValidationError> errors)", "testcase": false, "constructor": false}, {"identifier": "getAnchor", "parameters": "()", "modifiers": "@Override public", "return": "JComponent", "signature": "JComponent getAnchor()", "full_signature": "@Override public JComponent getAnchor()", "class_method_signature": "AndroidRunConfigurationEditor.getAnchor()", "testcase": false, "constructor": false}, {"identifier": "setAnchor", "parameters": "(JComponent anchor)", "modifiers": "@Override public", "return": "void", "signature": "void setAnchor(JComponent anchor)", "full_signature": "@Override public void setAnchor(JComponent anchor)", "class_method_signature": "AndroidRunConfigurationEditor.setAnchor(JComponent anchor)", "testcase": false, "constructor": false}, {"identifier": "resetEditorFrom", "parameters": "(@NotNull T configuration)", "modifiers": "@Override protected", "return": "void", "signature": "void resetEditorFrom(@NotNull T configuration)", "full_signature": "@Override protected void resetEditorFrom(@NotNull T configuration)", "class_method_signature": "AndroidRunConfigurationEditor.resetEditorFrom(@NotNull T configuration)", "testcase": false, "constructor": false}, {"identifier": "applyEditorTo", "parameters": "(@NotNull T configuration)", "modifiers": "@Override protected", "return": "void", "signature": "void applyEditorTo(@NotNull T configuration)", "full_signature": "@Override protected void applyEditorTo(@NotNull T configuration)", "class_method_signature": "AndroidRunConfigurationEditor.applyEditorTo(@NotNull T configuration)", "testcase": false, "constructor": false}, {"identifier": "createEditor", "parameters": "()", "modifiers": "@Override @NotNull protected", "return": "JComponent", "signature": "JComponent createEditor()", "full_signature": "@Override @NotNull protected JComponent createEditor()", "class_method_signature": "AndroidRunConfigurationEditor.createEditor()", "testcase": false, "constructor": false}, {"identifier": "getModuleSelector", "parameters": "()", "modifiers": "public", "return": "ConfigurationModuleSelector", "signature": "ConfigurationModuleSelector getModuleSelector()", "full_signature": "public ConfigurationModuleSelector getModuleSelector()", "class_method_signature": "AndroidRunConfigurationEditor.getModuleSelector()", "testcase": false, "constructor": false}, {"identifier": "getModuleComboBox", "parameters": "()", "modifiers": "@NotNull", "return": "JComboBox", "signature": "JComboBox getModuleComboBox()", "full_signature": "@NotNull JComboBox getModuleComboBox()", "class_method_signature": "AndroidRunConfigurationEditor.getModuleComboBox()", "testcase": false, "constructor": false}, {"identifier": "actionPerformed", "parameters": "(ActionEvent e)", "modifiers": "@Override public", "return": "void", "signature": "void actionPerformed(ActionEvent e)", "full_signature": "@Override public void actionPerformed(ActionEvent e)", "class_method_signature": "AndroidRunConfigurationEditor.actionPerformed(ActionEvent e)", "testcase": false, "constructor": false}, {"identifier": "getDeploymentTargetOptions", "parameters": "()", "modifiers": "@Nullable @VisibleForTesting", "return": "DeploymentTargetOptions", "signature": "DeploymentTargetOptions getDeploymentTargetOptions()", "full_signature": "@Nullable @VisibleForTesting DeploymentTargetOptions getDeploymentTargetOptions()", "class_method_signature": "AndroidRunConfigurationEditor.getDeploymentTargetOptions()", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/run/editor/AndroidRunConfigurationEditor.java"}, "focal_method": {"identifier": "applyEditorTo", "parameters": "(@NotNull T configuration)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void applyEditorTo(@NotNull T configuration) {\n    myModuleSelector.applyTo(configuration);\n\n    if (myDeploymentTargetOptions != null) {\n      myDeploymentTargetOptions.applyTo(configuration);\n    }\n\n    configuration.CLEAR_LOGCAT = myClearLogCheckBox.isSelected();\n    configuration.SHOW_LOGCAT_AUTOMATICALLY = myShowLogcatCheckBox.isSelected();\n    configuration.SKIP_NOOP_APK_INSTALLATIONS = mySkipNoOpApkInstallation.isSelected();\n    configuration.FORCE_STOP_RUNNING_APP = myForceStopRunningApplicationCheckBox.isSelected();\n\n    myConfigurationSpecificEditor.applyTo(configuration);\n\n    if (myAndroidDebuggerPanel != null) {\n      myAndroidDebuggerPanel.applyTo(configuration.getAndroidDebuggerContext());\n    }\n    myAndroidProfilersPanel.applyTo(configuration.getProfilerState());\n  }", "signature": "void applyEditorTo(@NotNull T configuration)", "full_signature": "@Override protected void applyEditorTo(@NotNull T configuration)", "class_method_signature": "AndroidRunConfigurationEditor.applyEditorTo(@NotNull T configuration)", "testcase": false, "constructor": false, "invocations": ["applyTo", "applyTo", "isSelected", "isSelected", "isSelected", "isSelected", "applyTo", "applyTo", "getAndroidDebuggerContext", "applyTo", "getProfilerState"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}