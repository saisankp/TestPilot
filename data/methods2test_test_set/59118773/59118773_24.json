{"test_class": {"identifier": "ExcelFieldImportServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "persistence/src/test/java/org/devgateway/toolkit/persistence/excel/ExcelFieldImportServiceTest.java"}, "test_case": {"identifier": "getFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getFields() throws Exception {\n        final String[] expectedFields = {\"otherClass1\", \"otherClass2\"};\n\n        final Iterator<Field> fields = ExcelFieldImportService.getFields(TestClass.class);\n\n        final List<String> actualFields = new ArrayList<>();\n        while (fields.hasNext()) {\n            final Field f = fields.next();\n            actualFields.add(f.getName());\n        }\n\n        Assert.assertArrayEquals(\"Check get fields\", expectedFields, actualFields.toArray());\n    }", "signature": "void getFields()", "full_signature": "@Test public void getFields()", "class_method_signature": "ExcelFieldImportServiceTest.getFields()", "testcase": true, "constructor": false, "invocations": ["getFields", "hasNext", "next", "add", "getName", "assertArrayEquals", "toArray"]}, "focal_class": {"identifier": "ExcelFieldImportService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ExcelFieldImportService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExcelFieldImportService.class)", "var_name": "logger"}, {"original_string": "private static Map<Field, FieldTypeImport> fieldsTypeCache;", "modifier": "private static", "type": "Map<Field, FieldTypeImport>", "declarator": "fieldsTypeCache", "var_name": "fieldsTypeCache"}, {"original_string": "private static Map<Class, List<Field>> fieldsCache;", "modifier": "private static", "type": "Map<Class, List<Field>>", "declarator": "fieldsCache", "var_name": "fieldsCache"}, {"original_string": "private static Map<String, BaseJpaRepository> repositoryCache;", "modifier": "private static", "type": "Map<String, BaseJpaRepository>", "declarator": "repositoryCache", "var_name": "repositoryCache"}, {"original_string": "private static Map<String, Object> repositoryValuesCache;", "modifier": "private static", "type": "Map<String, Object>", "declarator": "repositoryValuesCache", "var_name": "repositoryValuesCache"}, {"original_string": "private static Map<String, Method> repositoryMethodsCache;", "modifier": "private static", "type": "Map<String, Method>", "declarator": "repositoryMethodsCache", "var_name": "repositoryMethodsCache"}], "methods": [{"identifier": "ExcelFieldImportService", "parameters": "()", "modifiers": "private", "return": "", "signature": " ExcelFieldImportService()", "full_signature": "private  ExcelFieldImportService()", "class_method_signature": "ExcelFieldImportService.ExcelFieldImportService()", "testcase": false, "constructor": true}, {"identifier": "getFieldType", "parameters": "(final Field field)", "modifiers": "public static", "return": "FieldTypeImport", "signature": "FieldTypeImport getFieldType(final Field field)", "full_signature": "public static FieldTypeImport getFieldType(final Field field)", "class_method_signature": "ExcelFieldImportService.getFieldType(final Field field)", "testcase": false, "constructor": false}, {"identifier": "getFields", "parameters": "(final Class clazz)", "modifiers": "public static", "return": "Iterator<Field>", "signature": "Iterator<Field> getFields(final Class clazz)", "full_signature": "public static Iterator<Field> getFields(final Class clazz)", "class_method_signature": "ExcelFieldImportService.getFields(final Class clazz)", "testcase": false, "constructor": false}, {"identifier": "getFieldProp", "parameters": "(final Field field)", "modifiers": "public static", "return": "String", "signature": "String getFieldProp(final Field field)", "full_signature": "public static String getFieldProp(final Field field)", "class_method_signature": "ExcelFieldImportService.getFieldProp(final Field field)", "testcase": false, "constructor": false}, {"identifier": "getFieldBean", "parameters": "(final Field field)", "modifiers": "public static", "return": "Class", "signature": "Class getFieldBean(final Field field)", "full_signature": "public static Class getFieldBean(final Field field)", "class_method_signature": "ExcelFieldImportService.getFieldBean(final Field field)", "testcase": false, "constructor": false}, {"identifier": "getFieldClazz", "parameters": "(final Field field)", "modifiers": "public static", "return": "Class[]", "signature": "Class[] getFieldClazz(final Field field)", "full_signature": "public static Class[] getFieldClazz(final Field field)", "class_method_signature": "ExcelFieldImportService.getFieldClazz(final Field field)", "testcase": false, "constructor": false}, {"identifier": "getObjectFromRepository", "parameters": "(final ApplicationContext applicationContext, final Field parentField,\n                                                 final Field field, final Object cellValue, final ImportBean importBean)", "modifiers": "public static", "return": "Object", "signature": "Object getObjectFromRepository(final ApplicationContext applicationContext, final Field parentField,\n                                                 final Field field, final Object cellValue, final ImportBean importBean)", "full_signature": "public static Object getObjectFromRepository(final ApplicationContext applicationContext, final Field parentField,\n                                                 final Field field, final Object cellValue, final ImportBean importBean)", "class_method_signature": "ExcelFieldImportService.getObjectFromRepository(final ApplicationContext applicationContext, final Field parentField,\n                                                 final Field field, final Object cellValue, final ImportBean importBean)", "testcase": false, "constructor": false}, {"identifier": "findMethod", "parameters": "(final Class<? extends BaseJpaRepository> clazzRepository,\n                                     final String prop, final Class methodParamClass)", "modifiers": "private static", "return": "Method", "signature": "Method findMethod(final Class<? extends BaseJpaRepository> clazzRepository,\n                                     final String prop, final Class methodParamClass)", "full_signature": "private static Method findMethod(final Class<? extends BaseJpaRepository> clazzRepository,\n                                     final String prop, final Class methodParamClass)", "class_method_signature": "ExcelFieldImportService.findMethod(final Class<? extends BaseJpaRepository> clazzRepository,\n                                     final String prop, final Class methodParamClass)", "testcase": false, "constructor": false}], "file": "persistence/src/main/java/org/devgateway/toolkit/persistence/excel/ExcelFieldImportService.java"}, "focal_method": {"identifier": "getFields", "parameters": "(final Class clazz)", "modifiers": "public static", "return": "Iterator<Field>", "body": "public static Iterator<Field> getFields(final Class clazz) {\n        final Iterator<Field> fields;\n\n        if (fieldsCache.get(clazz) != null) {\n            final List<Field> fieldsList = fieldsCache.get(clazz);\n            fields = fieldsList.iterator();\n        } else {\n            final ClassFields classFields = new ClassFieldsExcelImport(new ClassFieldsDefault(clazz, true));\n            fields = classFields.getFields();\n\n            fieldsCache.put(clazz, Lists.newArrayList(classFields.getFields()));\n        }\n\n        return fields;\n    }", "signature": "Iterator<Field> getFields(final Class clazz)", "full_signature": "public static Iterator<Field> getFields(final Class clazz)", "class_method_signature": "ExcelFieldImportService.getFields(final Class clazz)", "testcase": false, "constructor": false, "invocations": ["get", "get", "iterator", "getFields", "put", "newArrayList", "getFields"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}