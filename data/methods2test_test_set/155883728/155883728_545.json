{"test_class": {"identifier": "JackrabbitWorkspaceFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/JackrabbitWorkspaceFacadeTest.java"}, "test_case": {"identifier": "testCreateWorkspace", "parameters": "()", "modifiers": "@Test(expected = ListenerReadOnlyException.class) public", "return": "void", "body": "@Test(expected = ListenerReadOnlyException.class)\n    public void testCreateWorkspace() throws Exception {\n        JackrabbitWorkspaceFacade<JackrabbitSession> facade = getFacade(mock(JackrabbitWorkspace.class));\n        facade.createWorkspace(\"\", (InputSource) null);\n    }", "signature": "void testCreateWorkspace()", "full_signature": "@Test(expected = ListenerReadOnlyException.class) public void testCreateWorkspace()", "class_method_signature": "JackrabbitWorkspaceFacadeTest.testCreateWorkspace()", "testcase": true, "constructor": false, "invocations": ["getFacade", "mock", "createWorkspace"]}, "focal_class": {"identifier": "JackrabbitWorkspaceFacade", "superclass": "extends WorkspaceFacade<JackrabbitWorkspace, S>", "interfaces": "implements JackrabbitWorkspace", "fields": [], "methods": [{"identifier": "JackrabbitWorkspaceFacade", "parameters": "(final @NotNull JackrabbitWorkspace delegate,\n                                     final @NotNull SessionFacade<S> session)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "", "signature": " JackrabbitWorkspaceFacade(final @NotNull JackrabbitWorkspace delegate,\n                                     final @NotNull SessionFacade<S> session)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public  JackrabbitWorkspaceFacade(final @NotNull JackrabbitWorkspace delegate,\n                                     final @NotNull SessionFacade<S> session)", "class_method_signature": "JackrabbitWorkspaceFacade.JackrabbitWorkspaceFacade(final @NotNull JackrabbitWorkspace delegate,\n                                     final @NotNull SessionFacade<S> session)", "testcase": false, "constructor": true}, {"identifier": "getPrivilegeManager", "parameters": "()", "modifiers": "@Override public", "return": "PrivilegeManager", "signature": "PrivilegeManager getPrivilegeManager()", "full_signature": "@Override public PrivilegeManager getPrivilegeManager()", "class_method_signature": "JackrabbitWorkspaceFacade.getPrivilegeManager()", "testcase": false, "constructor": false}, {"identifier": "createWorkspace", "parameters": "(final String workspaceName, final InputSource workspaceTemplate)", "modifiers": "@Override public final", "return": "void", "signature": "void createWorkspace(final String workspaceName, final InputSource workspaceTemplate)", "full_signature": "@Override public final void createWorkspace(final String workspaceName, final InputSource workspaceTemplate)", "class_method_signature": "JackrabbitWorkspaceFacade.createWorkspace(final String workspaceName, final InputSource workspaceTemplate)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/JackrabbitWorkspaceFacade.java"}, "focal_method": {"identifier": "createWorkspace", "parameters": "(final String workspaceName, final InputSource workspaceTemplate)", "modifiers": "@Override public final", "return": "void", "body": "@Override\n    public final void createWorkspace(final String workspaceName, final InputSource workspaceTemplate)\n            throws RepositoryException {\n        throw new ListenerReadOnlyException();\n    }", "signature": "void createWorkspace(final String workspaceName, final InputSource workspaceTemplate)", "full_signature": "@Override public final void createWorkspace(final String workspaceName, final InputSource workspaceTemplate)", "class_method_signature": "JackrabbitWorkspaceFacade.createWorkspace(final String workspaceName, final InputSource workspaceTemplate)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}