{"test_class": {"identifier": "LanguagesTest", "superclass": "", "interfaces": "", "fields": [], "file": "gazeplay-commons/src/test/java/net/gazeplay/commons/utils/multilinguism/LanguagesTest.java"}, "test_case": {"identifier": "shouldGetValidLocale", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldGetValidLocale() {\n        LanguageDetails result = Languages.getLocale(new Locale(\"eng\", \"GB\"));\n        assertEquals(\"English\", result.getLabel());\n        assertTrue(result.getFlags().get(0).contains(\"Flag_of_the_United_Kingdom\"));\n    }", "signature": "void shouldGetValidLocale()", "full_signature": "@Test void shouldGetValidLocale()", "class_method_signature": "LanguagesTest.shouldGetValidLocale()", "testcase": true, "constructor": false, "invocations": ["getLocale", "assertEquals", "getLabel", "assertTrue", "contains", "get", "getFlags"]}, "focal_class": {"identifier": "Languages", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final SortedMap<Locale, LanguageDetails> languageMap = Collections.unmodifiableSortedMap(createLanguagesMap());", "modifier": "private static final", "type": "SortedMap<Locale, LanguageDetails>", "declarator": "languageMap = Collections.unmodifiableSortedMap(createLanguagesMap())", "var_name": "languageMap"}, {"original_string": "private static final Locale DEFAULT_CODE = new Locale(\"fra\", \"FR\");", "modifier": "private static final", "type": "Locale", "declarator": "DEFAULT_CODE = new Locale(\"fra\", \"FR\")", "var_name": "DEFAULT_CODE"}, {"original_string": "private static final String flagsPath = \"data/common/flags/\";", "modifier": "private static final", "type": "String", "declarator": "flagsPath = \"data/common/flags/\"", "var_name": "flagsPath"}], "methods": [{"identifier": "createLanguagesMap", "parameters": "()", "modifiers": "private static", "return": "SortedMap<Locale, LanguageDetails>", "signature": "SortedMap<Locale, LanguageDetails> createLanguagesMap()", "full_signature": "private static SortedMap<Locale, LanguageDetails> createLanguagesMap()", "class_method_signature": "Languages.createLanguagesMap()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final SortedMap<Locale, LanguageDetails> result, final LanguageDetails languageDetails)", "modifiers": "private static", "return": "void", "signature": "void put(final SortedMap<Locale, LanguageDetails> result, final LanguageDetails languageDetails)", "full_signature": "private static void put(final SortedMap<Locale, LanguageDetails> result, final LanguageDetails languageDetails)", "class_method_signature": "Languages.put(final SortedMap<Locale, LanguageDetails> result, final LanguageDetails languageDetails)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(final Locale locale, final String language, final boolean stableTranslationAvailable, final boolean leftAligned, final String... flags)", "modifiers": "private static", "return": "LanguageDetails", "signature": "LanguageDetails build(final Locale locale, final String language, final boolean stableTranslationAvailable, final boolean leftAligned, final String... flags)", "full_signature": "private static LanguageDetails build(final Locale locale, final String language, final boolean stableTranslationAvailable, final boolean leftAligned, final String... flags)", "class_method_signature": "Languages.build(final Locale locale, final String language, final boolean stableTranslationAvailable, final boolean leftAligned, final String... flags)", "testcase": false, "constructor": false}, {"identifier": "toFlagsLocations", "parameters": "(final String[] flags)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> toFlagsLocations(final String[] flags)", "full_signature": "private static List<String> toFlagsLocations(final String[] flags)", "class_method_signature": "Languages.toFlagsLocations(final String[] flags)", "testcase": false, "constructor": false}, {"identifier": "getLocale", "parameters": "(Locale locale)", "modifiers": "public static", "return": "LanguageDetails", "signature": "LanguageDetails getLocale(Locale locale)", "full_signature": "public static LanguageDetails getLocale(Locale locale)", "class_method_signature": "Languages.getLocale(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getAllLanguageDetails", "parameters": "()", "modifiers": "public static", "return": "Collection<LanguageDetails>", "signature": "Collection<LanguageDetails> getAllLanguageDetails()", "full_signature": "public static Collection<LanguageDetails> getAllLanguageDetails()", "class_method_signature": "Languages.getAllLanguageDetails()", "testcase": false, "constructor": false}, {"identifier": "getAllCodes", "parameters": "()", "modifiers": "public static", "return": "Collection<Locale>", "signature": "Collection<Locale> getAllCodes()", "full_signature": "public static Collection<Locale> getAllCodes()", "class_method_signature": "Languages.getAllCodes()", "testcase": false, "constructor": false}], "file": "gazeplay-commons/src/main/java/net/gazeplay/commons/utils/multilinguism/Languages.java"}, "focal_method": {"identifier": "getLocale", "parameters": "(Locale locale)", "modifiers": "public static", "return": "LanguageDetails", "body": "public static LanguageDetails getLocale(Locale locale) {\n        Locale result = locale;\n        if (result == null) {\n            result = DEFAULT_CODE;\n        }\n\n        final LanguageDetails localeValue = languageMap.get(result);\n\n        if (localeValue == null) {\n            result = DEFAULT_CODE;\n        }\n\n        return languageMap.get(result);\n    }", "signature": "LanguageDetails getLocale(Locale locale)", "full_signature": "public static LanguageDetails getLocale(Locale locale)", "class_method_signature": "Languages.getLocale(Locale locale)", "testcase": false, "constructor": false, "invocations": ["get", "get"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}