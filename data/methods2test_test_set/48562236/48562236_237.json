{"test_class": {"identifier": "ExtendedBufferedReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/csv/ExtendedBufferedReaderTest.java"}, "test_case": {"identifier": "testReadLine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadLine() throws Exception {\n        ExtendedBufferedReader br = getBufferedReader(\"\");\n        assertNull(br.readLine());\n\n        br = getBufferedReader(\"\\n\");\n        assertEquals(\"\",br.readLine());\n        assertNull(br.readLine());\n\n        br = getBufferedReader(\"foo\\n\\nhello\");\n        assertEquals(0, br.getCurrentLineNumber());\n        assertEquals(\"foo\",br.readLine());\n        assertEquals(1, br.getCurrentLineNumber());\n        assertEquals(\"\",br.readLine());\n        assertEquals(2, br.getCurrentLineNumber());\n        assertEquals(\"hello\",br.readLine());\n        assertEquals(3, br.getCurrentLineNumber());\n        assertNull(br.readLine());\n        assertEquals(3, br.getCurrentLineNumber());\n\n        br = getBufferedReader(\"foo\\n\\nhello\");\n        assertEquals('f', br.read());\n        assertEquals('o', br.lookAhead());\n        assertEquals(\"oo\",br.readLine());\n        assertEquals(1, br.getCurrentLineNumber());\n        assertEquals('\\n', br.lookAhead());\n        assertEquals(\"\",br.readLine());\n        assertEquals(2, br.getCurrentLineNumber());\n        assertEquals('h', br.lookAhead());\n        assertEquals(\"hello\",br.readLine());\n        assertNull(br.readLine());\n        assertEquals(3, br.getCurrentLineNumber());\n\n\n        br = getBufferedReader(\"foo\\rbaar\\r\\nfoo\");\n        assertEquals(\"foo\",br.readLine());\n        assertEquals('b', br.lookAhead());\n        assertEquals(\"baar\",br.readLine());\n        assertEquals('f', br.lookAhead());\n        assertEquals(\"foo\",br.readLine());\n        assertNull(br.readLine());\n    }", "signature": "void testReadLine()", "full_signature": "@Test public void testReadLine()", "class_method_signature": "ExtendedBufferedReaderTest.testReadLine()", "testcase": true, "constructor": false, "invocations": ["getBufferedReader", "assertNull", "readLine", "getBufferedReader", "assertEquals", "readLine", "assertNull", "readLine", "getBufferedReader", "assertEquals", "getCurrentLineNumber", "assertEquals", "readLine", "assertEquals", "getCurrentLineNumber", "assertEquals", "readLine", "assertEquals", "getCurrentLineNumber", "assertEquals", "readLine", "assertEquals", "getCurrentLineNumber", "assertNull", "readLine", "assertEquals", "getCurrentLineNumber", "getBufferedReader", "assertEquals", "read", "assertEquals", "lookAhead", "assertEquals", "readLine", "assertEquals", "getCurrentLineNumber", "assertEquals", "lookAhead", "assertEquals", "readLine", "assertEquals", "getCurrentLineNumber", "assertEquals", "lookAhead", "assertEquals", "readLine", "assertNull", "readLine", "assertEquals", "getCurrentLineNumber", "getBufferedReader", "assertEquals", "readLine", "assertEquals", "lookAhead", "assertEquals", "readLine", "assertEquals", "lookAhead", "assertEquals", "readLine", "assertNull", "readLine"]}, "focal_class": {"identifier": "ExtendedBufferedReader", "superclass": "extends BufferedReader", "interfaces": "", "fields": [{"original_string": "private int lastChar = UNDEFINED;", "modifier": "private", "type": "int", "declarator": "lastChar = UNDEFINED", "var_name": "lastChar"}, {"original_string": "private long eolCounter = 0;", "modifier": "private", "type": "long", "declarator": "eolCounter = 0", "var_name": "eolCounter"}, {"original_string": "private boolean closed;", "modifier": "private", "type": "boolean", "declarator": "closed", "var_name": "closed"}], "methods": [{"identifier": "ExtendedBufferedReader", "parameters": "(final Reader reader)", "modifiers": "", "return": "", "signature": " ExtendedBufferedReader(final Reader reader)", "full_signature": "  ExtendedBufferedReader(final Reader reader)", "class_method_signature": "ExtendedBufferedReader.ExtendedBufferedReader(final Reader reader)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "ExtendedBufferedReader.read()", "testcase": false, "constructor": false}, {"identifier": "getLastChar", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getLastChar()", "full_signature": " int getLastChar()", "class_method_signature": "ExtendedBufferedReader.getLastChar()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(final char[] buf, final int offset, final int length)", "modifiers": "@Override public", "return": "int", "signature": "int read(final char[] buf, final int offset, final int length)", "full_signature": "@Override public int read(final char[] buf, final int offset, final int length)", "class_method_signature": "ExtendedBufferedReader.read(final char[] buf, final int offset, final int length)", "testcase": false, "constructor": false}, {"identifier": "readLine", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String readLine()", "full_signature": "@Override public String readLine()", "class_method_signature": "ExtendedBufferedReader.readLine()", "testcase": false, "constructor": false}, {"identifier": "lookAhead", "parameters": "()", "modifiers": "", "return": "int", "signature": "int lookAhead()", "full_signature": " int lookAhead()", "class_method_signature": "ExtendedBufferedReader.lookAhead()", "testcase": false, "constructor": false}, {"identifier": "getCurrentLineNumber", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getCurrentLineNumber()", "full_signature": " long getCurrentLineNumber()", "class_method_signature": "ExtendedBufferedReader.getCurrentLineNumber()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "ExtendedBufferedReader.isClosed()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ExtendedBufferedReader.close()", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/csv/ExtendedBufferedReader.java"}, "focal_method": {"identifier": "readLine", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String readLine() throws IOException {\n        final String line = super.readLine();\n\n        if (line != null) {\n            lastChar = LF; // needed for detecting start of line\n            eolCounter++;\n        } else {\n            lastChar = END_OF_STREAM;\n        }\n\n        return line;\n    }", "signature": "String readLine()", "full_signature": "@Override public String readLine()", "class_method_signature": "ExtendedBufferedReader.readLine()", "testcase": false, "constructor": false, "invocations": ["readLine"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}