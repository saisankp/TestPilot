{"test_class": {"identifier": "DASpecificationTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/driverspecificationandinjection/DASpecificationTest.java"}, "test_case": {"identifier": "getArtifactTypeHierarchy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getArtifactTypeHierarchy() throws Exception {\n        setRevisionTo(\"af529e513388dc9358a8f700757d8dc59aba3a55\");\n        ServiceTemplateId id = new ServiceTemplateId(\"http://winery.opentosca.org/test/servicetemplates/ponyuniverse/daspecifier\", \"DASpecificationTest\", false);\n        TTopologyTemplate topologyTemplate = this.repository.getElement(id).getTopologyTemplate();\n\n        TNodeTemplate nodeTemplate = topologyTemplate.getNodeTemplate(\"westernequipment\");\n\n        List<TArtifactType> artifactTypes = DASpecification.getArtifactTypeHierarchy(DASpecification.getArtifactTypeOfDA(nodeTemplate.getDeploymentArtifacts().getDeploymentArtifact().get(0)));\n        List<String> artifactTypeNames = new ArrayList<>();\n        artifactTypes.stream().forEach(at -> artifactTypeNames.add(at.getName()));\n\n        assertEquals(2, artifactTypes.size());\n        assertTrue(artifactTypeNames.contains(\"WesternEquipment_Pony\"));\n        assertTrue(artifactTypeNames.contains(\"PonyEquipment\"));\n    }", "signature": "void getArtifactTypeHierarchy()", "full_signature": "@Test public void getArtifactTypeHierarchy()", "class_method_signature": "DASpecificationTest.getArtifactTypeHierarchy()", "testcase": true, "constructor": false, "invocations": ["setRevisionTo", "getTopologyTemplate", "getElement", "getNodeTemplate", "getArtifactTypeHierarchy", "getArtifactTypeOfDA", "get", "getDeploymentArtifact", "getDeploymentArtifacts", "forEach", "stream", "add", "getName", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "DASpecification", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getNodeTemplatesWithAbstractDAs", "parameters": "(TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "List<TNodeTemplate>", "signature": "List<TNodeTemplate> getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "full_signature": "public static List<TNodeTemplate> getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getArtifactTypeOfDA", "parameters": "(TDeploymentArtifact deploymentArtifact)", "modifiers": "public static", "return": "TArtifactType", "signature": "TArtifactType getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "full_signature": "public static TArtifactType getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "class_method_signature": "DASpecification.getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "testcase": false, "constructor": false}, {"identifier": "getArtifactTypeHierarchy", "parameters": "(TArtifactType artifactType)", "modifiers": "public static", "return": "List<TArtifactType>", "signature": "List<TArtifactType> getArtifactTypeHierarchy(TArtifactType artifactType)", "full_signature": "public static List<TArtifactType> getArtifactTypeHierarchy(TArtifactType artifactType)", "class_method_signature": "DASpecification.getArtifactTypeHierarchy(TArtifactType artifactType)", "testcase": false, "constructor": false}, {"identifier": "getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode", "parameters": "(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "Map<TRelationshipTemplate, TNodeTemplate>", "signature": "Map<TRelationshipTemplate, TNodeTemplate> getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "full_signature": "public static Map<TRelationshipTemplate, TNodeTemplate> getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getNodesWithSuitableConcreteDAs", "parameters": "(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "TNodeTemplate", "signature": "TNodeTemplate getNodesWithSuitableConcreteDAs(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "full_signature": "public static TNodeTemplate getNodesWithSuitableConcreteDAs(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodesWithSuitableConcreteDAs(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getSuitableConcreteDA", "parameters": "(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "modifiers": "public static", "return": "TDeploymentArtifact", "signature": "TDeploymentArtifact getSuitableConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "full_signature": "public static TDeploymentArtifact getSuitableConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "class_method_signature": "DASpecification.getSuitableConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "testcase": false, "constructor": false}, {"identifier": "getmatchingNodeTypeImplementations", "parameters": "(QName nodeTypeQName)", "modifiers": "private static", "return": "List<TNodeTypeImplementation>", "signature": "List<TNodeTypeImplementation> getmatchingNodeTypeImplementations(QName nodeTypeQName)", "full_signature": "private static List<TNodeTypeImplementation> getmatchingNodeTypeImplementations(QName nodeTypeQName)", "class_method_signature": "DASpecification.getmatchingNodeTypeImplementations(QName nodeTypeQName)", "testcase": false, "constructor": false}, {"identifier": "getConcreteDA", "parameters": "(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "modifiers": "private static", "return": "TDeploymentArtifact", "signature": "TDeploymentArtifact getConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "full_signature": "private static TDeploymentArtifact getConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "class_method_signature": "DASpecification.getConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "testcase": false, "constructor": false}, {"identifier": "getBasisRelationshipType", "parameters": "(QName relationshipTypeQName)", "modifiers": "private static", "return": "TRelationshipType", "signature": "TRelationshipType getBasisRelationshipType(QName relationshipTypeQName)", "full_signature": "private static TRelationshipType getBasisRelationshipType(QName relationshipTypeQName)", "class_method_signature": "DASpecification.getBasisRelationshipType(QName relationshipTypeQName)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/driverspecificationandinjection/DASpecification.java"}, "focal_method": {"identifier": "getArtifactTypeHierarchy", "parameters": "(TArtifactType artifactType)", "modifiers": "public static", "return": "List<TArtifactType>", "body": "public static List<TArtifactType> getArtifactTypeHierarchy(TArtifactType artifactType) {\n\n        List<TArtifactType> artifactTypeHierarchy = new ArrayList<>();\n\n        TArtifactType basisArtifactType = artifactType;\n        artifactTypeHierarchy.add(basisArtifactType);\n\n        while (basisArtifactType != null) {\n            if (basisArtifactType.getDerivedFrom() != null) {\n                QName parentArtifactTypeQName = basisArtifactType.getDerivedFrom().getTypeRef();\n                ArtifactTypeId parentArtifactTypeId = new ArtifactTypeId(parentArtifactTypeQName);\n                basisArtifactType = RepositoryFactory.getRepository().getElement(parentArtifactTypeId);\n                artifactTypeHierarchy.add(basisArtifactType);\n            } else {\n                basisArtifactType = null;\n            }\n        }\n\n        return artifactTypeHierarchy;\n    }", "signature": "List<TArtifactType> getArtifactTypeHierarchy(TArtifactType artifactType)", "full_signature": "public static List<TArtifactType> getArtifactTypeHierarchy(TArtifactType artifactType)", "class_method_signature": "DASpecification.getArtifactTypeHierarchy(TArtifactType artifactType)", "testcase": false, "constructor": false, "invocations": ["add", "getDerivedFrom", "getTypeRef", "getDerivedFrom", "getElement", "getRepository", "add"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}