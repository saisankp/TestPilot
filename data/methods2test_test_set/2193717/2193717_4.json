{"test_class": {"identifier": "TestMatcherAnd", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic final JUnitRuleMockery context = new JUnitRuleMockery();", "modifier": "@Rule\n\tpublic final", "type": "JUnitRuleMockery", "declarator": "context = new JUnitRuleMockery()", "var_name": "context"}, {"original_string": "private final Matcher<String> matcherA = containsString(\"a\");", "modifier": "private final", "type": "Matcher<String>", "declarator": "matcherA = containsString(\"a\")", "var_name": "matcherA"}, {"original_string": "private final Matcher<String> matcherB = containsString(\"b\");", "modifier": "private final", "type": "Matcher<String>", "declarator": "matcherB = containsString(\"b\")", "var_name": "matcherB"}, {"original_string": "private final MatcherAnd<String> matcher =\n\t\t\tMatcherAnd.andOf(list(matcherA).add(matcherB).$());", "modifier": "private final", "type": "MatcherAnd<String>", "declarator": "matcher =\n\t\t\tMatcherAnd.andOf(list(matcherA).add(matcherB).$())", "var_name": "matcher"}], "file": "fluent-reflection/src/test/java/com/lexicalscope/fluentreflection/TestMatcherAnd.java"}, "test_case": {"identifier": "descriptionDescribesBothMatchers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void descriptionDescribesBothMatchers() throws Exception {\n\t\tfinal Description description = context.mock(Description.class);\n\n\t\tcontext.checking(new Expectations() {\n\t\t\t{\n\t\t\t\toneOf(description).appendDescriptionOf(matcherA);\n\t\t\t\toneOf(description).appendText(\" and \");\n\t\t\t\toneOf(description).appendDescriptionOf(matcherB);\n\t\t\t}\n\t\t});\n\n\t\tmatcher.describeTo(description);\n\t}", "signature": "void descriptionDescribesBothMatchers()", "full_signature": "@Test public void descriptionDescribesBothMatchers()", "class_method_signature": "TestMatcherAnd.descriptionDescribesBothMatchers()", "testcase": true, "constructor": false, "invocations": ["mock", "checking", "appendDescriptionOf", "oneOf", "appendText", "oneOf", "appendDescriptionOf", "oneOf", "describeTo"]}, "focal_class": {"identifier": "MatcherAnd", "superclass": "extends ReflectionMatcher<T>", "interfaces": "", "fields": [{"original_string": "private final List<? extends Matcher<? super T>> matchers;", "modifier": "private final", "type": "List<? extends Matcher<? super T>>", "declarator": "matchers", "var_name": "matchers"}], "methods": [{"identifier": "MatcherAnd", "parameters": "(final List<? extends Matcher<? super T>> matchers)", "modifiers": "private", "return": "", "signature": " MatcherAnd(final List<? extends Matcher<? super T>> matchers)", "full_signature": "private  MatcherAnd(final List<? extends Matcher<? super T>> matchers)", "class_method_signature": "MatcherAnd.MatcherAnd(final List<? extends Matcher<? super T>> matchers)", "testcase": false, "constructor": true}, {"identifier": "matchesSafely", "parameters": "(final T item)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matchesSafely(final T item)", "full_signature": "@Override public boolean matchesSafely(final T item)", "class_method_signature": "MatcherAnd.matchesSafely(final T item)", "testcase": false, "constructor": false}, {"identifier": "describeTo", "parameters": "(final Description description)", "modifiers": "@Override public", "return": "void", "signature": "void describeTo(final Description description)", "full_signature": "@Override public void describeTo(final Description description)", "class_method_signature": "MatcherAnd.describeTo(final Description description)", "testcase": false, "constructor": false}, {"identifier": "andOf", "parameters": "(final List<? extends Matcher<? super T>> matchers)", "modifiers": "public static", "return": "MatcherAnd<T>", "signature": "MatcherAnd<T> andOf(final List<? extends Matcher<? super T>> matchers)", "full_signature": "public static MatcherAnd<T> andOf(final List<? extends Matcher<? super T>> matchers)", "class_method_signature": "MatcherAnd.andOf(final List<? extends Matcher<? super T>> matchers)", "testcase": false, "constructor": false}], "file": "fluent-reflection/src/main/java/com/lexicalscope/fluentreflection/MatcherAnd.java"}, "focal_method": {"identifier": "describeTo", "parameters": "(final Description description)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void describeTo(final Description description) {\n        for (int i = 0; i < matchers.size(); i++) {\n            description.appendDescriptionOf(matchers.get(i));\n            if (i + 1 < matchers.size()) {\n                description.appendText(\" and \");\n            }\n        }\n    }", "signature": "void describeTo(final Description description)", "full_signature": "@Override public void describeTo(final Description description)", "class_method_signature": "MatcherAnd.describeTo(final Description description)", "testcase": false, "constructor": false, "invocations": ["size", "appendDescriptionOf", "get", "size", "appendText"]}, "repository": {"repo_id": 2193717, "url": "https://github.com/lexicalscope/fluent-reflection", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 8596, "license": "licensed"}}