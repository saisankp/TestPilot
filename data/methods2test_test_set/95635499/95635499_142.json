{"test_class": {"identifier": "DerivateDistanceTest", "superclass": "", "interfaces": "", "fields": [], "file": "JAICore/jaicore-basic/src/test/java/ai/libs/jaicore/basic/metric/DerivateDistanceTest.java"}, "test_case": {"identifier": "testCorrectnessForDistanceCalculation2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCorrectnessForDistanceCalculation2() {\n\t\t// Input.\n\t\tdouble[] timeSeries1 = { 1, 1, 2, 2, 3, 5 };\n\t\tdouble[] timeSeries2 = { 1, 2, 3, 5, 5, 6 };\n\t\tdouble alpha = 0.5;\n\t\tIDistanceMetric timeSeriesDistance = new DynamicTimeWarping();\n\t\tIDistanceMetric derivateDistance = new EuclideanDistance();\n\n\t\t// Expectation.\n\t\tdouble expectation = Math.cos(alpha) * 1 + Math.sin(alpha) * Math.sqrt(7);\n\n\t\tDerivateDistance dtd = new DerivateDistance(alpha, timeSeriesDistance, derivateDistance);\n\t\tdouble distance = dtd.distance(timeSeries1, timeSeries2);\n\n\t\tassertEquals(expectation, distance, 1.0E-5);\n\t}", "signature": "void testCorrectnessForDistanceCalculation2()", "full_signature": "@Test public void testCorrectnessForDistanceCalculation2()", "class_method_signature": "DerivateDistanceTest.testCorrectnessForDistanceCalculation2()", "testcase": true, "constructor": false, "invocations": ["cos", "sin", "sqrt", "distance", "assertEquals"]}, "focal_class": {"identifier": "DerivateDistance", "superclass": "extends AWeightedTrigometricDistance", "interfaces": "", "fields": [{"original_string": "private ADerivateFilter derivate;", "modifier": "private", "type": "ADerivateFilter", "declarator": "derivate", "var_name": "derivate"}, {"original_string": "private IDistanceMetric timeSeriesDistance;", "modifier": "private", "type": "IDistanceMetric", "declarator": "timeSeriesDistance", "var_name": "timeSeriesDistance"}, {"original_string": "private IDistanceMetric baseDerivateDistance;", "modifier": "private", "type": "IDistanceMetric", "declarator": "baseDerivateDistance", "var_name": "baseDerivateDistance"}], "methods": [{"identifier": "DerivateDistance", "parameters": "(final double alpha, final ADerivateFilter derivate, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance)", "modifiers": "public", "return": "", "signature": " DerivateDistance(final double alpha, final ADerivateFilter derivate, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance)", "full_signature": "public  DerivateDistance(final double alpha, final ADerivateFilter derivate, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance)", "class_method_signature": "DerivateDistance.DerivateDistance(final double alpha, final ADerivateFilter derivate, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance)", "testcase": false, "constructor": true}, {"identifier": "DerivateDistance", "parameters": "(final double alpha, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance)", "modifiers": "public", "return": "", "signature": " DerivateDistance(final double alpha, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance)", "full_signature": "public  DerivateDistance(final double alpha, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance)", "class_method_signature": "DerivateDistance.DerivateDistance(final double alpha, final IDistanceMetric timeSeriesDistance, final IDistanceMetric derivateDistance)", "testcase": false, "constructor": true}, {"identifier": "DerivateDistance", "parameters": "(final double alpha, final ADerivateFilter derivate, final IDistanceMetric distance)", "modifiers": "public", "return": "", "signature": " DerivateDistance(final double alpha, final ADerivateFilter derivate, final IDistanceMetric distance)", "full_signature": "public  DerivateDistance(final double alpha, final ADerivateFilter derivate, final IDistanceMetric distance)", "class_method_signature": "DerivateDistance.DerivateDistance(final double alpha, final ADerivateFilter derivate, final IDistanceMetric distance)", "testcase": false, "constructor": true}, {"identifier": "DerivateDistance", "parameters": "(final double alpha, final IDistanceMetric distance)", "modifiers": "public", "return": "", "signature": " DerivateDistance(final double alpha, final IDistanceMetric distance)", "full_signature": "public  DerivateDistance(final double alpha, final IDistanceMetric distance)", "class_method_signature": "DerivateDistance.DerivateDistance(final double alpha, final IDistanceMetric distance)", "testcase": false, "constructor": true}, {"identifier": "distance", "parameters": "(final double[] a, final double[] b)", "modifiers": "@Override public", "return": "double", "signature": "double distance(final double[] a, final double[] b)", "full_signature": "@Override public double distance(final double[] a, final double[] b)", "class_method_signature": "DerivateDistance.distance(final double[] a, final double[] b)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-basic/src/main/java/ai/libs/jaicore/basic/metric/DerivateDistance.java"}, "focal_method": {"identifier": "distance", "parameters": "(final double[] a, final double[] b)", "modifiers": "@Override public", "return": "double", "body": "@Override\n\tpublic double distance(final double[] a, final double[] b) {\n\t\tdouble[] derivateA = this.derivate.transform(a);\n\t\tdouble[] derivateB = this.derivate.transform(b);\n\n\t\treturn this.getA() * this.timeSeriesDistance.distance(a, b) + this.getB() * this.baseDerivateDistance.distance(derivateA, derivateB);\n\t}", "signature": "double distance(final double[] a, final double[] b)", "full_signature": "@Override public double distance(final double[] a, final double[] b)", "class_method_signature": "DerivateDistance.distance(final double[] a, final double[] b)", "testcase": false, "constructor": false, "invocations": ["transform", "transform", "getA", "distance", "getB", "distance"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}