{"test_class": {"identifier": "PendingSpansTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<TraceContext> contexts = new ArrayList<>();", "modifier": "", "type": "List<TraceContext>", "declarator": "contexts = new ArrayList<>()", "var_name": "contexts"}, {"original_string": "TestSpanHandler spans = new TestSpanHandler();", "modifier": "", "type": "TestSpanHandler", "declarator": "spans = new TestSpanHandler()", "var_name": "spans"}, {"original_string": "TraceContext context = InternalPropagation.instance.newTraceContext(\n    FLAG_SAMPLED_SET | FLAG_SAMPLED | FLAG_LOCAL_ROOT,\n    0L,\n    1L,\n    2L,\n    0L,\n    1L,\n    Collections.emptyList()\n  );", "modifier": "", "type": "TraceContext", "declarator": "context = InternalPropagation.instance.newTraceContext(\n    FLAG_SAMPLED_SET | FLAG_SAMPLED | FLAG_LOCAL_ROOT,\n    0L,\n    1L,\n    2L,\n    0L,\n    1L,\n    Collections.emptyList()\n  )", "var_name": "context"}, {"original_string": "AtomicInteger clock = new AtomicInteger();", "modifier": "", "type": "AtomicInteger", "declarator": "clock = new AtomicInteger()", "var_name": "clock"}, {"original_string": "PendingSpans pendingSpans;", "modifier": "", "type": "PendingSpans", "declarator": "pendingSpans", "var_name": "pendingSpans"}], "file": "brave/src/test/java/brave/internal/recorder/PendingSpansTest.java"}, "test_case": {"identifier": "getOrCreate_cachesReference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getOrCreate_cachesReference() {\n    PendingSpan span = pendingSpans.getOrCreate(null, context, false);\n    assertThat(pendingSpans.getOrCreate(null, context, false)).isSameAs(span);\n  }", "signature": "void getOrCreate_cachesReference()", "full_signature": "@Test public void getOrCreate_cachesReference()", "class_method_signature": "PendingSpansTest.getOrCreate_cachesReference()", "testcase": true, "constructor": false, "invocations": ["getOrCreate", "isSameAs", "assertThat", "getOrCreate"]}, "focal_class": {"identifier": "PendingSpans", "superclass": "extends WeakConcurrentMap<TraceContext, PendingSpan>", "interfaces": "", "fields": [{"original_string": "final MutableSpan defaultSpan;", "modifier": "final", "type": "MutableSpan", "declarator": "defaultSpan", "var_name": "defaultSpan"}, {"original_string": "final Clock clock;", "modifier": "final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "final SpanHandler spanHandler;", "modifier": "final", "type": "SpanHandler", "declarator": "spanHandler", "var_name": "spanHandler"}, {"original_string": "final AtomicBoolean noop;", "modifier": "final", "type": "AtomicBoolean", "declarator": "noop", "var_name": "noop"}], "methods": [{"identifier": "PendingSpans", "parameters": "(MutableSpan defaultSpan, Clock clock, SpanHandler spanHandler,\n    AtomicBoolean noop)", "modifiers": "public", "return": "", "signature": " PendingSpans(MutableSpan defaultSpan, Clock clock, SpanHandler spanHandler,\n    AtomicBoolean noop)", "full_signature": "public  PendingSpans(MutableSpan defaultSpan, Clock clock, SpanHandler spanHandler,\n    AtomicBoolean noop)", "class_method_signature": "PendingSpans.PendingSpans(MutableSpan defaultSpan, Clock clock, SpanHandler spanHandler,\n    AtomicBoolean noop)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(TraceContext context)", "modifiers": "@Nullable public", "return": "PendingSpan", "signature": "PendingSpan get(TraceContext context)", "full_signature": "@Nullable public PendingSpan get(TraceContext context)", "class_method_signature": "PendingSpans.get(TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "getOrCreate", "parameters": "(\n    @Nullable TraceContext parent, TraceContext context, boolean start)", "modifiers": "public", "return": "PendingSpan", "signature": "PendingSpan getOrCreate(\n    @Nullable TraceContext parent, TraceContext context, boolean start)", "full_signature": "public PendingSpan getOrCreate(\n    @Nullable TraceContext parent, TraceContext context, boolean start)", "class_method_signature": "PendingSpans.getOrCreate(\n    @Nullable TraceContext parent, TraceContext context, boolean start)", "testcase": false, "constructor": false}, {"identifier": "abandon", "parameters": "(TraceContext context)", "modifiers": "public", "return": "void", "signature": "void abandon(TraceContext context)", "full_signature": "public void abandon(TraceContext context)", "class_method_signature": "PendingSpans.abandon(TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "(TraceContext context)", "modifiers": "public", "return": "void", "signature": "void flush(TraceContext context)", "full_signature": "public void flush(TraceContext context)", "class_method_signature": "PendingSpans.flush(TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "finish", "parameters": "(TraceContext context, long timestamp)", "modifiers": "public", "return": "void", "signature": "void finish(TraceContext context, long timestamp)", "full_signature": "public void finish(TraceContext context, long timestamp)", "class_method_signature": "PendingSpans.finish(TraceContext context, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "expungeStaleEntries", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void expungeStaleEntries()", "full_signature": "@Override protected void expungeStaleEntries()", "class_method_signature": "PendingSpans.expungeStaleEntries()", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/internal/recorder/PendingSpans.java"}, "focal_method": {"identifier": "getOrCreate", "parameters": "(\n    @Nullable TraceContext parent, TraceContext context, boolean start)", "modifiers": "public", "return": "PendingSpan", "body": "public PendingSpan getOrCreate(\n    @Nullable TraceContext parent, TraceContext context, boolean start) {\n    PendingSpan result = get(context);\n    if (result != null) return result;\n\n    MutableSpan span = new MutableSpan(context, defaultSpan);\n    PendingSpan parentSpan = parent != null ? get(parent) : null;\n\n    // save overhead calculating time if the parent is in-progress (usually is)\n    TickClock clock;\n    if (parentSpan != null) {\n      TraceContext parentContext = parentSpan.context();\n      if (parentContext != null) parent = parentContext;\n      clock = parentSpan.clock;\n      if (start) span.startTimestamp(clock.currentTimeMicroseconds());\n    } else {\n      long currentTimeMicroseconds = this.clock.currentTimeMicroseconds();\n      clock = new TickClock(currentTimeMicroseconds, System.nanoTime());\n      if (start) span.startTimestamp(currentTimeMicroseconds);\n    }\n\n    PendingSpan newSpan = new PendingSpan(context, span, clock);\n    // Probably absent because we already checked with get() at the entrance of this method\n    PendingSpan previousSpan = putIfProbablyAbsent(context, newSpan);\n    if (previousSpan != null) return previousSpan; // lost race\n\n    // We've now allocated a new trace context.\n    assert parent != null || context.isLocalRoot() :\n      \"Bug (or unexpected call to internal code): parent can only be null in a local root!\";\n\n    spanHandler.begin(newSpan.handlerContext, newSpan.span, parentSpan != null\n      ? parentSpan.handlerContext : null);\n    return newSpan;\n  }", "signature": "PendingSpan getOrCreate(\n    @Nullable TraceContext parent, TraceContext context, boolean start)", "full_signature": "public PendingSpan getOrCreate(\n    @Nullable TraceContext parent, TraceContext context, boolean start)", "class_method_signature": "PendingSpans.getOrCreate(\n    @Nullable TraceContext parent, TraceContext context, boolean start)", "testcase": false, "constructor": false, "invocations": ["get", "get", "context", "startTimestamp", "currentTimeMicroseconds", "currentTimeMicroseconds", "nanoTime", "startTimestamp", "putIfProbablyAbsent", "isLocalRoot", "begin"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}