{"test_class": {"identifier": "InstanceAWSECSProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/instance_provider/src/test/java/com/yahoo/athenz/instance/provider/impl/InstanceAWSECSProviderTest.java"}, "test_case": {"identifier": "testValidateAWSDocumentInvalidBootTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateAWSDocumentInvalidBootTime() {\n        \n        StringBuilder errMsg = new StringBuilder(256);\n        StringBuilder privateIp = new StringBuilder(64);\n\n        MockInstanceAWSECSProvider provider = new MockInstanceAWSECSProvider();\n        System.setProperty(InstanceAWSProvider.AWS_PROP_PUBLIC_CERT, \"src/test/resources/aws_public.cert\");\n        provider.initialize(\"athenz.aws-ecs.us-west-2\", \"com.yahoo.athenz.instance.provider.impl.InstanceAWSECSProvider\", null, null);\n        \n        String bootTime = Timestamp.fromMillis(System.currentTimeMillis() - 1000000).toString();\n        AWSAttestationData data = new AWSAttestationData();\n        data.setDocument(\"{\\\"accountId\\\": \\\"1234\\\",\\\"pendingTime\\\": \\\"\"\n                + bootTime + \"\\\",\\\"region\\\": \\\"us-west-2\\\",\\\"instanceId\\\": \\\"i-1234\\\"}\");\n        data.setSignature(\"signature\");\n        assertTrue(provider.validateAWSDocument(\"athenz.aws-ecs.us-west-2\", data,\n                \"1234\", \"i-1234\", true, privateIp, errMsg));\n    }", "signature": "void testValidateAWSDocumentInvalidBootTime()", "full_signature": "@Test public void testValidateAWSDocumentInvalidBootTime()", "class_method_signature": "InstanceAWSECSProviderTest.testValidateAWSDocumentInvalidBootTime()", "testcase": true, "constructor": false, "invocations": ["setProperty", "initialize", "toString", "fromMillis", "currentTimeMillis", "setDocument", "setSignature", "assertTrue", "validateAWSDocument"]}, "focal_class": {"identifier": "InstanceAWSECSProvider", "superclass": "extends InstanceAWSProvider", "interfaces": "", "fields": [], "methods": [{"identifier": "initialize", "parameters": "(String provider, String providerEndpoint, SSLContext sslcontext,\n            KeyStore keyStore)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(String provider, String providerEndpoint, SSLContext sslcontext,\n            KeyStore keyStore)", "full_signature": "@Override public void initialize(String provider, String providerEndpoint, SSLContext sslcontext,\n            KeyStore keyStore)", "class_method_signature": "InstanceAWSECSProvider.initialize(String provider, String providerEndpoint, SSLContext sslcontext,\n            KeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "getInstanceId", "parameters": "(AWSAttestationData info, Struct instanceDocument)", "modifiers": "@Override", "return": "String", "signature": "String getInstanceId(AWSAttestationData info, Struct instanceDocument)", "full_signature": "@Override String getInstanceId(AWSAttestationData info, Struct instanceDocument)", "class_method_signature": "InstanceAWSECSProvider.getInstanceId(AWSAttestationData info, Struct instanceDocument)", "testcase": false, "constructor": false}], "file": "libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/impl/InstanceAWSECSProvider.java"}, "focal_method": {"identifier": "initialize", "parameters": "(String provider, String providerEndpoint, SSLContext sslcontext,\n            KeyStore keyStore)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void initialize(String provider, String providerEndpoint, SSLContext sslcontext,\n            KeyStore keyStore) {\n        \n        super.initialize(provider, providerEndpoint, sslcontext, keyStore);\n        \n        // for ECS support, we're not going to enforce the\n        // boot time since we don't know when the container\n        // was started and temporary aws iam assume role\n        // validation is sufficient\n        \n        bootTimeOffset = 0;\n        \n        // our ECS provider must validate refresh requests\n        \n        supportRefresh = true;\n    }", "signature": "void initialize(String provider, String providerEndpoint, SSLContext sslcontext,\n            KeyStore keyStore)", "full_signature": "@Override public void initialize(String provider, String providerEndpoint, SSLContext sslcontext,\n            KeyStore keyStore)", "class_method_signature": "InstanceAWSECSProvider.initialize(String provider, String providerEndpoint, SSLContext sslcontext,\n            KeyStore keyStore)", "testcase": false, "constructor": false, "invocations": ["initialize"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}