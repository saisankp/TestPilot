{"test_class": {"identifier": "ChunkedOutputStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int INITIAL_SIZE = 256;", "modifier": "private static final", "type": "int", "declarator": "INITIAL_SIZE = 256", "var_name": "INITIAL_SIZE"}, {"original_string": "private final ChunkedOutputStream stream = new ChunkedOutputStream(INITIAL_SIZE);", "modifier": "private final", "type": "ChunkedOutputStream", "declarator": "stream = new ChunkedOutputStream(INITIAL_SIZE)", "var_name": "stream"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/persisted/ChunkedOutputStreamTest.java"}, "test_case": {"identifier": "testGrowWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGrowWrite() throws IOException {\n        for (int i = 0; i < INITIAL_SIZE * 2; ++i) {\n            stream.write(i);\n        }\n\n        final byte[] chunk = assertFinishedStream(INITIAL_SIZE * 2, 1).get(0);\n        assertEquals(INITIAL_SIZE * 2, chunk.length);\n        for (int i = 0; i < INITIAL_SIZE * 2; ++i) {\n            assertEquals((byte) i, chunk[i]);\n        }\n    }", "signature": "void testGrowWrite()", "full_signature": "@Test public void testGrowWrite()", "class_method_signature": "ChunkedOutputStreamTest.testGrowWrite()", "testcase": true, "constructor": false, "invocations": ["write", "get", "assertFinishedStream", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "ChunkedOutputStream", "superclass": "extends OutputStream", "interfaces": "", "fields": [{"original_string": "static final int MAX_ARRAY_SIZE = ceilingPowerOfTwo(Integer.getInteger(\n        \"org.opendaylight.controller.cluster.datastore.persisted.max-array-size\", 256 * 1024));", "modifier": "static final", "type": "int", "declarator": "MAX_ARRAY_SIZE = ceilingPowerOfTwo(Integer.getInteger(\n        \"org.opendaylight.controller.cluster.datastore.persisted.max-array-size\", 256 * 1024))", "var_name": "MAX_ARRAY_SIZE"}, {"original_string": "private static final int MIN_ARRAY_SIZE = 32;", "modifier": "private static final", "type": "int", "declarator": "MIN_ARRAY_SIZE = 32", "var_name": "MIN_ARRAY_SIZE"}, {"original_string": "private Object result;", "modifier": "private", "type": "Object", "declarator": "result", "var_name": "result"}, {"original_string": "private Deque<byte[]> prevChunks;", "modifier": "private", "type": "Deque<byte[]>", "declarator": "prevChunks", "var_name": "prevChunks"}, {"original_string": "private byte[] currentChunk;", "modifier": "private", "type": "byte[]", "declarator": "currentChunk", "var_name": "currentChunk"}, {"original_string": "private int currentOffset;", "modifier": "private", "type": "int", "declarator": "currentOffset", "var_name": "currentOffset"}, {"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "ChunkedOutputStream", "parameters": "(final int requestedInitialCapacity)", "modifiers": "", "return": "", "signature": " ChunkedOutputStream(final int requestedInitialCapacity)", "full_signature": "  ChunkedOutputStream(final int requestedInitialCapacity)", "class_method_signature": "ChunkedOutputStream.ChunkedOutputStream(final int requestedInitialCapacity)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(final int b)", "modifiers": "@Override @SuppressWarnings(\"checkstyle:ParameterName\") public", "return": "void", "signature": "void write(final int b)", "full_signature": "@Override @SuppressWarnings(\"checkstyle:ParameterName\") public void write(final int b)", "class_method_signature": "ChunkedOutputStream.write(final int b)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final byte[] b, final int off, final int len)", "modifiers": "@Override @SuppressWarnings(\"checkstyle:ParameterName\") public", "return": "void", "signature": "void write(final byte[] b, final int off, final int len)", "full_signature": "@Override @SuppressWarnings(\"checkstyle:ParameterName\") public void write(final byte[] b, final int off, final int len)", "class_method_signature": "ChunkedOutputStream.write(final byte[] b, final int off, final int len)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ChunkedOutputStream.close()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "", "return": "int", "signature": "int size()", "full_signature": " int size()", "class_method_signature": "ChunkedOutputStream.size()", "testcase": false, "constructor": false}, {"identifier": "toChunkedByteArray", "parameters": "()", "modifiers": "", "return": "ChunkedByteArray", "signature": "ChunkedByteArray toChunkedByteArray()", "full_signature": " ChunkedByteArray toChunkedByteArray()", "class_method_signature": "ChunkedOutputStream.toChunkedByteArray()", "testcase": false, "constructor": false}, {"identifier": "toVariant", "parameters": "()", "modifiers": "", "return": "Variant<byte[], ChunkedByteArray>", "signature": "Variant<byte[], ChunkedByteArray> toVariant()", "full_signature": " Variant<byte[], ChunkedByteArray> toVariant()", "class_method_signature": "ChunkedOutputStream.toVariant()", "testcase": false, "constructor": false}, {"identifier": "computeResult", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object computeResult()", "full_signature": "private Object computeResult()", "class_method_signature": "ChunkedOutputStream.computeResult()", "testcase": false, "constructor": false}, {"identifier": "ensureOneByte", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureOneByte()", "full_signature": "private void ensureOneByte()", "class_method_signature": "ChunkedOutputStream.ensureOneByte()", "testcase": false, "constructor": false}, {"identifier": "ensureMoreBytes", "parameters": "(final int requested)", "modifiers": "private", "return": "int", "signature": "int ensureMoreBytes(final int requested)", "full_signature": "private int ensureMoreBytes(final int requested)", "class_method_signature": "ChunkedOutputStream.ensureMoreBytes(final int requested)", "testcase": false, "constructor": false}, {"identifier": "nextChunk", "parameters": "(final int chunkSize)", "modifiers": "private", "return": "void", "signature": "void nextChunk(final int chunkSize)", "full_signature": "private void nextChunk(final int chunkSize)", "class_method_signature": "ChunkedOutputStream.nextChunk(final int chunkSize)", "testcase": false, "constructor": false}, {"identifier": "checkClosed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkClosed()", "full_signature": "private void checkClosed()", "class_method_signature": "ChunkedOutputStream.checkClosed()", "testcase": false, "constructor": false}, {"identifier": "checkNotClosed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkNotClosed()", "full_signature": "private void checkNotClosed()", "class_method_signature": "ChunkedOutputStream.checkNotClosed()", "testcase": false, "constructor": false}, {"identifier": "nextChunkSize", "parameters": "(final int currentSize, final int requested)", "modifiers": "private static", "return": "int", "signature": "int nextChunkSize(final int currentSize, final int requested)", "full_signature": "private static int nextChunkSize(final int currentSize, final int requested)", "class_method_signature": "ChunkedOutputStream.nextChunkSize(final int currentSize, final int requested)", "testcase": false, "constructor": false}, {"identifier": "nextChunkSize", "parameters": "(final int currentSize)", "modifiers": "private static", "return": "int", "signature": "int nextChunkSize(final int currentSize)", "full_signature": "private static int nextChunkSize(final int currentSize)", "class_method_signature": "ChunkedOutputStream.nextChunkSize(final int currentSize)", "testcase": false, "constructor": false}, {"identifier": "initialCapacity", "parameters": "(final int requestedSize)", "modifiers": "private static", "return": "int", "signature": "int initialCapacity(final int requestedSize)", "full_signature": "private static int initialCapacity(final int requestedSize)", "class_method_signature": "ChunkedOutputStream.initialCapacity(final int requestedSize)", "testcase": false, "constructor": false}, {"identifier": "trimChunk", "parameters": "(final byte[] chunk, final int length)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] trimChunk(final byte[] chunk, final int length)", "full_signature": "private static byte[] trimChunk(final byte[] chunk, final int length)", "class_method_signature": "ChunkedOutputStream.trimChunk(final byte[] chunk, final int length)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/persisted/ChunkedOutputStream.java"}, "focal_method": {"identifier": "write", "parameters": "(final int b)", "modifiers": "@Override @SuppressWarnings(\"checkstyle:ParameterName\") public", "return": "void", "body": "@Override\n    @SuppressWarnings(\"checkstyle:ParameterName\")\n    public void write(final int b) throws IOException {\n        checkNotClosed();\n        ensureOneByte();\n        currentChunk[currentOffset] = (byte) b;\n        currentOffset++;\n        size++;\n    }", "signature": "void write(final int b)", "full_signature": "@Override @SuppressWarnings(\"checkstyle:ParameterName\") public void write(final int b)", "class_method_signature": "ChunkedOutputStream.write(final int b)", "testcase": false, "constructor": false, "invocations": ["checkNotClosed", "ensureOneByte"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}