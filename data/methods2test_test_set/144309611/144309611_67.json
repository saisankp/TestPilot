{"test_class": {"identifier": "ClientPermissionLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String prfSecret = \"prf-secret\";", "modifier": "public static final", "type": "String", "declarator": "prfSecret = \"prf-secret\"", "var_name": "prfSecret"}, {"original_string": "public static final String mySecret = \"my-secret\";", "modifier": "public static final", "type": "String", "declarator": "mySecret = \"my-secret\"", "var_name": "mySecret"}, {"original_string": "public static final String admin = \"administrator\";", "modifier": "public static final", "type": "String", "declarator": "admin = \"administrator\"", "var_name": "admin"}, {"original_string": "public static final String secOfficer = \"security_officer\";", "modifier": "public static final", "type": "String", "declarator": "secOfficer = \"security_officer\"", "var_name": "secOfficer"}, {"original_string": "public static final String expUser = \"prf_user\";", "modifier": "public static final", "type": "String", "declarator": "expUser = \"prf_user\"", "var_name": "expUser"}, {"original_string": "public static final String storeUser = \"storage_user\";", "modifier": "public static final", "type": "String", "declarator": "storeUser = \"storage_user\"", "var_name": "storeUser"}], "file": "pross-server/src/test/java/com/ibm/pross/server/configuration/permissions/ClientPermissionLoaderTest.java"}, "test_case": {"identifier": "testExpUserPermissions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExpUserPermissions() throws IOException, UnauthorizedException, NotFoundException {\n\n\t\tfinal AccessEnforcement accessEnforcement = ClientPermissionLoader\n\t\t\t\t.loadIniFile(new File(\"config/client/clients.config\"));\n\n\t\tAssert.assertNotNull(accessEnforcement);\n\n\t\t// Checkexp user permissions for PRF Secret\n\t\taccessEnforcement.enforceAccess(expUser, prfSecret, Permissions.EXPONENTIATE);\n\t\taccessEnforcement.enforceAccess(expUser, prfSecret, Permissions.INFO);\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, prfSecret, Permissions.GENERATE);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, prfSecret, Permissions.DELETE);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, prfSecret, Permissions.ENABLE);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, prfSecret, Permissions.DISABLE);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, prfSecret, Permissions.STORE);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, prfSecret, Permissions.READ);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, prfSecret, Permissions.SIGN);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\n\t\t// Check exp user permissions for Store secret\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, mySecret, Permissions.GENERATE);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, mySecret, Permissions.DISABLE);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, mySecret, Permissions.INFO);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, mySecret, Permissions.DELETE);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, mySecret, Permissions.ENABLE);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, mySecret, Permissions.EXPONENTIATE);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, mySecret, Permissions.STORE);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, mySecret, Permissions.READ);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t\ttry {\n\t\t\taccessEnforcement.enforceAccess(expUser, mySecret, Permissions.SIGN);\n\t\t\tAssert.fail(\"Expected unauthorized exception\");\n\t\t} catch (UnauthorizedException expected) {\n\t\t}\n\t}", "signature": "void testExpUserPermissions()", "full_signature": "@Test public void testExpUserPermissions()", "class_method_signature": "ClientPermissionLoaderTest.testExpUserPermissions()", "testcase": true, "constructor": false, "invocations": ["loadIniFile", "assertNotNull", "enforceAccess", "enforceAccess", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail", "enforceAccess", "fail"]}, "focal_class": {"identifier": "ClientPermissionLoader", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "loadIniFile", "parameters": "(final File iniFile)", "modifiers": "public static", "return": "AccessEnforcement", "signature": "AccessEnforcement loadIniFile(final File iniFile)", "full_signature": "public static AccessEnforcement loadIniFile(final File iniFile)", "class_method_signature": "ClientPermissionLoader.loadIniFile(final File iniFile)", "testcase": false, "constructor": false}], "file": "pross-server/src/main/java/com/ibm/pross/server/configuration/permissions/ClientPermissionLoader.java"}, "focal_method": {"identifier": "loadIniFile", "parameters": "(final File iniFile)", "modifiers": "public static", "return": "AccessEnforcement", "body": "public static AccessEnforcement loadIniFile(final File iniFile) throws IOException {\n\n\t\tSystem.out.println(\"Loading client permissions: \" + iniFile.toString());\n\n\t\t// Load ini file\n\t\tfinal Wini ini = new Wini(iniFile);\n\n\t\t// Create map of usernames to their permissions\n\t\tfinal ConcurrentMap<String, ClientPermissions> permissionMap = new ConcurrentHashMap<String, ClientPermissions>();\n\n\t\t// Create set of all known secrets\n\t\tfinal Set<String> knownSecrets = new HashSet<>();\n\n\t\t// Iterate over each section (each section is a secret)\n\t\tfinal Collection<Profile.Section> secretSections = ini.values();\n\t\tfor (Profile.Section secretSection : secretSections) {\n\n\t\t\t// Update set of known secrets\n\t\t\tfinal String secretName = secretSection.getName();\n\t\t\tknownSecrets.add(secretName);\n\n\t\t\t// Each value in this section represents a user's permission to this secret\n\t\t\tfor (final Entry<String, String> userPermission : secretSection.entrySet()) {\n\t\t\t\tfinal String username = userPermission.getKey();\n\t\t\t\tfinal String permissions = userPermission.getValue();\n\n\t\t\t\t// PRint username and secret\n\t\t\t\t//System.out.print(username + \".\" + secretName + \"\\t\\t = \");\n\t\t\t\t\n\t\t\t\t// Parse permissions\n\t\t\t\tfinal String[] permissionArray = permissions.split(\",\");\n\t\t\t\t//System.out.println(Arrays.toString(permissionArray));\n\n\t\t\t\t// Add permissions from the comma-separated list\n\t\t\t\tpermissionMap.putIfAbsent(username, new ClientPermissions());\n\t\t\t\tfinal ClientPermissions clientPermissions = permissionMap.get(username);\n\t\t\t\tfor (final String permissionString : permissionArray) {\n\t\t\t\t\t// Sanitize string and convert to enumeration\n\t\t\t\t\tfinal Permissions permission = Permissions.valueOf(permissionString.trim().toUpperCase());\n\t\t\t\t\tclientPermissions.addPermission(secretName, permission);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new AccessEnforcement(permissionMap, knownSecrets);\n\t}", "signature": "AccessEnforcement loadIniFile(final File iniFile)", "full_signature": "public static AccessEnforcement loadIniFile(final File iniFile)", "class_method_signature": "ClientPermissionLoader.loadIniFile(final File iniFile)", "testcase": false, "constructor": false, "invocations": ["println", "toString", "values", "getName", "add", "entrySet", "getKey", "getValue", "split", "putIfAbsent", "get", "valueOf", "toUpperCase", "trim", "addPermission"]}, "repository": {"repo_id": 144309611, "url": "https://github.com/jasonkresch/protect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 38, "size": 1932, "license": "licensed"}}