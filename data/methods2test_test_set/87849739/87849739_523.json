{"test_class": {"identifier": "UriForLocationHeaderSupplierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final EntityId KNOWN_ENTITY_ID = DefaultEntityId.of(\"Plumbus\");", "modifier": "private static final", "type": "EntityId", "declarator": "KNOWN_ENTITY_ID = DefaultEntityId.of(\"Plumbus\")", "var_name": "KNOWN_ENTITY_ID"}, {"original_string": "private static final String KNOWN_RESOURCE_PATH = \"Floob\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_RESOURCE_PATH = \"Floob\"", "var_name": "KNOWN_RESOURCE_PATH"}], "file": "services/gateway/endpoints/src/test/java/org/eclipse/ditto/services/gateway/endpoints/actors/UriForLocationHeaderSupplierTest.java"}, "test_case": {"identifier": "getUriForNonIdempotentRequestWithEntityIdInUri", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getUriForNonIdempotentRequestWithEntityIdInUri() {\n        final String host = \"https://example.com/things/\";\n        final Uri uri = Uri.create(host + KNOWN_ENTITY_ID + \"will-be-discarded/\");\n        final HttpRequest httpRequest = HttpRequest.create()\n                .withUri(uri)\n                .withMethod(HttpMethods.POST);\n        final CommandResponse<?> commandResponse = mock(CommandResponse.class);\n        when(commandResponse.getEntityId()).thenReturn(KNOWN_ENTITY_ID);\n        when(commandResponse.getResourcePath()).thenReturn(JsonPointer.of(KNOWN_RESOURCE_PATH));\n        final Uri expectedUri = Uri.create(host + commandResponse.getEntityId() + commandResponse.getResourcePath());\n\n        final UriForLocationHeaderSupplier underTest = new UriForLocationHeaderSupplier(httpRequest, commandResponse);\n\n        assertThat(underTest.get()).isEqualTo(expectedUri);\n    }", "signature": "void getUriForNonIdempotentRequestWithEntityIdInUri()", "full_signature": "@Test public void getUriForNonIdempotentRequestWithEntityIdInUri()", "class_method_signature": "UriForLocationHeaderSupplierTest.getUriForNonIdempotentRequestWithEntityIdInUri()", "testcase": true, "constructor": false, "invocations": ["create", "withMethod", "withUri", "create", "mock", "thenReturn", "when", "getEntityId", "thenReturn", "when", "getResourcePath", "of", "create", "getEntityId", "getResourcePath", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "UriForLocationHeaderSupplier", "superclass": "", "interfaces": "implements Supplier<Uri>", "fields": [{"original_string": "private final HttpRequest httpRequest;", "modifier": "private final", "type": "HttpRequest", "declarator": "httpRequest", "var_name": "httpRequest"}, {"original_string": "private final CommandResponse<?> commandResponse;", "modifier": "private final", "type": "CommandResponse<?>", "declarator": "commandResponse", "var_name": "commandResponse"}], "methods": [{"identifier": "UriForLocationHeaderSupplier", "parameters": "(final HttpRequest httpRequest, final CommandResponse<?> commandResponse)", "modifiers": "", "return": "", "signature": " UriForLocationHeaderSupplier(final HttpRequest httpRequest, final CommandResponse<?> commandResponse)", "full_signature": "  UriForLocationHeaderSupplier(final HttpRequest httpRequest, final CommandResponse<?> commandResponse)", "class_method_signature": "UriForLocationHeaderSupplier.UriForLocationHeaderSupplier(final HttpRequest httpRequest, final CommandResponse<?> commandResponse)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Uri", "signature": "Uri get()", "full_signature": "@Override public Uri get()", "class_method_signature": "UriForLocationHeaderSupplier.get()", "testcase": false, "constructor": false}, {"identifier": "isRequestIdempotent", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isRequestIdempotent()", "full_signature": "private boolean isRequestIdempotent()", "class_method_signature": "UriForLocationHeaderSupplier.isRequestIdempotent()", "testcase": false, "constructor": false}, {"identifier": "removeEntityId", "parameters": "(final String requestUri)", "modifiers": "private", "return": "String", "signature": "String removeEntityId(final String requestUri)", "full_signature": "private String removeEntityId(final String requestUri)", "class_method_signature": "UriForLocationHeaderSupplier.removeEntityId(final String requestUri)", "testcase": false, "constructor": false}, {"identifier": "getIndexOfEntityId", "parameters": "(final String requestUri)", "modifiers": "private", "return": "int", "signature": "int getIndexOfEntityId(final String requestUri)", "full_signature": "private int getIndexOfEntityId(final String requestUri)", "class_method_signature": "UriForLocationHeaderSupplier.getIndexOfEntityId(final String requestUri)", "testcase": false, "constructor": false}, {"identifier": "removeTrailingSlash", "parameters": "(final String createdLocationUri)", "modifiers": "private static", "return": "String", "signature": "String removeTrailingSlash(final String createdLocationUri)", "full_signature": "private static String removeTrailingSlash(final String createdLocationUri)", "class_method_signature": "UriForLocationHeaderSupplier.removeTrailingSlash(final String createdLocationUri)", "testcase": false, "constructor": false}, {"identifier": "getLocationUriString", "parameters": "(final String requestUri)", "modifiers": "private", "return": "String", "signature": "String getLocationUriString(final String requestUri)", "full_signature": "private String getLocationUriString(final String requestUri)", "class_method_signature": "UriForLocationHeaderSupplier.getLocationUriString(final String requestUri)", "testcase": false, "constructor": false}], "file": "services/gateway/endpoints/src/main/java/org/eclipse/ditto/services/gateway/endpoints/actors/UriForLocationHeaderSupplier.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Uri", "body": "@Override\n    public Uri get() {\n        final Uri requestUri = httpRequest.getUri().query(Query.EMPTY); // strip query params\n        if (isRequestIdempotent()) {\n            return requestUri.query(Query.EMPTY);\n        }\n        return Uri.create(removeTrailingSlash(getLocationUriString(removeEntityId(requestUri.toString()))))\n                .query(Query.EMPTY);\n    }", "signature": "Uri get()", "full_signature": "@Override public Uri get()", "class_method_signature": "UriForLocationHeaderSupplier.get()", "testcase": false, "constructor": false, "invocations": ["query", "getUri", "isRequestIdempotent", "query", "query", "create", "removeTrailingSlash", "getLocationUriString", "removeEntityId", "toString"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}