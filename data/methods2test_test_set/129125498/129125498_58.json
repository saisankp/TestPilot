{"test_class": {"identifier": "SeasonalBufferTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}, {"original_string": "private static final int CYCLE_LENGTH = 5;", "modifier": "private static final", "type": "int", "declarator": "CYCLE_LENGTH = 5", "var_name": "CYCLE_LENGTH"}, {"original_string": "private static final int INTERVAL_LENGTH = 10;", "modifier": "private static final", "type": "int", "declarator": "INTERVAL_LENGTH = 10", "var_name": "INTERVAL_LENGTH"}, {"original_string": "private static final long FIRST_CYCLE_FIRST_SLOT = 1563428100L;", "modifier": "private static final", "type": "long", "declarator": "FIRST_CYCLE_FIRST_SLOT = 1563428100L", "var_name": "FIRST_CYCLE_FIRST_SLOT"}, {"original_string": "private static final long FIRST_CYCLE_SECOND_SLOT = FIRST_CYCLE_FIRST_SLOT + INTERVAL_LENGTH;", "modifier": "private static final", "type": "long", "declarator": "FIRST_CYCLE_SECOND_SLOT = FIRST_CYCLE_FIRST_SLOT + INTERVAL_LENGTH", "var_name": "FIRST_CYCLE_SECOND_SLOT"}, {"original_string": "private static final long FIRST_CYCLE_THIRD_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 2);", "modifier": "private static final", "type": "long", "declarator": "FIRST_CYCLE_THIRD_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 2)", "var_name": "FIRST_CYCLE_THIRD_SLOT"}, {"original_string": "private static final long FIRST_CYCLE_FOURTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 3);", "modifier": "private static final", "type": "long", "declarator": "FIRST_CYCLE_FOURTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 3)", "var_name": "FIRST_CYCLE_FOURTH_SLOT"}, {"original_string": "private static final long FIRST_CYCLE_FIFTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 4);", "modifier": "private static final", "type": "long", "declarator": "FIRST_CYCLE_FIFTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 4)", "var_name": "FIRST_CYCLE_FIFTH_SLOT"}, {"original_string": "private static final long SECOND_CYCLE_FIRST_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 5);", "modifier": "private static final", "type": "long", "declarator": "SECOND_CYCLE_FIRST_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 5)", "var_name": "SECOND_CYCLE_FIRST_SLOT"}, {"original_string": "private static final long SECOND_CYCLE_SECOND_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 6);", "modifier": "private static final", "type": "long", "declarator": "SECOND_CYCLE_SECOND_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 6)", "var_name": "SECOND_CYCLE_SECOND_SLOT"}, {"original_string": "private static final long SECOND_CYCLE_THIRD_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 7);", "modifier": "private static final", "type": "long", "declarator": "SECOND_CYCLE_THIRD_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 7)", "var_name": "SECOND_CYCLE_THIRD_SLOT"}, {"original_string": "private static final long SECOND_CYCLE_FOURTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 8);", "modifier": "private static final", "type": "long", "declarator": "SECOND_CYCLE_FOURTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 8)", "var_name": "SECOND_CYCLE_FOURTH_SLOT"}, {"original_string": "private static final long SECOND_CYCLE_FIFTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 9);", "modifier": "private static final", "type": "long", "declarator": "SECOND_CYCLE_FIFTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 9)", "var_name": "SECOND_CYCLE_FIFTH_SLOT"}, {"original_string": "private static final long THIRD_CYCLE_FIRST_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 10);", "modifier": "private static final", "type": "long", "declarator": "THIRD_CYCLE_FIRST_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 10)", "var_name": "THIRD_CYCLE_FIRST_SLOT"}, {"original_string": "private static final double FIRST_CYCLE_FIRST_SLOT_VALUE = 10.0;", "modifier": "private static final", "type": "double", "declarator": "FIRST_CYCLE_FIRST_SLOT_VALUE = 10.0", "var_name": "FIRST_CYCLE_FIRST_SLOT_VALUE"}, {"original_string": "private static final double FIRST_CYCLE_SECOND_SLOT_VALUE = 20.0;", "modifier": "private static final", "type": "double", "declarator": "FIRST_CYCLE_SECOND_SLOT_VALUE = 20.0", "var_name": "FIRST_CYCLE_SECOND_SLOT_VALUE"}, {"original_string": "private static final double FIRST_CYCLE_THIRD_SLOT_VALUE = 30.0;", "modifier": "private static final", "type": "double", "declarator": "FIRST_CYCLE_THIRD_SLOT_VALUE = 30.0", "var_name": "FIRST_CYCLE_THIRD_SLOT_VALUE"}, {"original_string": "private static final double FIRST_CYCLE_FOURTH_SLOT_VALUE = 40.0;", "modifier": "private static final", "type": "double", "declarator": "FIRST_CYCLE_FOURTH_SLOT_VALUE = 40.0", "var_name": "FIRST_CYCLE_FOURTH_SLOT_VALUE"}, {"original_string": "private static final double FIRST_CYCLE_FIFTH_SLOT_VALUE = 50.0;", "modifier": "private static final", "type": "double", "declarator": "FIRST_CYCLE_FIFTH_SLOT_VALUE = 50.0", "var_name": "FIRST_CYCLE_FIFTH_SLOT_VALUE"}, {"original_string": "private static final double SECOND_CYCLE_FIRST_SLOT_VALUE = 60.0;", "modifier": "private static final", "type": "double", "declarator": "SECOND_CYCLE_FIRST_SLOT_VALUE = 60.0", "var_name": "SECOND_CYCLE_FIRST_SLOT_VALUE"}, {"original_string": "private static final double SECOND_CYCLE_SECOND_SLOT_VALUE = 70.0;", "modifier": "private static final", "type": "double", "declarator": "SECOND_CYCLE_SECOND_SLOT_VALUE = 70.0", "var_name": "SECOND_CYCLE_SECOND_SLOT_VALUE"}, {"original_string": "private static final double SECOND_CYCLE_THIRD_SLOT_VALUE = 80.0;", "modifier": "private static final", "type": "double", "declarator": "SECOND_CYCLE_THIRD_SLOT_VALUE = 80.0", "var_name": "SECOND_CYCLE_THIRD_SLOT_VALUE"}, {"original_string": "private static final double SECOND_CYCLE_FOURTH_SLOT_VALUE = 90.0;", "modifier": "private static final", "type": "double", "declarator": "SECOND_CYCLE_FOURTH_SLOT_VALUE = 90.0", "var_name": "SECOND_CYCLE_FOURTH_SLOT_VALUE"}, {"original_string": "private static final double SECOND_CYCLE_FIFTH_SLOT_VALUE = 100.0;", "modifier": "private static final", "type": "double", "declarator": "SECOND_CYCLE_FIFTH_SLOT_VALUE = 100.0", "var_name": "SECOND_CYCLE_FIFTH_SLOT_VALUE"}, {"original_string": "private static final double THIRD_CYCLE_THIRD_SLOT_VALUE = 110.0;", "modifier": "private static final", "type": "double", "declarator": "THIRD_CYCLE_THIRD_SLOT_VALUE = 110.0", "var_name": "THIRD_CYCLE_THIRD_SLOT_VALUE"}, {"original_string": "private static final int VALID_CYCLE_LENGTH = 10;", "modifier": "private static final", "type": "int", "declarator": "VALID_CYCLE_LENGTH = 10", "var_name": "VALID_CYCLE_LENGTH"}, {"original_string": "private static final int VALID_INTERVAL = 10;", "modifier": "private static final", "type": "int", "declarator": "VALID_INTERVAL = 10", "var_name": "VALID_INTERVAL"}, {"original_string": "private static final double VALID_PLACEHOLDER = Double.POSITIVE_INFINITY;", "modifier": "private static final", "type": "double", "declarator": "VALID_PLACEHOLDER = Double.POSITIVE_INFINITY", "var_name": "VALID_PLACEHOLDER"}, {"original_string": "private static final MetricDefinition METRIC_DEF = new MetricDefinition(\"some-key\");", "modifier": "private static final", "type": "MetricDefinition", "declarator": "METRIC_DEF = new MetricDefinition(\"some-key\")", "var_name": "METRIC_DEF"}, {"original_string": "private SeasonalBuffer subject = new SeasonalBuffer(CYCLE_LENGTH, INTERVAL_LENGTH, VALID_PLACEHOLDER);", "modifier": "private", "type": "SeasonalBuffer", "declarator": "subject = new SeasonalBuffer(CYCLE_LENGTH, INTERVAL_LENGTH, VALID_PLACEHOLDER)", "var_name": "subject"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/seasonalnaive/SeasonalBufferTest.java"}, "test_case": {"identifier": "testUpdate_nullMetricData", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testUpdate_nullMetricData() {\n        subject.updateWhilePadding(null);\n    }", "signature": "void testUpdate_nullMetricData()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testUpdate_nullMetricData()", "class_method_signature": "SeasonalBufferTest.testUpdate_nullMetricData()", "testcase": true, "constructor": false, "invocations": ["updateWhilePadding"]}, "focal_class": {"identifier": "SeasonalBuffer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long NOT_YET_INITIALIZED = -1L;", "modifier": "private static final", "type": "long", "declarator": "NOT_YET_INITIALIZED = -1L", "var_name": "NOT_YET_INITIALIZED"}, {"original_string": "private int cycleLength;", "modifier": "private", "type": "int", "declarator": "cycleLength", "var_name": "cycleLength"}, {"original_string": "private int interval;", "modifier": "private", "type": "int", "declarator": "interval", "var_name": "interval"}, {"original_string": "private double missingValuePlaceholder;", "modifier": "private", "type": "double", "declarator": "missingValuePlaceholder", "var_name": "missingValuePlaceholder"}, {"original_string": "private double[] buffer;", "modifier": "private", "type": "double[]", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private int currIndex;", "modifier": "private", "type": "int", "declarator": "currIndex", "var_name": "currIndex"}, {"original_string": "private long lastTimestamp;", "modifier": "private", "type": "long", "declarator": "lastTimestamp", "var_name": "lastTimestamp"}, {"original_string": "private long firstTimestamp;", "modifier": "private", "type": "long", "declarator": "firstTimestamp", "var_name": "firstTimestamp"}], "methods": [{"identifier": "SeasonalBuffer", "parameters": "(int cycleLength, int interval, double missingValuePlaceholder)", "modifiers": "public", "return": "", "signature": " SeasonalBuffer(int cycleLength, int interval, double missingValuePlaceholder)", "full_signature": "public  SeasonalBuffer(int cycleLength, int interval, double missingValuePlaceholder)", "class_method_signature": "SeasonalBuffer.SeasonalBuffer(int cycleLength, int interval, double missingValuePlaceholder)", "testcase": false, "constructor": true}, {"identifier": "updateWhilePadding", "parameters": "(MetricData metricData)", "modifiers": "public", "return": "double", "signature": "double updateWhilePadding(MetricData metricData)", "full_signature": "public double updateWhilePadding(MetricData metricData)", "class_method_signature": "SeasonalBuffer.updateWhilePadding(MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "isReady", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReady()", "full_signature": "public boolean isReady()", "class_method_signature": "SeasonalBuffer.isReady()", "testcase": false, "constructor": false}, {"identifier": "initState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initState()", "full_signature": "private void initState()", "class_method_signature": "SeasonalBuffer.initState()", "testcase": false, "constructor": false}, {"identifier": "padMissingDataPoints", "parameters": "(MetricData metricData)", "modifiers": "private", "return": "void", "signature": "void padMissingDataPoints(MetricData metricData)", "full_signature": "private void padMissingDataPoints(MetricData metricData)", "class_method_signature": "SeasonalBuffer.padMissingDataPoints(MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "updateBuffer", "parameters": "(MetricData metricData)", "modifiers": "private", "return": "void", "signature": "void updateBuffer(MetricData metricData)", "full_signature": "private void updateBuffer(MetricData metricData)", "class_method_signature": "SeasonalBuffer.updateBuffer(MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "getValueForCurrentIndex", "parameters": "()", "modifiers": "private", "return": "double", "signature": "double getValueForCurrentIndex()", "full_signature": "private double getValueForCurrentIndex()", "class_method_signature": "SeasonalBuffer.getValueForCurrentIndex()", "testcase": false, "constructor": false}, {"identifier": "insertSkippedDataPoints", "parameters": "(int numSkippedDataPoints)", "modifiers": "private", "return": "void", "signature": "void insertSkippedDataPoints(int numSkippedDataPoints)", "full_signature": "private void insertSkippedDataPoints(int numSkippedDataPoints)", "class_method_signature": "SeasonalBuffer.insertSkippedDataPoints(int numSkippedDataPoints)", "testcase": false, "constructor": false}, {"identifier": "setBufferValue", "parameters": "(double value)", "modifiers": "private", "return": "void", "signature": "void setBufferValue(double value)", "full_signature": "private void setBufferValue(double value)", "class_method_signature": "SeasonalBuffer.setBufferValue(double value)", "testcase": false, "constructor": false}, {"identifier": "countIntervalsSkippedSinceLastTimestamp", "parameters": "(MetricData metricData)", "modifiers": "private", "return": "int", "signature": "int countIntervalsSkippedSinceLastTimestamp(MetricData metricData)", "full_signature": "private int countIntervalsSkippedSinceLastTimestamp(MetricData metricData)", "class_method_signature": "SeasonalBuffer.countIntervalsSkippedSinceLastTimestamp(MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "checkValidTimestamp", "parameters": "(MetricData metricData)", "modifiers": "private", "return": "void", "signature": "void checkValidTimestamp(MetricData metricData)", "full_signature": "private void checkValidTimestamp(MetricData metricData)", "class_method_signature": "SeasonalBuffer.checkValidTimestamp(MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "dateStr", "parameters": "(long timestamp)", "modifiers": "private", "return": "String", "signature": "String dateStr(long timestamp)", "full_signature": "private String dateStr(long timestamp)", "class_method_signature": "SeasonalBuffer.dateStr(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "isFirstDataPoint", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isFirstDataPoint()", "full_signature": "private boolean isFirstDataPoint()", "class_method_signature": "SeasonalBuffer.isFirstDataPoint()", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/seasonalnaive/SeasonalBuffer.java"}, "focal_method": {"identifier": "updateWhilePadding", "parameters": "(MetricData metricData)", "modifiers": "public", "return": "double", "body": "public double updateWhilePadding(MetricData metricData) {\n        notNull(metricData, \"metricData can't be null\");\n        checkValidTimestamp(metricData);\n        padMissingDataPoints(metricData);\n        double oldValue = getValueForCurrentIndex();\n        updateBuffer(metricData);\n        return oldValue;\n    }", "signature": "double updateWhilePadding(MetricData metricData)", "full_signature": "public double updateWhilePadding(MetricData metricData)", "class_method_signature": "SeasonalBuffer.updateWhilePadding(MetricData metricData)", "testcase": false, "constructor": false, "invocations": ["notNull", "checkValidTimestamp", "padMissingDataPoints", "getValueForCurrentIndex", "updateBuffer"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}