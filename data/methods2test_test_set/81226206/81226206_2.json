{"test_class": {"identifier": "PathSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PathSearchTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PathSearchTest.class)", "var_name": "logger"}], "file": "karate-robot/src/test/java/com/intuit/karate/robot/win/PathSearchTest.java"}, "test_case": {"identifier": "testIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIndex() {\n        List<PathSearch.Chunk> list = PathSearch.split(\"/hello[3]//world\");\n        logger.debug(\"list: {}\", list);\n        PathSearch.Chunk first = list.get(0);\n        assertFalse(first.anyDepth);\n        assertEquals(\"hello\", first.controlType);\n        assertEquals(2, first.index);\n        PathSearch.Chunk second = list.get(1);\n        assertTrue(second.anyDepth);\n        assertEquals(-1, second.index);\n        assertEquals(\"world\", second.controlType);\n    }", "signature": "void testIndex()", "full_signature": "@Test public void testIndex()", "class_method_signature": "PathSearchTest.testIndex()", "testcase": true, "constructor": false, "invocations": ["split", "debug", "get", "assertFalse", "assertEquals", "assertEquals", "get", "assertTrue", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "PathSearch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final java.util.regex.Pattern PATH_CHUNK = java.util.regex.Pattern.compile(\"([^.{]+)?(\\\\.[^{]+)?(\\\\{.+\\\\})?\");", "modifier": "private static final", "type": "java.util.regex.Pattern", "declarator": "PATH_CHUNK = java.util.regex.Pattern.compile(\"([^.{]+)?(\\\\.[^{]+)?(\\\\{.+\\\\})?\")", "var_name": "PATH_CHUNK"}, {"original_string": "private static final char SLASH = '/';", "modifier": "private static final", "type": "char", "declarator": "SLASH = '/'", "var_name": "SLASH"}, {"original_string": "public final boolean findAll;", "modifier": "public final", "type": "boolean", "declarator": "findAll", "var_name": "findAll"}, {"original_string": "private final String path;", "modifier": "private final", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "public final List<Chunk> chunks;", "modifier": "public final", "type": "List<Chunk>", "declarator": "chunks", "var_name": "chunks"}], "methods": [{"identifier": "isWildcard", "parameters": "(String locator)", "modifiers": "public static", "return": "boolean", "signature": "boolean isWildcard(String locator)", "full_signature": "public static boolean isWildcard(String locator)", "class_method_signature": "PathSearch.isWildcard(String locator)", "testcase": false, "constructor": false}, {"identifier": "PathSearch", "parameters": "(String path, boolean findAll)", "modifiers": "public", "return": "", "signature": " PathSearch(String path, boolean findAll)", "full_signature": "public  PathSearch(String path, boolean findAll)", "class_method_signature": "PathSearch.PathSearch(String path, boolean findAll)", "testcase": false, "constructor": true}, {"identifier": "split", "parameters": "(String s)", "modifiers": "public static", "return": "List<Chunk>", "signature": "List<Chunk> split(String s)", "full_signature": "public static List<Chunk> split(String s)", "class_method_signature": "PathSearch.split(String s)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PathSearch.toString()", "testcase": false, "constructor": false}], "file": "karate-robot/src/main/java/com/intuit/karate/robot/win/PathSearch.java"}, "focal_method": {"identifier": "split", "parameters": "(String s)", "modifiers": "public static", "return": "List<Chunk>", "body": "public static List<Chunk> split(String s) {\n        int pos = s.indexOf(SLASH);\n        if (pos == -1) {\n            throw new RuntimeException(\"path did not start with or contain '/'\");\n        }\n        List<Chunk> list = new ArrayList();\n        int startPos = 0;\n        int searchPos = 0;\n        boolean anyDepth = false;\n        while (pos != -1) {\n            if (pos == 0) {\n                startPos = 1;\n                searchPos = 1;\n            } else if (s.charAt(pos - 1) == '\\\\') {\n                s = s.substring(0, pos - 1) + s.substring(pos);\n                searchPos = pos;\n            } else {\n                String temp = s.substring(startPos, pos);\n                if (temp.isEmpty()) {\n                    anyDepth = true;\n                } else {\n                    list.add(new Chunk(anyDepth, temp));\n                    anyDepth = false; // reset                   \n                }\n                startPos = pos + 1;\n                searchPos = startPos;\n            }\n            pos = s.indexOf(SLASH, searchPos);\n        }\n        if (startPos != s.length()) {\n            String temp = s.substring(startPos);\n            if (!temp.isEmpty()) {\n                list.add(new Chunk(anyDepth, temp));\n            }\n        }\n        return list;\n    }", "signature": "List<Chunk> split(String s)", "full_signature": "public static List<Chunk> split(String s)", "class_method_signature": "PathSearch.split(String s)", "testcase": false, "constructor": false, "invocations": ["indexOf", "charAt", "substring", "substring", "substring", "isEmpty", "add", "indexOf", "length", "substring", "isEmpty", "add"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}