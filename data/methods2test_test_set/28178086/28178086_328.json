{"test_class": {"identifier": "SymmetricFrequencyResponseTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/maths/linearfilters/SymmetricFrequencyResponseTest.java"}, "test_case": {"identifier": "testTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransform() {\n        Matrix t = SymmetricFrequencyResponse.transform(100);\n        assertTrue(t.get(99, 99) != 0);\n        Matrix l = SymmetricFrequencyResponse.ltransform(53);\n        Matrix d = SymmetricFrequencyResponse.dtransform(53);\n        assertTrue(l.equals(d, 1e-18));\n    }", "signature": "void testTransform()", "full_signature": "@Test public void testTransform()", "class_method_signature": "SymmetricFrequencyResponseTest.testTransform()", "testcase": true, "constructor": false, "invocations": ["transform", "assertTrue", "get", "ltransform", "dtransform", "assertTrue", "equals"]}, "focal_class": {"identifier": "SymmetricFrequencyResponse", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double TwoPi = Math.PI * 2;", "modifier": "public static final", "type": "double", "declarator": "TwoPi = Math.PI * 2", "var_name": "TwoPi"}, {"original_string": "private static Matrix g_u;", "modifier": "private static", "type": "Matrix", "declarator": "g_u", "var_name": "g_u"}, {"original_string": "private final Polynomial m_p;", "modifier": "private final", "type": "Polynomial", "declarator": "m_p", "var_name": "m_p"}], "methods": [{"identifier": "_transform", "parameters": "(final int r)", "modifiers": "private static synchronized", "return": "Matrix", "signature": "Matrix _transform(final int r)", "full_signature": "private static synchronized Matrix _transform(final int r)", "class_method_signature": "SymmetricFrequencyResponse._transform(final int r)", "testcase": false, "constructor": false}, {"identifier": "createFromFilter", "parameters": "(final IFiniteFilter f)", "modifiers": "public static", "return": "SymmetricFrequencyResponse", "signature": "SymmetricFrequencyResponse createFromFilter(final IFiniteFilter f)", "full_signature": "public static SymmetricFrequencyResponse createFromFilter(final IFiniteFilter f)", "class_method_signature": "SymmetricFrequencyResponse.createFromFilter(final IFiniteFilter f)", "testcase": false, "constructor": false}, {"identifier": "D2SFR", "parameters": "(final double[] c)", "modifiers": "private static", "return": "void", "signature": "void D2SFR(final double[] c)", "full_signature": "private static void D2SFR(final double[] c)", "class_method_signature": "SymmetricFrequencyResponse.D2SFR(final double[] c)", "testcase": false, "constructor": false}, {"identifier": "SFR2D", "parameters": "(final double[] c)", "modifiers": "private static", "return": "void", "signature": "void SFR2D(final double[] c)", "full_signature": "private static void SFR2D(final double[] c)", "class_method_signature": "SymmetricFrequencyResponse.SFR2D(final double[] c)", "testcase": false, "constructor": false}, {"identifier": "sfrur", "parameters": "(final Complex ur)", "modifiers": "private static", "return": "Polynomial", "signature": "Polynomial sfrur(final Complex ur)", "full_signature": "private static Polynomial sfrur(final Complex ur)", "class_method_signature": "SymmetricFrequencyResponse.sfrur(final Complex ur)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final int rank)", "modifiers": "static", "return": "Matrix", "signature": "Matrix transform(final int rank)", "full_signature": "static Matrix transform(final int rank)", "class_method_signature": "SymmetricFrequencyResponse.transform(final int rank)", "testcase": false, "constructor": false}, {"identifier": "dtransform", "parameters": "(final int rank)", "modifiers": "static", "return": "Matrix", "signature": "Matrix dtransform(final int rank)", "full_signature": "static Matrix dtransform(final int rank)", "class_method_signature": "SymmetricFrequencyResponse.dtransform(final int rank)", "testcase": false, "constructor": false}, {"identifier": "ltransform", "parameters": "(final int rank)", "modifiers": "static", "return": "Matrix", "signature": "Matrix ltransform(final int rank)", "full_signature": "static Matrix ltransform(final int rank)", "class_method_signature": "SymmetricFrequencyResponse.ltransform(final int rank)", "testcase": false, "constructor": false}, {"identifier": "SymmetricFrequencyResponse", "parameters": "(final Polynomial p)", "modifiers": "public", "return": "", "signature": " SymmetricFrequencyResponse(final Polynomial p)", "full_signature": "public  SymmetricFrequencyResponse(final Polynomial p)", "class_method_signature": "SymmetricFrequencyResponse.SymmetricFrequencyResponse(final Polynomial p)", "testcase": false, "constructor": true}, {"identifier": "SymmetricFrequencyResponse", "parameters": "(final SymmetricFilter sf)", "modifiers": "public", "return": "", "signature": " SymmetricFrequencyResponse(final SymmetricFilter sf)", "full_signature": "public  SymmetricFrequencyResponse(final SymmetricFilter sf)", "class_method_signature": "SymmetricFrequencyResponse.SymmetricFrequencyResponse(final SymmetricFilter sf)", "testcase": false, "constructor": true}, {"identifier": "divide", "parameters": "(final SymmetricFrequencyResponse r)", "modifiers": "public", "return": "SymmetricFrequencyResponse", "signature": "SymmetricFrequencyResponse divide(final SymmetricFrequencyResponse r)", "full_signature": "public SymmetricFrequencyResponse divide(final SymmetricFrequencyResponse r)", "class_method_signature": "SymmetricFrequencyResponse.divide(final SymmetricFrequencyResponse r)", "testcase": false, "constructor": false}, {"identifier": "evaluateAt", "parameters": "(final double freq)", "modifiers": "public", "return": "double", "signature": "double evaluateAt(final double freq)", "full_signature": "public double evaluateAt(final double freq)", "class_method_signature": "SymmetricFrequencyResponse.evaluateAt(final double freq)", "testcase": false, "constructor": false}, {"identifier": "evaluateAtCos", "parameters": "(final double cos)", "modifiers": "public", "return": "double", "signature": "double evaluateAtCos(final double cos)", "full_signature": "public double evaluateAtCos(final double cos)", "class_method_signature": "SymmetricFrequencyResponse.evaluateAtCos(final double cos)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final int idx)", "modifiers": "public", "return": "double", "signature": "double get(final int idx)", "full_signature": "public double get(final int idx)", "class_method_signature": "SymmetricFrequencyResponse.get(final int idx)", "testcase": false, "constructor": false}, {"identifier": "getPolynomial", "parameters": "()", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial getPolynomial()", "full_signature": "public Polynomial getPolynomial()", "class_method_signature": "SymmetricFrequencyResponse.getPolynomial()", "testcase": false, "constructor": false}, {"identifier": "getDegree", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDegree()", "full_signature": "public int getDegree()", "class_method_signature": "SymmetricFrequencyResponse.getDegree()", "testcase": false, "constructor": false}, {"identifier": "getIntegral", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getIntegral()", "full_signature": "public double getIntegral()", "class_method_signature": "SymmetricFrequencyResponse.getIntegral()", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(final double d)", "modifiers": "public", "return": "SymmetricFrequencyResponse", "signature": "SymmetricFrequencyResponse minus(final double d)", "full_signature": "public SymmetricFrequencyResponse minus(final double d)", "class_method_signature": "SymmetricFrequencyResponse.minus(final double d)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(final SymmetricFrequencyResponse r)", "modifiers": "public", "return": "SymmetricFrequencyResponse", "signature": "SymmetricFrequencyResponse minus(final SymmetricFrequencyResponse r)", "full_signature": "public SymmetricFrequencyResponse minus(final SymmetricFrequencyResponse r)", "class_method_signature": "SymmetricFrequencyResponse.minus(final SymmetricFrequencyResponse r)", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "public", "return": "SymmetricFrequencyResponse", "signature": "SymmetricFrequencyResponse negate()", "full_signature": "public SymmetricFrequencyResponse negate()", "class_method_signature": "SymmetricFrequencyResponse.negate()", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final double d)", "modifiers": "public", "return": "SymmetricFrequencyResponse", "signature": "SymmetricFrequencyResponse plus(final double d)", "full_signature": "public SymmetricFrequencyResponse plus(final double d)", "class_method_signature": "SymmetricFrequencyResponse.plus(final double d)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final SymmetricFrequencyResponse r)", "modifiers": "public", "return": "SymmetricFrequencyResponse", "signature": "SymmetricFrequencyResponse plus(final SymmetricFrequencyResponse r)", "full_signature": "public SymmetricFrequencyResponse plus(final SymmetricFrequencyResponse r)", "class_method_signature": "SymmetricFrequencyResponse.plus(final SymmetricFrequencyResponse r)", "testcase": false, "constructor": false}, {"identifier": "roots", "parameters": "()", "modifiers": "public", "return": "Complex[]", "signature": "Complex[] roots()", "full_signature": "public Complex[] roots()", "class_method_signature": "SymmetricFrequencyResponse.roots()", "testcase": false, "constructor": false}, {"identifier": "roots", "parameters": "(final IRootsSolver searcher)", "modifiers": "public", "return": "Complex[]", "signature": "Complex[] roots(final IRootsSolver searcher)", "full_signature": "public Complex[] roots(final IRootsSolver searcher)", "class_method_signature": "SymmetricFrequencyResponse.roots(final IRootsSolver searcher)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final double d)", "modifiers": "public", "return": "SymmetricFrequencyResponse", "signature": "SymmetricFrequencyResponse times(final double d)", "full_signature": "public SymmetricFrequencyResponse times(final double d)", "class_method_signature": "SymmetricFrequencyResponse.times(final double d)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final SymmetricFrequencyResponse r)", "modifiers": "public", "return": "SymmetricFrequencyResponse", "signature": "SymmetricFrequencyResponse times(final SymmetricFrequencyResponse r)", "full_signature": "public SymmetricFrequencyResponse times(final SymmetricFrequencyResponse r)", "class_method_signature": "SymmetricFrequencyResponse.times(final SymmetricFrequencyResponse r)", "testcase": false, "constructor": false}, {"identifier": "toSymmetricFilter", "parameters": "()", "modifiers": "public", "return": "SymmetricFilter", "signature": "SymmetricFilter toSymmetricFilter()", "full_signature": "public SymmetricFilter toSymmetricFilter()", "class_method_signature": "SymmetricFrequencyResponse.toSymmetricFilter()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/maths/linearfilters/SymmetricFrequencyResponse.java"}, "focal_method": {"identifier": "transform", "parameters": "(final int rank)", "modifiers": "static", "return": "Matrix", "body": "static Matrix transform(final int rank) {\n        if (rank <= 53) {\n            return ltransform(rank);\n        } else {\n            return dtransform(rank);\n        }\n    }", "signature": "Matrix transform(final int rank)", "full_signature": "static Matrix transform(final int rank)", "class_method_signature": "SymmetricFrequencyResponse.transform(final int rank)", "testcase": false, "constructor": false, "invocations": ["ltransform", "dtransform"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}