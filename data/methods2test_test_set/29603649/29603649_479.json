{"test_class": {"identifier": "WilmaHttpResponseProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private WilmaHttpResponse response;", "modifier": "@Mock\n    private", "type": "WilmaHttpResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private ProcessorBase responseProcessor;", "modifier": "@Mock\n    private", "type": "ProcessorBase", "declarator": "responseProcessor", "var_name": "responseProcessor"}, {"original_string": "private WilmaHttpResponseProcessor underTest;", "modifier": "private", "type": "WilmaHttpResponseProcessor", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private List<ProcessorBase> processors;", "modifier": "private", "type": "List<ProcessorBase>", "declarator": "processors", "var_name": "processors"}], "file": "wilma-application/modules/wilma-core/src/test/java/com/epam/wilma/core/processor/response/WilmaHttpResponseProcessorTest.java"}, "test_case": {"identifier": "testAddProcessorShouldAddProcessorWhenListDoesNotContainProcessor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddProcessorShouldAddProcessorWhenListDoesNotContainProcessor() {\n        //GIVEN\n        processors.remove(0);\n        int initialSize = processors.size();\n        //WHEN\n        underTest.addProcessor(responseProcessor);\n        //THEN\n        assertEquals(processors.size(), initialSize + 1);\n    }", "signature": "void testAddProcessorShouldAddProcessorWhenListDoesNotContainProcessor()", "full_signature": "@Test public void testAddProcessorShouldAddProcessorWhenListDoesNotContainProcessor()", "class_method_signature": "WilmaHttpResponseProcessorTest.testAddProcessorShouldAddProcessorWhenListDoesNotContainProcessor()", "testcase": true, "constructor": false, "invocations": ["remove", "size", "addProcessor", "assertEquals", "size"]}, "focal_class": {"identifier": "WilmaHttpResponseProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<ProcessorBase> processors;", "modifier": "private", "type": "List<ProcessorBase>", "declarator": "processors", "var_name": "processors"}], "methods": [{"identifier": "processResponse", "parameters": "(final WilmaHttpResponse response)", "modifiers": "public synchronized", "return": "void", "signature": "void processResponse(final WilmaHttpResponse response)", "full_signature": "public synchronized void processResponse(final WilmaHttpResponse response)", "class_method_signature": "WilmaHttpResponseProcessor.processResponse(final WilmaHttpResponse response)", "testcase": false, "constructor": false}, {"identifier": "disableProcessor", "parameters": "(final ProcessorBase processor)", "modifiers": "public", "return": "void", "signature": "void disableProcessor(final ProcessorBase processor)", "full_signature": "public void disableProcessor(final ProcessorBase processor)", "class_method_signature": "WilmaHttpResponseProcessor.disableProcessor(final ProcessorBase processor)", "testcase": false, "constructor": false}, {"identifier": "enableProcessor", "parameters": "(final ProcessorBase processor)", "modifiers": "public", "return": "void", "signature": "void enableProcessor(final ProcessorBase processor)", "full_signature": "public void enableProcessor(final ProcessorBase processor)", "class_method_signature": "WilmaHttpResponseProcessor.enableProcessor(final ProcessorBase processor)", "testcase": false, "constructor": false}, {"identifier": "isProcessorEnabled", "parameters": "(final ProcessorBase processor)", "modifiers": "public", "return": "boolean", "signature": "boolean isProcessorEnabled(final ProcessorBase processor)", "full_signature": "public boolean isProcessorEnabled(final ProcessorBase processor)", "class_method_signature": "WilmaHttpResponseProcessor.isProcessorEnabled(final ProcessorBase processor)", "testcase": false, "constructor": false}, {"identifier": "addProcessor", "parameters": "(final ProcessorBase processor)", "modifiers": "public", "return": "void", "signature": "void addProcessor(final ProcessorBase processor)", "full_signature": "public void addProcessor(final ProcessorBase processor)", "class_method_signature": "WilmaHttpResponseProcessor.addProcessor(final ProcessorBase processor)", "testcase": false, "constructor": false}, {"identifier": "containsProcessor", "parameters": "(final WilmaEntityProcessorInterface processor)", "modifiers": "public", "return": "boolean", "signature": "boolean containsProcessor(final WilmaEntityProcessorInterface processor)", "full_signature": "public boolean containsProcessor(final WilmaEntityProcessorInterface processor)", "class_method_signature": "WilmaHttpResponseProcessor.containsProcessor(final WilmaEntityProcessorInterface processor)", "testcase": false, "constructor": false}, {"identifier": "setProcessors", "parameters": "(final List<ProcessorBase> processors)", "modifiers": "public", "return": "void", "signature": "void setProcessors(final List<ProcessorBase> processors)", "full_signature": "public void setProcessors(final List<ProcessorBase> processors)", "class_method_signature": "WilmaHttpResponseProcessor.setProcessors(final List<ProcessorBase> processors)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-core/src/main/java/com/epam/wilma/core/processor/response/WilmaHttpResponseProcessor.java"}, "focal_method": {"identifier": "addProcessor", "parameters": "(final ProcessorBase processor)", "modifiers": "public", "return": "void", "body": "public void addProcessor(final ProcessorBase processor) {\n        if (!processors.contains(processor)) {\n            processors.add(processor);\n        }\n    }", "signature": "void addProcessor(final ProcessorBase processor)", "full_signature": "public void addProcessor(final ProcessorBase processor)", "class_method_signature": "WilmaHttpResponseProcessor.addProcessor(final ProcessorBase processor)", "testcase": false, "constructor": false, "invocations": ["contains", "add"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}