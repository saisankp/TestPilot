{"test_class": {"identifier": "DefaultDocumentRepositoryProducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    private DocumentRepositoryProducer producer;", "modifier": "@Inject\n    private", "type": "DocumentRepositoryProducer", "declarator": "producer", "var_name": "producer"}], "file": "artemis-document/src/test/java/org/jnosql/artemis/document/query/DefaultDocumentRepositoryProducerTest.java"}, "test_case": {"identifier": "shouldCreateFromTemplate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateFromTemplate() {\n        DocumentTemplate template= Mockito.mock(DocumentTemplate.class);\n        PersonRepository personRepository = producer.get(PersonRepository.class, template);\n        assertNotNull(personRepository);\n    }", "signature": "void shouldCreateFromTemplate()", "full_signature": "@Test public void shouldCreateFromTemplate()", "class_method_signature": "DefaultDocumentRepositoryProducerTest.shouldCreateFromTemplate()", "testcase": true, "constructor": false, "invocations": ["mock", "get", "assertNotNull"]}, "focal_class": {"identifier": "DefaultDocumentRepositoryProducer", "superclass": "", "interfaces": "implements DocumentRepositoryProducer", "fields": [{"original_string": "@Inject\n    private ClassMappings classMappings;", "modifier": "@Inject\n    private", "type": "ClassMappings", "declarator": "classMappings", "var_name": "classMappings"}, {"original_string": "@Inject\n    private Converters converters;", "modifier": "@Inject\n    private", "type": "Converters", "declarator": "converters", "var_name": "converters"}, {"original_string": "@Inject\n    private DocumentTemplateProducer producer;", "modifier": "@Inject\n    private", "type": "DocumentTemplateProducer", "declarator": "producer", "var_name": "producer"}], "methods": [{"identifier": "get", "parameters": "(Class<T> repositoryClass, DocumentCollectionManager manager)", "modifiers": "@Override public", "return": "T", "signature": "T get(Class<T> repositoryClass, DocumentCollectionManager manager)", "full_signature": "@Override public T get(Class<T> repositoryClass, DocumentCollectionManager manager)", "class_method_signature": "DefaultDocumentRepositoryProducer.get(Class<T> repositoryClass, DocumentCollectionManager manager)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<T> repositoryClass, DocumentTemplate template)", "modifiers": "@Override public", "return": "T", "signature": "T get(Class<T> repositoryClass, DocumentTemplate template)", "full_signature": "@Override public T get(Class<T> repositoryClass, DocumentTemplate template)", "class_method_signature": "DefaultDocumentRepositoryProducer.get(Class<T> repositoryClass, DocumentTemplate template)", "testcase": false, "constructor": false}], "file": "artemis-document/src/main/java/org/jnosql/artemis/document/query/DefaultDocumentRepositoryProducer.java"}, "focal_method": {"identifier": "get", "parameters": "(Class<T> repositoryClass, DocumentCollectionManager manager)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <E, ID, T extends Repository<E, ID>> T get(Class<T> repositoryClass, DocumentCollectionManager manager) {\n        Objects.requireNonNull(repositoryClass, \"repository class is required\");\n        Objects.requireNonNull(manager, \"manager class is required\");\n        DocumentTemplate template = producer.get(manager);\n        return get(repositoryClass, template);\n    }", "signature": "T get(Class<T> repositoryClass, DocumentCollectionManager manager)", "full_signature": "@Override public T get(Class<T> repositoryClass, DocumentCollectionManager manager)", "class_method_signature": "DefaultDocumentRepositoryProducer.get(Class<T> repositoryClass, DocumentCollectionManager manager)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "get", "get"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}