{"test_class": {"identifier": "ThreadUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ThreadUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ThreadUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/ThreadUtilTest.java"}, "test_case": {"identifier": "getAllThreads", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAllThreads() {\n        Thread[] allThreads = ThreadUtil.getAllThreads();\n\n        //for (Thread t : allThreads) {\n        //    logger.info(t.getId() + \": \" + t.getName());\n        //}\n\n        // sort of hard to predict how this test may be called, so we'll just\n        // check that at least 4 threads were returned\n        // 2: Reference Handler\n        // 3: Finalizer\n        // 4: Signal Dispatcher\n        // 1: main\n        Assert.assertEquals(true, allThreads.length >= 4);\n    }", "signature": "void getAllThreads()", "full_signature": "@Test public void getAllThreads()", "class_method_signature": "ThreadUtilTest.getAllThreads()", "testcase": true, "constructor": false, "invocations": ["getAllThreads", "assertEquals"]}, "focal_class": {"identifier": "ThreadUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getRootThreadGroup", "parameters": "()", "modifiers": "static public", "return": "ThreadGroup", "signature": "ThreadGroup getRootThreadGroup()", "full_signature": "static public ThreadGroup getRootThreadGroup()", "class_method_signature": "ThreadUtil.getRootThreadGroup()", "testcase": false, "constructor": false}, {"identifier": "getAllThreads", "parameters": "()", "modifiers": "static public", "return": "Thread[]", "signature": "Thread[] getAllThreads()", "full_signature": "static public Thread[] getAllThreads()", "class_method_signature": "ThreadUtil.getAllThreads()", "testcase": false, "constructor": false}, {"identifier": "getThread", "parameters": "(final long id)", "modifiers": "static public", "return": "Thread", "signature": "Thread getThread(final long id)", "full_signature": "static public Thread getThread(final long id)", "class_method_signature": "ThreadUtil.getThread(final long id)", "testcase": false, "constructor": false}, {"identifier": "getAllThreadsMatching", "parameters": "(final String regex)", "modifiers": "static public", "return": "Thread[]", "signature": "Thread[] getAllThreadsMatching(final String regex)", "full_signature": "static public Thread[] getAllThreadsMatching(final String regex)", "class_method_signature": "ThreadUtil.getAllThreadsMatching(final String regex)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/ThreadUtil.java"}, "focal_method": {"identifier": "getAllThreads", "parameters": "()", "modifiers": "static public", "return": "Thread[]", "body": "static public Thread[] getAllThreads() {\n        final ThreadGroup root = getRootThreadGroup();\n        final ThreadMXBean thbean = ManagementFactory.getThreadMXBean();\n        int nAlloc = thbean.getThreadCount();\n        int n = 0;\n        Thread[] threads;\n        do {\n            nAlloc *= 2;\n            threads = new Thread[nAlloc];\n            n = root.enumerate(threads, true);\n        } while (n == nAlloc);\n        return java.util.Arrays.copyOf(threads, n);\n    }", "signature": "Thread[] getAllThreads()", "full_signature": "static public Thread[] getAllThreads()", "class_method_signature": "ThreadUtil.getAllThreads()", "testcase": false, "constructor": false, "invocations": ["getRootThreadGroup", "getThreadMXBean", "getThreadCount", "enumerate", "copyOf"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}