{"test_class": {"identifier": "OfficeListTagTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private XmlBuilder result;", "modifier": "private", "type": "XmlBuilder", "declarator": "result", "var_name": "result"}, {"original_string": "private UserContext userContext;", "modifier": "private", "type": "UserContext", "declarator": "userContext", "var_name": "userContext"}, {"original_string": "private OfficeBO head;", "modifier": "private", "type": "OfficeBO", "declarator": "head", "var_name": "head"}, {"original_string": "private OfficeBO regional;", "modifier": "private", "type": "OfficeBO", "declarator": "regional", "var_name": "regional"}, {"original_string": "private OfficeBO branch;", "modifier": "private", "type": "OfficeBO", "declarator": "branch", "var_name": "branch"}, {"original_string": "private OfficeBO branch2;", "modifier": "private", "type": "OfficeBO", "declarator": "branch2", "var_name": "branch2"}], "file": "application/src/test/java/org/mifos/customers/office/struts/tag/OfficeListTagTest.java"}, "test_case": {"identifier": "testBranches", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBranches() throws Exception {\n        createSomeOffices();\n        Assert.assertEquals(2, regional.getBranchOnlyChildren().size());\n        List<OfficeBO> officeList = new ArrayList<OfficeBO>();\n        officeList.add(regional);\n\n        List<OfficeHierarchyDto> officeHierarchy = OfficeBO\n                .convertToBranchOnlyHierarchyWithParentsOfficeHierarchy(officeList);\n\n        new OfficeListTag().getBranchOffices(result, officeHierarchy, userContext.getPreferredLocale(), branch\n                .getSearchId(), \"Branch\");\n        String html = result.toString();\n        assertWellFormedFragment(html);\n        StringAssert.assertContains(\"Trinidad&amp;Tobago\", html);\n        StringAssert.assertNotContains(\"TheGambia\", html);\n    }", "signature": "void testBranches()", "full_signature": "@Test public void testBranches()", "class_method_signature": "OfficeListTagTest.testBranches()", "testcase": true, "constructor": false, "invocations": ["createSomeOffices", "assertEquals", "size", "getBranchOnlyChildren", "add", "convertToBranchOnlyHierarchyWithParentsOfficeHierarchy", "getBranchOffices", "getPreferredLocale", "getSearchId", "toString", "assertWellFormedFragment", "assertContains", "assertNotContains"]}, "focal_class": {"identifier": "OfficeListTag", "superclass": "extends BodyTagSupport", "interfaces": "", "fields": [{"original_string": "private String actionName;", "modifier": "private", "type": "String", "declarator": "actionName", "var_name": "actionName"}, {"original_string": "private String methodName;", "modifier": "private", "type": "String", "declarator": "methodName", "var_name": "methodName"}, {"original_string": "private String flowKey;", "modifier": "private", "type": "String", "declarator": "flowKey", "var_name": "flowKey"}, {"original_string": "private String onlyBranchOffices;", "modifier": "private", "type": "String", "declarator": "onlyBranchOffices", "var_name": "onlyBranchOffices"}], "methods": [{"identifier": "OfficeListTag", "parameters": "()", "modifiers": "public", "return": "", "signature": " OfficeListTag()", "full_signature": "public  OfficeListTag()", "class_method_signature": "OfficeListTag.OfficeListTag()", "testcase": false, "constructor": true}, {"identifier": "OfficeListTag", "parameters": "(String action, String method, String flow)", "modifiers": "public", "return": "", "signature": " OfficeListTag(String action, String method, String flow)", "full_signature": "public  OfficeListTag(String action, String method, String flow)", "class_method_signature": "OfficeListTag.OfficeListTag(String action, String method, String flow)", "testcase": false, "constructor": true}, {"identifier": "doStartTag", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int doStartTag()", "full_signature": "@Override public int doStartTag()", "class_method_signature": "OfficeListTag.doStartTag()", "testcase": false, "constructor": false}, {"identifier": "getActionName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getActionName()", "full_signature": "public String getActionName()", "class_method_signature": "OfficeListTag.getActionName()", "testcase": false, "constructor": false}, {"identifier": "setActionName", "parameters": "(String actionName)", "modifiers": "public", "return": "void", "signature": "void setActionName(String actionName)", "full_signature": "public void setActionName(String actionName)", "class_method_signature": "OfficeListTag.setActionName(String actionName)", "testcase": false, "constructor": false}, {"identifier": "getMethodName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMethodName()", "full_signature": "public String getMethodName()", "class_method_signature": "OfficeListTag.getMethodName()", "testcase": false, "constructor": false}, {"identifier": "setMethodName", "parameters": "(String methodName)", "modifiers": "public", "return": "void", "signature": "void setMethodName(String methodName)", "full_signature": "public void setMethodName(String methodName)", "class_method_signature": "OfficeListTag.setMethodName(String methodName)", "testcase": false, "constructor": false}, {"identifier": "getOnlyBranchOffices", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOnlyBranchOffices()", "full_signature": "public String getOnlyBranchOffices()", "class_method_signature": "OfficeListTag.getOnlyBranchOffices()", "testcase": false, "constructor": false}, {"identifier": "setOnlyBranchOffices", "parameters": "(String onlyBranchOffices)", "modifiers": "public", "return": "void", "signature": "void setOnlyBranchOffices(String onlyBranchOffices)", "full_signature": "public void setOnlyBranchOffices(String onlyBranchOffices)", "class_method_signature": "OfficeListTag.setOnlyBranchOffices(String onlyBranchOffices)", "testcase": false, "constructor": false}, {"identifier": "getOfficeList", "parameters": "(OnlyBranchOfficeHierarchyDto officeHierarchy)", "modifiers": "private", "return": "String", "signature": "String getOfficeList(OnlyBranchOfficeHierarchyDto officeHierarchy)", "full_signature": "private String getOfficeList(OnlyBranchOfficeHierarchyDto officeHierarchy)", "class_method_signature": "OfficeListTag.getOfficeList(OnlyBranchOfficeHierarchyDto officeHierarchy)", "testcase": false, "constructor": false}, {"identifier": "getOfficeList", "parameters": "(Locale preferredUserLocale, List<OfficeDetailsDto> levels, String loggedInOfficeSearchId,\n            List<OfficeHierarchyDto> officeHierarchy, List<OfficeBO> officesTillBranchOffice)", "modifiers": "", "return": "String", "signature": "String getOfficeList(Locale preferredUserLocale, List<OfficeDetailsDto> levels, String loggedInOfficeSearchId,\n            List<OfficeHierarchyDto> officeHierarchy, List<OfficeBO> officesTillBranchOffice)", "full_signature": " String getOfficeList(Locale preferredUserLocale, List<OfficeDetailsDto> levels, String loggedInOfficeSearchId,\n            List<OfficeHierarchyDto> officeHierarchy, List<OfficeBO> officesTillBranchOffice)", "class_method_signature": "OfficeListTag.getOfficeList(Locale preferredUserLocale, List<OfficeDetailsDto> levels, String loggedInOfficeSearchId,\n            List<OfficeHierarchyDto> officeHierarchy, List<OfficeBO> officesTillBranchOffice)", "testcase": false, "constructor": false}, {"identifier": "getBranchOffices", "parameters": "(XmlBuilder html, List<OfficeHierarchyDto> officeList, Locale preferredUserLocale,\n            String loggedInOfficeSearchId, String branchName)", "modifiers": "", "return": "void", "signature": "void getBranchOffices(XmlBuilder html, List<OfficeHierarchyDto> officeList, Locale preferredUserLocale,\n            String loggedInOfficeSearchId, String branchName)", "full_signature": " void getBranchOffices(XmlBuilder html, List<OfficeHierarchyDto> officeList, Locale preferredUserLocale,\n            String loggedInOfficeSearchId, String branchName)", "class_method_signature": "OfficeListTag.getBranchOffices(XmlBuilder html, List<OfficeHierarchyDto> officeList, Locale preferredUserLocale,\n            String loggedInOfficeSearchId, String branchName)", "testcase": false, "constructor": false}, {"identifier": "getLink", "parameters": "(Short officeId, String officeName)", "modifiers": "", "return": "XmlBuilder", "signature": "XmlBuilder getLink(Short officeId, String officeName)", "full_signature": " XmlBuilder getLink(Short officeId, String officeName)", "class_method_signature": "OfficeListTag.getLink(Short officeId, String officeName)", "testcase": false, "constructor": false}, {"identifier": "replaceSpaces", "parameters": "(String officeName)", "modifiers": "public", "return": "String", "signature": "String replaceSpaces(String officeName)", "full_signature": "public String replaceSpaces(String officeName)", "class_method_signature": "OfficeListTag.replaceSpaces(String officeName)", "testcase": false, "constructor": false}, {"identifier": "getAboveBranches", "parameters": "(XmlBuilder html, List<OfficeBO> officeList, String regional, String subregional, String area)", "modifiers": "", "return": "void", "signature": "void getAboveBranches(XmlBuilder html, List<OfficeBO> officeList, String regional, String subregional, String area)", "full_signature": " void getAboveBranches(XmlBuilder html, List<OfficeBO> officeList, String regional, String subregional, String area)", "class_method_signature": "OfficeListTag.getAboveBranches(XmlBuilder html, List<OfficeBO> officeList, String regional, String subregional, String area)", "testcase": false, "constructor": false}, {"identifier": "outputLevel", "parameters": "(XmlBuilder result, XmlBuilder levelHtml)", "modifiers": "private", "return": "void", "signature": "void outputLevel(XmlBuilder result, XmlBuilder levelHtml)", "full_signature": "private void outputLevel(XmlBuilder result, XmlBuilder levelHtml)", "class_method_signature": "OfficeListTag.outputLevel(XmlBuilder result, XmlBuilder levelHtml)", "testcase": false, "constructor": false}, {"identifier": "processOffice", "parameters": "(XmlBuilder levelHtml, OfficeBO office, String levelName)", "modifiers": "private", "return": "XmlBuilder", "signature": "XmlBuilder processOffice(XmlBuilder levelHtml, OfficeBO office, String levelName)", "full_signature": "private XmlBuilder processOffice(XmlBuilder levelHtml, OfficeBO office, String levelName)", "class_method_signature": "OfficeListTag.processOffice(XmlBuilder levelHtml, OfficeBO office, String levelName)", "testcase": false, "constructor": false}, {"identifier": "bullet", "parameters": "(XmlBuilder html)", "modifiers": "private", "return": "void", "signature": "void bullet(XmlBuilder html)", "full_signature": "private void bullet(XmlBuilder html)", "class_method_signature": "OfficeListTag.bullet(XmlBuilder html)", "testcase": false, "constructor": false}, {"identifier": "getFlowKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFlowKey()", "full_signature": "public String getFlowKey()", "class_method_signature": "OfficeListTag.getFlowKey()", "testcase": false, "constructor": false}, {"identifier": "setFlowKey", "parameters": "(String flowKey)", "modifiers": "public", "return": "void", "signature": "void setFlowKey(String flowKey)", "full_signature": "public void setFlowKey(String flowKey)", "class_method_signature": "OfficeListTag.setFlowKey(String flowKey)", "testcase": false, "constructor": false}], "file": "application/src/main/java/org/mifos/customers/office/struts/tag/OfficeListTag.java"}, "focal_method": {"identifier": "getBranchOffices", "parameters": "(XmlBuilder html, List<OfficeHierarchyDto> officeList, Locale preferredUserLocale,\n            String loggedInOfficeSearchId, String branchName)", "modifiers": "", "return": "void", "body": "void getBranchOffices(XmlBuilder html, List<OfficeHierarchyDto> officeList, Locale preferredUserLocale,\n            String loggedInOfficeSearchId, String branchName) {\n        html.singleTag(\"br\");\n\n        html.startTag(\"span\", \"class\", \"fontnormalBold\");\n        html.text(branchName);\n        html.endTag(\"span\");\n\n        html.singleTag(\"br\");\n        if (officeList == null) {\n            html.startTag(\"span\", \"class\", \"fontnormal\");\n            html.text(MessageLookup.getLocalizedMessage(\"Office.labelNo\"));\n            html.text(\" \");\n            html.text(branchName.toLowerCase());\n            html.text(\" \");\n            html.text(MessageLookup.getLocalizedMessage(\"Office.labelPresent\"));\n            html.endTag(\"span\");\n        } else {\n            for (int i = 0; i < officeList.size(); i++) {\n                OfficeHierarchyDto officeParent = officeList.get(i);\n\n                Set<OfficeHierarchyDto> branchList = new TreeSet<OfficeHierarchyDto>();\n\n                for (OfficeHierarchyDto dataScopeBranch : officeParent.getChildren()) {\n                    if (dataScopeBranch.getSearchId().startsWith(loggedInOfficeSearchId) && dataScopeBranch.isActive()) {\n                        branchList.add(dataScopeBranch);\n                    }\n                }\n\n                if (branchList.size() > 0) {\n                    if (i > 0) {\n                        html.singleTag(\"br\");\n                    }\n\n                    html.startTag(\"span\", \"class\", \"fontnormal\");\n                    html.text(officeParent.getOfficeName());\n                    html.endTag(\"span\");\n\n                    html.startTag(\"table\", \"width\", \"90%\", \"border\", \"0\", \"cellspacing\", \"0\", \"cellpadding\", \"0\");\n                    for (OfficeHierarchyDto office : branchList) {\n                        html.startTag(\"tr\", \"class\", \"fontnormal\");\n\n                        bullet(html);\n\n                        html.startTag(\"td\", \"width\", \"99%\");\n                        html.append(getLink(office.getOfficeId(), office.getOfficeName()));\n                        html.endTag(\"td\");\n                        html.endTag(\"tr\");\n                    }\n                    html.endTag(\"table\");\n                }\n            }\n        }\n    }", "signature": "void getBranchOffices(XmlBuilder html, List<OfficeHierarchyDto> officeList, Locale preferredUserLocale,\n            String loggedInOfficeSearchId, String branchName)", "full_signature": " void getBranchOffices(XmlBuilder html, List<OfficeHierarchyDto> officeList, Locale preferredUserLocale,\n            String loggedInOfficeSearchId, String branchName)", "class_method_signature": "OfficeListTag.getBranchOffices(XmlBuilder html, List<OfficeHierarchyDto> officeList, Locale preferredUserLocale,\n            String loggedInOfficeSearchId, String branchName)", "testcase": false, "constructor": false, "invocations": ["singleTag", "startTag", "text", "endTag", "singleTag", "startTag", "text", "getLocalizedMessage", "text", "text", "toLowerCase", "text", "text", "getLocalizedMessage", "endTag", "size", "get", "getChildren", "startsWith", "getSearchId", "isActive", "add", "size", "singleTag", "startTag", "text", "getOfficeName", "endTag", "startTag", "startTag", "bullet", "startTag", "append", "getLink", "getOfficeId", "getOfficeName", "endTag", "endTag", "endTag"]}, "repository": {"repo_id": 1348716, "url": "https://github.com/mifos/head", "language": "Java", "is_fork": false, "fork_count": 91, "stargazer_count": 55, "size": 532732, "license": "licensed"}}