{"test_class": {"identifier": "FieldCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExampleEntryPoint entryPoint;", "modifier": "private", "type": "ExampleEntryPoint", "declarator": "entryPoint", "var_name": "entryPoint"}, {"original_string": "private Gateway gateway;", "modifier": "private", "type": "Gateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "private FieldCommand command;", "modifier": "private", "type": "FieldCommand", "declarator": "command", "var_name": "command"}, {"original_string": "private BufferedWriter writer;", "modifier": "private", "type": "BufferedWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private StringWriter sWriter;", "modifier": "private", "type": "StringWriter", "declarator": "sWriter", "var_name": "sWriter"}, {"original_string": "private String target;", "modifier": "private", "type": "String", "declarator": "target", "var_name": "target"}], "file": "py4j-java/src/test/java/py4j/commands/FieldCommandTest.java"}, "test_case": {"identifier": "testSetField", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSetField() {\n\t\tString inputCommand = \"s\\n\" + target + \"\\nfield10\\ni123\\ne\\n\";\n\t\ttry {\n\t\t\tcommand.execute(\"f\", new BufferedReader(new StringReader(inputCommand)), writer);\n\t\t\tassertEquals(\"!yv\\n\", sWriter.toString());\n\t\t\tassertEquals(((ExampleClass) gateway.getObject(target)).field10, 123);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail();\n\t\t}\n\t}", "signature": "void testSetField()", "full_signature": "@Test public void testSetField()", "class_method_signature": "FieldCommandTest.testSetField()", "testcase": true, "constructor": false, "invocations": ["execute", "assertEquals", "toString", "assertEquals", "getObject", "printStackTrace", "fail"]}, "focal_class": {"identifier": "FieldCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "private final Logger logger = Logger.getLogger(FieldCommand.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "logger = Logger.getLogger(FieldCommand.class.getName())", "var_name": "logger"}, {"original_string": "public final static String FIELD_COMMAND_NAME = \"f\";", "modifier": "public final static", "type": "String", "declarator": "FIELD_COMMAND_NAME = \"f\"", "var_name": "FIELD_COMMAND_NAME"}, {"original_string": "public final static String FIELD_GET_SUB_COMMAND_NAME = \"g\";", "modifier": "public final static", "type": "String", "declarator": "FIELD_GET_SUB_COMMAND_NAME = \"g\"", "var_name": "FIELD_GET_SUB_COMMAND_NAME"}, {"original_string": "public final static String FIELD_SET_SUB_COMMAND_NAME = \"s\";", "modifier": "public final static", "type": "String", "declarator": "FIELD_SET_SUB_COMMAND_NAME = \"s\"", "var_name": "FIELD_SET_SUB_COMMAND_NAME"}, {"original_string": "private ReflectionEngine reflectionEngine;", "modifier": "private", "type": "ReflectionEngine", "declarator": "reflectionEngine", "var_name": "reflectionEngine"}], "methods": [{"identifier": "FieldCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " FieldCommand()", "full_signature": "public  FieldCommand()", "class_method_signature": "FieldCommand.FieldCommand()", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "FieldCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String getField(BufferedReader reader)", "full_signature": "private String getField(BufferedReader reader)", "class_method_signature": "FieldCommand.getField(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Gateway gateway, Py4JServerConnection connection)", "modifiers": "@Override public", "return": "void", "signature": "void init(Gateway gateway, Py4JServerConnection connection)", "full_signature": "@Override public void init(Gateway gateway, Py4JServerConnection connection)", "class_method_signature": "FieldCommand.init(Gateway gateway, Py4JServerConnection connection)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String setField(BufferedReader reader)", "full_signature": "private String setField(BufferedReader reader)", "class_method_signature": "FieldCommand.setField(BufferedReader reader)", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/commands/FieldCommand.java"}, "focal_method": {"identifier": "setField", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "body": "private String setField(BufferedReader reader) throws IOException {\n\t\tString targetObjectId = reader.readLine();\n\t\tString fieldName = reader.readLine();\n\t\tString value = reader.readLine();\n\n\t\treader.readLine(); // read EndOfCommand;\n\n\t\tObject valueObject = Protocol.getObject(value, this.gateway);\n\t\tObject object = gateway.getObject(targetObjectId);\n\t\tField field = reflectionEngine.getField(object, fieldName);\n\t\tlogger.finer(\"Setting field \" + fieldName);\n\t\tString returnCommand = null;\n\t\tif (field == null) {\n\t\t\treturnCommand = Protocol.getNoSuchFieldOutputCommand();\n\t\t} else {\n\t\t\treflectionEngine.setFieldValue(object, field, valueObject);\n\t\t\treturnCommand = Protocol.getOutputVoidCommand();\n\t\t}\n\t\treturn returnCommand;\n\t}", "signature": "String setField(BufferedReader reader)", "full_signature": "private String setField(BufferedReader reader)", "class_method_signature": "FieldCommand.setField(BufferedReader reader)", "testcase": false, "constructor": false, "invocations": ["readLine", "readLine", "readLine", "readLine", "getObject", "getObject", "getField", "finer", "getNoSuchFieldOutputCommand", "setFieldValue", "getOutputVoidCommand"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}