{"test_class": {"identifier": "StringEscaperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/vmutils/src/test/java/org/arakhne/afc/vmutil/StringEscaperTest.java"}, "test_case": {"identifier": "escape_01", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void escape_01() {\n\t\tStringEscaper escaper = new StringEscaper();\n\t\tassertEquals(\"abc\", escaper.escape(\"abc\")); //$NON-NLS-1$ //$NON-NLS-2$\n\t}", "signature": "void escape_01()", "full_signature": "@Test public void escape_01()", "class_method_signature": "StringEscaperTest.escape_01()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "escape"]}, "focal_class": {"identifier": "StringEscaper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String[][] JAVA_SPECIAL_CHARS = {\n\t\t{\"\\b\", \"\\\\b\"}, //$NON-NLS-1$//$NON-NLS-2$\n\t\t{\"\\n\", \"\\\\n\"}, //$NON-NLS-1$//$NON-NLS-2$\n\t\t{\"\\t\", \"\\\\t\"}, //$NON-NLS-1$//$NON-NLS-2$\n\t\t{\"\\f\", \"\\\\f\"}, //$NON-NLS-1$//$NON-NLS-2$\n\t\t{\"\\r\", \"\\\\r\"}, //$NON-NLS-1$//$NON-NLS-2$\n\t};", "modifier": "public static final", "type": "String[][]", "declarator": "JAVA_SPECIAL_CHARS = {\n\t\t{\"\\b\", \"\\\\b\"}, //$NON-NLS-1$//$NON-NLS-2$\n\t\t{\"\\n\", \"\\\\n\"}, //$NON-NLS-1$//$NON-NLS-2$\n\t\t{\"\\t\", \"\\\\t\"}, //$NON-NLS-1$//$NON-NLS-2$\n\t\t{\"\\f\", \"\\\\f\"}, //$NON-NLS-1$//$NON-NLS-2$\n\t\t{\"\\r\", \"\\\\r\"}, //$NON-NLS-1$//$NON-NLS-2$\n\t}", "var_name": "JAVA_SPECIAL_CHARS"}, {"original_string": "public static final String JAVA_ESCAPE_CHAR = \"\\\\\";", "modifier": "public static final", "type": "String", "declarator": "JAVA_ESCAPE_CHAR = \"\\\\\"", "var_name": "JAVA_ESCAPE_CHAR"}, {"original_string": "public static final String JAVA_STRING_CHAR = \"\\\"\";", "modifier": "public static final", "type": "String", "declarator": "JAVA_STRING_CHAR = \"\\\"\"", "var_name": "JAVA_STRING_CHAR"}, {"original_string": "public static final String JSON_SPECIAL_ESCAPED_CHAR = \"/\";", "modifier": "public static final", "type": "String", "declarator": "JSON_SPECIAL_ESCAPED_CHAR = \"/\"", "var_name": "JSON_SPECIAL_ESCAPED_CHAR"}, {"original_string": "public static final int JAVA_MIN_CHAR = 32;", "modifier": "public static final", "type": "int", "declarator": "JAVA_MIN_CHAR = 32", "var_name": "JAVA_MIN_CHAR"}, {"original_string": "public static final int JAVA_MAX_CHAR = 0x7f;", "modifier": "public static final", "type": "int", "declarator": "JAVA_MAX_CHAR = 0x7f", "var_name": "JAVA_MAX_CHAR"}, {"original_string": "private final Set<String> escapeCharacters = new TreeSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "escapeCharacters = new TreeSet<>()", "var_name": "escapeCharacters"}, {"original_string": "private final String toEscapeCharacter;", "modifier": "private final", "type": "String", "declarator": "toEscapeCharacter", "var_name": "toEscapeCharacter"}, {"original_string": "private final Map<String, String> specialChars = new TreeMap<>();", "modifier": "private final", "type": "Map<String, String>", "declarator": "specialChars = new TreeMap<>()", "var_name": "specialChars"}, {"original_string": "private int minValidChar;", "modifier": "private", "type": "int", "declarator": "minValidChar", "var_name": "minValidChar"}, {"original_string": "private int maxValidChar;", "modifier": "private", "type": "int", "declarator": "maxValidChar", "var_name": "maxValidChar"}], "methods": [{"identifier": "StringEscaper", "parameters": "()", "modifiers": "public", "return": "", "signature": " StringEscaper()", "full_signature": "public  StringEscaper()", "class_method_signature": "StringEscaper.StringEscaper()", "testcase": false, "constructor": true}, {"identifier": "StringEscaper", "parameters": "(CharSequence toEscapeCharacter, CharSequence... escapeCharacters)", "modifiers": "public", "return": "", "signature": " StringEscaper(CharSequence toEscapeCharacter, CharSequence... escapeCharacters)", "full_signature": "public  StringEscaper(CharSequence toEscapeCharacter, CharSequence... escapeCharacters)", "class_method_signature": "StringEscaper.StringEscaper(CharSequence toEscapeCharacter, CharSequence... escapeCharacters)", "testcase": false, "constructor": true}, {"identifier": "setSpecialChars", "parameters": "(String[][] chars)", "modifiers": "public", "return": "void", "signature": "void setSpecialChars(String[][] chars)", "full_signature": "public void setSpecialChars(String[][] chars)", "class_method_signature": "StringEscaper.setSpecialChars(String[][] chars)", "testcase": false, "constructor": false}, {"identifier": "setValidCharRange", "parameters": "(int minValidChar, int maxValidChar)", "modifiers": "public", "return": "void", "signature": "void setValidCharRange(int minValidChar, int maxValidChar)", "full_signature": "public void setValidCharRange(int minValidChar, int maxValidChar)", "class_method_signature": "StringEscaper.setValidCharRange(int minValidChar, int maxValidChar)", "testcase": false, "constructor": false}, {"identifier": "escape", "parameters": "(CharSequence text)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") public", "return": "String", "signature": "String escape(CharSequence text)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") public String escape(CharSequence text)", "class_method_signature": "StringEscaper.escape(CharSequence text)", "testcase": false, "constructor": false}, {"identifier": "formatHex", "parameters": "(int amount, int digits)", "modifiers": "@Pure public static", "return": "String", "signature": "String formatHex(int amount, int digits)", "full_signature": "@Pure public static String formatHex(int amount, int digits)", "class_method_signature": "StringEscaper.formatHex(int amount, int digits)", "testcase": false, "constructor": false}], "file": "core/vmutils/src/main/java/org/arakhne/afc/vmutil/StringEscaper.java"}, "focal_method": {"identifier": "escape", "parameters": "(CharSequence text)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") public", "return": "String", "body": "@SuppressWarnings(\"checkstyle:magicnumber\")\n\tpublic String escape(CharSequence text) {\n\t\tfinal StringBuilder result = new StringBuilder();\n\n\t\tfor (int i = 0; i < text.length(); ++i) {\n\t\t\tfinal char c = text.charAt(i);\n\t\t\tfinal String cs = Character.toString(c);\n\t\t\tif (this.escapeCharacters.contains(cs)) {\n\t\t\t\t// Escape protected elements\n\t\t\t\tresult.append(this.toEscapeCharacter);\n\t\t\t\tresult.append(cs);\n\t\t\t} else {\n\t\t\t\t// Escape special characters\n\t\t\t\tfinal String special = this.specialChars.get(cs);\n\t\t\t\tif (special != null) {\n\t\t\t\t\tresult.append(special);\n\t\t\t\t} else if (c < this.minValidChar || c > this.maxValidChar) {\n\t\t\t\t\tif (this.maxValidChar > 0) {\n\t\t\t\t\t\t// Escape invalid characters.\n\t\t\t\t\t\tresult.append(\"\\\\u\"); //$NON-NLS-1$\n\t\t\t\t\t\tresult.append(formatHex(c, 4));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult.append(cs);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result.toString();\n\t}", "signature": "String escape(CharSequence text)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") public String escape(CharSequence text)", "class_method_signature": "StringEscaper.escape(CharSequence text)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "toString", "contains", "append", "append", "get", "append", "append", "append", "formatHex", "append", "toString"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}