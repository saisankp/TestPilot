{"test_class": {"identifier": "PolarizabilityTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "tool/charges/src/test/java/org/openscience/cdk/charges/PolarizabilityTest.java"}, "test_case": {"identifier": "testCalculateBondPolarizability_IAtomContainer_IBond", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalculateBondPolarizability_IAtomContainer_IBond() throws Exception {\n        Polarizability pol = new Polarizability();\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"NCCN(C)(C)\");\n        double result = pol.calculateBondPolarizability((IAtomContainer) mol, mol.getBond(0));\n        Assert.assertFalse(Double.isNaN(result));\n    }", "signature": "void testCalculateBondPolarizability_IAtomContainer_IBond()", "full_signature": "@Test public void testCalculateBondPolarizability_IAtomContainer_IBond()", "class_method_signature": "PolarizabilityTest.testCalculateBondPolarizability_IAtomContainer_IBond()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "calculateBondPolarizability", "getBond", "assertFalse", "isNaN"]}, "focal_class": {"identifier": "Polarizability", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(Polarizability.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(Polarizability.class)", "var_name": "logger"}], "methods": [{"identifier": "Polarizability", "parameters": "()", "modifiers": "public", "return": "", "signature": " Polarizability()", "full_signature": "public  Polarizability()", "class_method_signature": "Polarizability.Polarizability()", "testcase": false, "constructor": true}, {"identifier": "addExplicitHydrogens", "parameters": "(IAtomContainer container)", "modifiers": "private", "return": "void", "signature": "void addExplicitHydrogens(IAtomContainer container)", "full_signature": "private void addExplicitHydrogens(IAtomContainer container)", "class_method_signature": "Polarizability.addExplicitHydrogens(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getPolarizabilitiyFactorForAtom", "parameters": "(IAtomContainer atomContainer, IAtom atom)", "modifiers": "public", "return": "double", "signature": "double getPolarizabilitiyFactorForAtom(IAtomContainer atomContainer, IAtom atom)", "full_signature": "public double getPolarizabilitiyFactorForAtom(IAtomContainer atomContainer, IAtom atom)", "class_method_signature": "Polarizability.getPolarizabilitiyFactorForAtom(IAtomContainer atomContainer, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "calculateKJMeanMolecularPolarizability", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public", "return": "double", "signature": "double calculateKJMeanMolecularPolarizability(IAtomContainer atomContainer)", "full_signature": "public double calculateKJMeanMolecularPolarizability(IAtomContainer atomContainer)", "class_method_signature": "Polarizability.calculateKJMeanMolecularPolarizability(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "calculateGHEffectiveAtomPolarizability", "parameters": "(IAtomContainer atomContainer, IAtom atom,\n            int influenceSphereCutOff, boolean addExplicitH)", "modifiers": "public", "return": "double", "signature": "double calculateGHEffectiveAtomPolarizability(IAtomContainer atomContainer, IAtom atom,\n            int influenceSphereCutOff, boolean addExplicitH)", "full_signature": "public double calculateGHEffectiveAtomPolarizability(IAtomContainer atomContainer, IAtom atom,\n            int influenceSphereCutOff, boolean addExplicitH)", "class_method_signature": "Polarizability.calculateGHEffectiveAtomPolarizability(IAtomContainer atomContainer, IAtom atom,\n            int influenceSphereCutOff, boolean addExplicitH)", "testcase": false, "constructor": false}, {"identifier": "calculateGHEffectiveAtomPolarizability", "parameters": "(IAtomContainer atomContainer, IAtom atom,\n            boolean addExplicitH, int[][] distanceMatrix)", "modifiers": "public", "return": "double", "signature": "double calculateGHEffectiveAtomPolarizability(IAtomContainer atomContainer, IAtom atom,\n            boolean addExplicitH, int[][] distanceMatrix)", "full_signature": "public double calculateGHEffectiveAtomPolarizability(IAtomContainer atomContainer, IAtom atom,\n            boolean addExplicitH, int[][] distanceMatrix)", "class_method_signature": "Polarizability.calculateGHEffectiveAtomPolarizability(IAtomContainer atomContainer, IAtom atom,\n            boolean addExplicitH, int[][] distanceMatrix)", "testcase": false, "constructor": false}, {"identifier": "calculateBondPolarizability", "parameters": "(IAtomContainer atomContainer, IBond bond)", "modifiers": "public", "return": "double", "signature": "double calculateBondPolarizability(IAtomContainer atomContainer, IBond bond)", "full_signature": "public double calculateBondPolarizability(IAtomContainer atomContainer, IBond bond)", "class_method_signature": "Polarizability.calculateBondPolarizability(IAtomContainer atomContainer, IBond bond)", "testcase": false, "constructor": false}, {"identifier": "getKJPolarizabilityFactor", "parameters": "(IAtomContainer atomContainer, IAtom atom)", "modifiers": "private", "return": "double", "signature": "double getKJPolarizabilityFactor(IAtomContainer atomContainer, IAtom atom)", "full_signature": "private double getKJPolarizabilityFactor(IAtomContainer atomContainer, IAtom atom)", "class_method_signature": "Polarizability.getKJPolarizabilityFactor(IAtomContainer atomContainer, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfHydrogen", "parameters": "(IAtomContainer atomContainer, IAtom atom)", "modifiers": "private", "return": "int", "signature": "int getNumberOfHydrogen(IAtomContainer atomContainer, IAtom atom)", "full_signature": "private int getNumberOfHydrogen(IAtomContainer atomContainer, IAtom atom)", "class_method_signature": "Polarizability.getNumberOfHydrogen(IAtomContainer atomContainer, IAtom atom)", "testcase": false, "constructor": false}], "file": "tool/charges/src/main/java/org/openscience/cdk/charges/Polarizability.java"}, "focal_method": {"identifier": "calculateBondPolarizability", "parameters": "(IAtomContainer atomContainer, IBond bond)", "modifiers": "public", "return": "double", "body": "public double calculateBondPolarizability(IAtomContainer atomContainer, IBond bond) {\n        double polarizabilitiy = 0;\n        IAtomContainer acH = atomContainer.getBuilder().newInstance(IAtomContainer.class, atomContainer);\n        addExplicitHydrogens(acH);\n        if (bond.getAtomCount() == 2) {\n            polarizabilitiy += getKJPolarizabilityFactor(acH, bond.getBegin());\n            polarizabilitiy += getKJPolarizabilityFactor(acH, bond.getEnd());\n        }\n        return (polarizabilitiy / 2);\n    }", "signature": "double calculateBondPolarizability(IAtomContainer atomContainer, IBond bond)", "full_signature": "public double calculateBondPolarizability(IAtomContainer atomContainer, IBond bond)", "class_method_signature": "Polarizability.calculateBondPolarizability(IAtomContainer atomContainer, IBond bond)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getBuilder", "addExplicitHydrogens", "getAtomCount", "getKJPolarizabilityFactor", "getBegin", "getKJPolarizabilityFactor", "getEnd"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}