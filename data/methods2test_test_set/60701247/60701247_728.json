{"test_class": {"identifier": "LegacyCpuUsageDataSeriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Range ANY_RANGE = new Range(0, 100);", "modifier": "private static final", "type": "Range", "declarator": "ANY_RANGE = new Range(0, 100)", "var_name": "ANY_RANGE"}, {"original_string": "private final FakeCpuService myService = new FakeCpuService();", "modifier": "private final", "type": "FakeCpuService", "declarator": "myService = new FakeCpuService()", "var_name": "myService"}, {"original_string": "@Rule\n  public FakeGrpcChannel myGrpcChannel = new FakeGrpcChannel(\"CpuUsageDataSeriesTest\", myService);", "modifier": "@Rule\n  public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel = new FakeGrpcChannel(\"CpuUsageDataSeriesTest\", myService)", "var_name": "myGrpcChannel"}, {"original_string": "private LegacyCpuUsageDataSeries mySeries;", "modifier": "private", "type": "LegacyCpuUsageDataSeries", "declarator": "mySeries", "var_name": "mySeries"}], "file": "profilers/testSrc/com/android/tools/profilers/cpu/LegacyCpuUsageDataSeriesTest.java"}, "test_case": {"identifier": "emptyData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void emptyData() {\n    mySeries = new LegacyCpuUsageDataSeries(\n      new ProfilerClient(myGrpcChannel.getName()).getCpuClient(), ProfilersTestData.SESSION_DATA, false);\n    assertNotNull(mySeries);\n    assertFalse(mySeries.getDataForRange(ANY_RANGE).isEmpty());\n    myService.setEmptyUsageData(true);\n    assertTrue(mySeries.getDataForRange(ANY_RANGE).isEmpty());\n  }", "signature": "void emptyData()", "full_signature": "@Test public void emptyData()", "class_method_signature": "LegacyCpuUsageDataSeriesTest.emptyData()", "testcase": true, "constructor": false, "invocations": ["getCpuClient", "getName", "assertNotNull", "assertFalse", "isEmpty", "getDataForRange", "setEmptyUsageData", "assertTrue", "isEmpty", "getDataForRange"]}, "focal_class": {"identifier": "LegacyCpuUsageDataSeries", "superclass": "", "interfaces": "implements DataSeries<Long>", "fields": [{"original_string": "@NotNull\n  private CpuServiceGrpc.CpuServiceBlockingStub myClient;", "modifier": "@NotNull\n  private", "type": "CpuServiceGrpc.CpuServiceBlockingStub", "declarator": "myClient", "var_name": "myClient"}, {"original_string": "private final Common.Session mySession;", "modifier": "private final", "type": "Common.Session", "declarator": "mySession", "var_name": "mySession"}, {"original_string": "private final boolean myIsOtherProcess;", "modifier": "private final", "type": "boolean", "declarator": "myIsOtherProcess", "var_name": "myIsOtherProcess"}], "methods": [{"identifier": "LegacyCpuUsageDataSeries", "parameters": "(@NotNull CpuServiceGrpc.CpuServiceBlockingStub client,\n                                  Common.Session session,\n                                  boolean isOtherProcess)", "modifiers": "public", "return": "", "signature": " LegacyCpuUsageDataSeries(@NotNull CpuServiceGrpc.CpuServiceBlockingStub client,\n                                  Common.Session session,\n                                  boolean isOtherProcess)", "full_signature": "public  LegacyCpuUsageDataSeries(@NotNull CpuServiceGrpc.CpuServiceBlockingStub client,\n                                  Common.Session session,\n                                  boolean isOtherProcess)", "class_method_signature": "LegacyCpuUsageDataSeries.LegacyCpuUsageDataSeries(@NotNull CpuServiceGrpc.CpuServiceBlockingStub client,\n                                  Common.Session session,\n                                  boolean isOtherProcess)", "testcase": false, "constructor": true}, {"identifier": "getDataForRange", "parameters": "(@NotNull Range timeCurrentRangeUs)", "modifiers": "@Override public", "return": "List<SeriesData<Long>>", "signature": "List<SeriesData<Long>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "full_signature": "@Override public List<SeriesData<Long>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "class_method_signature": "LegacyCpuUsageDataSeries.getDataForRange(@NotNull Range timeCurrentRangeUs)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/cpu/LegacyCpuUsageDataSeries.java"}, "focal_method": {"identifier": "getDataForRange", "parameters": "(@NotNull Range timeCurrentRangeUs)", "modifiers": "@Override public", "return": "List<SeriesData<Long>>", "body": "@Override\n  public List<SeriesData<Long>> getDataForRange(@NotNull Range timeCurrentRangeUs) {\n    // Get an extra padding on each side, to have a smooth rendering at the edges.\n    // TODO: Change the CPU API to allow specifying this padding in the request as number of samples.\n    long bufferNs = TimeUnit.SECONDS.toNanos(1);\n    CpuDataRequest.Builder dataRequestBuilder = CpuDataRequest.newBuilder()\n      .setSession(mySession)\n      .setStartTimestamp(TimeUnit.MICROSECONDS.toNanos((long)timeCurrentRangeUs.getMin()) - bufferNs)\n      .setEndTimestamp(TimeUnit.MICROSECONDS.toNanos((long)timeCurrentRangeUs.getMax()) + bufferNs);\n    CpuDataResponse response = myClient.getData(dataRequestBuilder.build());\n    return IntStream.range(0, response.getDataList().size() - 1)\n      // Calculate CPU usage percentage from two adjacent CPU usage data.\n      .mapToObj(index -> CpuUsage.getCpuUsageData(response.getData(index), response.getData(index + 1), myIsOtherProcess))\n      .collect(Collectors.toList());\n  }", "signature": "List<SeriesData<Long>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "full_signature": "@Override public List<SeriesData<Long>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "class_method_signature": "LegacyCpuUsageDataSeries.getDataForRange(@NotNull Range timeCurrentRangeUs)", "testcase": false, "constructor": false, "invocations": ["toNanos", "setEndTimestamp", "setStartTimestamp", "setSession", "newBuilder", "toNanos", "getMin", "toNanos", "getMax", "getData", "build", "collect", "mapToObj", "range", "size", "getDataList", "getCpuUsageData", "getData", "getData", "toList"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}