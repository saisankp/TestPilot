{"test_class": {"identifier": "EscapeUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Object[] PATH_SPLIT_TEST_DATA = new Object[] {\n            PATH_ESCAPE + PATH_ESCAPE + PATH_ESCAPE + PATH_ESCAPE,asList(PATH_ESCAPE + PATH_ESCAPE),true,\n            \"hello\" + PATH_ESCAPE + PATH_ESCAPE,asList(\"hello\" + PATH_ESCAPE),true,\n            \"hello/world\", asList(\"hello\", \"world\"),true,\n            \"hello\" + PATH_ESCAPE + \"/world/yeah\",asList(\"hello/world\", \"yeah\"),true,\n            \"hello\" + PATH_ESCAPE + PATH_ESCAPE + \"/world/yeah\",asList(\"hello\" + PATH_ESCAPE,\"world\",\"yeah\"),true,\n            \"hello\" + PATH_ESCAPE + PATH_ESCAPE + PATH_ESCAPE + \"/world/yeah\",asList(\"hello\" + PATH_ESCAPE + \"/world\",\"yeah\"),true,\n            \"hello\" + PATH_ESCAPE + PATH_ESCAPE + PATH_ESCAPE + PATH_ESCAPE + \"world/yeah\",asList(\"hello\" + PATH_ESCAPE + PATH_ESCAPE + \"world\",\"yeah\"),true,\n            \"hello\" + PATH_ESCAPE + \",\" + PATH_ESCAPE + PATH_ESCAPE + \"/wor,ld/yeah\",asList(\"hello,\" + PATH_ESCAPE,\"wor,ld\",\"yeah\"),false /* dont do this test reverse because the unnecessarily escaped backslash wont get recreated */\n    };", "modifier": "", "type": "Object[]", "declarator": "PATH_SPLIT_TEST_DATA = new Object[] {\n            PATH_ESCAPE + PATH_ESCAPE + PATH_ESCAPE + PATH_ESCAPE,asList(PATH_ESCAPE + PATH_ESCAPE),true,\n            \"hello\" + PATH_ESCAPE + PATH_ESCAPE,asList(\"hello\" + PATH_ESCAPE),true,\n            \"hello/world\", asList(\"hello\", \"world\"),true,\n            \"hello\" + PATH_ESCAPE + \"/world/yeah\",asList(\"hello/world\", \"yeah\"),true,\n            \"hello\" + PATH_ESCAPE + PATH_ESCAPE + \"/world/yeah\",asList(\"hello\" + PATH_ESCAPE,\"world\",\"yeah\"),true,\n            \"hello\" + PATH_ESCAPE + PATH_ESCAPE + PATH_ESCAPE + \"/world/yeah\",asList(\"hello\" + PATH_ESCAPE + \"/world\",\"yeah\"),true,\n            \"hello\" + PATH_ESCAPE + PATH_ESCAPE + PATH_ESCAPE + PATH_ESCAPE + \"world/yeah\",asList(\"hello\" + PATH_ESCAPE + PATH_ESCAPE + \"world\",\"yeah\"),true,\n            \"hello\" + PATH_ESCAPE + \",\" + PATH_ESCAPE + PATH_ESCAPE + \"/wor,ld/yeah\",asList(\"hello,\" + PATH_ESCAPE,\"wor,ld\",\"yeah\"),false /* dont do this test reverse because the unnecessarily escaped backslash wont get recreated */\n    }", "var_name": "PATH_SPLIT_TEST_DATA"}, {"original_string": "Object[] COMMA_SPLIT_TEST_DATA = new Object[] {\n            \"type=s,name=world\", asList(\"type=s\", \"name=world\"),\n            \"hello\\\\,world,yeah\",asList(\"hello,world\", \"yeah\"),\n            \"hello\\\\,\\\\/world,yeah\",asList(\"hello,/world\",\"yeah\"),\n    };", "modifier": "", "type": "Object[]", "declarator": "COMMA_SPLIT_TEST_DATA = new Object[] {\n            \"type=s,name=world\", asList(\"type=s\", \"name=world\"),\n            \"hello\\\\,world,yeah\",asList(\"hello,world\", \"yeah\"),\n            \"hello\\\\,\\\\/world,yeah\",asList(\"hello,/world\",\"yeah\"),\n    }", "var_name": "COMMA_SPLIT_TEST_DATA"}], "file": "agent/core/src/test/java/org/jolokia/util/EscapeUtilTest.java"}, "test_case": {"identifier": "escaping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void escaping() {\n        assertEquals(EscapeUtil.escape(\"hello\\\\world,how are you?\",CSV_ESCAPE,\",\"),\"hello\\\\\\\\world\\\\,how are you?\");\n    }", "signature": "void escaping()", "full_signature": "@Test public void escaping()", "class_method_signature": "EscapeUtilTest.escaping()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "escape"]}, "focal_class": {"identifier": "EscapeUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PATH_ESCAPE = \"!\";", "modifier": "public static final", "type": "String", "declarator": "PATH_ESCAPE = \"!\"", "var_name": "PATH_ESCAPE"}, {"original_string": "public static final String CSV_ESCAPE = \"\\\\\\\\\";", "modifier": "public static final", "type": "String", "declarator": "CSV_ESCAPE = \"\\\\\\\\\"", "var_name": "CSV_ESCAPE"}, {"original_string": "static final Map<String,Pattern[]> SPLIT_PATTERNS = new HashMap<String, Pattern[]>();", "modifier": "static final", "type": "Map<String,Pattern[]>", "declarator": "SPLIT_PATTERNS = new HashMap<String, Pattern[]>()", "var_name": "SPLIT_PATTERNS"}, {"original_string": "private static final Pattern ESCAPE_PATTERN = Pattern.compile(PATH_ESCAPE);", "modifier": "private static final", "type": "Pattern", "declarator": "ESCAPE_PATTERN = Pattern.compile(PATH_ESCAPE)", "var_name": "ESCAPE_PATTERN"}, {"original_string": "private static final Pattern SLASH_PATTERN = Pattern.compile(\"/\");", "modifier": "private static final", "type": "Pattern", "declarator": "SLASH_PATTERN = Pattern.compile(\"/\")", "var_name": "SLASH_PATTERN"}], "methods": [{"identifier": "EscapeUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " EscapeUtil()", "full_signature": "private  EscapeUtil()", "class_method_signature": "EscapeUtil.EscapeUtil()", "testcase": false, "constructor": true}, {"identifier": "combineToPath", "parameters": "(List<String> pParts)", "modifiers": "public static", "return": "String", "signature": "String combineToPath(List<String> pParts)", "full_signature": "public static String combineToPath(List<String> pParts)", "class_method_signature": "EscapeUtil.combineToPath(List<String> pParts)", "testcase": false, "constructor": false}, {"identifier": "parsePath", "parameters": "(String pPath)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> parsePath(String pPath)", "full_signature": "public static List<String> parsePath(String pPath)", "class_method_signature": "EscapeUtil.parsePath(String pPath)", "testcase": false, "constructor": false}, {"identifier": "extractElementsFromPath", "parameters": "(String pPath)", "modifiers": "public static", "return": "Stack<String>", "signature": "Stack<String> extractElementsFromPath(String pPath)", "full_signature": "public static Stack<String> extractElementsFromPath(String pPath)", "class_method_signature": "EscapeUtil.extractElementsFromPath(String pPath)", "testcase": false, "constructor": false}, {"identifier": "reversePath", "parameters": "(List<String> pathParts)", "modifiers": "public static", "return": "Stack<String>", "signature": "Stack<String> reversePath(List<String> pathParts)", "full_signature": "public static Stack<String> reversePath(List<String> pathParts)", "class_method_signature": "EscapeUtil.reversePath(List<String> pathParts)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String pArg, String pEscape, String pDelimiter)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> split(String pArg, String pEscape, String pDelimiter)", "full_signature": "public static List<String> split(String pArg, String pEscape, String pDelimiter)", "class_method_signature": "EscapeUtil.split(String pArg, String pEscape, String pDelimiter)", "testcase": false, "constructor": false}, {"identifier": "splitAsArray", "parameters": "(String pArg, String pEscape, String pDelimiter)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitAsArray(String pArg, String pEscape, String pDelimiter)", "full_signature": "public static String[] splitAsArray(String pArg, String pEscape, String pDelimiter)", "class_method_signature": "EscapeUtil.splitAsArray(String pArg, String pEscape, String pDelimiter)", "testcase": false, "constructor": false}, {"identifier": "escape", "parameters": "(String pArg, String pEscape, String pDelimiter)", "modifiers": "public static", "return": "String", "signature": "String escape(String pArg, String pEscape, String pDelimiter)", "full_signature": "public static String escape(String pArg, String pEscape, String pDelimiter)", "class_method_signature": "EscapeUtil.escape(String pArg, String pEscape, String pDelimiter)", "testcase": false, "constructor": false}, {"identifier": "createSplitPatterns", "parameters": "(String pEscape, String pDel)", "modifiers": "private static", "return": "Pattern[]", "signature": "Pattern[] createSplitPatterns(String pEscape, String pDel)", "full_signature": "private static Pattern[] createSplitPatterns(String pEscape, String pDel)", "class_method_signature": "EscapeUtil.createSplitPatterns(String pEscape, String pDel)", "testcase": false, "constructor": false}, {"identifier": "escapePart", "parameters": "(String pPart)", "modifiers": "private static", "return": "String", "signature": "String escapePart(String pPart)", "full_signature": "private static String escapePart(String pPart)", "class_method_signature": "EscapeUtil.escapePart(String pPart)", "testcase": false, "constructor": false}, {"identifier": "replaceWildcardsWithNull", "parameters": "(List<String> pParts)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> replaceWildcardsWithNull(List<String> pParts)", "full_signature": "private static List<String> replaceWildcardsWithNull(List<String> pParts)", "class_method_signature": "EscapeUtil.replaceWildcardsWithNull(List<String> pParts)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/util/EscapeUtil.java"}, "focal_method": {"identifier": "escape", "parameters": "(String pArg, String pEscape, String pDelimiter)", "modifiers": "public static", "return": "String", "body": "public static String escape(String pArg, String pEscape, String pDelimiter) {\n        return pArg.replaceAll(pEscape, pEscape + pEscape).replaceAll(pDelimiter, pEscape + pDelimiter);\n    }", "signature": "String escape(String pArg, String pEscape, String pDelimiter)", "full_signature": "public static String escape(String pArg, String pEscape, String pDelimiter)", "class_method_signature": "EscapeUtil.escape(String pArg, String pEscape, String pDelimiter)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "replaceAll"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}