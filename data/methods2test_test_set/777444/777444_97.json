{"test_class": {"identifier": "JolokiaCipherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "JolokiaCipher cipher;", "modifier": "", "type": "JolokiaCipher", "declarator": "cipher", "var_name": "cipher"}, {"original_string": "String clearText = \"veryOpenText\";", "modifier": "", "type": "String", "declarator": "clearText = \"veryOpenText\"", "var_name": "clearText"}, {"original_string": "String encryptedText = \"ibeHrdCOonkH7d7YnH7sarQLbwOk1ljkkM/z8hUhl4c=\";", "modifier": "", "type": "String", "declarator": "encryptedText = \"ibeHrdCOonkH7d7YnH7sarQLbwOk1ljkkM/z8hUhl4c=\"", "var_name": "encryptedText"}], "file": "agent/core/src/test/java/org/jolokia/util/JolokiaCipherTest.java"}, "test_case": {"identifier": "testSalt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSalt() throws Exception {\n        String enc = cipher.encrypt(clearText);\n        assertNotNull(enc);\n        String enc2 = cipher.encrypt(clearText);\n        assertNotNull(enc2);\n        assertNotEquals(enc,enc2);\n    }", "signature": "void testSalt()", "full_signature": "@Test public void testSalt()", "class_method_signature": "JolokiaCipherTest.testSalt()", "testcase": true, "constructor": false, "invocations": ["encrypt", "assertNotNull", "encrypt", "assertNotNull", "assertNotEquals"]}, "focal_class": {"identifier": "JolokiaCipher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int SALT_SIZE = 8;", "modifier": "private static final", "type": "int", "declarator": "SALT_SIZE = 8", "var_name": "SALT_SIZE"}, {"original_string": "private static final int CHUNK_SIZE = 16;", "modifier": "private static final", "type": "int", "declarator": "CHUNK_SIZE = 16", "var_name": "CHUNK_SIZE"}, {"original_string": "public static final String JOLOKIA_CYPHER_PASSWORD = \"META-INF/jolokia-password\";", "modifier": "public static final", "type": "String", "declarator": "JOLOKIA_CYPHER_PASSWORD = \"META-INF/jolokia-password\"", "var_name": "JOLOKIA_CYPHER_PASSWORD"}, {"original_string": "private MessageDigest digest;", "modifier": "private", "type": "MessageDigest", "declarator": "digest", "var_name": "digest"}, {"original_string": "private Random random;", "modifier": "private", "type": "Random", "declarator": "random", "var_name": "random"}, {"original_string": "private KeyHolder keyHolder;", "modifier": "private", "type": "KeyHolder", "declarator": "keyHolder", "var_name": "keyHolder"}], "methods": [{"identifier": "JolokiaCipher", "parameters": "()", "modifiers": "public", "return": "", "signature": " JolokiaCipher()", "full_signature": "public  JolokiaCipher()", "class_method_signature": "JolokiaCipher.JolokiaCipher()", "testcase": false, "constructor": true}, {"identifier": "JolokiaCipher", "parameters": "(KeyHolder pKeyHolder)", "modifiers": "public", "return": "", "signature": " JolokiaCipher(KeyHolder pKeyHolder)", "full_signature": "public  JolokiaCipher(KeyHolder pKeyHolder)", "class_method_signature": "JolokiaCipher.JolokiaCipher(KeyHolder pKeyHolder)", "testcase": false, "constructor": true}, {"identifier": "encrypt", "parameters": "(final String pText)", "modifiers": "public", "return": "String", "signature": "String encrypt(final String pText)", "full_signature": "public String encrypt(final String pText)", "class_method_signature": "JolokiaCipher.encrypt(final String pText)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(final String pEncryptedText)", "modifiers": "public", "return": "String", "signature": "String decrypt(final String pEncryptedText)", "full_signature": "public String decrypt(final String pEncryptedText)", "class_method_signature": "JolokiaCipher.decrypt(final String pEncryptedText)", "testcase": false, "constructor": false}, {"identifier": "getSalt", "parameters": "(final int sz)", "modifiers": "private", "return": "byte[]", "signature": "byte[] getSalt(final int sz)", "full_signature": "private byte[] getSalt(final int sz)", "class_method_signature": "JolokiaCipher.getSalt(final int sz)", "testcase": false, "constructor": false}, {"identifier": "createCipher", "parameters": "(byte[] salt, final int mode)", "modifiers": "private", "return": "Cipher", "signature": "Cipher createCipher(byte[] salt, final int mode)", "full_signature": "private Cipher createCipher(byte[] salt, final int mode)", "class_method_signature": "JolokiaCipher.createCipher(byte[] salt, final int mode)", "testcase": false, "constructor": false}, {"identifier": "getKeyAsBytes", "parameters": "()", "modifiers": "private", "return": "byte[]", "signature": "byte[] getKeyAsBytes()", "full_signature": "private byte[] getKeyAsBytes()", "class_method_signature": "JolokiaCipher.getKeyAsBytes()", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/util/JolokiaCipher.java"}, "focal_method": {"identifier": "encrypt", "parameters": "(final String pText)", "modifiers": "public", "return": "String", "body": "public String encrypt(final String pText) throws GeneralSecurityException {\n        byte[] clearBytes = pText.getBytes(Charset.forName(\"UTF-8\"));\n        byte[] salt = getSalt(SALT_SIZE);\n\n        Cipher cipher = createCipher(salt, Cipher.ENCRYPT_MODE);\n        byte[] encryptedBytes = cipher.doFinal(clearBytes);\n        int len = encryptedBytes.length;\n\n        byte padLen = (byte) (CHUNK_SIZE - (SALT_SIZE + len + 1) % CHUNK_SIZE);\n        int totalLen = SALT_SIZE + len + padLen + 1;\n\n        byte[] allEncryptedBytes = getSalt(totalLen);\n        System.arraycopy(salt, 0, allEncryptedBytes, 0, SALT_SIZE);\n        allEncryptedBytes[SALT_SIZE] = padLen;\n        System.arraycopy(encryptedBytes, 0, allEncryptedBytes, SALT_SIZE + 1, len);\n\n        return Base64Util.encode(allEncryptedBytes);\n    }", "signature": "String encrypt(final String pText)", "full_signature": "public String encrypt(final String pText)", "class_method_signature": "JolokiaCipher.encrypt(final String pText)", "testcase": false, "constructor": false, "invocations": ["getBytes", "forName", "getSalt", "createCipher", "doFinal", "getSalt", "arraycopy", "arraycopy", "encode"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}