{"test_class": {"identifier": "FlowableFlatMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/flowable/FlowableFlatMapTest.java"}, "test_case": {"identifier": "castCrashUnsubscribes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void castCrashUnsubscribes() {\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        TestSubscriber<Integer> ts = TestSubscriber.create();\n\n        pp.flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer t) {\n                throw new TestException();\n            }\n        }, new BiFunction<Integer, Integer, Integer>() {\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(ts);\n\n        Assert.assertTrue(\"Not subscribed?\", pp.hasSubscribers());\n\n        pp.onNext(1);\n\n        Assert.assertFalse(\"Subscribed?\", pp.hasSubscribers());\n\n        ts.assertError(TestException.class);\n    }", "signature": "void castCrashUnsubscribes()", "full_signature": "@Test public void castCrashUnsubscribes()", "class_method_signature": "FlowableFlatMapTest.castCrashUnsubscribes()", "testcase": true, "constructor": false, "invocations": ["create", "create", "subscribe", "flatMap", "assertTrue", "hasSubscribers", "onNext", "assertFalse", "hasSubscribers", "assertError"]}, "focal_class": {"identifier": "FlowableFlatMap", "superclass": "extends AbstractFlowableWithUpstream<T, U>", "interfaces": "", "fields": [{"original_string": "final Function<? super T, ? extends Publisher<? extends U>> mapper;", "modifier": "final", "type": "Function<? super T, ? extends Publisher<? extends U>>", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "final boolean delayErrors;", "modifier": "final", "type": "boolean", "declarator": "delayErrors", "var_name": "delayErrors"}, {"original_string": "final int maxConcurrency;", "modifier": "final", "type": "int", "declarator": "maxConcurrency", "var_name": "maxConcurrency"}, {"original_string": "final int bufferSize;", "modifier": "final", "type": "int", "declarator": "bufferSize", "var_name": "bufferSize"}], "methods": [{"identifier": "FlowableFlatMap", "parameters": "(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "modifiers": "public", "return": "", "signature": " FlowableFlatMap(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "full_signature": "public  FlowableFlatMap(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "class_method_signature": "FlowableFlatMap.FlowableFlatMap(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(Subscriber<? super U> s)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Subscriber<? super U> s)", "full_signature": "@Override protected void subscribeActual(Subscriber<? super U> s)", "class_method_signature": "FlowableFlatMap.subscribeActual(Subscriber<? super U> s)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "modifiers": "public static", "return": "FlowableSubscriber<T>", "signature": "FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "full_signature": "public static FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "class_method_signature": "FlowableFlatMap.subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMap.java"}, "focal_method": {"identifier": "subscribe", "parameters": "(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "modifiers": "public static", "return": "FlowableSubscriber<T>", "body": "public static <T, U> FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize) {\n        return new MergeSubscriber<T, U>(s, mapper, delayErrors, maxConcurrency, bufferSize);\n    }", "signature": "FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "full_signature": "public static FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "class_method_signature": "FlowableFlatMap.subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}