{"test_class": {"identifier": "ColumnTest", "superclass": "extends AbstractColumnTest", "interfaces": "", "fields": [], "file": "das-client/src/test/java/com/ppdai/das/client/sqlbuilder/ColumnTest.java"}, "test_case": {"identifier": "testReferenceName", "parameters": "( )", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReferenceName( ) {\n        Table table = new Table(\"t\");\n        Column c = new Column(table, \"col\", JDBCType.VARBINARY);\n        c.as(\"c\");\n        \n        assertEquals(\"t.col\", c.getReference(new DefaultBuilderContext()));\n    }", "signature": "void testReferenceName( )", "full_signature": "@Test public void testReferenceName( )", "class_method_signature": "ColumnTest.testReferenceName( )", "testcase": true, "constructor": false, "invocations": ["as", "assertEquals", "getReference"]}, "focal_class": {"identifier": "Column", "superclass": "extends AbstractColumn", "interfaces": "implements Segment", "fields": [{"original_string": "private final Table table;", "modifier": "private final", "type": "Table", "declarator": "table", "var_name": "table"}, {"original_string": "private Optional<String> alias = Optional.empty();", "modifier": "private", "type": "Optional<String>", "declarator": "alias = Optional.empty()", "var_name": "alias"}], "methods": [{"identifier": "Column", "parameters": "(Table table, String name, JDBCType type)", "modifiers": "public", "return": "", "signature": " Column(Table table, String name, JDBCType type)", "full_signature": "public  Column(Table table, String name, JDBCType type)", "class_method_signature": "Column.Column(Table table, String name, JDBCType type)", "testcase": false, "constructor": true}, {"identifier": "as", "parameters": "(String alias)", "modifiers": "public", "return": "Column", "signature": "Column as(String alias)", "full_signature": "public Column as(String alias)", "class_method_signature": "Column.as(String alias)", "testcase": false, "constructor": false}, {"identifier": "getAlias", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getAlias()", "full_signature": "@Override public Optional<String> getAlias()", "class_method_signature": "Column.getAlias()", "testcase": false, "constructor": false}, {"identifier": "getTableName", "parameters": "(BuilderContext helper)", "modifiers": "@Override public", "return": "String", "signature": "String getTableName(BuilderContext helper)", "full_signature": "@Override public String getTableName(BuilderContext helper)", "class_method_signature": "Column.getTableName(BuilderContext helper)", "testcase": false, "constructor": false}, {"identifier": "getTable", "parameters": "()", "modifiers": "public", "return": "Table", "signature": "Table getTable()", "full_signature": "public Table getTable()", "class_method_signature": "Column.getTable()", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/client/sqlbuilder/Column.java"}, "focal_method": {"identifier": "as", "parameters": "(String alias)", "modifiers": "public", "return": "Column", "body": "public Column as(String alias) {\n        if(this.alias.isPresent()) {\n            throw new IllegalStateException(\"Alias can only be set once for column\" + getColumnName());\n        }\n\n        this.alias = Optional.of(alias);\n        return this;\n    }", "signature": "Column as(String alias)", "full_signature": "public Column as(String alias)", "class_method_signature": "Column.as(String alias)", "testcase": false, "constructor": false, "invocations": ["isPresent", "getColumnName", "of"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}