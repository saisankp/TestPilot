{"test_class": {"identifier": "PersistentManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BloomFilterFactory factory;", "modifier": "private", "type": "BloomFilterFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private Path tempDirPath;", "modifier": "private", "type": "Path", "declarator": "tempDirPath", "var_name": "tempDirPath"}, {"original_string": "private BloomFilterManager filterManager;", "modifier": "private", "type": "BloomFilterManager", "declarator": "filterManager", "var_name": "filterManager"}, {"original_string": "private PersistentManager<BloomFilter> manager;", "modifier": "private", "type": "PersistentManager<BloomFilter>", "declarator": "manager", "var_name": "manager"}], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/PersistentManagerTest.java"}, "test_case": {"identifier": "freezeAllFilters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void freezeAllFilters() throws IOException {\n        final List<FilterRecord<BloomFilter>> records = generateFilterRecords(10);\n        when(filterManager.iterator()).thenReturn(records.iterator());\n\n        manager.freezeAllFilters(filterManager);\n\n        try (FilterRecordInputStream<GuavaBloomFilter> stream = new FilterRecordInputStream<>(\n                manager.persistentFilePath(),\n                new GuavaBloomFilterFactory())) {\n            for (FilterRecord<BloomFilter> expectRecord : records) {\n                assertThat(stream.nextFilterRecord()).isEqualTo(expectRecord);\n            }\n\n            assertThat(stream.nextFilterRecord()).isNull();\n        }\n    }", "signature": "void freezeAllFilters()", "full_signature": "@Test public void freezeAllFilters()", "class_method_signature": "PersistentManagerTest.freezeAllFilters()", "testcase": true, "constructor": false, "invocations": ["generateFilterRecords", "thenReturn", "when", "iterator", "iterator", "freezeAllFilters", "persistentFilePath", "isEqualTo", "assertThat", "nextFilterRecord", "isNull", "assertThat", "nextFilterRecord"]}, "focal_class": {"identifier": "PersistentManager", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PersistentManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PersistentManager.class)", "var_name": "logger"}, {"original_string": "private static final String LOCK_FILE_NAME = \"lock\";", "modifier": "private static final", "type": "String", "declarator": "LOCK_FILE_NAME = \"lock\"", "var_name": "LOCK_FILE_NAME"}, {"original_string": "private static final String TEMPORARY_PERSISTENT_FILE_SUFFIX = \".tmp\";", "modifier": "private static final", "type": "String", "declarator": "TEMPORARY_PERSISTENT_FILE_SUFFIX = \".tmp\"", "var_name": "TEMPORARY_PERSISTENT_FILE_SUFFIX"}, {"original_string": "private static final String PERSISTENT_FILE_SUFFIX = \".db\";", "modifier": "private static final", "type": "String", "declarator": "PERSISTENT_FILE_SUFFIX = \".db\"", "var_name": "PERSISTENT_FILE_SUFFIX"}, {"original_string": "private static final String PERSISTENT_FILE_NAME = \"snapshot\";", "modifier": "private static final", "type": "String", "declarator": "PERSISTENT_FILE_NAME = \"snapshot\"", "var_name": "PERSISTENT_FILE_NAME"}, {"original_string": "private final Path basePath;", "modifier": "private final", "type": "Path", "declarator": "basePath", "var_name": "basePath"}, {"original_string": "private final FileLock fileLock;", "modifier": "private final", "type": "FileLock", "declarator": "fileLock", "var_name": "fileLock"}], "methods": [{"identifier": "PersistentManager", "parameters": "(Path persistentPath)", "modifiers": "", "return": "", "signature": " PersistentManager(Path persistentPath)", "full_signature": "  PersistentManager(Path persistentPath)", "class_method_signature": "PersistentManager.PersistentManager(Path persistentPath)", "testcase": false, "constructor": true}, {"identifier": "freezeAllFilters", "parameters": "(Iterable<FilterRecord<F>> records)", "modifiers": "synchronized", "return": "void", "signature": "void freezeAllFilters(Iterable<FilterRecord<F>> records)", "full_signature": "synchronized void freezeAllFilters(Iterable<FilterRecord<F>> records)", "class_method_signature": "PersistentManager.freezeAllFilters(Iterable<FilterRecord<F>> records)", "testcase": false, "constructor": false}, {"identifier": "recoverFilters", "parameters": "(BloomFilterFactory<? extends F, ?> factory,\n                                                                boolean allowRecoverFromCorruptedFile)", "modifiers": "synchronized", "return": "List<FilterRecord<? extends F>>", "signature": "List<FilterRecord<? extends F>> recoverFilters(BloomFilterFactory<? extends F, ?> factory,\n                                                                boolean allowRecoverFromCorruptedFile)", "full_signature": "synchronized List<FilterRecord<? extends F>> recoverFilters(BloomFilterFactory<? extends F, ?> factory,\n                                                                boolean allowRecoverFromCorruptedFile)", "class_method_signature": "PersistentManager.recoverFilters(BloomFilterFactory<? extends F, ?> factory,\n                                                                boolean allowRecoverFromCorruptedFile)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void close()", "full_signature": "@Override public synchronized void close()", "class_method_signature": "PersistentManager.close()", "testcase": false, "constructor": false}, {"identifier": "temporaryPersistentFilePath", "parameters": "()", "modifiers": "", "return": "Path", "signature": "Path temporaryPersistentFilePath()", "full_signature": " Path temporaryPersistentFilePath()", "class_method_signature": "PersistentManager.temporaryPersistentFilePath()", "testcase": false, "constructor": false}, {"identifier": "persistentFilePath", "parameters": "()", "modifiers": "", "return": "Path", "signature": "Path persistentFilePath()", "full_signature": " Path persistentFilePath()", "class_method_signature": "PersistentManager.persistentFilePath()", "testcase": false, "constructor": false}, {"identifier": "recoverFiltersFromFile", "parameters": "(BloomFilterFactory<? extends F, ?> factory,\n                                                                   boolean allowRecoverFromCorruptedFile,\n                                                                   Path filePath)", "modifiers": "private", "return": "List<FilterRecord<? extends F>>", "signature": "List<FilterRecord<? extends F>> recoverFiltersFromFile(BloomFilterFactory<? extends F, ?> factory,\n                                                                   boolean allowRecoverFromCorruptedFile,\n                                                                   Path filePath)", "full_signature": "private List<FilterRecord<? extends F>> recoverFiltersFromFile(BloomFilterFactory<? extends F, ?> factory,\n                                                                   boolean allowRecoverFromCorruptedFile,\n                                                                   Path filePath)", "class_method_signature": "PersistentManager.recoverFiltersFromFile(BloomFilterFactory<? extends F, ?> factory,\n                                                                   boolean allowRecoverFromCorruptedFile,\n                                                                   Path filePath)", "testcase": false, "constructor": false}, {"identifier": "readFiltersFromFile", "parameters": "(FilterRecordInputStream<? extends F> filterStream)", "modifiers": "private", "return": "Iterable<FilterRecord<? extends F>>", "signature": "Iterable<FilterRecord<? extends F>> readFiltersFromFile(FilterRecordInputStream<? extends F> filterStream)", "full_signature": "private Iterable<FilterRecord<? extends F>> readFiltersFromFile(FilterRecordInputStream<? extends F> filterStream)", "class_method_signature": "PersistentManager.readFiltersFromFile(FilterRecordInputStream<? extends F> filterStream)", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/PersistentManager.java"}, "focal_method": {"identifier": "freezeAllFilters", "parameters": "(Iterable<FilterRecord<F>> records)", "modifiers": "synchronized", "return": "void", "body": "synchronized void freezeAllFilters(Iterable<FilterRecord<F>> records) throws IOException {\n        final Path tempPath = temporaryPersistentFilePath();\n        int counter = 0;\n        try (FileChannel channel = FileChannel.open(tempPath, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.READ)) {\n            for (FilterRecord<F> record : records) {\n                record.writeFullyTo(channel);\n                counter++;\n            }\n\n            channel.force(true);\n        }\n\n        FilterServiceFileUtils.atomicMoveWithFallback(tempPath, persistentFilePath());\n        logger.debug(\"Persistent \" + counter + \" filters.\");\n    }", "signature": "void freezeAllFilters(Iterable<FilterRecord<F>> records)", "full_signature": "synchronized void freezeAllFilters(Iterable<FilterRecord<F>> records)", "class_method_signature": "PersistentManager.freezeAllFilters(Iterable<FilterRecord<F>> records)", "testcase": false, "constructor": false, "invocations": ["temporaryPersistentFilePath", "open", "writeFullyTo", "force", "atomicMoveWithFallback", "persistentFilePath", "debug"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}