{"test_class": {"identifier": "CompositeHL7v2ExceptionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PipeParser p = new PipeParser();", "modifier": "private", "type": "PipeParser", "declarator": "p = new PipeParser()", "var_name": "p"}, {"original_string": "private ErrorLocation loc1;", "modifier": "private", "type": "ErrorLocation", "declarator": "loc1", "var_name": "loc1"}, {"original_string": "private ErrorLocation loc2;", "modifier": "private", "type": "ErrorLocation", "declarator": "loc2", "var_name": "loc2"}, {"original_string": "private ErrorLocation loc3;", "modifier": "private", "type": "ErrorLocation", "declarator": "loc3", "var_name": "loc3"}, {"original_string": "HL7v2Exception ex1;", "modifier": "", "type": "HL7v2Exception", "declarator": "ex1", "var_name": "ex1"}, {"original_string": "HL7v2Exception ex2;", "modifier": "", "type": "HL7v2Exception", "declarator": "ex2", "var_name": "ex2"}, {"original_string": "HL7v2Exception ex3;", "modifier": "", "type": "HL7v2Exception", "declarator": "ex3", "var_name": "ex3"}], "file": "modules/hl7/src/test/java/org/openehealth/ipf/modules/hl7/CompositeHL7v2ExceptionTest.java"}, "test_case": {"identifier": "testMultipleSegments_Version23", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMultipleSegments_Version23() throws Exception {\n\n\t\tca.uhn.hl7v2.model.v23.message.ACK response = new ca.uhn.hl7v2.model.v23.message.ACK();\n\n\t\tTerser t = new Terser(response);\n\t\tt.set(\"MSH-1\", \"|\");\n\t\tt.set(\"MSH-2\", \"^~\\\\&\");\n\t\tt.set(\"MSH-3\", \"X\");\n\t\tt.set(\"MSH-4\", \"Y\");\n\t\tt.set(\"MSH-9-1\", \"ACK\");\n\t\tt.set(\"MSH-9-2\", \"A08\");\n\t\tt.set(\"MSH-10\", \"1\");\n\t\tt.set(\"MSH-12\", \"2.3\");\n\n\t\tCompositeHL7v2Exception ex0 = new CompositeHL7v2Exception(\"Bluh\",\n\t\t\t\tnew HL7v2Exception[] { ex1, ex2, ex3 });\n\t\tex0.populateMessage(response, AckTypeCode.AE);\n\n\t\tString result = p.encode(response);\n\t\t//  System.out.println(result);\n\t\tassertTrue(result\n\t\t\t\t.contains(\"ERR|MSH^1^2^200&Unsupported message type&HL70357&&Blah~PID^5^4^201&Unsupported event code&HL70357&&Bleh~PV1^0^0^203&Unsupported version id&HL70357&&Blih\"));\n\t}", "signature": "void testMultipleSegments_Version23()", "full_signature": "@Test public void testMultipleSegments_Version23()", "class_method_signature": "CompositeHL7v2ExceptionTest.testMultipleSegments_Version23()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "set", "set", "set", "set", "set", "populateMessage", "encode", "assertTrue", "contains"]}, "focal_class": {"identifier": "CompositeHL7v2Exception", "superclass": "extends AbstractHL7v2Exception", "interfaces": "implements\n\t\tIterable<AbstractHL7v2Exception>", "fields": [{"original_string": "private final List<AbstractHL7v2Exception> wrapped;", "modifier": "private final", "type": "List<AbstractHL7v2Exception>", "declarator": "wrapped", "var_name": "wrapped"}], "methods": [{"identifier": "CompositeHL7v2Exception", "parameters": "()", "modifiers": "public", "return": "", "signature": " CompositeHL7v2Exception()", "full_signature": "public  CompositeHL7v2Exception()", "class_method_signature": "CompositeHL7v2Exception.CompositeHL7v2Exception()", "testcase": false, "constructor": true}, {"identifier": "CompositeHL7v2Exception", "parameters": "(List<AbstractHL7v2Exception> wrapped)", "modifiers": "public", "return": "", "signature": " CompositeHL7v2Exception(List<AbstractHL7v2Exception> wrapped)", "full_signature": "public  CompositeHL7v2Exception(List<AbstractHL7v2Exception> wrapped)", "class_method_signature": "CompositeHL7v2Exception.CompositeHL7v2Exception(List<AbstractHL7v2Exception> wrapped)", "testcase": false, "constructor": true}, {"identifier": "CompositeHL7v2Exception", "parameters": "(AbstractHL7v2Exception[] wrapped)", "modifiers": "public", "return": "", "signature": " CompositeHL7v2Exception(AbstractHL7v2Exception[] wrapped)", "full_signature": "public  CompositeHL7v2Exception(AbstractHL7v2Exception[] wrapped)", "class_method_signature": "CompositeHL7v2Exception.CompositeHL7v2Exception(AbstractHL7v2Exception[] wrapped)", "testcase": false, "constructor": true}, {"identifier": "CompositeHL7v2Exception", "parameters": "(String message,\n\t\t\tAbstractHL7v2Exception[] wrapped)", "modifiers": "public", "return": "", "signature": " CompositeHL7v2Exception(String message,\n\t\t\tAbstractHL7v2Exception[] wrapped)", "full_signature": "public  CompositeHL7v2Exception(String message,\n\t\t\tAbstractHL7v2Exception[] wrapped)", "class_method_signature": "CompositeHL7v2Exception.CompositeHL7v2Exception(String message,\n\t\t\tAbstractHL7v2Exception[] wrapped)", "testcase": false, "constructor": true}, {"identifier": "CompositeHL7v2Exception", "parameters": "(String message)", "modifiers": "public", "return": "", "signature": " CompositeHL7v2Exception(String message)", "full_signature": "public  CompositeHL7v2Exception(String message)", "class_method_signature": "CompositeHL7v2Exception.CompositeHL7v2Exception(String message)", "testcase": false, "constructor": true}, {"identifier": "CompositeHL7v2Exception", "parameters": "(String message,\n\t\t\tList<AbstractHL7v2Exception> wrapped)", "modifiers": "public", "return": "", "signature": " CompositeHL7v2Exception(String message,\n\t\t\tList<AbstractHL7v2Exception> wrapped)", "full_signature": "public  CompositeHL7v2Exception(String message,\n\t\t\tList<AbstractHL7v2Exception> wrapped)", "class_method_signature": "CompositeHL7v2Exception.CompositeHL7v2Exception(String message,\n\t\t\tList<AbstractHL7v2Exception> wrapped)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(AbstractHL7v2Exception exception)", "modifiers": "public", "return": "boolean", "signature": "boolean add(AbstractHL7v2Exception exception)", "full_signature": "public boolean add(AbstractHL7v2Exception exception)", "class_method_signature": "CompositeHL7v2Exception.add(AbstractHL7v2Exception exception)", "testcase": false, "constructor": false}, {"identifier": "populateMessage", "parameters": "(Message m, AckTypeCode code)", "modifiers": "@Override public", "return": "Message", "signature": "Message populateMessage(Message m, AckTypeCode code)", "full_signature": "@Override public Message populateMessage(Message m, AckTypeCode code)", "class_method_signature": "CompositeHL7v2Exception.populateMessage(Message m, AckTypeCode code)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<AbstractHL7v2Exception>", "signature": "Iterator<AbstractHL7v2Exception> iterator()", "full_signature": "@Override public Iterator<AbstractHL7v2Exception> iterator()", "class_method_signature": "CompositeHL7v2Exception.iterator()", "testcase": false, "constructor": false}], "file": "modules/hl7/src/main/java/org/openehealth/ipf/modules/hl7/CompositeHL7v2Exception.java"}, "focal_method": {"identifier": "populateMessage", "parameters": "(Message m, AckTypeCode code)", "modifiers": "@Override public", "return": "Message", "body": "@Override\n\tpublic Message populateMessage(Message m, AckTypeCode code) {\n\t\ttry {\n            if (MessageUtils.atLeastVersion(m, \"2.5\")) {\n                Segment errorSegment = (Segment) m.get(\"ERR\");\n                fillErr347(errorSegment);\n            } else {\n                Segment msaSegment = (Segment) m.get(\"MSA\");\n                Terser.set(msaSegment, 3, 0, 1, 1, getMessage());\n            }\n            \n            for (AbstractHL7v2Exception exception : wrapped) {\n                exception.populateMessage(m, code);\n            }\n\n\t\t\treturn m;\n\t\t} catch (HL7Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}", "signature": "Message populateMessage(Message m, AckTypeCode code)", "full_signature": "@Override public Message populateMessage(Message m, AckTypeCode code)", "class_method_signature": "CompositeHL7v2Exception.populateMessage(Message m, AckTypeCode code)", "testcase": false, "constructor": false, "invocations": ["atLeastVersion", "get", "fillErr347", "get", "set", "getMessage", "populateMessage"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}