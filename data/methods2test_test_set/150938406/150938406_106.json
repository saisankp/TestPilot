{"test_class": {"identifier": "AnyToTripleFlatMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/dataproc/format/AnyToTripleFlatMapperTest.java"}, "test_case": {"identifier": "flatMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void flatMap() throws Exception {\n\n\t\tAnyToTripleFlatMapper transKvToTriple = new AnyToTripleFlatMapper(\n\t\t\tCsvUtil.schemaStr2Schema(\"row_id long, kv string\"),\n\t\t\tnew Params()\n\t\t\t\t.set(FormatTransParams.FROM_FORMAT, FormatType.KV)\n\t\t\t\t.set(FromKvParams.KV_COL, \"kv\")\n\t\t\t\t.set(FromKvParams.KV_COL_DELIMITER, \",\")\n\t\t\t\t.set(FromKvParams.KV_VAL_DELIMITER, \":\")\n\t\t\t\t.set(ToTripleParams.TRIPLE_COL_VAL_SCHEMA_STR, \"col_id int, val double\")\n\t\t\t\t.set(ToTripleParams.RESERVED_COLS, new String[] {\"row_id\"})\n\t\t);\n\t\ttransKvToTriple.open();\n\n\t\tRowCollector collector = new RowCollector();\n\t\ttransKvToTriple.flatMap(Row.of(3L, \"1:1.0,4:1.0\"), collector);\n\n\t\tAssert.assertEquals(collector.getRows().size(), 2);\n//\t\tfor (Row row : collector.getRows()) {\n//\t\t\tSystem.out.println(row);\n//\t\t}\n\n\t}", "signature": "void flatMap()", "full_signature": "@Test public void flatMap()", "class_method_signature": "AnyToTripleFlatMapperTest.flatMap()", "testcase": true, "constructor": false, "invocations": ["schemaStr2Schema", "set", "set", "set", "set", "set", "set", "open", "flatMap", "of", "assertEquals", "size", "getRows"]}, "focal_class": {"identifier": "AnyToTripleFlatMapper", "superclass": "extends FlatMapper", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 3221991172531895169L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 3221991172531895169L", "var_name": "serialVersionUID"}, {"original_string": "private OutputColsHelper outputColsHelper;", "modifier": "private", "type": "OutputColsHelper", "declarator": "outputColsHelper", "var_name": "outputColsHelper"}, {"original_string": "private HandleInvalid handleInvalid;", "modifier": "private", "type": "HandleInvalid", "declarator": "handleInvalid", "var_name": "handleInvalid"}, {"original_string": "private FormatReader formatReader;", "modifier": "private", "type": "FormatReader", "declarator": "formatReader", "var_name": "formatReader"}, {"original_string": "private HashMap <String, String> bufMap = new HashMap <>();", "modifier": "private", "type": "HashMap <String, String>", "declarator": "bufMap = new HashMap <>()", "var_name": "bufMap"}, {"original_string": "private FieldParser <?>[] parsers;", "modifier": "private", "type": "FieldParser <?>[]", "declarator": "parsers", "var_name": "parsers"}, {"original_string": "private boolean[] isString;", "modifier": "private", "type": "boolean[]", "declarator": "isString", "var_name": "isString"}, {"original_string": "private TypeInformation[] fieldTypes;", "modifier": "private", "type": "TypeInformation[]", "declarator": "fieldTypes", "var_name": "fieldTypes"}], "methods": [{"identifier": "AnyToTripleFlatMapper", "parameters": "(TableSchema dataSchema, Params params)", "modifiers": "public", "return": "", "signature": " AnyToTripleFlatMapper(TableSchema dataSchema, Params params)", "full_signature": "public  AnyToTripleFlatMapper(TableSchema dataSchema, Params params)", "class_method_signature": "AnyToTripleFlatMapper.AnyToTripleFlatMapper(TableSchema dataSchema, Params params)", "testcase": false, "constructor": true}, {"identifier": "open", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void open()", "full_signature": "@Override public void open()", "class_method_signature": "AnyToTripleFlatMapper.open()", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(Row row, Collector <Row> output)", "modifiers": "@Override public", "return": "void", "signature": "void flatMap(Row row, Collector <Row> output)", "full_signature": "@Override public void flatMap(Row row, Collector <Row> output)", "class_method_signature": "AnyToTripleFlatMapper.flatMap(Row row, Collector <Row> output)", "testcase": false, "constructor": false}, {"identifier": "getOutputSchema", "parameters": "()", "modifiers": "@Override public", "return": "TableSchema", "signature": "TableSchema getOutputSchema()", "full_signature": "@Override public TableSchema getOutputSchema()", "class_method_signature": "AnyToTripleFlatMapper.getOutputSchema()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/dataproc/format/AnyToTripleFlatMapper.java"}, "focal_method": {"identifier": "flatMap", "parameters": "(Row row, Collector <Row> output)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void flatMap(Row row, Collector <Row> output) throws Exception {\n\t\tif (null == row) {\n\t\t\toutput.collect(null);\n\t\t}\n\t\tbufMap.clear();\n\t\tboolean success = formatReader.read(row, bufMap);\n\t\tif (success) {\n\t\t\tfor (Map.Entry <String, String> entry : bufMap.entrySet()) {\n\t\t\t\tTuple2 <Boolean, Object> parsedKey = ColumnsWriter.parseField(parsers[0], entry.getKey(), isString[0]);\n\t\t\t\tTuple2 <Boolean, Object> parsedValue = ColumnsWriter.parseField(parsers[1], entry.getValue(), isString[1]);\n\t\t\t\tif (!StringUtils.isNullOrWhitespaceOnly(entry.getValue())) {\n\t\t\t\t\tif (parsedKey.f0 && parsedValue.f0) {\n\t\t\t\t\t\toutput.collect(outputColsHelper\n\t\t\t\t\t\t\t.getResultRow(row, Row.of(parsedKey.f1, parsedValue.f1)));\n\t\t\t\t\t} else if (handleInvalid.equals(HandleInvalid.ERROR)) {\n\t\t\t\t\t\tthrow new RuntimeException(\"Fail to write: \" + JsonConverter.toJson(bufMap));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (handleInvalid.equals(HandleInvalid.ERROR)) {\n\t\t\tthrow new RuntimeException(\"Fail to read: \" + row);\n\t\t}\n\t}", "signature": "void flatMap(Row row, Collector <Row> output)", "full_signature": "@Override public void flatMap(Row row, Collector <Row> output)", "class_method_signature": "AnyToTripleFlatMapper.flatMap(Row row, Collector <Row> output)", "testcase": false, "constructor": false, "invocations": ["collect", "clear", "read", "entrySet", "parseField", "getKey", "parseField", "getValue", "isNullOrWhitespaceOnly", "getValue", "collect", "getResultRow", "of", "equals", "toJson", "equals"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}