{"test_class": {"identifier": "Interpolate2RealTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/core-map/src/test/java/org/orbisgis/coremap/renderer/se/parameter/real/Interpolate2RealTest.java"}, "test_case": {"identifier": "testLinearInterpolation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n        public void testLinearInterpolation() throws ParameterException {\n                Interpolate2Real interpolate= getLinearInterpolation();\n\t\tdouble result;\n\t\tinterpolate.setLookupValue(new RealLiteral(1.0));\n\t\tresult = interpolate.getValue(null, -1);\n\t\tassertEquals(result, 100.0, 0.00000001);\n\t\tinterpolate.setLookupValue(new RealLiteral(20.0));\n\t\tresult = interpolate.getValue(null, -1);\n\t\tassertEquals(result, 102.5, 0.00000001);\n\t\tinterpolate.setLookupValue(new RealLiteral(55.0));\n\t\tresult = interpolate.getValue(null, -1);\n\t\tassertEquals(result, 155.0, 0.00000001);\n\t\tinterpolate.setLookupValue(new RealLiteral(70.0));\n\t\tresult = interpolate.getValue(null, -1);\n\t\tassertEquals(result, 200.0, 0.00000001);\n\t}", "signature": "void testLinearInterpolation()", "full_signature": "@Test public void testLinearInterpolation()", "class_method_signature": "Interpolate2RealTest.testLinearInterpolation()", "testcase": true, "constructor": false, "invocations": ["getLinearInterpolation", "setLookupValue", "getValue", "assertEquals", "setLookupValue", "getValue", "assertEquals", "setLookupValue", "getValue", "assertEquals", "setLookupValue", "getValue", "assertEquals"]}, "focal_class": {"identifier": "Interpolate2Real", "superclass": "extends Interpolate<RealParameter, RealLiteral>", "interfaces": "implements RealParameter", "fields": [{"original_string": "private RealParameterContext ctx;", "modifier": "private", "type": "RealParameterContext", "declarator": "ctx", "var_name": "ctx"}], "methods": [{"identifier": "Interpolate2Real", "parameters": "(RealLiteral fallback)", "modifiers": "public", "return": "", "signature": " Interpolate2Real(RealLiteral fallback)", "full_signature": "public  Interpolate2Real(RealLiteral fallback)", "class_method_signature": "Interpolate2Real.Interpolate2Real(RealLiteral fallback)", "testcase": false, "constructor": true}, {"identifier": "Interpolate2Real", "parameters": "(InterpolateType expr)", "modifiers": "public", "return": "", "signature": " Interpolate2Real(InterpolateType expr)", "full_signature": "public  Interpolate2Real(InterpolateType expr)", "class_method_signature": "Interpolate2Real.Interpolate2Real(InterpolateType expr)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "(ResultSet rs, long fid)", "modifiers": "@Override public", "return": "Double", "signature": "Double getValue(ResultSet rs, long fid)", "full_signature": "@Override public Double getValue(ResultSet rs, long fid)", "class_method_signature": "Interpolate2Real.getValue(ResultSet rs, long fid)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Map<String,Object> map)", "modifiers": "@Override public", "return": "Double", "signature": "Double getValue(Map<String,Object> map)", "full_signature": "@Override public Double getValue(Map<String,Object> map)", "class_method_signature": "Interpolate2Real.getValue(Map<String,Object> map)", "testcase": false, "constructor": false}, {"identifier": "setFallbackValue", "parameters": "(RealLiteral l)", "modifiers": "@Override public", "return": "void", "signature": "void setFallbackValue(RealLiteral l)", "full_signature": "@Override public void setFallbackValue(RealLiteral l)", "class_method_signature": "Interpolate2Real.setFallbackValue(RealLiteral l)", "testcase": false, "constructor": false}, {"identifier": "addInterpolationPoint", "parameters": "(InterpolationPoint<RealParameter> point)", "modifiers": "@Override public", "return": "void", "signature": "void addInterpolationPoint(InterpolationPoint<RealParameter> point)", "full_signature": "@Override public void addInterpolationPoint(InterpolationPoint<RealParameter> point)", "class_method_signature": "Interpolate2Real.addInterpolationPoint(InterpolationPoint<RealParameter> point)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Interpolate2Real.toString()", "testcase": false, "constructor": false}, {"identifier": "setContext", "parameters": "(RealParameterContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void setContext(RealParameterContext ctx)", "full_signature": "@Override public void setContext(RealParameterContext ctx)", "class_method_signature": "Interpolate2Real.setContext(RealParameterContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "@Override public", "return": "RealParameterContext", "signature": "RealParameterContext getContext()", "full_signature": "@Override public RealParameterContext getContext()", "class_method_signature": "Interpolate2Real.getContext()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Object o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Object o)", "full_signature": "@Override public int compareTo(Object o)", "class_method_signature": "Interpolate2Real.compareTo(Object o)", "testcase": false, "constructor": false}], "file": "bundles/core-map/src/main/java/org/orbisgis/coremap/renderer/se/parameter/real/Interpolate2Real.java"}, "focal_method": {"identifier": "getValue", "parameters": "(ResultSet rs, long fid)", "modifiers": "@Override public", "return": "Double", "body": "@Override\n        public Double getValue(ResultSet rs, long fid) throws ParameterException {\n\n                double value = this.getLookupValue().getValue(rs, fid);\n\n                if (getInterpolationPoint(0).getData() >= value) {\n                        return getInterpolationPoint(0).getValue().getValue(rs, fid);\n                }\n\n                int numPt = getNumInterpolationPoint();\n                if (getInterpolationPoint(numPt - 1).getData() <= value) {\n                        return getInterpolationPoint(numPt - 1).getValue().getValue(rs, fid);\n                }\n\n                int k = getFirstIP(value);\n\n                InterpolationPoint<RealParameter> ip1 = getInterpolationPoint(k);\n                InterpolationPoint<RealParameter> ip2 = getInterpolationPoint(k + 1);\n\n                switch (getMode()) {\n                        case CUBIC:\n                                return cubicInterpolation(ip1.getData(), ip2.getData(), value,\n                                        ip1.getValue().getValue(rs, fid), ip2.getValue().getValue(rs, fid), -1.0, -1.0);\n                        case COSINE:\n                                return cosineInterpolation(ip1.getData(), ip2.getData(), value,\n                                        ip1.getValue().getValue(rs, fid), ip2.getValue().getValue(rs, fid));\n                        case LINEAR:\n                                return linearInterpolation(ip1.getData(), ip2.getData(), value,\n                                        ip1.getValue().getValue(rs, fid), ip2.getValue().getValue(rs, fid));\n\n                }\n                //as we've analyzed the three only possible cases in the switch,\n                //we're not supposed to reach this point... \n                return 0.0;\n        }", "signature": "Double getValue(ResultSet rs, long fid)", "full_signature": "@Override public Double getValue(ResultSet rs, long fid)", "class_method_signature": "Interpolate2Real.getValue(ResultSet rs, long fid)", "testcase": false, "constructor": false, "invocations": ["getValue", "getLookupValue", "getData", "getInterpolationPoint", "getValue", "getValue", "getInterpolationPoint", "getNumInterpolationPoint", "getData", "getInterpolationPoint", "getValue", "getValue", "getInterpolationPoint", "getFirstIP", "getInterpolationPoint", "getInterpolationPoint", "getMode", "cubicInterpolation", "getData", "getData", "getValue", "getValue", "getValue", "getValue", "cosineInterpolation", "getData", "getData", "getValue", "getValue", "getValue", "getValue", "linearInterpolation", "getData", "getData", "getValue", "getValue", "getValue", "getValue"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}