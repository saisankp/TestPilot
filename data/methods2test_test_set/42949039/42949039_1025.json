{"test_class": {"identifier": "UploaderAppTest", "superclass": "extends AbstractUploaderTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public EnvironmentVariables environmentVariables = new EnvironmentVariables();", "modifier": "@Rule\n    public", "type": "EnvironmentVariables", "declarator": "environmentVariables = new EnvironmentVariables()", "var_name": "environmentVariables"}, {"original_string": "private UploaderApp uploaderApp = new UploaderApp()\n    {\n        protected ApplicationContext createApplicationContext()\n        {\n            return applicationContext;\n        }\n    };", "modifier": "private", "type": "UploaderApp", "declarator": "uploaderApp = new UploaderApp()\n    {\n        protected ApplicationContext createApplicationContext()\n        {\n            return applicationContext;\n        }\n    }", "var_name": "uploaderApp"}], "file": "herd-code/herd-tools/herd-uploader/src/test/java/org/finra/herd/tools/uploader/UploaderAppTest.java"}, "test_case": {"identifier": "testGoCliAndEnvPasswordSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGoCliAndEnvPasswordSuccess()\n    {\n        // CLI Password being used\n        environmentVariables.set(\"HERD_PASSWORD\", \"\");\n        String[] arguments = {\"--s3AccessKey\", S3_ACCESS_KEY, \"--s3SecretKey\", S3_SECRET_KEY, \"--s3Endpoint\", S3_ENDPOINT_US_STANDARD, \"--localPath\",\n            LOCAL_TEMP_PATH_INPUT.toString(), \"--manifestPath\", STRING_VALUE, \"--regServerHost\", WEB_SERVICE_HOSTNAME, \"--regServerPort\",\n            WEB_SERVICE_HTTPS_PORT.toString(), \"--httpProxyHost\", HTTP_PROXY_HOST, \"--httpProxyPort\", HTTP_PROXY_PORT.toString(), \"--ssl\", \"true\", \"-u\",\n            WEB_SERVICE_HTTPS_USERNAME, \"-w\", WEB_SERVICE_HTTPS_PASSWORD, \"-E\", \"true\", \"-C\", \"true\", \"-d\", \"true\"};\n        assertNull(uploaderApp.parseCommandLineArguments(arguments, applicationContext));\n\n        // ENV Password being used\n        environmentVariables.set(\"HERD_PASSWORD\", WEB_SERVICE_HTTPS_PASSWORD);\n        String[] argumentsEnvPassword = {\"--s3AccessKey\", S3_ACCESS_KEY, \"--s3SecretKey\", S3_SECRET_KEY, \"--s3Endpoint\", S3_ENDPOINT_US_STANDARD, \"--localPath\",\n            LOCAL_TEMP_PATH_INPUT.toString(), \"--manifestPath\", STRING_VALUE, \"--regServerHost\", WEB_SERVICE_HOSTNAME, \"--regServerPort\",\n            WEB_SERVICE_HTTPS_PORT.toString(), \"--httpProxyHost\", HTTP_PROXY_HOST, \"--httpProxyPort\", HTTP_PROXY_PORT.toString(), \"--ssl\", \"true\", \"-u\",\n            WEB_SERVICE_HTTPS_USERNAME, \"-w\", \"\", \"-E\", \"true\", \"-C\", \"true\", \"-d\", \"true\"};\n        assertNull(uploaderApp.parseCommandLineArguments(argumentsEnvPassword, applicationContext));\n        environmentVariables.clear(\"HERD_PASSWORD\");\n    }", "signature": "void testGoCliAndEnvPasswordSuccess()", "full_signature": "@Test public void testGoCliAndEnvPasswordSuccess()", "class_method_signature": "UploaderAppTest.testGoCliAndEnvPasswordSuccess()", "testcase": true, "constructor": false, "invocations": ["set", "toString", "toString", "toString", "assertNull", "parseCommandLineArguments", "set", "toString", "toString", "toString", "assertNull", "parseCommandLineArguments", "clear"]}, "focal_class": {"identifier": "UploaderApp", "superclass": "extends DataBridgeApp", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UploaderApp.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UploaderApp.class)", "var_name": "LOGGER"}, {"original_string": "private Option maxRetryAttemptsOpt;", "modifier": "private", "type": "Option", "declarator": "maxRetryAttemptsOpt", "var_name": "maxRetryAttemptsOpt"}, {"original_string": "private Option retryDelaySecsOpt;", "modifier": "private", "type": "Option", "declarator": "retryDelaySecsOpt", "var_name": "retryDelaySecsOpt"}, {"original_string": "private Option createNewVersionOpt;", "modifier": "private", "type": "Option", "declarator": "createNewVersionOpt", "var_name": "createNewVersionOpt"}, {"original_string": "private Option rrsOpt;", "modifier": "private", "type": "Option", "declarator": "rrsOpt", "var_name": "rrsOpt"}, {"original_string": "private Option forceOpt;", "modifier": "private", "type": "Option", "declarator": "forceOpt", "var_name": "forceOpt"}, {"original_string": "private Integer maxRetryAttempts;", "modifier": "private", "type": "Integer", "declarator": "maxRetryAttempts", "var_name": "maxRetryAttempts"}, {"original_string": "private Integer retryDelaySecs;", "modifier": "private", "type": "Integer", "declarator": "retryDelaySecs", "var_name": "retryDelaySecs"}, {"original_string": "private ArgumentParser argParser;", "modifier": "private", "type": "ArgumentParser", "declarator": "argParser", "var_name": "argParser"}, {"original_string": "private static final Integer MAX_RETRY_ATTEMPTS_DEFAULT = 5;", "modifier": "private static final", "type": "Integer", "declarator": "MAX_RETRY_ATTEMPTS_DEFAULT = 5", "var_name": "MAX_RETRY_ATTEMPTS_DEFAULT"}, {"original_string": "private static final Integer MAX_RETRY_ATTEMPTS_MIN = 0;", "modifier": "private static final", "type": "Integer", "declarator": "MAX_RETRY_ATTEMPTS_MIN = 0", "var_name": "MAX_RETRY_ATTEMPTS_MIN"}, {"original_string": "private static final Integer MAX_RETRY_ATTEMPTS_MAX = 10;", "modifier": "private static final", "type": "Integer", "declarator": "MAX_RETRY_ATTEMPTS_MAX = 10", "var_name": "MAX_RETRY_ATTEMPTS_MAX"}, {"original_string": "private static final Integer RETRY_DELAY_SECS_DEFAULT = 120;", "modifier": "private static final", "type": "Integer", "declarator": "RETRY_DELAY_SECS_DEFAULT = 120", "var_name": "RETRY_DELAY_SECS_DEFAULT"}, {"original_string": "private static final Integer RETRY_DELAY_SECS_MIN = 0;", "modifier": "private static final", "type": "Integer", "declarator": "RETRY_DELAY_SECS_MIN = 0", "var_name": "RETRY_DELAY_SECS_MIN"}, {"original_string": "private static final Integer RETRY_DELAY_SECS_MAX = 900;", "modifier": "private static final", "type": "Integer", "declarator": "RETRY_DELAY_SECS_MAX = 900", "var_name": "RETRY_DELAY_SECS_MAX"}], "methods": [{"identifier": "UploaderApp", "parameters": "()", "modifiers": "public", "return": "", "signature": " UploaderApp()", "full_signature": "public  UploaderApp()", "class_method_signature": "UploaderApp.UploaderApp()", "testcase": false, "constructor": true}, {"identifier": "parseCommandLineArguments", "parameters": "(String[] args, ApplicationContext applicationContext)", "modifiers": "@Override protected", "return": "ReturnValue", "signature": "ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "full_signature": "@Override protected ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "class_method_signature": "UploaderApp.parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "go", "parameters": "(String[] args)", "modifiers": "@Override public", "return": "ReturnValue", "signature": "ReturnValue go(String[] args)", "full_signature": "@Override public ReturnValue go(String[] args)", "class_method_signature": "UploaderApp.go(String[] args)", "testcase": false, "constructor": false}, {"identifier": "getArgumentParser", "parameters": "()", "modifiers": "@Override public", "return": "ArgumentParser", "signature": "ArgumentParser getArgumentParser()", "full_signature": "@Override public ArgumentParser getArgumentParser()", "class_method_signature": "UploaderApp.getArgumentParser()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "@SuppressWarnings(\"PMD.DoNotCallSystemExit\") // Using System.exit is allowed for an actual application to exit. public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "@SuppressWarnings(\"PMD.DoNotCallSystemExit\") // Using System.exit is allowed for an actual application to exit. public static void main(String[] args)", "class_method_signature": "UploaderApp.main(String[] args)", "testcase": false, "constructor": false}], "file": "herd-code/herd-tools/herd-uploader/src/main/java/org/finra/herd/tools/uploader/UploaderApp.java"}, "focal_method": {"identifier": "parseCommandLineArguments", "parameters": "(String[] args, ApplicationContext applicationContext)", "modifiers": "@Override protected", "return": "ReturnValue", "body": "@Override\n    protected ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)\n    {\n        ReturnValue returnValue = super.parseCommandLineArguments(args, applicationContext);\n\n        // Stop the processing if return value is not null.\n        if (returnValue != null)\n        {\n            return returnValue;\n        }\n\n        try\n        {\n            // Extract uploader specific Integer option values here to catch any NumberFormatException exceptions.\n            maxRetryAttempts = argParser.getIntegerValue(maxRetryAttemptsOpt, MAX_RETRY_ATTEMPTS_DEFAULT, MAX_RETRY_ATTEMPTS_MIN, MAX_RETRY_ATTEMPTS_MAX);\n            retryDelaySecs = argParser.getIntegerValue(retryDelaySecsOpt, RETRY_DELAY_SECS_DEFAULT, RETRY_DELAY_SECS_MIN, RETRY_DELAY_SECS_MAX);\n        }\n        catch (Exception ex)\n        {\n            // Log a friendly error and return a failure which will cause the application to exit.\n            LOGGER.error(\"Error parsing command line arguments: \" + ex.getMessage() + \"\\n\" + argParser.getUsageInformation());\n            return ReturnValue.FAILURE;\n        }\n\n        // The command line arguments were all parsed successfully so return null to continue processing.\n        return null;\n    }", "signature": "ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "full_signature": "@Override protected ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "class_method_signature": "UploaderApp.parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "testcase": false, "constructor": false, "invocations": ["parseCommandLineArguments", "getIntegerValue", "getIntegerValue", "error", "getMessage", "getUsageInformation"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}