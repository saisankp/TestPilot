{"test_class": {"identifier": "XmlEstimationSpecTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILE = \"c:\\\\localdata\\\\trs_estimationspec.xml\";", "modifier": "private static final", "type": "String", "declarator": "FILE = \"c:\\\\localdata\\\\trs_estimationspec.xml\"", "var_name": "FILE"}], "file": "jtss/src/test/java/ec/demetra/xml/sa/tramoseats/XmlEstimationSpecTest.java"}, "test_case": {"identifier": "testMarshal", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testMarshal() throws FileNotFoundException, JAXBException, IOException, Exception {\n\n        TramoSpecification spec = TramoSpecification.TRfull;\n        EstimateSpec espec = spec.getEstimate().clone();\n        espec.setUbp(1);\n        TsPeriodSelector sel = new TsPeriodSelector();\n        sel.last(120);\n        espec.setSpan(sel);\n        XmlEstimationSpec xspec = XmlEstimationSpec.MARSHALLER.marshal(espec);\n        JAXBContext jaxb = JAXBContext.newInstance(xspec.getClass());\n        FileOutputStream ostream = new FileOutputStream(FILE);\n        try (OutputStreamWriter writer = new OutputStreamWriter(ostream, StandardCharsets.UTF_8)) {\n            Marshaller marshaller = jaxb.createMarshaller();\n            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n            marshaller.marshal(xspec, writer);\n            writer.flush();\n        }\n\n        XmlEstimationSpec rslt;\n        FileInputStream istream = new FileInputStream(FILE);\n        try (InputStreamReader reader = new InputStreamReader(istream, StandardCharsets.UTF_8)) {\n            Unmarshaller unmarshaller = jaxb.createUnmarshaller();\n            rslt = (XmlEstimationSpec) unmarshaller.unmarshal(reader);\n            EstimateSpec nspec = new EstimateSpec();\n            XmlEstimationSpec.UNMARSHALLER.unmarshal(rslt, nspec);\n            assertTrue(nspec.equals(espec));\n        }\n    }", "signature": "void testMarshal()", "full_signature": "@Test @Ignore public void testMarshal()", "class_method_signature": "XmlEstimationSpecTest.testMarshal()", "testcase": true, "constructor": false, "invocations": ["clone", "getEstimate", "setUbp", "last", "setSpan", "marshal", "newInstance", "getClass", "createMarshaller", "setProperty", "marshal", "flush", "createUnmarshaller", "unmarshal", "unmarshal", "assertTrue", "equals"]}, "focal_class": {"identifier": "XmlEstimationSpec", "superclass": "extends ec.demetra.xml.modelling.XmlEstimationSpec", "interfaces": "", "fields": [{"original_string": "@XmlElement(name = \"Precision\", defaultValue = \"0.0000001\")\n    protected Double precision;", "modifier": "@XmlElement(name = \"Precision\", defaultValue = \"0.0000001\")\n    protected", "type": "Double", "declarator": "precision", "var_name": "precision"}, {"original_string": "@XmlElement(name = \"EML\", defaultValue = \"true\")\n    protected Boolean eml;", "modifier": "@XmlElement(name = \"EML\", defaultValue = \"true\")\n    protected", "type": "Boolean", "declarator": "eml", "var_name": "eml"}, {"original_string": "@XmlElement(name = \"UBP\", defaultValue = \"0.96\")\n    protected Double ubp;", "modifier": "@XmlElement(name = \"UBP\", defaultValue = \"0.96\")\n    protected", "type": "Double", "declarator": "ubp", "var_name": "ubp"}, {"original_string": "public static final InPlaceXmlUnmarshaller<XmlEstimationSpec, EstimateSpec> UNMARSHALLER = (XmlEstimationSpec xml, EstimateSpec v) -> {\n        if (xml.span != null) {\n            XmlPeriodSelection.UNMARSHALLER.unmarshal(xml.span, v.getSpan());\n        } else {\n            v.getSpan().all();\n        }\n        if (xml.eml != null) {\n            v.setEML(xml.eml);\n        }\n        if (xml.precision != null) {\n            v.setTol(xml.precision);\n        }\n        if (xml.ubp != null) {\n            v.setUbp(xml.ubp);\n        }\n        return true;\n    };", "modifier": "public static final", "type": "InPlaceXmlUnmarshaller<XmlEstimationSpec, EstimateSpec>", "declarator": "UNMARSHALLER = (XmlEstimationSpec xml, EstimateSpec v) -> {\n        if (xml.span != null) {\n            XmlPeriodSelection.UNMARSHALLER.unmarshal(xml.span, v.getSpan());\n        } else {\n            v.getSpan().all();\n        }\n        if (xml.eml != null) {\n            v.setEML(xml.eml);\n        }\n        if (xml.precision != null) {\n            v.setTol(xml.precision);\n        }\n        if (xml.ubp != null) {\n            v.setUbp(xml.ubp);\n        }\n        return true;\n    }", "var_name": "UNMARSHALLER"}, {"original_string": "public static final IXmlMarshaller<XmlEstimationSpec, EstimateSpec> MARSHALLER = (EstimateSpec v) -> {\n        if (v.isDefault()) {\n            return null;\n        }\n        XmlEstimationSpec xml=new XmlEstimationSpec();\n        if (!v.getSpan().isAll()) {\n            xml.span = new XmlPeriodSelection();\n            XmlPeriodSelection.MARSHALLER.marshal(v.getSpan(), xml.span);\n        }\n        xml.setEML(v.isEML());\n        xml.setPrecision(v.getTol());\n        xml.setUBP(v.getUbp());\n        return xml;\n    };", "modifier": "public static final", "type": "IXmlMarshaller<XmlEstimationSpec, EstimateSpec>", "declarator": "MARSHALLER = (EstimateSpec v) -> {\n        if (v.isDefault()) {\n            return null;\n        }\n        XmlEstimationSpec xml=new XmlEstimationSpec();\n        if (!v.getSpan().isAll()) {\n            xml.span = new XmlPeriodSelection();\n            XmlPeriodSelection.MARSHALLER.marshal(v.getSpan(), xml.span);\n        }\n        xml.setEML(v.isEML());\n        xml.setPrecision(v.getTol());\n        xml.setUBP(v.getUbp());\n        return xml;\n    }", "var_name": "MARSHALLER"}], "methods": [{"identifier": "getPrecision", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getPrecision()", "full_signature": "public Double getPrecision()", "class_method_signature": "XmlEstimationSpec.getPrecision()", "testcase": false, "constructor": false}, {"identifier": "setPrecision", "parameters": "(Double value)", "modifiers": "public", "return": "void", "signature": "void setPrecision(Double value)", "full_signature": "public void setPrecision(Double value)", "class_method_signature": "XmlEstimationSpec.setPrecision(Double value)", "testcase": false, "constructor": false}, {"identifier": "isEML", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEML()", "full_signature": "public boolean isEML()", "class_method_signature": "XmlEstimationSpec.isEML()", "testcase": false, "constructor": false}, {"identifier": "setEML", "parameters": "(Boolean value)", "modifiers": "public", "return": "void", "signature": "void setEML(Boolean value)", "full_signature": "public void setEML(Boolean value)", "class_method_signature": "XmlEstimationSpec.setEML(Boolean value)", "testcase": false, "constructor": false}, {"identifier": "getUBP", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getUBP()", "full_signature": "public Double getUBP()", "class_method_signature": "XmlEstimationSpec.getUBP()", "testcase": false, "constructor": false}, {"identifier": "setUBP", "parameters": "(Double value)", "modifiers": "public", "return": "void", "signature": "void setUBP(Double value)", "full_signature": "public void setUBP(Double value)", "class_method_signature": "XmlEstimationSpec.setUBP(Double value)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/demetra/xml/sa/tramoseats/XmlEstimationSpec.java"}, "focal_method": {"identifier": "setUBP", "parameters": "(Double value)", "modifiers": "public", "return": "void", "body": "public void setUBP(Double value) {\n        if (value != null && value == EstimateSpec.DEF_UBP) {\n            ubp = null;\n        } else {\n            ubp = value;\n        }\n    }", "signature": "void setUBP(Double value)", "full_signature": "public void setUBP(Double value)", "class_method_signature": "XmlEstimationSpec.setUBP(Double value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}