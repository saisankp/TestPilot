{"test_class": {"identifier": "MemcacheClientFactoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MemcacheClientFactoryImpl factory;", "modifier": "private", "type": "MemcacheClientFactoryImpl", "declarator": "factory", "var_name": "factory"}, {"original_string": "private List<InetSocketAddress> addrs;", "modifier": "private", "type": "List<InetSocketAddress>", "declarator": "addrs", "var_name": "addrs"}], "file": "xmemcached-provider/src/test/java/com/google/code/ssm/providers/xmemcached/MemcacheClientFactoryImplTest.java"}, "test_case": {"identifier": "createWithSpecificConfAndNotEnoughWeights", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void createWithSpecificConfAndNotEnoughWeights() throws IOException {\n        XMemcachedConfiguration conf = new XMemcachedConfiguration();\n        conf.setConsistentHashing(true);\n        conf.setOperationTimeout(10);\n        conf.setUseBinaryProtocol(false);\n        conf.setConnectionPoolSize(1);\n        conf.setMaxAwayTime(100);\n        conf.setOptimizeGet(true);\n        conf.setSanitizeKeys(true);\n        // 2 servers but only 1 weight\n        conf.setWeights(new int[] { 4 });\n\n        List<InetSocketAddress> addrs = Arrays.asList(new InetSocketAddress(12345), new InetSocketAddress(12346));\n\n        factory.create(addrs, conf);\n    }", "signature": "void createWithSpecificConfAndNotEnoughWeights()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void createWithSpecificConfAndNotEnoughWeights()", "class_method_signature": "MemcacheClientFactoryImplTest.createWithSpecificConfAndNotEnoughWeights()", "testcase": true, "constructor": false, "invocations": ["setConsistentHashing", "setOperationTimeout", "setUseBinaryProtocol", "setConnectionPoolSize", "setMaxAwayTime", "setOptimizeGet", "setSanitizeKeys", "setWeights", "asList", "create"]}, "focal_class": {"identifier": "MemcacheClientFactoryImpl", "superclass": "", "interfaces": "implements CacheClientFactory", "fields": [], "methods": [{"identifier": "create", "parameters": "(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "modifiers": "@Override public", "return": "CacheClient", "signature": "CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "full_signature": "@Override public CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "class_method_signature": "MemcacheClientFactoryImpl.create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "setProviderBuilderSpecificSettings", "parameters": "(final XMemcachedClientBuilder builder, final XMemcachedConfiguration conf)", "modifiers": "private", "return": "void", "signature": "void setProviderBuilderSpecificSettings(final XMemcachedClientBuilder builder, final XMemcachedConfiguration conf)", "full_signature": "private void setProviderBuilderSpecificSettings(final XMemcachedClientBuilder builder, final XMemcachedConfiguration conf)", "class_method_signature": "MemcacheClientFactoryImpl.setProviderBuilderSpecificSettings(final XMemcachedClientBuilder builder, final XMemcachedConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "setProviderClientSpecificSettings", "parameters": "(final MemcachedClient client, final XMemcachedConfiguration conf)", "modifiers": "private", "return": "void", "signature": "void setProviderClientSpecificSettings(final MemcachedClient client, final XMemcachedConfiguration conf)", "full_signature": "private void setProviderClientSpecificSettings(final MemcachedClient client, final XMemcachedConfiguration conf)", "class_method_signature": "MemcacheClientFactoryImpl.setProviderClientSpecificSettings(final MemcachedClient client, final XMemcachedConfiguration conf)", "testcase": false, "constructor": false}], "file": "xmemcached-provider/src/main/java/com/google/code/ssm/providers/xmemcached/MemcacheClientFactoryImpl.java"}, "focal_method": {"identifier": "create", "parameters": "(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "modifiers": "@Override public", "return": "CacheClient", "body": "@Override\n    public CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf) throws IOException {\n        XMemcachedClientBuilder builder = null;\n\n        if (conf instanceof XMemcachedConfiguration) {\n            int[] weights = ((XMemcachedConfiguration) conf).getWeights();\n            if (weights != null && weights.length > 0) {\n                builder = new XMemcachedClientBuilder(addrs, weights);\n            }\n        }\n\n        if (builder == null) {\n            builder = new XMemcachedClientBuilder(addrs);\n        }\n\n        if (conf.isConsistentHashing()) {\n            builder.setSessionLocator(new KetamaMemcachedSessionLocator());\n        }\n\n        if (conf.isUseBinaryProtocol()) {\n            builder.setCommandFactory(new BinaryCommandFactory());\n        }\n\n        // allows to cache data larger than 1MB when using provider serialization\n        builder.setTranscoder(new SerializingTranscoder(CachedObject.MAX_SIZE));\n\n        if (conf instanceof XMemcachedConfiguration) {\n            setProviderBuilderSpecificSettings(builder, (XMemcachedConfiguration) conf);\n        }\n\n        MemcachedClient client = builder.build();\n        if (conf.getOperationTimeout() != null) {\n            client.setOpTimeout(conf.getOperationTimeout());\n        }\n\n        if (conf instanceof XMemcachedConfiguration) {\n            setProviderClientSpecificSettings(client, (XMemcachedConfiguration) conf);\n        }\n\n        return new MemcacheClientWrapper(client);\n    }", "signature": "CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "full_signature": "@Override public CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "class_method_signature": "MemcacheClientFactoryImpl.create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "testcase": false, "constructor": false, "invocations": ["getWeights", "isConsistentHashing", "setSessionLocator", "isUseBinaryProtocol", "setCommandFactory", "setTranscoder", "setProviderBuilderSpecificSettings", "build", "getOperationTimeout", "setOpTimeout", "getOperationTimeout", "setProviderClientSpecificSettings"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}