{"test_class": {"identifier": "Soap12ProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Soap12Provider provider;", "modifier": "private", "type": "Soap12Provider", "declarator": "provider", "var_name": "provider"}, {"original_string": "private Definition definition;", "modifier": "private", "type": "Definition", "declarator": "definition", "var_name": "definition"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/wsdl/wsdl11/provider/Soap12ProviderTest.java"}, "test_case": {"identifier": "testPopulateBinding", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPopulateBinding() throws Exception {\n\t\tString namespace = \"http://springframework.org/spring-ws\";\n\t\tdefinition.addNamespace(\"tns\", namespace);\n\t\tdefinition.setTargetNamespace(namespace);\n\n\t\tPortType portType = definition.createPortType();\n\t\tportType.setQName(new QName(namespace, \"PortType\"));\n\t\tportType.setUndefined(false);\n\t\tdefinition.addPortType(portType);\n\t\tOperation operation = definition.createOperation();\n\t\toperation.setName(\"Operation\");\n\t\toperation.setUndefined(false);\n\t\toperation.setStyle(OperationType.REQUEST_RESPONSE);\n\t\tportType.addOperation(operation);\n\t\tInput input = definition.createInput();\n\t\tinput.setName(\"Input\");\n\t\toperation.setInput(input);\n\t\tOutput output = definition.createOutput();\n\t\toutput.setName(\"Output\");\n\t\toperation.setOutput(output);\n\t\tFault fault = definition.createFault();\n\t\tfault.setName(\"Fault\");\n\t\toperation.addFault(fault);\n\n\t\tProperties soapActions = new Properties();\n\t\tsoapActions.setProperty(\"Operation\", namespace + \"/Action\");\n\t\tprovider.setSoapActions(soapActions);\n\n\t\tprovider.setServiceName(\"Service\");\n\n\t\tString locationUri = \"http://localhost:8080/services\";\n\t\tprovider.setLocationUri(locationUri);\n\n\t\tprovider.addBindings(definition);\n\t\tprovider.addServices(definition);\n\n\t\tBinding binding = definition.getBinding(new QName(namespace, \"PortTypeSoap12\"));\n\t\tAssert.assertNotNull(\"No binding created\", binding);\n\t\tAssert.assertEquals(\"Invalid port type\", portType, binding.getPortType());\n\t\tAssert.assertEquals(\"Invalid amount of extensibility elements\", 1, binding.getExtensibilityElements().size());\n\n\t\tSOAP12Binding soapBinding = (SOAP12Binding) binding.getExtensibilityElements().get(0);\n\t\tAssert.assertEquals(\"Invalid style\", \"document\", soapBinding.getStyle());\n\t\tAssert.assertEquals(\"Invalid amount of binding operations\", 1, binding.getBindingOperations().size());\n\n\t\tBindingOperation bindingOperation = binding.getBindingOperation(\"Operation\", \"Input\", \"Output\");\n\t\tAssert.assertNotNull(\"No binding operation created\", bindingOperation);\n\t\tAssert.assertEquals(\"Invalid amount of extensibility elements\", 1,\n\t\t\t\tbindingOperation.getExtensibilityElements().size());\n\n\t\tSOAP12Operation soapOperation = (SOAP12Operation) bindingOperation.getExtensibilityElements().get(0);\n\t\tAssert.assertEquals(\"Invalid SOAPAction\", namespace + \"/Action\", soapOperation.getSoapActionURI());\n\n\t\tBindingInput bindingInput = bindingOperation.getBindingInput();\n\t\tAssert.assertNotNull(\"No binding input\", bindingInput);\n\t\tAssert.assertEquals(\"Invalid name\", \"Input\", bindingInput.getName());\n\t\tAssert.assertEquals(\"Invalid amount of extensibility elements\", 1, bindingInput.getExtensibilityElements().size());\n\t\tSOAP12Body soapBody = (SOAP12Body) bindingInput.getExtensibilityElements().get(0);\n\t\tAssert.assertEquals(\"Invalid soap body use\", \"literal\", soapBody.getUse());\n\n\t\tBindingOutput bindingOutput = bindingOperation.getBindingOutput();\n\t\tAssert.assertNotNull(\"No binding output\", bindingOutput);\n\t\tAssert.assertEquals(\"Invalid name\", \"Output\", bindingOutput.getName());\n\t\tAssert.assertEquals(\"Invalid amount of extensibility elements\", 1, bindingOutput.getExtensibilityElements().size());\n\t\tsoapBody = (SOAP12Body) bindingOutput.getExtensibilityElements().get(0);\n\t\tAssert.assertEquals(\"Invalid soap body use\", \"literal\", soapBody.getUse());\n\n\t\tBindingFault bindingFault = bindingOperation.getBindingFault(\"Fault\");\n\t\tAssert.assertNotNull(\"No binding fault\", bindingFault);\n\t\tAssert.assertEquals(\"Invalid amount of extensibility elements\", 1, bindingFault.getExtensibilityElements().size());\n\t\tSOAP12Fault soapFault = (SOAP12Fault) bindingFault.getExtensibilityElements().get(0);\n\t\tAssert.assertEquals(\"Invalid soap fault use\", \"literal\", soapFault.getUse());\n\n\t\tService service = definition.getService(new QName(namespace, \"Service\"));\n\t\tAssert.assertNotNull(\"No Service created\", service);\n\t\tAssert.assertEquals(\"Invalid amount of ports\", 1, service.getPorts().size());\n\n\t\tPort port = service.getPort(\"PortTypeSoap12\");\n\t\tAssert.assertNotNull(\"No port created\", port);\n\t\tAssert.assertEquals(\"Invalid binding\", binding, port.getBinding());\n\t\tAssert.assertEquals(\"Invalid amount of extensibility elements\", 1, port.getExtensibilityElements().size());\n\n\t\tSOAP12Address soapAddress = (SOAP12Address) port.getExtensibilityElements().get(0);\n\t\tAssert.assertEquals(\"Invalid soap address\", locationUri, soapAddress.getLocationURI());\n\t}", "signature": "void testPopulateBinding()", "full_signature": "@Test public void testPopulateBinding()", "class_method_signature": "Soap12ProviderTest.testPopulateBinding()", "testcase": true, "constructor": false, "invocations": ["addNamespace", "setTargetNamespace", "createPortType", "setQName", "setUndefined", "addPortType", "createOperation", "setName", "setUndefined", "setStyle", "addOperation", "createInput", "setName", "setInput", "createOutput", "setName", "setOutput", "createFault", "setName", "addFault", "setProperty", "setSoapActions", "setServiceName", "setLocationUri", "addBindings", "addServices", "getBinding", "assertNotNull", "assertEquals", "getPortType", "assertEquals", "size", "getExtensibilityElements", "get", "getExtensibilityElements", "assertEquals", "getStyle", "assertEquals", "size", "getBindingOperations", "getBindingOperation", "assertNotNull", "assertEquals", "size", "getExtensibilityElements", "get", "getExtensibilityElements", "assertEquals", "getSoapActionURI", "getBindingInput", "assertNotNull", "assertEquals", "getName", "assertEquals", "size", "getExtensibilityElements", "get", "getExtensibilityElements", "assertEquals", "getUse", "getBindingOutput", "assertNotNull", "assertEquals", "getName", "assertEquals", "size", "getExtensibilityElements", "get", "getExtensibilityElements", "assertEquals", "getUse", "getBindingFault", "assertNotNull", "assertEquals", "size", "getExtensibilityElements", "get", "getExtensibilityElements", "assertEquals", "getUse", "getService", "assertNotNull", "assertEquals", "size", "getPorts", "getPort", "assertNotNull", "assertEquals", "getBinding", "assertEquals", "size", "getExtensibilityElements", "get", "getExtensibilityElements", "assertEquals", "getLocationURI"]}, "focal_class": {"identifier": "Soap12Provider", "superclass": "extends DefaultConcretePartProvider", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_TRANSPORT_URI = \"http://schemas.xmlsoap.org/soap/http\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_TRANSPORT_URI = \"http://schemas.xmlsoap.org/soap/http\"", "var_name": "DEFAULT_TRANSPORT_URI"}, {"original_string": "public static final String SOAP_12_NAMESPACE_PREFIX = \"soap12\";", "modifier": "public static final", "type": "String", "declarator": "SOAP_12_NAMESPACE_PREFIX = \"soap12\"", "var_name": "SOAP_12_NAMESPACE_PREFIX"}, {"original_string": "public static final String SOAP_12_NAMESPACE_URI = \"http://schemas.xmlsoap.org/wsdl/soap12/\";", "modifier": "public static final", "type": "String", "declarator": "SOAP_12_NAMESPACE_URI = \"http://schemas.xmlsoap.org/wsdl/soap12/\"", "var_name": "SOAP_12_NAMESPACE_URI"}, {"original_string": "private String transportUri = DEFAULT_TRANSPORT_URI;", "modifier": "private", "type": "String", "declarator": "transportUri = DEFAULT_TRANSPORT_URI", "var_name": "transportUri"}, {"original_string": "private Properties soapActions = new Properties();", "modifier": "private", "type": "Properties", "declarator": "soapActions = new Properties()", "var_name": "soapActions"}, {"original_string": "private String locationUri;", "modifier": "private", "type": "String", "declarator": "locationUri", "var_name": "locationUri"}], "methods": [{"identifier": "Soap12Provider", "parameters": "()", "modifiers": "public", "return": "", "signature": " Soap12Provider()", "full_signature": "public  Soap12Provider()", "class_method_signature": "Soap12Provider.Soap12Provider()", "testcase": false, "constructor": true}, {"identifier": "getSoapActions", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties getSoapActions()", "full_signature": "public Properties getSoapActions()", "class_method_signature": "Soap12Provider.getSoapActions()", "testcase": false, "constructor": false}, {"identifier": "setSoapActions", "parameters": "(Properties soapActions)", "modifiers": "public", "return": "void", "signature": "void setSoapActions(Properties soapActions)", "full_signature": "public void setSoapActions(Properties soapActions)", "class_method_signature": "Soap12Provider.setSoapActions(Properties soapActions)", "testcase": false, "constructor": false}, {"identifier": "getTransportUri", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTransportUri()", "full_signature": "public String getTransportUri()", "class_method_signature": "Soap12Provider.getTransportUri()", "testcase": false, "constructor": false}, {"identifier": "setTransportUri", "parameters": "(String transportUri)", "modifiers": "public", "return": "void", "signature": "void setTransportUri(String transportUri)", "full_signature": "public void setTransportUri(String transportUri)", "class_method_signature": "Soap12Provider.setTransportUri(String transportUri)", "testcase": false, "constructor": false}, {"identifier": "getLocationUri", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLocationUri()", "full_signature": "public String getLocationUri()", "class_method_signature": "Soap12Provider.getLocationUri()", "testcase": false, "constructor": false}, {"identifier": "setLocationUri", "parameters": "(String locationUri)", "modifiers": "public", "return": "void", "signature": "void setLocationUri(String locationUri)", "full_signature": "public void setLocationUri(String locationUri)", "class_method_signature": "Soap12Provider.setLocationUri(String locationUri)", "testcase": false, "constructor": false}, {"identifier": "populateBinding", "parameters": "(Definition definition, Binding binding)", "modifiers": "@Override protected", "return": "void", "signature": "void populateBinding(Definition definition, Binding binding)", "full_signature": "@Override protected void populateBinding(Definition definition, Binding binding)", "class_method_signature": "Soap12Provider.populateBinding(Definition definition, Binding binding)", "testcase": false, "constructor": false}, {"identifier": "populateSoapBinding", "parameters": "(SOAP12Binding soapBinding, Binding binding)", "modifiers": "protected", "return": "void", "signature": "void populateSoapBinding(SOAP12Binding soapBinding, Binding binding)", "full_signature": "protected void populateSoapBinding(SOAP12Binding soapBinding, Binding binding)", "class_method_signature": "Soap12Provider.populateSoapBinding(SOAP12Binding soapBinding, Binding binding)", "testcase": false, "constructor": false}, {"identifier": "populateBindingFault", "parameters": "(Definition definition, BindingFault bindingFault, Fault fault)", "modifiers": "@Override protected", "return": "void", "signature": "void populateBindingFault(Definition definition, BindingFault bindingFault, Fault fault)", "full_signature": "@Override protected void populateBindingFault(Definition definition, BindingFault bindingFault, Fault fault)", "class_method_signature": "Soap12Provider.populateBindingFault(Definition definition, BindingFault bindingFault, Fault fault)", "testcase": false, "constructor": false}, {"identifier": "populateSoapFault", "parameters": "(BindingFault bindingFault, SOAP12Fault soapFault)", "modifiers": "protected", "return": "void", "signature": "void populateSoapFault(BindingFault bindingFault, SOAP12Fault soapFault)", "full_signature": "protected void populateSoapFault(BindingFault bindingFault, SOAP12Fault soapFault)", "class_method_signature": "Soap12Provider.populateSoapFault(BindingFault bindingFault, SOAP12Fault soapFault)", "testcase": false, "constructor": false}, {"identifier": "populateBindingInput", "parameters": "(Definition definition, BindingInput bindingInput, Input input)", "modifiers": "@Override protected", "return": "void", "signature": "void populateBindingInput(Definition definition, BindingInput bindingInput, Input input)", "full_signature": "@Override protected void populateBindingInput(Definition definition, BindingInput bindingInput, Input input)", "class_method_signature": "Soap12Provider.populateBindingInput(Definition definition, BindingInput bindingInput, Input input)", "testcase": false, "constructor": false}, {"identifier": "populateSoapBody", "parameters": "(SOAP12Body soapBody)", "modifiers": "protected", "return": "void", "signature": "void populateSoapBody(SOAP12Body soapBody)", "full_signature": "protected void populateSoapBody(SOAP12Body soapBody)", "class_method_signature": "Soap12Provider.populateSoapBody(SOAP12Body soapBody)", "testcase": false, "constructor": false}, {"identifier": "populateBindingOperation", "parameters": "(Definition definition, BindingOperation bindingOperation)", "modifiers": "@Override protected", "return": "void", "signature": "void populateBindingOperation(Definition definition, BindingOperation bindingOperation)", "full_signature": "@Override protected void populateBindingOperation(Definition definition, BindingOperation bindingOperation)", "class_method_signature": "Soap12Provider.populateBindingOperation(Definition definition, BindingOperation bindingOperation)", "testcase": false, "constructor": false}, {"identifier": "populateSoapOperation", "parameters": "(SOAP12Operation soapOperation, BindingOperation bindingOperation)", "modifiers": "protected", "return": "void", "signature": "void populateSoapOperation(SOAP12Operation soapOperation, BindingOperation bindingOperation)", "full_signature": "protected void populateSoapOperation(SOAP12Operation soapOperation, BindingOperation bindingOperation)", "class_method_signature": "Soap12Provider.populateSoapOperation(SOAP12Operation soapOperation, BindingOperation bindingOperation)", "testcase": false, "constructor": false}, {"identifier": "populateBindingOutput", "parameters": "(Definition definition, BindingOutput bindingOutput, Output output)", "modifiers": "@Override protected", "return": "void", "signature": "void populateBindingOutput(Definition definition, BindingOutput bindingOutput, Output output)", "full_signature": "@Override protected void populateBindingOutput(Definition definition, BindingOutput bindingOutput, Output output)", "class_method_signature": "Soap12Provider.populateBindingOutput(Definition definition, BindingOutput bindingOutput, Output output)", "testcase": false, "constructor": false}, {"identifier": "populatePort", "parameters": "(Definition definition, Port port)", "modifiers": "@Override protected", "return": "void", "signature": "void populatePort(Definition definition, Port port)", "full_signature": "@Override protected void populatePort(Definition definition, Port port)", "class_method_signature": "Soap12Provider.populatePort(Definition definition, Port port)", "testcase": false, "constructor": false}, {"identifier": "populateSoapAddress", "parameters": "(SOAP12Address soapAddress)", "modifiers": "protected", "return": "void", "signature": "void populateSoapAddress(SOAP12Address soapAddress)", "full_signature": "protected void populateSoapAddress(SOAP12Address soapAddress)", "class_method_signature": "Soap12Provider.populateSoapAddress(SOAP12Address soapAddress)", "testcase": false, "constructor": false}, {"identifier": "createSoapExtension", "parameters": "(Definition definition, Class<?> parentType, String localName)", "modifiers": "private", "return": "ExtensibilityElement", "signature": "ExtensibilityElement createSoapExtension(Definition definition, Class<?> parentType, String localName)", "full_signature": "private ExtensibilityElement createSoapExtension(Definition definition, Class<?> parentType, String localName)", "class_method_signature": "Soap12Provider.createSoapExtension(Definition definition, Class<?> parentType, String localName)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/wsdl/wsdl11/provider/Soap12Provider.java"}, "focal_method": {"identifier": "populateBinding", "parameters": "(Definition definition, Binding binding)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n\tprotected void populateBinding(Definition definition, Binding binding) throws WSDLException {\n\t\tdefinition.addNamespace(SOAP_12_NAMESPACE_PREFIX, SOAP_12_NAMESPACE_URI);\n\t\tsuper.populateBinding(definition, binding);\n\t\tSOAP12Binding soapBinding = (SOAP12Binding) createSoapExtension(definition, Binding.class, \"binding\");\n\t\tpopulateSoapBinding(soapBinding, binding);\n\t\tbinding.addExtensibilityElement(soapBinding);\n\t}", "signature": "void populateBinding(Definition definition, Binding binding)", "full_signature": "@Override protected void populateBinding(Definition definition, Binding binding)", "class_method_signature": "Soap12Provider.populateBinding(Definition definition, Binding binding)", "testcase": false, "constructor": false, "invocations": ["addNamespace", "populateBinding", "createSoapExtension", "populateSoapBinding", "addExtensibilityElement"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}