{"test_class": {"identifier": "StructuredLoggerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String PREFIX = \"prefix\";", "modifier": "private final static", "type": "String", "declarator": "PREFIX = \"prefix\"", "var_name": "PREFIX"}, {"original_string": "@Mock\n  private Function<String, Logger> innerFactory;", "modifier": "@Mock\n  private", "type": "Function<String, Logger>", "declarator": "innerFactory", "var_name": "innerFactory"}, {"original_string": "@Mock\n  private Logger innerLogger;", "modifier": "@Mock\n  private", "type": "Logger", "declarator": "innerLogger", "var_name": "innerLogger"}, {"original_string": "private StructuredLoggerFactory loggerFactory;", "modifier": "private", "type": "StructuredLoggerFactory", "declarator": "loggerFactory", "var_name": "loggerFactory"}, {"original_string": "@Rule\n  public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n  public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}], "file": "logging/src/test/java/io/confluent/common/logging/StructuredLoggerFactoryTest.java"}, "test_case": {"identifier": "shouldAddPrefixToClassName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldAddPrefixToClassName() {\n    // Given:\n    when(innerFactory.apply(\"prefix.java.util.Map\")).thenReturn(innerLogger);\n\n    // When:\n    loggerFactory.getLogger(Map.class);\n\n    // Then:\n    verify(innerFactory, times(1)).apply(\"prefix.java.util.Map\");\n  }", "signature": "void shouldAddPrefixToClassName()", "full_signature": "@Test public void shouldAddPrefixToClassName()", "class_method_signature": "StructuredLoggerFactoryTest.shouldAddPrefixToClassName()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "apply", "getLogger", "apply", "verify", "times"]}, "focal_class": {"identifier": "StructuredLoggerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DELIMITER = \".\";", "modifier": "private static final", "type": "String", "declarator": "DELIMITER = \".\"", "var_name": "DELIMITER"}, {"original_string": "private final String prefix;", "modifier": "private final", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private final Map<String, StructuredLoggerImpl> loggers = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, StructuredLoggerImpl>", "declarator": "loggers = new ConcurrentHashMap<>()", "var_name": "loggers"}, {"original_string": "private final Function<String, Logger> inner;", "modifier": "private final", "type": "Function<String, Logger>", "declarator": "inner", "var_name": "inner"}], "methods": [{"identifier": "StructuredLoggerFactory", "parameters": "(final String prefix)", "modifiers": "public", "return": "", "signature": " StructuredLoggerFactory(final String prefix)", "full_signature": "public  StructuredLoggerFactory(final String prefix)", "class_method_signature": "StructuredLoggerFactory.StructuredLoggerFactory(final String prefix)", "testcase": false, "constructor": true}, {"identifier": "StructuredLoggerFactory", "parameters": "(final String prefix, final Function<String, Logger> inner)", "modifiers": "", "return": "", "signature": " StructuredLoggerFactory(final String prefix, final Function<String, Logger> inner)", "full_signature": "  StructuredLoggerFactory(final String prefix, final Function<String, Logger> inner)", "class_method_signature": "StructuredLoggerFactory.StructuredLoggerFactory(final String prefix, final Function<String, Logger> inner)", "testcase": false, "constructor": true}, {"identifier": "getLogger", "parameters": "(final Class<?> clazz)", "modifiers": "public", "return": "StructuredLogger", "signature": "StructuredLogger getLogger(final Class<?> clazz)", "full_signature": "public StructuredLogger getLogger(final Class<?> clazz)", "class_method_signature": "StructuredLoggerFactory.getLogger(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "(final String name)", "modifiers": "public", "return": "StructuredLogger", "signature": "StructuredLogger getLogger(final String name)", "full_signature": "public StructuredLogger getLogger(final String name)", "class_method_signature": "StructuredLoggerFactory.getLogger(final String name)", "testcase": false, "constructor": false}, {"identifier": "getLoggers", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getLoggers()", "full_signature": "public Collection<String> getLoggers()", "class_method_signature": "StructuredLoggerFactory.getLoggers()", "testcase": false, "constructor": false}], "file": "logging/src/main/java/io/confluent/common/logging/StructuredLoggerFactory.java"}, "focal_method": {"identifier": "getLogger", "parameters": "(final Class<?> clazz)", "modifiers": "public", "return": "StructuredLogger", "body": "public StructuredLogger getLogger(final Class<?> clazz) {\n    return getLogger(clazz.getName());\n  }", "signature": "StructuredLogger getLogger(final Class<?> clazz)", "full_signature": "public StructuredLogger getLogger(final Class<?> clazz)", "class_method_signature": "StructuredLoggerFactory.getLogger(final Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["getLogger", "getName"]}, "repository": {"repo_id": 28214426, "url": "https://github.com/confluentinc/common", "stars": 46, "created": "12/19/2014 4:38:00 AM +00:00", "updates": "2020-01-22T00:50:00+00:00", "fork": "False", "license": "licensed"}}