{"test_class": {"identifier": "DeactivationFactoryMachineTest", "superclass": "", "interfaces": "", "fields": [], "file": "restx-factory/src/test/java/restx/factory/DeactivationFactoryMachineTest.java"}, "test_case": {"identifier": "should_deactivate_components", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_deactivate_components() throws Exception {\n        Name<Integer> one = Name.of(Integer.class, \"one\");\n        Name<Integer> two = Name.of(Integer.class, \"two\");\n        Factory factory = Factory.builder()\n                .addMachine(new SingletonFactoryMachine<>(0, new NamedComponent(one, 1)))\n                .addMachine(new SingletonFactoryMachine<>(0, new NamedComponent(two, 2)))\n                .addMachine(DeactivationFactoryMachine.forNames(one))\n                .build();\n\n        assertThat(factory.getComponents(Integer.class)).containsExactly(2);\n    }", "signature": "void should_deactivate_components()", "full_signature": "@Test public void should_deactivate_components()", "class_method_signature": "DeactivationFactoryMachineTest.should_deactivate_components()", "testcase": true, "constructor": false, "invocations": ["of", "of", "build", "addMachine", "addMachine", "addMachine", "builder", "forNames", "containsExactly", "assertThat", "getComponents"]}, "focal_class": {"identifier": "DeactivationFactoryMachine", "superclass": "", "interfaces": "implements FactoryMachine", "fields": [{"original_string": "private final ImmutableSet<String> keys;", "modifier": "private final", "type": "ImmutableSet<String>", "declarator": "keys", "var_name": "keys"}], "methods": [{"identifier": "forNames", "parameters": "(Iterable<Name<?>> names)", "modifiers": "public static", "return": "DeactivationFactoryMachine", "signature": "DeactivationFactoryMachine forNames(Iterable<Name<?>> names)", "full_signature": "public static DeactivationFactoryMachine forNames(Iterable<Name<?>> names)", "class_method_signature": "DeactivationFactoryMachine.forNames(Iterable<Name<?>> names)", "testcase": false, "constructor": false}, {"identifier": "forNames", "parameters": "(Name<?>... names)", "modifiers": "public static", "return": "DeactivationFactoryMachine", "signature": "DeactivationFactoryMachine forNames(Name<?>... names)", "full_signature": "public static DeactivationFactoryMachine forNames(Name<?>... names)", "class_method_signature": "DeactivationFactoryMachine.forNames(Name<?>... names)", "testcase": false, "constructor": false}, {"identifier": "DeactivationFactoryMachine", "parameters": "(Iterable<Name<?>> keys)", "modifiers": "public", "return": "", "signature": " DeactivationFactoryMachine(Iterable<Name<?>> keys)", "full_signature": "public  DeactivationFactoryMachine(Iterable<Name<?>> keys)", "class_method_signature": "DeactivationFactoryMachine.DeactivationFactoryMachine(Iterable<Name<?>> keys)", "testcase": false, "constructor": true}, {"identifier": "canBuild", "parameters": "(Name<?> name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canBuild(Name<?> name)", "full_signature": "@Override public boolean canBuild(Name<?> name)", "class_method_signature": "DeactivationFactoryMachine.canBuild(Name<?> name)", "testcase": false, "constructor": false}, {"identifier": "getEngine", "parameters": "(Name<T> name)", "modifiers": "@Override public", "return": "MachineEngine<T>", "signature": "MachineEngine<T> getEngine(Name<T> name)", "full_signature": "@Override public MachineEngine<T> getEngine(Name<T> name)", "class_method_signature": "DeactivationFactoryMachine.getEngine(Name<T> name)", "testcase": false, "constructor": false}, {"identifier": "nameBuildableComponents", "parameters": "(Class<T> componentClass)", "modifiers": "@Override public", "return": "Set<Name<T>>", "signature": "Set<Name<T>> nameBuildableComponents(Class<T> componentClass)", "full_signature": "@Override public Set<Name<T>> nameBuildableComponents(Class<T> componentClass)", "class_method_signature": "DeactivationFactoryMachine.nameBuildableComponents(Class<T> componentClass)", "testcase": false, "constructor": false}, {"identifier": "priority", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int priority()", "full_signature": "@Override public int priority()", "class_method_signature": "DeactivationFactoryMachine.priority()", "testcase": false, "constructor": false}], "file": "restx-factory/src/main/java/restx/factory/DeactivationFactoryMachine.java"}, "focal_method": {"identifier": "forNames", "parameters": "(Iterable<Name<?>> names)", "modifiers": "public static", "return": "DeactivationFactoryMachine", "body": "public static DeactivationFactoryMachine forNames(Iterable<Name<?>> names) {\n\t\treturn new DeactivationFactoryMachine(names);\n\t}", "signature": "DeactivationFactoryMachine forNames(Iterable<Name<?>> names)", "full_signature": "public static DeactivationFactoryMachine forNames(Iterable<Name<?>> names)", "class_method_signature": "DeactivationFactoryMachine.forNames(Iterable<Name<?>> names)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}