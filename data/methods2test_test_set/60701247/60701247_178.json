{"test_class": {"identifier": "FormattedLogcatReceiverTest", "superclass": "", "interfaces": "", "fields": [], "file": "android/testSrc/com/android/tools/idea/logcat/FormattedLogcatReceiverTest.java"}, "test_case": {"identifier": "onLogLineReceived", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void onLogLineReceived() {\n    LogcatListener listener = new TestFormattedLogcatReceiver();\n\n    Instant timestamp = Instant.parse(\"2018-04-17T20:33:25.907Z\");\n    LogCatHeader header1 = new LogCatHeader(LogLevel.INFO, 28740, 28740, \"com.google.myapplication\", \"MainActivity\", timestamp);\n    listener.onLogLineReceived(new LogCatMessage(header1, \"Log 1\"));\n\n    LogCatHeader header2 = new LogCatHeader(LogLevel.INFO, 28740, 28740, \"com.google.myapplication\", \"MainActivity\", timestamp);\n    listener.onLogLineReceived(new LogCatMessage(header2, \"Log 2\"));\n\n    Object expected = \"2018-04-17 13:33:25.907 28740-28740/com.google.myapplication I/MainActivity: Log 1\\n\" +\n                      \"2018-04-17 13:33:25.907 28740-28740/com.google.myapplication I/MainActivity: Log 2\\n\";\n\n    assertEquals(expected, listener.toString());\n  }", "signature": "void onLogLineReceived()", "full_signature": "@Test public void onLogLineReceived()", "class_method_signature": "FormattedLogcatReceiverTest.onLogLineReceived()", "testcase": true, "constructor": false, "invocations": ["parse", "onLogLineReceived", "onLogLineReceived", "assertEquals", "toString"]}, "focal_class": {"identifier": "FormattedLogcatReceiver", "superclass": "", "interfaces": "implements AndroidLogcatService.LogcatListener", "fields": [{"original_string": "private final AndroidLogcatFormatter myFormatter;", "modifier": "private final", "type": "AndroidLogcatFormatter", "declarator": "myFormatter", "var_name": "myFormatter"}, {"original_string": "private LogCatHeader myActiveHeader;", "modifier": "private", "type": "LogCatHeader", "declarator": "myActiveHeader", "var_name": "myActiveHeader"}], "methods": [{"identifier": "FormattedLogcatReceiver", "parameters": "(@NotNull AndroidLogcatFormatter formatter)", "modifiers": "", "return": "", "signature": " FormattedLogcatReceiver(@NotNull AndroidLogcatFormatter formatter)", "full_signature": "  FormattedLogcatReceiver(@NotNull AndroidLogcatFormatter formatter)", "class_method_signature": "FormattedLogcatReceiver.FormattedLogcatReceiver(@NotNull AndroidLogcatFormatter formatter)", "testcase": false, "constructor": true}, {"identifier": "onLogLineReceived", "parameters": "(@NotNull LogCatMessage line)", "modifiers": "@Override public final", "return": "void", "signature": "void onLogLineReceived(@NotNull LogCatMessage line)", "full_signature": "@Override public final void onLogLineReceived(@NotNull LogCatMessage line)", "class_method_signature": "FormattedLogcatReceiver.onLogLineReceived(@NotNull LogCatMessage line)", "testcase": false, "constructor": false}, {"identifier": "receiveFormattedLogLine", "parameters": "(@NotNull String line)", "modifiers": "abstract", "return": "void", "signature": "void receiveFormattedLogLine(@NotNull String line)", "full_signature": "abstract void receiveFormattedLogLine(@NotNull String line)", "class_method_signature": "FormattedLogcatReceiver.receiveFormattedLogLine(@NotNull String line)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/logcat/FormattedLogcatReceiver.java"}, "focal_method": {"identifier": "onLogLineReceived", "parameters": "(@NotNull LogCatMessage line)", "modifiers": "@Override public final", "return": "void", "body": "@Override\n  public final void onLogLineReceived(@NotNull LogCatMessage line) {\n    LogCatHeader header = line.getHeader();\n\n    // We want the if branch whenever logcat prints a header, even if it has the same value as the previous one. Check the reference values\n    // (with !=) and not the object values (with equals) here because we get a new instance every time logcat prints a header.\n    if (myActiveHeader != header) {\n      myActiveHeader = header;\n      receiveFormattedLogLine(myFormatter.formatMessageFull(header, line.getMessage()));\n    }\n    else {\n      String message = AndroidLogcatFormatter.formatContinuation(line.getMessage());\n      receiveFormattedLogLine(message);\n    }\n  }", "signature": "void onLogLineReceived(@NotNull LogCatMessage line)", "full_signature": "@Override public final void onLogLineReceived(@NotNull LogCatMessage line)", "class_method_signature": "FormattedLogcatReceiver.onLogLineReceived(@NotNull LogCatMessage line)", "testcase": false, "constructor": false, "invocations": ["getHeader", "receiveFormattedLogLine", "formatMessageFull", "getMessage", "formatContinuation", "getMessage", "receiveFormattedLogLine"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}