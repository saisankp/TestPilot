{"test_class": {"identifier": "FiltersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DELTA = 0.0000001;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 0.0000001", "var_name": "DELTA"}, {"original_string": "private static Filters filters;", "modifier": "private static", "type": "Filters", "declarator": "filters", "var_name": "filters"}, {"original_string": "private static FilterFactory2 ff;", "modifier": "private static", "type": "FilterFactory2", "declarator": "ff", "var_name": "ff"}, {"original_string": "private static Filter a;", "modifier": "private static", "type": "Filter", "declarator": "a", "var_name": "a"}, {"original_string": "private static Filter b;", "modifier": "private static", "type": "Filter", "declarator": "b", "var_name": "b"}, {"original_string": "private static Filter c;", "modifier": "private static", "type": "Filter", "declarator": "c", "var_name": "c"}, {"original_string": "private static Filter d;", "modifier": "private static", "type": "Filter", "declarator": "d", "var_name": "d"}], "file": "modules/library/main/src/test/java/org/geotools/filter/FiltersTest.java"}, "test_case": {"identifier": "testOr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOr() {\n        Filter result = filters.or(ff, a, b);\n        assertEquals(ff.or(a, b), result);\n    }", "signature": "void testOr()", "full_signature": "@Test public void testOr()", "class_method_signature": "FiltersTest.testOr()", "testcase": true, "constructor": false, "invocations": ["or", "assertEquals", "or"]}, "focal_class": {"identifier": "Filters", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int NOTFOUND = -1;", "modifier": "public static final", "type": "int", "declarator": "NOTFOUND = -1", "var_name": "NOTFOUND"}, {"original_string": "private static Filters STATIC = new Filters();", "modifier": "private static", "type": "Filters", "declarator": "STATIC = new Filters()", "var_name": "STATIC"}, {"original_string": "private static final boolean STRICT = false;", "modifier": "private static final", "type": "boolean", "declarator": "STRICT = false", "var_name": "STRICT"}, {"original_string": "org.opengis.filter.FilterFactory2 ff;", "modifier": "", "type": "org.opengis.filter.FilterFactory2", "declarator": "ff", "var_name": "ff"}], "methods": [{"identifier": "Filters", "parameters": "()", "modifiers": "public", "return": "", "signature": " Filters()", "full_signature": "public  Filters()", "class_method_signature": "Filters.Filters()", "testcase": false, "constructor": true}, {"identifier": "Filters", "parameters": "(org.opengis.filter.FilterFactory2 factory)", "modifiers": "public", "return": "", "signature": " Filters(org.opengis.filter.FilterFactory2 factory)", "full_signature": "public  Filters(org.opengis.filter.FilterFactory2 factory)", "class_method_signature": "Filters.Filters(org.opengis.filter.FilterFactory2 factory)", "testcase": false, "constructor": true}, {"identifier": "setFilterFactory", "parameters": "(org.opengis.filter.FilterFactory2 factory)", "modifiers": "public", "return": "void", "signature": "void setFilterFactory(org.opengis.filter.FilterFactory2 factory)", "full_signature": "public void setFilterFactory(org.opengis.filter.FilterFactory2 factory)", "class_method_signature": "Filters.setFilterFactory(org.opengis.filter.FilterFactory2 factory)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 )", "modifiers": "public static", "return": "Filter", "signature": "Filter and( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 )", "full_signature": "public static Filter and( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 )", "class_method_signature": "Filters.and( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 )", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 )", "modifiers": "public static", "return": "Filter", "signature": "Filter or( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 )", "full_signature": "public static Filter or( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 )", "class_method_signature": "Filters.or( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 )", "testcase": false, "constructor": false}, {"identifier": "duplicate", "parameters": "( Filter filter )", "modifiers": "public", "return": "Filter", "signature": "Filter duplicate( Filter filter )", "full_signature": "public Filter duplicate( Filter filter )", "class_method_signature": "Filters.duplicate( Filter filter )", "testcase": false, "constructor": false}, {"identifier": "getExpressionType", "parameters": "( org.opengis.filter.expression.Expression experssion )", "modifiers": "public static", "return": "short", "signature": "short getExpressionType( org.opengis.filter.expression.Expression experssion )", "full_signature": "public static short getExpressionType( org.opengis.filter.expression.Expression experssion )", "class_method_signature": "Filters.getExpressionType( org.opengis.filter.expression.Expression experssion )", "testcase": false, "constructor": false}, {"identifier": "getFilterType", "parameters": "( org.opengis.filter.Filter filter )", "modifiers": "public static", "return": "short", "signature": "short getFilterType( org.opengis.filter.Filter filter )", "full_signature": "public static short getFilterType( org.opengis.filter.Filter filter )", "class_method_signature": "Filters.getFilterType( org.opengis.filter.Filter filter )", "testcase": false, "constructor": false}, {"identifier": "asInt", "parameters": "( Expression expr )", "modifiers": "public static", "return": "int", "signature": "int asInt( Expression expr )", "full_signature": "public static int asInt( Expression expr )", "class_method_signature": "Filters.asInt( Expression expr )", "testcase": false, "constructor": false}, {"identifier": "asString", "parameters": "(Expression expr)", "modifiers": "public static", "return": "String", "signature": "String asString(Expression expr)", "full_signature": "public static String asString(Expression expr)", "class_method_signature": "Filters.asString(Expression expr)", "testcase": false, "constructor": false}, {"identifier": "asDouble", "parameters": "(Expression expr)", "modifiers": "public static", "return": "double", "signature": "double asDouble(Expression expr)", "full_signature": "public static double asDouble(Expression expr)", "class_method_signature": "Filters.asDouble(Expression expr)", "testcase": false, "constructor": false}, {"identifier": "asType", "parameters": "(Expression expr, Class<T> TYPE)", "modifiers": "public static", "return": "T", "signature": "T asType(Expression expr, Class<T> TYPE)", "full_signature": "public static T asType(Expression expr, Class<T> TYPE)", "class_method_signature": "Filters.asType(Expression expr, Class<T> TYPE)", "testcase": false, "constructor": false}, {"identifier": "number", "parameters": "(Object value)", "modifiers": "public static", "return": "double", "signature": "double number(Object value)", "full_signature": "public static double number(Object value)", "class_method_signature": "Filters.number(Object value)", "testcase": false, "constructor": false}, {"identifier": "gets", "parameters": "(String text, Class<T> TYPE)", "modifiers": "public static", "return": "T", "signature": "T gets(String text, Class<T> TYPE)", "full_signature": "public static T gets(String text, Class<T> TYPE)", "class_method_signature": "Filters.gets(String text, Class<T> TYPE)", "testcase": false, "constructor": false}, {"identifier": "puts", "parameters": "(double number)", "modifiers": "public static", "return": "String", "signature": "String puts(double number)", "full_signature": "public static String puts(double number)", "class_method_signature": "Filters.puts(double number)", "testcase": false, "constructor": false}, {"identifier": "puts", "parameters": "(Object obj)", "modifiers": "public static", "return": "String", "signature": "String puts(Object obj)", "full_signature": "public static String puts(Object obj)", "class_method_signature": "Filters.puts(Object obj)", "testcase": false, "constructor": false}, {"identifier": "puts", "parameters": "(Color color)", "modifiers": "public static", "return": "String", "signature": "String puts(Color color)", "full_signature": "public static String puts(Color color)", "class_method_signature": "Filters.puts(Color color)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Filter baseFilter, Filter targetFilter)", "modifiers": "public", "return": "Filter", "signature": "Filter remove(Filter baseFilter, Filter targetFilter)", "full_signature": "public Filter remove(Filter baseFilter, Filter targetFilter)", "class_method_signature": "Filters.remove(Filter baseFilter, Filter targetFilter)", "testcase": false, "constructor": false}, {"identifier": "removeFilter", "parameters": "( Filter baseFilter, Filter targetFilter )", "modifiers": "public static", "return": "Filter", "signature": "Filter removeFilter( Filter baseFilter, Filter targetFilter )", "full_signature": "public static Filter removeFilter( Filter baseFilter, Filter targetFilter )", "class_method_signature": "Filters.removeFilter( Filter baseFilter, Filter targetFilter )", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Filter baseFilter, final Filter targetFilter, boolean recurse)", "modifiers": "public", "return": "Filter", "signature": "Filter remove(Filter baseFilter, final Filter targetFilter, boolean recurse)", "full_signature": "public Filter remove(Filter baseFilter, final Filter targetFilter, boolean recurse)", "class_method_signature": "Filters.remove(Filter baseFilter, final Filter targetFilter, boolean recurse)", "testcase": false, "constructor": false}, {"identifier": "removeFilter", "parameters": "(Filter baseFilter, Filter targetFilter, boolean recurse)", "modifiers": "public static", "return": "Filter", "signature": "Filter removeFilter(Filter baseFilter, Filter targetFilter, boolean recurse)", "full_signature": "public static Filter removeFilter(Filter baseFilter, Filter targetFilter, boolean recurse)", "class_method_signature": "Filters.removeFilter(Filter baseFilter, Filter targetFilter, boolean recurse)", "testcase": false, "constructor": false}, {"identifier": "attributeNames", "parameters": "( Filter filter )", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> attributeNames( Filter filter )", "full_signature": "public Set<String> attributeNames( Filter filter )", "class_method_signature": "Filters.attributeNames( Filter filter )", "testcase": false, "constructor": false}, {"identifier": "attributeNames", "parameters": "(Filter filter, final SimpleFeatureType featureType)", "modifiers": "public static", "return": "String[]", "signature": "String[] attributeNames(Filter filter, final SimpleFeatureType featureType)", "full_signature": "public static String[] attributeNames(Filter filter, final SimpleFeatureType featureType)", "class_method_signature": "Filters.attributeNames(Filter filter, final SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "propertyNames", "parameters": "(Filter filter, final SimpleFeatureType featureType)", "modifiers": "public static", "return": "Set<PropertyName>", "signature": "Set<PropertyName> propertyNames(Filter filter, final SimpleFeatureType featureType)", "full_signature": "public static Set<PropertyName> propertyNames(Filter filter, final SimpleFeatureType featureType)", "class_method_signature": "Filters.propertyNames(Filter filter, final SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "propertyNames", "parameters": "(Filter filter)", "modifiers": "public static", "return": "Set<PropertyName>", "signature": "Set<PropertyName> propertyNames(Filter filter)", "full_signature": "public static Set<PropertyName> propertyNames(Filter filter)", "class_method_signature": "Filters.propertyNames(Filter filter)", "testcase": false, "constructor": false}, {"identifier": "propertyNames", "parameters": "(Expression expression,\n            final SimpleFeatureType featureType)", "modifiers": "public static", "return": "Set<PropertyName>", "signature": "Set<PropertyName> propertyNames(Expression expression,\n            final SimpleFeatureType featureType)", "full_signature": "public static Set<PropertyName> propertyNames(Expression expression,\n            final SimpleFeatureType featureType)", "class_method_signature": "Filters.propertyNames(Expression expression,\n            final SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "propertyNames", "parameters": "(Expression expression)", "modifiers": "public static", "return": "Set<PropertyName>", "signature": "Set<PropertyName> propertyNames(Expression expression)", "full_signature": "public static Set<PropertyName> propertyNames(Expression expression)", "class_method_signature": "Filters.propertyNames(Expression expression)", "testcase": false, "constructor": false}, {"identifier": "uses", "parameters": "(Filter filter, final String propertyName )", "modifiers": "static", "return": "boolean", "signature": "boolean uses(Filter filter, final String propertyName )", "full_signature": "static boolean uses(Filter filter, final String propertyName )", "class_method_signature": "Filters.uses(Filter filter, final String propertyName )", "testcase": false, "constructor": false}, {"identifier": "hasChildren", "parameters": "( Filter filter )", "modifiers": "static public", "return": "boolean", "signature": "boolean hasChildren( Filter filter )", "full_signature": "static public boolean hasChildren( Filter filter )", "class_method_signature": "Filters.hasChildren( Filter filter )", "testcase": false, "constructor": false}, {"identifier": "children", "parameters": "( Filter filter )", "modifiers": "static public", "return": "ArrayList<Filter>", "signature": "ArrayList<Filter> children( Filter filter )", "full_signature": "static public ArrayList<Filter> children( Filter filter )", "class_method_signature": "Filters.children( Filter filter )", "testcase": false, "constructor": false}, {"identifier": "children", "parameters": "( Filter filter, boolean all )", "modifiers": "static public", "return": "ArrayList<Filter>", "signature": "ArrayList<Filter> children( Filter filter, boolean all )", "full_signature": "static public ArrayList<Filter> children( Filter filter, boolean all )", "class_method_signature": "Filters.children( Filter filter, boolean all )", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(Filter filter, Class<T> filterType, String propertyName )", "modifiers": "public static", "return": "T", "signature": "T search(Filter filter, Class<T> filterType, String propertyName )", "full_signature": "public static T search(Filter filter, Class<T> filterType, String propertyName )", "class_method_signature": "Filters.search(Filter filter, Class<T> filterType, String propertyName )", "testcase": false, "constructor": false}, {"identifier": "findPropertyName", "parameters": "(Filter filter)", "modifiers": "public static", "return": "String", "signature": "String findPropertyName(Filter filter)", "full_signature": "public static String findPropertyName(Filter filter)", "class_method_signature": "Filters.findPropertyName(Filter filter)", "testcase": false, "constructor": false}, {"identifier": "findAllByTypeAndName", "parameters": "(Filter filter, Class<T> filterType, String property)", "modifiers": "static", "return": "List<T>", "signature": "List<T> findAllByTypeAndName(Filter filter, Class<T> filterType, String property)", "full_signature": "static List<T> findAllByTypeAndName(Filter filter, Class<T> filterType, String property)", "class_method_signature": "Filters.findAllByTypeAndName(Filter filter, Class<T> filterType, String property)", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/filter/Filters.java"}, "focal_method": {"identifier": "or", "parameters": "( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 )", "modifiers": "public static", "return": "Filter", "body": "public static Filter or( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 ){\n        ArrayList<Filter> list = new ArrayList<Filter>();\n        if( filter1 == null ){\n            // ignore\n        }\n        else if( filter1 instanceof Or){\n            Or some = (Or) filter1;            \n            list.addAll( some.getChildren() );\n        }\n        else {\n            list.add( filter1 );\n        }\n        \n        if( filter2 == null){\n            // ignore\n        }\n        else if( filter2 instanceof Or){\n            Or more = (Or) filter2;            \n            list.addAll( more.getChildren() );\n        }\n        else {\n            list.add( filter2 );\n        }\n        \n        if( list.size() == 0 ){\n            return Filter.EXCLUDE;\n        }\n        else if( list.size() == 1 ){\n            return list.get(0);\n        }\n        else {\n            return ff.or( list );\n        }\n    }", "signature": "Filter or( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 )", "full_signature": "public static Filter or( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 )", "class_method_signature": "Filters.or( org.opengis.filter.FilterFactory ff, Filter filter1, Filter filter2 )", "testcase": false, "constructor": false, "invocations": ["addAll", "getChildren", "add", "addAll", "getChildren", "add", "size", "size", "get", "or"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}