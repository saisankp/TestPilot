{"test_class": {"identifier": "FastLevelIndexWalkerTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/core/index/FastLevelIndexWalkerTest.java"}, "test_case": {"identifier": "shouldFindNodeFromTestSet", "parameters": "(String[] levelValues, int expectedValue)", "modifiers": "@Test(dataProvider = \"findNodeSearchSet\") public", "return": "void", "body": "@Test(dataProvider = \"findNodeSearchSet\")\n    public void shouldFindNodeFromTestSet(String[] levelValues, int expectedValue) {\n        // given\n        LevelIndex<Integer> levelIndex = levelIndex().withLevelCount(3).build();\n\n        levelIndex.add(new String[]{\"A\", \"B\", \"C\"}, 1);\n        levelIndex.add(new String[]{\"A\", \"B\", \"*\"}, 9);\n        levelIndex.add(new String[]{\"A\", \"E\", \"D\"}, 11);\n        levelIndex.add(new String[]{\"A\", \"*\", \"D\"}, 12);\n        levelIndex.add(new String[]{\"A\", \"*\", \"*\"}, 13);\n        levelIndex.add(new String[]{\"*\", \"Z\", \"Z\"}, 21);\n        levelIndex.add(new String[]{\"*\", \"Z\", \"*\"}, 22);\n        levelIndex.add(new String[]{\"*\", \"*\", \"*\"}, 99);\n\n        FastLevelIndexWalker<Integer> walker = new FastLevelIndexWalker<Integer>(levelIndex, levelValues);\n\n        // when\n        List<Integer> node = walker.find();\n\n        // then\n        assertThat(node).containsExactly(expectedValue);\n    }", "signature": "void shouldFindNodeFromTestSet(String[] levelValues, int expectedValue)", "full_signature": "@Test(dataProvider = \"findNodeSearchSet\") public void shouldFindNodeFromTestSet(String[] levelValues, int expectedValue)", "class_method_signature": "FastLevelIndexWalkerTest.shouldFindNodeFromTestSet(String[] levelValues, int expectedValue)", "testcase": true, "constructor": false, "invocations": ["build", "withLevelCount", "levelIndex", "add", "add", "add", "add", "add", "add", "add", "add", "find", "containsExactly", "assertThat"]}, "focal_class": {"identifier": "FastLevelIndexWalker", "superclass": "", "interfaces": "implements LevelIndexWalker<T>", "fields": [{"original_string": "private final LevelIndex<T> index;", "modifier": "private final", "type": "LevelIndex<T>", "declarator": "index", "var_name": "index"}, {"original_string": "private final String[] levelValues;", "modifier": "private final", "type": "String[]", "declarator": "levelValues", "var_name": "levelValues"}], "methods": [{"identifier": "FastLevelIndexWalker", "parameters": "(LevelIndex<T> index, String... levelValues)", "modifiers": "public", "return": "", "signature": " FastLevelIndexWalker(LevelIndex<T> index, String... levelValues)", "full_signature": "public  FastLevelIndexWalker(LevelIndex<T> index, String... levelValues)", "class_method_signature": "FastLevelIndexWalker.FastLevelIndexWalker(LevelIndex<T> index, String... levelValues)", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "()", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> find()", "full_signature": "@Override public List<T> find()", "class_method_signature": "FastLevelIndexWalker.find()", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(LevelNode<T> currentNode, int currentDepth)", "modifiers": "private", "return": "LevelNode<T>", "signature": "LevelNode<T> find(LevelNode<T> currentNode, int currentDepth)", "full_signature": "private LevelNode<T> find(LevelNode<T> currentNode, int currentDepth)", "class_method_signature": "FastLevelIndexWalker.find(LevelNode<T> currentNode, int currentDepth)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(LevelNode<T> currentNode, String val, Matcher matcher, Type<?> type, int currentDepth)", "modifiers": "private", "return": "LevelNode<T>", "signature": "LevelNode<T> match(LevelNode<T> currentNode, String val, Matcher matcher, Type<?> type, int currentDepth)", "full_signature": "private LevelNode<T> match(LevelNode<T> currentNode, String val, Matcher matcher, Type<?> type, int currentDepth)", "class_method_signature": "FastLevelIndexWalker.match(LevelNode<T> currentNode, String val, Matcher matcher, Type<?> type, int currentDepth)", "testcase": false, "constructor": false}, {"identifier": "patternMatches", "parameters": "(String value, Matcher matcher, Type<?> type, String pattern)", "modifiers": "private", "return": "boolean", "signature": "boolean patternMatches(String value, Matcher matcher, Type<?> type, String pattern)", "full_signature": "private boolean patternMatches(String value, Matcher matcher, Type<?> type, String pattern)", "class_method_signature": "FastLevelIndexWalker.patternMatches(String value, Matcher matcher, Type<?> type, String pattern)", "testcase": false, "constructor": false}, {"identifier": "traverseChildNode", "parameters": "(LevelNode<T> child, int currentDepth)", "modifiers": "private", "return": "LevelNode<T>", "signature": "LevelNode<T> traverseChildNode(LevelNode<T> child, int currentDepth)", "full_signature": "private LevelNode<T> traverseChildNode(LevelNode<T> child, int currentDepth)", "class_method_signature": "FastLevelIndexWalker.traverseChildNode(LevelNode<T> child, int currentDepth)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/core/index/FastLevelIndexWalker.java"}, "focal_method": {"identifier": "find", "parameters": "()", "modifiers": "@Override public", "return": "List<T>", "body": "@Override\n    public List<T> find() {\n        LevelNode<T> node = find(index.getRoot(), 0);\n        return node != null ? node.getLeafList() : null;\n    }", "signature": "List<T> find()", "full_signature": "@Override public List<T> find()", "class_method_signature": "FastLevelIndexWalker.find()", "testcase": false, "constructor": false, "invocations": ["find", "getRoot", "getLeafList"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}