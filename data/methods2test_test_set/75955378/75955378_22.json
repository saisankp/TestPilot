{"test_class": {"identifier": "GeoIpOperationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "GeoIpOperation op;", "modifier": "", "type": "GeoIpOperation", "declarator": "op", "var_name": "op"}], "file": "operations/src/test/java/com/nextdoor/bender/operations/geo/GeoIpOperationTest.java"}, "test_case": {"identifier": "testInvalidIpRequired", "parameters": "()", "modifiers": "@Test(expected = UnknownHostException.class) public", "return": "void", "body": "@Test(expected = UnknownHostException.class)\n  public void testInvalidIpRequired() throws Throwable {\n    GeoIpOperation op = setup(Arrays.asList(GeoProperty.LOCATION), true);\n\n    DummpyMapEvent devent = new DummpyMapEvent();\n    devent.setField(\"ip_address\", \"noanip\");\n\n    InternalEvent ievent = new InternalEvent(\"\", null, 0);\n    ievent.setEventObj(devent);\n\n    try {\n      op.perform(ievent);\n    } catch (OperationException e) {\n      throw e.getCause();\n    }\n  }", "signature": "void testInvalidIpRequired()", "full_signature": "@Test(expected = UnknownHostException.class) public void testInvalidIpRequired()", "class_method_signature": "GeoIpOperationTest.testInvalidIpRequired()", "testcase": true, "constructor": false, "invocations": ["setup", "asList", "setField", "setEventObj", "perform", "getCause"]}, "focal_class": {"identifier": "GeoIpOperation", "superclass": "", "interfaces": "implements EventOperation", "fields": [{"original_string": "private final String pathToIpAddress;", "modifier": "private final", "type": "String", "declarator": "pathToIpAddress", "var_name": "pathToIpAddress"}, {"original_string": "private final String destFieldName;", "modifier": "private final", "type": "String", "declarator": "destFieldName", "var_name": "destFieldName"}, {"original_string": "private final DatabaseReader databaseReader;", "modifier": "private final", "type": "DatabaseReader", "declarator": "databaseReader", "var_name": "databaseReader"}, {"original_string": "private final List<GeoProperty> geoProperties;", "modifier": "private final", "type": "List<GeoProperty>", "declarator": "geoProperties", "var_name": "geoProperties"}, {"original_string": "private final boolean required;", "modifier": "private final", "type": "boolean", "declarator": "required", "var_name": "required"}], "methods": [{"identifier": "GeoIpOperation", "parameters": "(String pathToIpAddress, String destFieldName, DatabaseReader databaseReader,\n      List<GeoProperty> geoProperties, boolean required)", "modifiers": "public", "return": "", "signature": " GeoIpOperation(String pathToIpAddress, String destFieldName, DatabaseReader databaseReader,\n      List<GeoProperty> geoProperties, boolean required)", "full_signature": "public  GeoIpOperation(String pathToIpAddress, String destFieldName, DatabaseReader databaseReader,\n      List<GeoProperty> geoProperties, boolean required)", "class_method_signature": "GeoIpOperation.GeoIpOperation(String pathToIpAddress, String destFieldName, DatabaseReader databaseReader,\n      List<GeoProperty> geoProperties, boolean required)", "testcase": false, "constructor": true}, {"identifier": "perform", "parameters": "(InternalEvent ievent)", "modifiers": "@Override public", "return": "InternalEvent", "signature": "InternalEvent perform(InternalEvent ievent)", "full_signature": "@Override public InternalEvent perform(InternalEvent ievent)", "class_method_signature": "GeoIpOperation.perform(InternalEvent ievent)", "testcase": false, "constructor": false}], "file": "operations/src/main/java/com/nextdoor/bender/operations/geo/GeoIpOperation.java"}, "focal_method": {"identifier": "perform", "parameters": "(InternalEvent ievent)", "modifiers": "@Override public", "return": "InternalEvent", "body": "@Override\n  public InternalEvent perform(InternalEvent ievent) {\n    String ipStr = null;\n\n    /*\n     * Get field containing an IP address\n     */\n    try {\n      ipStr = ievent.getEventObj().getFieldAsString(this.pathToIpAddress);\n    } catch (FieldNotFoundException e) {\n      if (!this.required) {\n        return ievent;\n      }\n      throw new OperationException(\"ip address field \" + this.pathToIpAddress + \" does not exist\");\n    }\n\n    if (ipStr == null) {\n      if (!this.required) {\n        return ievent;\n      }\n      throw new OperationException(\"ip address field \" + this.pathToIpAddress + \" was null\");\n    }\n\n    /*\n     * Sometimes the field contains comma separated ip addresses (ie forwarded web requests). In\n     * this case pick the first value in the list which is typically the user.\n     */\n    if (!ipStr.isEmpty() && ipStr.contains(\",\")) {\n      ipStr = ipStr.split(\",\")[0];\n    }\n\n    InetAddress ipAddress = null;\n    try {\n      ipAddress = InetAddress.getByName(ipStr);\n    } catch (UnknownHostException e) {\n      if (!this.required) {\n        return ievent;\n      }\n      throw new OperationException(e);\n    }\n\n    if (ipAddress == null) {\n      if (!this.required) {\n        return ievent;\n      }\n      throw new OperationException(\"ip address \" + ipStr + \" did not resolve\");\n    }\n\n    CityResponse response = null;\n    try {\n      response = this.databaseReader.city(ipAddress);\n    } catch (IOException | GeoIp2Exception e) {\n      if (!this.required) {\n        return ievent;\n      }\n      throw new OperationException(e);\n    }\n\n    HashMap<String, Object> geo = new HashMap<String, Object>(1);\n    for (GeoProperty property : this.geoProperties) {\n      switch (property) {\n        case COUNTRY_NAME:\n          if (response.getCountry() == null) {\n            if (!this.required) {\n              return ievent;\n            }\n            throw new OperationException(\"country returned null\");\n          }\n\n          geo.put(\"country_name\", response.getCountry().getName());\n          break;\n        case COUNTRY_ISO_CODE:\n          if (response.getCountry() == null) {\n            if (!this.required) {\n              return ievent;\n            }\n            throw new OperationException(\"country returned null\");\n          }\n\n          geo.put(\"country_iso_code\", response.getCountry().getIsoCode());\n          break;\n        case SUBDIVISION_NAME:\n          if (response.getMostSpecificSubdivision() == null) {\n            if (!this.required) {\n              return ievent;\n            }\n            throw new OperationException(\"MostSpecificSubdivision returned null\");\n          }\n\n          geo.put(\"subdivision_name\", response.getMostSpecificSubdivision().getName());\n          break;\n        case SUBDIVISION_ISO_CODE:\n          if (response.getMostSpecificSubdivision() == null) {\n            if (!this.required) {\n              return ievent;\n            }\n            throw new OperationException(\"MostSpecificSubdivision returned null\");\n          }\n\n          geo.put(\"subdivision_iso_code\", response.getMostSpecificSubdivision().getIsoCode());\n          break;\n        case CITY_NAME:\n          if (response.getCity() == null) {\n            if (!this.required) {\n              return ievent;\n            }\n            throw new OperationException(\"city returned null\");\n          }\n\n          geo.put(\"city_name\", response.getCity().getName());\n          break;\n        case POSTAL_CODE:\n          if (response.getPostal() == null) {\n            if (!this.required) {\n              return ievent;\n            }\n            throw new OperationException(\"postal returned null\");\n          }\n\n          geo.put(\"postal_code\", response.getPostal().getCode());\n          break;\n        case LOCATION:\n          if (response.getLocation() == null) {\n            if (!this.required) {\n              return ievent;\n            }\n            throw new OperationException(\"location returned null\");\n          }\n\n          Double lat = response.getLocation().getLatitude();\n          Double lon = response.getLocation().getLongitude();\n\n          if (lat == null || lon == null) {\n            if (!this.required) {\n              return ievent;\n            }\n            throw new OperationException(\"error getting lat/lon\");\n          }\n\n          HashMap<String, Object> location = new HashMap<String, Object>(2);\n          location.put(\"lat\", lat);\n          location.put(\"lon\", lon);\n          geo.put(\"location\", location);\n          break;\n      }\n    }\n\n    try {\n      ievent.getEventObj().setField(this.destFieldName, geo);\n    } catch (FieldNotFoundException e) {\n      throw new OperationException(e);\n    }\n\n    return ievent;\n  }", "signature": "InternalEvent perform(InternalEvent ievent)", "full_signature": "@Override public InternalEvent perform(InternalEvent ievent)", "class_method_signature": "GeoIpOperation.perform(InternalEvent ievent)", "testcase": false, "constructor": false, "invocations": ["getFieldAsString", "getEventObj", "isEmpty", "contains", "split", "getByName", "city", "getCountry", "put", "getName", "getCountry", "getCountry", "put", "getIsoCode", "getCountry", "getMostSpecificSubdivision", "put", "getName", "getMostSpecificSubdivision", "getMostSpecificSubdivision", "put", "getIsoCode", "getMostSpecificSubdivision", "getCity", "put", "getName", "getCity", "getPostal", "put", "getCode", "getPostal", "getLocation", "getLatitude", "getLocation", "getLongitude", "getLocation", "put", "put", "put", "setField", "getEventObj"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}