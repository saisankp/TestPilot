{"test_class": {"identifier": "ServletContainerRequestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpServletRequest httpServletRequest;", "modifier": "private", "type": "HttpServletRequest", "declarator": "httpServletRequest", "var_name": "httpServletRequest"}], "file": "everrest-core/src/test/java/org/everrest/core/servlet/ServletContainerRequestTest.java"}, "test_case": {"identifier": "getsSecurityContextFromServletRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getsSecurityContextFromServletRequest() throws Exception {\n        when(httpServletRequest.getUserPrincipal()).thenReturn(new SimplePrincipal(\"andrew\"));\n        when(httpServletRequest.isUserInRole(\"user\")).thenReturn(true);\n        when(httpServletRequest.isSecure()).thenReturn(false);\n        when(httpServletRequest.getAuthType()).thenReturn(\"BASIC_AUTH\");\n\n        ServletContainerRequest servletContainerRequest = ServletContainerRequest.create(httpServletRequest);\n\n        assertEquals(\"BASIC_AUTH\", servletContainerRequest.getAuthenticationScheme());\n        assertEquals(\"andrew\", servletContainerRequest.getUserPrincipal().getName());\n        assertFalse(servletContainerRequest.isSecure());\n        assertTrue(servletContainerRequest.isUserInRole(\"user\"));\n    }", "signature": "void getsSecurityContextFromServletRequest()", "full_signature": "@Test public void getsSecurityContextFromServletRequest()", "class_method_signature": "ServletContainerRequestTest.getsSecurityContextFromServletRequest()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getUserPrincipal", "thenReturn", "when", "isUserInRole", "thenReturn", "when", "isSecure", "thenReturn", "when", "getAuthType", "create", "assertEquals", "getAuthenticationScheme", "assertEquals", "getName", "getUserPrincipal", "assertFalse", "isSecure", "assertTrue", "isUserInRole"]}, "focal_class": {"identifier": "ServletContainerRequest", "superclass": "extends ContainerRequest", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(ServletContainerRequest.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOG = LoggerFactory.getLogger(ServletContainerRequest.class)", "var_name": "LOG"}], "methods": [{"identifier": "create", "parameters": "(final HttpServletRequest req)", "modifiers": "public static", "return": "ServletContainerRequest", "signature": "ServletContainerRequest create(final HttpServletRequest req)", "full_signature": "public static ServletContainerRequest create(final HttpServletRequest req)", "class_method_signature": "ServletContainerRequest.create(final HttpServletRequest req)", "testcase": false, "constructor": false}, {"identifier": "ServletContainerRequest", "parameters": "(String method, URI requestUri, URI baseUri, InputStream entityStream,\n                                    MultivaluedMap<String, String> httpHeaders, SecurityContext securityContext)", "modifiers": "private", "return": "", "signature": " ServletContainerRequest(String method, URI requestUri, URI baseUri, InputStream entityStream,\n                                    MultivaluedMap<String, String> httpHeaders, SecurityContext securityContext)", "full_signature": "private  ServletContainerRequest(String method, URI requestUri, URI baseUri, InputStream entityStream,\n                                    MultivaluedMap<String, String> httpHeaders, SecurityContext securityContext)", "class_method_signature": "ServletContainerRequest.ServletContainerRequest(String method, URI requestUri, URI baseUri, InputStream entityStream,\n                                    MultivaluedMap<String, String> httpHeaders, SecurityContext securityContext)", "testcase": false, "constructor": true}, {"identifier": "getMethod", "parameters": "(HttpServletRequest servletRequest)", "modifiers": "private static", "return": "String", "signature": "String getMethod(HttpServletRequest servletRequest)", "full_signature": "private static String getMethod(HttpServletRequest servletRequest)", "class_method_signature": "ServletContainerRequest.getMethod(HttpServletRequest servletRequest)", "testcase": false, "constructor": false}, {"identifier": "getScheme", "parameters": "(HttpServletRequest servletRequest)", "modifiers": "private static", "return": "String", "signature": "String getScheme(HttpServletRequest servletRequest)", "full_signature": "private static String getScheme(HttpServletRequest servletRequest)", "class_method_signature": "ServletContainerRequest.getScheme(HttpServletRequest servletRequest)", "testcase": false, "constructor": false}, {"identifier": "getForwardedUrl", "parameters": "(HttpServletRequest servletRequest)", "modifiers": "private static", "return": "URL", "signature": "URL getForwardedUrl(HttpServletRequest servletRequest)", "full_signature": "private static URL getForwardedUrl(HttpServletRequest servletRequest)", "class_method_signature": "ServletContainerRequest.getForwardedUrl(HttpServletRequest servletRequest)", "testcase": false, "constructor": false}, {"identifier": "parseForwardedHostHeader", "parameters": "(String forwardedHostAndPort, HttpServletRequest servletRequest)", "modifiers": "private static", "return": "URL", "signature": "URL parseForwardedHostHeader(String forwardedHostAndPort, HttpServletRequest servletRequest)", "full_signature": "private static URL parseForwardedHostHeader(String forwardedHostAndPort, HttpServletRequest servletRequest)", "class_method_signature": "ServletContainerRequest.parseForwardedHostHeader(String forwardedHostAndPort, HttpServletRequest servletRequest)", "testcase": false, "constructor": false}, {"identifier": "getHeaders", "parameters": "(HttpServletRequest servletRequest)", "modifiers": "private static", "return": "MultivaluedMap<String, String>", "signature": "MultivaluedMap<String, String> getHeaders(HttpServletRequest servletRequest)", "full_signature": "private static MultivaluedMap<String, String> getHeaders(HttpServletRequest servletRequest)", "class_method_signature": "ServletContainerRequest.getHeaders(HttpServletRequest servletRequest)", "testcase": false, "constructor": false}, {"identifier": "getEntityStream", "parameters": "(HttpServletRequest servletRequest)", "modifiers": "private static", "return": "InputStream", "signature": "InputStream getEntityStream(HttpServletRequest servletRequest)", "full_signature": "private static InputStream getEntityStream(HttpServletRequest servletRequest)", "class_method_signature": "ServletContainerRequest.getEntityStream(HttpServletRequest servletRequest)", "testcase": false, "constructor": false}, {"identifier": "getSecurityContext", "parameters": "(final HttpServletRequest servletRequest)", "modifiers": "private static", "return": "SecurityContext", "signature": "SecurityContext getSecurityContext(final HttpServletRequest servletRequest)", "full_signature": "private static SecurityContext getSecurityContext(final HttpServletRequest servletRequest)", "class_method_signature": "ServletContainerRequest.getSecurityContext(final HttpServletRequest servletRequest)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/servlet/ServletContainerRequest.java"}, "focal_method": {"identifier": "create", "parameters": "(final HttpServletRequest req)", "modifiers": "public static", "return": "ServletContainerRequest", "body": "public static ServletContainerRequest create(final HttpServletRequest req) {\n        // If the URL is forwarded, obtain the forwarding information\n        final URL forwardedUrl = getForwardedUrl(req);\n        String host;\n        int port;\n        if (forwardedUrl == null) {\n            host = req.getServerName();\n            port = req.getServerPort();\n        } else {\n            host = forwardedUrl.getHost();\n            port = forwardedUrl.getPort();\n            if (port < 0) {\n                port = forwardedUrl.getDefaultPort();\n            }\n            LOG.debug(\"Assuming forwarded URL: {}\", forwardedUrl);\n        }\n\n        // The common URI prefix for both baseUri and requestUri\n        final StringBuilder commonUriBuilder = new StringBuilder();\n        final String scheme = getScheme(req);\n        commonUriBuilder.append(scheme);\n        commonUriBuilder.append(\"://\");\n        commonUriBuilder.append(host);\n        if (!(port < 0 || (port == 80 && \"http\".equals(scheme)) || (port == 443 && \"https\".equals(scheme)))) {\n            commonUriBuilder.append(':');\n            commonUriBuilder.append(port);\n        }\n        final String commonUriPrefix = commonUriBuilder.toString();\n\n        // The Base URI - up to the servlet path\n        final StringBuilder baseUriBuilder = new StringBuilder(commonUriPrefix);\n        baseUriBuilder.append(req.getContextPath());\n        baseUriBuilder.append(req.getServletPath());\n        final URI baseUri = URI.create(baseUriBuilder.toString());\n\n        // The RequestURI - everything in the URL\n        final StringBuilder requestUriBuilder = new StringBuilder(commonUriPrefix);\n        requestUriBuilder.append(req.getRequestURI());\n        final String queryString = req.getQueryString();\n        if (queryString != null) {\n            requestUriBuilder.append('?');\n            requestUriBuilder.append(queryString);\n        }\n        final URI requestUri = URI.create(requestUriBuilder.toString());\n        return new ServletContainerRequest(getMethod(req), requestUri, baseUri, getEntityStream(req), getHeaders(req),\n                                           getSecurityContext(req));\n    }", "signature": "ServletContainerRequest create(final HttpServletRequest req)", "full_signature": "public static ServletContainerRequest create(final HttpServletRequest req)", "class_method_signature": "ServletContainerRequest.create(final HttpServletRequest req)", "testcase": false, "constructor": false, "invocations": ["getForwardedUrl", "getServerName", "getServerPort", "getHost", "getPort", "getDefaultPort", "debug", "getScheme", "append", "append", "append", "equals", "equals", "append", "append", "toString", "append", "getContextPath", "append", "getServletPath", "create", "toString", "append", "getRequestURI", "getQueryString", "append", "append", "create", "toString", "getMethod", "getEntityStream", "getHeaders", "getSecurityContext"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}