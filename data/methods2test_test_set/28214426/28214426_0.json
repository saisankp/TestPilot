{"test_class": {"identifier": "MetricsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static double EPS = 0.000001;", "modifier": "private static", "type": "double", "declarator": "EPS = 0.000001", "var_name": "EPS"}, {"original_string": "MockTime time = new MockTime();", "modifier": "", "type": "MockTime", "declarator": "time = new MockTime()", "var_name": "time"}, {"original_string": "Metrics\n      metrics =\n      new Metrics(new MetricConfig(), Arrays.asList((MetricsReporter) new JmxReporter()), time);", "modifier": "", "type": "Metrics", "declarator": "metrics =\n      new Metrics(new MetricConfig(), Arrays.asList((MetricsReporter) new JmxReporter()), time)", "var_name": "metrics"}], "file": "metrics/src/test/java/io/confluent/common/metrics/MetricsTest.java"}, "test_case": {"identifier": "testBadSensorHiearchy", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testBadSensorHiearchy() {\n    Sensor p = metrics.sensor(\"parent\");\n    Sensor c1 = metrics.sensor(\"child1\", p);\n    Sensor c2 = metrics.sensor(\"child2\", p);\n    metrics.sensor(\"gc\", c1, c2); // should fail\n  }", "signature": "void testBadSensorHiearchy()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testBadSensorHiearchy()", "class_method_signature": "MetricsTest.testBadSensorHiearchy()", "testcase": true, "constructor": false, "invocations": ["sensor", "sensor", "sensor", "sensor"]}, "focal_class": {"identifier": "Metrics", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MetricConfig config;", "modifier": "private final", "type": "MetricConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final ConcurrentMap<MetricName, KafkaMetric> metrics;", "modifier": "private final", "type": "ConcurrentMap<MetricName, KafkaMetric>", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private final ConcurrentMap<String, Sensor> sensors;", "modifier": "private final", "type": "ConcurrentMap<String, Sensor>", "declarator": "sensors", "var_name": "sensors"}, {"original_string": "private final List<MetricsReporter> reporters;", "modifier": "private final", "type": "List<MetricsReporter>", "declarator": "reporters", "var_name": "reporters"}, {"original_string": "private final Time time;", "modifier": "private final", "type": "Time", "declarator": "time", "var_name": "time"}], "methods": [{"identifier": "Metrics", "parameters": "()", "modifiers": "public", "return": "", "signature": " Metrics()", "full_signature": "public  Metrics()", "class_method_signature": "Metrics.Metrics()", "testcase": false, "constructor": true}, {"identifier": "Metrics", "parameters": "(Time time)", "modifiers": "public", "return": "", "signature": " Metrics(Time time)", "full_signature": "public  Metrics(Time time)", "class_method_signature": "Metrics.Metrics(Time time)", "testcase": false, "constructor": true}, {"identifier": "Metrics", "parameters": "(MetricConfig defaultConfig)", "modifiers": "public", "return": "", "signature": " Metrics(MetricConfig defaultConfig)", "full_signature": "public  Metrics(MetricConfig defaultConfig)", "class_method_signature": "Metrics.Metrics(MetricConfig defaultConfig)", "testcase": false, "constructor": true}, {"identifier": "Metrics", "parameters": "(MetricConfig defaultConfig, List<MetricsReporter> reporters, Time time)", "modifiers": "public", "return": "", "signature": " Metrics(MetricConfig defaultConfig, List<MetricsReporter> reporters, Time time)", "full_signature": "public  Metrics(MetricConfig defaultConfig, List<MetricsReporter> reporters, Time time)", "class_method_signature": "Metrics.Metrics(MetricConfig defaultConfig, List<MetricsReporter> reporters, Time time)", "testcase": false, "constructor": true}, {"identifier": "getSensor", "parameters": "(String name)", "modifiers": "public", "return": "Sensor", "signature": "Sensor getSensor(String name)", "full_signature": "public Sensor getSensor(String name)", "class_method_signature": "Metrics.getSensor(String name)", "testcase": false, "constructor": false}, {"identifier": "sensor", "parameters": "(String name)", "modifiers": "public", "return": "Sensor", "signature": "Sensor sensor(String name)", "full_signature": "public Sensor sensor(String name)", "class_method_signature": "Metrics.sensor(String name)", "testcase": false, "constructor": false}, {"identifier": "sensor", "parameters": "(String name, Sensor... parents)", "modifiers": "public", "return": "Sensor", "signature": "Sensor sensor(String name, Sensor... parents)", "full_signature": "public Sensor sensor(String name, Sensor... parents)", "class_method_signature": "Metrics.sensor(String name, Sensor... parents)", "testcase": false, "constructor": false}, {"identifier": "sensor", "parameters": "(String name, MetricConfig config, Sensor... parents)", "modifiers": "public synchronized", "return": "Sensor", "signature": "Sensor sensor(String name, MetricConfig config, Sensor... parents)", "full_signature": "public synchronized Sensor sensor(String name, MetricConfig config, Sensor... parents)", "class_method_signature": "Metrics.sensor(String name, MetricConfig config, Sensor... parents)", "testcase": false, "constructor": false}, {"identifier": "addMetric", "parameters": "(MetricName metricName, Measurable measurable)", "modifiers": "public", "return": "void", "signature": "void addMetric(MetricName metricName, Measurable measurable)", "full_signature": "public void addMetric(MetricName metricName, Measurable measurable)", "class_method_signature": "Metrics.addMetric(MetricName metricName, Measurable measurable)", "testcase": false, "constructor": false}, {"identifier": "addMetric", "parameters": "(MetricName metricName, MetricConfig config, Measurable\n      measurable)", "modifiers": "public synchronized", "return": "void", "signature": "void addMetric(MetricName metricName, MetricConfig config, Measurable\n      measurable)", "full_signature": "public synchronized void addMetric(MetricName metricName, MetricConfig config, Measurable\n      measurable)", "class_method_signature": "Metrics.addMetric(MetricName metricName, MetricConfig config, Measurable\n      measurable)", "testcase": false, "constructor": false}, {"identifier": "addReporter", "parameters": "(MetricsReporter reporter)", "modifiers": "public synchronized", "return": "void", "signature": "void addReporter(MetricsReporter reporter)", "full_signature": "public synchronized void addReporter(MetricsReporter reporter)", "class_method_signature": "Metrics.addReporter(MetricsReporter reporter)", "testcase": false, "constructor": false}, {"identifier": "registerMetric", "parameters": "(KafkaMetric metric)", "modifiers": "synchronized", "return": "void", "signature": "void registerMetric(KafkaMetric metric)", "full_signature": "synchronized void registerMetric(KafkaMetric metric)", "class_method_signature": "Metrics.registerMetric(KafkaMetric metric)", "testcase": false, "constructor": false}, {"identifier": "metrics", "parameters": "()", "modifiers": "public", "return": "Map<MetricName, KafkaMetric>", "signature": "Map<MetricName, KafkaMetric> metrics()", "full_signature": "public Map<MetricName, KafkaMetric> metrics()", "class_method_signature": "Metrics.metrics()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "Metrics.close()", "testcase": false, "constructor": false}], "file": "metrics/src/main/java/io/confluent/common/metrics/Metrics.java"}, "focal_method": {"identifier": "sensor", "parameters": "(String name)", "modifiers": "public", "return": "Sensor", "body": "public Sensor sensor(String name) {\n    return sensor(name, null, (Sensor[]) null);\n  }", "signature": "Sensor sensor(String name)", "full_signature": "public Sensor sensor(String name)", "class_method_signature": "Metrics.sensor(String name)", "testcase": false, "constructor": false, "invocations": ["sensor"]}, "repository": {"repo_id": 28214426, "url": "https://github.com/confluentinc/common", "stars": 46, "created": "12/19/2014 4:38:00 AM +00:00", "updates": "2020-01-22T00:50:00+00:00", "fork": "False", "license": "licensed"}}