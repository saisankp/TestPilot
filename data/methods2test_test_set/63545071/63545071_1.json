{"test_class": {"identifier": "GraphNameTest", "superclass": "extends AbstractRosTest", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GraphNameTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GraphNameTest.class)", "var_name": "logger"}], "file": "rcljava/src/test/java/org/ros2/rcljava/namespace/GraphNameTest.java"}, "test_case": {"identifier": "testIsTopicFQN", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testIsTopicFQN() {\n        logger.debug(new Object(){}.getClass().getEnclosingMethod().getName());\n\n        // must start with a forward slash (/), i.e. they must be absolute\n        Assert.assertTrue(\"FQN must start with a forward slash.\", GraphName.isValidFQDN(\"/foo\"));\n        Assert.assertFalse(\"FQN must start with a forward slash.\", GraphName.isValidFQDN(\"foo\"));\n\n        // must not contain tilde (~) or curly braces ({})\n        Assert.assertFalse(\"FQN must not contain tilde.\", GraphName.isValidFQDN(\"~foo\"));\n        Assert.assertFalse(\"FQN must not contain curly braces.\", GraphName.isValidFQDN(\"foo/{bar}\"));\n\n        Assert.assertTrue(GraphName.isValidFQDN(\"/foo\"));\n        Assert.assertTrue(GraphName.isValidFQDN(\"/bar/baz\"));\n        Assert.assertTrue(GraphName.isValidFQDN(Topics.SCHEME + \"/ping\"));\n        Assert.assertTrue(GraphName.isValidFQDN(\"/_private/thing\"));\n        Assert.assertTrue(GraphName.isValidFQDN(\"/public_namespace/_private/thing\"));\n    }", "signature": "void testIsTopicFQN()", "full_signature": "@Test public final void testIsTopicFQN()", "class_method_signature": "GraphNameTest.testIsTopicFQN()", "testcase": true, "constructor": false, "invocations": ["debug", "getName", "getEnclosingMethod", "getClass", "assertTrue", "isValidFQDN", "assertFalse", "isValidFQDN", "assertFalse", "isValidFQDN", "assertFalse", "isValidFQDN", "assertTrue", "isValidFQDN", "assertTrue", "isValidFQDN", "assertTrue", "isValidFQDN", "assertTrue", "isValidFQDN", "assertTrue", "isValidFQDN"]}, "focal_class": {"identifier": "GraphName", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EMPTY = \"\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY = \"\"", "var_name": "EMPTY"}, {"original_string": "private static final String PRIVATE = \"_\";", "modifier": "private static final", "type": "String", "declarator": "PRIVATE = \"_\"", "var_name": "PRIVATE"}, {"original_string": "private static final String SEPARATOR = \"/\";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR = \"/\"", "var_name": "SEPARATOR"}, {"original_string": "private static final String RELATIVE = \"~\";", "modifier": "private static final", "type": "String", "declarator": "RELATIVE = \"~\"", "var_name": "RELATIVE"}, {"original_string": "private static final String PARAMETER = \"{}\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER = \"{}\"", "var_name": "PARAMETER"}, {"original_string": "private static final String RELATIVE_TOPIC = RELATIVE + SEPARATOR;", "modifier": "private static final", "type": "String", "declarator": "RELATIVE_TOPIC = RELATIVE + SEPARATOR", "var_name": "RELATIVE_TOPIC"}, {"original_string": "private static final String FORMAT_TOPIC = \"%s\" + SEPARATOR + \"%s\";", "modifier": "private static final", "type": "String", "declarator": "FORMAT_TOPIC = \"%s\" + SEPARATOR + \"%s\"", "var_name": "FORMAT_TOPIC"}, {"original_string": "private static Queue<Node> nodes = new LinkedBlockingQueue<Node>();", "modifier": "private static", "type": "Queue<Node>", "declarator": "nodes = new LinkedBlockingQueue<Node>()", "var_name": "nodes"}], "methods": [{"identifier": "GraphName", "parameters": "()", "modifiers": "private", "return": "", "signature": " GraphName()", "full_signature": "private  GraphName()", "class_method_signature": "GraphName.GraphName()", "testcase": false, "constructor": true}, {"identifier": "addNode", "parameters": "(final Node node)", "modifiers": "public static", "return": "void", "signature": "void addNode(final Node node)", "full_signature": "public static void addNode(final Node node)", "class_method_signature": "GraphName.addNode(final Node node)", "testcase": false, "constructor": false}, {"identifier": "removeNode", "parameters": "(final Node node)", "modifiers": "public static", "return": "void", "signature": "void removeNode(final Node node)", "full_signature": "public static void removeNode(final Node node)", "class_method_signature": "GraphName.removeNode(final Node node)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void dispose()", "full_signature": "public static void dispose()", "class_method_signature": "GraphName.dispose()", "testcase": false, "constructor": false}, {"identifier": "removeSheme", "parameters": "(final String url)", "modifiers": "private static", "return": "String", "signature": "String removeSheme(final String url)", "full_signature": "private static String removeSheme(final String url)", "class_method_signature": "GraphName.removeSheme(final String url)", "testcase": false, "constructor": false}, {"identifier": "getFullName", "parameters": "(final String nameSpace, final String nodeName)", "modifiers": "public static", "return": "String", "signature": "String getFullName(final String nameSpace, final String nodeName)", "full_signature": "public static String getFullName(final String nameSpace, final String nodeName)", "class_method_signature": "GraphName.getFullName(final String nameSpace, final String nodeName)", "testcase": false, "constructor": false}, {"identifier": "getFullName", "parameters": "(final Node node, final String name, final List<String> options)", "modifiers": "public static", "return": "String", "signature": "String getFullName(final Node node, final String name, final List<String> options)", "full_signature": "public static String getFullName(final Node node, final String name, final List<String> options)", "class_method_signature": "GraphName.getFullName(final Node node, final String name, final List<String> options)", "testcase": false, "constructor": false}, {"identifier": "isValidTopic", "parameters": "(final String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidTopic(final String name)", "full_signature": "public static boolean isValidTopic(final String name)", "class_method_signature": "GraphName.isValidTopic(final String name)", "testcase": false, "constructor": false}, {"identifier": "isValidSubstitution", "parameters": "(final String substitution)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidSubstitution(final String substitution)", "full_signature": "public static boolean isValidSubstitution(final String substitution)", "class_method_signature": "GraphName.isValidSubstitution(final String substitution)", "testcase": false, "constructor": false}, {"identifier": "isValidFQDN", "parameters": "(final String fqn)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidFQDN(final String fqn)", "full_signature": "public static boolean isValidFQDN(final String fqn)", "class_method_signature": "GraphName.isValidFQDN(final String fqn)", "testcase": false, "constructor": false}], "file": "rcljava/src/main/java/org/ros2/rcljava/namespace/GraphName.java"}, "focal_method": {"identifier": "isValidFQDN", "parameters": "(final String fqn)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isValidFQDN(final String fqn) {\n        boolean result = fqn != null;\n\n        if (result) {\n            final String topicName = GraphName.removeSheme(fqn);\n\n            result = GraphName.isValidTopic(topicName) &&\n                     topicName.startsWith(SEPARATOR) &&\n                     !topicName.contains(RELATIVE) &&\n                     !topicName.contains(PARAMETER);\n        }\n\n        return result;\n    }", "signature": "boolean isValidFQDN(final String fqn)", "full_signature": "public static boolean isValidFQDN(final String fqn)", "class_method_signature": "GraphName.isValidFQDN(final String fqn)", "testcase": false, "constructor": false, "invocations": ["removeSheme", "isValidTopic", "startsWith", "contains", "contains"]}, "repository": {"repo_id": 63545071, "url": "https://github.com/ros2java-alfred/ros2_java", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 1035, "license": "licensed"}}