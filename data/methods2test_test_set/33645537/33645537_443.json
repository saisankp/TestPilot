{"test_class": {"identifier": "CombinationOfIntegersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CombinationOfIntegers combinationOfIntegers;", "modifier": "private", "type": "CombinationOfIntegers", "declarator": "combinationOfIntegers", "var_name": "combinationOfIntegers"}], "file": "algs/src/test/java/com/github/pedrovgs/problem43/CombinationOfIntegersTest.java"}, "test_case": {"identifier": "shouldCalculateEveryCombination", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldCalculateEveryCombination() {\n    Set<Integer> input = new HashSet<Integer>();\n    input.add(1);\n    input.add(2);\n\n    Set<Set<Integer>> result = combinationOfIntegers.calculate(input);\n\n    assertSetContainsSet(result);\n    assertSetContainsSet(result, 1);\n    assertSetContainsSet(result, 2);\n    assertSetContainsSet(result, 1, 2);\n  }", "signature": "void shouldCalculateEveryCombination()", "full_signature": "@Test public void shouldCalculateEveryCombination()", "class_method_signature": "CombinationOfIntegersTest.shouldCalculateEveryCombination()", "testcase": true, "constructor": false, "invocations": ["add", "add", "calculate", "assertSetContainsSet", "assertSetContainsSet", "assertSetContainsSet", "assertSetContainsSet"]}, "focal_class": {"identifier": "CombinationOfIntegers", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "calculate", "parameters": "(Set<Integer> originalSet)", "modifiers": "public", "return": "Set<Set<Integer>>", "signature": "Set<Set<Integer>> calculate(Set<Integer> originalSet)", "full_signature": "public Set<Set<Integer>> calculate(Set<Integer> originalSet)", "class_method_signature": "CombinationOfIntegers.calculate(Set<Integer> originalSet)", "testcase": false, "constructor": false}, {"identifier": "validateInputSet", "parameters": "(Set<Integer> inputSet)", "modifiers": "private", "return": "void", "signature": "void validateInputSet(Set<Integer> inputSet)", "full_signature": "private void validateInputSet(Set<Integer> inputSet)", "class_method_signature": "CombinationOfIntegers.validateInputSet(Set<Integer> inputSet)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem43/CombinationOfIntegers.java"}, "focal_method": {"identifier": "calculate", "parameters": "(Set<Integer> originalSet)", "modifiers": "public", "return": "Set<Set<Integer>>", "body": "public Set<Set<Integer>> calculate(Set<Integer> originalSet) {\n    validateInputSet(originalSet);\n\n    Set<Set<Integer>> sets = new HashSet<Set<Integer>>();\n    //Base class returns the empty set.\n    if (originalSet.isEmpty()) {\n      sets.add(new HashSet<Integer>());\n      return sets;\n    }\n    //Take the first element in head.\n    List<Integer> list = new ArrayList<Integer>(originalSet);\n    Integer head = list.get(0);\n    //Generate a hash set without the first element\n    Set<Integer> rest = new HashSet<Integer>(list.subList(1, list.size()));\n    //Recursive call to iterate over every combination generated with the rest list.\n    for (Set<Integer> set : calculate(rest)) {\n      //Add every element and the head, the old set and the new set.\n      Set<Integer> newSet = new HashSet<Integer>();\n      newSet.add(head);\n      newSet.addAll(set);\n      sets.add(newSet);\n      sets.add(set);\n    }\n    return sets;\n  }", "signature": "Set<Set<Integer>> calculate(Set<Integer> originalSet)", "full_signature": "public Set<Set<Integer>> calculate(Set<Integer> originalSet)", "class_method_signature": "CombinationOfIntegers.calculate(Set<Integer> originalSet)", "testcase": false, "constructor": false, "invocations": ["validateInputSet", "isEmpty", "add", "get", "subList", "size", "calculate", "add", "addAll", "add", "add"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}