{"test_class": {"identifier": "TestJars", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONF_TMPJARS = \"tmpjars\";", "modifier": "private static final", "type": "String", "declarator": "CONF_TMPJARS = \"tmpjars\"", "var_name": "CONF_TMPJARS"}, {"original_string": "@Rule\n  public TemporaryFolder mTempDir = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "mTempDir = new TemporaryFolder()", "var_name": "mTempDir"}], "file": "kiji-mapreduce/src/test/java/org/kiji/mapreduce/util/TestJars.java"}, "test_case": {"identifier": "testGetJarPathForClassNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetJarPathForClassNotFound() throws ClassNotFoundException, IOException {\n    try {\n      // This will throw an exception because this class is not in a jar when being run.\n      Jars.getJarPathForClass(TestJars.class);\n      fail(\"ClassNotFoundException\");\n    } catch (ClassNotFoundException ce) {\n      assertEquals(\"Unable to find containing jar for class org.kiji.mapreduce.util.TestJars\",\n      ce.getMessage());\n    }\n  }", "signature": "void testGetJarPathForClassNotFound()", "full_signature": "@Test public void testGetJarPathForClassNotFound()", "class_method_signature": "TestJars.testGetJarPathForClassNotFound()", "testcase": true, "constructor": false, "invocations": ["getJarPathForClass", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "Jars", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Jars", "parameters": "()", "modifiers": "private", "return": "", "signature": " Jars()", "full_signature": "private  Jars()", "class_method_signature": "Jars.Jars()", "testcase": false, "constructor": true}, {"identifier": "getJarPathForClass", "parameters": "(Class<? extends Object> classObj)", "modifiers": "public static", "return": "String", "signature": "String getJarPathForClass(Class<? extends Object> classObj)", "full_signature": "public static String getJarPathForClass(Class<? extends Object> classObj)", "class_method_signature": "Jars.getJarPathForClass(Class<? extends Object> classObj)", "testcase": false, "constructor": false}], "file": "kiji-mapreduce/src/main/java/org/kiji/mapreduce/util/Jars.java"}, "focal_method": {"identifier": "getJarPathForClass", "parameters": "(Class<? extends Object> classObj)", "modifiers": "public static", "return": "String", "body": "public static String getJarPathForClass(Class<? extends Object> classObj)\n      throws ClassNotFoundException, IOException {\n    ClassLoader loader = classObj.getClassLoader();\n    String classFile = classObj.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n    for (Enumeration<URL> itr = loader.getResources(classFile); itr.hasMoreElements();) {\n      URL url = itr.nextElement();\n      if (\"jar\".equals(url.getProtocol())) {\n        String toReturn = url.getPath();\n        if (toReturn.startsWith(\"file:\")) {\n          toReturn = toReturn.substring(\"file:\".length());\n        }\n        // URLDecoder is a misnamed class, since it actually decodes\n        // x-www-form-urlencoded MIME type rather than actual\n        // URL encoding (which the file path has). Therefore it would\n        // decode +s to ' 's which is incorrect (spaces are actually\n        // either unencoded or encoded as \"%20\"). Replace +s first, so\n        // that they are kept sacred during the decoding process.\n        toReturn = toReturn.replaceAll(\"\\\\+\", \"%2B\");\n        toReturn = URLDecoder.decode(toReturn, \"UTF-8\");\n        return toReturn.replaceAll(\"!.*$\", \"\");\n      }\n    }\n    throw new ClassNotFoundException(\n        \"Unable to find containing jar for class \" + classObj.getName());\n  }", "signature": "String getJarPathForClass(Class<? extends Object> classObj)", "full_signature": "public static String getJarPathForClass(Class<? extends Object> classObj)", "class_method_signature": "Jars.getJarPathForClass(Class<? extends Object> classObj)", "testcase": false, "constructor": false, "invocations": ["getClassLoader", "replaceAll", "getName", "getResources", "hasMoreElements", "nextElement", "equals", "getProtocol", "getPath", "startsWith", "substring", "length", "replaceAll", "decode", "replaceAll", "getName"]}, "repository": {"repo_id": 7249073, "url": "https://github.com/kijiproject/kiji-mapreduce", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 12, "size": 5029, "license": "licensed"}}