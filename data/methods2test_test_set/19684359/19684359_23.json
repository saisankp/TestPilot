{"test_class": {"identifier": "RetryDeterminerTest", "superclass": "", "interfaces": "", "fields": [], "file": "util/src/test/java/com/google/cloud/hadoop/util/RetryDeterminerTest.java"}, "test_case": {"identifier": "serverRetriesCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void serverRetriesCorrectly() throws IOException {\n    assertThat(RetryDeterminer.SERVER_ERRORS.shouldRetry(new SocketTimeoutException())).isFalse();\n    assertThat(RetryDeterminer.SERVER_ERRORS.shouldRetry(makeHttpException(300))).isFalse();\n    assertThat(RetryDeterminer.SERVER_ERRORS.shouldRetry(makeHttpException(504))).isTrue();\n    assertThat(RetryDeterminer.SERVER_ERRORS.shouldRetry(makeHttpException(500))).isTrue();\n    assertThat(RetryDeterminer.SERVER_ERRORS.shouldRetry(makeHttpException(599))).isTrue();\n    assertThat(RetryDeterminer.SERVER_ERRORS.shouldRetry(makeHttpException(499))).isFalse();\n  }", "signature": "void serverRetriesCorrectly()", "full_signature": "@Test public void serverRetriesCorrectly()", "class_method_signature": "RetryDeterminerTest.serverRetriesCorrectly()", "testcase": true, "constructor": false, "invocations": ["isFalse", "assertThat", "shouldRetry", "isFalse", "assertThat", "shouldRetry", "makeHttpException", "isTrue", "assertThat", "shouldRetry", "makeHttpException", "isTrue", "assertThat", "shouldRetry", "makeHttpException", "isTrue", "assertThat", "shouldRetry", "makeHttpException", "isFalse", "assertThat", "shouldRetry", "makeHttpException"]}, "focal_class": {"identifier": "RetryDeterminer", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final RetryDeterminer<Exception> DEFAULT = new RetryDeterminer<Exception>() {\n    @Override\n    public boolean shouldRetry(Exception e) {\n      if (e instanceof IOException) {\n        return SOCKET_ERRORS.shouldRetry((IOException) e)\n            || SERVER_ERRORS.shouldRetry((IOException) e);\n      }\n      return false;\n    }\n  };", "modifier": "public static final", "type": "RetryDeterminer<Exception>", "declarator": "DEFAULT = new RetryDeterminer<Exception>() {\n    @Override\n    public boolean shouldRetry(Exception e) {\n      if (e instanceof IOException) {\n        return SOCKET_ERRORS.shouldRetry((IOException) e)\n            || SERVER_ERRORS.shouldRetry((IOException) e);\n      }\n      return false;\n    }\n  }", "var_name": "DEFAULT"}, {"original_string": "public static final RetryDeterminer<IOException> SOCKET_ERRORS =\n      createSocketErrorRetryDeterminer(ApiErrorExtractor.INSTANCE);", "modifier": "public static final", "type": "RetryDeterminer<IOException>", "declarator": "SOCKET_ERRORS =\n      createSocketErrorRetryDeterminer(ApiErrorExtractor.INSTANCE)", "var_name": "SOCKET_ERRORS"}, {"original_string": "public static final RetryDeterminer<IOException> SERVER_ERRORS =\n      new RetryDeterminer<IOException>() {\n    @Override\n    public boolean shouldRetry(IOException e) {\n      if (e instanceof HttpResponseException) {\n        HttpResponseException httpException = (HttpResponseException) e;\n        // TODO: Find what we should do for 500 codes that are not always transient.\n        return httpException.getStatusCode() / 100 == 5;\n      }\n      return false;\n    }\n  };", "modifier": "public static final", "type": "RetryDeterminer<IOException>", "declarator": "SERVER_ERRORS =\n      new RetryDeterminer<IOException>() {\n    @Override\n    public boolean shouldRetry(IOException e) {\n      if (e instanceof HttpResponseException) {\n        HttpResponseException httpException = (HttpResponseException) e;\n        // TODO: Find what we should do for 500 codes that are not always transient.\n        return httpException.getStatusCode() / 100 == 5;\n      }\n      return false;\n    }\n  }", "var_name": "SERVER_ERRORS"}, {"original_string": "public static final RetryDeterminer<IOException> RATE_LIMIT_ERRORS =\n      createRateLimitedRetryDeterminer(ApiErrorExtractor.INSTANCE);", "modifier": "public static final", "type": "RetryDeterminer<IOException>", "declarator": "RATE_LIMIT_ERRORS =\n      createRateLimitedRetryDeterminer(ApiErrorExtractor.INSTANCE)", "var_name": "RATE_LIMIT_ERRORS"}], "methods": [{"identifier": "shouldRetry", "parameters": "(X e)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean shouldRetry(X e)", "full_signature": "public abstract boolean shouldRetry(X e)", "class_method_signature": "RetryDeterminer.shouldRetry(X e)", "testcase": false, "constructor": false}, {"identifier": "createRateLimitedRetryDeterminer", "parameters": "(\n      final ApiErrorExtractor errorExtractor)", "modifiers": "public static", "return": "RetryDeterminer<IOException>", "signature": "RetryDeterminer<IOException> createRateLimitedRetryDeterminer(\n      final ApiErrorExtractor errorExtractor)", "full_signature": "public static RetryDeterminer<IOException> createRateLimitedRetryDeterminer(\n      final ApiErrorExtractor errorExtractor)", "class_method_signature": "RetryDeterminer.createRateLimitedRetryDeterminer(\n      final ApiErrorExtractor errorExtractor)", "testcase": false, "constructor": false}, {"identifier": "createSocketErrorRetryDeterminer", "parameters": "(\n      final ApiErrorExtractor errorExtractor)", "modifiers": "private static", "return": "RetryDeterminer<IOException>", "signature": "RetryDeterminer<IOException> createSocketErrorRetryDeterminer(\n      final ApiErrorExtractor errorExtractor)", "full_signature": "private static RetryDeterminer<IOException> createSocketErrorRetryDeterminer(\n      final ApiErrorExtractor errorExtractor)", "class_method_signature": "RetryDeterminer.createSocketErrorRetryDeterminer(\n      final ApiErrorExtractor errorExtractor)", "testcase": false, "constructor": false}], "file": "util/src/main/java/com/google/cloud/hadoop/util/RetryDeterminer.java"}, "focal_method": {"identifier": "shouldRetry", "parameters": "(X e)", "modifiers": "public abstract", "return": "boolean", "body": "public abstract boolean shouldRetry(X e);", "signature": "boolean shouldRetry(X e)", "full_signature": "public abstract boolean shouldRetry(X e)", "class_method_signature": "RetryDeterminer.shouldRetry(X e)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}