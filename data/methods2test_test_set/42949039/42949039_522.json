{"test_class": {"identifier": "UserNamespaceAuthorizationHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private UserNamespaceAuthorizationHelper userNamespaceAuthorizationHelper;", "modifier": "@InjectMocks\n    private", "type": "UserNamespaceAuthorizationHelper", "declarator": "userNamespaceAuthorizationHelper", "var_name": "userNamespaceAuthorizationHelper"}, {"original_string": "@Mock\n    private NamespaceDao namespaceDao;", "modifier": "@Mock\n    private", "type": "NamespaceDao", "declarator": "namespaceDao", "var_name": "namespaceDao"}, {"original_string": "@Mock\n    private ConfigurationHelper configurationHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Mock\n    private UserDao userDao;", "modifier": "@Mock\n    private", "type": "UserDao", "declarator": "userDao", "var_name": "userDao"}, {"original_string": "@Mock\n    private UserNamespaceAuthorizationDao userNamespaceAuthorizationDao;", "modifier": "@Mock\n    private", "type": "UserNamespaceAuthorizationDao", "declarator": "userNamespaceAuthorizationDao", "var_name": "userNamespaceAuthorizationDao"}, {"original_string": "@Mock\n    private WildcardHelper wildcardHelper;", "modifier": "@Mock\n    private", "type": "WildcardHelper", "declarator": "wildcardHelper", "var_name": "wildcardHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/UserNamespaceAuthorizationHelperTest.java"}, "test_case": {"identifier": "testBuildNamespaceAuthorizationsAssertWildcardEntityNotAddedIfMatchFails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildNamespaceAuthorizationsAssertWildcardEntityNotAddedIfMatchFails()\n    {\n        ApplicationUser applicationUser = new ApplicationUser(getClass());\n        String userId = \"userId\";\n        applicationUser.setUserId(userId);\n\n        when(configurationHelper.getBooleanProperty(any())).thenReturn(true);\n\n        List<UserNamespaceAuthorizationEntity> wildcardEntities = new ArrayList<>();\n        UserNamespaceAuthorizationEntity wildcardEntity = new UserNamespaceAuthorizationEntity();\n        wildcardEntity.setUserId(\"wildcardEntityUserId\");\n        NamespaceEntity namespaceEntity = new NamespaceEntity();\n        namespaceEntity.setCode(\"namespace\");\n        wildcardEntity.setNamespace(namespaceEntity);\n        wildcardEntities.add(wildcardEntity);\n        when(userNamespaceAuthorizationDao.getUserNamespaceAuthorizationsByUserIdStartsWith(any())).thenReturn(wildcardEntities);\n\n        when(wildcardHelper.matches(any(), any())).thenReturn(false);\n\n        userNamespaceAuthorizationHelper.buildNamespaceAuthorizations(applicationUser);\n\n        assertEquals(0, applicationUser.getNamespaceAuthorizations().size());\n\n        verify(userNamespaceAuthorizationDao).getUserNamespaceAuthorizationsByUserId(eq(userId));\n        verify(userNamespaceAuthorizationDao).getUserNamespaceAuthorizationsByUserIdStartsWith(eq(WildcardHelper.WILDCARD_TOKEN));\n        verify(wildcardHelper).matches(eq(userId.toUpperCase()), eq(wildcardEntity.getUserId().toUpperCase()));\n        verifyNoMoreInteractions(userNamespaceAuthorizationDao, wildcardHelper);\n    }", "signature": "void testBuildNamespaceAuthorizationsAssertWildcardEntityNotAddedIfMatchFails()", "full_signature": "@Test public void testBuildNamespaceAuthorizationsAssertWildcardEntityNotAddedIfMatchFails()", "class_method_signature": "UserNamespaceAuthorizationHelperTest.testBuildNamespaceAuthorizationsAssertWildcardEntityNotAddedIfMatchFails()", "testcase": true, "constructor": false, "invocations": ["getClass", "setUserId", "thenReturn", "when", "getBooleanProperty", "any", "setUserId", "setCode", "setNamespace", "add", "thenReturn", "when", "getUserNamespaceAuthorizationsByUserIdStartsWith", "any", "thenReturn", "when", "matches", "any", "any", "buildNamespaceAuthorizations", "assertEquals", "size", "getNamespaceAuthorizations", "getUserNamespaceAuthorizationsByUserId", "verify", "eq", "getUserNamespaceAuthorizationsByUserIdStartsWith", "verify", "eq", "matches", "verify", "eq", "toUpperCase", "eq", "toUpperCase", "getUserId", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "UserNamespaceAuthorizationHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private NamespaceDao namespaceDao;", "modifier": "@Autowired\n    private", "type": "NamespaceDao", "declarator": "namespaceDao", "var_name": "namespaceDao"}, {"original_string": "@Autowired\n    private UserDao userDao;", "modifier": "@Autowired\n    private", "type": "UserDao", "declarator": "userDao", "var_name": "userDao"}, {"original_string": "@Autowired\n    private UserNamespaceAuthorizationDao userNamespaceAuthorizationDao;", "modifier": "@Autowired\n    private", "type": "UserNamespaceAuthorizationDao", "declarator": "userNamespaceAuthorizationDao", "var_name": "userNamespaceAuthorizationDao"}, {"original_string": "@Autowired\n    private WildcardHelper wildcardHelper;", "modifier": "@Autowired\n    private", "type": "WildcardHelper", "declarator": "wildcardHelper", "var_name": "wildcardHelper"}], "methods": [{"identifier": "buildNamespaceAuthorizations", "parameters": "(ApplicationUser applicationUser)", "modifiers": "public", "return": "void", "signature": "void buildNamespaceAuthorizations(ApplicationUser applicationUser)", "full_signature": "public void buildNamespaceAuthorizations(ApplicationUser applicationUser)", "class_method_signature": "UserNamespaceAuthorizationHelper.buildNamespaceAuthorizations(ApplicationUser applicationUser)", "testcase": false, "constructor": false}, {"identifier": "getAllNamespaceAuthorizations", "parameters": "()", "modifiers": "public", "return": "Set<NamespaceAuthorization>", "signature": "Set<NamespaceAuthorization> getAllNamespaceAuthorizations()", "full_signature": "public Set<NamespaceAuthorization> getAllNamespaceAuthorizations()", "class_method_signature": "UserNamespaceAuthorizationHelper.getAllNamespaceAuthorizations()", "testcase": false, "constructor": false}, {"identifier": "getNamespacePermissions", "parameters": "(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "modifiers": "public", "return": "List<NamespacePermissionEnum>", "signature": "List<NamespacePermissionEnum> getNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "full_signature": "public List<NamespacePermissionEnum> getNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "class_method_signature": "UserNamespaceAuthorizationHelper.getNamespacePermissions(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "testcase": false, "constructor": false}, {"identifier": "getAllNamespacePermissions", "parameters": "()", "modifiers": "private", "return": "List<NamespacePermissionEnum>", "signature": "List<NamespacePermissionEnum> getAllNamespacePermissions()", "full_signature": "private List<NamespacePermissionEnum> getAllNamespacePermissions()", "class_method_signature": "UserNamespaceAuthorizationHelper.getAllNamespacePermissions()", "testcase": false, "constructor": false}, {"identifier": "toNamespaceAuthorization", "parameters": "(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "modifiers": "private", "return": "NamespaceAuthorization", "signature": "NamespaceAuthorization toNamespaceAuthorization(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "full_signature": "private NamespaceAuthorization toNamespaceAuthorization(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "class_method_signature": "UserNamespaceAuthorizationHelper.toNamespaceAuthorization(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity)", "testcase": false, "constructor": false}, {"identifier": "isNamespaceAuthorizationAdmin", "parameters": "(String userId)", "modifiers": "protected", "return": "boolean", "signature": "boolean isNamespaceAuthorizationAdmin(String userId)", "full_signature": "protected boolean isNamespaceAuthorizationAdmin(String userId)", "class_method_signature": "UserNamespaceAuthorizationHelper.isNamespaceAuthorizationAdmin(String userId)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/UserNamespaceAuthorizationHelper.java"}, "focal_method": {"identifier": "buildNamespaceAuthorizations", "parameters": "(ApplicationUser applicationUser)", "modifiers": "public", "return": "void", "body": "public void buildNamespaceAuthorizations(ApplicationUser applicationUser)\n    {\n        // Get the user id from the application user.\n        String userId = applicationUser.getUserId();\n\n        // Check if user namespace authorization is not enabled or this user is a namespace authorization administrator.\n        if (BooleanUtils.isNotTrue(configurationHelper.getBooleanProperty(ConfigurationValue.USER_NAMESPACE_AUTHORIZATION_ENABLED)) ||\n            isNamespaceAuthorizationAdmin(userId))\n        {\n            // Assign all permissions for all namespaces configured in the system.\n            applicationUser.setNamespaceAuthorizations(getAllNamespaceAuthorizations());\n        }\n        else\n        {\n            // Assign a set of namespace authorizations per specified user.\n            Set<NamespaceAuthorization> namespaceAuthorizations = new HashSet<>();\n            applicationUser.setNamespaceAuthorizations(namespaceAuthorizations);\n            for (UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity : userNamespaceAuthorizationDao\n                .getUserNamespaceAuthorizationsByUserId(userId))\n            {\n                namespaceAuthorizations.add(toNamespaceAuthorization(userNamespaceAuthorizationEntity));\n            }\n\n            // Search authorizations by wildcard token\n            for (UserNamespaceAuthorizationEntity wildcardEntity : userNamespaceAuthorizationDao\n                .getUserNamespaceAuthorizationsByUserIdStartsWith(WildcardHelper.WILDCARD_TOKEN))\n            {\n                if (wildcardHelper.matches(userId.toUpperCase(), wildcardEntity.getUserId().toUpperCase()))\n                {\n                    namespaceAuthorizations.add(toNamespaceAuthorization(wildcardEntity));\n                }\n            }\n        }\n    }", "signature": "void buildNamespaceAuthorizations(ApplicationUser applicationUser)", "full_signature": "public void buildNamespaceAuthorizations(ApplicationUser applicationUser)", "class_method_signature": "UserNamespaceAuthorizationHelper.buildNamespaceAuthorizations(ApplicationUser applicationUser)", "testcase": false, "constructor": false, "invocations": ["getUserId", "isNotTrue", "getBooleanProperty", "isNamespaceAuthorizationAdmin", "setNamespaceAuthorizations", "getAllNamespaceAuthorizations", "setNamespaceAuthorizations", "getUserNamespaceAuthorizationsByUserId", "add", "toNamespaceAuthorization", "getUserNamespaceAuthorizationsByUserIdStartsWith", "matches", "toUpperCase", "toUpperCase", "getUserId", "add", "toNamespaceAuthorization"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}