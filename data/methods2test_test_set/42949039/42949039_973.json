{"test_class": {"identifier": "RetentionExpirationDestroyerAppTest", "superclass": "extends AbstractRetentionExpirationDestroyerTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public EnvironmentVariables environmentVariables = new EnvironmentVariables();", "modifier": "@Rule\n    public", "type": "EnvironmentVariables", "declarator": "environmentVariables = new EnvironmentVariables()", "var_name": "environmentVariables"}, {"original_string": "private RetentionExpirationDestroyerApp exporterApp = new RetentionExpirationDestroyerApp()\n    {\n        protected ApplicationContext createApplicationContext()\n        {\n            return applicationContext;\n        }\n    };", "modifier": "private", "type": "RetentionExpirationDestroyerApp", "declarator": "exporterApp = new RetentionExpirationDestroyerApp()\n    {\n        protected ApplicationContext createApplicationContext()\n        {\n            return applicationContext;\n        }\n    }", "var_name": "exporterApp"}], "file": "herd-code/herd-tools/herd-retention-expiration-destroyer/src/test/java/org/finra/herd/tools/retention/destroyer/RetentionExpirationDestroyerAppTest.java"}, "test_case": {"identifier": "testParseCommandLineArgumentsSslTrueAndNoUsername", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseCommandLineArgumentsSslTrueAndNoUsername()\n    {\n        String[] arguments =\n            {\"--localInputFile\", LOCAL_INPUT_FILE, \"--regServerHost\", WEB_SERVICE_HOSTNAME, \"--regServerPort\", WEB_SERVICE_HTTPS_PORT.toString(), \"--ssl\",\n                \"true\", \"--password\", WEB_SERVICE_HTTPS_PASSWORD, \"--trustSelfSignedCertificate\", \"true\", \"--disableHostnameVerification\", \"true\"};\n        assertEquals(ToolsCommonConstants.ReturnValue.FAILURE, exporterApp.parseCommandLineArguments(arguments, applicationContext));\n    }", "signature": "void testParseCommandLineArgumentsSslTrueAndNoUsername()", "full_signature": "@Test public void testParseCommandLineArgumentsSslTrueAndNoUsername()", "class_method_signature": "RetentionExpirationDestroyerAppTest.testParseCommandLineArgumentsSslTrueAndNoUsername()", "testcase": true, "constructor": false, "invocations": ["toString", "assertEquals", "parseCommandLineArguments"]}, "focal_class": {"identifier": "RetentionExpirationDestroyerApp", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String APPLICATION_NAME = \"herd-retention-expiration-destroyer-app\";", "modifier": "public static final", "type": "String", "declarator": "APPLICATION_NAME = \"herd-retention-expiration-destroyer-app\"", "var_name": "APPLICATION_NAME"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RetentionExpirationDestroyerApp.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RetentionExpirationDestroyerApp.class)", "var_name": "LOGGER"}, {"original_string": "private ArgumentParser argParser;", "modifier": "private", "type": "ArgumentParser", "declarator": "argParser", "var_name": "argParser"}, {"original_string": "private Boolean disableHostnameVerification;", "modifier": "private", "type": "Boolean", "declarator": "disableHostnameVerification", "var_name": "disableHostnameVerification"}, {"original_string": "private Option disableHostnameVerificationOpt;", "modifier": "private", "type": "Option", "declarator": "disableHostnameVerificationOpt", "var_name": "disableHostnameVerificationOpt"}, {"original_string": "private Option localInputFileOpt;", "modifier": "private", "type": "Option", "declarator": "localInputFileOpt", "var_name": "localInputFileOpt"}, {"original_string": "private Option passwordOpt;", "modifier": "private", "type": "Option", "declarator": "passwordOpt", "var_name": "passwordOpt"}, {"original_string": "private Option enableEnvVariablesOpt;", "modifier": "private", "type": "Option", "declarator": "enableEnvVariablesOpt", "var_name": "enableEnvVariablesOpt"}, {"original_string": "private Option regServerHostOpt;", "modifier": "private", "type": "Option", "declarator": "regServerHostOpt", "var_name": "regServerHostOpt"}, {"original_string": "private Integer regServerPort;", "modifier": "private", "type": "Integer", "declarator": "regServerPort", "var_name": "regServerPort"}, {"original_string": "private Boolean trustSelfSignedCertificate;", "modifier": "private", "type": "Boolean", "declarator": "trustSelfSignedCertificate", "var_name": "trustSelfSignedCertificate"}, {"original_string": "private Option trustSelfSignedCertificateOpt;", "modifier": "private", "type": "Option", "declarator": "trustSelfSignedCertificateOpt", "var_name": "trustSelfSignedCertificateOpt"}, {"original_string": "private Boolean useSsl;", "modifier": "private", "type": "Boolean", "declarator": "useSsl", "var_name": "useSsl"}, {"original_string": "private Option usernameOpt;", "modifier": "private", "type": "Option", "declarator": "usernameOpt", "var_name": "usernameOpt"}], "methods": [{"identifier": "RetentionExpirationDestroyerApp", "parameters": "()", "modifiers": "", "return": "", "signature": " RetentionExpirationDestroyerApp()", "full_signature": "  RetentionExpirationDestroyerApp()", "class_method_signature": "RetentionExpirationDestroyerApp.RetentionExpirationDestroyerApp()", "testcase": false, "constructor": true}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "@SuppressWarnings(\"PMD.DoNotCallSystemExit\") // Using System.exit is allowed for an actual application to exit. public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "@SuppressWarnings(\"PMD.DoNotCallSystemExit\") // Using System.exit is allowed for an actual application to exit. public static void main(String[] args)", "class_method_signature": "RetentionExpirationDestroyerApp.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "go", "parameters": "(String[] args)", "modifiers": "protected", "return": "ToolsCommonConstants.ReturnValue", "signature": "ToolsCommonConstants.ReturnValue go(String[] args)", "full_signature": "protected ToolsCommonConstants.ReturnValue go(String[] args)", "class_method_signature": "RetentionExpirationDestroyerApp.go(String[] args)", "testcase": false, "constructor": false}, {"identifier": "parseCommandLineArguments", "parameters": "(String[] args, ApplicationContext applicationContext)", "modifiers": "@SuppressWarnings(\"PMD.SystemPrintln\") @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\") protected", "return": "ToolsCommonConstants.ReturnValue", "signature": "ToolsCommonConstants.ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "full_signature": "@SuppressWarnings(\"PMD.SystemPrintln\") @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\") protected ToolsCommonConstants.ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "class_method_signature": "RetentionExpirationDestroyerApp.parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "createApplicationContext", "parameters": "()", "modifiers": "private", "return": "ApplicationContext", "signature": "ApplicationContext createApplicationContext()", "full_signature": "private ApplicationContext createApplicationContext()", "class_method_signature": "RetentionExpirationDestroyerApp.createApplicationContext()", "testcase": false, "constructor": false}], "file": "herd-code/herd-tools/herd-retention-expiration-destroyer/src/main/java/org/finra/herd/tools/retention/destroyer/RetentionExpirationDestroyerApp.java"}, "focal_method": {"identifier": "parseCommandLineArguments", "parameters": "(String[] args, ApplicationContext applicationContext)", "modifiers": "@SuppressWarnings(\"PMD.SystemPrintln\") @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\") protected", "return": "ToolsCommonConstants.ReturnValue", "body": "@SuppressWarnings(\"PMD.SystemPrintln\")\n    @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\")\n    protected ToolsCommonConstants.ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)\n    {\n        try\n        {\n            localInputFileOpt = argParser.addArgument(\"i\", \"localInputFile\", true, \"The path to files on your local file system as input.\", true);\n            regServerHostOpt = argParser.addArgument(\"H\", \"regServerHost\", true, \"Registration Service hostname.\", true);\n            Option regServerPortOpt = argParser.addArgument(\"P\", \"regServerPort\", true, \"Registration Service port.\", true);\n            Option sslOpt = argParser.addArgument(\"s\", \"ssl\", true, \"Enable or disable SSL (HTTPS).\", false);\n            usernameOpt = argParser.addArgument(\"u\", \"username\", true, \"The username for HTTPS client authentication.\", false);\n            passwordOpt = argParser.addArgument(\"w\", \"password\", true, \"The password used for HTTPS client authentication.\", false);\n            enableEnvVariablesOpt = argParser\n                .addArgument(\"E\", \"enableEnvVariables\", true, \"The enableEnvVariables used for HTTPS client authentication via environment provided var.\",\n                    false);\n            trustSelfSignedCertificateOpt =\n                argParser.addArgument(\"C\", \"trustSelfSignedCertificate\", true, \"If set to true, makes HTTPS client trust self-signed certificate.\", false);\n            disableHostnameVerificationOpt =\n                argParser.addArgument(\"d\", \"disableHostnameVerification\", true, \"If set to true, turns off hostname verification.\", false);\n            Option helpOpt = argParser.addArgument(\"h\", \"help\", false, \"Display usage information and exit.\", false);\n            Option versionOpt = argParser.addArgument(\"v\", \"version\", false, \"Display version information and exit.\", false);\n\n            // Parse command line arguments without failing on any missing required arguments by passing \"false\" as the second argument.\n            argParser.parseArguments(args, false);\n\n            // If help option was specified, then display usage information and return success.\n            if (argParser.getBooleanValue(helpOpt))\n            {\n                System.out.println(argParser.getUsageInformation());\n                return ToolsCommonConstants.ReturnValue.SUCCESS;\n            }\n\n            // If version option was specified, then display version information and return success.\n            if (argParser.getBooleanValue(versionOpt))\n            {\n                BuildInformation buildInformation = applicationContext.getBean(BuildInformation.class);\n                System.out.println(String\n                    .format(ToolsCommonConstants.BUILD_INFO_STRING_FORMAT, buildInformation.getBuildDate(), buildInformation.getBuildNumber(),\n                        buildInformation.getBuildOs(), buildInformation.getBuildUser()));\n                return ToolsCommonConstants.ReturnValue.SUCCESS;\n            }\n\n            // Parse command line arguments for the second time, enforcing the required arguments by passing \"true\" as the second argument.\n            argParser.parseArguments(args, true);\n\n            // Extract boolean option values passing \"false\" as a default value.\n            useSsl = argParser.getStringValueAsBoolean(sslOpt, false);\n            trustSelfSignedCertificate = argParser.getStringValueAsBoolean(trustSelfSignedCertificateOpt, false);\n            disableHostnameVerification = argParser.getStringValueAsBoolean(disableHostnameVerificationOpt, false);\n\n            if (useSsl)\n            {\n                // Username is required when useSsl is enabled.\n                if (StringUtils.isBlank(argParser.getStringValue(usernameOpt)))\n                {\n                    throw new ParseException(\"Username is required when SSL is enabled.\");\n                }\n                // Password or enableEnvVariables with corresponding env var is required when useSsl is enabled.\n                ToolsArgumentHelper.validateCliEnvArgument(argParser, passwordOpt, enableEnvVariablesOpt);\n            }\n\n            // Extract all Integer option values here to catch any NumberFormatException exceptions.\n            regServerPort = argParser.getIntegerValue(regServerPortOpt);\n        }\n        catch (ParseException ex)\n        {\n            // Log a friendly error and return a failure which will cause the application to exit.\n            LOGGER.error(\"Error parsing command line arguments: \" + ex.getMessage() + \"\\n\" + argParser.getUsageInformation());\n            return ToolsCommonConstants.ReturnValue.FAILURE;\n        }\n\n        // The command line arguments were all parsed successfully so return null to continue processing.\n        return null;\n    }", "signature": "ToolsCommonConstants.ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "full_signature": "@SuppressWarnings(\"PMD.SystemPrintln\") @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\") protected ToolsCommonConstants.ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "class_method_signature": "RetentionExpirationDestroyerApp.parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "testcase": false, "constructor": false, "invocations": ["addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "parseArguments", "getBooleanValue", "println", "getUsageInformation", "getBooleanValue", "getBean", "println", "format", "getBuildDate", "getBuildNumber", "getBuildOs", "getBuildUser", "parseArguments", "getStringValueAsBoolean", "getStringValueAsBoolean", "getStringValueAsBoolean", "isBlank", "getStringValue", "validateCliEnvArgument", "getIntegerValue", "error", "getMessage", "getUsageInformation"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}