{"test_class": {"identifier": "TilesContextBeanELResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TilesContextBeanELResolver resolver;", "modifier": "private", "type": "TilesContextBeanELResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "tiles-el/src/test/java/org/apache/tiles/el/TilesContextBeanELResolverTest.java"}, "test_case": {"identifier": "testFindObjectByProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindObjectByProperty() {\n        Map<String, Object> requestScope = new HashMap<String, Object>();\n        Map<String, Object> sessionScope = new HashMap<String, Object>();\n        Map<String, Object> applicationScope = new HashMap<String, Object>();\n        requestScope.put(\"object1\", \"value\");\n        sessionScope.put(\"object2\", new Integer(1));\n        applicationScope.put(\"object3\", new Float(2.0));\n        Request request = createMock(Request.class);\n        expect(request.getContext(\"request\")).andReturn(requestScope)\n                .anyTimes();\n        expect(request.getContext(\"session\")).andReturn(sessionScope)\n                .anyTimes();\n        ApplicationContext applicationContext = createMock(ApplicationContext.class);\n        expect(request.getContext(\"application\")).andReturn(\n                applicationScope).anyTimes();\n        expect(request.getAvailableScopes()).andReturn(\n                Arrays.asList(new String[] { \"request\", \"session\", \"application\" }))\n                .anyTimes();\n        replay(request, applicationContext);\n\n        ELContext context = new ELContextImpl(resolver);\n        context.putContext(Request.class, request);\n        context.putContext(ApplicationContext.class, applicationContext);\n\n        assertEquals(\"The value is not correct\", \"value\", resolver\n                .findObjectByProperty(context, \"object1\"));\n        assertEquals(\"The value is not correct\", new Integer(1), resolver\n                .findObjectByProperty(context, \"object2\"));\n        assertEquals(\"The value is not correct\", new Float(2.0), resolver\n                .findObjectByProperty(context, \"object3\"));\n    }", "signature": "void testFindObjectByProperty()", "full_signature": "@Test public void testFindObjectByProperty()", "class_method_signature": "TilesContextBeanELResolverTest.testFindObjectByProperty()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "createMock", "anyTimes", "andReturn", "expect", "getContext", "anyTimes", "andReturn", "expect", "getContext", "createMock", "anyTimes", "andReturn", "expect", "getContext", "anyTimes", "andReturn", "expect", "getAvailableScopes", "asList", "replay", "putContext", "putContext", "assertEquals", "findObjectByProperty", "assertEquals", "findObjectByProperty", "assertEquals", "findObjectByProperty"]}, "focal_class": {"identifier": "TilesContextBeanELResolver", "superclass": "extends ELResolver", "interfaces": "", "fields": [], "methods": [{"identifier": "getCommonPropertyType", "parameters": "(ELContext context, Object base)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getCommonPropertyType(ELContext context, Object base)", "full_signature": "@Override public Class<?> getCommonPropertyType(ELContext context, Object base)", "class_method_signature": "TilesContextBeanELResolver.getCommonPropertyType(ELContext context, Object base)", "testcase": false, "constructor": false}, {"identifier": "getFeatureDescriptors", "parameters": "(ELContext context,\n            Object base)", "modifiers": "@Override public", "return": "Iterator<FeatureDescriptor>", "signature": "Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n            Object base)", "full_signature": "@Override public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n            Object base)", "class_method_signature": "TilesContextBeanELResolver.getFeatureDescriptors(ELContext context,\n            Object base)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getType(ELContext context, Object base, Object property)", "full_signature": "@Override public Class<?> getType(ELContext context, Object base, Object property)", "class_method_signature": "TilesContextBeanELResolver.getType(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Object", "signature": "Object getValue(ELContext context, Object base, Object property)", "full_signature": "@Override public Object getValue(ELContext context, Object base, Object property)", "class_method_signature": "TilesContextBeanELResolver.getValue(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadOnly(ELContext context, Object base, Object property)", "full_signature": "@Override public boolean isReadOnly(ELContext context, Object base, Object property)", "class_method_signature": "TilesContextBeanELResolver.isReadOnly(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(ELContext context, Object base, Object property,\n            Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(ELContext context, Object base, Object property,\n            Object value)", "full_signature": "@Override public void setValue(ELContext context, Object base, Object property,\n            Object value)", "class_method_signature": "TilesContextBeanELResolver.setValue(ELContext context, Object base, Object property,\n            Object value)", "testcase": false, "constructor": false}, {"identifier": "collectBeanInfo", "parameters": "(Map<String, ? extends Object> map,\n            List<FeatureDescriptor> list)", "modifiers": "protected", "return": "void", "signature": "void collectBeanInfo(Map<String, ? extends Object> map,\n            List<FeatureDescriptor> list)", "full_signature": "protected void collectBeanInfo(Map<String, ? extends Object> map,\n            List<FeatureDescriptor> list)", "class_method_signature": "TilesContextBeanELResolver.collectBeanInfo(Map<String, ? extends Object> map,\n            List<FeatureDescriptor> list)", "testcase": false, "constructor": false}, {"identifier": "findObjectByProperty", "parameters": "(ELContext context, Object property)", "modifiers": "protected", "return": "Object", "signature": "Object findObjectByProperty(ELContext context, Object property)", "full_signature": "protected Object findObjectByProperty(ELContext context, Object property)", "class_method_signature": "TilesContextBeanELResolver.findObjectByProperty(ELContext context, Object property)", "testcase": false, "constructor": false}, {"identifier": "getObject", "parameters": "(Map<String, ? extends Object> map,\n            String property)", "modifiers": "protected", "return": "Object", "signature": "Object getObject(Map<String, ? extends Object> map,\n            String property)", "full_signature": "protected Object getObject(Map<String, ? extends Object> map,\n            String property)", "class_method_signature": "TilesContextBeanELResolver.getObject(Map<String, ? extends Object> map,\n            String property)", "testcase": false, "constructor": false}], "file": "tiles-el/src/main/java/org/apache/tiles/el/TilesContextBeanELResolver.java"}, "focal_method": {"identifier": "findObjectByProperty", "parameters": "(ELContext context, Object property)", "modifiers": "protected", "return": "Object", "body": "protected Object findObjectByProperty(ELContext context, Object property) {\n        Object retValue = null;\n\n        Request request = (Request) context\n                .getContext(Request.class);\n\n        String prop = property.toString();\n\n        String[] scopes = request.getAvailableScopes().toArray(new String[0]);\n        int i = 0;\n        do {\n            retValue = getObject(request.getContext(scopes[i]), prop);\n            i++;\n        } while (retValue == null && i < scopes.length);\n\n        return retValue;\n    }", "signature": "Object findObjectByProperty(ELContext context, Object property)", "full_signature": "protected Object findObjectByProperty(ELContext context, Object property)", "class_method_signature": "TilesContextBeanELResolver.findObjectByProperty(ELContext context, Object property)", "testcase": false, "constructor": false, "invocations": ["getContext", "toString", "toArray", "getAvailableScopes", "getObject", "getContext"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}