{"test_class": {"identifier": "EqualityExpressionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String propertyName = \"propertyName\";", "modifier": "private final", "type": "String", "declarator": "propertyName = \"propertyName\"", "var_name": "propertyName"}, {"original_string": "private final String testValue = \"test value\";", "modifier": "private final", "type": "String", "declarator": "testValue = \"test value\"", "var_name": "testValue"}, {"original_string": "private final Operator operator = Operator.EQUAL;", "modifier": "private final", "type": "Operator", "declarator": "operator = Operator.EQUAL", "var_name": "operator"}, {"original_string": "private final EqualityExpression e = new EqualityExpression(operator,\n            propertyName, testValue);", "modifier": "private final", "type": "EqualityExpression", "declarator": "e = new EqualityExpression(operator,\n            propertyName, testValue)", "var_name": "e"}], "file": "seeking-core/src/test/java/com/eharmony/matching/seeking/query/criterion/expression/EqualityExpressionTest.java"}, "test_case": {"identifier": "getValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getValue() {\n        assertEquals(testValue, e.getValue());\n    }", "signature": "void getValue()", "full_signature": "@Test public void getValue()", "class_method_signature": "EqualityExpressionTest.getValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getValue"]}, "focal_class": {"identifier": "EqualityExpression", "superclass": "extends Expression", "interfaces": "", "fields": [{"original_string": "private final Object value;", "modifier": "private final", "type": "Object", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "EqualityExpression", "parameters": "(Operator operator, String propertyName, Object value)", "modifiers": "public", "return": "", "signature": " EqualityExpression(Operator operator, String propertyName, Object value)", "full_signature": "public  EqualityExpression(Operator operator, String propertyName, Object value)", "class_method_signature": "EqualityExpression.EqualityExpression(Operator operator, String propertyName, Object value)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getValue()", "full_signature": "public Object getValue()", "class_method_signature": "EqualityExpression.getValue()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "EqualityExpression.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EqualityExpression.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "EqualityExpression.equals(Object obj)", "testcase": false, "constructor": false}], "file": "seeking-core/src/main/java/com/eharmony/matching/seeking/query/criterion/expression/EqualityExpression.java"}, "focal_method": {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "Object", "body": "public Object getValue() {\n        return value;\n    }", "signature": "Object getValue()", "full_signature": "public Object getValue()", "class_method_signature": "EqualityExpression.getValue()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}