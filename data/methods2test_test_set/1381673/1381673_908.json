{"test_class": {"identifier": "PrimitiveTypeConsequenceRewriteTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/builder/generator/PrimitiveTypeConsequenceRewriteTest.java"}, "test_case": {"identifier": "shouldConvertCastOfShortToShortValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldConvertCastOfShortToShortValue() {\n        RuleContext context = createContext();\n        context.addDeclaration(\"$interimVar\", int.class);\n\n        String rewritten = new PrimitiveTypeConsequenceRewrite(context)\n                .rewrite(\"{ $address.setShortNumber((short)$interimVar); }\");\n\n        assertThat(rewritten,\n                   equalToIgnoringWhiteSpace(\"{ $address.setShortNumber($interimVar.shortValue()); }\"));\n    }", "signature": "void shouldConvertCastOfShortToShortValue()", "full_signature": "@Test public void shouldConvertCastOfShortToShortValue()", "class_method_signature": "PrimitiveTypeConsequenceRewriteTest.shouldConvertCastOfShortToShortValue()", "testcase": true, "constructor": false, "invocations": ["createContext", "addDeclaration", "rewrite", "assertThat", "equalToIgnoringWhiteSpace"]}, "focal_class": {"identifier": "PrimitiveTypeConsequenceRewrite", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RuleContext context;", "modifier": "private final", "type": "RuleContext", "declarator": "context", "var_name": "context"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(PrimitiveTypeConsequenceRewrite.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PrimitiveTypeConsequenceRewrite.class)", "var_name": "logger"}], "methods": [{"identifier": "PrimitiveTypeConsequenceRewrite", "parameters": "(RuleContext context)", "modifiers": "public", "return": "", "signature": " PrimitiveTypeConsequenceRewrite(RuleContext context)", "full_signature": "public  PrimitiveTypeConsequenceRewrite(RuleContext context)", "class_method_signature": "PrimitiveTypeConsequenceRewrite.PrimitiveTypeConsequenceRewrite(RuleContext context)", "testcase": false, "constructor": true}, {"identifier": "rewrite", "parameters": "(String consequence)", "modifiers": "public", "return": "String", "signature": "String rewrite(String consequence)", "full_signature": "public String rewrite(String consequence)", "class_method_signature": "PrimitiveTypeConsequenceRewrite.rewrite(String consequence)", "testcase": false, "constructor": false}, {"identifier": "convertStatement", "parameters": "(CastExpr ce)", "modifiers": "private", "return": "void", "signature": "void convertStatement(CastExpr ce)", "full_signature": "private void convertStatement(CastExpr ce)", "class_method_signature": "PrimitiveTypeConsequenceRewrite.convertStatement(CastExpr ce)", "testcase": false, "constructor": false}], "file": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/PrimitiveTypeConsequenceRewrite.java"}, "focal_method": {"identifier": "rewrite", "parameters": "(String consequence)", "modifiers": "public", "return": "String", "body": "public String rewrite(String consequence) {\n\n        BlockStmt blockStmt;\n        try {\n            blockStmt = StaticJavaParser.parseBlock(consequence);\n        } catch (ParseProblemException e) {\n            logger.warn(String.format(\"Cannot post process consequence: %s\", consequence));\n            return consequence;\n        }\n        for (Statement t : blockStmt.getStatements()) {\n            t.findAll(CastExpr.class, ce -> ce.getExpression().isNameExpr()).forEach(this::convertStatement);\n        }\n\n        return blockStmt.toString();\n    }", "signature": "String rewrite(String consequence)", "full_signature": "public String rewrite(String consequence)", "class_method_signature": "PrimitiveTypeConsequenceRewrite.rewrite(String consequence)", "testcase": false, "constructor": false, "invocations": ["parseBlock", "warn", "format", "getStatements", "forEach", "findAll", "isNameExpr", "getExpression", "toString"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}