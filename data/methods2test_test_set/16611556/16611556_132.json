{"test_class": {"identifier": "SSMCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SSMCache ssmCache;", "modifier": "private", "type": "SSMCache", "declarator": "ssmCache", "var_name": "ssmCache"}, {"original_string": "private Cache cache;", "modifier": "private", "type": "Cache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private final int expiration = 60 * 60;", "modifier": "private final", "type": "int", "declarator": "expiration = 60 * 60", "var_name": "expiration"}], "file": "spring-cache/src/test/java/com/google/code/ssm/spring/SSMCacheTest.java"}, "test_case": {"identifier": "putNotExecutedWhenCacheDisabled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void putNotExecutedWhenCacheDisabled() throws TimeoutException, CacheException {\n        Object key = \"cackeKey\";\n        Object value = new Object();\n        when(cache.isEnabled()).thenReturn(false);\n\n        ssmCache.put(key, value);\n\n        verify(cache, never()).set(key.toString(), expiration, value, null);\n    }", "signature": "void putNotExecutedWhenCacheDisabled()", "full_signature": "@Test public void putNotExecutedWhenCacheDisabled()", "class_method_signature": "SSMCacheTest.putNotExecutedWhenCacheDisabled()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isEnabled", "put", "set", "verify", "never", "toString"]}, "focal_class": {"identifier": "SSMCache", "superclass": "", "interfaces": "implements Cache", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SSMCache.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SSMCache.class)", "var_name": "LOGGER"}, {"original_string": "@Getter\n    private final com.google.code.ssm.Cache cache;", "modifier": "@Getter\n    private final", "type": "com.google.code.ssm.Cache", "declarator": "cache", "var_name": "cache"}, {"original_string": "@Getter\n    private final int expiration;", "modifier": "@Getter\n    private final", "type": "int", "declarator": "expiration", "var_name": "expiration"}, {"original_string": "@Getter\n    private final boolean allowClear;", "modifier": "@Getter\n    private final", "type": "boolean", "declarator": "allowClear", "var_name": "allowClear"}, {"original_string": "@Getter\n    private final boolean muteExceptions;", "modifier": "@Getter\n    private final", "type": "boolean", "declarator": "muteExceptions", "var_name": "muteExceptions"}, {"original_string": "@Getter\n    private final boolean registerAliases;", "modifier": "@Getter\n    private final", "type": "boolean", "declarator": "registerAliases", "var_name": "registerAliases"}], "methods": [{"identifier": "SSMCache", "parameters": "(final com.google.code.ssm.Cache cache, final int expiration, final boolean allowClear, final boolean registerAliases,\n            final boolean muteExceptions)", "modifiers": "public", "return": "", "signature": " SSMCache(final com.google.code.ssm.Cache cache, final int expiration, final boolean allowClear, final boolean registerAliases,\n            final boolean muteExceptions)", "full_signature": "public  SSMCache(final com.google.code.ssm.Cache cache, final int expiration, final boolean allowClear, final boolean registerAliases,\n            final boolean muteExceptions)", "class_method_signature": "SSMCache.SSMCache(final com.google.code.ssm.Cache cache, final int expiration, final boolean allowClear, final boolean registerAliases,\n            final boolean muteExceptions)", "testcase": false, "constructor": true}, {"identifier": "SSMCache", "parameters": "(final com.google.code.ssm.Cache cache, final int expiration, final boolean allowClear)", "modifiers": "public", "return": "", "signature": " SSMCache(final com.google.code.ssm.Cache cache, final int expiration, final boolean allowClear)", "full_signature": "public  SSMCache(final com.google.code.ssm.Cache cache, final int expiration, final boolean allowClear)", "class_method_signature": "SSMCache.SSMCache(final com.google.code.ssm.Cache cache, final int expiration, final boolean allowClear)", "testcase": false, "constructor": true}, {"identifier": "SSMCache", "parameters": "(final com.google.code.ssm.Cache cache, final int expiration)", "modifiers": "public", "return": "", "signature": " SSMCache(final com.google.code.ssm.Cache cache, final int expiration)", "full_signature": "public  SSMCache(final com.google.code.ssm.Cache cache, final int expiration)", "class_method_signature": "SSMCache.SSMCache(final com.google.code.ssm.Cache cache, final int expiration)", "testcase": false, "constructor": true}, {"identifier": "SSMCache", "parameters": "(final SSMCache ssmCache, final int expiration)", "modifiers": "public", "return": "", "signature": " SSMCache(final SSMCache ssmCache, final int expiration)", "full_signature": "public  SSMCache(final SSMCache ssmCache, final int expiration)", "class_method_signature": "SSMCache.SSMCache(final SSMCache ssmCache, final int expiration)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "SSMCache.getName()", "testcase": false, "constructor": false}, {"identifier": "getNativeCache", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getNativeCache()", "full_signature": "@Override public Object getNativeCache()", "class_method_signature": "SSMCache.getNativeCache()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final Object key)", "modifiers": "@Override public", "return": "ValueWrapper", "signature": "ValueWrapper get(final Object key)", "full_signature": "@Override public ValueWrapper get(final Object key)", "class_method_signature": "SSMCache.get(final Object key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final Object key, final Class<T> type)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T get(final Object key, final Class<T> type)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T get(final Object key, final Class<T> type)", "class_method_signature": "SSMCache.get(final Object key, final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final Object key, final Callable<T> valueLoader)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T get(final Object key, final Callable<T> valueLoader)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T get(final Object key, final Callable<T> valueLoader)", "class_method_signature": "SSMCache.get(final Object key, final Callable<T> valueLoader)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final Object key, final Object value)", "modifiers": "@Override public", "return": "void", "signature": "void put(final Object key, final Object value)", "full_signature": "@Override public void put(final Object key, final Object value)", "class_method_signature": "SSMCache.put(final Object key, final Object value)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(final Object key, final Object value)", "modifiers": "@Override public", "return": "ValueWrapper", "signature": "ValueWrapper putIfAbsent(final Object key, final Object value)", "full_signature": "@Override public ValueWrapper putIfAbsent(final Object key, final Object value)", "class_method_signature": "SSMCache.putIfAbsent(final Object key, final Object value)", "testcase": false, "constructor": false}, {"identifier": "evict", "parameters": "(final Object key)", "modifiers": "@Override public", "return": "void", "signature": "void evict(final Object key)", "full_signature": "@Override public void evict(final Object key)", "class_method_signature": "SSMCache.evict(final Object key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "SSMCache.clear()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(Object key)", "modifiers": "private", "return": "Object", "signature": "Object getValue(Object key)", "full_signature": "private Object getValue(Object key)", "class_method_signature": "SSMCache.getValue(Object key)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "(final Object key)", "modifiers": "private", "return": "String", "signature": "String getKey(final Object key)", "full_signature": "private String getKey(final Object key)", "class_method_signature": "SSMCache.getKey(final Object key)", "testcase": false, "constructor": false}, {"identifier": "loadValue", "parameters": "(final Object key, final Callable<T> valueLoader)", "modifiers": "private", "return": "T", "signature": "T loadValue(final Object key, final Callable<T> valueLoader)", "full_signature": "private T loadValue(final Object key, final Callable<T> valueLoader)", "class_method_signature": "SSMCache.loadValue(final Object key, final Callable<T> valueLoader)", "testcase": false, "constructor": false}, {"identifier": "toStoreValue", "parameters": "(final Object value)", "modifiers": "private", "return": "Object", "signature": "Object toStoreValue(final Object value)", "full_signature": "private Object toStoreValue(final Object value)", "class_method_signature": "SSMCache.toStoreValue(final Object value)", "testcase": false, "constructor": false}, {"identifier": "logOrThrow", "parameters": "(final RuntimeException e, final String message, final Object ... args)", "modifiers": "private", "return": "void", "signature": "void logOrThrow(final RuntimeException e, final String message, final Object ... args)", "full_signature": "private void logOrThrow(final RuntimeException e, final String message, final Object ... args)", "class_method_signature": "SSMCache.logOrThrow(final RuntimeException e, final String message, final Object ... args)", "testcase": false, "constructor": false}, {"identifier": "logOrThrow", "parameters": "(final Exception e, final String message, final Object ... args)", "modifiers": "private", "return": "void", "signature": "void logOrThrow(final Exception e, final String message, final Object ... args)", "full_signature": "private void logOrThrow(final Exception e, final String message, final Object ... args)", "class_method_signature": "SSMCache.logOrThrow(final Exception e, final String message, final Object ... args)", "testcase": false, "constructor": false}], "file": "spring-cache/src/main/java/com/google/code/ssm/spring/SSMCache.java"}, "focal_method": {"identifier": "put", "parameters": "(final Object key, final Object value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void put(final Object key, final Object value) {\n        if (!cache.isEnabled()) {\n            LOGGER.warn(\"Cache {} is disabled. Cannot put value under key {}\", cache.getName(), key);\n            return;\n        }\n\n        if (key != null) {\n            final String cacheKey = getKey(key);\n\n            try {\n                LOGGER.info(\"Put '{}' under key {} to cache {}\", new Object[] { value, key, cache.getName() });\n                final Object store = toStoreValue(value);\n                cache.set(cacheKey, expiration, store, null);\n            } catch (TimeoutException | CacheException | RuntimeException e) {\n                logOrThrow(e, \"An error has ocurred for cache {} and key {}\", getName(), cacheKey, e);\n            }\n        } else {\n            LOGGER.info(\"Cannot put to cache {} because key is null\", cache.getName());\n        }\n    }", "signature": "void put(final Object key, final Object value)", "full_signature": "@Override public void put(final Object key, final Object value)", "class_method_signature": "SSMCache.put(final Object key, final Object value)", "testcase": false, "constructor": false, "invocations": ["isEnabled", "warn", "getName", "getKey", "info", "getName", "toStoreValue", "set", "logOrThrow", "getName", "info", "getName"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}