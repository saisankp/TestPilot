{"test_class": {"identifier": "CompoundPluginDescriptorFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@TempDir\n    Path pluginsPath;", "modifier": "@TempDir", "type": "Path", "declarator": "pluginsPath", "var_name": "pluginsPath"}], "file": "pf4j/src/test/java/org/pf4j/CompoundPluginDescriptorFinderTest.java"}, "test_case": {"identifier": "add", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void add() {\n        CompoundPluginDescriptorFinder descriptorFinder = new CompoundPluginDescriptorFinder();\n        assertEquals(0, descriptorFinder.size());\n\n        descriptorFinder.add(new PropertiesPluginDescriptorFinder());\n        assertEquals(1, descriptorFinder.size());\n    }", "signature": "void add()", "full_signature": "@Test public void add()", "class_method_signature": "CompoundPluginDescriptorFinderTest.add()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "add", "assertEquals", "size"]}, "focal_class": {"identifier": "CompoundPluginDescriptorFinder", "superclass": "", "interfaces": "implements PluginDescriptorFinder", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(CompoundPluginDescriptorFinder.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CompoundPluginDescriptorFinder.class)", "var_name": "log"}, {"original_string": "private List<PluginDescriptorFinder> finders = new ArrayList<>();", "modifier": "private", "type": "List<PluginDescriptorFinder>", "declarator": "finders = new ArrayList<>()", "var_name": "finders"}], "methods": [{"identifier": "add", "parameters": "(PluginDescriptorFinder finder)", "modifiers": "public", "return": "CompoundPluginDescriptorFinder", "signature": "CompoundPluginDescriptorFinder add(PluginDescriptorFinder finder)", "full_signature": "public CompoundPluginDescriptorFinder add(PluginDescriptorFinder finder)", "class_method_signature": "CompoundPluginDescriptorFinder.add(PluginDescriptorFinder finder)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "CompoundPluginDescriptorFinder.size()", "testcase": false, "constructor": false}, {"identifier": "isApplicable", "parameters": "(Path pluginPath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isApplicable(Path pluginPath)", "full_signature": "@Override public boolean isApplicable(Path pluginPath)", "class_method_signature": "CompoundPluginDescriptorFinder.isApplicable(Path pluginPath)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Path pluginPath)", "modifiers": "@Override public", "return": "PluginDescriptor", "signature": "PluginDescriptor find(Path pluginPath)", "full_signature": "@Override public PluginDescriptor find(Path pluginPath)", "class_method_signature": "CompoundPluginDescriptorFinder.find(Path pluginPath)", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/CompoundPluginDescriptorFinder.java"}, "focal_method": {"identifier": "add", "parameters": "(PluginDescriptorFinder finder)", "modifiers": "public", "return": "CompoundPluginDescriptorFinder", "body": "public CompoundPluginDescriptorFinder add(PluginDescriptorFinder finder) {\n        if (finder == null) {\n            throw new IllegalArgumentException(\"null not allowed\");\n        }\n\n        finders.add(finder);\n\n        return this;\n    }", "signature": "CompoundPluginDescriptorFinder add(PluginDescriptorFinder finder)", "full_signature": "public CompoundPluginDescriptorFinder add(PluginDescriptorFinder finder)", "class_method_signature": "CompoundPluginDescriptorFinder.add(PluginDescriptorFinder finder)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}