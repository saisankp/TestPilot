{"test_class": {"identifier": "ManifestMergerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File targetDirectory;", "modifier": "private", "type": "File", "declarator": "targetDirectory", "var_name": "targetDirectory"}, {"original_string": "private Document manifest;", "modifier": "private", "type": "Document", "declarator": "manifest", "var_name": "manifest"}, {"original_string": "private ManifestMerger manifestMerger;", "modifier": "private", "type": "ManifestMerger", "declarator": "manifestMerger", "var_name": "manifestMerger"}], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/manifest/ManifestMergerTest.java"}, "test_case": {"identifier": "testMergeManifests_MultipleFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeManifests_MultipleFiles() throws IOException, ParserConfigurationException, TransformerException, PDUStitchingException {\n        final Date now = Calendar.getInstance().getTime();\n        final File productDir = new File(ManifestMergerTest.class.getResource(\"\").getFile());\n        final File manifestFile = manifestMerger.createMergedManifest(getManifestFiles(), now, productDir, 5000);\n        assertTrue(manifestFile.exists());\n    }", "signature": "void testMergeManifests_MultipleFiles()", "full_signature": "@Test public void testMergeManifests_MultipleFiles()", "class_method_signature": "ManifestMergerTest.testMergeManifests_MultipleFiles()", "testcase": true, "constructor": false, "invocations": ["getTime", "getInstance", "getFile", "getResource", "createMergedManifest", "getManifestFiles", "assertTrue", "exists"]}, "focal_class": {"identifier": "ManifestMerger", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Date creationTime;", "modifier": "private", "type": "Date", "declarator": "creationTime", "var_name": "creationTime"}, {"original_string": "private static DefaultMerger defaultMerger;", "modifier": "private static", "type": "DefaultMerger", "declarator": "defaultMerger", "var_name": "defaultMerger"}, {"original_string": "private File productDir;", "modifier": "private", "type": "File", "declarator": "productDir", "var_name": "productDir"}, {"original_string": "private long productSize;", "modifier": "private", "type": "long", "declarator": "productSize", "var_name": "productSize"}, {"original_string": "private ImageSize[][] imageSizes;", "modifier": "private", "type": "ImageSize[][]", "declarator": "imageSizes", "var_name": "imageSizes"}, {"original_string": "private static final String[] discerningAttributesNames = {\"ID\", \"name\", \"grid\", \"view\", \"element\", \"type\", \"role\"};", "modifier": "private static final", "type": "String[]", "declarator": "discerningAttributesNames = {\"ID\", \"name\", \"grid\", \"view\", \"element\", \"type\", \"role\"}", "var_name": "discerningAttributesNames"}], "methods": [{"identifier": "createMergedManifest", "parameters": "(File[] manifestFiles, Date creationTime, File productDir, long productSize)", "modifiers": "public", "return": "File", "signature": "File createMergedManifest(File[] manifestFiles, Date creationTime, File productDir, long productSize)", "full_signature": "public File createMergedManifest(File[] manifestFiles, Date creationTime, File productDir, long productSize)", "class_method_signature": "ManifestMerger.createMergedManifest(File[] manifestFiles, Date creationTime, File productDir, long productSize)", "testcase": false, "constructor": false}, {"identifier": "mergeManifests", "parameters": "(File[] manifestFiles, Date creationTime, File productDir, long productSize)", "modifiers": "private", "return": "Document", "signature": "Document mergeManifests(File[] manifestFiles, Date creationTime, File productDir, long productSize)", "full_signature": "private Document mergeManifests(File[] manifestFiles, Date creationTime, File productDir, long productSize)", "class_method_signature": "ManifestMerger.mergeManifests(File[] manifestFiles, Date creationTime, File productDir, long productSize)", "testcase": false, "constructor": false}, {"identifier": "createXmlDocument", "parameters": "(InputStream inputStream)", "modifiers": "private static", "return": "Document", "signature": "Document createXmlDocument(InputStream inputStream)", "full_signature": "private static Document createXmlDocument(InputStream inputStream)", "class_method_signature": "ManifestMerger.createXmlDocument(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getElementMerger", "parameters": "(String elementName)", "modifiers": "private", "return": "ElementMerger", "signature": "ElementMerger getElementMerger(String elementName)", "full_signature": "private ElementMerger getElementMerger(String elementName)", "class_method_signature": "ManifestMerger.getElementMerger(String elementName)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/manifest/ManifestMerger.java"}, "focal_method": {"identifier": "createMergedManifest", "parameters": "(File[] manifestFiles, Date creationTime, File productDir, long productSize)", "modifiers": "public", "return": "File", "body": "public File createMergedManifest(File[] manifestFiles, Date creationTime, File productDir, long productSize)\n            throws IOException, TransformerException, PDUStitchingException, ParserConfigurationException {\n        final Document document = mergeManifests(manifestFiles, creationTime, productDir, productSize);\n        final File manifestFile = new File(productDir, \"xfdumanifest.xml\");\n        final TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        transformerFactory.setAttribute(\"indent-number\", 2);\n        final Transformer transformer = transformerFactory.newTransformer();\n        transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n        transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n        transformer.setOutputProperty(OutputKeys.STANDALONE, \"no\");\n        transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n        final DOMSource domSource = new DOMSource(document);\n        final StringWriter stringWriter = new StringWriter();\n        final StreamResult streamResult = new StreamResult(stringWriter);\n        transformer.transform(domSource, streamResult);\n        String docAsString = stringWriter.toString();\n        docAsString = docAsString.replace(\" standalone=\\\"no\\\"\", \"\");\n        final FileWriter fileWriter = new FileWriter(manifestFile);\n        fileWriter.write(docAsString);\n        fileWriter.close();\n        return manifestFile;\n    }", "signature": "File createMergedManifest(File[] manifestFiles, Date creationTime, File productDir, long productSize)", "full_signature": "public File createMergedManifest(File[] manifestFiles, Date creationTime, File productDir, long productSize)", "class_method_signature": "ManifestMerger.createMergedManifest(File[] manifestFiles, Date creationTime, File productDir, long productSize)", "testcase": false, "constructor": false, "invocations": ["mergeManifests", "newInstance", "setAttribute", "newTransformer", "setOutputProperty", "setOutputProperty", "setOutputProperty", "setOutputProperty", "transform", "toString", "replace", "write", "close"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}