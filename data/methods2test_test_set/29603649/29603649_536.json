{"test_class": {"identifier": "DialogDescriptorServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DialogDescriptor dialogDescriptor;", "modifier": "private", "type": "DialogDescriptor", "declarator": "dialogDescriptor", "var_name": "dialogDescriptor"}, {"original_string": "private DialogDescriptorAttributes attributes;", "modifier": "private", "type": "DialogDescriptorAttributes", "declarator": "attributes", "var_name": "attributes"}, {"original_string": "@Mock\n    private CurrentDateProvider currentDateProvider;", "modifier": "@Mock\n    private", "type": "CurrentDateProvider", "declarator": "currentDateProvider", "var_name": "currentDateProvider"}, {"original_string": "@InjectMocks\n    private DialogDescriptorService underTest;", "modifier": "@InjectMocks\n    private", "type": "DialogDescriptorService", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-route-engine/src/test/java/com/epam/wilma/router/evaluation/helper/DialogDescriptorServiceTest.java"}, "test_case": {"identifier": "testDecreaseWhenUsageIsHitcountShouldDecreaseHitcount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecreaseWhenUsageIsHitcountShouldDecreaseHitcount() {\n        //GIVEN\n        attributes = new DialogDescriptorAttributes(\"name\", DialogDescriptorUsage.HITCOUNT);\n        attributes.setHitcount(2);\n        dialogDescriptor = new DialogDescriptor(attributes, null, null);\n        //WHEN\n        underTest.decreaseHitcountWhenUsageIsHitcount(dialogDescriptor);\n        //THEN\n        assertEquals(dialogDescriptor.getAttributes().getHitcount(), 1);\n    }", "signature": "void testDecreaseWhenUsageIsHitcountShouldDecreaseHitcount()", "full_signature": "@Test public void testDecreaseWhenUsageIsHitcountShouldDecreaseHitcount()", "class_method_signature": "DialogDescriptorServiceTest.testDecreaseWhenUsageIsHitcountShouldDecreaseHitcount()", "testcase": true, "constructor": false, "invocations": ["setHitcount", "decreaseHitcountWhenUsageIsHitcount", "assertEquals", "getHitcount", "getAttributes"]}, "focal_class": {"identifier": "DialogDescriptorService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DialogDescriptorService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DialogDescriptorService.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private CurrentDateProvider currentDateProvider;", "modifier": "@Autowired\n    private", "type": "CurrentDateProvider", "declarator": "currentDateProvider", "var_name": "currentDateProvider"}], "methods": [{"identifier": "decreaseHitcountWhenUsageIsHitcount", "parameters": "(final DialogDescriptor dialogDescriptor)", "modifiers": "public", "return": "void", "signature": "void decreaseHitcountWhenUsageIsHitcount(final DialogDescriptor dialogDescriptor)", "full_signature": "public void decreaseHitcountWhenUsageIsHitcount(final DialogDescriptor dialogDescriptor)", "class_method_signature": "DialogDescriptorService.decreaseHitcountWhenUsageIsHitcount(final DialogDescriptor dialogDescriptor)", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "(final DialogDescriptor dialogDescriptor)", "modifiers": "public", "return": "boolean", "signature": "boolean isEnabled(final DialogDescriptor dialogDescriptor)", "full_signature": "public boolean isEnabled(final DialogDescriptor dialogDescriptor)", "class_method_signature": "DialogDescriptorService.isEnabled(final DialogDescriptor dialogDescriptor)", "testcase": false, "constructor": false}, {"identifier": "isNotTimedOut", "parameters": "(final DialogDescriptor dialogDescriptor, final DialogDescriptorUsage usage)", "modifiers": "private", "return": "boolean", "signature": "boolean isNotTimedOut(final DialogDescriptor dialogDescriptor, final DialogDescriptorUsage usage)", "full_signature": "private boolean isNotTimedOut(final DialogDescriptor dialogDescriptor, final DialogDescriptorUsage usage)", "class_method_signature": "DialogDescriptorService.isNotTimedOut(final DialogDescriptor dialogDescriptor, final DialogDescriptorUsage usage)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-route-engine/src/main/java/com/epam/wilma/router/evaluation/helper/DialogDescriptorService.java"}, "focal_method": {"identifier": "decreaseHitcountWhenUsageIsHitcount", "parameters": "(final DialogDescriptor dialogDescriptor)", "modifiers": "public", "return": "void", "body": "public void decreaseHitcountWhenUsageIsHitcount(final DialogDescriptor dialogDescriptor) {\n        if (dialogDescriptor.getAttributes().getUsage() == DialogDescriptorUsage.HITCOUNT) {\n            long validityValue = dialogDescriptor.getAttributes().decreaseHitcount();\n            LOGGER.debug(\"Hitcount was decreased to \" + validityValue + \" in dialog descriptor '\" + dialogDescriptor.getAttributes().getName() + \"'!\");\n            if (validityValue == 0) {\n                dialogDescriptor.getAttributes().setUsage(DialogDescriptorUsage.DISABLED);\n                LOGGER.debug(\"Dialog descriptor '\" + dialogDescriptor.getAttributes().getName() + \"' was disabled!\");\n            }\n        }\n    }", "signature": "void decreaseHitcountWhenUsageIsHitcount(final DialogDescriptor dialogDescriptor)", "full_signature": "public void decreaseHitcountWhenUsageIsHitcount(final DialogDescriptor dialogDescriptor)", "class_method_signature": "DialogDescriptorService.decreaseHitcountWhenUsageIsHitcount(final DialogDescriptor dialogDescriptor)", "testcase": false, "constructor": false, "invocations": ["getUsage", "getAttributes", "decreaseHitcount", "getAttributes", "debug", "getName", "getAttributes", "setUsage", "getAttributes", "debug", "getName", "getAttributes"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}