{"test_class": {"identifier": "ResultTest", "superclass": "", "interfaces": "", "fields": [], "file": "culvert-main/src/test/java/com/bah/culvert/data/ResultTest.java"}, "test_case": {"identifier": "testGetValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetValues() throws Throwable {\n\n    List<CKeyValue> keys = new ArrayList<CKeyValue>();\n    keys.add(new CKeyValue(new byte[] { 1 }, new byte[] { 2 },\n        new byte[] { 3 }, new byte[] { 4 }));\n    keys.add(new CKeyValue(new byte[] { 1 }, new byte[] { 2 },\n        new byte[] { 5 }, new byte[] { 4, 1 }));\n    keys.add(new CKeyValue(new byte[] { 1 }, new byte[] { 6 },\n        new byte[] { 5 }, new byte[] { 4 }));\n    keys.add(new CKeyValue(new byte[] { 2 }, new byte[] { 2 },\n        new byte[] { 3 }, new byte[] { 4 }));\n    Result result = new Result(keys.toArray(new CKeyValue[0]));\n\n    Assert.assertArrayEquals(new byte[] { 4 },\n        result.getValue(new byte[] { 2 }, new byte[] { 3 }).getValue());\n    Assert.assertArrayEquals(new byte[] { 4, 1 },\n        result.getValue(new byte[] { 2 }, new byte[] { 5 }).getValue());\n    Assert.assertArrayEquals(new byte[] { 4 },\n        result.getValue(new byte[] { 6 }, new byte[] { 5 }).getValue());\n    Assert.assertArrayEquals(new byte[] { 4 },\n        result.getValue(new byte[] { 2 }, new byte[] { 3 }).getValue());\n    Assert.assertEquals(null,\n        result.getValue(new byte[] { 2 }, new byte[] { 2 }));\n  }", "signature": "void testGetValues()", "full_signature": "@Test public void testGetValues()", "class_method_signature": "ResultTest.testGetValues()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "toArray", "assertArrayEquals", "getValue", "getValue", "assertArrayEquals", "getValue", "getValue", "assertArrayEquals", "getValue", "getValue", "assertArrayEquals", "getValue", "getValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "Result", "superclass": "", "interfaces": "implements Writable", "fields": [{"original_string": "protected byte[] recordId;", "modifier": "protected", "type": "byte[]", "declarator": "recordId", "var_name": "recordId"}, {"original_string": "protected List<CKeyValue> values;", "modifier": "protected", "type": "List<CKeyValue>", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "Result", "parameters": "()", "modifiers": "public", "return": "", "signature": " Result()", "full_signature": "public  Result()", "class_method_signature": "Result.Result()", "testcase": false, "constructor": true}, {"identifier": "Result", "parameters": "(byte[] recordID)", "modifiers": "public", "return": "", "signature": " Result(byte[] recordID)", "full_signature": "public  Result(byte[] recordID)", "class_method_signature": "Result.Result(byte[] recordID)", "testcase": false, "constructor": true}, {"identifier": "Result", "parameters": "(byte[] rowId, CKeyValue... keyValues)", "modifiers": "public", "return": "", "signature": " Result(byte[] rowId, CKeyValue... keyValues)", "full_signature": "public  Result(byte[] rowId, CKeyValue... keyValues)", "class_method_signature": "Result.Result(byte[] rowId, CKeyValue... keyValues)", "testcase": false, "constructor": true}, {"identifier": "Result", "parameters": "(CKeyValue... keyValues)", "modifiers": "public", "return": "", "signature": " Result(CKeyValue... keyValues)", "full_signature": "public  Result(CKeyValue... keyValues)", "class_method_signature": "Result.Result(CKeyValue... keyValues)", "testcase": false, "constructor": true}, {"identifier": "Result", "parameters": "(Iterable<CKeyValue> keyValues)", "modifiers": "public", "return": "", "signature": " Result(Iterable<CKeyValue> keyValues)", "full_signature": "public  Result(Iterable<CKeyValue> keyValues)", "class_method_signature": "Result.Result(Iterable<CKeyValue> keyValues)", "testcase": false, "constructor": true}, {"identifier": "getRecordId", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getRecordId()", "full_signature": "public byte[] getRecordId()", "class_method_signature": "Result.getRecordId()", "testcase": false, "constructor": false}, {"identifier": "getKeyValues", "parameters": "()", "modifiers": "public", "return": "List<CKeyValue>", "signature": "List<CKeyValue> getKeyValues()", "full_signature": "public List<CKeyValue> getKeyValues()", "class_method_signature": "Result.getKeyValues()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(byte[] family, byte[] qualifier)", "modifiers": "public", "return": "CKeyValue", "signature": "CKeyValue getValue(byte[] family, byte[] qualifier)", "full_signature": "public CKeyValue getValue(byte[] family, byte[] qualifier)", "class_method_signature": "Result.getValue(byte[] family, byte[] qualifier)", "testcase": false, "constructor": false}, {"identifier": "setRecordId", "parameters": "(byte[] recordId)", "modifiers": "public", "return": "void", "signature": "void setRecordId(byte[] recordId)", "full_signature": "public void setRecordId(byte[] recordId)", "class_method_signature": "Result.setRecordId(byte[] recordId)", "testcase": false, "constructor": false}, {"identifier": "setValues", "parameters": "(CKeyValue... values)", "modifiers": "public", "return": "void", "signature": "void setValues(CKeyValue... values)", "full_signature": "public void setValues(CKeyValue... values)", "class_method_signature": "Result.setValues(CKeyValue... values)", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "@Override public void readFields(DataInput in)", "class_method_signature": "Result.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "@Override public void write(DataOutput out)", "class_method_signature": "Result.write(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Result result)", "modifiers": "public", "return": "void", "signature": "void copy(Result result)", "full_signature": "public void copy(Result result)", "class_method_signature": "Result.copy(Result result)", "testcase": false, "constructor": false}, {"identifier": "addKeyValues", "parameters": "(CKeyValue... kvs)", "modifiers": "public", "return": "void", "signature": "void addKeyValues(CKeyValue... kvs)", "full_signature": "public void addKeyValues(CKeyValue... kvs)", "class_method_signature": "Result.addKeyValues(CKeyValue... kvs)", "testcase": false, "constructor": false}], "file": "culvert-main/src/main/java/com/bah/culvert/data/Result.java"}, "focal_method": {"identifier": "getValue", "parameters": "(byte[] family, byte[] qualifier)", "modifiers": "public", "return": "CKeyValue", "body": "public CKeyValue getValue(byte[] family, byte[] qualifier) {\n    // quick failure case check\n    if (this.values.size() == 0)\n      return null;\n\n    // since we know that they are sorted at this point, just do the lookup as a\n    // binary search\n    int index = Collections.binarySearch(values, new CKeyValue(this.recordId,\n        family, qualifier), KeyComparator.INSTANCE);\n    if (index < 0)\n      return null;\n    return values.get(index);\n  }", "signature": "CKeyValue getValue(byte[] family, byte[] qualifier)", "full_signature": "public CKeyValue getValue(byte[] family, byte[] qualifier)", "class_method_signature": "Result.getValue(byte[] family, byte[] qualifier)", "testcase": false, "constructor": false, "invocations": ["size", "binarySearch", "get"]}, "repository": {"repo_id": 1973010, "url": "https://github.com/booz-allen-hamilton/culvert", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 373, "license": "licensed"}}