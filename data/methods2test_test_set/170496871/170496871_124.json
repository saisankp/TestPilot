{"test_class": {"identifier": "VectorGeneratorPrimitivesTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/util/generators/primitives/vector/VectorGeneratorPrimitivesTest.java"}, "test_case": {"identifier": "testGauss", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGauss() {\n        VectorGenerator gen = VectorGeneratorPrimitives.gauss(VectorUtils.of(2., 100.), VectorUtils.of(20., 1.), 10L);\n\n        final double[] mean = new double[] {2., 100.};\n        final double[] variance = new double[] {20., 1.};\n\n        final int N = 50000;\n        Vector meanStat = IntStream.range(0, N).mapToObj(i -> gen.get()).reduce(Vector::plus).get().times(1. / N);\n        Vector varianceStat = IntStream.range(0, N).mapToObj(i -> gen.get().minus(meanStat))\n            .map(v -> v.times(v)).reduce(Vector::plus).get().times(1. / N);\n\n        assertArrayEquals(mean, meanStat.asArray(), 0.1);\n        assertArrayEquals(variance, varianceStat.asArray(), 0.1);\n    }", "signature": "void testGauss()", "full_signature": "@Test public void testGauss()", "class_method_signature": "VectorGeneratorPrimitivesTest.testGauss()", "testcase": true, "constructor": false, "invocations": ["gauss", "of", "of", "times", "get", "reduce", "mapToObj", "range", "get", "times", "get", "reduce", "map", "mapToObj", "range", "minus", "get", "times", "assertArrayEquals", "asArray", "assertArrayEquals", "asArray"]}, "focal_class": {"identifier": "VectorGeneratorPrimitives", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "gauss", "parameters": "(Vector means, Vector variances, Long seed)", "modifiers": "public static", "return": "VectorGenerator", "signature": "VectorGenerator gauss(Vector means, Vector variances, Long seed)", "full_signature": "public static VectorGenerator gauss(Vector means, Vector variances, Long seed)", "class_method_signature": "VectorGeneratorPrimitives.gauss(Vector means, Vector variances, Long seed)", "testcase": false, "constructor": false}, {"identifier": "gauss", "parameters": "(Vector means, Vector variances)", "modifiers": "public static", "return": "VectorGenerator", "signature": "VectorGenerator gauss(Vector means, Vector variances)", "full_signature": "public static VectorGenerator gauss(Vector means, Vector variances)", "class_method_signature": "VectorGeneratorPrimitives.gauss(Vector means, Vector variances)", "testcase": false, "constructor": false}, {"identifier": "ring", "parameters": "(double radius, double fromAngle, double toAngle)", "modifiers": "public static", "return": "VectorGenerator", "signature": "VectorGenerator ring(double radius, double fromAngle, double toAngle)", "full_signature": "public static VectorGenerator ring(double radius, double fromAngle, double toAngle)", "class_method_signature": "VectorGeneratorPrimitives.ring(double radius, double fromAngle, double toAngle)", "testcase": false, "constructor": false}, {"identifier": "ring", "parameters": "(double radius, double fromAngle, double toAngle, long seed)", "modifiers": "public static", "return": "VectorGenerator", "signature": "VectorGenerator ring(double radius, double fromAngle, double toAngle, long seed)", "full_signature": "public static VectorGenerator ring(double radius, double fromAngle, double toAngle, long seed)", "class_method_signature": "VectorGeneratorPrimitives.ring(double radius, double fromAngle, double toAngle, long seed)", "testcase": false, "constructor": false}, {"identifier": "parallelogram", "parameters": "(Vector bounds)", "modifiers": "public static", "return": "VectorGenerator", "signature": "VectorGenerator parallelogram(Vector bounds)", "full_signature": "public static VectorGenerator parallelogram(Vector bounds)", "class_method_signature": "VectorGeneratorPrimitives.parallelogram(Vector bounds)", "testcase": false, "constructor": false}, {"identifier": "parallelogram", "parameters": "(Vector bounds, long seed)", "modifiers": "public static", "return": "VectorGenerator", "signature": "VectorGenerator parallelogram(Vector bounds, long seed)", "full_signature": "public static VectorGenerator parallelogram(Vector bounds, long seed)", "class_method_signature": "VectorGeneratorPrimitives.parallelogram(Vector bounds, long seed)", "testcase": false, "constructor": false}, {"identifier": "circle", "parameters": "(double radius)", "modifiers": "public static", "return": "VectorGenerator", "signature": "VectorGenerator circle(double radius)", "full_signature": "public static VectorGenerator circle(double radius)", "class_method_signature": "VectorGeneratorPrimitives.circle(double radius)", "testcase": false, "constructor": false}, {"identifier": "circle", "parameters": "(double radius, long seed)", "modifiers": "public static", "return": "VectorGenerator", "signature": "VectorGenerator circle(double radius, long seed)", "full_signature": "public static VectorGenerator circle(double radius, long seed)", "class_method_signature": "VectorGeneratorPrimitives.circle(double radius, long seed)", "testcase": false, "constructor": false}, {"identifier": "zero", "parameters": "(int size)", "modifiers": "public static", "return": "VectorGenerator", "signature": "VectorGenerator zero(int size)", "full_signature": "public static VectorGenerator zero(int size)", "class_method_signature": "VectorGeneratorPrimitives.zero(int size)", "testcase": false, "constructor": false}, {"identifier": "constant", "parameters": "(Vector v)", "modifiers": "public static", "return": "VectorGenerator", "signature": "VectorGenerator constant(Vector v)", "full_signature": "public static VectorGenerator constant(Vector v)", "class_method_signature": "VectorGeneratorPrimitives.constant(Vector v)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/util/generators/primitives/vector/VectorGeneratorPrimitives.java"}, "focal_method": {"identifier": "gauss", "parameters": "(Vector means, Vector variances, Long seed)", "modifiers": "public static", "return": "VectorGenerator", "body": "public static VectorGenerator gauss(Vector means, Vector variances, Long seed) {\n        A.notEmpty(means.asArray(), \"mean.size() != 0\");\n        A.ensure(means.size() == variances.size(), \"mean.size() == variances.size()\");\n\n        RandomProducer[] producers = new RandomProducer[means.size()];\n        for (int i = 0; i < producers.length; i++)\n            producers[i] = new GaussRandomProducer(means.get(i), variances.get(i), seed *= 2);\n        return RandomProducer.vectorize(producers);\n    }", "signature": "VectorGenerator gauss(Vector means, Vector variances, Long seed)", "full_signature": "public static VectorGenerator gauss(Vector means, Vector variances, Long seed)", "class_method_signature": "VectorGeneratorPrimitives.gauss(Vector means, Vector variances, Long seed)", "testcase": false, "constructor": false, "invocations": ["notEmpty", "asArray", "ensure", "size", "size", "size", "get", "get", "vectorize"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}