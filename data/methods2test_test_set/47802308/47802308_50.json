{"test_class": {"identifier": "ImageBatchCompressorTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/modules/boot/src/test/java/org/onetwo/boot/compress/ImageBatchCompressorTest.java"}, "test_case": {"identifier": "testFindMatchFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFindMatchFiles() {\n\t\tImageBatchCompressor compressor = new ImageBatchCompressor();\n\t\tcompressor.setBaseDir(\"\u6587\u4ef6\u5939\");\n\t\tcompressor.setAntPattern(\"*.png\");\n\t\tcompressor.initialize();\n\t\tcompressor.findMatchFiles().forEach(file -> {\n\t\t\tSystem.out.println(\"file: \" + file);\n\t\t});\n\t}", "signature": "void testFindMatchFiles()", "full_signature": "@Test public void testFindMatchFiles()", "class_method_signature": "ImageBatchCompressorTest.testFindMatchFiles()", "testcase": true, "constructor": false, "invocations": ["setBaseDir", "setAntPattern", "initialize", "forEach", "findMatchFiles", "println"]}, "focal_class": {"identifier": "ImageBatchCompressor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ImageCompressor imageCompressor;", "modifier": "private", "type": "ImageCompressor", "declarator": "imageCompressor", "var_name": "imageCompressor"}, {"original_string": "private String baseDir;", "modifier": "private", "type": "String", "declarator": "baseDir", "var_name": "baseDir"}, {"original_string": "private AntPathMatcher antMatcher;", "modifier": "private", "type": "AntPathMatcher", "declarator": "antMatcher", "var_name": "antMatcher"}, {"original_string": "@Setter\n\tprivate ImageCompressorConfig compressorConfig;", "modifier": "@Setter\n\tprivate", "type": "ImageCompressorConfig", "declarator": "compressorConfig", "var_name": "compressorConfig"}, {"original_string": "private String[] antPatterns;", "modifier": "private", "type": "String[]", "declarator": "antPatterns", "var_name": "antPatterns"}, {"original_string": "private String compressedFilePostfix = \"_min\";", "modifier": "private", "type": "String", "declarator": "compressedFilePostfix = \"_min\"", "var_name": "compressedFilePostfix"}, {"original_string": "@Setter\n\tprivate String compressedDir;", "modifier": "@Setter\n\tprivate", "type": "String", "declarator": "compressedDir", "var_name": "compressedDir"}, {"original_string": "@Setter\n\tprivate String compressThresholdSize;", "modifier": "@Setter\n\tprivate", "type": "String", "declarator": "compressThresholdSize", "var_name": "compressThresholdSize"}, {"original_string": "private int compressThresholdSizeInBytes;", "modifier": "private", "type": "int", "declarator": "compressThresholdSizeInBytes", "var_name": "compressThresholdSizeInBytes"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initialize()", "full_signature": "public void initialize()", "class_method_signature": "ImageBatchCompressor.initialize()", "testcase": false, "constructor": false}, {"identifier": "compress", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> compress()", "full_signature": "public List<String> compress()", "class_method_signature": "ImageBatchCompressor.compress()", "testcase": false, "constructor": false}, {"identifier": "findMatchFiles", "parameters": "()", "modifiers": "protected", "return": "List<File>", "signature": "List<File> findMatchFiles()", "full_signature": "protected List<File> findMatchFiles()", "class_method_signature": "ImageBatchCompressor.findMatchFiles()", "testcase": false, "constructor": false}, {"identifier": "setBaseDir", "parameters": "(String baseDir)", "modifiers": "public", "return": "void", "signature": "void setBaseDir(String baseDir)", "full_signature": "public void setBaseDir(String baseDir)", "class_method_signature": "ImageBatchCompressor.setBaseDir(String baseDir)", "testcase": false, "constructor": false}, {"identifier": "setAntPattern", "parameters": "(String...antPatterns)", "modifiers": "public", "return": "void", "signature": "void setAntPattern(String...antPatterns)", "full_signature": "public void setAntPattern(String...antPatterns)", "class_method_signature": "ImageBatchCompressor.setAntPattern(String...antPatterns)", "testcase": false, "constructor": false}], "file": "core/modules/boot/src/main/java/org/onetwo/boot/compress/ImageBatchCompressor.java"}, "focal_method": {"identifier": "findMatchFiles", "parameters": "()", "modifiers": "protected", "return": "List<File>", "body": "protected List<File> findMatchFiles() {\n\t\tString dir = FileUtils.convertDir(baseDir);\n\t\tFile dirFile = new File(dir);\n\t\treturn FileUtils.list(dirFile, file -> {\n\t\t\tString fullpath = FileUtils.replaceBackSlashToSlash(file.getPath());\n\t\t\tString subpath = StringUtils.substringAfter(fullpath, dir); \n\t\t\treturn Stream.of(antPatterns).anyMatch(pattern -> antMatcher.match(pattern, subpath));\n\t\t}, true);\n\t}", "signature": "List<File> findMatchFiles()", "full_signature": "protected List<File> findMatchFiles()", "class_method_signature": "ImageBatchCompressor.findMatchFiles()", "testcase": false, "constructor": false, "invocations": ["convertDir", "list", "replaceBackSlashToSlash", "getPath", "substringAfter", "anyMatch", "of", "match"]}, "repository": {"repo_id": 47802308, "url": "https://github.com/wayshall/onetwo", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 57582, "license": "licensed"}}