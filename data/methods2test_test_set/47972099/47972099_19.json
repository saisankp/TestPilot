{"test_class": {"identifier": "JobVertexBackPressureHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/handlers/JobVertexBackPressureHandlerTest.java"}, "test_case": {"identifier": "testResponseNoStatsAvailable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testResponseNoStatsAvailable() throws Exception {\n\t\tExecutionJobVertex jobVertex = mock(ExecutionJobVertex.class);\n\t\tBackPressureStatsTracker statsTracker = mock(BackPressureStatsTracker.class);\n\n\t\twhen(statsTracker.getOperatorBackPressureStats(any(ExecutionJobVertex.class)))\n\t\t\t\t.thenReturn(Option.<OperatorBackPressureStats>empty());\n\n\t\tJobVertexBackPressureHandler handler = new JobVertexBackPressureHandler(\n\t\t\t\tmock(ExecutionGraphHolder.class),\n\t\t\t\tstatsTracker,\n\t\t\t\t9999);\n\n\t\tString response = handler.handleRequest(jobVertex, Collections.<String, String>emptyMap());\n\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tJsonNode rootNode = mapper.readTree(response);\n\n\t\t// Single element\n\t\tassertEquals(1, rootNode.size());\n\n\t\t// Status\n\t\tJsonNode status = rootNode.get(\"status\");\n\t\tassertNotNull(status);\n\t\tassertEquals(\"deprecated\", status.textValue());\n\n\t\tverify(statsTracker).triggerStackTraceSample(any(ExecutionJobVertex.class));\n\t}", "signature": "void testResponseNoStatsAvailable()", "full_signature": "@Test public void testResponseNoStatsAvailable()", "class_method_signature": "JobVertexBackPressureHandlerTest.testResponseNoStatsAvailable()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getOperatorBackPressureStats", "any", "empty", "mock", "handleRequest", "emptyMap", "readTree", "assertEquals", "size", "get", "assertNotNull", "assertEquals", "textValue", "triggerStackTraceSample", "verify", "any"]}, "focal_class": {"identifier": "JobVertexBackPressureHandler", "superclass": "extends AbstractJobVertexRequestHandler", "interfaces": "", "fields": [{"original_string": "private final BackPressureStatsTracker backPressureStatsTracker;", "modifier": "private final", "type": "BackPressureStatsTracker", "declarator": "backPressureStatsTracker", "var_name": "backPressureStatsTracker"}, {"original_string": "private final int refreshInterval;", "modifier": "private final", "type": "int", "declarator": "refreshInterval", "var_name": "refreshInterval"}], "methods": [{"identifier": "JobVertexBackPressureHandler", "parameters": "(\n\t\t\tExecutionGraphHolder executionGraphHolder,\n\t\t\tBackPressureStatsTracker backPressureStatsTracker,\n\t\t\tint refreshInterval)", "modifiers": "public", "return": "", "signature": " JobVertexBackPressureHandler(\n\t\t\tExecutionGraphHolder executionGraphHolder,\n\t\t\tBackPressureStatsTracker backPressureStatsTracker,\n\t\t\tint refreshInterval)", "full_signature": "public  JobVertexBackPressureHandler(\n\t\t\tExecutionGraphHolder executionGraphHolder,\n\t\t\tBackPressureStatsTracker backPressureStatsTracker,\n\t\t\tint refreshInterval)", "class_method_signature": "JobVertexBackPressureHandler.JobVertexBackPressureHandler(\n\t\t\tExecutionGraphHolder executionGraphHolder,\n\t\t\tBackPressureStatsTracker backPressureStatsTracker,\n\t\t\tint refreshInterval)", "testcase": false, "constructor": true}, {"identifier": "handleRequest", "parameters": "(\n\t\t\tExecutionJobVertex jobVertex,\n\t\t\tMap<String, String> params)", "modifiers": "@Override public", "return": "String", "signature": "String handleRequest(\n\t\t\tExecutionJobVertex jobVertex,\n\t\t\tMap<String, String> params)", "full_signature": "@Override public String handleRequest(\n\t\t\tExecutionJobVertex jobVertex,\n\t\t\tMap<String, String> params)", "class_method_signature": "JobVertexBackPressureHandler.handleRequest(\n\t\t\tExecutionJobVertex jobVertex,\n\t\t\tMap<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "getBackPressureLevel", "parameters": "(double backPressureRatio)", "modifiers": "static", "return": "String", "signature": "String getBackPressureLevel(double backPressureRatio)", "full_signature": "static String getBackPressureLevel(double backPressureRatio)", "class_method_signature": "JobVertexBackPressureHandler.getBackPressureLevel(double backPressureRatio)", "testcase": false, "constructor": false}], "file": "flink-runtime-web/src/main/java/org/apache/flink/runtime/webmonitor/handlers/JobVertexBackPressureHandler.java"}, "focal_method": {"identifier": "handleRequest", "parameters": "(\n\t\t\tExecutionJobVertex jobVertex,\n\t\t\tMap<String, String> params)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String handleRequest(\n\t\t\tExecutionJobVertex jobVertex,\n\t\t\tMap<String, String> params) throws Exception {\n\n\t\ttry (StringWriter writer = new StringWriter();\n\t\t\t\tJsonGenerator gen = JsonFactory.jacksonFactory.createGenerator(writer)) {\n\n\t\t\tgen.writeStartObject();\n\n\t\t\tOption<OperatorBackPressureStats> statsOption = backPressureStatsTracker\n\t\t\t\t\t.getOperatorBackPressureStats(jobVertex);\n\n\t\t\tif (statsOption.isDefined()) {\n\t\t\t\tOperatorBackPressureStats stats = statsOption.get();\n\n\t\t\t\t// Check whether we need to refresh\n\t\t\t\tif (refreshInterval <= System.currentTimeMillis() - stats.getEndTimestamp()) {\n\t\t\t\t\tbackPressureStatsTracker.triggerStackTraceSample(jobVertex);\n\t\t\t\t\tgen.writeStringField(\"status\", \"deprecated\");\n\t\t\t\t} else {\n\t\t\t\t\tgen.writeStringField(\"status\", \"ok\");\n\t\t\t\t}\n\n\t\t\t\tgen.writeStringField(\"backpressure-level\", getBackPressureLevel(stats.getMaxBackPressureRatio()));\n\t\t\t\tgen.writeNumberField(\"end-timestamp\", stats.getEndTimestamp());\n\n\t\t\t\t// Sub tasks\n\t\t\t\tgen.writeArrayFieldStart(\"subtasks\");\n\t\t\t\tint numSubTasks = stats.getNumberOfSubTasks();\n\t\t\t\tfor (int i = 0; i < numSubTasks; i++) {\n\t\t\t\t\tdouble ratio = stats.getBackPressureRatio(i);\n\n\t\t\t\t\tgen.writeStartObject();\n\t\t\t\t\tgen.writeNumberField(\"subtask\", i);\n\t\t\t\t\tgen.writeStringField(\"backpressure-level\", getBackPressureLevel(ratio));\n\t\t\t\t\tgen.writeNumberField(\"ratio\", ratio);\n\t\t\t\t\tgen.writeEndObject();\n\t\t\t\t}\n\t\t\t\tgen.writeEndArray();\n\t\t\t} else {\n\t\t\t\tbackPressureStatsTracker.triggerStackTraceSample(jobVertex);\n\t\t\t\tgen.writeStringField(\"status\", \"deprecated\");\n\t\t\t}\n\n\t\t\tgen.writeEndObject();\n\t\t\tgen.close();\n\n\t\t\treturn writer.toString();\n\t\t}\n\t}", "signature": "String handleRequest(\n\t\t\tExecutionJobVertex jobVertex,\n\t\t\tMap<String, String> params)", "full_signature": "@Override public String handleRequest(\n\t\t\tExecutionJobVertex jobVertex,\n\t\t\tMap<String, String> params)", "class_method_signature": "JobVertexBackPressureHandler.handleRequest(\n\t\t\tExecutionJobVertex jobVertex,\n\t\t\tMap<String, String> params)", "testcase": false, "constructor": false, "invocations": ["createGenerator", "writeStartObject", "getOperatorBackPressureStats", "isDefined", "get", "currentTimeMillis", "getEndTimestamp", "triggerStackTraceSample", "writeStringField", "writeStringField", "writeStringField", "getBackPressureLevel", "getMaxBackPressureRatio", "writeNumberField", "getEndTimestamp", "writeArrayFieldStart", "getNumberOfSubTasks", "getBackPressureRatio", "writeStartObject", "writeNumberField", "writeStringField", "getBackPressureLevel", "writeNumberField", "writeEndObject", "writeEndArray", "triggerStackTraceSample", "writeStringField", "writeEndObject", "close", "toString"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}