{"test_class": {"identifier": "BrowserMobRequestUpdaterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private HttpEntityEnclosingRequestBase enclosingRequest;", "modifier": "@Mock\n    private", "type": "HttpEntityEnclosingRequestBase", "declarator": "enclosingRequest", "var_name": "enclosingRequest"}, {"original_string": "@Mock\n    private WilmaHttpRequest wilmaHttpRequest;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "wilmaHttpRequest", "var_name": "wilmaHttpRequest"}, {"original_string": "@Mock\n    private BrowserMobHttpRequest browserMobHttpRequest;", "modifier": "@Mock\n    private", "type": "BrowserMobHttpRequest", "declarator": "browserMobHttpRequest", "var_name": "browserMobHttpRequest"}, {"original_string": "@Mock\n    private HttpRequestBase requestBase;", "modifier": "@Mock\n    private", "type": "HttpRequestBase", "declarator": "requestBase", "var_name": "requestBase"}, {"original_string": "@Mock\n    private Header header;", "modifier": "@Mock\n    private", "type": "Header", "declarator": "header", "var_name": "header"}, {"original_string": "@InjectMocks\n    private BrowserMobRequestUpdater underTest;", "modifier": "@InjectMocks\n    private", "type": "BrowserMobRequestUpdater", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-browsermob-integration/src/test/java/com/epam/wilma/browsermob/transformer/BrowserMobRequestUpdaterTest.java"}, "test_case": {"identifier": "testUpdateRequestShouldUpdateHeadersRemovePart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdateRequestShouldUpdateHeadersRemovePart() throws URISyntaxException {\n        //GIVEN\n        URI uri = new URI(\"MOCK\");\n        given(browserMobHttpRequest.getMethod()).willReturn(requestBase);\n        given(requestBase.getFirstHeader(\"A\")).willReturn(header);\n        given(header.getName()).willReturn(\"A\");\n        given(header.getValue()).willReturn(\"B\");\n        given(wilmaHttpRequest.getUri()).willReturn(uri);\n        String mockID = \"WILMA-LOG-MOCK-ID\";\n        Map<String, HttpHeaderChange> headerChanges = new HashMap<>();\n        HttpHeaderToBeRemoved headerToBeRemoved = new HttpHeaderToBeRemoved();\n        headerChanges.put(\"A\", headerToBeRemoved);\n        given(wilmaHttpRequest.getHeaderChanges()).willReturn(headerChanges);\n        given(wilmaHttpRequest.getWilmaMessageId()).willReturn(mockID);\n        //WHEN\n        underTest.updateRequest(browserMobHttpRequest, wilmaHttpRequest);\n        //THEN\n        verify(requestBase).removeHeader(header);\n    }", "signature": "void testUpdateRequestShouldUpdateHeadersRemovePart()", "full_signature": "@Test public void testUpdateRequestShouldUpdateHeadersRemovePart()", "class_method_signature": "BrowserMobRequestUpdaterTest.testUpdateRequestShouldUpdateHeadersRemovePart()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getMethod", "willReturn", "given", "getFirstHeader", "willReturn", "given", "getName", "willReturn", "given", "getValue", "willReturn", "given", "getUri", "put", "willReturn", "given", "getHeaderChanges", "willReturn", "given", "getWilmaMessageId", "updateRequest", "removeHeader", "verify"]}, "focal_class": {"identifier": "BrowserMobRequestUpdater", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "updateRequest", "parameters": "(final BrowserMobHttpRequest browserMobHttpRequest, final WilmaHttpRequest wilmaRequest)", "modifiers": "public", "return": "void", "signature": "void updateRequest(final BrowserMobHttpRequest browserMobHttpRequest, final WilmaHttpRequest wilmaRequest)", "full_signature": "public void updateRequest(final BrowserMobHttpRequest browserMobHttpRequest, final WilmaHttpRequest wilmaRequest)", "class_method_signature": "BrowserMobRequestUpdater.updateRequest(final BrowserMobHttpRequest browserMobHttpRequest, final WilmaHttpRequest wilmaRequest)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-browsermob-integration/src/main/java/com/epam/wilma/browsermob/transformer/BrowserMobRequestUpdater.java"}, "focal_method": {"identifier": "updateRequest", "parameters": "(final BrowserMobHttpRequest browserMobHttpRequest, final WilmaHttpRequest wilmaRequest)", "modifiers": "public", "return": "void", "body": "public void updateRequest(final BrowserMobHttpRequest browserMobHttpRequest, final WilmaHttpRequest wilmaRequest) {\n        // Update the headers of the original request with extra headers added/removed by Req interceptors\n        // Note, that when we redirect the request to the stub, we always add the message id to the extra headers part\n\n        Map<String, HttpHeaderChange> headerChangeMap = wilmaRequest.getHeaderChanges();\n        if (headerChangeMap != null && !headerChangeMap.isEmpty()) { //we have header change requests\n            for (Map.Entry<String, HttpHeaderChange> headerChangeEntry : headerChangeMap.entrySet()) {\n                String headerKey = headerChangeEntry.getKey();\n                HttpHeaderChange headerChange = headerChangeEntry.getValue();\n                Header header = browserMobHttpRequest.getMethod().getFirstHeader(headerKey);\n\n                if (headerChange instanceof HttpHeaderToBeUpdated) {\n                    // it is HttpHeaderToBeChanged, so added, or updated\n                    if (header != null) {\n                        ((HttpHeaderToBeUpdated) headerChange).setOriginalValue(header.getValue());\n                    }\n                    browserMobHttpRequest.getMethod().addHeader(headerKey, ((HttpHeaderToBeUpdated) headerChange).getNewValue());\n                    headerChange.setApplied();\n                } else {\n                    // it is HttpHeaderToBeRemoved\n                    if (header != null) {\n                        browserMobHttpRequest.getMethod().removeHeader(header);\n                        headerChange.setApplied();\n                    }\n                }\n            }\n        }\n\n        //update the body\n        byte[] newBody = wilmaRequest.getNewBody();\n        if (newBody != null) {\n            if (browserMobHttpRequest.getMethod() instanceof HttpEntityEnclosingRequestBase) {\n                HttpEntityEnclosingRequestBase enclosingRequest = (HttpEntityEnclosingRequestBase) browserMobHttpRequest.getMethod();\n                enclosingRequest.setEntity(new ByteArrayEntity(wilmaRequest.getNewBody()));\n            }\n        }\n        //set response volatility approach\n        browserMobHttpRequest.setResponseVolatile(wilmaRequest.isResponseVolatile());\n        //switch between original uri (proxy mode selected) or wilma internal uri (stub mode selected)\n        browserMobHttpRequest.getMethod().setURI(wilmaRequest.getUri());\n    }", "signature": "void updateRequest(final BrowserMobHttpRequest browserMobHttpRequest, final WilmaHttpRequest wilmaRequest)", "full_signature": "public void updateRequest(final BrowserMobHttpRequest browserMobHttpRequest, final WilmaHttpRequest wilmaRequest)", "class_method_signature": "BrowserMobRequestUpdater.updateRequest(final BrowserMobHttpRequest browserMobHttpRequest, final WilmaHttpRequest wilmaRequest)", "testcase": false, "constructor": false, "invocations": ["getHeaderChanges", "isEmpty", "entrySet", "getKey", "getValue", "getFirstHeader", "getMethod", "setOriginalValue", "getValue", "addHeader", "getMethod", "getNewValue", "setApplied", "removeHeader", "getMethod", "setApplied", "getNewBody", "getMethod", "getMethod", "setEntity", "getNewBody", "setResponseVolatile", "isResponseVolatile", "setURI", "getMethod", "getUri"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}