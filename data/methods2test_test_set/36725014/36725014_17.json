{"test_class": {"identifier": "SelectTest", "superclass": "", "interfaces": "", "fields": [], "file": "squel/src/test/java/com/github/gchudnov/squel/SelectTest.java"}, "test_case": {"identifier": "setShouldThrow", "parameters": "()", "modifiers": "@Test(expected=UnsupportedOperationException.class) public", "return": "void", "body": "@Test(expected=UnsupportedOperationException.class)\n    public void setShouldThrow() {\n        Squel.select()\n                .set(\"NAME\", \"VALUE\");\n    }", "signature": "void setShouldThrow()", "full_signature": "@Test(expected=UnsupportedOperationException.class) public void setShouldThrow()", "class_method_signature": "SelectTest.setShouldThrow()", "testcase": true, "constructor": false, "invocations": ["set", "select"]}, "focal_class": {"identifier": "Select", "superclass": "extends QueryBuilder", "interfaces": "", "fields": [], "methods": [{"identifier": "Select", "parameters": "(QueryBuilderOptions options)", "modifiers": "", "return": "", "signature": " Select(QueryBuilderOptions options)", "full_signature": "  Select(QueryBuilderOptions options)", "class_method_signature": "Select.Select(QueryBuilderOptions options)", "testcase": false, "constructor": true}, {"identifier": "distinct", "parameters": "()", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder distinct()", "full_signature": "@Override public QueryBuilder distinct()", "class_method_signature": "Select.distinct()", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(String table, String alias)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder from(String table, String alias)", "full_signature": "@Override public QueryBuilder from(String table, String alias)", "class_method_signature": "Select.from(String table, String alias)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(QueryBuilder table, String alias)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder from(QueryBuilder table, String alias)", "full_signature": "@Override public QueryBuilder from(QueryBuilder table, String alias)", "class_method_signature": "Select.from(QueryBuilder table, String alias)", "testcase": false, "constructor": false}, {"identifier": "field", "parameters": "(String field, String alias)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder field(String field, String alias)", "full_signature": "@Override public QueryBuilder field(String field, String alias)", "class_method_signature": "Select.field(String field, String alias)", "testcase": false, "constructor": false}, {"identifier": "field", "parameters": "(QueryBuilder field, String alias)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder field(QueryBuilder field, String alias)", "full_signature": "@Override public QueryBuilder field(QueryBuilder field, String alias)", "class_method_signature": "Select.field(QueryBuilder field, String alias)", "testcase": false, "constructor": false}, {"identifier": "fields", "parameters": "(Iterable<String> fields)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder fields(Iterable<String> fields)", "full_signature": "@Override public QueryBuilder fields(Iterable<String> fields)", "class_method_signature": "Select.fields(Iterable<String> fields)", "testcase": false, "constructor": false}, {"identifier": "group", "parameters": "(String field)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder group(String field)", "full_signature": "@Override public QueryBuilder group(String field)", "class_method_signature": "Select.group(String field)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String table, String alias, String condition, JoinType type)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder join(String table, String alias, String condition, JoinType type)", "full_signature": "@Override public QueryBuilder join(String table, String alias, String condition, JoinType type)", "class_method_signature": "Select.join(String table, String alias, String condition, JoinType type)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(QueryBuilder table, String alias, String condition, JoinType type)", "modifiers": "public", "return": "QueryBuilder", "signature": "QueryBuilder join(QueryBuilder table, String alias, String condition, JoinType type)", "full_signature": "public QueryBuilder join(QueryBuilder table, String alias, String condition, JoinType type)", "class_method_signature": "Select.join(QueryBuilder table, String alias, String condition, JoinType type)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String table, String alias, Expression condition, JoinType type)", "modifiers": "public", "return": "QueryBuilder", "signature": "QueryBuilder join(String table, String alias, Expression condition, JoinType type)", "full_signature": "public QueryBuilder join(String table, String alias, Expression condition, JoinType type)", "class_method_signature": "Select.join(String table, String alias, Expression condition, JoinType type)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(QueryBuilder table, String alias, Expression condition, JoinType type)", "modifiers": "public", "return": "QueryBuilder", "signature": "QueryBuilder join(QueryBuilder table, String alias, Expression condition, JoinType type)", "full_signature": "public QueryBuilder join(QueryBuilder table, String alias, Expression condition, JoinType type)", "class_method_signature": "Select.join(QueryBuilder table, String alias, Expression condition, JoinType type)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(String condition, P param)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder where(String condition, P param)", "full_signature": "@Override public QueryBuilder where(String condition, P param)", "class_method_signature": "Select.where(String condition, P param)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(Expression condition, P param)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder where(Expression condition, P param)", "full_signature": "@Override public QueryBuilder where(Expression condition, P param)", "class_method_signature": "Select.where(Expression condition, P param)", "testcase": false, "constructor": false}, {"identifier": "limit", "parameters": "(int value)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder limit(int value)", "full_signature": "@Override public QueryBuilder limit(int value)", "class_method_signature": "Select.limit(int value)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(String field, SortOrder dir)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder order(String field, SortOrder dir)", "full_signature": "@Override public QueryBuilder order(String field, SortOrder dir)", "class_method_signature": "Select.order(String field, SortOrder dir)", "testcase": false, "constructor": false}, {"identifier": "offset", "parameters": "(int value)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder offset(int value)", "full_signature": "@Override public QueryBuilder offset(int value)", "class_method_signature": "Select.offset(int value)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(String table, UnionType unionType)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder union(String table, UnionType unionType)", "full_signature": "@Override public QueryBuilder union(String table, UnionType unionType)", "class_method_signature": "Select.union(String table, UnionType unionType)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(QueryBuilder table, UnionType unionType)", "modifiers": "public", "return": "QueryBuilder", "signature": "QueryBuilder union(QueryBuilder table, UnionType unionType)", "full_signature": "public QueryBuilder union(QueryBuilder table, UnionType unionType)", "class_method_signature": "Select.union(QueryBuilder table, UnionType unionType)", "testcase": false, "constructor": false}], "file": "squel/src/main/java/com/github/gchudnov/squel/Select.java"}, "focal_method": {"identifier": "Select", "parameters": "(QueryBuilderOptions options)", "modifiers": "", "return": "", "body": "Select(QueryBuilderOptions options) {\n        super(options, Arrays.asList(\n                new StringBlock(options, \"SELECT\"),\n                new DistinctBlock(options),  // 1\n                new GetFieldBlock(options),  // 2\n                new FromTableBlock(options), // 3\n                new JoinBlock(options),      // 4\n                new WhereBlock(options),     // 5\n                new GroupByBlock(options),   // 6\n                new OrderByBlock(options),   // 7\n                new LimitBlock(options),     // 8\n                new OffsetBlock(options),    // 9\n                new UnionBlock(options)      // 10\n        ));\n    }", "signature": " Select(QueryBuilderOptions options)", "full_signature": "  Select(QueryBuilderOptions options)", "class_method_signature": "Select.Select(QueryBuilderOptions options)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 36725014, "url": "https://github.com/gchudnov/squel-java", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 456, "license": "licensed"}}