{"test_class": {"identifier": "CheckValidityAsyncOperationPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CheckValidityAsyncOperationPlugin plugin;", "modifier": "private", "type": "CheckValidityAsyncOperationPlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}, {"original_string": "private IKey operationKey;", "modifier": "private", "type": "IKey", "declarator": "operationKey", "var_name": "operationKey"}], "file": "CommonFeatures/AsyncOperations-plugins/PluginCheckValidityAsyncOperationActor/src/test/java/info/smart_tools/smartactors/async_operations_plugins/check_validity_async_operation_actor_plugin/CheckValidityAsyncOperationPluginTest.java"}, "test_case": {"identifier": "ShouldAddNewItemDuringLoad", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ShouldAddNewItemDuringLoad() throws Exception {\n        BootstrapItem bootstrapItem = Mockito.mock(BootstrapItem.class);\n        PowerMockito.whenNew(BootstrapItem.class).withAnyArguments().thenReturn(bootstrapItem);\n        when(bootstrapItem.after(anyString())).thenReturn(bootstrapItem);\n        when(bootstrapItem.before(anyString())).thenReturn(bootstrapItem);\n\n        CheckValidityAsyncOperationActor actor = Mockito.mock(CheckValidityAsyncOperationActor.class);\n        PowerMockito.whenNew(CheckValidityAsyncOperationActor.class).withAnyArguments().thenReturn(actor);\n\n        plugin.load();\n\n        PowerMockito.verifyNew(BootstrapItem.class).withArguments(\"CreateCheckValidityAsyncOperationActor\");\n\n        ArgumentCaptor<IPoorAction> actionArgumentCaptor = ArgumentCaptor.forClass(IPoorAction.class);\n        verify(bootstrapItem).process(actionArgumentCaptor.capture());\n\n        ArgumentCaptor<ApplyFunctionToArgumentsStrategy> createNewInstanceStrategyArgumentCaptor =\n                ArgumentCaptor.forClass(ApplyFunctionToArgumentsStrategy.class);\n        actionArgumentCaptor.getValue().execute();\n\n        PowerMockito.verifyStatic();\n        IOC.register(Mockito.eq(operationKey), createNewInstanceStrategyArgumentCaptor.capture());\n\n        verify(bootstrap).add(Mockito.any());\n    }", "signature": "void ShouldAddNewItemDuringLoad()", "full_signature": "@Test public void ShouldAddNewItemDuringLoad()", "class_method_signature": "CheckValidityAsyncOperationPluginTest.ShouldAddNewItemDuringLoad()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "withAnyArguments", "whenNew", "thenReturn", "when", "after", "anyString", "thenReturn", "when", "before", "anyString", "mock", "thenReturn", "withAnyArguments", "whenNew", "load", "withArguments", "verifyNew", "forClass", "process", "verify", "capture", "forClass", "execute", "getValue", "verifyStatic", "register", "eq", "capture", "add", "verify", "any"]}, "focal_class": {"identifier": "CheckValidityAsyncOperationPlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "CheckValidityAsyncOperationPlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " CheckValidityAsyncOperationPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  CheckValidityAsyncOperationPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "CheckValidityAsyncOperationPlugin.CheckValidityAsyncOperationPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "CheckValidityAsyncOperationPlugin.load()", "testcase": false, "constructor": false}], "file": "CommonFeatures/AsyncOperations-plugins/PluginCheckValidityAsyncOperationActor/src/main/java/info/smart_tools/smartactors/async_operations_plugins/check_validity_async_operation_actor_plugin/CheckValidityAsyncOperationPlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"CreateCheckValidityAsyncOperationActor\");\n\n            item\n//                    .after(\"IOC\")\n//                    .before(\"starter\")\n                    .process(() -> {\n                try {\n                    IKey operationKey = Keys.getOrAdd(CheckValidityAsyncOperationActor.class.getCanonicalName());\n                    IOC.register(operationKey, new ApplyFunctionToArgumentsStrategy(\n                            (args) -> {\n                                return new CheckValidityAsyncOperationActor((IObject) args[0]);\n                        }\n                    ));\n                } catch (ResolutionException e) {\n                    throw new ActionExecuteException(\"CheckValidityAsyncOperationActor plugin can't load: can't get CheckValidityAsyncOperationActor key\", e);\n                } catch (InvalidArgumentException e) {\n                    throw new ActionExecuteException(\"CheckValidityAsyncOperationActor plugin can't load: can't create strategy\", e);\n                } catch (RegistrationException e) {\n                    throw new ActionExecuteException(\"CheckValidityAsyncOperationActor plugin can't load: can't register new strategy\", e);\n                }\n            });\n            bootstrap.add(item);\n        } catch (InvalidArgumentException e) {\n            throw new PluginException(\"Can't load CheckValidityAsyncOperation plugin\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "CheckValidityAsyncOperationPlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "getOrAdd", "getCanonicalName", "register", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}