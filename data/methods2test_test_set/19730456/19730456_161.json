{"test_class": {"identifier": "CountingBytesSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Source<byte[], byte[]> src;", "modifier": "private", "type": "Source<byte[], byte[]>", "declarator": "src", "var_name": "src"}], "file": "ethereumj-core/src/test/java/org/ethereum/datasource/CountingBytesSourceTest.java"}, "test_case": {"identifier": "testDelete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDelete() {\n        src.put(intToKey(0), intToValue(0));\n        src.delete(intToKey(0));\n        assertNull(src.get(intToKey(0)));\n\n        src.put(intToKey(0), intToValue(0));\n        src.put(intToKey(0), intToValue(0));\n        src.delete(intToKey(0));\n        assertEquals(str(intToValue(0)), str(src.get(intToKey(0))));\n        src.delete(intToKey(0));\n        assertNull(src.get(intToKey(0)));\n\n        src.put(intToKey(1), intToValue(1));\n        src.put(intToKey(1), intToValue(1));\n        src.put(intToKey(1), null);\n        assertEquals(str(intToValue(1)), str(src.get(intToKey(1))));\n        src.put(intToKey(1), null);\n        assertNull(src.get(intToKey(1)));\n\n        src.put(intToKey(1), intToValue(1));\n        src.put(intToKey(1), intToValue(2));\n        src.delete(intToKey(1));\n        assertEquals(str(intToValue(2)), str(src.get(intToKey(1))));\n        src.delete(intToKey(1));\n        assertNull(src.get(intToKey(1)));\n    }", "signature": "void testDelete()", "full_signature": "@Test public void testDelete()", "class_method_signature": "CountingBytesSourceTest.testDelete()", "testcase": true, "constructor": false, "invocations": ["put", "intToKey", "intToValue", "delete", "intToKey", "assertNull", "get", "intToKey", "put", "intToKey", "intToValue", "put", "intToKey", "intToValue", "delete", "intToKey", "assertEquals", "str", "intToValue", "str", "get", "intToKey", "delete", "intToKey", "assertNull", "get", "intToKey", "put", "intToKey", "intToValue", "put", "intToKey", "intToValue", "put", "intToKey", "assertEquals", "str", "intToValue", "str", "get", "intToKey", "put", "intToKey", "assertNull", "get", "intToKey", "put", "intToKey", "intToValue", "put", "intToKey", "intToValue", "delete", "intToKey", "assertEquals", "str", "intToValue", "str", "get", "intToKey", "delete", "intToKey", "assertNull", "get", "intToKey"]}, "focal_class": {"identifier": "CountingBytesSource", "superclass": "extends AbstractChainedSource<byte[], byte[], byte[], byte[]>", "interfaces": "implements HashedKeySource<byte[], byte[]>", "fields": [{"original_string": "QuotientFilter filter;", "modifier": "", "type": "QuotientFilter", "declarator": "filter", "var_name": "filter"}, {"original_string": "boolean dirty = false;", "modifier": "", "type": "boolean", "declarator": "dirty = false", "var_name": "dirty"}, {"original_string": "private byte[] filterKey = HashUtil.sha3(\"countingStateFilter\".getBytes());", "modifier": "private", "type": "byte[]", "declarator": "filterKey = HashUtil.sha3(\"countingStateFilter\".getBytes())", "var_name": "filterKey"}], "methods": [{"identifier": "CountingBytesSource", "parameters": "(Source<byte[], byte[]> src)", "modifiers": "public", "return": "", "signature": " CountingBytesSource(Source<byte[], byte[]> src)", "full_signature": "public  CountingBytesSource(Source<byte[], byte[]> src)", "class_method_signature": "CountingBytesSource.CountingBytesSource(Source<byte[], byte[]> src)", "testcase": false, "constructor": true}, {"identifier": "CountingBytesSource", "parameters": "(Source<byte[], byte[]> src, boolean bloom)", "modifiers": "public", "return": "", "signature": " CountingBytesSource(Source<byte[], byte[]> src, boolean bloom)", "full_signature": "public  CountingBytesSource(Source<byte[], byte[]> src, boolean bloom)", "class_method_signature": "CountingBytesSource.CountingBytesSource(Source<byte[], byte[]> src, boolean bloom)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(byte[] key, byte[] val)", "modifiers": "@Override public", "return": "void", "signature": "void put(byte[] key, byte[] val)", "full_signature": "@Override public void put(byte[] key, byte[] val)", "class_method_signature": "CountingBytesSource.put(byte[] key, byte[] val)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(byte[] key)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] get(byte[] key)", "full_signature": "@Override public byte[] get(byte[] key)", "class_method_signature": "CountingBytesSource.get(byte[] key)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(byte[] key)", "modifiers": "@Override public", "return": "void", "signature": "void delete(byte[] key)", "full_signature": "@Override public void delete(byte[] key)", "class_method_signature": "CountingBytesSource.delete(byte[] key)", "testcase": false, "constructor": false}, {"identifier": "flushImpl", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean flushImpl()", "full_signature": "@Override protected boolean flushImpl()", "class_method_signature": "CountingBytesSource.flushImpl()", "testcase": false, "constructor": false}, {"identifier": "decodeValue", "parameters": "(byte[] srcVal)", "modifiers": "protected", "return": "byte[]", "signature": "byte[] decodeValue(byte[] srcVal)", "full_signature": "protected byte[] decodeValue(byte[] srcVal)", "class_method_signature": "CountingBytesSource.decodeValue(byte[] srcVal)", "testcase": false, "constructor": false}, {"identifier": "decodeCount", "parameters": "(byte[] srcVal)", "modifiers": "protected", "return": "int", "signature": "int decodeCount(byte[] srcVal)", "full_signature": "protected int decodeCount(byte[] srcVal)", "class_method_signature": "CountingBytesSource.decodeCount(byte[] srcVal)", "testcase": false, "constructor": false}, {"identifier": "encodeCount", "parameters": "(byte[] val, int count)", "modifiers": "protected", "return": "byte[]", "signature": "byte[] encodeCount(byte[] val, int count)", "full_signature": "protected byte[] encodeCount(byte[] val, int count)", "class_method_signature": "CountingBytesSource.encodeCount(byte[] val, int count)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/datasource/CountingBytesSource.java"}, "focal_method": {"identifier": "delete", "parameters": "(byte[] key)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void delete(byte[] key) {\n        synchronized (this) {\n            int srcCount;\n            byte[] srcVal = null;\n            if (filter == null || filter.maybeContains(key)) {\n                srcVal = getSource().get(key);\n                srcCount = decodeCount(srcVal);\n            } else {\n                srcCount = 1;\n            }\n            if (srcCount > 1) {\n                getSource().put(key, encodeCount(decodeValue(srcVal), srcCount - 1));\n            } else {\n                getSource().delete(key);\n            }\n        }\n    }", "signature": "void delete(byte[] key)", "full_signature": "@Override public void delete(byte[] key)", "class_method_signature": "CountingBytesSource.delete(byte[] key)", "testcase": false, "constructor": false, "invocations": ["maybeContains", "get", "getSource", "decodeCount", "put", "getSource", "encodeCount", "decodeValue", "delete", "getSource"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}