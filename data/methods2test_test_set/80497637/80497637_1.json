{"test_class": {"identifier": "DynectScannerTest", "superclass": "", "interfaces": "", "fields": [], "file": "mercator-dynect/src/test/java/org/lendingclub/mercator/dynect/DynectScannerTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n\t@Ignore\n\tpublic void test() {\n\t\t\n\t\tString companyName = \"Example\";\n\t\tString userName = \"mercator\";\n\t\tString password = \"test\";\n\t\t\n\t\tDynectScanner scanner = new Projector.Builder().build().createBuilder(DynectScannerBuilder.class).withProperties(companyName, userName, password).build();\n\t\tscanner.scan();\t\n\t}", "signature": "void test()", "full_signature": "@Test @Ignore public void test()", "class_method_signature": "DynectScannerTest.test()", "testcase": true, "constructor": false, "invocations": ["build", "withProperties", "createBuilder", "build", "scan"]}, "focal_class": {"identifier": "DynectScanner", "superclass": "extends AbstractScanner", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "private Supplier<DynectClient> clientSupplier = Suppliers.memoize(new DynectClientSupplier());", "modifier": "private", "type": "Supplier<DynectClient>", "declarator": "clientSupplier = Suppliers.memoize(new DynectClientSupplier())", "var_name": "clientSupplier"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}], "methods": [{"identifier": "DynectScanner", "parameters": "(ScannerBuilder<? extends Scanner> builder)", "modifiers": "public", "return": "", "signature": " DynectScanner(ScannerBuilder<? extends Scanner> builder)", "full_signature": "public  DynectScanner(ScannerBuilder<? extends Scanner> builder)", "class_method_signature": "DynectScanner.DynectScanner(ScannerBuilder<? extends Scanner> builder)", "testcase": false, "constructor": true}, {"identifier": "getDynectClient", "parameters": "()", "modifiers": "public", "return": "DynectClient", "signature": "DynectClient getDynectClient()", "full_signature": "public DynectClient getDynectClient()", "class_method_signature": "DynectScanner.getDynectClient()", "testcase": false, "constructor": false}, {"identifier": "scan", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void scan()", "full_signature": "@Override public void scan()", "class_method_signature": "DynectScanner.scan()", "testcase": false, "constructor": false}, {"identifier": "scanAllRecordsByZone", "parameters": "(List<String> zones)", "modifiers": "private", "return": "void", "signature": "void scanAllRecordsByZone(List<String> zones)", "full_signature": "private void scanAllRecordsByZone(List<String> zones)", "class_method_signature": "DynectScanner.scanAllRecordsByZone(List<String> zones)", "testcase": false, "constructor": false}, {"identifier": "scanZones", "parameters": "()", "modifiers": "private", "return": "List<String>", "signature": "List<String> scanZones()", "full_signature": "private List<String> scanZones()", "class_method_signature": "DynectScanner.scanZones()", "testcase": false, "constructor": false}, {"identifier": "purgeOldData", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void purgeOldData()", "full_signature": "private void purgeOldData()", "class_method_signature": "DynectScanner.purgeOldData()", "testcase": false, "constructor": false}, {"identifier": "toRecordJson", "parameters": "(JsonNode data)", "modifiers": "", "return": "ObjectNode", "signature": "ObjectNode toRecordJson(JsonNode data)", "full_signature": " ObjectNode toRecordJson(JsonNode data)", "class_method_signature": "DynectScanner.toRecordJson(JsonNode data)", "testcase": false, "constructor": false}, {"identifier": "toZoneJson", "parameters": "(JsonNode data)", "modifiers": "", "return": "ObjectNode", "signature": "ObjectNode toZoneJson(JsonNode data)", "full_signature": " ObjectNode toZoneJson(JsonNode data)", "class_method_signature": "DynectScanner.toZoneJson(JsonNode data)", "testcase": false, "constructor": false}], "file": "mercator-dynect/src/main/java/org/lendingclub/mercator/dynect/DynectScanner.java"}, "focal_method": {"identifier": "scan", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void scan() {\n\t\t\n\t\tList<String> zones = scanZones();\n\t\tscanAllRecordsByZone(zones);\n\t\tpurgeOldData();\n\t}", "signature": "void scan()", "full_signature": "@Override public void scan()", "class_method_signature": "DynectScanner.scan()", "testcase": false, "constructor": false, "invocations": ["scanZones", "scanAllRecordsByZone", "purgeOldData"]}, "repository": {"repo_id": 80497637, "url": "https://github.com/LendingClub/mercator", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 64, "size": 646, "license": "licensed"}}