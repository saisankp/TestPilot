{"test_class": {"identifier": "RelationshipTrackerConverterServiceTest", "superclass": "extends DhisSpringTest", "interfaces": "", "fields": [{"original_string": "private final static String MOTHER_TO_CHILD_RELATIONSHIP_TYPE = \"dDrh5UyCyvQ\";", "modifier": "private final static", "type": "String", "declarator": "MOTHER_TO_CHILD_RELATIONSHIP_TYPE = \"dDrh5UyCyvQ\"", "var_name": "MOTHER_TO_CHILD_RELATIONSHIP_TYPE"}, {"original_string": "private final static String CHILD_TO_MOTHER_RELATIONSHIP_TYPE = \"tBeOL0DL026\";", "modifier": "private final static", "type": "String", "declarator": "CHILD_TO_MOTHER_RELATIONSHIP_TYPE = \"tBeOL0DL026\"", "var_name": "CHILD_TO_MOTHER_RELATIONSHIP_TYPE"}, {"original_string": "private final static String MOTHER = \"Ea0rRdBPAIp\";", "modifier": "private final static", "type": "String", "declarator": "MOTHER = \"Ea0rRdBPAIp\"", "var_name": "MOTHER"}, {"original_string": "private final static String CHILD = \"G1afLIEKt8A\";", "modifier": "private final static", "type": "String", "declarator": "CHILD = \"G1afLIEKt8A\"", "var_name": "CHILD"}, {"original_string": "@Autowired\n    @Qualifier( \"relationshipTrackerConverterService\" )\n    private TrackerConverterService<Relationship, org.hisp.dhis.relationship.Relationship> relationshipConverterService;", "modifier": "@Autowired\n    @Qualifier( \"relationshipTrackerConverterService\" )\n    private", "type": "TrackerConverterService<Relationship, org.hisp.dhis.relationship.Relationship>", "declarator": "relationshipConverterService", "var_name": "relationshipConverterService"}, {"original_string": "@Autowired\n    private TrackerBundleService trackerBundleService;", "modifier": "@Autowired\n    private", "type": "TrackerBundleService", "declarator": "trackerBundleService", "var_name": "trackerBundleService"}, {"original_string": "@Autowired\n    private RenderService _renderService;", "modifier": "@Autowired\n    private", "type": "RenderService", "declarator": "_renderService", "var_name": "_renderService"}, {"original_string": "@Autowired\n    private UserService _userService;", "modifier": "@Autowired\n    private", "type": "UserService", "declarator": "_userService", "var_name": "_userService"}, {"original_string": "@Autowired\n    private RelationshipTypeService relationshipTypeService;", "modifier": "@Autowired\n    private", "type": "RelationshipTypeService", "declarator": "relationshipTypeService", "var_name": "relationshipTypeService"}, {"original_string": "@Autowired\n    private TrackedEntityTypeService trackedEntityTypeService;", "modifier": "@Autowired\n    private", "type": "TrackedEntityTypeService", "declarator": "trackedEntityTypeService", "var_name": "trackedEntityTypeService"}, {"original_string": "@Autowired\n    private TrackedEntityInstanceService trackedEntityInstanceService;", "modifier": "@Autowired\n    private", "type": "TrackedEntityInstanceService", "declarator": "trackedEntityInstanceService", "var_name": "trackedEntityInstanceService"}, {"original_string": "@Autowired\n    private OrganisationUnitService organisationUnitService;", "modifier": "@Autowired\n    private", "type": "OrganisationUnitService", "declarator": "organisationUnitService", "var_name": "organisationUnitService"}, {"original_string": "private TrackerBundle trackerBundle;", "modifier": "private", "type": "TrackerBundle", "declarator": "trackerBundle", "var_name": "trackerBundle"}], "file": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterServiceTest.java"}, "test_case": {"identifier": "testConverterFromRelationships", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConverterFromRelationships()\n    {\n        List<org.hisp.dhis.relationship.Relationship> from = relationshipConverterService\n            .from( trackerBundle.getPreheat(), trackerBundle.getRelationships() );\n\n        assertNotNull( from );\n        assertEquals( 2, from.size() );\n\n        org.hisp.dhis.relationship.Relationship relationship1 = from.get( 0 );\n        assertNotNull( relationship1 );\n        assertNotNull( relationship1.getFrom() );\n        assertNotNull( relationship1.getTo() );\n        assertEquals( MOTHER_TO_CHILD_RELATIONSHIP_TYPE, relationship1.getRelationshipType().getUid() );\n        assertEquals( MOTHER, relationship1.getFrom().getTrackedEntityInstance().getUid() );\n        assertEquals( CHILD, relationship1.getTo().getTrackedEntityInstance().getUid() );\n\n        org.hisp.dhis.relationship.Relationship relationship2 = from.get( 1 );\n        assertNotNull( relationship2 );\n        assertNotNull( relationship2.getFrom() );\n        assertNotNull( relationship2.getTo() );\n        assertEquals( CHILD_TO_MOTHER_RELATIONSHIP_TYPE, relationship2.getRelationshipType().getUid() );\n        assertEquals( CHILD, relationship2.getFrom().getTrackedEntityInstance().getUid() );\n        assertEquals( MOTHER, relationship2.getTo().getTrackedEntityInstance().getUid() );\n    }", "signature": "void testConverterFromRelationships()", "full_signature": "@Test public void testConverterFromRelationships()", "class_method_signature": "RelationshipTrackerConverterServiceTest.testConverterFromRelationships()", "testcase": true, "constructor": false, "invocations": ["from", "getPreheat", "getRelationships", "assertNotNull", "assertEquals", "size", "get", "assertNotNull", "assertNotNull", "getFrom", "assertNotNull", "getTo", "assertEquals", "getUid", "getRelationshipType", "assertEquals", "getUid", "getTrackedEntityInstance", "getFrom", "assertEquals", "getUid", "getTrackedEntityInstance", "getTo", "get", "assertNotNull", "assertNotNull", "getFrom", "assertNotNull", "getTo", "assertEquals", "getUid", "getRelationshipType", "assertEquals", "getUid", "getTrackedEntityInstance", "getFrom", "assertEquals", "getUid", "getTrackedEntityInstance", "getTo"]}, "focal_class": {"identifier": "RelationshipTrackerConverterService", "superclass": "", "interfaces": "implements TrackerConverterService<Relationship, org.hisp.dhis.relationship.Relationship>", "fields": [], "methods": [{"identifier": "to", "parameters": "( org.hisp.dhis.relationship.Relationship relationship )", "modifiers": "@Override public", "return": "Relationship", "signature": "Relationship to( org.hisp.dhis.relationship.Relationship relationship )", "full_signature": "@Override public Relationship to( org.hisp.dhis.relationship.Relationship relationship )", "class_method_signature": "RelationshipTrackerConverterService.to( org.hisp.dhis.relationship.Relationship relationship )", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "( List<org.hisp.dhis.relationship.Relationship> relationships )", "modifiers": "@Override public", "return": "List<Relationship>", "signature": "List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )", "full_signature": "@Override public List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )", "class_method_signature": "RelationshipTrackerConverterService.to( List<org.hisp.dhis.relationship.Relationship> relationships )", "testcase": false, "constructor": false}, {"identifier": "convertRelationshipType", "parameters": "( org.hisp.dhis.relationship.RelationshipItem from )", "modifiers": "private", "return": "RelationshipItem", "signature": "RelationshipItem convertRelationshipType( org.hisp.dhis.relationship.RelationshipItem from )", "full_signature": "private RelationshipItem convertRelationshipType( org.hisp.dhis.relationship.RelationshipItem from )", "class_method_signature": "RelationshipTrackerConverterService.convertRelationshipType( org.hisp.dhis.relationship.RelationshipItem from )", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "( TrackerPreheat preheat, Relationship fromRelationship )", "modifiers": "@Override public", "return": "org.hisp.dhis.relationship.Relationship", "signature": "org.hisp.dhis.relationship.Relationship from( TrackerPreheat preheat, Relationship fromRelationship )", "full_signature": "@Override public org.hisp.dhis.relationship.Relationship from( TrackerPreheat preheat, Relationship fromRelationship )", "class_method_signature": "RelationshipTrackerConverterService.from( TrackerPreheat preheat, Relationship fromRelationship )", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "( TrackerPreheat preheat,\n        List<Relationship> fromRelationships )", "modifiers": "@Override public", "return": "List<org.hisp.dhis.relationship.Relationship>", "signature": "List<org.hisp.dhis.relationship.Relationship> from( TrackerPreheat preheat,\n        List<Relationship> fromRelationships )", "full_signature": "@Override public List<org.hisp.dhis.relationship.Relationship> from( TrackerPreheat preheat,\n        List<Relationship> fromRelationships )", "class_method_signature": "RelationshipTrackerConverterService.from( TrackerPreheat preheat,\n        List<Relationship> fromRelationships )", "testcase": false, "constructor": false}, {"identifier": "fromForRuleEngine", "parameters": "( TrackerPreheat preheat,\n        Relationship relationship )", "modifiers": "@Override public", "return": "org.hisp.dhis.relationship.Relationship", "signature": "org.hisp.dhis.relationship.Relationship fromForRuleEngine( TrackerPreheat preheat,\n        Relationship relationship )", "full_signature": "@Override public org.hisp.dhis.relationship.Relationship fromForRuleEngine( TrackerPreheat preheat,\n        Relationship relationship )", "class_method_signature": "RelationshipTrackerConverterService.fromForRuleEngine( TrackerPreheat preheat,\n        Relationship relationship )", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "( TrackerPreheat preheat, Relationship fromRelationship,\n        org.hisp.dhis.relationship.Relationship toRelationship )", "modifiers": "private", "return": "org.hisp.dhis.relationship.Relationship", "signature": "org.hisp.dhis.relationship.Relationship from( TrackerPreheat preheat, Relationship fromRelationship,\n        org.hisp.dhis.relationship.Relationship toRelationship )", "full_signature": "private org.hisp.dhis.relationship.Relationship from( TrackerPreheat preheat, Relationship fromRelationship,\n        org.hisp.dhis.relationship.Relationship toRelationship )", "class_method_signature": "RelationshipTrackerConverterService.from( TrackerPreheat preheat, Relationship fromRelationship,\n        org.hisp.dhis.relationship.Relationship toRelationship )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java"}, "focal_method": {"identifier": "from", "parameters": "( TrackerPreheat preheat, Relationship fromRelationship )", "modifiers": "@Override public", "return": "org.hisp.dhis.relationship.Relationship", "body": "@Override\n    public org.hisp.dhis.relationship.Relationship from( TrackerPreheat preheat, Relationship fromRelationship )\n    {\n        org.hisp.dhis.relationship.Relationship toRelationship = preheat\n            .getRelationship( TrackerIdScheme.UID, fromRelationship.getRelationship() );\n        return from( preheat, fromRelationship, toRelationship );\n    }", "signature": "org.hisp.dhis.relationship.Relationship from( TrackerPreheat preheat, Relationship fromRelationship )", "full_signature": "@Override public org.hisp.dhis.relationship.Relationship from( TrackerPreheat preheat, Relationship fromRelationship )", "class_method_signature": "RelationshipTrackerConverterService.from( TrackerPreheat preheat, Relationship fromRelationship )", "testcase": false, "constructor": false, "invocations": ["getRelationship", "getRelationship", "from"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}