{"test_class": {"identifier": "LocalRepoKeyStoreTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/testFull/java/org/fdroid/fdroid/nearby/LocalRepoKeyStoreTest.java"}, "test_case": {"identifier": "testSignZip", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSignZip() throws IOException, LocalRepoKeyStore.InitException, IndexUpdater.SigningException {\n        Context context = ApplicationProvider.getApplicationContext();\n\n        File xmlIndexJarUnsigned = File.createTempFile(getClass().getName(), \"unsigned.jar\");\n        BufferedOutputStream bo = new BufferedOutputStream(new FileOutputStream(xmlIndexJarUnsigned));\n        JarOutputStream jo = new JarOutputStream(bo);\n        JarEntry je = new JarEntry(IndexUpdater.DATA_FILE_NAME);\n        jo.putNextEntry(je);\n        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"smallRepo.xml\");\n        IOUtils.copy(inputStream, jo);\n        jo.close();\n        bo.close();\n\n        LocalRepoKeyStore localRepoKeyStore = LocalRepoKeyStore.get(context);\n        Certificate localCert = localRepoKeyStore.getCertificate();\n        assertFalse(TextUtils.isEmpty(Utils.calcFingerprint(localCert)));\n\n        File xmlIndexJar = File.createTempFile(getClass().getName(), IndexUpdater.SIGNED_FILE_NAME);\n        localRepoKeyStore.signZip(xmlIndexJarUnsigned, xmlIndexJar);\n\n        JarFile jarFile = new JarFile(xmlIndexJar, true);\n        JarEntry indexEntry = (JarEntry) jarFile.getEntry(IndexUpdater.DATA_FILE_NAME);\n        byte[] data = IOUtils.toByteArray(jarFile.getInputStream(indexEntry));\n        assertEquals(17187, data.length);\n        assertNotNull(IndexUpdater.getSigningCertFromJar(indexEntry));\n    }", "signature": "void testSignZip()", "full_signature": "@Test public void testSignZip()", "class_method_signature": "LocalRepoKeyStoreTest.testSignZip()", "testcase": true, "constructor": false, "invocations": ["getApplicationContext", "createTempFile", "getName", "getClass", "putNextEntry", "getResourceAsStream", "getClassLoader", "getClass", "copy", "close", "close", "get", "getCertificate", "assertFalse", "isEmpty", "calcFingerprint", "createTempFile", "getName", "getClass", "signZip", "getEntry", "toByteArray", "getInputStream", "assertEquals", "assertNotNull", "getSigningCertFromJar"]}, "focal_class": {"identifier": "LocalRepoKeyStore", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"LocalRepoKeyStore\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"LocalRepoKeyStore\"", "var_name": "TAG"}, {"original_string": "private static final String INDEX_CERT_ALIAS = \"fdroid\";", "modifier": "private static final", "type": "String", "declarator": "INDEX_CERT_ALIAS = \"fdroid\"", "var_name": "INDEX_CERT_ALIAS"}, {"original_string": "private static final String HTTP_CERT_ALIAS = \"https\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_CERT_ALIAS = \"https\"", "var_name": "HTTP_CERT_ALIAS"}, {"original_string": "private static final String DEFAULT_SIG_ALG = \"SHA1withRSA\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SIG_ALG = \"SHA1withRSA\"", "var_name": "DEFAULT_SIG_ALG"}, {"original_string": "private static final String DEFAULT_KEY_ALGO = \"RSA\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_KEY_ALGO = \"RSA\"", "var_name": "DEFAULT_KEY_ALGO"}, {"original_string": "private static final int DEFAULT_KEY_BITS = 2048;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_KEY_BITS = 2048", "var_name": "DEFAULT_KEY_BITS"}, {"original_string": "private static final String DEFAULT_INDEX_CERT_INFO = \"O=Kerplapp,OU=GuardianProject\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_INDEX_CERT_INFO = \"O=Kerplapp,OU=GuardianProject\"", "var_name": "DEFAULT_INDEX_CERT_INFO"}, {"original_string": "private static LocalRepoKeyStore localRepoKeyStore;", "modifier": "private static", "type": "LocalRepoKeyStore", "declarator": "localRepoKeyStore", "var_name": "localRepoKeyStore"}, {"original_string": "private KeyStore keyStore;", "modifier": "private", "type": "KeyStore", "declarator": "keyStore", "var_name": "keyStore"}, {"original_string": "private KeyManager[] keyManagers;", "modifier": "private", "type": "KeyManager[]", "declarator": "keyManagers", "var_name": "keyManagers"}, {"original_string": "private File keyStoreFile;", "modifier": "private", "type": "File", "declarator": "keyStoreFile", "var_name": "keyStoreFile"}], "methods": [{"identifier": "get", "parameters": "(Context context)", "modifiers": "public static", "return": "LocalRepoKeyStore", "signature": "LocalRepoKeyStore get(Context context)", "full_signature": "public static LocalRepoKeyStore get(Context context)", "class_method_signature": "LocalRepoKeyStore.get(Context context)", "testcase": false, "constructor": false}, {"identifier": "LocalRepoKeyStore", "parameters": "(Context context)", "modifiers": "private", "return": "", "signature": " LocalRepoKeyStore(Context context)", "full_signature": "private  LocalRepoKeyStore(Context context)", "class_method_signature": "LocalRepoKeyStore.LocalRepoKeyStore(Context context)", "testcase": false, "constructor": true}, {"identifier": "setupHTTPSCertificate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setupHTTPSCertificate()", "full_signature": "public void setupHTTPSCertificate()", "class_method_signature": "LocalRepoKeyStore.setupHTTPSCertificate()", "testcase": false, "constructor": false}, {"identifier": "getKeyStoreFile", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getKeyStoreFile()", "full_signature": "public File getKeyStoreFile()", "class_method_signature": "LocalRepoKeyStore.getKeyStoreFile()", "testcase": false, "constructor": false}, {"identifier": "getKeyStore", "parameters": "()", "modifiers": "public", "return": "KeyStore", "signature": "KeyStore getKeyStore()", "full_signature": "public KeyStore getKeyStore()", "class_method_signature": "LocalRepoKeyStore.getKeyStore()", "testcase": false, "constructor": false}, {"identifier": "getKeyManagers", "parameters": "()", "modifiers": "public", "return": "KeyManager[]", "signature": "KeyManager[] getKeyManagers()", "full_signature": "public KeyManager[] getKeyManagers()", "class_method_signature": "LocalRepoKeyStore.getKeyManagers()", "testcase": false, "constructor": false}, {"identifier": "signZip", "parameters": "(File input, File output)", "modifiers": "public", "return": "void", "signature": "void signZip(File input, File output)", "full_signature": "public void signZip(File input, File output)", "class_method_signature": "LocalRepoKeyStore.signZip(File input, File output)", "testcase": false, "constructor": false}, {"identifier": "getKerplappKeypair", "parameters": "()", "modifiers": "private", "return": "KeyPair", "signature": "KeyPair getKerplappKeypair()", "full_signature": "private KeyPair getKerplappKeypair()", "class_method_signature": "LocalRepoKeyStore.getKerplappKeypair()", "testcase": false, "constructor": false}, {"identifier": "getCertificate", "parameters": "()", "modifiers": "public", "return": "Certificate", "signature": "Certificate getCertificate()", "full_signature": "public Certificate getCertificate()", "class_method_signature": "LocalRepoKeyStore.getCertificate()", "testcase": false, "constructor": false}, {"identifier": "addToStore", "parameters": "(String alias, KeyPair kp, Certificate cert)", "modifiers": "private", "return": "void", "signature": "void addToStore(String alias, KeyPair kp, Certificate cert)", "full_signature": "private void addToStore(String alias, KeyPair kp, Certificate cert)", "class_method_signature": "LocalRepoKeyStore.addToStore(String alias, KeyPair kp, Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "generateRandomKeypair", "parameters": "()", "modifiers": "private", "return": "KeyPair", "signature": "KeyPair generateRandomKeypair()", "full_signature": "private KeyPair generateRandomKeypair()", "class_method_signature": "LocalRepoKeyStore.generateRandomKeypair()", "testcase": false, "constructor": false}, {"identifier": "generateSelfSignedCertChain", "parameters": "(KeyPair kp, X500Name subject)", "modifiers": "private", "return": "Certificate", "signature": "Certificate generateSelfSignedCertChain(KeyPair kp, X500Name subject)", "full_signature": "private Certificate generateSelfSignedCertChain(KeyPair kp, X500Name subject)", "class_method_signature": "LocalRepoKeyStore.generateSelfSignedCertChain(KeyPair kp, X500Name subject)", "testcase": false, "constructor": false}, {"identifier": "generateSelfSignedCertChain", "parameters": "(KeyPair kp, X500Name subject, String hostname)", "modifiers": "private", "return": "Certificate", "signature": "Certificate generateSelfSignedCertChain(KeyPair kp, X500Name subject, String hostname)", "full_signature": "private Certificate generateSelfSignedCertChain(KeyPair kp, X500Name subject, String hostname)", "class_method_signature": "LocalRepoKeyStore.generateSelfSignedCertChain(KeyPair kp, X500Name subject, String hostname)", "testcase": false, "constructor": false}], "file": "app/src/full/java/org/fdroid/fdroid/nearby/LocalRepoKeyStore.java"}, "focal_method": {"identifier": "signZip", "parameters": "(File input, File output)", "modifiers": "public", "return": "void", "body": "public void signZip(File input, File output) {\n        try {\n            ZipSigner zipSigner = new ZipSigner();\n\n            X509Certificate cert = (X509Certificate) keyStore.getCertificate(INDEX_CERT_ALIAS);\n\n            KeyPair kp = getKerplappKeypair();\n            PrivateKey priv = kp.getPrivate();\n\n            zipSigner.setKeys(\"kerplapp\", cert, priv, DEFAULT_SIG_ALG, null);\n            zipSigner.signZip(input.getAbsolutePath(), output.getAbsolutePath());\n\n        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | GeneralSecurityException | IOException e) {\n            Log.e(TAG, \"Unable to sign local repo index\", e);\n        }\n    }", "signature": "void signZip(File input, File output)", "full_signature": "public void signZip(File input, File output)", "class_method_signature": "LocalRepoKeyStore.signZip(File input, File output)", "testcase": false, "constructor": false, "invocations": ["getCertificate", "getKerplappKeypair", "getPrivate", "setKeys", "signZip", "getAbsolutePath", "getAbsolutePath", "e"]}, "repository": {"repo_id": 22165604, "url": "https://github.com/f-droid/fdroidclient", "stars": 331, "created": "7/23/2014 5:46:02 PM +00:00", "updates": "2020-01-25T14:27:31+00:00", "fork": "False", "license": "licensed"}}