{"test_class": {"identifier": "XmlRpcProtocolTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-rpc/dubbo-rpc-xml/src/test/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProtocolTest.java"}, "test_case": {"identifier": "testXmlRpcProtocol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testXmlRpcProtocol() {\n        XmlRpcServiceImpl server = new XmlRpcServiceImpl();\n        Assertions.assertFalse(server.isCalled());\n        ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();\n        Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();\n        int port = NetUtils.getAvailablePort();\n        URL url = URL.valueOf(\"xmlrpc://127.0.0.1:\" + port + \"/\" + XmlRpcService.class.getName() + \"?version=1.0.0\");\n        Exporter<XmlRpcService> exporter = protocol.export(proxyFactory.getInvoker(server, XmlRpcService.class, url));\n        Invoker<XmlRpcService> invoker = protocol.refer(XmlRpcService.class, url);\n        XmlRpcService client = proxyFactory.getProxy(invoker);\n        String result = client.sayHello(\"haha\");\n        Assertions.assertTrue(server.isCalled());\n        Assertions.assertEquals(\"Hello, haha\", result);\n        invoker.destroy();\n        exporter.unexport();\n    }", "signature": "void testXmlRpcProtocol()", "full_signature": "@Test public void testXmlRpcProtocol()", "class_method_signature": "XmlRpcProtocolTest.testXmlRpcProtocol()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isCalled", "getAdaptiveExtension", "getExtensionLoader", "getAdaptiveExtension", "getExtensionLoader", "getAvailablePort", "valueOf", "getName", "export", "getInvoker", "refer", "getProxy", "sayHello", "assertTrue", "isCalled", "assertEquals", "destroy", "unexport"]}, "focal_class": {"identifier": "XmlRpcProtocol", "superclass": "extends AbstractProxyProtocol", "interfaces": "", "fields": [{"original_string": "public static final String ACCESS_CONTROL_ALLOW_ORIGIN_HEADER = \"Access-Control-Allow-Origin\";", "modifier": "public static final", "type": "String", "declarator": "ACCESS_CONTROL_ALLOW_ORIGIN_HEADER = \"Access-Control-Allow-Origin\"", "var_name": "ACCESS_CONTROL_ALLOW_ORIGIN_HEADER"}, {"original_string": "public static final String ACCESS_CONTROL_ALLOW_METHODS_HEADER = \"Access-Control-Allow-Methods\";", "modifier": "public static final", "type": "String", "declarator": "ACCESS_CONTROL_ALLOW_METHODS_HEADER = \"Access-Control-Allow-Methods\"", "var_name": "ACCESS_CONTROL_ALLOW_METHODS_HEADER"}, {"original_string": "public static final String ACCESS_CONTROL_ALLOW_HEADERS_HEADER = \"Access-Control-Allow-Headers\";", "modifier": "public static final", "type": "String", "declarator": "ACCESS_CONTROL_ALLOW_HEADERS_HEADER = \"Access-Control-Allow-Headers\"", "var_name": "ACCESS_CONTROL_ALLOW_HEADERS_HEADER"}, {"original_string": "private final Map<String, XmlRpcServletServer> skeletonMap = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, XmlRpcServletServer>", "declarator": "skeletonMap = new ConcurrentHashMap<>()", "var_name": "skeletonMap"}, {"original_string": "private HttpBinder httpBinder;", "modifier": "private", "type": "HttpBinder", "declarator": "httpBinder", "var_name": "httpBinder"}], "methods": [{"identifier": "XmlRpcProtocol", "parameters": "()", "modifiers": "public", "return": "", "signature": " XmlRpcProtocol()", "full_signature": "public  XmlRpcProtocol()", "class_method_signature": "XmlRpcProtocol.XmlRpcProtocol()", "testcase": false, "constructor": true}, {"identifier": "setHttpBinder", "parameters": "(HttpBinder httpBinder)", "modifiers": "public", "return": "void", "signature": "void setHttpBinder(HttpBinder httpBinder)", "full_signature": "public void setHttpBinder(HttpBinder httpBinder)", "class_method_signature": "XmlRpcProtocol.setHttpBinder(HttpBinder httpBinder)", "testcase": false, "constructor": false}, {"identifier": "getDefaultPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultPort()", "full_signature": "@Override public int getDefaultPort()", "class_method_signature": "XmlRpcProtocol.getDefaultPort()", "testcase": false, "constructor": false}, {"identifier": "doExport", "parameters": "(T impl, Class<T> type, URL url)", "modifiers": "@Override protected", "return": "Runnable", "signature": "Runnable doExport(T impl, Class<T> type, URL url)", "full_signature": "@Override protected Runnable doExport(T impl, Class<T> type, URL url)", "class_method_signature": "XmlRpcProtocol.doExport(T impl, Class<T> type, URL url)", "testcase": false, "constructor": false}, {"identifier": "doRefer", "parameters": "(final Class<T> serviceType, URL url)", "modifiers": "@Override protected", "return": "T", "signature": "T doRefer(final Class<T> serviceType, URL url)", "full_signature": "@Override protected T doRefer(final Class<T> serviceType, URL url)", "class_method_signature": "XmlRpcProtocol.doRefer(final Class<T> serviceType, URL url)", "testcase": false, "constructor": false}, {"identifier": "getErrorCode", "parameters": "(Throwable e)", "modifiers": "@Override protected", "return": "int", "signature": "int getErrorCode(Throwable e)", "full_signature": "@Override protected int getErrorCode(Throwable e)", "class_method_signature": "XmlRpcProtocol.getErrorCode(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "XmlRpcProtocol.destroy()", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProtocol.java"}, "focal_method": {"identifier": "XmlRpcProtocol", "parameters": "()", "modifiers": "public", "return": "", "body": "public XmlRpcProtocol() {\n        super(XmlRpcException.class);\n    }", "signature": " XmlRpcProtocol()", "full_signature": "public  XmlRpcProtocol()", "class_method_signature": "XmlRpcProtocol.XmlRpcProtocol()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}