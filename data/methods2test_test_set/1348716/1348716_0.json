{"test_class": {"identifier": "UploadQuestionGroupControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UploadQuestionGroupController controller;", "modifier": "private", "type": "UploadQuestionGroupController", "declarator": "controller", "var_name": "controller"}, {"original_string": "@Mock\n    private QuestionnaireServiceFacade questionnaireServiceFacade;", "modifier": "@Mock\n    private", "type": "QuestionnaireServiceFacade", "declarator": "questionnaireServiceFacade", "var_name": "questionnaireServiceFacade"}, {"original_string": "@Mock\n    private RequestContext requestContext;", "modifier": "@Mock\n    private", "type": "RequestContext", "declarator": "requestContext", "var_name": "requestContext"}, {"original_string": "@Mock\n    private MessageContext messageContext;", "modifier": "@Mock\n    private", "type": "MessageContext", "declarator": "messageContext", "var_name": "messageContext"}], "file": "questionnaire/src/test/java/org/mifos/platform/questionnaire/ui/controller/UploadQuestionGroupControllerTest.java"}, "test_case": {"identifier": "testGetAllCountriesForPPI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAllCountriesForPPI() {\n        List<String> countries = asList(\"India\", \"China\", \"Canada\");\n        when(questionnaireServiceFacade.getAllCountriesForPPI()).thenReturn(countries);\n        assertThat(controller.getAllCountriesForPPI(), is(countries));\n    }", "signature": "void testGetAllCountriesForPPI()", "full_signature": "@Test public void testGetAllCountriesForPPI()", "class_method_signature": "UploadQuestionGroupControllerTest.testGetAllCountriesForPPI()", "testcase": true, "constructor": false, "invocations": ["asList", "thenReturn", "when", "getAllCountriesForPPI", "assertThat", "getAllCountriesForPPI", "is"]}, "focal_class": {"identifier": "UploadQuestionGroupController", "superclass": "extends QuestionnaireController", "interfaces": "", "fields": [], "methods": [{"identifier": "UploadQuestionGroupController", "parameters": "()", "modifiers": "public", "return": "", "signature": " UploadQuestionGroupController()", "full_signature": "public  UploadQuestionGroupController()", "class_method_signature": "UploadQuestionGroupController.UploadQuestionGroupController()", "testcase": false, "constructor": true}, {"identifier": "UploadQuestionGroupController", "parameters": "(QuestionnaireServiceFacade questionnaireServiceFacade)", "modifiers": "public", "return": "", "signature": " UploadQuestionGroupController(QuestionnaireServiceFacade questionnaireServiceFacade)", "full_signature": "public  UploadQuestionGroupController(QuestionnaireServiceFacade questionnaireServiceFacade)", "class_method_signature": "UploadQuestionGroupController.UploadQuestionGroupController(QuestionnaireServiceFacade questionnaireServiceFacade)", "testcase": false, "constructor": true}, {"identifier": "getAllCountriesForPPI", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllCountriesForPPI()", "full_signature": "public List<String> getAllCountriesForPPI()", "class_method_signature": "UploadQuestionGroupController.getAllCountriesForPPI()", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext)", "modifiers": "public", "return": "String", "signature": "String upload(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext)", "full_signature": "public String upload(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext)", "class_method_signature": "UploadQuestionGroupController.upload(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext)", "testcase": false, "constructor": false}, {"identifier": "handleValidationException", "parameters": "(ValidationException validationException, RequestContext requestContext)", "modifiers": "private", "return": "void", "signature": "void handleValidationException(ValidationException validationException, RequestContext requestContext)", "full_signature": "private void handleValidationException(ValidationException validationException, RequestContext requestContext)", "class_method_signature": "UploadQuestionGroupController.handleValidationException(ValidationException validationException, RequestContext requestContext)", "testcase": false, "constructor": false}, {"identifier": "selectedCountryNotPresent", "parameters": "(String selectedCountry)", "modifiers": "private", "return": "boolean", "signature": "boolean selectedCountryNotPresent(String selectedCountry)", "full_signature": "private boolean selectedCountryNotPresent(String selectedCountry)", "class_method_signature": "UploadQuestionGroupController.selectedCountryNotPresent(String selectedCountry)", "testcase": false, "constructor": false}], "file": "questionnaire/src/main/java/org/mifos/platform/questionnaire/ui/controller/UploadQuestionGroupController.java"}, "focal_method": {"identifier": "getAllCountriesForPPI", "parameters": "()", "modifiers": "public", "return": "List<String>", "body": "public List<String> getAllCountriesForPPI() {\n        return questionnaireServiceFacade.getAllCountriesForPPI();\n    }", "signature": "List<String> getAllCountriesForPPI()", "full_signature": "public List<String> getAllCountriesForPPI()", "class_method_signature": "UploadQuestionGroupController.getAllCountriesForPPI()", "testcase": false, "constructor": false, "invocations": ["getAllCountriesForPPI"]}, "repository": {"repo_id": 1348716, "url": "https://github.com/mifos/head", "language": "Java", "is_fork": false, "fork_count": 91, "stargazer_count": 55, "size": 532732, "license": "licensed"}}