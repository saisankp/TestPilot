{"test_class": {"identifier": "SpotVgtProductReaderPlugInTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-spot-vgt-reader/src/test/java/org/esa/s3tbx/dataio/spot/SpotVgtProductReaderPlugInTest.java"}, "test_case": {"identifier": "testDecodeQualification", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecodeQualification() {\n        SpotVgtProductReaderPlugIn plugIn = new SpotVgtProductReaderPlugIn();\n\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(null));\n\n        File dir = TestDataDir.get();\n        File file;\n\n        file = new File(dir, \"decode_qual_intended.zip\");\n        assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(file.getPath()));\n\n        file = new File(dir, \"decode_qual_intended\");\n        assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(file.getPath()));\n\n        file = new File(dir, \"decode_qual_intended/PHYS_VOL.TXT\");\n        assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(file.getPath()));\n\n        file = new File(dir, \"decode_qual_unable_1\");\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file.getPath()));\n\n        file = new File(dir, \"decode_qual_unable_1/PHYS_VOL.TXT\");\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file.getPath()));\n\n        file = new File(dir, \"decode_qual_unable_2\");\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file.getPath()));\n\n        file = new File(dir, \"decode_qual_unable_2/PHYS_VOL.TXT\");\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file.getPath()));\n\n        file = new File(dir, \"decode_qual_unable_3\");\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file.getPath()));\n\n        file = new File(dir, \"decode_qual_unable_3/TEST.TXT\");\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file.getPath()));\n\n        file = new File(dir, \"decode_qual_unable_3/NON_EXISTENT\");\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file.getPath()));\n\n        // new for VGT 1P Collection3 products:\n        file = new File(dir, \"decode_qual_intended_collection3/zip/V220050513179.zip\");\n        assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(file.getPath()));\n\n        file = new File(dir, \"decode_qual_intended_collection3/V220050513179\");\n        assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.INTENDED, plugIn.getDecodeQualification(file.getPath()));\n\n        file = new File(dir, \"decode_qual_unable_1_missing_bands_collection3/V220050513179\");\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file.getPath()));\n\n        file = new File(dir, \"decode_qual_unable_2_missing_logdescr_collection3/V220050513179\");\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file));\n        assertEquals(DecodeQualification.UNABLE, plugIn.getDecodeQualification(file.getPath()));\n    }", "signature": "void testDecodeQualification()", "full_signature": "@Test public void testDecodeQualification()", "class_method_signature": "SpotVgtProductReaderPlugInTest.testDecodeQualification()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getDecodeQualification", "get", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath", "assertEquals", "getDecodeQualification", "assertEquals", "getDecodeQualification", "getPath"]}, "focal_class": {"identifier": "SpotVgtProductReaderPlugIn", "superclass": "", "interfaces": "implements ProductReaderPlugIn", "fields": [{"original_string": "private boolean isVgtPCollection3Product = false;", "modifier": "private", "type": "boolean", "declarator": "isVgtPCollection3Product = false", "var_name": "isVgtPCollection3Product"}], "methods": [{"identifier": "SpotVgtProductReaderPlugIn", "parameters": "()", "modifiers": "public", "return": "", "signature": " SpotVgtProductReaderPlugIn()", "full_signature": "public  SpotVgtProductReaderPlugIn()", "class_method_signature": "SpotVgtProductReaderPlugIn.SpotVgtProductReaderPlugIn()", "testcase": false, "constructor": true}, {"identifier": "getDecodeQualification", "parameters": "(Object input)", "modifiers": "@Override public", "return": "DecodeQualification", "signature": "DecodeQualification getDecodeQualification(Object input)", "full_signature": "@Override public DecodeQualification getDecodeQualification(Object input)", "class_method_signature": "SpotVgtProductReaderPlugIn.getDecodeQualification(Object input)", "testcase": false, "constructor": false}, {"identifier": "getInputTypes", "parameters": "()", "modifiers": "@Override public", "return": "Class[]", "signature": "Class[] getInputTypes()", "full_signature": "@Override public Class[] getInputTypes()", "class_method_signature": "SpotVgtProductReaderPlugIn.getInputTypes()", "testcase": false, "constructor": false}, {"identifier": "createReaderInstance", "parameters": "()", "modifiers": "@Override public", "return": "ProductReader", "signature": "ProductReader createReaderInstance()", "full_signature": "@Override public ProductReader createReaderInstance()", "class_method_signature": "SpotVgtProductReaderPlugIn.createReaderInstance()", "testcase": false, "constructor": false}, {"identifier": "getProductFileFilter", "parameters": "()", "modifiers": "@Override public", "return": "SnapFileFilter", "signature": "SnapFileFilter getProductFileFilter()", "full_signature": "@Override public SnapFileFilter getProductFileFilter()", "class_method_signature": "SpotVgtProductReaderPlugIn.getProductFileFilter()", "testcase": false, "constructor": false}, {"identifier": "getDefaultFileExtensions", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDefaultFileExtensions()", "full_signature": "@Override public String[] getDefaultFileExtensions()", "class_method_signature": "SpotVgtProductReaderPlugIn.getDefaultFileExtensions()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "(Locale locale)", "modifiers": "@Override public", "return": "String", "signature": "String getDescription(Locale locale)", "full_signature": "@Override public String getDescription(Locale locale)", "class_method_signature": "SpotVgtProductReaderPlugIn.getDescription(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getFormatNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getFormatNames()", "full_signature": "@Override public String[] getFormatNames()", "class_method_signature": "SpotVgtProductReaderPlugIn.getFormatNames()", "testcase": false, "constructor": false}, {"identifier": "getBandName", "parameters": "(String name)", "modifiers": "static", "return": "String", "signature": "String getBandName(String name)", "full_signature": "static String getBandName(String name)", "class_method_signature": "SpotVgtProductReaderPlugIn.getBandName(String name)", "testcase": false, "constructor": false}, {"identifier": "readPhysVolDescriptor", "parameters": "(File inputFile)", "modifiers": "static", "return": "PropertySet", "signature": "PropertySet readPhysVolDescriptor(File inputFile)", "full_signature": "static PropertySet readPhysVolDescriptor(File inputFile)", "class_method_signature": "SpotVgtProductReaderPlugIn.readPhysVolDescriptor(File inputFile)", "testcase": false, "constructor": false}, {"identifier": "readKeyValuePairs", "parameters": "(Reader reader)", "modifiers": "static", "return": "PropertySet", "signature": "PropertySet readKeyValuePairs(Reader reader)", "full_signature": "static PropertySet readKeyValuePairs(Reader reader)", "class_method_signature": "SpotVgtProductReaderPlugIn.readKeyValuePairs(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "getFileInput", "parameters": "(Object input)", "modifiers": "static", "return": "File", "signature": "File getFileInput(Object input)", "full_signature": "static File getFileInput(Object input)", "class_method_signature": "SpotVgtProductReaderPlugIn.getFileInput(Object input)", "testcase": false, "constructor": false}, {"identifier": "getFileInput", "parameters": "(File file)", "modifiers": "static", "return": "File", "signature": "File getFileInput(File file)", "full_signature": "static File getFileInput(File file)", "class_method_signature": "SpotVgtProductReaderPlugIn.getFileInput(File file)", "testcase": false, "constructor": false}, {"identifier": "readKeyValuePairs", "parameters": "(File inputFile)", "modifiers": "private static", "return": "PropertySet", "signature": "PropertySet readKeyValuePairs(File inputFile)", "full_signature": "private static PropertySet readKeyValuePairs(File inputFile)", "class_method_signature": "SpotVgtProductReaderPlugIn.readKeyValuePairs(File inputFile)", "testcase": false, "constructor": false}], "file": "s3tbx-spot-vgt-reader/src/main/java/org/esa/s3tbx/dataio/spot/SpotVgtProductReaderPlugIn.java"}, "focal_method": {"identifier": "getDecodeQualification", "parameters": "(Object input)", "modifiers": "@Override public", "return": "DecodeQualification", "body": "@Override\n    public DecodeQualification getDecodeQualification(Object input) {\n        File file = getFileInput(input);\n        if (file == null) {\n            return DecodeQualification.UNABLE;\n        }\n\n        VirtualDir virtualDir = VirtualDir.create(file);\n        if (virtualDir == null) {\n            return DecodeQualification.UNABLE;\n        }\n\n        try {\n            try {\n                Reader reader = virtualDir.getReader(SpotVgtConstants.PHYS_VOL_FILENAME);\n                if (reader == null) {\n                    return DecodeQualification.UNABLE;\n                }\n                try {\n                    PhysVolDescriptor descriptor = new PhysVolDescriptor(reader);\n                    String[] strings = virtualDir.list(descriptor.getLogVolDirName());\n                    if (strings.length == 0) {\n                        return DecodeQualification.UNABLE;\n                    }\n                } finally {\n                    reader.close();\n                }\n                return DecodeQualification.INTENDED;\n            } catch (IOException e) {\n                // check for new structure of VGT P Collection3 products:\n                // can be a directory or a zip file, e.g. V220140304096 or V220140304096.zip:\n                // contains files <dirname>_*.hdf, <dirname>_LOG.txt, <dirname>_RIG.txt\n                // --> check if <dirname>_LOG.txt and all <dirname>_*.hdf exist:\n                final String productName = FilenameUtils.getBaseName(file.getName());\n                try {\n                    // is directory?\n                    virtualDir.getReader(productName + \"_LOG.TXT\");\n                } catch (IOException e1) {\n                    try {\n                        // is zip file?\n                        virtualDir.getReader(productName + \"/\" + productName + \"_LOG.TXT\");\n                    } catch (IOException e2) {\n                        return DecodeQualification.UNABLE;\n                    }\n                }\n\n                String[] filesInProduct;\n                if (file.list() != null) {\n                    // dir\n                    filesInProduct = file.list();\n                } else {\n                    // zip\n                    try {\n                        filesInProduct = virtualDir.list(productName);\n                    } catch (IOException e1) {\n                        return DecodeQualification.UNABLE;\n                    }\n                }\n\n                if (filesInProduct != null) {\n                    for (int i = 0; i < SpotVgtConstants.BANDS_IN_VGT_P_COLLECTION3_PRODUCT.length; i++) {\n                        boolean vgtPCollection3ProductFile = false;\n                        for (int j = 0; j < filesInProduct.length; j++) {\n                            if (filesInProduct[j].toUpperCase().\n                                    equals(productName + \"_\" + SpotVgtConstants.BANDS_IN_VGT_P_COLLECTION3_PRODUCT[i] + \".HDF\")) {\n                                vgtPCollection3ProductFile = true;\n                                break;\n                            }\n                        }\n                        if (!vgtPCollection3ProductFile) {\n                            return DecodeQualification.UNABLE;\n                        }\n                    }\n                    isVgtPCollection3Product = true;\n                    return DecodeQualification.INTENDED;\n                } else {\n                    return DecodeQualification.UNABLE;\n                }\n            }\n        } finally {\n            virtualDir.close();\n        }\n    }", "signature": "DecodeQualification getDecodeQualification(Object input)", "full_signature": "@Override public DecodeQualification getDecodeQualification(Object input)", "class_method_signature": "SpotVgtProductReaderPlugIn.getDecodeQualification(Object input)", "testcase": false, "constructor": false, "invocations": ["getFileInput", "create", "getReader", "list", "getLogVolDirName", "close", "getBaseName", "getName", "getReader", "getReader", "list", "list", "list", "equals", "toUpperCase", "close"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}