{"test_class": {"identifier": "OperatorsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PostgresQueryWriterResolver resolver;", "modifier": "private", "type": "PostgresQueryWriterResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "CoreFeatures/Database-postgresql/PostgresSchema/src/test/java/info/smart_tools/smartactors/database_postgresql/postgres_schema/search/OperatorsTest.java"}, "test_case": {"identifier": "writeFieldCheckConditionTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writeFieldCheckConditionTest() throws Exception {\n        final int OPERATORS_NUMBER = 10;\n        final String queryParam = \"testQueryParam\";\n\n        List<String> operatorsNames = new ArrayList<>(OPERATORS_NUMBER);\n        List<FieldPath> fieldsPaths = new ArrayList<>(OPERATORS_NUMBER);\n        List<String> result = new ArrayList<>(OPERATORS_NUMBER);\n\n        operatorsNames.addAll(\n                Arrays.asList(\n                        \"$eq\", \"$ne\", \"$lt\",\n                        \"$gt\", \"$lte\", \"$gte\",\n                        \"$date-from\", \"$date-to\",\n                        \"$hasTag\", \"$fulltext\"));\n\n        for (String name : operatorsNames)\n                fieldsPaths.add(PostgresFieldPath.fromString(name.replace(\"$\", \"\")));\n\n        result.addAll(\n                Arrays.asList(\n                        \"((document#>'{eq}')=to_json(?)::jsonb)\", \"((document#>'{ne}')!=to_json(?)::jsonb)\",\n                        \"((document#>'{lt}')<to_json(?)::jsonb)\", \"((document#>'{gt}')>to_json(?)::jsonb)\",\n                        \"((document#>'{lte}')<=to_json(?)::jsonb)\", \"((document#>'{gte}')>=to_json(?)::jsonb)\",\n                        \"(parse_timestamp_immutable(document#>'{date-from}')>=(?)::timestamp)\",\n                        \"(parse_timestamp_immutable(document#>'{date-to}')<=(?)::timestamp)\",\n                        \"((document#>'{hasTag}')??(?))\",\n                        \"fulltext@@(to_tsquery('russian',?))\"));\n\n        for (int i = 0; i < OPERATORS_NUMBER; ++i) {\n            StringWriter body = new StringWriter();\n            QueryStatement queryStatement = mock(QueryStatement.class);\n            when(queryStatement.getBodyWriter()).thenReturn(body);\n            resolver\n                    .resolve(operatorsNames.get(i))\n                    .write(queryStatement, resolver, fieldsPaths.get(i), queryParam);\n            assertEquals(result.get(i), body.toString().trim());\n            verify(queryStatement).pushParameterSetter(any());\n        }\n    }", "signature": "void writeFieldCheckConditionTest()", "full_signature": "@Test public void writeFieldCheckConditionTest()", "class_method_signature": "OperatorsTest.writeFieldCheckConditionTest()", "testcase": true, "constructor": false, "invocations": ["addAll", "asList", "add", "fromString", "replace", "addAll", "asList", "mock", "thenReturn", "when", "getBodyWriter", "write", "resolve", "get", "get", "assertEquals", "get", "trim", "toString", "pushParameterSetter", "verify", "any"]}, "focal_class": {"identifier": "Operators", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Operators", "parameters": "()", "modifiers": "private", "return": "", "signature": " Operators()", "full_signature": "private  Operators()", "class_method_signature": "Operators.Operators()", "testcase": false, "constructor": true}, {"identifier": "addAll", "parameters": "(final PostgresQueryWriterResolver resolver)", "modifiers": "public static", "return": "void", "signature": "void addAll(final PostgresQueryWriterResolver resolver)", "full_signature": "public static void addAll(final PostgresQueryWriterResolver resolver)", "class_method_signature": "Operators.addAll(final PostgresQueryWriterResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "formattedCheckWriter", "parameters": "(final String format)", "modifiers": "private static", "return": "QueryWriter", "signature": "QueryWriter formattedCheckWriter(final String format)", "full_signature": "private static QueryWriter formattedCheckWriter(final String format)", "class_method_signature": "Operators.formattedCheckWriter(final String format)", "testcase": false, "constructor": false}, {"identifier": "writeFieldCheckCondition", "parameters": "(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "modifiers": "private static", "return": "void", "signature": "void writeFieldCheckCondition(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "full_signature": "private static void writeFieldCheckCondition(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "class_method_signature": "Operators.writeFieldCheckCondition(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "testcase": false, "constructor": false}, {"identifier": "writeFieldExistsCheckCondition", "parameters": "(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "modifiers": "private static", "return": "void", "signature": "void writeFieldExistsCheckCondition(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "full_signature": "private static void writeFieldExistsCheckCondition(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "class_method_signature": "Operators.writeFieldExistsCheckCondition(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "testcase": false, "constructor": false}, {"identifier": "writeFieldInArrayCheckCondition", "parameters": "(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "modifiers": "private static", "return": "void", "signature": "void writeFieldInArrayCheckCondition(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "full_signature": "private static void writeFieldInArrayCheckCondition(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "class_method_signature": "Operators.writeFieldInArrayCheckCondition(\n            final QueryStatement query,\n            final QueryWriterResolver resolver,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database-postgresql/PostgresSchema/src/main/java/info/smart_tools/smartactors/database_postgresql/postgres_schema/search/Operators.java"}, "focal_method": {"identifier": "writeFieldCheckCondition", "parameters": "(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "modifiers": "private static", "return": "void", "body": "private static void writeFieldCheckCondition(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    ) throws QueryBuildException {\n\n        if (contextFieldPath == null) {\n            throw new QueryBuildException(\"Field check conditions not allowed outside of field context\");\n        }\n\n        try {\n            query.getBodyWriter().write(String.format(format, contextFieldPath.toSQL()));\n\n            query.pushParameterSetter((statement, index) -> {\n                statement.setObject(index++, queryParameter);\n                return index;\n            });\n        } catch (IOException e) {\n            throw new QueryBuildException(\"Query search conditions write failed because of exception\", e);\n        }\n    }", "signature": "void writeFieldCheckCondition(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "full_signature": "private static void writeFieldCheckCondition(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "class_method_signature": "Operators.writeFieldCheckCondition(\n            final String format,\n            final QueryStatement query,\n            final FieldPath contextFieldPath,\n            final Object queryParameter\n    )", "testcase": false, "constructor": false, "invocations": ["write", "getBodyWriter", "format", "toSQL", "pushParameterSetter", "setObject"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}