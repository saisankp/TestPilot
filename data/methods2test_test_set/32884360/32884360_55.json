{"test_class": {"identifier": "DagCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final EdgeFactory<String, StringPair> factory = new EdgeFactory<String, StringPair>() {\n        @Override\n        public StringPair createEdge(String s, String s1) {\n            return new StringPair(s, s1);\n        }\n    };", "modifier": "private static final", "type": "EdgeFactory<String, StringPair>", "declarator": "factory = new EdgeFactory<String, StringPair>() {\n        @Override\n        public StringPair createEdge(String s, String s1) {\n            return new StringPair(s, s1);\n        }\n    }", "var_name": "factory"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/util/DagCheckerTest.java"}, "test_case": {"identifier": "line", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void line() {\n        new GraphFactory().connect(\"a\", \"b\").connect(\"b\", \"c\").isDag();\n    }", "signature": "void line()", "full_signature": "@Test public void line()", "class_method_signature": "DagCheckerTest.line()", "testcase": true, "constructor": false, "invocations": ["isDag", "connect", "connect"]}, "focal_class": {"identifier": "DagChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Deque<T> badNodes = null;", "modifier": "private", "type": "Deque<T>", "declarator": "badNodes = null", "var_name": "badNodes"}], "methods": [{"identifier": "initialNodes", "parameters": "()", "modifiers": "protected abstract", "return": "Set<? extends T>", "signature": "Set<? extends T> initialNodes()", "full_signature": "protected abstract Set<? extends T> initialNodes()", "class_method_signature": "DagChecker.initialNodes()", "testcase": false, "constructor": false}, {"identifier": "nodesFrom", "parameters": "(T starting)", "modifiers": "protected abstract", "return": "Set<? extends T>", "signature": "Set<? extends T> nodesFrom(T starting)", "full_signature": "protected abstract Set<? extends T> nodesFrom(T starting)", "class_method_signature": "DagChecker.nodesFrom(T starting)", "testcase": false, "constructor": false}, {"identifier": "isDag", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDag()", "full_signature": "public boolean isDag()", "class_method_signature": "DagChecker.isDag()", "testcase": false, "constructor": false}, {"identifier": "tryAdd", "parameters": "(Set<? extends T> roots, Graph<T, Pair> graph, Set<T> knownNodes,\n                           CycleDetector<T, Pair> cycleDetector, Deque<T> nodePath)", "modifiers": "private", "return": "boolean", "signature": "boolean tryAdd(Set<? extends T> roots, Graph<T, Pair> graph, Set<T> knownNodes,\n                           CycleDetector<T, Pair> cycleDetector, Deque<T> nodePath)", "full_signature": "private boolean tryAdd(Set<? extends T> roots, Graph<T, Pair> graph, Set<T> knownNodes,\n                           CycleDetector<T, Pair> cycleDetector, Deque<T> nodePath)", "class_method_signature": "DagChecker.tryAdd(Set<? extends T> roots, Graph<T, Pair> graph, Set<T> knownNodes,\n                           CycleDetector<T, Pair> cycleDetector, Deque<T> nodePath)", "testcase": false, "constructor": false}, {"identifier": "getBadNodePath", "parameters": "()", "modifiers": "public", "return": "List<T>", "signature": "List<T> getBadNodePath()", "full_signature": "public List<T> getBadNodePath()", "class_method_signature": "DagChecker.getBadNodePath()", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/util/DagChecker.java"}, "focal_method": {"identifier": "isDag", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isDag() {\n        DirectedGraph<T, Pair> graph = new DefaultDirectedGraph<>(Pair.class);\n\n        Set<? extends T> initialNodes = initialNodes();\n        Set<T> knownNodes = new HashSet<>(initialNodes.size() * 10); // just a guess\n        Deque<T> nodePath = new ArrayDeque<>(20); // should be plenty\n        boolean isDag = tryAdd(initialNodes, graph, knownNodes, new CycleDetector<>(graph), nodePath);\n        if (!isDag) {\n            this.badNodes = nodePath;\n        }\n        return isDag;\n    }", "signature": "boolean isDag()", "full_signature": "public boolean isDag()", "class_method_signature": "DagChecker.isDag()", "testcase": false, "constructor": false, "invocations": ["initialNodes", "size", "tryAdd"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}