{"test_class": {"identifier": "DynamoDBCertRecordStoreConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String tableName = \"cert-table\";", "modifier": "private final", "type": "String", "declarator": "tableName = \"cert-table\"", "var_name": "tableName"}, {"original_string": "private final String indexName = \"cert-table-index\";", "modifier": "private final", "type": "String", "declarator": "indexName = \"cert-table-index\"", "var_name": "indexName"}, {"original_string": "@Mock private DynamoDB dynamoDB = Mockito.mock(DynamoDB.class);", "modifier": "@Mock private", "type": "DynamoDB", "declarator": "dynamoDB = Mockito.mock(DynamoDB.class)", "var_name": "dynamoDB"}, {"original_string": "@Mock private Table table = Mockito.mock(Table.class);", "modifier": "@Mock private", "type": "Table", "declarator": "table = Mockito.mock(Table.class)", "var_name": "table"}, {"original_string": "@Mock private Index index = Mockito.mock(Index.class);", "modifier": "@Mock private", "type": "Index", "declarator": "index = Mockito.mock(Index.class)", "var_name": "index"}, {"original_string": "@Mock private Item item = Mockito.mock(Item.class);", "modifier": "@Mock private", "type": "Item", "declarator": "item = Mockito.mock(Item.class)", "var_name": "item"}, {"original_string": "@Mock private PutItemOutcome putOutcome = Mockito.mock(PutItemOutcome.class);", "modifier": "@Mock private", "type": "PutItemOutcome", "declarator": "putOutcome = Mockito.mock(PutItemOutcome.class)", "var_name": "putOutcome"}, {"original_string": "@Mock private DeleteItemOutcome deleteOutcome = Mockito.mock(DeleteItemOutcome.class);", "modifier": "@Mock private", "type": "DeleteItemOutcome", "declarator": "deleteOutcome = Mockito.mock(DeleteItemOutcome.class)", "var_name": "deleteOutcome"}, {"original_string": "@Mock private UpdateItemOutcome updateOutcome = Mockito.mock(UpdateItemOutcome.class);", "modifier": "@Mock private", "type": "UpdateItemOutcome", "declarator": "updateOutcome = Mockito.mock(UpdateItemOutcome.class)", "var_name": "updateOutcome"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnectionTest.java"}, "test_case": {"identifier": "testGetX509CertRecord", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetX509CertRecord() {\n\n        Date now = new Date();\n        long tstamp = mockNonNullableColumns(now);\n        Mockito.doReturn(tstamp).when(item).getLong(\"lastNotifiedTime\");\n        Mockito.doReturn(tstamp).when(item).get(\"lastNotifiedTime\");\n        Mockito.doReturn(\"last-notified-server\").when(item).getString(\"lastNotifiedServer\");\n        Mockito.doReturn(tstamp).when(item).getLong(\"expiryTime\");\n        Mockito.doReturn(tstamp).when(item).get(\"expiryTime\");\n        Mockito.doReturn(\"hostname\").when(item).getString(\"hostName\");\n\n        DynamoDBCertRecordStoreConnection dbConn = getDBConnection();\n        dbConn.setOperationTimeout(10);\n        X509CertRecord certRecord = dbConn.getX509CertRecord(\"athenz.provider\", \"1234\", \"cn\");\n\n        assertNonNullableColumns(now, certRecord);\n        assertEquals(certRecord.getLastNotifiedTime(), now);\n        assertEquals(certRecord.getLastNotifiedServer(), \"last-notified-server\");\n        assertEquals(certRecord.getExpiryTime(), now);\n        assertEquals(certRecord.getHostName(), \"hostname\");\n\n        dbConn.close();\n    }", "signature": "void testGetX509CertRecord()", "full_signature": "@Test public void testGetX509CertRecord()", "class_method_signature": "DynamoDBCertRecordStoreConnectionTest.testGetX509CertRecord()", "testcase": true, "constructor": false, "invocations": ["mockNonNullableColumns", "getLong", "when", "doReturn", "get", "when", "doReturn", "getString", "when", "doReturn", "getLong", "when", "doReturn", "get", "when", "doReturn", "getString", "when", "doReturn", "getDBConnection", "setOperationTimeout", "getX509CertRecord", "assertNonNullableColumns", "assertEquals", "getLastNotifiedTime", "assertEquals", "getLastNotifiedServer", "assertEquals", "getExpiryTime", "assertEquals", "getHostName", "close"]}, "focal_class": {"identifier": "DynamoDBCertRecordStoreConnection", "superclass": "", "interfaces": "implements CertRecordStoreConnection", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBCertRecordStoreConnection.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DynamoDBCertRecordStoreConnection.class)", "var_name": "LOGGER"}, {"original_string": "private static final String KEY_PRIMARY = \"primaryKey\";", "modifier": "private static final", "type": "String", "declarator": "KEY_PRIMARY = \"primaryKey\"", "var_name": "KEY_PRIMARY"}, {"original_string": "private static final String KEY_PROVIDER = \"provider\";", "modifier": "private static final", "type": "String", "declarator": "KEY_PROVIDER = \"provider\"", "var_name": "KEY_PROVIDER"}, {"original_string": "private static final String KEY_INSTANCE_ID = \"instanceId\";", "modifier": "private static final", "type": "String", "declarator": "KEY_INSTANCE_ID = \"instanceId\"", "var_name": "KEY_INSTANCE_ID"}, {"original_string": "private static final String KEY_SERVICE = \"service\";", "modifier": "private static final", "type": "String", "declarator": "KEY_SERVICE = \"service\"", "var_name": "KEY_SERVICE"}, {"original_string": "private static final String KEY_CURRENT_SERIAL = \"currentSerial\";", "modifier": "private static final", "type": "String", "declarator": "KEY_CURRENT_SERIAL = \"currentSerial\"", "var_name": "KEY_CURRENT_SERIAL"}, {"original_string": "private static final String KEY_CURRENT_TIME = \"currentTime\";", "modifier": "private static final", "type": "String", "declarator": "KEY_CURRENT_TIME = \"currentTime\"", "var_name": "KEY_CURRENT_TIME"}, {"original_string": "private static final String KEY_CURRENT_DATE = \"currentDate\";", "modifier": "private static final", "type": "String", "declarator": "KEY_CURRENT_DATE = \"currentDate\"", "var_name": "KEY_CURRENT_DATE"}, {"original_string": "private static final String KEY_CURRENT_IP = \"currentIP\";", "modifier": "private static final", "type": "String", "declarator": "KEY_CURRENT_IP = \"currentIP\"", "var_name": "KEY_CURRENT_IP"}, {"original_string": "private static final String KEY_PREV_SERIAL = \"prevSerial\";", "modifier": "private static final", "type": "String", "declarator": "KEY_PREV_SERIAL = \"prevSerial\"", "var_name": "KEY_PREV_SERIAL"}, {"original_string": "private static final String KEY_PREV_TIME = \"prevTime\";", "modifier": "private static final", "type": "String", "declarator": "KEY_PREV_TIME = \"prevTime\"", "var_name": "KEY_PREV_TIME"}, {"original_string": "private static final String KEY_PREV_IP = \"prevIP\";", "modifier": "private static final", "type": "String", "declarator": "KEY_PREV_IP = \"prevIP\"", "var_name": "KEY_PREV_IP"}, {"original_string": "private static final String KEY_CLIENT_CERT = \"clientCert\";", "modifier": "private static final", "type": "String", "declarator": "KEY_CLIENT_CERT = \"clientCert\"", "var_name": "KEY_CLIENT_CERT"}, {"original_string": "private static final String KEY_LAST_NOTIFIED_TIME = \"lastNotifiedTime\";", "modifier": "private static final", "type": "String", "declarator": "KEY_LAST_NOTIFIED_TIME = \"lastNotifiedTime\"", "var_name": "KEY_LAST_NOTIFIED_TIME"}, {"original_string": "private static final String KEY_LAST_NOTIFIED_SERVER = \"lastNotifiedServer\";", "modifier": "private static final", "type": "String", "declarator": "KEY_LAST_NOTIFIED_SERVER = \"lastNotifiedServer\"", "var_name": "KEY_LAST_NOTIFIED_SERVER"}, {"original_string": "private static final String KEY_EXPIRY_TIME = \"expiryTime\";", "modifier": "private static final", "type": "String", "declarator": "KEY_EXPIRY_TIME = \"expiryTime\"", "var_name": "KEY_EXPIRY_TIME"}, {"original_string": "private static final String KEY_HOSTNAME = \"hostName\";", "modifier": "private static final", "type": "String", "declarator": "KEY_HOSTNAME = \"hostName\"", "var_name": "KEY_HOSTNAME"}, {"original_string": "private static final String KEY_TTL = \"ttl\";", "modifier": "private static final", "type": "String", "declarator": "KEY_TTL = \"ttl\"", "var_name": "KEY_TTL"}, {"original_string": "private static final String KEY_REGISTER_TIME = \"registerTime\";", "modifier": "private static final", "type": "String", "declarator": "KEY_REGISTER_TIME = \"registerTime\"", "var_name": "KEY_REGISTER_TIME"}, {"original_string": "private static final String KEY_SVC_DATA_UPDATE_TIME = \"svcDataUpdateTime\";", "modifier": "private static final", "type": "String", "declarator": "KEY_SVC_DATA_UPDATE_TIME = \"svcDataUpdateTime\"", "var_name": "KEY_SVC_DATA_UPDATE_TIME"}, {"original_string": "private static final int NOTIFICATIONS_GRACE_PERIOD_IN_HOURS = 72;", "modifier": "private static final", "type": "int", "declarator": "NOTIFICATIONS_GRACE_PERIOD_IN_HOURS = 72", "var_name": "NOTIFICATIONS_GRACE_PERIOD_IN_HOURS"}, {"original_string": "private static final Long EXPIRY_HOURS = Long.parseLong(\n            System.getProperty(ZTSConsts.ZTS_PROP_CERT_DYNAMODB_ITEM_TTL_HOURS, \"720\"));", "modifier": "private static final", "type": "Long", "declarator": "EXPIRY_HOURS = Long.parseLong(\n            System.getProperty(ZTSConsts.ZTS_PROP_CERT_DYNAMODB_ITEM_TTL_HOURS, \"720\"))", "var_name": "EXPIRY_HOURS"}, {"original_string": "private static long expiryTime = 3660 * EXPIRY_HOURS;", "modifier": "private static", "type": "long", "declarator": "expiryTime = 3660 * EXPIRY_HOURS", "var_name": "expiryTime"}, {"original_string": "private Table table;", "modifier": "private", "type": "Table", "declarator": "table", "var_name": "table"}, {"original_string": "private Index index;", "modifier": "private", "type": "Index", "declarator": "index", "var_name": "index"}], "methods": [{"identifier": "DynamoDBCertRecordStoreConnection", "parameters": "(DynamoDB dynamoDB, final String tableName, String indexName)", "modifiers": "public", "return": "", "signature": " DynamoDBCertRecordStoreConnection(DynamoDB dynamoDB, final String tableName, String indexName)", "full_signature": "public  DynamoDBCertRecordStoreConnection(DynamoDB dynamoDB, final String tableName, String indexName)", "class_method_signature": "DynamoDBCertRecordStoreConnection.DynamoDBCertRecordStoreConnection(DynamoDB dynamoDB, final String tableName, String indexName)", "testcase": false, "constructor": true}, {"identifier": "setOperationTimeout", "parameters": "(int queryTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setOperationTimeout(int queryTimeout)", "full_signature": "@Override public void setOperationTimeout(int queryTimeout)", "class_method_signature": "DynamoDBCertRecordStoreConnection.setOperationTimeout(int queryTimeout)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DynamoDBCertRecordStoreConnection.close()", "testcase": false, "constructor": false}, {"identifier": "getX509CertRecord", "parameters": "(String provider, String instanceId, String service)", "modifiers": "@Override public", "return": "X509CertRecord", "signature": "X509CertRecord getX509CertRecord(String provider, String instanceId, String service)", "full_signature": "@Override public X509CertRecord getX509CertRecord(String provider, String instanceId, String service)", "class_method_signature": "DynamoDBCertRecordStoreConnection.getX509CertRecord(String provider, String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "itemToX509CertRecord", "parameters": "(Item item)", "modifiers": "private", "return": "X509CertRecord", "signature": "X509CertRecord itemToX509CertRecord(Item item)", "full_signature": "private X509CertRecord itemToX509CertRecord(Item item)", "class_method_signature": "DynamoDBCertRecordStoreConnection.itemToX509CertRecord(Item item)", "testcase": false, "constructor": false}, {"identifier": "getDateFromItem", "parameters": "(Item item, String key)", "modifiers": "private", "return": "Date", "signature": "Date getDateFromItem(Item item, String key)", "full_signature": "private Date getDateFromItem(Item item, String key)", "class_method_signature": "DynamoDBCertRecordStoreConnection.getDateFromItem(Item item, String key)", "testcase": false, "constructor": false}, {"identifier": "getLongFromDate", "parameters": "(Date date)", "modifiers": "private", "return": "Object", "signature": "Object getLongFromDate(Date date)", "full_signature": "private Object getLongFromDate(Date date)", "class_method_signature": "DynamoDBCertRecordStoreConnection.getLongFromDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "updateX509CertRecord", "parameters": "(X509CertRecord certRecord)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateX509CertRecord(X509CertRecord certRecord)", "full_signature": "@Override public boolean updateX509CertRecord(X509CertRecord certRecord)", "class_method_signature": "DynamoDBCertRecordStoreConnection.updateX509CertRecord(X509CertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "insertX509CertRecord", "parameters": "(X509CertRecord certRecord)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertX509CertRecord(X509CertRecord certRecord)", "full_signature": "@Override public boolean insertX509CertRecord(X509CertRecord certRecord)", "class_method_signature": "DynamoDBCertRecordStoreConnection.insertX509CertRecord(X509CertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "deleteX509CertRecord", "parameters": "(String provider, String instanceId, String service)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteX509CertRecord(String provider, String instanceId, String service)", "full_signature": "@Override public boolean deleteX509CertRecord(String provider, String instanceId, String service)", "class_method_signature": "DynamoDBCertRecordStoreConnection.deleteX509CertRecord(String provider, String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredX509CertRecords", "parameters": "(int expiryTimeMins)", "modifiers": "@Override public", "return": "int", "signature": "int deleteExpiredX509CertRecords(int expiryTimeMins)", "full_signature": "@Override public int deleteExpiredX509CertRecords(int expiryTimeMins)", "class_method_signature": "DynamoDBCertRecordStoreConnection.deleteExpiredX509CertRecords(int expiryTimeMins)", "testcase": false, "constructor": false}, {"identifier": "updateUnrefreshedCertificatesNotificationTimestamp", "parameters": "(String lastNotifiedServer,\n                                                                      long lastNotifiedTime,\n                                                                      String provider)", "modifiers": "@Override public", "return": "List<X509CertRecord>", "signature": "List<X509CertRecord> updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                      long lastNotifiedTime,\n                                                                      String provider)", "full_signature": "@Override public List<X509CertRecord> updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                      long lastNotifiedTime,\n                                                                      String provider)", "class_method_signature": "DynamoDBCertRecordStoreConnection.updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                      long lastNotifiedTime,\n                                                                      String provider)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryKey", "parameters": "(final String provider, final String instanceId, final String service)", "modifiers": "private", "return": "String", "signature": "String getPrimaryKey(final String provider, final String instanceId, final String service)", "full_signature": "private String getPrimaryKey(final String provider, final String instanceId, final String service)", "class_method_signature": "DynamoDBCertRecordStoreConnection.getPrimaryKey(final String provider, final String instanceId, final String service)", "testcase": false, "constructor": false}, {"identifier": "updateLastNotified", "parameters": "(String lastNotifiedServer, long lastNotifiedTime, List<Item> items)", "modifiers": "private", "return": "List<X509CertRecord>", "signature": "List<X509CertRecord> updateLastNotified(String lastNotifiedServer, long lastNotifiedTime, List<Item> items)", "full_signature": "private List<X509CertRecord> updateLastNotified(String lastNotifiedServer, long lastNotifiedTime, List<Item> items)", "class_method_signature": "DynamoDBCertRecordStoreConnection.updateLastNotified(String lastNotifiedServer, long lastNotifiedTime, List<Item> items)", "testcase": false, "constructor": false}, {"identifier": "isRecordUpdatedWithNotificationTimeAndServer", "parameters": "(String lastNotifiedServer, long lastNotifiedTime, Item updatedItem)", "modifiers": "private", "return": "boolean", "signature": "boolean isRecordUpdatedWithNotificationTimeAndServer(String lastNotifiedServer, long lastNotifiedTime, Item updatedItem)", "full_signature": "private boolean isRecordUpdatedWithNotificationTimeAndServer(String lastNotifiedServer, long lastNotifiedTime, Item updatedItem)", "class_method_signature": "DynamoDBCertRecordStoreConnection.isRecordUpdatedWithNotificationTimeAndServer(String lastNotifiedServer, long lastNotifiedTime, Item updatedItem)", "testcase": false, "constructor": false}, {"identifier": "getUnrefreshedCertsRecords", "parameters": "(long lastNotifiedTime, String provider)", "modifiers": "private", "return": "List<Item>", "signature": "List<Item> getUnrefreshedCertsRecords(long lastNotifiedTime, String provider)", "full_signature": "private List<Item> getUnrefreshedCertsRecords(long lastNotifiedTime, String provider)", "class_method_signature": "DynamoDBCertRecordStoreConnection.getUnrefreshedCertsRecords(long lastNotifiedTime, String provider)", "testcase": false, "constructor": false}, {"identifier": "getUnrefreshedCertRecordsByDate", "parameters": "(String provider, Index index, long yesterday, String unrefreshedCertDate)", "modifiers": "private", "return": "List<Item>", "signature": "List<Item> getUnrefreshedCertRecordsByDate(String provider, Index index, long yesterday, String unrefreshedCertDate)", "full_signature": "private List<Item> getUnrefreshedCertRecordsByDate(String provider, Index index, long yesterday, String unrefreshedCertDate)", "class_method_signature": "DynamoDBCertRecordStoreConnection.getUnrefreshedCertRecordsByDate(String provider, Index index, long yesterday, String unrefreshedCertDate)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreConnection.java"}, "focal_method": {"identifier": "getX509CertRecord", "parameters": "(String provider, String instanceId, String service)", "modifiers": "@Override public", "return": "X509CertRecord", "body": "@Override\n    public X509CertRecord getX509CertRecord(String provider, String instanceId, String service) {\n\n        final String primaryKey = getPrimaryKey(provider, instanceId, service);\n        try {\n            Item item = table.getItem(KEY_PRIMARY, primaryKey);\n            if (item == null) {\n                LOGGER.error(\"DynamoDB Get Error for {}: item not found\", primaryKey);\n                return null;\n            }\n            return itemToX509CertRecord(item);\n        } catch (Exception ex) {\n            LOGGER.error(\"DynamoDB Get Error for {}: {}/{}\", primaryKey, ex.getClass(), ex.getMessage());\n            return null;\n        }\n    }", "signature": "X509CertRecord getX509CertRecord(String provider, String instanceId, String service)", "full_signature": "@Override public X509CertRecord getX509CertRecord(String provider, String instanceId, String service)", "class_method_signature": "DynamoDBCertRecordStoreConnection.getX509CertRecord(String provider, String instanceId, String service)", "testcase": false, "constructor": false, "invocations": ["getPrimaryKey", "getItem", "error", "itemToX509CertRecord", "error", "getClass", "getMessage"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}