{"test_class": {"identifier": "TestTransposeUtils", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestTransposeUtils.java"}, "test_case": {"identifier": "testTranspose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTranspose() {\n    List<List<Integer>> mat = new ArrayList<>(4);\n    mat.add(Arrays.asList(1, 2, 3));\n    mat.add(Arrays.asList(4, 5, 6));\n    mat.add(Arrays.asList(7, 8, 9));\n    mat.add(Arrays.asList(10, 11, 12));\n\n    List<List<Integer>> expected = new ArrayList<>(3);\n    expected.add(Arrays.asList(1, 4, 7, 10));\n    expected.add(Arrays.asList(2, 5, 8, 11));\n    expected.add(Arrays.asList(3, 6, 9, 12));\n    List<List<Integer>> actual = TransposeUtils.transpose(mat);\n    assertEquals(expected, actual);\n  }", "signature": "void testTranspose()", "full_signature": "@Test public void testTranspose()", "class_method_signature": "TestTransposeUtils.testTranspose()", "testcase": true, "constructor": false, "invocations": ["add", "asList", "add", "asList", "add", "asList", "add", "asList", "add", "asList", "add", "asList", "add", "asList", "transpose", "assertEquals"]}, "focal_class": {"identifier": "TransposeUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "TransposeUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " TransposeUtils()", "full_signature": "private  TransposeUtils()", "class_method_signature": "TransposeUtils.TransposeUtils()", "testcase": false, "constructor": true}, {"identifier": "transpose", "parameters": "(List<List<T>> mat)", "modifiers": "public static", "return": "List<List<T>>", "signature": "List<List<T>> transpose(List<List<T>> mat)", "full_signature": "public static List<List<T>> transpose(List<List<T>> mat)", "class_method_signature": "TransposeUtils.transpose(List<List<T>> mat)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/TransposeUtils.java"}, "focal_method": {"identifier": "transpose", "parameters": "(List<List<T>> mat)", "modifiers": "public static", "return": "List<List<T>>", "body": "public static <T> List<List<T>> transpose(List<List<T>> mat) {\n    int height = mat.size();\n    int width = mat.get(0).size();\n    List<List<T>> transposed = new ArrayList<>(width);\n    for (int w = 0; w < width; w++) {\n      List<T> newRow = new ArrayList<>(height);\n      for (List<T> aMat : mat) {\n        newRow.add(aMat.get(w));\n      }\n      transposed.add(newRow);\n    }\n    return transposed;\n  }", "signature": "List<List<T>> transpose(List<List<T>> mat)", "full_signature": "public static List<List<T>> transpose(List<List<T>> mat)", "class_method_signature": "TransposeUtils.transpose(List<List<T>> mat)", "testcase": false, "constructor": false, "invocations": ["size", "size", "get", "add", "get", "add"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}