{"test_class": {"identifier": "TeamsTemplateTest", "superclass": "extends AbstractTemplateTest", "interfaces": "", "fields": [{"original_string": "private TeamsTemplate teamsTemplate;", "modifier": "private", "type": "TeamsTemplate", "declarator": "teamsTemplate", "var_name": "teamsTemplate"}], "file": "misc/github-client-parent/github-client-spring/src/test/java/org/zalando/github/spring/TeamsTemplateTest.java"}, "test_case": {"identifier": "listTeams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void listTeams() throws Exception {\n\t\tmockServer.expect(requestTo(\"https://api.github.com/orgs/zalando-stups/teams?per_page=25\"))\n\t\t\t\t.andExpect(method(HttpMethod.GET))\n\t\t\t\t// .andExpect(header(\"Authorization\", \"Bearer ACCESS_TOKEN\"))\n\t\t\t\t.andRespond(\n\t\t\t\t\t\twithSuccess(new ClassPathResource(\"listTeams.json\", getClass()), MediaType.APPLICATION_JSON));\n\n\t\tList<Team> teamList = teamsTemplate.listTeams(\"zalando-stups\");\n\n\t\tAssertions.assertThat(teamList).isNotNull();\n\t\tAssertions.assertThat(teamList.size()).isEqualTo(1);\n\t}", "signature": "void listTeams()", "full_signature": "@Test public void listTeams()", "class_method_signature": "TeamsTemplateTest.listTeams()", "testcase": true, "constructor": false, "invocations": ["andRespond", "andExpect", "expect", "requestTo", "method", "withSuccess", "getClass", "listTeams", "isNotNull", "assertThat", "isEqualTo", "assertThat", "size"]}, "focal_class": {"identifier": "TeamsTemplate", "superclass": "extends AbstractGithubTemplate", "interfaces": "implements TeamsOperations", "fields": [{"original_string": "private final ParameterizedTypeReference<List<Team>> teamListTypeRef = new ParameterizedTypeReference<List<Team>>() {\n\t};", "modifier": "private final", "type": "ParameterizedTypeReference<List<Team>>", "declarator": "teamListTypeRef = new ParameterizedTypeReference<List<Team>>() {\n\t}", "var_name": "teamListTypeRef"}], "methods": [{"identifier": "TeamsTemplate", "parameters": "(RestOperations restOperations, GithubApiUriUtil uriUtil)", "modifiers": "public", "return": "", "signature": " TeamsTemplate(RestOperations restOperations, GithubApiUriUtil uriUtil)", "full_signature": "public  TeamsTemplate(RestOperations restOperations, GithubApiUriUtil uriUtil)", "class_method_signature": "TeamsTemplate.TeamsTemplate(RestOperations restOperations, GithubApiUriUtil uriUtil)", "testcase": false, "constructor": true}, {"identifier": "TeamsTemplate", "parameters": "(RestOperations restOperations)", "modifiers": "public", "return": "", "signature": " TeamsTemplate(RestOperations restOperations)", "full_signature": "public  TeamsTemplate(RestOperations restOperations)", "class_method_signature": "TeamsTemplate.TeamsTemplate(RestOperations restOperations)", "testcase": false, "constructor": true}, {"identifier": "listTeams", "parameters": "(String organization)", "modifiers": "@Override public", "return": "List<Team>", "signature": "List<Team> listTeams(String organization)", "full_signature": "@Override public List<Team> listTeams(String organization)", "class_method_signature": "TeamsTemplate.listTeams(String organization)", "testcase": false, "constructor": false}, {"identifier": "getTeam", "parameters": "(long teamId)", "modifiers": "@Override public", "return": "Team", "signature": "Team getTeam(long teamId)", "full_signature": "@Override public Team getTeam(long teamId)", "class_method_signature": "TeamsTemplate.getTeam(long teamId)", "testcase": false, "constructor": false}, {"identifier": "createTeam", "parameters": "(String organization, TeamRequest teamRequest)", "modifiers": "@Override public", "return": "Team", "signature": "Team createTeam(String organization, TeamRequest teamRequest)", "full_signature": "@Override public Team createTeam(String organization, TeamRequest teamRequest)", "class_method_signature": "TeamsTemplate.createTeam(String organization, TeamRequest teamRequest)", "testcase": false, "constructor": false}, {"identifier": "updateTeam", "parameters": "(long teamId, TeamRequest teamRequest)", "modifiers": "@Override public", "return": "Team", "signature": "Team updateTeam(long teamId, TeamRequest teamRequest)", "full_signature": "@Override public Team updateTeam(long teamId, TeamRequest teamRequest)", "class_method_signature": "TeamsTemplate.updateTeam(long teamId, TeamRequest teamRequest)", "testcase": false, "constructor": false}, {"identifier": "deleteTeam", "parameters": "(long teamId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteTeam(long teamId)", "full_signature": "@Override public void deleteTeam(long teamId)", "class_method_signature": "TeamsTemplate.deleteTeam(long teamId)", "testcase": false, "constructor": false}], "file": "misc/github-client-parent/github-client-spring/src/main/java/org/zalando/github/spring/TeamsTemplate.java"}, "focal_method": {"identifier": "listTeams", "parameters": "(String organization)", "modifiers": "@Override public", "return": "List<Team>", "body": "@Override\n\tpublic List<Team> listTeams(String organization) {\n\t\tMap<String, Object> uriVariables = new HashMap<>();\n\t\turiVariables.put(\"organization\", organization);\n\n\t\tList<Team> teamList = new ArrayList<Team>();\n\t\tIterator<List<Team>> iter = new PagingIterator<>(getRestOperations(),\n\t\t\t\tbuildUri(\"/orgs/{organization}/teams?per_page=25\", uriVariables), teamListTypeRef);\n\t\twhile (iter.hasNext()) {\n\t\t\tteamList.addAll(iter.next());\n\t\t}\n\t\treturn teamList;\n\t}", "signature": "List<Team> listTeams(String organization)", "full_signature": "@Override public List<Team> listTeams(String organization)", "class_method_signature": "TeamsTemplate.listTeams(String organization)", "testcase": false, "constructor": false, "invocations": ["put", "getRestOperations", "buildUri", "hasNext", "addAll", "next"]}, "repository": {"repo_id": 32913234, "url": "https://github.com/zalando-stups/booties", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 35, "size": 330, "license": "licensed"}}