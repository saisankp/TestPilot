{"test_class": {"identifier": "MockerTest", "superclass": "", "interfaces": "", "fields": [], "file": "mocker/src/test/java/mocker/MockerTest.java"}, "test_case": {"identifier": "testMock", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMock() {\n        List mock = mock(List.class);\n        when(mock.size()).thenReturn(3);\n\n        assertThat(mock.size()).isEqualTo(3);\n    }", "signature": "void testMock()", "full_signature": "@Test public void testMock()", "class_method_signature": "MockerTest.testMock()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "size", "isEqualTo", "assertThat", "size"]}, "focal_class": {"identifier": "Mocker", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final Class<T> clazz;", "modifier": "public final", "type": "Class<T>", "declarator": "clazz", "var_name": "clazz"}, {"original_string": "public Func1<T, ?> when;", "modifier": "public", "type": "Func1<T, ?>", "declarator": "when", "var_name": "when"}, {"original_string": "public Func1<T, ?> thenReturn;", "modifier": "public", "type": "Func1<T, ?>", "declarator": "thenReturn", "var_name": "thenReturn"}, {"original_string": "public Func2<T, Integer, ?> when2;", "modifier": "public", "type": "Func2<T, Integer, ?>", "declarator": "when2", "var_name": "when2"}, {"original_string": "public Func2<T, Integer, ?> thenReturn2;", "modifier": "public", "type": "Func2<T, Integer, ?>", "declarator": "thenReturn2", "var_name": "thenReturn2"}, {"original_string": "public Action1<T> verify;", "modifier": "public", "type": "Action1<T>", "declarator": "verify", "var_name": "verify"}, {"original_string": "public Action2<T, Integer> verify2;", "modifier": "public", "type": "Action2<T, Integer>", "declarator": "verify2", "var_name": "verify2"}, {"original_string": "public Action1<T> then;", "modifier": "public", "type": "Action1<T>", "declarator": "then", "var_name": "then"}, {"original_string": "public Action2<T, Integer> then2;", "modifier": "public", "type": "Action2<T, Integer>", "declarator": "then2", "var_name": "then2"}, {"original_string": "public Mocker<T> mocker;", "modifier": "public", "type": "Mocker<T>", "declarator": "mocker", "var_name": "mocker"}, {"original_string": "public T that;", "modifier": "public", "type": "T", "declarator": "that", "var_name": "that"}, {"original_string": "public VerificationMode verification;", "modifier": "public", "type": "VerificationMode", "declarator": "verification", "var_name": "verification"}], "methods": [{"identifier": "Mocker", "parameters": "(Class<T> clazz)", "modifiers": "public", "return": "", "signature": " Mocker(Class<T> clazz)", "full_signature": "public  Mocker(Class<T> clazz)", "class_method_signature": "Mocker.Mocker(Class<T> clazz)", "testcase": false, "constructor": true}, {"identifier": "Mocker", "parameters": "(Mocker<T> mocker)", "modifiers": "public", "return": "", "signature": " Mocker(Mocker<T> mocker)", "full_signature": "public  Mocker(Mocker<T> mocker)", "class_method_signature": "Mocker.Mocker(Mocker<T> mocker)", "testcase": false, "constructor": true}, {"identifier": "when", "parameters": "(Func1<T, R> when)", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> when(Func1<T, R> when)", "full_signature": "public Mocker<T> when(Func1<T, R> when)", "class_method_signature": "Mocker.when(Func1<T, R> when)", "testcase": false, "constructor": false}, {"identifier": "when", "parameters": "(Func2<T, Integer, R> when)", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> when(Func2<T, Integer, R> when)", "full_signature": "public Mocker<T> when(Func2<T, Integer, R> when)", "class_method_signature": "Mocker.when(Func2<T, Integer, R> when)", "testcase": false, "constructor": false}, {"identifier": "thenReturn", "parameters": "(Func1<T, R> thenReturn)", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> thenReturn(Func1<T, R> thenReturn)", "full_signature": "public Mocker<T> thenReturn(Func1<T, R> thenReturn)", "class_method_signature": "Mocker.thenReturn(Func1<T, R> thenReturn)", "testcase": false, "constructor": false}, {"identifier": "thenReturn", "parameters": "(Func2<T, Integer, R> thenReturn)", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> thenReturn(Func2<T, Integer, R> thenReturn)", "full_signature": "public Mocker<T> thenReturn(Func2<T, Integer, R> thenReturn)", "class_method_signature": "Mocker.thenReturn(Func2<T, Integer, R> thenReturn)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Class<V> clazz)", "modifiers": "public static", "return": "Mocker<V>", "signature": "Mocker<V> of(Class<V> clazz)", "full_signature": "public static Mocker<V> of(Class<V> clazz)", "class_method_signature": "Mocker.of(Class<V> clazz)", "testcase": false, "constructor": false}, {"identifier": "mock", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T mock()", "full_signature": "public T mock()", "class_method_signature": "Mocker.mock()", "testcase": false, "constructor": false}, {"identifier": "mock", "parameters": "(int i)", "modifiers": "public", "return": "T", "signature": "T mock(int i)", "full_signature": "public T mock(int i)", "class_method_signature": "Mocker.mock(int i)", "testcase": false, "constructor": false}, {"identifier": "mock", "parameters": "(Class<V> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "V", "signature": "V mock(Class<V> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static V mock(Class<V> clazz)", "class_method_signature": "Mocker.mock(Class<V> clazz)", "testcase": false, "constructor": false}, {"identifier": "mocker", "parameters": "(Class<V> clazz)", "modifiers": "public static", "return": "Mocker<V>", "signature": "Mocker<V> mocker(Class<V> clazz)", "full_signature": "public static Mocker<V> mocker(Class<V> clazz)", "class_method_signature": "Mocker.mocker(Class<V> clazz)", "testcase": false, "constructor": false}, {"identifier": "then", "parameters": "(Action1<T> then)", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> then(Action1<T> then)", "full_signature": "public Mocker<T> then(Action1<T> then)", "class_method_signature": "Mocker.then(Action1<T> then)", "testcase": false, "constructor": false}, {"identifier": "then", "parameters": "(Action2<T, Integer> then)", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> then(Action2<T, Integer> then)", "full_signature": "public Mocker<T> then(Action2<T, Integer> then)", "class_method_signature": "Mocker.then(Action2<T, Integer> then)", "testcase": false, "constructor": false}, {"identifier": "lift", "parameters": "()", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> lift()", "full_signature": "public Mocker<T> lift()", "class_method_signature": "Mocker.lift()", "testcase": false, "constructor": false}, {"identifier": "safeLift", "parameters": "()", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> safeLift()", "full_signature": "public Mocker<T> safeLift()", "class_method_signature": "Mocker.safeLift()", "testcase": false, "constructor": false}, {"identifier": "lift", "parameters": "(Mocker<T> mocker)", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> lift(Mocker<T> mocker)", "full_signature": "public Mocker<T> lift(Mocker<T> mocker)", "class_method_signature": "Mocker.lift(Mocker<T> mocker)", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "()", "modifiers": "public", "return": "List<T>", "signature": "List<T> asList()", "full_signature": "public List<T> asList()", "class_method_signature": "Mocker.asList()", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "(int many)", "modifiers": "public", "return": "List<T>", "signature": "List<T> asList(int many)", "full_signature": "public List<T> asList(int many)", "class_method_signature": "Mocker.asList(int many)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(int times)", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> times(int times)", "full_signature": "public Mocker<T> times(int times)", "class_method_signature": "Mocker.times(int times)", "testcase": false, "constructor": false}, {"identifier": "atLeast", "parameters": "(int atLeast)", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> atLeast(int atLeast)", "full_signature": "public Mocker<T> atLeast(int atLeast)", "class_method_signature": "Mocker.atLeast(int atLeast)", "testcase": false, "constructor": false}, {"identifier": "atMost", "parameters": "(int atMost)", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> atMost(int atMost)", "full_signature": "public Mocker<T> atMost(int atMost)", "class_method_signature": "Mocker.atMost(int atMost)", "testcase": false, "constructor": false}, {"identifier": "never", "parameters": "()", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> never()", "full_signature": "public Mocker<T> never()", "class_method_signature": "Mocker.never()", "testcase": false, "constructor": false}, {"identifier": "atLeastOnce", "parameters": "()", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> atLeastOnce()", "full_signature": "public Mocker<T> atLeastOnce()", "class_method_signature": "Mocker.atLeastOnce()", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(Action1<T> verify)", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> verify(Action1<T> verify)", "full_signature": "public Mocker<T> verify(Action1<T> verify)", "class_method_signature": "Mocker.verify(Action1<T> verify)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(Action2<T, Integer> verify)", "modifiers": "public", "return": "Mocker<T>", "signature": "Mocker<T> verify(Action2<T, Integer> verify)", "full_signature": "public Mocker<T> verify(Action2<T, Integer> verify)", "class_method_signature": "Mocker.verify(Action2<T, Integer> verify)", "testcase": false, "constructor": false}, {"identifier": "never", "parameters": "(Action1<T> verify)", "modifiers": "public", "return": "T", "signature": "T never(Action1<T> verify)", "full_signature": "public T never(Action1<T> verify)", "class_method_signature": "Mocker.never(Action1<T> verify)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(Action1<T> verify, int i)", "modifiers": "public", "return": "T", "signature": "T times(Action1<T> verify, int i)", "full_signature": "public T times(Action1<T> verify, int i)", "class_method_signature": "Mocker.times(Action1<T> verify, int i)", "testcase": false, "constructor": false}], "file": "mocker/src/main/java/mocker/Mocker.java"}, "focal_method": {"identifier": "mock", "parameters": "()", "modifiers": "public", "return": "T", "body": "public T mock() {\n        return mock(0);\n    }", "signature": "T mock()", "full_signature": "public T mock()", "class_method_signature": "Mocker.mock()", "testcase": false, "constructor": false, "invocations": ["mock"]}, "repository": {"repo_id": 59216067, "url": "https://github.com/yongjhih/mocker", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 96, "size": 171, "license": "licensed"}}