{"test_class": {"identifier": "LDAPAuthorityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LDAPAuthority ldapAuthority;", "modifier": "private", "type": "LDAPAuthority", "declarator": "ldapAuthority", "var_name": "ldapAuthority"}, {"original_string": "private Principal principal;", "modifier": "private", "type": "Principal", "declarator": "principal", "var_name": "principal"}, {"original_string": "private StringBuilder errMsg;", "modifier": "private", "type": "StringBuilder", "declarator": "errMsg", "var_name": "errMsg"}, {"original_string": "private final String baseDNProp = LDAPAuthority.ATHENZ_PROP_LDAP_BASE_DN;", "modifier": "private final", "type": "String", "declarator": "baseDNProp = LDAPAuthority.ATHENZ_PROP_LDAP_BASE_DN", "var_name": "baseDNProp"}, {"original_string": "private final String portNumberProp = LDAPAuthority.ATHENZ_PROP_LDAP_PORT;", "modifier": "private final", "type": "String", "declarator": "portNumberProp = LDAPAuthority.ATHENZ_PROP_LDAP_PORT", "var_name": "portNumberProp"}, {"original_string": "private final String hostnameProp = LDAPAuthority.ATHENZ_PROP_HOSTNAME;", "modifier": "private final", "type": "String", "declarator": "hostnameProp = LDAPAuthority.ATHENZ_PROP_HOSTNAME", "var_name": "hostnameProp"}, {"original_string": "private String oldBaseDN, oldPortNumber, oldHostname;", "modifier": "private", "type": "String", "declarator": "oldBaseDN", "var_name": "oldBaseDN"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/impl/LDAPAuthorityTest.java"}, "test_case": {"identifier": "testGetDomain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDomain() {\n        ldapAuthority = new LDAPAuthority();\n        ldapAuthority.initialize();\n        assertEquals(ldapAuthority.getDomain(),\"user\");\n    }", "signature": "void testGetDomain()", "full_signature": "@Test public void testGetDomain()", "class_method_signature": "LDAPAuthorityTest.testGetDomain()", "testcase": true, "constructor": false, "invocations": ["initialize", "assertEquals", "getDomain"]}, "focal_class": {"identifier": "LDAPAuthority", "superclass": "", "interfaces": "implements Authority", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(LDAPAuthority.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(LDAPAuthority.class)", "var_name": "LOG"}, {"original_string": "static final String ATHENZ_PROP_LDAP_BASE_DN = \"athenz.auth.ldap.base_dn\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_LDAP_BASE_DN = \"athenz.auth.ldap.base_dn\"", "var_name": "ATHENZ_PROP_LDAP_BASE_DN"}, {"original_string": "static final String ATHENZ_PROP_LDAP_PORT = \"athenz.auth.ldap.port\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_LDAP_PORT = \"athenz.auth.ldap.port\"", "var_name": "ATHENZ_PROP_LDAP_PORT"}, {"original_string": "static final String ATHENZ_AUTH_CHALLENGE = \"LDAPAuthentication realm=\\\"athenz\\\"\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_AUTH_CHALLENGE = \"LDAPAuthentication realm=\\\"athenz\\\"\"", "var_name": "ATHENZ_AUTH_CHALLENGE"}, {"original_string": "static final String ATHENZ_PROP_HOSTNAME = \"athenz.auth.ldap.hostname\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_HOSTNAME = \"athenz.auth.ldap.hostname\"", "var_name": "ATHENZ_PROP_HOSTNAME"}, {"original_string": "private String baseDN, portNumber, hostName, providerURL;", "modifier": "private", "type": "String", "declarator": "baseDN", "var_name": "baseDN"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "LDAPAuthority.initialize()", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getID()", "full_signature": "@Override public String getID()", "class_method_signature": "LDAPAuthority.getID()", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDomain()", "full_signature": "@Override public String getDomain()", "class_method_signature": "LDAPAuthority.getDomain()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getHeader()", "full_signature": "@Override public String getHeader()", "class_method_signature": "LDAPAuthority.getHeader()", "testcase": false, "constructor": false}, {"identifier": "getAuthenticateChallenge", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAuthenticateChallenge()", "full_signature": "@Override public String getAuthenticateChallenge()", "class_method_signature": "LDAPAuthority.getAuthenticateChallenge()", "testcase": false, "constructor": false}, {"identifier": "allowAuthorization", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean allowAuthorization()", "full_signature": "@Override public boolean allowAuthorization()", "class_method_signature": "LDAPAuthority.allowAuthorization()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String creds, String remoteAddr, String httpMethod, StringBuilder errMsg)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal authenticate(String creds, String remoteAddr, String httpMethod, StringBuilder errMsg)", "full_signature": "@Override public Principal authenticate(String creds, String remoteAddr, String httpMethod, StringBuilder errMsg)", "class_method_signature": "LDAPAuthority.authenticate(String creds, String remoteAddr, String httpMethod, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "getDirContext", "parameters": "(String finalDN, String password)", "modifiers": "", "return": "DirContext", "signature": "DirContext getDirContext(String finalDN, String password)", "full_signature": " DirContext getDirContext(String finalDN, String password)", "class_method_signature": "LDAPAuthority.getDirContext(String finalDN, String password)", "testcase": false, "constructor": false}, {"identifier": "getSimplePrincipal", "parameters": "(String creds, String username)", "modifiers": "", "return": "SimplePrincipal", "signature": "SimplePrincipal getSimplePrincipal(String creds, String username)", "full_signature": " SimplePrincipal getSimplePrincipal(String creds, String username)", "class_method_signature": "LDAPAuthority.getSimplePrincipal(String creds, String username)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/LDAPAuthority.java"}, "focal_method": {"identifier": "getDomain", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getDomain() {\n        return \"user\";\n    }", "signature": "String getDomain()", "full_signature": "@Override public String getDomain()", "class_method_signature": "LDAPAuthority.getDomain()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}