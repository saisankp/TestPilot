{"test_class": {"identifier": "TestWaitingThread", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static\n        HttpHost TARGET = new HttpHost(\"target.test.invalid\");", "modifier": "public final static", "type": "HttpHost", "declarator": "TARGET = new HttpHost(\"target.test.invalid\")", "var_name": "TARGET"}], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/impl/conn/tsccm/TestWaitingThread.java"}, "test_case": {"identifier": "testInterrupt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInterrupt() throws InterruptedException {\n\n        Lock      lck = new ReentrantLock();\n        Condition cnd = lck.newCondition();\n        WaitingThread wt = new WaitingThread(cnd, null);\n\n        AwaitThread ath = new AwaitThread(wt, lck, null);\n        ath.start();\n        Thread.sleep(100); // give extra thread time to block\n\n        Assert.assertNull(\"thread caught exception\", ath.getException());\n        Assert.assertTrue(\"thread not waiting\", ath.isWaiting());\n        Assert.assertEquals(\"wrong thread\", ath, wt.getThread());\n\n        ath.interrupt();\n        Thread.sleep(100); // give extra thread time to wake up\n\n        Assert.assertFalse(\"thread still waiting\", ath.isWaiting());\n        Assert.assertNotNull(\"thread didn't catch exception\", ath.getException());\n        Assert.assertTrue(\"thread caught wrong exception\",\n                   ath.getException() instanceof InterruptedException);\n        Assert.assertNull(\"thread still there\", wt.getThread());\n    }", "signature": "void testInterrupt()", "full_signature": "@Test public void testInterrupt()", "class_method_signature": "TestWaitingThread.testInterrupt()", "testcase": true, "constructor": false, "invocations": ["newCondition", "start", "sleep", "assertNull", "getException", "assertTrue", "isWaiting", "assertEquals", "getThread", "interrupt", "sleep", "assertFalse", "isWaiting", "assertNotNull", "getException", "assertTrue", "getException", "assertNull", "getThread"]}, "focal_class": {"identifier": "WaitingThread", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Condition cond;", "modifier": "private final", "type": "Condition", "declarator": "cond", "var_name": "cond"}, {"original_string": "private final RouteSpecificPool pool;", "modifier": "private final", "type": "RouteSpecificPool", "declarator": "pool", "var_name": "pool"}, {"original_string": "private Thread waiter;", "modifier": "private", "type": "Thread", "declarator": "waiter", "var_name": "waiter"}, {"original_string": "private boolean aborted;", "modifier": "private", "type": "boolean", "declarator": "aborted", "var_name": "aborted"}], "methods": [{"identifier": "WaitingThread", "parameters": "(Condition cond, RouteSpecificPool pool)", "modifiers": "public", "return": "", "signature": " WaitingThread(Condition cond, RouteSpecificPool pool)", "full_signature": "public  WaitingThread(Condition cond, RouteSpecificPool pool)", "class_method_signature": "WaitingThread.WaitingThread(Condition cond, RouteSpecificPool pool)", "testcase": false, "constructor": true}, {"identifier": "getCondition", "parameters": "()", "modifiers": "public final", "return": "Condition", "signature": "Condition getCondition()", "full_signature": "public final Condition getCondition()", "class_method_signature": "WaitingThread.getCondition()", "testcase": false, "constructor": false}, {"identifier": "getPool", "parameters": "()", "modifiers": "public final", "return": "RouteSpecificPool", "signature": "RouteSpecificPool getPool()", "full_signature": "public final RouteSpecificPool getPool()", "class_method_signature": "WaitingThread.getPool()", "testcase": false, "constructor": false}, {"identifier": "getThread", "parameters": "()", "modifiers": "public final", "return": "Thread", "signature": "Thread getThread()", "full_signature": "public final Thread getThread()", "class_method_signature": "WaitingThread.getThread()", "testcase": false, "constructor": false}, {"identifier": "await", "parameters": "(Date deadline)", "modifiers": "public", "return": "boolean", "signature": "boolean await(Date deadline)", "full_signature": "public boolean await(Date deadline)", "class_method_signature": "WaitingThread.await(Date deadline)", "testcase": false, "constructor": false}, {"identifier": "wakeup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void wakeup()", "full_signature": "public void wakeup()", "class_method_signature": "WaitingThread.wakeup()", "testcase": false, "constructor": false}, {"identifier": "interrupt", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void interrupt()", "full_signature": "public void interrupt()", "class_method_signature": "WaitingThread.interrupt()", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/conn/tsccm/WaitingThread.java"}, "focal_method": {"identifier": "interrupt", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void interrupt() {\n        aborted = true;\n        this.cond.signalAll();\n    }", "signature": "void interrupt()", "full_signature": "public void interrupt()", "class_method_signature": "WaitingThread.interrupt()", "testcase": false, "constructor": false, "invocations": ["signalAll"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}