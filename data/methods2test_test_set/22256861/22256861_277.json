{"test_class": {"identifier": "NNUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Path testDir;", "modifier": "private", "type": "Path", "declarator": "testDir", "var_name": "testDir"}, {"original_string": "private String sep;", "modifier": "private", "type": "String", "declarator": "sep", "var_name": "sep"}], "file": "s3tbx-c2rcc/src/test/java/org/esa/s3tbx/c2rcc/util/NNUtilsTest.java"}, "test_case": {"identifier": "testGetNNFilePaths_ignoringUpperCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetNNFilePaths_ignoringUpperCase() throws Exception {\n        final String[] alternativeNetDirNamesWithUpperCase = new String[]{\n                \"rtosa_aaNN\",\n                \"rtosa_rw\",\n                \"rw_iop\",\n                \"iop_rw\",\n                \"rw_kd\",\n                \"iop_unCIop\",\n                \"iop_uncsumiop_unckd\",\n                \"rw_rwNORM\",\n                \"rtosa_trans\",\n                \"rtosa_rpath\"\n        };\n\n        for (int i = 0; i < 10; i++) {\n            final Path nnDir = testDir.resolve(alternativeNetDirNamesWithUpperCase[i]);\n            Files.createDirectories(nnDir);\n            final Path nnfile = nnDir.resolve(\"nnFile_\" + i + \".net\");\n            Files.createFile(nnfile);\n        }\n\n        final String[] nnFilePaths = NNUtils.getNNFilePaths(testDir, NNUtils.ALTERNATIVE_NET_DIR_NAMES);\n        assertNotNull(nnFilePaths);\n        assertEquals(10, nnFilePaths.length);\n        for (int i = 0; i < NNUtils.ALTERNATIVE_NET_DIR_NAMES.length; i++) {\n            String nameWithUpperCase = alternativeNetDirNamesWithUpperCase[i];\n            assertTrue(nnFilePaths[i].contains(sep + nameWithUpperCase + sep));\n        }\n    }", "signature": "void testGetNNFilePaths_ignoringUpperCase()", "full_signature": "@Test public void testGetNNFilePaths_ignoringUpperCase()", "class_method_signature": "NNUtilsTest.testGetNNFilePaths_ignoringUpperCase()", "testcase": true, "constructor": false, "invocations": ["resolve", "createDirectories", "resolve", "createFile", "getNNFilePaths", "assertNotNull", "assertEquals", "assertTrue", "contains"]}, "focal_class": {"identifier": "NNUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String[] ALTERNATIVE_NET_DIR_NAMES = new String[]{\n            \"rtosa_aann\",\n            \"rtosa_rw\",\n            \"rw_iop\",\n            \"iop_rw\",\n            \"rw_kd\",\n            \"iop_unciop\",\n            \"iop_uncsumiop_unckd\",\n            \"rw_rwnorm\",\n            \"rtosa_trans\",\n            \"rtosa_rpath\"\n    };", "modifier": "public static final", "type": "String[]", "declarator": "ALTERNATIVE_NET_DIR_NAMES = new String[]{\n            \"rtosa_aann\",\n            \"rtosa_rw\",\n            \"rw_iop\",\n            \"iop_rw\",\n            \"rw_kd\",\n            \"iop_unciop\",\n            \"iop_uncsumiop_unckd\",\n            \"rw_rwnorm\",\n            \"rtosa_trans\",\n            \"rtosa_rpath\"\n    }", "var_name": "ALTERNATIVE_NET_DIR_NAMES"}], "methods": [{"identifier": "getNNFilePaths", "parameters": "(Path nnRootPath, String[] alternativeNetDirNames)", "modifiers": "public static", "return": "String[]", "signature": "String[] getNNFilePaths(Path nnRootPath, String[] alternativeNetDirNames)", "full_signature": "public static String[] getNNFilePaths(Path nnRootPath, String[] alternativeNetDirNames)", "class_method_signature": "NNUtils.getNNFilePaths(Path nnRootPath, String[] alternativeNetDirNames)", "testcase": false, "constructor": false}, {"identifier": "getIgnoreCase", "parameters": "(HashSet<String> dirNames, String alternativeNetDirName)", "modifiers": "private static", "return": "String", "signature": "String getIgnoreCase(HashSet<String> dirNames, String alternativeNetDirName)", "full_signature": "private static String getIgnoreCase(HashSet<String> dirNames, String alternativeNetDirName)", "class_method_signature": "NNUtils.getIgnoreCase(HashSet<String> dirNames, String alternativeNetDirName)", "testcase": false, "constructor": false}, {"identifier": "containsIgnoreCase", "parameters": "(HashSet<String> dirNames, String alternativeNetDirName)", "modifiers": "private static", "return": "boolean", "signature": "boolean containsIgnoreCase(HashSet<String> dirNames, String alternativeNetDirName)", "full_signature": "private static boolean containsIgnoreCase(HashSet<String> dirNames, String alternativeNetDirName)", "class_method_signature": "NNUtils.containsIgnoreCase(HashSet<String> dirNames, String alternativeNetDirName)", "testcase": false, "constructor": false}], "file": "s3tbx-c2rcc/src/main/java/org/esa/s3tbx/c2rcc/util/NNUtils.java"}, "focal_method": {"identifier": "getNNFilePaths", "parameters": "(Path nnRootPath, String[] alternativeNetDirNames)", "modifiers": "public static", "return": "String[]", "body": "public static String[] getNNFilePaths(Path nnRootPath, String[] alternativeNetDirNames) throws IOException {\n        final ArrayList<String> pathsList = new ArrayList<>();\n        final String prefix = \"The path '\" + nnRootPath.toString() + \"' \";\n\n        if (!Files.isDirectory(nnRootPath)) {\n            throw new OperatorException(prefix + \"for alternative neuronal nets is not a valid path\");\n        }\n\n        final HashSet<String> dirNames = new HashSet<>();\n        Files.newDirectoryStream(nnRootPath).forEach(path -> {\n            if (Files.isDirectory(path)) {\n                dirNames.add(path.getFileName().toString());\n            }\n        });\n        for (String alternativeNetDirName : alternativeNetDirNames) {\n            if (!containsIgnoreCase(dirNames, alternativeNetDirName)) {\n                throw new OperatorException(prefix + \"does not contain the expected sub directory '\" + alternativeNetDirName + \"'\");\n            }\n            String dirName = getIgnoreCase(dirNames, alternativeNetDirName);\n            final int[] dotNetFilesCount = {0};\n            final Path nnDirPath = nnRootPath.resolve(dirName);\n            Files.newDirectoryStream(nnDirPath).forEach(path -> {\n                if (path.getFileName().toString().toLowerCase().endsWith(\".net\")\n                        && Files.isRegularFile(path)) {\n                    dotNetFilesCount[0]++;\n                    pathsList.add(path.toString());\n                }\n            });\n            int count = dotNetFilesCount[0];\n            if (count != 1) {\n                throw new OperatorException(\"The path '\" + nnDirPath + \" must contain exact 1 file with file ending '*.net', but contains \" + count);\n            }\n        }\n\n        return pathsList.toArray(new String[pathsList.size()]);\n    }", "signature": "String[] getNNFilePaths(Path nnRootPath, String[] alternativeNetDirNames)", "full_signature": "public static String[] getNNFilePaths(Path nnRootPath, String[] alternativeNetDirNames)", "class_method_signature": "NNUtils.getNNFilePaths(Path nnRootPath, String[] alternativeNetDirNames)", "testcase": false, "constructor": false, "invocations": ["toString", "isDirectory", "forEach", "newDirectoryStream", "isDirectory", "add", "toString", "getFileName", "containsIgnoreCase", "getIgnoreCase", "resolve", "forEach", "newDirectoryStream", "endsWith", "toLowerCase", "toString", "getFileName", "isRegularFile", "add", "toString", "toArray", "size"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}