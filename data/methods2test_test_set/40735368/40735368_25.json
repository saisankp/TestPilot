{"test_class": {"identifier": "IndexedFidWriterTest", "superclass": "extends FIDTestCase", "interfaces": "", "fields": [{"original_string": "private IndexFile indexFile;", "modifier": "private", "type": "IndexFile", "declarator": "indexFile", "var_name": "indexFile"}, {"original_string": "private IndexedFidWriter writer;", "modifier": "private", "type": "IndexedFidWriter", "declarator": "writer", "var_name": "writer"}], "file": "modules/plugin/shapefile/src/test/java/org/geotools/data/shapefile/fid/IndexedFidWriterTest.java"}, "test_case": {"identifier": "testWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrite() throws IOException {\n        initWriter();\n\n        for( int i = 0; i < 5; i++ ) {\n            writer.next();\n            writer.write();\n        }\n\n        initWriter();\n        for( int i = 1; i <= 5; i++ ) {\n            assertTrue(writer.hasNext());\n            assertEquals((long) i, writer.next());\n        }\n    }", "signature": "void testWrite()", "full_signature": "@Test public void testWrite()", "class_method_signature": "IndexedFidWriterTest.testWrite()", "testcase": true, "constructor": false, "invocations": ["initWriter", "next", "write", "initWriter", "assertTrue", "hasNext", "assertEquals", "next"]}, "focal_class": {"identifier": "IndexedFidWriter", "superclass": "", "interfaces": "implements FileWriter", "fields": [{"original_string": "public static final int HEADER_SIZE = 13;", "modifier": "public static final", "type": "int", "declarator": "HEADER_SIZE = 13", "var_name": "HEADER_SIZE"}, {"original_string": "public static final int RECORD_SIZE = 12;", "modifier": "public static final", "type": "int", "declarator": "RECORD_SIZE = 12", "var_name": "RECORD_SIZE"}, {"original_string": "private FileChannel channel;", "modifier": "private", "type": "FileChannel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private ByteBuffer writeBuffer;", "modifier": "private", "type": "ByteBuffer", "declarator": "writeBuffer", "var_name": "writeBuffer"}, {"original_string": "private IndexedFidReader reader;", "modifier": "private", "type": "IndexedFidReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "long fidIndex;", "modifier": "", "type": "long", "declarator": "fidIndex", "var_name": "fidIndex"}, {"original_string": "private int recordIndex;", "modifier": "private", "type": "int", "declarator": "recordIndex", "var_name": "recordIndex"}, {"original_string": "private boolean closed;", "modifier": "private", "type": "boolean", "declarator": "closed", "var_name": "closed"}, {"original_string": "private long current;", "modifier": "private", "type": "long", "declarator": "current", "var_name": "current"}, {"original_string": "private long position;", "modifier": "private", "type": "long", "declarator": "position", "var_name": "position"}, {"original_string": "private int removes;", "modifier": "private", "type": "int", "declarator": "removes", "var_name": "removes"}, {"original_string": "StreamLogging streamLogger = new StreamLogging(\"IndexedFidReader\");", "modifier": "", "type": "StreamLogging", "declarator": "streamLogger = new StreamLogging(\"IndexedFidReader\")", "var_name": "streamLogger"}, {"original_string": "private StorageFile storageFile;", "modifier": "private", "type": "StorageFile", "declarator": "storageFile", "var_name": "storageFile"}, {"original_string": "public static final IndexedFidWriter EMPTY_WRITER = new IndexedFidWriter(){\n        @Override\n        public void close() throws IOException {\n        }\n        @Override\n        public boolean hasNext() throws IOException {\n            return false;\n        }\n        @Override\n        public boolean isClosed() {\n            return false;\n        }\n        @Override\n        public void write() throws IOException {\n        }\n        @Override\n        public long next() throws IOException {\n            return 0;\n        }\n        @Override\n        public void remove() throws IOException {\n        }\n    };", "modifier": "public static final", "type": "IndexedFidWriter", "declarator": "EMPTY_WRITER = new IndexedFidWriter(){\n        @Override\n        public void close() throws IOException {\n        }\n        @Override\n        public boolean hasNext() throws IOException {\n            return false;\n        }\n        @Override\n        public boolean isClosed() {\n            return false;\n        }\n        @Override\n        public void write() throws IOException {\n        }\n        @Override\n        public long next() throws IOException {\n            return 0;\n        }\n        @Override\n        public void remove() throws IOException {\n        }\n    }", "var_name": "EMPTY_WRITER"}], "methods": [{"identifier": "IndexedFidWriter", "parameters": "( ShpFiles shpFiles )", "modifiers": "public", "return": "", "signature": " IndexedFidWriter( ShpFiles shpFiles )", "full_signature": "public  IndexedFidWriter( ShpFiles shpFiles )", "class_method_signature": "IndexedFidWriter.IndexedFidWriter( ShpFiles shpFiles )", "testcase": false, "constructor": true}, {"identifier": "IndexedFidWriter", "parameters": "( ShpFiles shpFiles, StorageFile storageFile )", "modifiers": "public", "return": "", "signature": " IndexedFidWriter( ShpFiles shpFiles, StorageFile storageFile )", "full_signature": "public  IndexedFidWriter( ShpFiles shpFiles, StorageFile storageFile )", "class_method_signature": "IndexedFidWriter.IndexedFidWriter( ShpFiles shpFiles, StorageFile storageFile )", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "( ShpFiles shpFiles, StorageFile storageFile )", "modifiers": "private", "return": "void", "signature": "void init( ShpFiles shpFiles, StorageFile storageFile )", "full_signature": "private void init( ShpFiles shpFiles, StorageFile storageFile )", "class_method_signature": "IndexedFidWriter.init( ShpFiles shpFiles, StorageFile storageFile )", "testcase": false, "constructor": false}, {"identifier": "IndexedFidWriter", "parameters": "()", "modifiers": "private", "return": "", "signature": " IndexedFidWriter()", "full_signature": "private  IndexedFidWriter()", "class_method_signature": "IndexedFidWriter.IndexedFidWriter()", "testcase": false, "constructor": true}, {"identifier": "allocateBuffers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void allocateBuffers()", "full_signature": "private void allocateBuffers()", "class_method_signature": "IndexedFidWriter.allocateBuffers()", "testcase": false, "constructor": false}, {"identifier": "drain", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void drain()", "full_signature": "private void drain()", "class_method_signature": "IndexedFidWriter.drain()", "testcase": false, "constructor": false}, {"identifier": "writeHeader", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void writeHeader()", "full_signature": "private void writeHeader()", "class_method_signature": "IndexedFidWriter.writeHeader()", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "public boolean hasNext()", "class_method_signature": "IndexedFidWriter.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long next()", "full_signature": "public long next()", "class_method_signature": "IndexedFidWriter.next()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "IndexedFidWriter.close()", "testcase": false, "constructor": false}, {"identifier": "closeWriterChannels", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeWriterChannels()", "full_signature": "private void closeWriterChannels()", "class_method_signature": "IndexedFidWriter.closeWriterChannels()", "testcase": false, "constructor": false}, {"identifier": "finishLastWrite", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void finishLastWrite()", "full_signature": "private void finishLastWrite()", "class_method_signature": "IndexedFidWriter.finishLastWrite()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void remove()", "full_signature": "public void remove()", "class_method_signature": "IndexedFidWriter.remove()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void write()", "full_signature": "public void write()", "class_method_signature": "IndexedFidWriter.write()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "IndexedFidWriter.isClosed()", "testcase": false, "constructor": false}, {"identifier": "id", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String id()", "full_signature": "public String id()", "class_method_signature": "IndexedFidWriter.id()", "testcase": false, "constructor": false}], "file": "modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/fid/IndexedFidWriter.java"}, "focal_method": {"identifier": "write", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void write() throws IOException {\n        if (current == -1)\n            throw new IOException(\"Current fid index is null, next must be called before write()\");\n\n        if (writeBuffer == null) {\n            allocateBuffers();\n        }\n\n        if (writeBuffer.remaining() < RECORD_SIZE) {\n            drain();\n        }\n\n        writeBuffer.putLong(current);\n        writeBuffer.putInt(recordIndex);\n\n        recordIndex++;\n        current = -1;\n    }", "signature": "void write()", "full_signature": "public void write()", "class_method_signature": "IndexedFidWriter.write()", "testcase": false, "constructor": false, "invocations": ["allocateBuffers", "remaining", "drain", "putLong", "putInt"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}