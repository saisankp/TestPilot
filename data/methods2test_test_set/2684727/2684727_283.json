{"test_class": {"identifier": "TripForeignKeyAbstractTableControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TripForeignKeyAbstractTableController<KeyedObject> mAbstractTableController;", "modifier": "", "type": "TripForeignKeyAbstractTableController<KeyedObject>", "declarator": "mAbstractTableController", "var_name": "mAbstractTableController"}, {"original_string": "@Mock\n    TripForeignKeyAbstractSqlTable<KeyedObject> mTable;", "modifier": "@Mock", "type": "TripForeignKeyAbstractSqlTable<KeyedObject>", "declarator": "mTable", "var_name": "mTable"}, {"original_string": "@Mock\n    Trip mTrip;", "modifier": "@Mock", "type": "Trip", "declarator": "mTrip", "var_name": "mTrip"}, {"original_string": "@Mock\n    TableActionAlterations<KeyedObject> mTableActionAlterations;", "modifier": "@Mock", "type": "TableActionAlterations<KeyedObject>", "declarator": "mTableActionAlterations", "var_name": "mTableActionAlterations"}, {"original_string": "@Mock\n    Analytics mAnalytics;", "modifier": "@Mock", "type": "Analytics", "declarator": "mAnalytics", "var_name": "mAnalytics"}, {"original_string": "@Mock\n    TripForeignKeyTableEventsListener<KeyedObject> mListener1;", "modifier": "@Mock", "type": "TripForeignKeyTableEventsListener<KeyedObject>", "declarator": "mListener1", "var_name": "mListener1"}, {"original_string": "@Mock\n    TripForeignKeyTableEventsListener<KeyedObject> mListener2;", "modifier": "@Mock", "type": "TripForeignKeyTableEventsListener<KeyedObject>", "declarator": "mListener2", "var_name": "mListener2"}, {"original_string": "@Mock\n    TripForeignKeyTableEventsListener<KeyedObject> mListener3;", "modifier": "@Mock", "type": "TripForeignKeyTableEventsListener<KeyedObject>", "declarator": "mListener3", "var_name": "mListener3"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/controllers/impl/TripForeignKeyAbstractTableControllerTest.java"}, "test_case": {"identifier": "onInsertException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onInsertException() throws Exception {\n        final KeyedObject insertItem = new KeyedObject();\n        final Exception e = new Exception();\n        final DatabaseOperationMetadata databaseOperationMetadata = new DatabaseOperationMetadata();\n        when(mTableActionAlterations.preInsert(insertItem)).thenReturn(Single.just(insertItem));\n        when(mTable.insert(insertItem, databaseOperationMetadata)).thenReturn(Single.error(e));\n        when(mTableActionAlterations.postInsert(insertItem)).thenReturn(Single.just(insertItem));\n\n        mAbstractTableController.unsubscribe(mListener2);\n        mAbstractTableController.insert(insertItem, databaseOperationMetadata);\n\n        verify(mAnalytics).record(any(ErrorEvent.class));\n        verify(mListener1).onInsertFailure(insertItem, e, databaseOperationMetadata);\n        verify(mListener3).onInsertFailure(insertItem, e, databaseOperationMetadata);\n        verifyZeroInteractions(mListener2);\n    }", "signature": "void onInsertException()", "full_signature": "@Test public void onInsertException()", "class_method_signature": "TripForeignKeyAbstractTableControllerTest.onInsertException()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "preInsert", "just", "thenReturn", "when", "insert", "error", "thenReturn", "when", "postInsert", "just", "unsubscribe", "insert", "record", "verify", "any", "onInsertFailure", "verify", "onInsertFailure", "verify", "verifyZeroInteractions"]}, "focal_class": {"identifier": "TripForeignKeyAbstractTableController", "superclass": "extends AbstractTableController<ModelType>", "interfaces": "", "fields": [{"original_string": "private final ConcurrentHashMap<TripForeignKeyTableEventsListener<ModelType>, BridgingTripForeignKeyTableEventsListener<ModelType>> mBridgingTableEventsListeners = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentHashMap<TripForeignKeyTableEventsListener<ModelType>, BridgingTripForeignKeyTableEventsListener<ModelType>>", "declarator": "mBridgingTableEventsListeners = new ConcurrentHashMap<>()", "var_name": "mBridgingTableEventsListeners"}, {"original_string": "private final CopyOnWriteArrayList<TripForeignKeyTableEventsListener<ModelType>> mForeignTableEventsListeners = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "CopyOnWriteArrayList<TripForeignKeyTableEventsListener<ModelType>>", "declarator": "mForeignTableEventsListeners = new CopyOnWriteArrayList<>()", "var_name": "mForeignTableEventsListeners"}, {"original_string": "protected final TripForeignKeyAbstractSqlTable<ModelType> mTripForeignKeyTable;", "modifier": "protected final", "type": "TripForeignKeyAbstractSqlTable<ModelType>", "declarator": "mTripForeignKeyTable", "var_name": "mTripForeignKeyTable"}, {"original_string": "private final Subject<ForeignKeyGetResult<ModelType>> foreignKeyGetStreamSubject = PublishSubject.<ForeignKeyGetResult<ModelType>>create().toSerialized();", "modifier": "private final", "type": "Subject<ForeignKeyGetResult<ModelType>>", "declarator": "foreignKeyGetStreamSubject = PublishSubject.<ForeignKeyGetResult<ModelType>>create().toSerialized()", "var_name": "foreignKeyGetStreamSubject"}], "methods": [{"identifier": "TripForeignKeyAbstractTableController", "parameters": "(@NonNull TripForeignKeyAbstractSqlTable<ModelType> table, @NonNull Analytics analytics)", "modifiers": "public", "return": "", "signature": " TripForeignKeyAbstractTableController(@NonNull TripForeignKeyAbstractSqlTable<ModelType> table, @NonNull Analytics analytics)", "full_signature": "public  TripForeignKeyAbstractTableController(@NonNull TripForeignKeyAbstractSqlTable<ModelType> table, @NonNull Analytics analytics)", "class_method_signature": "TripForeignKeyAbstractTableController.TripForeignKeyAbstractTableController(@NonNull TripForeignKeyAbstractSqlTable<ModelType> table, @NonNull Analytics analytics)", "testcase": false, "constructor": true}, {"identifier": "TripForeignKeyAbstractTableController", "parameters": "(@NonNull TripForeignKeyAbstractSqlTable<ModelType> table, @NonNull TableActionAlterations<ModelType> tableActionAlterations, @NonNull Analytics analytics)", "modifiers": "public", "return": "", "signature": " TripForeignKeyAbstractTableController(@NonNull TripForeignKeyAbstractSqlTable<ModelType> table, @NonNull TableActionAlterations<ModelType> tableActionAlterations, @NonNull Analytics analytics)", "full_signature": "public  TripForeignKeyAbstractTableController(@NonNull TripForeignKeyAbstractSqlTable<ModelType> table, @NonNull TableActionAlterations<ModelType> tableActionAlterations, @NonNull Analytics analytics)", "class_method_signature": "TripForeignKeyAbstractTableController.TripForeignKeyAbstractTableController(@NonNull TripForeignKeyAbstractSqlTable<ModelType> table, @NonNull TableActionAlterations<ModelType> tableActionAlterations, @NonNull Analytics analytics)", "testcase": false, "constructor": true}, {"identifier": "TripForeignKeyAbstractTableController", "parameters": "(@NonNull TripForeignKeyAbstractSqlTable<ModelType> table, @NonNull TableActionAlterations<ModelType> tableActionAlterations, @NonNull Analytics analytics, @NonNull Scheduler subscribeOnScheduler, @NonNull Scheduler observeOnScheduler)", "modifiers": "", "return": "", "signature": " TripForeignKeyAbstractTableController(@NonNull TripForeignKeyAbstractSqlTable<ModelType> table, @NonNull TableActionAlterations<ModelType> tableActionAlterations, @NonNull Analytics analytics, @NonNull Scheduler subscribeOnScheduler, @NonNull Scheduler observeOnScheduler)", "full_signature": "  TripForeignKeyAbstractTableController(@NonNull TripForeignKeyAbstractSqlTable<ModelType> table, @NonNull TableActionAlterations<ModelType> tableActionAlterations, @NonNull Analytics analytics, @NonNull Scheduler subscribeOnScheduler, @NonNull Scheduler observeOnScheduler)", "class_method_signature": "TripForeignKeyAbstractTableController.TripForeignKeyAbstractTableController(@NonNull TripForeignKeyAbstractSqlTable<ModelType> table, @NonNull TableActionAlterations<ModelType> tableActionAlterations, @NonNull Analytics analytics, @NonNull Scheduler subscribeOnScheduler, @NonNull Scheduler observeOnScheduler)", "testcase": false, "constructor": true}, {"identifier": "subscribe", "parameters": "(@NonNull TableEventsListener<ModelType> tableEventsListener)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void subscribe(@NonNull TableEventsListener<ModelType> tableEventsListener)", "full_signature": "@Override public synchronized void subscribe(@NonNull TableEventsListener<ModelType> tableEventsListener)", "class_method_signature": "TripForeignKeyAbstractTableController.subscribe(@NonNull TableEventsListener<ModelType> tableEventsListener)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "(@NonNull TableEventsListener<ModelType> tableEventsListener)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void unsubscribe(@NonNull TableEventsListener<ModelType> tableEventsListener)", "full_signature": "@Override public synchronized void unsubscribe(@NonNull TableEventsListener<ModelType> tableEventsListener)", "class_method_signature": "TripForeignKeyAbstractTableController.unsubscribe(@NonNull TableEventsListener<ModelType> tableEventsListener)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@NonNull Trip trip)", "modifiers": "public synchronized", "return": "Single<List<ModelType>>", "signature": "Single<List<ModelType>> get(@NonNull Trip trip)", "full_signature": "public synchronized Single<List<ModelType>> get(@NonNull Trip trip)", "class_method_signature": "TripForeignKeyAbstractTableController.get(@NonNull Trip trip)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@NonNull final Trip trip, final  boolean isDescending)", "modifiers": "public synchronized", "return": "Single<List<ModelType>>", "signature": "Single<List<ModelType>> get(@NonNull final Trip trip, final  boolean isDescending)", "full_signature": "public synchronized Single<List<ModelType>> get(@NonNull final Trip trip, final  boolean isDescending)", "class_method_signature": "TripForeignKeyAbstractTableController.get(@NonNull final Trip trip, final  boolean isDescending)", "testcase": false, "constructor": false}, {"identifier": "getForeignKeyGetStream", "parameters": "()", "modifiers": "@NonNull public", "return": "Observable<ForeignKeyGetResult<ModelType>>", "signature": "Observable<ForeignKeyGetResult<ModelType>> getForeignKeyGetStream()", "full_signature": "@NonNull public Observable<ForeignKeyGetResult<ModelType>> getForeignKeyGetStream()", "class_method_signature": "TripForeignKeyAbstractTableController.getForeignKeyGetStream()", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/controllers/impl/TripForeignKeyAbstractTableController.java"}, "focal_method": {"identifier": "unsubscribe", "parameters": "(@NonNull TableEventsListener<ModelType> tableEventsListener)", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n    public synchronized void unsubscribe(@NonNull TableEventsListener<ModelType> tableEventsListener) {\n        if (tableEventsListener instanceof TripForeignKeyTableEventsListener) {\n            final TripForeignKeyTableEventsListener<ModelType> tripForeignKeyTableEventsListener = (TripForeignKeyTableEventsListener<ModelType>) tableEventsListener;\n            mForeignTableEventsListeners.remove(tripForeignKeyTableEventsListener);\n            final BridgingTripForeignKeyTableEventsListener<ModelType> bridge = mBridgingTableEventsListeners.remove(tripForeignKeyTableEventsListener);\n            if (bridge != null) {\n                bridge.unsubscribe();\n            }\n        } else {\n            super.unsubscribe(tableEventsListener);\n        }\n    }", "signature": "void unsubscribe(@NonNull TableEventsListener<ModelType> tableEventsListener)", "full_signature": "@Override public synchronized void unsubscribe(@NonNull TableEventsListener<ModelType> tableEventsListener)", "class_method_signature": "TripForeignKeyAbstractTableController.unsubscribe(@NonNull TableEventsListener<ModelType> tableEventsListener)", "testcase": false, "constructor": false, "invocations": ["remove", "remove", "unsubscribe", "unsubscribe"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}