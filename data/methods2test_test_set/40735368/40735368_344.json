{"test_class": {"identifier": "WFSExtensionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/unsupported/wfs/src/test/java/org/geotools/data/wfs/protocol/wfs/WFSExtensionsTest.java"}, "test_case": {"identifier": "testFindParserFactory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindParserFactory() {\n        GetFeatureType request = WfsFactory.eINSTANCE.createGetFeatureType();\n        request.setOutputFormat(\"application/fakeFormat\");\n        WFSResponseParserFactory factory = WFSExtensions.findParserFactory(request);\n        assertNotNull(factory);\n        assertTrue(factory instanceof TestParserFactory);\n    }", "signature": "void testFindParserFactory()", "full_signature": "@Test public void testFindParserFactory()", "class_method_signature": "WFSExtensionsTest.testFindParserFactory()", "testcase": true, "constructor": false, "invocations": ["createGetFeatureType", "setOutputFormat", "findParserFactory", "assertNotNull", "assertTrue"]}, "focal_class": {"identifier": "WFSExtensions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Set<WFSResponseParserFactory> registry;", "modifier": "private static", "type": "Set<WFSResponseParserFactory>", "declarator": "registry", "var_name": "registry"}], "methods": [{"identifier": "process", "parameters": "(WFS_1_1_0_DataStore wfs, WFSResponse response,\n            Map<String, String> mappedURIs)", "modifiers": "public static", "return": "Object", "signature": "Object process(WFS_1_1_0_DataStore wfs, WFSResponse response,\n            Map<String, String> mappedURIs)", "full_signature": "public static Object process(WFS_1_1_0_DataStore wfs, WFSResponse response,\n            Map<String, String> mappedURIs)", "class_method_signature": "WFSExtensions.process(WFS_1_1_0_DataStore wfs, WFSResponse response,\n            Map<String, String> mappedURIs)", "testcase": false, "constructor": false}, {"identifier": "findParserFactory", "parameters": "(EObject request)", "modifiers": "static", "return": "WFSResponseParserFactory", "signature": "WFSResponseParserFactory findParserFactory(EObject request)", "full_signature": "static WFSResponseParserFactory findParserFactory(EObject request)", "class_method_signature": "WFSExtensions.findParserFactory(EObject request)", "testcase": false, "constructor": false}, {"identifier": "getServiceProviders", "parameters": "()", "modifiers": "private static", "return": "Iterator<WFSResponseParserFactory>", "signature": "Iterator<WFSResponseParserFactory> getServiceProviders()", "full_signature": "private static Iterator<WFSResponseParserFactory> getServiceProviders()", "class_method_signature": "WFSExtensions.getServiceProviders()", "testcase": false, "constructor": false}], "file": "modules/unsupported/wfs/src/main/java/org/geotools/data/wfs/protocol/wfs/WFSExtensions.java"}, "focal_method": {"identifier": "findParserFactory", "parameters": "(EObject request)", "modifiers": "static", "return": "WFSResponseParserFactory", "body": "static WFSResponseParserFactory findParserFactory(EObject request) {\n        Iterator<WFSResponseParserFactory> serviceProviders;\n        serviceProviders = getServiceProviders();\n\n        WFSResponseParserFactory factory;\n        while (serviceProviders.hasNext()) {\n            factory = serviceProviders.next();\n            if (factory.isAvailable()) {\n                if (factory.canProcess(request)) {\n                    return factory;\n                }\n            }\n        }\n        throw new FactoryNotFoundException(\"Can't find a response parser factory for \" + request);\n    }", "signature": "WFSResponseParserFactory findParserFactory(EObject request)", "full_signature": "static WFSResponseParserFactory findParserFactory(EObject request)", "class_method_signature": "WFSExtensions.findParserFactory(EObject request)", "testcase": false, "constructor": false, "invocations": ["getServiceProviders", "hasNext", "next", "isAvailable", "canProcess"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}