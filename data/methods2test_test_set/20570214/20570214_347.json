{"test_class": {"identifier": "RsaKemHybridEncryptTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "private static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}], "file": "java_src/src/test/java/com/google/crypto/tink/hybrid/subtle/RsaKemHybridEncryptTest.java"}, "test_case": {"identifier": "encrypt_decrypt_success", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void encrypt_decrypt_success() throws GeneralSecurityException {\n    if (TestUtil.isTsan()) {\n      // RsaKem.generateRsaKeyPair is too slow in Tsan.\n      return;\n    }\n    KeyPair keyPair = RsaKem.generateRsaKeyPair(2048);\n    String hmacAlgo = \"HMACSHA256\";\n    byte[] salt = Random.randBytes(20);\n\n    RSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();\n    HybridEncrypt hybridEncrypt =\n        new RsaKemHybridEncrypt(rsaPublicKey, hmacAlgo, salt, new AesGcmFactory(16));\n\n    RSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();\n    HybridDecrypt hybridDecrypt =\n        new RsaKemHybridDecrypt(rsaPrivateKey, hmacAlgo, salt, new AesGcmFactory(16));\n\n    byte[] plaintext = Random.randBytes(20);\n    byte[] context = Random.randBytes(20);\n\n    // Makes sure that the encryption is randomized.\n    Set<String> ciphertexts = new TreeSet<>();\n    for (int j = 0; j < 8; j++) {\n      byte[] ciphertext = hybridEncrypt.encrypt(plaintext, context);\n      if (ciphertexts.contains(new String(ciphertext, UTF_8))) {\n        throw new GeneralSecurityException(\"Encryption is not randomized\");\n      }\n      ciphertexts.add(new String(ciphertext, UTF_8));\n      byte[] decrypted = hybridDecrypt.decrypt(ciphertext, context);\n      assertArrayEquals(plaintext, decrypted);\n    }\n    assertThat(ciphertexts).hasSize(8);\n  }", "signature": "void encrypt_decrypt_success()", "full_signature": "@Test public void encrypt_decrypt_success()", "class_method_signature": "RsaKemHybridEncryptTest.encrypt_decrypt_success()", "testcase": true, "constructor": false, "invocations": ["isTsan", "generateRsaKeyPair", "randBytes", "getPublic", "getPrivate", "randBytes", "randBytes", "encrypt", "contains", "add", "decrypt", "assertArrayEquals", "hasSize", "assertThat"]}, "focal_class": {"identifier": "RsaKemHybridEncrypt", "superclass": "", "interfaces": "implements HybridEncrypt", "fields": [{"original_string": "private final RSAPublicKey recipientPublicKey;", "modifier": "private final", "type": "RSAPublicKey", "declarator": "recipientPublicKey", "var_name": "recipientPublicKey"}, {"original_string": "private final String hkdfHmacAlgo;", "modifier": "private final", "type": "String", "declarator": "hkdfHmacAlgo", "var_name": "hkdfHmacAlgo"}, {"original_string": "private final byte[] hkdfSalt;", "modifier": "private final", "type": "byte[]", "declarator": "hkdfSalt", "var_name": "hkdfSalt"}, {"original_string": "private final AeadFactory aeadFactory;", "modifier": "private final", "type": "AeadFactory", "declarator": "aeadFactory", "var_name": "aeadFactory"}], "methods": [{"identifier": "RsaKemHybridEncrypt", "parameters": "(\n      final RSAPublicKey recipientPublicKey,\n      String hkdfHmacAlgo,\n      final byte[] hkdfSalt,\n      AeadFactory aeadFactory)", "modifiers": "public", "return": "", "signature": " RsaKemHybridEncrypt(\n      final RSAPublicKey recipientPublicKey,\n      String hkdfHmacAlgo,\n      final byte[] hkdfSalt,\n      AeadFactory aeadFactory)", "full_signature": "public  RsaKemHybridEncrypt(\n      final RSAPublicKey recipientPublicKey,\n      String hkdfHmacAlgo,\n      final byte[] hkdfSalt,\n      AeadFactory aeadFactory)", "class_method_signature": "RsaKemHybridEncrypt.RsaKemHybridEncrypt(\n      final RSAPublicKey recipientPublicKey,\n      String hkdfHmacAlgo,\n      final byte[] hkdfSalt,\n      AeadFactory aeadFactory)", "testcase": false, "constructor": true}, {"identifier": "encrypt", "parameters": "(final byte[] plaintext, final byte[] contextInfo)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] encrypt(final byte[] plaintext, final byte[] contextInfo)", "full_signature": "@Override public byte[] encrypt(final byte[] plaintext, final byte[] contextInfo)", "class_method_signature": "RsaKemHybridEncrypt.encrypt(final byte[] plaintext, final byte[] contextInfo)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/hybrid/subtle/RsaKemHybridEncrypt.java"}, "focal_method": {"identifier": "encrypt", "parameters": "(final byte[] plaintext, final byte[] contextInfo)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n  public byte[] encrypt(final byte[] plaintext, final byte[] contextInfo)\n      throws GeneralSecurityException {\n    // KEM: generate a random shared secret whose bit length is equal to the modulus'.\n    BigInteger mod = recipientPublicKey.getModulus();\n    byte[] sharedSecret = RsaKem.generateSecret(mod);\n\n    // KEM: encrypt the shared secret using the public key.\n    Cipher rsaCipher = Cipher.getInstance(\"RSA/ECB/NoPadding\");\n    rsaCipher.init(Cipher.ENCRYPT_MODE, recipientPublicKey);\n    byte[] token = rsaCipher.doFinal(sharedSecret);\n\n    // KDF: derive a DEM key from the shared secret, salt, and contextInfo.\n    byte[] demKey =\n        Hkdf.computeHkdf(\n            hkdfHmacAlgo, sharedSecret, hkdfSalt, contextInfo, aeadFactory.getKeySizeInBytes());\n\n    Aead aead = aeadFactory.createAead(demKey);\n    byte[] ciphertext = aead.encrypt(plaintext, RsaKem.EMPTY_AAD);\n    return ByteBuffer.allocate(token.length + ciphertext.length).put(token).put(ciphertext).array();\n  }", "signature": "byte[] encrypt(final byte[] plaintext, final byte[] contextInfo)", "full_signature": "@Override public byte[] encrypt(final byte[] plaintext, final byte[] contextInfo)", "class_method_signature": "RsaKemHybridEncrypt.encrypt(final byte[] plaintext, final byte[] contextInfo)", "testcase": false, "constructor": false, "invocations": ["getModulus", "generateSecret", "getInstance", "init", "doFinal", "computeHkdf", "getKeySizeInBytes", "createAead", "encrypt", "array", "put", "put", "allocate"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}