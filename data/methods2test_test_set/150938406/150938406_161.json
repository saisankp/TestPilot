{"test_class": {"identifier": "LongMatrixTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LongMatrix longMatrix = new LongMatrix(new long[][]{{5, 1, 2}, {1, 4, 0}});", "modifier": "private", "type": "LongMatrix", "declarator": "longMatrix = new LongMatrix(new long[][]{{5, 1, 2}, {1, 4, 0}})", "var_name": "longMatrix"}], "file": "core/src/test/java/com/alibaba/alink/operator/common/evaluation/LongMatrixTest.java"}, "test_case": {"identifier": "plusEqual", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void plusEqual() {\n        longMatrix.plusEqual(longMatrix);\n        Assert.assertEquals(longMatrix.getTotal(), 26L);\n    }", "signature": "void plusEqual()", "full_signature": "@Test public void plusEqual()", "class_method_signature": "LongMatrixTest.plusEqual()", "testcase": true, "constructor": false, "invocations": ["plusEqual", "assertEquals", "getTotal"]}, "focal_class": {"identifier": "LongMatrix", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private long[][] matrix;", "modifier": "private", "type": "long[][]", "declarator": "matrix", "var_name": "matrix"}, {"original_string": "private int rowNum;", "modifier": "private", "type": "int", "declarator": "rowNum", "var_name": "rowNum"}, {"original_string": "private int colNum;", "modifier": "private", "type": "int", "declarator": "colNum", "var_name": "colNum"}], "methods": [{"identifier": "LongMatrix", "parameters": "(long[][] matrix)", "modifiers": "public", "return": "", "signature": " LongMatrix(long[][] matrix)", "full_signature": "public  LongMatrix(long[][] matrix)", "class_method_signature": "LongMatrix.LongMatrix(long[][] matrix)", "testcase": false, "constructor": true}, {"identifier": "getMatrix", "parameters": "()", "modifiers": "public", "return": "long[][]", "signature": "long[][] getMatrix()", "full_signature": "public long[][] getMatrix()", "class_method_signature": "LongMatrix.getMatrix()", "testcase": false, "constructor": false}, {"identifier": "getRowNum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowNum()", "full_signature": "public int getRowNum()", "class_method_signature": "LongMatrix.getRowNum()", "testcase": false, "constructor": false}, {"identifier": "getColNum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getColNum()", "full_signature": "public int getColNum()", "class_method_signature": "LongMatrix.getColNum()", "testcase": false, "constructor": false}, {"identifier": "plusEqual", "parameters": "(LongMatrix other)", "modifiers": "public", "return": "void", "signature": "void plusEqual(LongMatrix other)", "full_signature": "public void plusEqual(LongMatrix other)", "class_method_signature": "LongMatrix.plusEqual(LongMatrix other)", "testcase": false, "constructor": false}, {"identifier": "getRowSums", "parameters": "()", "modifiers": "public", "return": "long[]", "signature": "long[] getRowSums()", "full_signature": "public long[] getRowSums()", "class_method_signature": "LongMatrix.getRowSums()", "testcase": false, "constructor": false}, {"identifier": "getColSums", "parameters": "()", "modifiers": "public", "return": "long[]", "signature": "long[] getColSums()", "full_signature": "public long[] getColSums()", "class_method_signature": "LongMatrix.getColSums()", "testcase": false, "constructor": false}, {"identifier": "getTotal", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTotal()", "full_signature": "public long getTotal()", "class_method_signature": "LongMatrix.getTotal()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(int i, int j)", "modifiers": "public", "return": "long", "signature": "long getValue(int i, int j)", "full_signature": "public long getValue(int i, int j)", "class_method_signature": "LongMatrix.getValue(int i, int j)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(int i, int j, long value)", "modifiers": "public", "return": "void", "signature": "void setValue(int i, int j, long value)", "full_signature": "public void setValue(int i, int j, long value)", "class_method_signature": "LongMatrix.setValue(int i, int j, long value)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/evaluation/LongMatrix.java"}, "focal_method": {"identifier": "plusEqual", "parameters": "(LongMatrix other)", "modifiers": "public", "return": "void", "body": "public void plusEqual(LongMatrix other) {\n        Preconditions.checkArgument(other.rowNum == rowNum && other.colNum == colNum,\n            \"Matrix size not the same! The rowNums are {},{}; the colNums are {},{}.\", rowNum, other.rowNum, colNum,\n            other.colNum);\n        for (int i = 0; i < rowNum; i++) {\n            for (int j = 0; j < colNum; j++) {\n                matrix[i][j] += other.matrix[i][j];\n            }\n        }\n    }", "signature": "void plusEqual(LongMatrix other)", "full_signature": "public void plusEqual(LongMatrix other)", "class_method_signature": "LongMatrix.plusEqual(LongMatrix other)", "testcase": false, "constructor": false, "invocations": ["checkArgument"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}