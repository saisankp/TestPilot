{"test_class": {"identifier": "InputsMappingFileVariableResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InputsMappingFileVariableResolverConfigured inputsMappingFileVariableResolverConfigured;", "modifier": "private", "type": "InputsMappingFileVariableResolverConfigured", "declarator": "inputsMappingFileVariableResolverConfigured", "var_name": "inputsMappingFileVariableResolverConfigured"}, {"original_string": "private Map<String, PropertyDefinition> inputsPropertyDefinitions;", "modifier": "private", "type": "Map<String, PropertyDefinition>", "declarator": "inputsPropertyDefinitions", "var_name": "inputsPropertyDefinitions"}], "file": "alien4cloud-core/src/test/java/org/alien4cloud/tosca/variable/InputsMappingFileVariableResolverTest.java"}, "test_case": {"identifier": "should_list_all_missing_variables_and_unresolved_inputs", "parameters": "()", "modifiers": "@Test // Good Test public", "return": "void", "body": "@Test\n    // Good Test\n    public void should_list_all_missing_variables_and_unresolved_inputs() throws Exception {\n        Resource yamlApp = new FileSystemResource(\"src/test/resources/alien/variables/variables_app_missing_var.yml\");\n        inputsMappingFileVariableResolverConfigured = configure(\n                PropertiesYamlParser.ToProperties.from(yamlApp),\n                PropertiesYamlParser.ToProperties.from(yamlApp),\n                PropertiesYamlParser.ToProperties.from(yamlApp),\n                new AlienContextVariables());\n\n        Resource inputsMapping = new FileSystemResource(\"src/test/resources/alien/variables/inputs_mapping_with_missing_variable.yml\");\n\n        InputsMappingFileVariableResolver.InputsResolvingResult result = inputsMappingFileVariableResolverConfigured\n                .resolve(PropertiesYamlParser.ToMap.from(inputsMapping), inputsPropertyDefinitions);\n\n        assertThat(result.getMissingVariables()).hasSize(4);\n        assertThat(result.getMissingVariables()).contains(\"missing_inner_variable\", \"missing_float_variable\", \"missing_string_variable\",\n                \"missing_int_variable\");\n\n        assertThat(result.getUnresolved()).hasSize(4);\n        assertThat(result.getUnresolved()).contains(\"int_input\", \"float_input\", \"string_input\", \"complex_input\");\n    }", "signature": "void should_list_all_missing_variables_and_unresolved_inputs()", "full_signature": "@Test // Good Test public void should_list_all_missing_variables_and_unresolved_inputs()", "class_method_signature": "InputsMappingFileVariableResolverTest.should_list_all_missing_variables_and_unresolved_inputs()", "testcase": true, "constructor": false, "invocations": ["configure", "from", "from", "from", "resolve", "from", "hasSize", "assertThat", "getMissingVariables", "contains", "assertThat", "getMissingVariables", "hasSize", "assertThat", "getUnresolved", "contains", "assertThat", "getUnresolved"]}, "focal_class": {"identifier": "InputsMappingFileVariableResolver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Pattern VARIABLE_NAME_IN_EXCEPTION_PATTERN = Pattern.compile(\"Could not resolve placeholder '(.*)' .*\", Pattern.DOTALL);", "modifier": "private final static", "type": "Pattern", "declarator": "VARIABLE_NAME_IN_EXCEPTION_PATTERN = Pattern.compile(\"Could not resolve placeholder '(.*)' .*\", Pattern.DOTALL)", "var_name": "VARIABLE_NAME_IN_EXCEPTION_PATTERN"}, {"original_string": "private final static ToscaTypeConverter DEFAULT_CONVERTER = new ToscaTypeConverter(ToscaContext::get);", "modifier": "private final static", "type": "ToscaTypeConverter", "declarator": "DEFAULT_CONVERTER = new ToscaTypeConverter(ToscaContext::get)", "var_name": "DEFAULT_CONVERTER"}], "methods": [{"identifier": "InputsMappingFileVariableResolver", "parameters": "()", "modifiers": "private", "return": "", "signature": " InputsMappingFileVariableResolver()", "full_signature": "private  InputsMappingFileVariableResolver()", "class_method_signature": "InputsMappingFileVariableResolver.InputsMappingFileVariableResolver()", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables)", "modifiers": "public static", "return": "InputsMappingFileVariableResolverConfigured", "signature": "InputsMappingFileVariableResolverConfigured configure(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables)", "full_signature": "public static InputsMappingFileVariableResolverConfigured configure(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables)", "class_method_signature": "InputsMappingFileVariableResolver.configure(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/org/alien4cloud/tosca/variable/InputsMappingFileVariableResolver.java"}, "focal_method": {"identifier": "configure", "parameters": "(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables)", "modifiers": "public static", "return": "InputsMappingFileVariableResolverConfigured", "body": "public static InputsMappingFileVariableResolverConfigured configure(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables) {\n        return new InputsMappingFileVariableResolverConfigured(appVariables, envTypeVariables, envVariables, alienContextVariables);\n    }", "signature": "InputsMappingFileVariableResolverConfigured configure(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables)", "full_signature": "public static InputsMappingFileVariableResolverConfigured configure(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables)", "class_method_signature": "InputsMappingFileVariableResolver.configure(Properties appVariables, Properties envTypeVariables, Properties envVariables, AlienContextVariables alienContextVariables)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}