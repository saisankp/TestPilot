{"test_class": {"identifier": "MathUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DELTA = 0.0001;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 0.0001", "var_name": "DELTA"}], "file": "dhis-2/dhis-support/dhis-support-system/src/test/java/org/hisp/dhis/system/util/MathUtilsTest.java"}, "test_case": {"identifier": "testIsNegativeInteger", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsNegativeInteger()\n    {\n        assertTrue( MathUtils.isNegativeInteger( \"-1\" ) );\n        assertTrue( MathUtils.isNegativeInteger( \"-123\" ) );\n\n        assertFalse( MathUtils.isNegativeInteger( \"0\" ) );\n        assertFalse( MathUtils.isNegativeInteger( \"+2\" ) );\n        assertFalse( MathUtils.isNegativeInteger( \"2\" ) );\n        assertFalse( MathUtils.isNegativeInteger( \"2232\" ) );\n        assertFalse( MathUtils.isNegativeInteger( \"2.17\" ) );\n        assertFalse( MathUtils.isNegativeInteger( \"1.1\" ) );\n        assertFalse( MathUtils.isNegativeInteger( \"-0\" ) );\n        assertFalse( MathUtils.isNegativeInteger( \"Hey\" ) );\n        assertFalse( MathUtils.isNegativeInteger( \"2 \" ) );\n        assertFalse( MathUtils.isNegativeInteger( \"6.1345\" ) );\n    }", "signature": "void testIsNegativeInteger()", "full_signature": "@Test public void testIsNegativeInteger()", "class_method_signature": "MathUtilsTest.testIsNegativeInteger()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isNegativeInteger", "assertTrue", "isNegativeInteger", "assertFalse", "isNegativeInteger", "assertFalse", "isNegativeInteger", "assertFalse", "isNegativeInteger", "assertFalse", "isNegativeInteger", "assertFalse", "isNegativeInteger", "assertFalse", "isNegativeInteger", "assertFalse", "isNegativeInteger", "assertFalse", "isNegativeInteger", "assertFalse", "isNegativeInteger", "assertFalse", "isNegativeInteger"]}, "focal_class": {"identifier": "MathUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Double ZERO = new Double( 0 );", "modifier": "public static final", "type": "Double", "declarator": "ZERO = new Double( 0 )", "var_name": "ZERO"}, {"original_string": "private static final Locale LOCALE = new Locale( \"en\" );", "modifier": "private static final", "type": "Locale", "declarator": "LOCALE = new Locale( \"en\" )", "var_name": "LOCALE"}, {"original_string": "private static DoubleValidator DOUBLE_VALIDATOR = new DoubleValidator();", "modifier": "private static", "type": "DoubleValidator", "declarator": "DOUBLE_VALIDATOR = new DoubleValidator()", "var_name": "DOUBLE_VALIDATOR"}, {"original_string": "private static IntegerValidator INT_VALIDATOR = new IntegerValidator();", "modifier": "private static", "type": "IntegerValidator", "declarator": "INT_VALIDATOR = new IntegerValidator()", "var_name": "INT_VALIDATOR"}, {"original_string": "private static final double TOLERANCE = 0.01;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.01", "var_name": "TOLERANCE"}, {"original_string": "private static final int NUMBER_MAX_LENGTH = 250;", "modifier": "private static final", "type": "int", "declarator": "NUMBER_MAX_LENGTH = 250", "var_name": "NUMBER_MAX_LENGTH"}, {"original_string": "public static final String NUMERIC_REGEXP = \"^(-?0|-?[1-9]\\\\d*)(\\\\.\\\\d+)?$\";", "modifier": "public static final", "type": "String", "declarator": "NUMERIC_REGEXP = \"^(-?0|-?[1-9]\\\\d*)(\\\\.\\\\d+)?$\"", "var_name": "NUMERIC_REGEXP"}, {"original_string": "public static final String NUMERIC_LENIENT_REGEXP = \"^(-?[0-9]+)(\\\\.[0-9]+)?$\";", "modifier": "public static final", "type": "String", "declarator": "NUMERIC_LENIENT_REGEXP = \"^(-?[0-9]+)(\\\\.[0-9]+)?$\"", "var_name": "NUMERIC_LENIENT_REGEXP"}, {"original_string": "private static final Pattern NUMERIC_PATTERN = Pattern.compile( NUMERIC_REGEXP );", "modifier": "private static final", "type": "Pattern", "declarator": "NUMERIC_PATTERN = Pattern.compile( NUMERIC_REGEXP )", "var_name": "NUMERIC_PATTERN"}, {"original_string": "private static final Pattern NUMERIC_LENIENT_PATTERN = Pattern.compile( NUMERIC_LENIENT_REGEXP );", "modifier": "private static final", "type": "Pattern", "declarator": "NUMERIC_LENIENT_PATTERN = Pattern.compile( NUMERIC_LENIENT_REGEXP )", "var_name": "NUMERIC_LENIENT_PATTERN"}, {"original_string": "private static final Pattern INT_PATTERN = Pattern.compile( \"^(0|-?[1-9]\\\\d*)$\" );", "modifier": "private static final", "type": "Pattern", "declarator": "INT_PATTERN = Pattern.compile( \"^(0|-?[1-9]\\\\d*)$\" )", "var_name": "INT_PATTERN"}, {"original_string": "private static final Pattern POSITIVE_INT_PATTERN = Pattern.compile( \"^[1-9]\\\\d*$\" );", "modifier": "private static final", "type": "Pattern", "declarator": "POSITIVE_INT_PATTERN = Pattern.compile( \"^[1-9]\\\\d*$\" )", "var_name": "POSITIVE_INT_PATTERN"}, {"original_string": "private static final Pattern POSITIVE_OR_ZERO_INT_PATTERN = Pattern.compile( \"(^0$)|(^[1-9]\\\\d*$)\" );", "modifier": "private static final", "type": "Pattern", "declarator": "POSITIVE_OR_ZERO_INT_PATTERN = Pattern.compile( \"(^0$)|(^[1-9]\\\\d*$)\" )", "var_name": "POSITIVE_OR_ZERO_INT_PATTERN"}, {"original_string": "private static final Pattern NEGATIVE_INT_PATTERN = Pattern.compile( \"^-[1-9]\\\\d*$\" );", "modifier": "private static final", "type": "Pattern", "declarator": "NEGATIVE_INT_PATTERN = Pattern.compile( \"^-[1-9]\\\\d*$\" )", "var_name": "NEGATIVE_INT_PATTERN"}, {"original_string": "private static final Pattern ZERO_PATTERN = Pattern.compile( \"^0(\\\\.0*)?$\" );", "modifier": "private static final", "type": "Pattern", "declarator": "ZERO_PATTERN = Pattern.compile( \"^0(\\\\.0*)?$\" )", "var_name": "ZERO_PATTERN"}], "methods": [{"identifier": "isValidDouble", "parameters": "( Double d )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidDouble( Double d )", "full_signature": "public static boolean isValidDouble( Double d )", "class_method_signature": "MathUtils.isValidDouble( Double d )", "testcase": false, "constructor": false}, {"identifier": "getFloor", "parameters": "( double value )", "modifiers": "public static", "return": "double", "signature": "double getFloor( double value )", "full_signature": "public static double getFloor( double value )", "class_method_signature": "MathUtils.getFloor( double value )", "testcase": false, "constructor": false}, {"identifier": "getRounded", "parameters": "( double value )", "modifiers": "public static", "return": "double", "signature": "double getRounded( double value )", "full_signature": "public static double getRounded( double value )", "class_method_signature": "MathUtils.getRounded( double value )", "testcase": false, "constructor": false}, {"identifier": "getRoundedObject", "parameters": "( Object value )", "modifiers": "public static", "return": "Object", "signature": "Object getRoundedObject( Object value )", "full_signature": "public static Object getRoundedObject( Object value )", "class_method_signature": "MathUtils.getRoundedObject( Object value )", "testcase": false, "constructor": false}, {"identifier": "roundSignificant", "parameters": "( double value )", "modifiers": "public static", "return": "double", "signature": "double roundSignificant( double value )", "full_signature": "public static double roundSignificant( double value )", "class_method_signature": "MathUtils.roundSignificant( double value )", "testcase": false, "constructor": false}, {"identifier": "roundToSignificantDigits", "parameters": "( double value, int n )", "modifiers": "public static", "return": "double", "signature": "double roundToSignificantDigits( double value, int n )", "full_signature": "public static double roundToSignificantDigits( double value, int n )", "class_method_signature": "MathUtils.roundToSignificantDigits( double value, int n )", "testcase": false, "constructor": false}, {"identifier": "roundFraction", "parameters": "( double value, int n )", "modifiers": "public static", "return": "double", "signature": "double roundFraction( double value, int n )", "full_signature": "public static double roundFraction( double value, int n )", "class_method_signature": "MathUtils.roundFraction( double value, int n )", "testcase": false, "constructor": false}, {"identifier": "getMin", "parameters": "( int number, int min )", "modifiers": "public static", "return": "int", "signature": "int getMin( int number, int min )", "full_signature": "public static int getMin( int number, int min )", "class_method_signature": "MathUtils.getMin( int number, int min )", "testcase": false, "constructor": false}, {"identifier": "getMax", "parameters": "( int number, int max )", "modifiers": "public static", "return": "int", "signature": "int getMax( int number, int max )", "full_signature": "public static int getMax( int number, int max )", "class_method_signature": "MathUtils.getMax( int number, int max )", "testcase": false, "constructor": false}, {"identifier": "getWithin", "parameters": "( int value, int min, int max )", "modifiers": "public static", "return": "int", "signature": "int getWithin( int value, int min, int max )", "full_signature": "public static int getWithin( int value, int min, int max )", "class_method_signature": "MathUtils.getWithin( int value, int min, int max )", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumeric( String value )", "full_signature": "public static boolean isNumeric( String value )", "class_method_signature": "MathUtils.isNumeric( String value )", "testcase": false, "constructor": false}, {"identifier": "isNumericLenient", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumericLenient( String value )", "full_signature": "public static boolean isNumericLenient( String value )", "class_method_signature": "MathUtils.isNumericLenient( String value )", "testcase": false, "constructor": false}, {"identifier": "isUnitInterval", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isUnitInterval( String value )", "full_signature": "public static boolean isUnitInterval( String value )", "class_method_signature": "MathUtils.isUnitInterval( String value )", "testcase": false, "constructor": false}, {"identifier": "isPercentage", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isPercentage( String value )", "full_signature": "public static boolean isPercentage( String value )", "class_method_signature": "MathUtils.isPercentage( String value )", "testcase": false, "constructor": false}, {"identifier": "isInteger", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isInteger( String value )", "full_signature": "public static boolean isInteger( String value )", "class_method_signature": "MathUtils.isInteger( String value )", "testcase": false, "constructor": false}, {"identifier": "isPositiveInteger", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isPositiveInteger( String value )", "full_signature": "public static boolean isPositiveInteger( String value )", "class_method_signature": "MathUtils.isPositiveInteger( String value )", "testcase": false, "constructor": false}, {"identifier": "isZeroOrPositiveInteger", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isZeroOrPositiveInteger( String value )", "full_signature": "public static boolean isZeroOrPositiveInteger( String value )", "class_method_signature": "MathUtils.isZeroOrPositiveInteger( String value )", "testcase": false, "constructor": false}, {"identifier": "isCoordinate", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isCoordinate( String value )", "full_signature": "public static boolean isCoordinate( String value )", "class_method_signature": "MathUtils.isCoordinate( String value )", "testcase": false, "constructor": false}, {"identifier": "isNegativeInteger", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isNegativeInteger( String value )", "full_signature": "public static boolean isNegativeInteger( String value )", "class_method_signature": "MathUtils.isNegativeInteger( String value )", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isZero( String value )", "full_signature": "public static boolean isZero( String value )", "class_method_signature": "MathUtils.isZero( String value )", "testcase": false, "constructor": false}, {"identifier": "isBool", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isBool( String value )", "full_signature": "public static boolean isBool( String value )", "class_method_signature": "MathUtils.isBool( String value )", "testcase": false, "constructor": false}, {"identifier": "isEqual", "parameters": "( Double d1, Double d2 )", "modifiers": "public static", "return": "boolean", "signature": "boolean isEqual( Double d1, Double d2 )", "full_signature": "public static boolean isEqual( Double d1, Double d2 )", "class_method_signature": "MathUtils.isEqual( Double d1, Double d2 )", "testcase": false, "constructor": false}, {"identifier": "isEqual", "parameters": "( double d1, double d2 )", "modifiers": "public static", "return": "boolean", "signature": "boolean isEqual( double d1, double d2 )", "full_signature": "public static boolean isEqual( double d1, double d2 )", "class_method_signature": "MathUtils.isEqual( double d1, double d2 )", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "( double value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isZero( double value )", "full_signature": "public static boolean isZero( double value )", "class_method_signature": "MathUtils.isZero( double value )", "testcase": false, "constructor": false}, {"identifier": "zeroIfNull", "parameters": "( Double value )", "modifiers": "public static", "return": "double", "signature": "double zeroIfNull( Double value )", "full_signature": "public static double zeroIfNull( Double value )", "class_method_signature": "MathUtils.zeroIfNull( Double value )", "testcase": false, "constructor": false}, {"identifier": "getRandom", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getRandom()", "full_signature": "public static int getRandom()", "class_method_signature": "MathUtils.getRandom()", "testcase": false, "constructor": false}, {"identifier": "getMin", "parameters": "( double[] array )", "modifiers": "public static", "return": "Double", "signature": "Double getMin( double[] array )", "full_signature": "public static Double getMin( double[] array )", "class_method_signature": "MathUtils.getMin( double[] array )", "testcase": false, "constructor": false}, {"identifier": "getMax", "parameters": "( double[] array )", "modifiers": "public static", "return": "Double", "signature": "Double getMax( double[] array )", "full_signature": "public static Double getMax( double[] array )", "class_method_signature": "MathUtils.getMax( double[] array )", "testcase": false, "constructor": false}, {"identifier": "getAverage", "parameters": "( List<Double> values )", "modifiers": "public static", "return": "Double", "signature": "Double getAverage( List<Double> values )", "full_signature": "public static Double getAverage( List<Double> values )", "class_method_signature": "MathUtils.getAverage( List<Double> values )", "testcase": false, "constructor": false}, {"identifier": "getSum", "parameters": "( List<Double> values )", "modifiers": "public static", "return": "Double", "signature": "Double getSum( List<Double> values )", "full_signature": "public static Double getSum( List<Double> values )", "class_method_signature": "MathUtils.getSum( List<Double> values )", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "( String value )", "modifiers": "public static", "return": "Double", "signature": "Double parseDouble( String value )", "full_signature": "public static Double parseDouble( String value )", "class_method_signature": "MathUtils.parseDouble( String value )", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "( String string )", "modifiers": "public static", "return": "Integer", "signature": "Integer parseInt( String string )", "full_signature": "public static Integer parseInt( String string )", "class_method_signature": "MathUtils.parseInt( String string )", "testcase": false, "constructor": false}, {"identifier": "getLowBound", "parameters": "( double stdDev, double stdDevNo, double average )", "modifiers": "public static", "return": "double", "signature": "double getLowBound( double stdDev, double stdDevNo, double average )", "full_signature": "public static double getLowBound( double stdDev, double stdDevNo, double average )", "class_method_signature": "MathUtils.getLowBound( double stdDev, double stdDevNo, double average )", "testcase": false, "constructor": false}, {"identifier": "getHighBound", "parameters": "( double stdDev, double stdDevFactor, double average )", "modifiers": "public static", "return": "double", "signature": "double getHighBound( double stdDev, double stdDevFactor, double average )", "full_signature": "public static double getHighBound( double stdDev, double stdDevFactor, double average )", "class_method_signature": "MathUtils.getHighBound( double stdDev, double stdDevFactor, double average )", "testcase": false, "constructor": false}, {"identifier": "divideToCeil", "parameters": "( int numerator, int denominator )", "modifiers": "public static", "return": "int", "signature": "int divideToCeil( int numerator, int denominator )", "full_signature": "public static int divideToCeil( int numerator, int denominator )", "class_method_signature": "MathUtils.divideToCeil( int numerator, int denominator )", "testcase": false, "constructor": false}, {"identifier": "divideToFloor", "parameters": "( int numerator, int denominator )", "modifiers": "public static", "return": "int", "signature": "int divideToFloor( int numerator, int denominator )", "full_signature": "public static int divideToFloor( int numerator, int denominator )", "class_method_signature": "MathUtils.divideToFloor( int numerator, int denominator )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/MathUtils.java"}, "focal_method": {"identifier": "isNegativeInteger", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "body": "public static boolean isNegativeInteger( String value )\n    {\n        return value != null && INT_VALIDATOR.isValid( value ) && NEGATIVE_INT_PATTERN.matcher( value ).matches();\n    }", "signature": "boolean isNegativeInteger( String value )", "full_signature": "public static boolean isNegativeInteger( String value )", "class_method_signature": "MathUtils.isNegativeInteger( String value )", "testcase": false, "constructor": false, "invocations": ["isValid", "matches", "matcher"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}