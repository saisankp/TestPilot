{"test_class": {"identifier": "KeyStoreJwkKeyResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader = this.getClass().getClassLoader();", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader = this.getClass().getClassLoader()", "var_name": "classLoader"}, {"original_string": "private final DefaultJwsHeader baseJwsHeader = new DefaultJwsHeader();", "modifier": "private final", "type": "DefaultJwsHeader", "declarator": "baseJwsHeader = new DefaultJwsHeader()", "var_name": "baseJwsHeader"}, {"original_string": "private final KeyStore baseKeyStore = new KeyStore() {\n        public String getPublicKey(String domain, String service, String keyId) {\n            return null;\n        }\n    };", "modifier": "private final", "type": "KeyStore", "declarator": "baseKeyStore = new KeyStore() {\n        public String getPublicKey(String domain, String service, String keyId) {\n            return null;\n        }\n    }", "var_name": "baseKeyStore"}, {"original_string": "private final SigningKeyResolver basejwksResolver = new SigningKeyResolver() {\n        public Key resolveSigningKey(JwsHeader header, Claims claims) { return null; }\n        public Key resolveSigningKey(JwsHeader header, String plaintext) { return null; }\n    };", "modifier": "private final", "type": "SigningKeyResolver", "declarator": "basejwksResolver = new SigningKeyResolver() {\n        public Key resolveSigningKey(JwsHeader header, Claims claims) { return null; }\n        public Key resolveSigningKey(JwsHeader header, String plaintext) { return null; }\n    }", "var_name": "basejwksResolver"}, {"original_string": "private final PublicKey basePublicKey = new PublicKey() {\n        private static final long serialVersionUID = 1L;\n        public String getFormat() { return null; }\n        public byte[] getEncoded() { return null; }\n        public String getAlgorithm() { return null; }\n    };", "modifier": "private final", "type": "PublicKey", "declarator": "basePublicKey = new PublicKey() {\n        private static final long serialVersionUID = 1L;\n        public String getFormat() { return null; }\n        public byte[] getEncoded() { return null; }\n        public String getAlgorithm() { return null; }\n    }", "var_name": "basePublicKey"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/oauth/parser/KeyStoreJwkKeyResolverTest.java"}, "test_case": {"identifier": "testKeyStoreJwkKeyResolver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testKeyStoreJwkKeyResolver() throws MalformedURLException {\n        KeyStoreJwkKeyResolver resolver = null; BiFunction<Field, KeyStoreJwkKeyResolver, Object> getFieldValue = (f, object) -> {\n            try {\n                f.setAccessible(true);\n                return f.get(object);\n            } catch (IllegalArgumentException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        };\n\n        resolver = new KeyStoreJwkKeyResolver(null, null, null);\n        assertNotNull(resolver);\n        for (Field f : resolver.getClass().getDeclaredFields()) {\n            switch (f.getName()) {\n                case \"keyStore\":\n                    assertNull(getFieldValue.apply(f, resolver));\n                    break;\n                case \"jwksResolver\":\n                    assertNotNull(getFieldValue.apply(f, resolver));\n                    break;\n            }\n        }\n\n        resolver = new KeyStoreJwkKeyResolver(null, \"file:///\", null);\n        assertNotNull(resolver);\n        for (Field f : resolver.getClass().getDeclaredFields()) {\n            switch (f.getName()) {\n                case \"keyStore\":\n                    assertNull(getFieldValue.apply(f, resolver));\n                    break;\n                case \"jwksResolver\":\n                    assertNotNull(getFieldValue.apply(f, resolver));\n                    break;\n            }\n        }\n\n        resolver = new KeyStoreJwkKeyResolver(baseKeyStore, \"file:///\", null);\n        assertNotNull(resolver);\n        for (Field f : resolver.getClass().getDeclaredFields()) {\n            switch (f.getName()) {\n                case \"keyStore\":\n                    assertSame(getFieldValue.apply(f, resolver), baseKeyStore);\n                    break;\n                case \"jwksResolver\":\n                    assertNotNull(getFieldValue.apply(f, resolver));\n                    break;\n            }\n        }\n    }", "signature": "void testKeyStoreJwkKeyResolver()", "full_signature": "@Test public void testKeyStoreJwkKeyResolver()", "class_method_signature": "KeyStoreJwkKeyResolverTest.testKeyStoreJwkKeyResolver()", "testcase": true, "constructor": false, "invocations": ["setAccessible", "get", "assertNotNull", "getDeclaredFields", "getClass", "getName", "assertNull", "apply", "assertNotNull", "apply", "assertNotNull", "getDeclaredFields", "getClass", "getName", "assertNull", "apply", "assertNotNull", "apply", "assertNotNull", "getDeclaredFields", "getClass", "getName", "assertSame", "apply", "assertNotNull", "apply"]}, "focal_class": {"identifier": "KeyStoreJwkKeyResolver", "superclass": "", "interfaces": "implements SigningKeyResolver", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(KeyStoreJwkKeyResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(KeyStoreJwkKeyResolver.class)", "var_name": "LOG"}, {"original_string": "private static final String SYS_AUTH_DOMAIN = \"sys.auth\";", "modifier": "private static final", "type": "String", "declarator": "SYS_AUTH_DOMAIN = \"sys.auth\"", "var_name": "SYS_AUTH_DOMAIN"}, {"original_string": "private KeyStore keyStore = null;", "modifier": "private", "type": "KeyStore", "declarator": "keyStore = null", "var_name": "keyStore"}, {"original_string": "private SigningKeyResolver jwksResolver = null;", "modifier": "private", "type": "SigningKeyResolver", "declarator": "jwksResolver = null", "var_name": "jwksResolver"}], "methods": [{"identifier": "KeyStoreJwkKeyResolver", "parameters": "(KeyStore keyStore, String url, SSLContext sslContext)", "modifiers": "public", "return": "", "signature": " KeyStoreJwkKeyResolver(KeyStore keyStore, String url, SSLContext sslContext)", "full_signature": "public  KeyStoreJwkKeyResolver(KeyStore keyStore, String url, SSLContext sslContext)", "class_method_signature": "KeyStoreJwkKeyResolver.KeyStoreJwkKeyResolver(KeyStore keyStore, String url, SSLContext sslContext)", "testcase": false, "constructor": true}, {"identifier": "resolveSigningKey", "parameters": "(JwsHeader header, Claims claims)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "Key", "signature": "Key resolveSigningKey(JwsHeader header, Claims claims)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public Key resolveSigningKey(JwsHeader header, Claims claims)", "class_method_signature": "KeyStoreJwkKeyResolver.resolveSigningKey(JwsHeader header, Claims claims)", "testcase": false, "constructor": false}, {"identifier": "resolveSigningKey", "parameters": "(JwsHeader header, String plaintext)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "Key", "signature": "Key resolveSigningKey(JwsHeader header, String plaintext)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public Key resolveSigningKey(JwsHeader header, String plaintext)", "class_method_signature": "KeyStoreJwkKeyResolver.resolveSigningKey(JwsHeader header, String plaintext)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/parser/KeyStoreJwkKeyResolver.java"}, "focal_method": {"identifier": "KeyStoreJwkKeyResolver", "parameters": "(KeyStore keyStore, String url, SSLContext sslContext)", "modifiers": "public", "return": "", "body": "public KeyStoreJwkKeyResolver(KeyStore keyStore, String url, SSLContext sslContext) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"KeyStoreJwkKeyResolver:JWK URL: \" + url);\n        }\n\n        this.keyStore = keyStore;\n        this.jwksResolver = new JwtsSigningKeyResolver(url, sslContext, true);\n    }", "signature": " KeyStoreJwkKeyResolver(KeyStore keyStore, String url, SSLContext sslContext)", "full_signature": "public  KeyStoreJwkKeyResolver(KeyStore keyStore, String url, SSLContext sslContext)", "class_method_signature": "KeyStoreJwkKeyResolver.KeyStoreJwkKeyResolver(KeyStore keyStore, String url, SSLContext sslContext)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}