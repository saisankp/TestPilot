{"test_class": {"identifier": "StartProcessHelperTest", "superclass": "extends AbstractBaseTest", "interfaces": "", "fields": [], "file": "jbpm-flow/src/test/java/org/jbpm/process/instance/StartProcessHelperTest.java"}, "test_case": {"identifier": "testFindLatestProcessByNameMultipleProcesses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindLatestProcessByNameMultipleProcesses() {\n        List<Process> processes = buildProcessCollection(\"Hello\", 5);\n        processes.addAll(buildProcessCollection(\"DifferentProcess\", 10));\n        processes.addAll(buildProcessCollection(\"DifferentProcess1\", 10));\n        processes.addAll(buildProcessCollection(\"DifferentProcess2\", 30));\n        processes.addAll(buildProcessCollection(\"Process\", 10));\n        processes.addAll(buildProcessCollection(\"Diffeocess1\", 10));\n        processes.addAll(buildProcessCollection(\"Differs2\", 30));\n        processes.addAll(buildProcessCollection(\"zDifferentProcess\", 10));\n        processes.addAll(buildProcessCollection(\"xDifferentProcess1\", 10));\n        processes.addAll(buildProcessCollection(\"cDifferentProcess2\", 30));\n        processes.addAll(buildProcessCollection(\"vProcess\", 10));\n        processes.addAll(buildProcessCollection(\"bDiffeocess1\", 10));\n        processes.addAll(buildProcessCollection(\"nDiffers2\", 30));\n        Collections.shuffle(processes);\n\n        String foundProcessId = StartProcessHelper.findLatestProcessByName(processes, \"Hello\");\n\n        assertNotNull(foundProcessId);\n        assertEquals(\"5\", foundProcessId);\n        \n        foundProcessId = StartProcessHelper.findLatestProcessByName(processes, \"DifferentProcess\");\n        \n        assertNotNull(foundProcessId);\n        assertEquals(\"10\", foundProcessId);\n    }", "signature": "void testFindLatestProcessByNameMultipleProcesses()", "full_signature": "@Test public void testFindLatestProcessByNameMultipleProcesses()", "class_method_signature": "StartProcessHelperTest.testFindLatestProcessByNameMultipleProcesses()", "testcase": true, "constructor": false, "invocations": ["buildProcessCollection", "addAll", "buildProcessCollection", "addAll", "buildProcessCollection", "addAll", "buildProcessCollection", "addAll", "buildProcessCollection", "addAll", "buildProcessCollection", "addAll", "buildProcessCollection", "addAll", "buildProcessCollection", "addAll", "buildProcessCollection", "addAll", "buildProcessCollection", "addAll", "buildProcessCollection", "addAll", "buildProcessCollection", "addAll", "buildProcessCollection", "shuffle", "findLatestProcessByName", "assertNotNull", "assertEquals", "findLatestProcessByName", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "StartProcessHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PROCESS_COMPARATOR_CLASS_KEY = \"jbpm.process.name.comparator\";", "modifier": "public static final", "type": "String", "declarator": "PROCESS_COMPARATOR_CLASS_KEY = \"jbpm.process.name.comparator\"", "var_name": "PROCESS_COMPARATOR_CLASS_KEY"}, {"original_string": "private static String comparatorClass = System.getProperty(PROCESS_COMPARATOR_CLASS_KEY);", "modifier": "private static", "type": "String", "declarator": "comparatorClass = System.getProperty(PROCESS_COMPARATOR_CLASS_KEY)", "var_name": "comparatorClass"}], "methods": [{"identifier": "startProcessByName", "parameters": "( KieRuntime kruntime, String name, Map<String, Object> parameters )", "modifiers": "public static", "return": "ProcessInstance", "signature": "ProcessInstance startProcessByName( KieRuntime kruntime, String name, Map<String, Object> parameters )", "full_signature": "public static ProcessInstance startProcessByName( KieRuntime kruntime, String name, Map<String, Object> parameters )", "class_method_signature": "StartProcessHelper.startProcessByName( KieRuntime kruntime, String name, Map<String, Object> parameters )", "testcase": false, "constructor": false}, {"identifier": "startProcessByName", "parameters": "(KieRuntime kruntime, String name, Map<String, Object> parameters, Comparator<Process> comparator)", "modifiers": "public static", "return": "ProcessInstance", "signature": "ProcessInstance startProcessByName(KieRuntime kruntime, String name, Map<String, Object> parameters, Comparator<Process> comparator)", "full_signature": "public static ProcessInstance startProcessByName(KieRuntime kruntime, String name, Map<String, Object> parameters, Comparator<Process> comparator)", "class_method_signature": "StartProcessHelper.startProcessByName(KieRuntime kruntime, String name, Map<String, Object> parameters, Comparator<Process> comparator)", "testcase": false, "constructor": false}, {"identifier": "findLatestProcessByName", "parameters": "(KieBase kbase, final String processName)", "modifiers": "public static", "return": "String", "signature": "String findLatestProcessByName(KieBase kbase, final String processName)", "full_signature": "public static String findLatestProcessByName(KieBase kbase, final String processName)", "class_method_signature": "StartProcessHelper.findLatestProcessByName(KieBase kbase, final String processName)", "testcase": false, "constructor": false}, {"identifier": "findLatestProcessByName", "parameters": "(KieBase kbase, final String processName, Comparator<Process> comparator)", "modifiers": "public static", "return": "String", "signature": "String findLatestProcessByName(KieBase kbase, final String processName, Comparator<Process> comparator)", "full_signature": "public static String findLatestProcessByName(KieBase kbase, final String processName, Comparator<Process> comparator)", "class_method_signature": "StartProcessHelper.findLatestProcessByName(KieBase kbase, final String processName, Comparator<Process> comparator)", "testcase": false, "constructor": false}, {"identifier": "findLatestProcessByName", "parameters": "(Collection<Process> processes, final String processName)", "modifiers": "public static", "return": "String", "signature": "String findLatestProcessByName(Collection<Process> processes, final String processName)", "full_signature": "public static String findLatestProcessByName(Collection<Process> processes, final String processName)", "class_method_signature": "StartProcessHelper.findLatestProcessByName(Collection<Process> processes, final String processName)", "testcase": false, "constructor": false}, {"identifier": "findLatestProcessByName", "parameters": "(Collection<Process> processes, final String processName, Comparator<Process> comparator)", "modifiers": "public static", "return": "String", "signature": "String findLatestProcessByName(Collection<Process> processes, final String processName, Comparator<Process> comparator)", "full_signature": "public static String findLatestProcessByName(Collection<Process> processes, final String processName, Comparator<Process> comparator)", "class_method_signature": "StartProcessHelper.findLatestProcessByName(Collection<Process> processes, final String processName, Comparator<Process> comparator)", "testcase": false, "constructor": false}, {"identifier": "getComparator", "parameters": "(String name)", "modifiers": "public static", "return": "Comparator<Process>", "signature": "Comparator<Process> getComparator(String name)", "full_signature": "public static Comparator<Process> getComparator(String name)", "class_method_signature": "StartProcessHelper.getComparator(String name)", "testcase": false, "constructor": false}], "file": "jbpm-flow/src/main/java/org/jbpm/process/instance/StartProcessHelper.java"}, "focal_method": {"identifier": "findLatestProcessByName", "parameters": "(KieBase kbase, final String processName)", "modifiers": "public static", "return": "String", "body": "public static String findLatestProcessByName(KieBase kbase, final String processName) {\n        if (kbase == null) {\n            return null;\n        }\n        return findLatestProcessByName(kbase.getProcesses(), processName);\n    }", "signature": "String findLatestProcessByName(KieBase kbase, final String processName)", "full_signature": "public static String findLatestProcessByName(KieBase kbase, final String processName)", "class_method_signature": "StartProcessHelper.findLatestProcessByName(KieBase kbase, final String processName)", "testcase": false, "constructor": false, "invocations": ["findLatestProcessByName", "getProcesses"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}