{"test_class": {"identifier": "UpgradeRestServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UpgradeRestService service;", "modifier": "private", "type": "UpgradeRestService", "declarator": "service", "var_name": "service"}, {"original_string": "private String message = null;", "modifier": "private", "type": "String", "declarator": "message = null", "var_name": "message"}, {"original_string": "private OobUpgradeSpec upgradeSpec;", "modifier": "private", "type": "OobUpgradeSpec", "declarator": "upgradeSpec", "var_name": "upgradeSpec"}, {"original_string": "private RollbackSpec rollbackSpec;", "modifier": "private", "type": "RollbackSpec", "declarator": "rollbackSpec", "var_name": "rollbackSpec"}], "file": "modules/hms-core/src/test/java/com/vmware/vrack/hms/rest/services/UpgradeRestServiceTest.java"}, "test_case": {"identifier": "testUpgradeWithBlankChecksum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpgradeWithBlankChecksum()\n    {\n\n        upgradeSpec.setChecksum( \" \" );\n        Response response = upgrade( upgradeSpec );\n        assertNotNull( response );\n\n        assertTrue( response.getStatus() == Status.BAD_REQUEST.getStatusCode() );\n\n        UpgradeStatus status = (UpgradeStatus) response.getEntity();\n        assertNotNull( status );\n\n        message = \"'checksum' is a mandatory parameter for HMS Upgrade.\";\n        assertEquals( message, status.getMoreInfo() );\n    }", "signature": "void testUpgradeWithBlankChecksum()", "full_signature": "@Test public void testUpgradeWithBlankChecksum()", "class_method_signature": "UpgradeRestServiceTest.testUpgradeWithBlankChecksum()", "testcase": true, "constructor": false, "invocations": ["setChecksum", "upgrade", "assertNotNull", "assertTrue", "getStatus", "getStatusCode", "getEntity", "assertNotNull", "assertEquals", "getMoreInfo"]}, "focal_class": {"identifier": "UpgradeRestService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger( getClass() );", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( getClass() )", "var_name": "logger"}, {"original_string": "private static final String RESTART_PROXY_SCRIPT = \"hms_oob_restart_lighttpd_wrapper.sh\";", "modifier": "private static final", "type": "String", "declarator": "RESTART_PROXY_SCRIPT = \"hms_oob_restart_lighttpd_wrapper.sh\"", "var_name": "RESTART_PROXY_SCRIPT"}], "methods": [{"identifier": "upgrade", "parameters": "( OobUpgradeSpec upgradeSpec )", "modifiers": "@POST public", "return": "Response", "signature": "Response upgrade( OobUpgradeSpec upgradeSpec )", "full_signature": "@POST public Response upgrade( OobUpgradeSpec upgradeSpec )", "class_method_signature": "UpgradeRestService.upgrade( OobUpgradeSpec upgradeSpec )", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "( RollbackSpec rollbackSpec )", "modifiers": "@POST @Path( \"/rollback\" ) public", "return": "Response", "signature": "Response rollback( RollbackSpec rollbackSpec )", "full_signature": "@POST @Path( \"/rollback\" ) public Response rollback( RollbackSpec rollbackSpec )", "class_method_signature": "UpgradeRestService.rollback( RollbackSpec rollbackSpec )", "testcase": false, "constructor": false}, {"identifier": "uploadFile", "parameters": "( MultipartFormDataInput multipartFormDataInput )", "modifiers": "@POST @Path( \"/upload\" ) @Consumes( MediaType.MULTIPART_FORM_DATA ) public", "return": "Response", "signature": "Response uploadFile( MultipartFormDataInput multipartFormDataInput )", "full_signature": "@POST @Path( \"/upload\" ) @Consumes( MediaType.MULTIPART_FORM_DATA ) public Response uploadFile( MultipartFormDataInput multipartFormDataInput )", "class_method_signature": "UpgradeRestService.uploadFile( MultipartFormDataInput multipartFormDataInput )", "testcase": false, "constructor": false}, {"identifier": "getUpgradeStatus", "parameters": "( @PathParam( \"upgradeId\" ) String upgradeId )", "modifiers": "@GET @Path( \"/monitor/{upgradeId}\" ) public", "return": "Response", "signature": "Response getUpgradeStatus( @PathParam( \"upgradeId\" ) String upgradeId )", "full_signature": "@GET @Path( \"/monitor/{upgradeId}\" ) public Response getUpgradeStatus( @PathParam( \"upgradeId\" ) String upgradeId )", "class_method_signature": "UpgradeRestService.getUpgradeStatus( @PathParam( \"upgradeId\" ) String upgradeId )", "testcase": false, "constructor": false}, {"identifier": "deleteBackup", "parameters": "( @PathParam( \"upgradeId\" ) String upgradeId )", "modifiers": "@DELETE @Path( \"/backup/{upgradeId}\" ) public", "return": "Response", "signature": "Response deleteBackup( @PathParam( \"upgradeId\" ) String upgradeId )", "full_signature": "@DELETE @Path( \"/backup/{upgradeId}\" ) public Response deleteBackup( @PathParam( \"upgradeId\" ) String upgradeId )", "class_method_signature": "UpgradeRestService.deleteBackup( @PathParam( \"upgradeId\" ) String upgradeId )", "testcase": false, "constructor": false}, {"identifier": "restartProxy", "parameters": "( @PathParam( \"upgradeId\" ) String upgradeId )", "modifiers": "@POST @Path( \"/proxy/restart/{upgradeId}\" ) public", "return": "Response", "signature": "Response restartProxy( @PathParam( \"upgradeId\" ) String upgradeId )", "full_signature": "@POST @Path( \"/proxy/restart/{upgradeId}\" ) public Response restartProxy( @PathParam( \"upgradeId\" ) String upgradeId )", "class_method_signature": "UpgradeRestService.restartProxy( @PathParam( \"upgradeId\" ) String upgradeId )", "testcase": false, "constructor": false}, {"identifier": "downloadInventoryFile", "parameters": "( @PathParam( \"upgradeId\" ) String upgradeId )", "modifiers": "@GET @Path( \"/download/inventory/{upgradeId}\" ) public", "return": "File", "signature": "File downloadInventoryFile( @PathParam( \"upgradeId\" ) String upgradeId )", "full_signature": "@GET @Path( \"/download/inventory/{upgradeId}\" ) public File downloadInventoryFile( @PathParam( \"upgradeId\" ) String upgradeId )", "class_method_signature": "UpgradeRestService.downloadInventoryFile( @PathParam( \"upgradeId\" ) String upgradeId )", "testcase": false, "constructor": false}], "file": "modules/hms-core/src/main/java/com/vmware/vrack/hms/rest/services/UpgradeRestService.java"}, "focal_method": {"identifier": "upgrade", "parameters": "( OobUpgradeSpec upgradeSpec )", "modifiers": "@POST public", "return": "Response", "body": "@POST\n    public Response upgrade( OobUpgradeSpec upgradeSpec )\n        throws HMSRestException\n    {\n\n        String message = null;\n\n        // validate upgrade request.\n        Response validationResponse = UpgradeUtil.validateUpgradeRequest( upgradeSpec );\n        if ( validationResponse != null )\n        {\n            // delete upgrade scripts and upgrade bundle files\n            if ( upgradeSpec != null )\n            {\n                UpgradeUtil.deleteUpgradeFiles( upgradeSpec.getId() );\n            }\n            return validationResponse;\n        }\n\n        final String upgradeId = upgradeSpec.getId();\n        final String upgradeDir = UpgradeUtil.getUpgradeDir( upgradeId );\n\n        UpgradeStatus status = new UpgradeStatus();\n        status.setId( upgradeId );\n\n        boolean scriptsExecutable = FileUtil.setFilesExecutable( upgradeDir, \"sh\" );\n        if ( !scriptsExecutable )\n        {\n\n            // delete upgrade scripts and upgrade bundle files\n            UpgradeUtil.deleteUpgradeFiles( upgradeId );\n\n            message = String.format( \"Failed to grant execute rights to upgrade scripts at '%s'.\", upgradeDir );\n            logger.error( message );\n\n            status.setStatusCode( UpgradeStatusCode.HMS_OOB_UPGRADE_INTERNAL_ERROR );\n            status.setStatusMessage( UpgradeStatusCode.HMS_OOB_UPGRADE_INTERNAL_ERROR.getStatusMessage() );\n            status.setMoreInfo( message );\n            return Response.status( Status.INTERNAL_SERVER_ERROR ).entity( status ).build();\n        }\n\n        /*\n         * 1. Put Service under maintenance 2. Drain/Post all events in queue 3. Shut off monitoring threads\n         */\n        boolean serviceInMaintenance = ServiceManager.putServiceInMaintenance();\n        if ( serviceInMaintenance )\n        {\n\n            // Invoke upgrade-hms-oob script\n            boolean upgradeInitiated = UpgradeUtil.initiateUpgrade( upgradeId, upgradeSpec.getFileName() );\n\n            if ( upgradeInitiated )\n            {\n\n                if ( ( ServiceManager.getServiceState().equals( ServiceState.NORMAL_MAINTENANCE ) )\n                    && ( ServiceManager.getActiveRequests() == 1 ) )\n                {\n\n                    message =\n                        \"Upgrade initiated after Out-of-band agent in \" + ServiceState.NORMAL_MAINTENANCE.toString();\n\n                }\n                else if ( ( ServiceManager.getServiceState().equals( ServiceState.FORCE_MAINTENANCE ) )\n                    && ( ServiceManager.getActiveRequests() > 1 ) )\n                {\n\n                    message =\n                        String.format( \"Upgrade initiated after Out-of-band agent \" + \"in %s with %s active requests.\",\n                                       ServiceState.FORCE_MAINTENANCE.toString(), ServiceManager.getActiveRequests() );\n                }\n\n                logger.info( message );\n\n                // save upgradeStatus to json file.\n                status.setStatusCode( UpgradeStatusCode.HMS_OOB_UPGRADE_INITIATED );\n\n                final String hmsUpgradeDir = UpgradeUtil.getHmsUpgradeDir();\n                String upgradeStatusFileAbsPath = String.format( \"%1$s/%2$s.json\", hmsUpgradeDir, upgradeId );\n                boolean saved = HmsUpgradeUtil.saveUpgradeStatus( upgradeStatusFileAbsPath, status );\n                if ( saved )\n                {\n                    logger.info( \"Saved upgrade status to '{}'\", upgradeStatusFileAbsPath );\n                }\n                else\n                {\n                    logger.warn( \"Unable to save upgrade status to '{}'.\", upgradeStatusFileAbsPath );\n                }\n\n                status.setStatusMessage( UpgradeStatusCode.HMS_OOB_UPGRADE_INITIATED.getStatusMessage() );\n                status.setMoreInfo( message );\n                return Response.status( Status.ACCEPTED ).entity( status ).build();\n\n            }\n            else\n            {\n\n                // delete upgrade scripts and upgrade bundle files\n                UpgradeUtil.deleteUpgradeFiles( upgradeId );\n\n                message = \"Executing Out-of-band Agent upgrade script failed.\";\n                logger.error( message );\n\n                /*\n                 * put back service in running state and reset activeRequests and restart monitoring.\n                 */\n                ServiceManager.putServiceInRunning();\n\n                status.setStatusCode( UpgradeStatusCode.HMS_OOB_UPGRADE_INTERNAL_ERROR );\n                status.setStatusMessage( UpgradeStatusCode.HMS_OOB_UPGRADE_INTERNAL_ERROR.getStatusMessage() );\n                status.setMoreInfo( message );\n                return Response.status( Status.INTERNAL_SERVER_ERROR ).entity( status ).build();\n            }\n        }\n        else\n        {\n\n            // delete upgrade scripts and upgrade bundle files\n            UpgradeUtil.deleteUpgradeFiles( upgradeId );\n\n            message = \"Setting Out-of-band Agent Service in MAINTENANCE failed.\";\n            logger.error( message );\n            status.setStatusCode( UpgradeStatusCode.HMS_OOB_UPGRADE_INTERNAL_ERROR );\n            status.setStatusMessage( UpgradeStatusCode.HMS_OOB_UPGRADE_INTERNAL_ERROR.getStatusMessage() );\n            status.setMoreInfo( message );\n            return Response.status( Status.INTERNAL_SERVER_ERROR ).entity( status ).build();\n        }\n    }", "signature": "Response upgrade( OobUpgradeSpec upgradeSpec )", "full_signature": "@POST public Response upgrade( OobUpgradeSpec upgradeSpec )", "class_method_signature": "UpgradeRestService.upgrade( OobUpgradeSpec upgradeSpec )", "testcase": false, "constructor": false, "invocations": ["validateUpgradeRequest", "deleteUpgradeFiles", "getId", "getId", "getUpgradeDir", "setId", "setFilesExecutable", "deleteUpgradeFiles", "format", "error", "setStatusCode", "setStatusMessage", "getStatusMessage", "setMoreInfo", "build", "entity", "status", "putServiceInMaintenance", "initiateUpgrade", "getFileName", "equals", "getServiceState", "getActiveRequests", "toString", "equals", "getServiceState", "getActiveRequests", "format", "toString", "getActiveRequests", "info", "setStatusCode", "getHmsUpgradeDir", "format", "saveUpgradeStatus", "info", "warn", "setStatusMessage", "getStatusMessage", "setMoreInfo", "build", "entity", "status", "deleteUpgradeFiles", "error", "putServiceInRunning", "setStatusCode", "setStatusMessage", "getStatusMessage", "setMoreInfo", "build", "entity", "status", "deleteUpgradeFiles", "error", "setStatusCode", "setStatusMessage", "getStatusMessage", "setMoreInfo", "build", "entity", "status"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}