{"test_class": {"identifier": "PartitionedRegionIDGeneratorFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Region<String, Long> idRegion;", "modifier": "private", "type": "Region<String, Long>", "declarator": "idRegion", "var_name": "idRegion"}, {"original_string": "private FunctionServiceHelper functionServiceHelper;", "modifier": "private", "type": "FunctionServiceHelper", "declarator": "functionServiceHelper", "var_name": "functionServiceHelper"}], "file": "gemfire-utils/gemfire-keyfw/src/test/java/io/pivotal/bds/gemfire/keyfw/generator/PartitionedRegionIDGeneratorFunctionTest.java"}, "test_case": {"identifier": "usingArgsMultipleCalls", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void usingArgsMultipleCalls() {\n        Collection<long[]> coll1 = (Collection<long[]>) functionServiceHelper\n                .onRegion(idRegion)\n                .withArgs(\"test\")\n                .execute(\"PartitionedRegionIDGeneratorFunction\")\n                .getResult();\n\n        assertEquals(coll1.size(), 1);\n\n        long[] ids1 = coll1.iterator().next();\n        assertEquals(ids1.length, 2);\n\n        assertEquals(ids1[0], 0);\n        assertEquals(ids1[1], 1);\n\n        Collection<long[]> coll2 = (Collection<long[]>) functionServiceHelper\n                .onRegion(idRegion)\n                .withArgs(\"test\")\n                .execute(\"PartitionedRegionIDGeneratorFunction\")\n                .getResult();\n\n        assertEquals(coll2.size(), 1);\n\n        long[] ids2 = coll2.iterator().next();\n        assertEquals(ids2.length, 2);\n\n        assertEquals(ids2[0], 2);\n        assertEquals(ids2[1], 3);\n    }", "signature": "void usingArgsMultipleCalls()", "full_signature": "@Test void usingArgsMultipleCalls()", "class_method_signature": "PartitionedRegionIDGeneratorFunctionTest.usingArgsMultipleCalls()", "testcase": true, "constructor": false, "invocations": ["getResult", "execute", "withArgs", "onRegion", "assertEquals", "size", "next", "iterator", "assertEquals", "assertEquals", "assertEquals", "getResult", "execute", "withArgs", "onRegion", "assertEquals", "size", "next", "iterator", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "PartitionedRegionIDGeneratorFunction", "superclass": "", "interfaces": "implements Function, Declarable", "fields": [{"original_string": "private String idRegionName;", "modifier": "private", "type": "String", "declarator": "idRegionName", "var_name": "idRegionName"}, {"original_string": "private int idCount;", "modifier": "private", "type": "int", "declarator": "idCount", "var_name": "idCount"}, {"original_string": "private Region<String, Long> idRegion;", "modifier": "private", "type": "Region<String, Long>", "declarator": "idRegion", "var_name": "idRegion"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PartitionedRegionIDGeneratorFunction.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PartitionedRegionIDGeneratorFunction.class)", "var_name": "LOG"}], "methods": [{"identifier": "PartitionedRegionIDGeneratorFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " PartitionedRegionIDGeneratorFunction()", "full_signature": "public  PartitionedRegionIDGeneratorFunction()", "class_method_signature": "PartitionedRegionIDGeneratorFunction.PartitionedRegionIDGeneratorFunction()", "testcase": false, "constructor": true}, {"identifier": "PartitionedRegionIDGeneratorFunction", "parameters": "(String idRegionName, int idCount)", "modifiers": "public", "return": "", "signature": " PartitionedRegionIDGeneratorFunction(String idRegionName, int idCount)", "full_signature": "public  PartitionedRegionIDGeneratorFunction(String idRegionName, int idCount)", "class_method_signature": "PartitionedRegionIDGeneratorFunction.PartitionedRegionIDGeneratorFunction(String idRegionName, int idCount)", "testcase": false, "constructor": true}, {"identifier": "PartitionedRegionIDGeneratorFunction", "parameters": "(int idCount, Region<String, Long> idRegion)", "modifiers": "public", "return": "", "signature": " PartitionedRegionIDGeneratorFunction(int idCount, Region<String, Long> idRegion)", "full_signature": "public  PartitionedRegionIDGeneratorFunction(int idCount, Region<String, Long> idRegion)", "class_method_signature": "PartitionedRegionIDGeneratorFunction.PartitionedRegionIDGeneratorFunction(int idCount, Region<String, Long> idRegion)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(FunctionContext functionContext)", "modifiers": "@Override public", "return": "void", "signature": "void execute(FunctionContext functionContext)", "full_signature": "@Override public void execute(FunctionContext functionContext)", "class_method_signature": "PartitionedRegionIDGeneratorFunction.execute(FunctionContext functionContext)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "PartitionedRegionIDGeneratorFunction.getId()", "testcase": false, "constructor": false}, {"identifier": "hasResult", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasResult()", "full_signature": "@Override public boolean hasResult()", "class_method_signature": "PartitionedRegionIDGeneratorFunction.hasResult()", "testcase": false, "constructor": false}, {"identifier": "optimizeForWrite", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean optimizeForWrite()", "full_signature": "@Override public boolean optimizeForWrite()", "class_method_signature": "PartitionedRegionIDGeneratorFunction.optimizeForWrite()", "testcase": false, "constructor": false}, {"identifier": "isHA", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isHA()", "full_signature": "@Override public boolean isHA()", "class_method_signature": "PartitionedRegionIDGeneratorFunction.isHA()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Properties properties)", "modifiers": "@Override public", "return": "void", "signature": "void init(Properties properties)", "full_signature": "@Override public void init(Properties properties)", "class_method_signature": "PartitionedRegionIDGeneratorFunction.init(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "getRegion", "parameters": "()", "modifiers": "private", "return": "Region<String, Long>", "signature": "Region<String, Long> getRegion()", "full_signature": "private Region<String, Long> getRegion()", "class_method_signature": "PartitionedRegionIDGeneratorFunction.getRegion()", "testcase": false, "constructor": false}], "file": "gemfire-utils/gemfire-keyfw/src/main/java/io/pivotal/bds/gemfire/keyfw/generator/PartitionedRegionIDGeneratorFunction.java"}, "focal_method": {"identifier": "execute", "parameters": "(FunctionContext functionContext)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(FunctionContext functionContext) {\n        try {\n            String domain = null;\n            Object arguments = functionContext.getArguments();\n\n            if (arguments != null) {\n                if (arguments.getClass().isArray()) {\n                    Object[] args = (Object[]) arguments;\n                    assert args.length == 1;\n                    domain = args[0].toString();\n                } else {\n                    domain = arguments.toString();\n                }\n            } else {\n                RegionFunctionContext rctx = (RegionFunctionContext) functionContext;\n                Set<String> filter = (Set<String>) rctx.getFilter();\n                assert filter.size() == 1;\n                domain = filter.iterator().next();\n            }\n\n            LOG.debug(\"execute: domain={}\", domain);\n            Region<String, Long> region = getRegion();\n\n            synchronized (PartitionedRegionIDGeneratorFunction.class) {\n                Long firstId = region.computeIfAbsent(domain, t -> -1L) + 1;\n                long lastId = firstId + idCount - 1;\n                LOG.debug(\"execute: domain={}, firstId={}, lastId={}\", domain, firstId, lastId);\n                region.put(domain, lastId);\n                functionContext.getResultSender().lastResult(new long[]{firstId, lastId});\n            }\n        } catch (Exception x) {\n            LOG.error(\"execute: x={}\", x.toString(), x);\n            throw new IllegalArgumentException(x.toString(), x);\n        }\n    }", "signature": "void execute(FunctionContext functionContext)", "full_signature": "@Override public void execute(FunctionContext functionContext)", "class_method_signature": "PartitionedRegionIDGeneratorFunction.execute(FunctionContext functionContext)", "testcase": false, "constructor": false, "invocations": ["getArguments", "isArray", "getClass", "toString", "toString", "getFilter", "size", "next", "iterator", "debug", "getRegion", "computeIfAbsent", "debug", "put", "lastResult", "getResultSender", "error", "toString", "toString"]}, "repository": {"repo_id": 44442208, "url": "https://github.com/Pivotal-Field-Engineering/gemfire-fe", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 20, "size": 75522, "license": "licensed"}}