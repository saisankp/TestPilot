{"test_class": {"identifier": "SxmpSessionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SxmpSessionTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SxmpSessionTest.class)", "var_name": "logger"}], "file": "ch-sxmp/src/test/java/com/cloudhopper/sxmp/SxmpSessionTest.java"}, "test_case": {"identifier": "processSubmitOK", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void processSubmitOK() throws Exception {\n        StringBuilder string0 = new StringBuilder(200)\n            .append(\"<?xml version=\\\"1.0\\\"?>\\n\")\n            .append(\"<operation type=\\\"submit\\\">\\n\")\n            .append(\" <account username=\\\"customer1\\\" password=\\\"test1\\\"/>\\n\")\n            .append(\" <submitRequest referenceId=\\\"MYREF102020022\\\">\\n\")\n            .append(\"  <operatorId>10</operatorId>\\n\")\n            .append(\"  <deliveryReport>true</deliveryReport>\\n\")\n            .append(\"  <sourceAddress type=\\\"network\\\">40404</sourceAddress>\\n\")\n            .append(\"  <destinationAddress type=\\\"international\\\">+12065551212</destinationAddress>\\n\")\n            .append(\"  <text encoding=\\\"ISO-8859-1\\\">48656c6c6f20576f726c64</text>\\n\")\n            .append(\" </submitRequest>\\n\")\n            .append(\"</operation>\\n\")\n            .append(\"\");\n\n        ByteArrayInputStream is = new ByteArrayInputStream(string0.toString().getBytes());\n\n        MockSxmpRequestProcessor processor = new MockSxmpRequestProcessor();\n        SxmpSession session = new SxmpSession(processor, SxmpParser.VERSION_1_0);\n\n        // this should actually not throw an error and should be an error response\n        SubmitResponse response = (SubmitResponse)session.process(is);\n\n        Assert.assertEquals(Operation.Type.SUBMIT, response.getType());\n        Assert.assertEquals(0, response.getErrorCode().intValue());\n        Assert.assertEquals(\"OK\", response.getErrorMessage());\n        Assert.assertEquals(\"THISISATICKET\", response.getTicketId());\n    }", "signature": "void processSubmitOK()", "full_signature": "@Test public void processSubmitOK()", "class_method_signature": "SxmpSessionTest.processSubmitOK()", "testcase": true, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "getBytes", "toString", "process", "assertEquals", "getType", "assertEquals", "intValue", "getErrorCode", "assertEquals", "getErrorMessage", "assertEquals", "getTicketId"]}, "focal_class": {"identifier": "SxmpSession", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SxmpSession.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SxmpSession.class)", "var_name": "logger"}, {"original_string": "private final SxmpProcessor processor;", "modifier": "private final", "type": "SxmpProcessor", "declarator": "processor", "var_name": "processor"}, {"original_string": "private final String version;", "modifier": "private final", "type": "String", "declarator": "version", "var_name": "version"}], "methods": [{"identifier": "SxmpSession", "parameters": "(final SxmpProcessor processor, final String version)", "modifiers": "public", "return": "", "signature": " SxmpSession(final SxmpProcessor processor, final String version)", "full_signature": "public  SxmpSession(final SxmpProcessor processor, final String version)", "class_method_signature": "SxmpSession.SxmpSession(final SxmpProcessor processor, final String version)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(InputStream is)", "modifiers": "public", "return": "Response", "signature": "Response process(InputStream is)", "full_signature": "public Response process(InputStream is)", "class_method_signature": "SxmpSession.process(InputStream is)", "testcase": false, "constructor": false}], "file": "ch-sxmp/src/main/java/com/cloudhopper/sxmp/SxmpSession.java"}, "focal_method": {"identifier": "process", "parameters": "(InputStream is)", "modifiers": "public", "return": "Response", "body": "public Response process(InputStream is) throws IOException, SAXException, ParserConfigurationException {\n        // create a new XML parser\n        SxmpParser parser = new SxmpParser(version);\n\n        // an instance of an operation we'll be processing as a request\n        Operation operation = null;\n\n        try {\n            // parse input stream into an operation (this may\n            operation = parser.parse(is);\n        } catch (SxmpParsingException e) {\n            // major issue parsing the request into something valid -- this\n            // exception may contain a partially parsed operation -- if it does\n            // then we want to return valid XML back to the caller of this session\n            // don't dump stack trace; instead just log error message and what of the operation we parsed\n            if (e.getOperation() != null && e.getOperation().getType() != null) {\n                logger.warn(\"Unable to fully parse XML into a request, returning ErrorResponse; error: \"+e.getMessage()+\", parsed: \"+e.getOperation());\n                // we'll actually return a generic ErrorResponse back\n                return new ErrorResponse(e.getOperation().getType(), e.getErrorCode().getIntValue(), e.getErrorMessage());\n            } else {\n                // otherwise, we should just return a generic error since nothing\n                // really was parsed in the XML document\n                throw new SAXException(e.getMessage(), e);\n            }\n        }\n\n        // at this point, we'll catch any SxmpErrorExceptions and make sure they\n        // are always converted into an ErrorResponse object, rather than\n        // the exception ever being thrown\n        try {\n            // can only handle requests\n            if (!(operation instanceof Request)) {\n                throw new SxmpErrorException(SxmpErrorCode.UNSUPPORTED_OPERATION, \"A session can only process requests\");\n            }\n\n            // convert to a request\n            Request req = (Request)operation;\n\n            // was an account included?\n            if (req.getAccount() == null) {\n                throw new SxmpErrorException(SxmpErrorCode.MISSING_REQUIRED_ELEMENT, \"A request must include account credentials\");\n            }\n\n            // authenticate the request\n            if (!processor.authenticate(req.getAccount())) {\n                throw new SxmpErrorException(SxmpErrorCode.AUTHENTICATION_FAILURE, \"Authentication failure\");\n            }\n\n            // handle request type\n            if (operation instanceof SubmitRequest) {\n                return processor.submit(req.getAccount(), (SubmitRequest)operation);\n            } else if (operation instanceof DeliverRequest) {\n                return processor.deliver(req.getAccount(), (DeliverRequest)operation);\n            } else if (operation instanceof DeliveryReportRequest) {\n                return processor.deliveryReport(req.getAccount(), (DeliveryReportRequest)operation);\n            } else {\n                // if we got here, then a request we don't support occurred\n                throw new SxmpErrorException(SxmpErrorCode.UNSUPPORTED_OPERATION, \"Unsupported operation request type\");\n            }\n        } catch (SxmpErrorException e) {\n            // because this is a mostly normal error in the course of processing a message\n            // we don't want to print the full stacktrace -- we just want to print the message\n            logger.warn(e.getMessage());\n            // we'll actually return a generic ErrorResponse back\n            return new ErrorResponse(operation.getType(), e.getErrorCode().getIntValue(), e.getErrorMessage());\n        } catch (Throwable t) {\n            logger.error(\"Major uncaught throwable while processing request, generating an ErrorResponse\", t);\n            // we'll actually return a generic ErrorResponse back\n            return new ErrorResponse(operation.getType(), SxmpErrorCode.GENERIC.getIntValue(), \"Generic error while processing request\");\n        }\n    }", "signature": "Response process(InputStream is)", "full_signature": "public Response process(InputStream is)", "class_method_signature": "SxmpSession.process(InputStream is)", "testcase": false, "constructor": false, "invocations": ["parse", "getOperation", "getType", "getOperation", "warn", "getMessage", "getOperation", "getType", "getOperation", "getIntValue", "getErrorCode", "getErrorMessage", "getMessage", "getAccount", "authenticate", "getAccount", "submit", "getAccount", "deliver", "getAccount", "deliveryReport", "getAccount", "warn", "getMessage", "getType", "getIntValue", "getErrorCode", "getErrorMessage", "error", "getType", "getIntValue"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}