{"test_class": {"identifier": "UtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/UtilTest.java"}, "test_case": {"identifier": "testDebugFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDebugFilter() {\n        LoggerContext context = (LoggerContext) StaticLoggerBinder.getSingleton().getLoggerFactory();\n        Logger logger = context.getLogger(\"testDebugFilter\");\n        logger.setLevel(Level.DEBUG);\n        assertEquals(\"debugFilter should not interfere with stream\", Arrays.asList(\"one\", \"two\", \"three\"),\n                Stream.of(\"one\", \"two\", \"three\")\n                        .filter(Util.debugFilter(logger, \"counting {}\"))\n                        .collect(Collectors.toList()));\n    }", "signature": "void testDebugFilter()", "full_signature": "@Test public void testDebugFilter()", "class_method_signature": "UtilTest.testDebugFilter()", "testcase": true, "constructor": false, "invocations": ["getLoggerFactory", "getSingleton", "getLogger", "setLevel", "assertEquals", "asList", "collect", "filter", "of", "debugFilter", "toList"]}, "focal_class": {"identifier": "Util", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Util.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Util.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "Util", "parameters": "()", "modifiers": "private", "return": "", "signature": " Util()", "full_signature": "private  Util()", "class_method_signature": "Util.Util()", "testcase": false, "constructor": true}, {"identifier": "isEmpty", "parameters": "(final String value)", "modifiers": "static", "return": "boolean", "signature": "boolean isEmpty(final String value)", "full_signature": "static boolean isEmpty(final String value)", "class_method_signature": "Util.isEmpty(final String value)", "testcase": false, "constructor": false}, {"identifier": "wrapSessionReadOnly", "parameters": "(final Session session)", "modifiers": "public static", "return": "Session", "signature": "Session wrapSessionReadOnly(final Session session)", "full_signature": "public static Session wrapSessionReadOnly(final Session session)", "class_method_signature": "Util.wrapSessionReadOnly(final Session session)", "testcase": false, "constructor": false}, {"identifier": "getManifestHeaderValues", "parameters": "(final Manifest manifest, final String headerName)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getManifestHeaderValues(final Manifest manifest, final String headerName)", "full_signature": "public static List<String> getManifestHeaderValues(final Manifest manifest, final String headerName)", "class_method_signature": "Util.getManifestHeaderValues(final Manifest manifest, final String headerName)", "testcase": false, "constructor": false}, {"identifier": "escapeManifestHeaderValue", "parameters": "(final @NotNull String... values)", "modifiers": "public static", "return": "String", "signature": "String escapeManifestHeaderValue(final @NotNull String... values)", "full_signature": "public static String escapeManifestHeaderValue(final @NotNull String... values)", "class_method_signature": "Util.escapeManifestHeaderValue(final @NotNull String... values)", "testcase": false, "constructor": false}, {"identifier": "escapeManifestHeaderValues", "parameters": "(final @NotNull List<String> values)", "modifiers": "public static", "return": "String", "signature": "String escapeManifestHeaderValues(final @NotNull List<String> values)", "full_signature": "public static String escapeManifestHeaderValues(final @NotNull List<String> values)", "class_method_signature": "Util.escapeManifestHeaderValues(final @NotNull List<String> values)", "testcase": false, "constructor": false}, {"identifier": "resolveManifestResources", "parameters": "(final URL manifestUrl, final List<String> resources)", "modifiers": "public static", "return": "List<URL>", "signature": "List<URL> resolveManifestResources(final URL manifestUrl, final List<String> resources)", "full_signature": "public static List<URL> resolveManifestResources(final URL manifestUrl, final List<String> resources)", "class_method_signature": "Util.resolveManifestResources(final URL manifestUrl, final List<String> resources)", "testcase": false, "constructor": false}, {"identifier": "mapManifestHeaderResources", "parameters": "(final String headerName, final ClassLoader classLoader)", "modifiers": "public static", "return": "Map<URL, List<URL>>", "signature": "Map<URL, List<URL>> mapManifestHeaderResources(final String headerName, final ClassLoader classLoader)", "full_signature": "public static Map<URL, List<URL>> mapManifestHeaderResources(final String headerName, final ClassLoader classLoader)", "class_method_signature": "Util.mapManifestHeaderResources(final String headerName, final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "mapManifestHeaderResources", "parameters": "(final String headerName, final List<File> files)", "modifiers": "public static", "return": "Map<URL, List<URL>>", "signature": "Map<URL, List<URL>> mapManifestHeaderResources(final String headerName, final List<File> files)", "full_signature": "public static Map<URL, List<URL>> mapManifestHeaderResources(final String headerName, final List<File> files)", "class_method_signature": "Util.mapManifestHeaderResources(final String headerName, final List<File> files)", "testcase": false, "constructor": false}, {"identifier": "mapManifestHeaderResources", "parameters": "(final String headerName, final URL manifestUrl)", "modifiers": "public static", "return": "Map<URL, List<URL>>", "signature": "Map<URL, List<URL>> mapManifestHeaderResources(final String headerName, final URL manifestUrl)", "full_signature": "public static Map<URL, List<URL>> mapManifestHeaderResources(final String headerName, final URL manifestUrl)", "class_method_signature": "Util.mapManifestHeaderResources(final String headerName, final URL manifestUrl)", "testcase": false, "constructor": false}, {"identifier": "getDefaultClassLoader", "parameters": "()", "modifiers": "static", "return": "ClassLoader", "signature": "ClassLoader getDefaultClassLoader()", "full_signature": "static ClassLoader getDefaultClassLoader()", "class_method_signature": "Util.getDefaultClassLoader()", "testcase": false, "constructor": false}, {"identifier": "debugFilter", "parameters": "(final Logger logger, final String format)", "modifiers": "public static", "return": "Predicate<T>", "signature": "Predicate<T> debugFilter(final Logger logger, final String format)", "full_signature": "public static Predicate<T> debugFilter(final Logger logger, final String format)", "class_method_signature": "Util.debugFilter(final Logger logger, final String format)", "testcase": false, "constructor": false}, {"identifier": "traceFilter", "parameters": "(final Logger logger, final String format)", "modifiers": "public static", "return": "Predicate<T>", "signature": "Predicate<T> traceFilter(final Logger logger, final String format)", "full_signature": "public static Predicate<T> traceFilter(final Logger logger, final String format)", "class_method_signature": "Util.traceFilter(final Logger logger, final String format)", "testcase": false, "constructor": false}, {"identifier": "composeTry", "parameters": "(final Function<R, M> monadUnit,\n                                                      final Supplier<M> monadZero,\n                                                      final TryFunction<T, R> onElement,\n                                                      final BiConsumer<T, Exception> onError)", "modifiers": "@Deprecated public static", "return": "Function<T, M>", "signature": "Function<T, M> composeTry(final Function<R, M> monadUnit,\n                                                      final Supplier<M> monadZero,\n                                                      final TryFunction<T, R> onElement,\n                                                      final BiConsumer<T, Exception> onError)", "full_signature": "@Deprecated public static Function<T, M> composeTry(final Function<R, M> monadUnit,\n                                                      final Supplier<M> monadZero,\n                                                      final TryFunction<T, R> onElement,\n                                                      final BiConsumer<T, Exception> onError)", "class_method_signature": "Util.composeTry(final Function<R, M> monadUnit,\n                                                      final Supplier<M> monadZero,\n                                                      final TryFunction<T, R> onElement,\n                                                      final BiConsumer<T, Exception> onError)", "testcase": false, "constructor": false}, {"identifier": "optFunc", "parameters": "(final Function<T, R> inputFunc)", "modifiers": "@Deprecated public static", "return": "Function<T, Optional<R>>", "signature": "Function<T, Optional<R>> optFunc(final Function<T, R> inputFunc)", "full_signature": "@Deprecated public static Function<T, Optional<R>> optFunc(final Function<T, R> inputFunc)", "class_method_signature": "Util.optFunc(final Function<T, R> inputFunc)", "testcase": false, "constructor": false}, {"identifier": "compose", "parameters": "(final Function<T, I> before, final Function<I, R> after)", "modifiers": "@Deprecated public static", "return": "Function<T, R>", "signature": "Function<T, R> compose(final Function<T, I> before, final Function<I, R> after)", "full_signature": "@Deprecated public static Function<T, R> compose(final Function<T, I> before, final Function<I, R> after)", "class_method_signature": "Util.compose(final Function<T, I> before, final Function<I, R> after)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/Util.java"}, "focal_method": {"identifier": "debugFilter", "parameters": "(final Logger logger, final String format)", "modifiers": "public static", "return": "Predicate<T>", "body": "public static <T> Predicate<T> debugFilter(final Logger logger, final String format) {\n        return item -> {\n            logger.debug(format, item);\n            return true;\n        };\n    }", "signature": "Predicate<T> debugFilter(final Logger logger, final String format)", "full_signature": "public static Predicate<T> debugFilter(final Logger logger, final String format)", "class_method_signature": "Util.debugFilter(final Logger logger, final String format)", "testcase": false, "constructor": false, "invocations": ["debug"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}