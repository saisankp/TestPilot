{"test_class": {"identifier": "DefaultAdminServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String APPLICATION_NAME = \"test_application\";", "modifier": "private static final", "type": "String", "declarator": "APPLICATION_NAME = \"test_application\"", "var_name": "APPLICATION_NAME"}, {"original_string": "@Mock\n    private JobConfigurationRepository jobConfigurationRepository;", "modifier": "@Mock\n    private", "type": "JobConfigurationRepository", "declarator": "jobConfigurationRepository", "var_name": "jobConfigurationRepository"}, {"original_string": "@Mock\n    private SchedulerService schedulerService;", "modifier": "@Mock\n    private", "type": "SchedulerService", "declarator": "schedulerService", "var_name": "schedulerService"}, {"original_string": "@Mock\n    private ListenerService listenerService;", "modifier": "@Mock\n    private", "type": "ListenerService", "declarator": "listenerService", "var_name": "listenerService"}, {"original_string": "@Mock\n    private SpringBatchLightminCoreConfigurationProperties properties;", "modifier": "@Mock\n    private", "type": "SpringBatchLightminCoreConfigurationProperties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private DefaultAdminService defaultAdminService;", "modifier": "private", "type": "DefaultAdminService", "declarator": "defaultAdminService", "var_name": "defaultAdminService"}], "file": "spring-batch-lightmin-core/spring-batch-lightmin-core-service/src/test/java/org/tuxdevelop/spring/batch/lightmin/service/DefaultAdminServiceTest.java"}, "test_case": {"identifier": "deleteJobConfigurationTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deleteJobConfigurationTest() {\n        final Long jobConfigurationId = 1L;\n        when(this.properties.getApplicationName()).thenReturn(APPLICATION_NAME);\n        final JobSchedulerConfiguration jobSchedulerConfiguration = DomainTestHelper.createJobSchedulerConfiguration(\n                \"0 0/5 * * * ?\", null, null, JobSchedulerType.CRON);\n        final JobConfiguration jobConfiguration = DomainTestHelper.createJobConfiguration(jobSchedulerConfiguration);\n        jobConfiguration.setJobConfigurationId(jobConfigurationId);\n        try {\n            when(this.jobConfigurationRepository.getJobConfiguration(jobConfigurationId, APPLICATION_NAME)).thenReturn(jobConfiguration);\n        } catch (final NoSuchJobConfigurationException e) {\n            fail(e.getMessage());\n        }\n\n        try {\n            this.defaultAdminService.deleteJobConfiguration(jobConfigurationId);\n        } catch (final SpringBatchLightminApplicationException e) {\n            fail(e.getMessage());\n        }\n\n    }", "signature": "void deleteJobConfigurationTest()", "full_signature": "@Test public void deleteJobConfigurationTest()", "class_method_signature": "DefaultAdminServiceTest.deleteJobConfigurationTest()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getApplicationName", "createJobSchedulerConfiguration", "createJobConfiguration", "setJobConfigurationId", "thenReturn", "when", "getJobConfiguration", "fail", "getMessage", "deleteJobConfiguration", "fail", "getMessage"]}, "focal_class": {"identifier": "DefaultAdminService", "superclass": "", "interfaces": "implements AdminService", "fields": [{"original_string": "private final JobConfigurationRepository jobConfigurationRepository;", "modifier": "private final", "type": "JobConfigurationRepository", "declarator": "jobConfigurationRepository", "var_name": "jobConfigurationRepository"}, {"original_string": "private final SchedulerService schedulerService;", "modifier": "private final", "type": "SchedulerService", "declarator": "schedulerService", "var_name": "schedulerService"}, {"original_string": "private final ListenerService listenerService;", "modifier": "private final", "type": "ListenerService", "declarator": "listenerService", "var_name": "listenerService"}, {"original_string": "private final SpringBatchLightminCoreConfigurationProperties springBatchLightminCoreConfigurationProperties;", "modifier": "private final", "type": "SpringBatchLightminCoreConfigurationProperties", "declarator": "springBatchLightminCoreConfigurationProperties", "var_name": "springBatchLightminCoreConfigurationProperties"}], "methods": [{"identifier": "DefaultAdminService", "parameters": "(final JobConfigurationRepository jobConfigurationRepository,\n                               final SchedulerService schedulerService,\n                               final ListenerService listenerService,\n                               final SpringBatchLightminCoreConfigurationProperties springBatchLightminCoreConfigurationProperties\n    )", "modifiers": "public", "return": "", "signature": " DefaultAdminService(final JobConfigurationRepository jobConfigurationRepository,\n                               final SchedulerService schedulerService,\n                               final ListenerService listenerService,\n                               final SpringBatchLightminCoreConfigurationProperties springBatchLightminCoreConfigurationProperties\n    )", "full_signature": "public  DefaultAdminService(final JobConfigurationRepository jobConfigurationRepository,\n                               final SchedulerService schedulerService,\n                               final ListenerService listenerService,\n                               final SpringBatchLightminCoreConfigurationProperties springBatchLightminCoreConfigurationProperties\n    )", "class_method_signature": "DefaultAdminService.DefaultAdminService(final JobConfigurationRepository jobConfigurationRepository,\n                               final SchedulerService schedulerService,\n                               final ListenerService listenerService,\n                               final SpringBatchLightminCoreConfigurationProperties springBatchLightminCoreConfigurationProperties\n    )", "testcase": false, "constructor": true}, {"identifier": "saveJobConfiguration", "parameters": "(@Valid final JobConfiguration jobConfiguration)", "modifiers": "@Override @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\") public", "return": "void", "signature": "void saveJobConfiguration(@Valid final JobConfiguration jobConfiguration)", "full_signature": "@Override @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\") public void saveJobConfiguration(@Valid final JobConfiguration jobConfiguration)", "class_method_signature": "DefaultAdminService.saveJobConfiguration(@Valid final JobConfiguration jobConfiguration)", "testcase": false, "constructor": false}, {"identifier": "saveSchedulerConfiguration", "parameters": "(final JobConfiguration addedJobConfiguration)", "modifiers": "private", "return": "void", "signature": "void saveSchedulerConfiguration(final JobConfiguration addedJobConfiguration)", "full_signature": "private void saveSchedulerConfiguration(final JobConfiguration addedJobConfiguration)", "class_method_signature": "DefaultAdminService.saveSchedulerConfiguration(final JobConfiguration addedJobConfiguration)", "testcase": false, "constructor": false}, {"identifier": "saveListenerConfiguration", "parameters": "(final JobConfiguration addedJobConfiguration)", "modifiers": "private", "return": "void", "signature": "void saveListenerConfiguration(final JobConfiguration addedJobConfiguration)", "full_signature": "private void saveListenerConfiguration(final JobConfiguration addedJobConfiguration)", "class_method_signature": "DefaultAdminService.saveListenerConfiguration(final JobConfiguration addedJobConfiguration)", "testcase": false, "constructor": false}, {"identifier": "updateJobConfiguration", "parameters": "(final JobConfiguration jobConfiguration)", "modifiers": "@Override @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\") public", "return": "void", "signature": "void updateJobConfiguration(final JobConfiguration jobConfiguration)", "full_signature": "@Override @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\") public void updateJobConfiguration(final JobConfiguration jobConfiguration)", "class_method_signature": "DefaultAdminService.updateJobConfiguration(final JobConfiguration jobConfiguration)", "testcase": false, "constructor": false}, {"identifier": "deleteJobConfiguration", "parameters": "(final Long jobConfigurationId)", "modifiers": "@Override @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\") public", "return": "void", "signature": "void deleteJobConfiguration(final Long jobConfigurationId)", "full_signature": "@Override @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\") public void deleteJobConfiguration(final Long jobConfigurationId)", "class_method_signature": "DefaultAdminService.deleteJobConfiguration(final Long jobConfigurationId)", "testcase": false, "constructor": false}, {"identifier": "getJobConfigurationsByJobName", "parameters": "(final String jobName)", "modifiers": "@Override public", "return": "Collection<JobConfiguration>", "signature": "Collection<JobConfiguration> getJobConfigurationsByJobName(final String jobName)", "full_signature": "@Override public Collection<JobConfiguration> getJobConfigurationsByJobName(final String jobName)", "class_method_signature": "DefaultAdminService.getJobConfigurationsByJobName(final String jobName)", "testcase": false, "constructor": false}, {"identifier": "getJobConfigurationMap", "parameters": "(final Collection<String> jobNames)", "modifiers": "@Override public", "return": "Map<String, Collection<JobConfiguration>>", "signature": "Map<String, Collection<JobConfiguration>> getJobConfigurationMap(final Collection<String> jobNames)", "full_signature": "@Override public Map<String, Collection<JobConfiguration>> getJobConfigurationMap(final Collection<String> jobNames)", "class_method_signature": "DefaultAdminService.getJobConfigurationMap(final Collection<String> jobNames)", "testcase": false, "constructor": false}, {"identifier": "getJobConfigurations", "parameters": "(final Collection<String> jobNames)", "modifiers": "@Override public", "return": "Collection<JobConfiguration>", "signature": "Collection<JobConfiguration> getJobConfigurations(final Collection<String> jobNames)", "full_signature": "@Override public Collection<JobConfiguration> getJobConfigurations(final Collection<String> jobNames)", "class_method_signature": "DefaultAdminService.getJobConfigurations(final Collection<String> jobNames)", "testcase": false, "constructor": false}, {"identifier": "validateJobConfiguration", "parameters": "(JobConfiguration jobConfiguration)", "modifiers": "private static", "return": "boolean", "signature": "boolean validateJobConfiguration(JobConfiguration jobConfiguration)", "full_signature": "private static boolean validateJobConfiguration(JobConfiguration jobConfiguration)", "class_method_signature": "DefaultAdminService.validateJobConfiguration(JobConfiguration jobConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getJobConfigurationById", "parameters": "(final Long jobConfigurationId)", "modifiers": "@Override public", "return": "JobConfiguration", "signature": "JobConfiguration getJobConfigurationById(final Long jobConfigurationId)", "full_signature": "@Override public JobConfiguration getJobConfigurationById(final Long jobConfigurationId)", "class_method_signature": "DefaultAdminService.getJobConfigurationById(final Long jobConfigurationId)", "testcase": false, "constructor": false}, {"identifier": "stopJobConfiguration", "parameters": "(final Long jobConfigurationId)", "modifiers": "@Override @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\") public", "return": "void", "signature": "void stopJobConfiguration(final Long jobConfigurationId)", "full_signature": "@Override @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\") public void stopJobConfiguration(final Long jobConfigurationId)", "class_method_signature": "DefaultAdminService.stopJobConfiguration(final Long jobConfigurationId)", "testcase": false, "constructor": false}, {"identifier": "startJobConfiguration", "parameters": "(final Long jobConfigurationId)", "modifiers": "@Override @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\") public", "return": "void", "signature": "void startJobConfiguration(final Long jobConfigurationId)", "full_signature": "@Override @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\") public void startJobConfiguration(final Long jobConfigurationId)", "class_method_signature": "DefaultAdminService.startJobConfiguration(final Long jobConfigurationId)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "DefaultAdminService.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "attachSchedulerStatus", "parameters": "(final Collection<JobConfiguration> jobConfigurations)", "modifiers": "private", "return": "void", "signature": "void attachSchedulerStatus(final Collection<JobConfiguration> jobConfigurations)", "full_signature": "private void attachSchedulerStatus(final Collection<JobConfiguration> jobConfigurations)", "class_method_signature": "DefaultAdminService.attachSchedulerStatus(final Collection<JobConfiguration> jobConfigurations)", "testcase": false, "constructor": false}, {"identifier": "attachSchedulerStatus", "parameters": "(final JobConfiguration jobConfiguration)", "modifiers": "private", "return": "void", "signature": "void attachSchedulerStatus(final JobConfiguration jobConfiguration)", "full_signature": "private void attachSchedulerStatus(final JobConfiguration jobConfiguration)", "class_method_signature": "DefaultAdminService.attachSchedulerStatus(final JobConfiguration jobConfiguration)", "testcase": false, "constructor": false}], "file": "spring-batch-lightmin-core/spring-batch-lightmin-core-service/src/main/java/org/tuxdevelop/spring/batch/lightmin/service/DefaultAdminService.java"}, "focal_method": {"identifier": "deleteJobConfiguration", "parameters": "(final Long jobConfigurationId)", "modifiers": "@Override @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\") public", "return": "void", "body": "@Override\n    @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\")\n    public void deleteJobConfiguration(final Long jobConfigurationId) {\n        try {\n            final JobConfiguration jobConfiguration = this.jobConfigurationRepository.getJobConfiguration(jobConfigurationId,\n                    this.springBatchLightminCoreConfigurationProperties.getApplicationName());\n            final JobSchedulerConfiguration jobSchedulerConfiguration = jobConfiguration.getJobSchedulerConfiguration();\n            final JobListenerConfiguration jobListenerConfiguration = jobConfiguration.getJobListenerConfiguration();\n            if (jobSchedulerConfiguration != null) {\n                final String beanName = jobSchedulerConfiguration.getBeanName();\n                this.schedulerService.terminate(beanName);\n                this.schedulerService.unregisterSchedulerForJob(beanName);\n                this.jobConfigurationRepository.delete(jobConfiguration,\n                        this.springBatchLightminCoreConfigurationProperties.getApplicationName());\n            }\n            if (jobListenerConfiguration != null) {\n                final String beanName = jobListenerConfiguration.getBeanName();\n                this.listenerService.terminateListener(beanName);\n                this.jobConfigurationRepository.delete(jobConfiguration,\n                        this.springBatchLightminCoreConfigurationProperties.getApplicationName());\n            }\n        } catch (final NoSuchJobConfigurationException e) {\n            log.error(e.getMessage());\n            throw new SpringBatchLightminApplicationException(e, e.getMessage());\n        }\n    }", "signature": "void deleteJobConfiguration(final Long jobConfigurationId)", "full_signature": "@Override @Transactional(propagation = Propagation.REQUIRED, transactionManager = \"lightminTransactionManager\") public void deleteJobConfiguration(final Long jobConfigurationId)", "class_method_signature": "DefaultAdminService.deleteJobConfiguration(final Long jobConfigurationId)", "testcase": false, "constructor": false, "invocations": ["getJobConfiguration", "getApplicationName", "getJobSchedulerConfiguration", "getJobListenerConfiguration", "getBeanName", "terminate", "unregisterSchedulerForJob", "delete", "getApplicationName", "getBeanName", "terminateListener", "delete", "getApplicationName", "error", "getMessage", "getMessage"]}, "repository": {"repo_id": 29479059, "url": "https://github.com/tuxdevelop/spring-batch-lightmin", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 109, "size": 12355, "license": "licensed"}}