{"test_class": {"identifier": "FileUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "shared/src/test/java/org/eclipse/steady/shared/util/FileUtilTest.java"}, "test_case": {"identifier": "testGetFileName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetFileName() {\n    final String name1 = FileUtil.getFileName(\"hello.min.js\", false);\n    assertEquals(\"hello.min\", name1);\n\n    final String name2 = FileUtil.getFileName(\"hello.js\", false);\n    assertEquals(\"hello\", name2);\n\n    final String name3 =\n        FileUtil.getFileName(Paths.get(\"./project/js/hello.io.min.js\").toString(), false);\n    assertEquals(\"hello.io.min\", name3);\n  }", "signature": "void testGetFileName()", "full_signature": "@Test public void testGetFileName()", "class_method_signature": "FileUtilTest.testGetFileName()", "testcase": true, "constructor": false, "invocations": ["getFileName", "assertEquals", "getFileName", "assertEquals", "getFileName", "toString", "get", "assertEquals"]}, "focal_class": {"identifier": "FileUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}], "methods": [{"identifier": "getFileExtension", "parameters": "(File _file)", "modifiers": "public static", "return": "String", "signature": "String getFileExtension(File _file)", "full_signature": "public static String getFileExtension(File _file)", "class_method_signature": "FileUtil.getFileExtension(File _file)", "testcase": false, "constructor": false}, {"identifier": "hasFileExtension", "parameters": "(Path _p, String[] _extensions)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasFileExtension(Path _p, String[] _extensions)", "full_signature": "public static boolean hasFileExtension(Path _p, String[] _extensions)", "class_method_signature": "FileUtil.hasFileExtension(Path _p, String[] _extensions)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Set<Path> _paths, String _sep)", "modifiers": "public static", "return": "String", "signature": "String toString(Set<Path> _paths, String _sep)", "full_signature": "public static String toString(Set<Path> _paths, String _sep)", "class_method_signature": "FileUtil.toString(Set<Path> _paths, String _sep)", "testcase": false, "constructor": false}, {"identifier": "createTmpDir", "parameters": "(String _prefix)", "modifiers": "public static", "return": "Path", "signature": "Path createTmpDir(String _prefix)", "full_signature": "public static Path createTmpDir(String _prefix)", "class_method_signature": "FileUtil.createTmpDir(String _prefix)", "testcase": false, "constructor": false}, {"identifier": "isAccessibleFile", "parameters": "(String _arg)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAccessibleFile(String _arg)", "full_signature": "public static boolean isAccessibleFile(String _arg)", "class_method_signature": "FileUtil.isAccessibleFile(String _arg)", "testcase": false, "constructor": false}, {"identifier": "isAccessibleFile", "parameters": "(Path _arg)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAccessibleFile(Path _arg)", "full_signature": "public static boolean isAccessibleFile(Path _arg)", "class_method_signature": "FileUtil.isAccessibleFile(Path _arg)", "testcase": false, "constructor": false}, {"identifier": "isAccessibleDirectory", "parameters": "(Path _dir)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isAccessibleDirectory(Path _dir)", "full_signature": "public static final boolean isAccessibleDirectory(Path _dir)", "class_method_signature": "FileUtil.isAccessibleDirectory(Path _dir)", "testcase": false, "constructor": false}, {"identifier": "isAccessibleDirectory", "parameters": "(File _dir)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isAccessibleDirectory(File _dir)", "full_signature": "public static final boolean isAccessibleDirectory(File _dir)", "class_method_signature": "FileUtil.isAccessibleDirectory(File _dir)", "testcase": false, "constructor": false}, {"identifier": "isAccessibleDirectory", "parameters": "(String _dir)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isAccessibleDirectory(String _dir)", "full_signature": "public static final boolean isAccessibleDirectory(String _dir)", "class_method_signature": "FileUtil.isAccessibleDirectory(String _dir)", "testcase": false, "constructor": false}, {"identifier": "createDirectory", "parameters": "(Path _p)", "modifiers": "public static final", "return": "void", "signature": "void createDirectory(Path _p)", "full_signature": "public static final void createDirectory(Path _p)", "class_method_signature": "FileUtil.createDirectory(Path _p)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(String _file_path)", "modifiers": "public static", "return": "String", "signature": "String getFileName(String _file_path)", "full_signature": "public static String getFileName(String _file_path)", "class_method_signature": "FileUtil.getFileName(String _file_path)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(String _file_path, boolean _keep_ext)", "modifiers": "public static", "return": "String", "signature": "String getFileName(String _file_path, boolean _keep_ext)", "full_signature": "public static String getFileName(String _file_path, boolean _keep_ext)", "class_method_signature": "FileUtil.getFileName(String _file_path, boolean _keep_ext)", "testcase": false, "constructor": false}, {"identifier": "getCharsetName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getCharsetName()", "full_signature": "public static String getCharsetName()", "class_method_signature": "FileUtil.getCharsetName()", "testcase": false, "constructor": false}, {"identifier": "getCharset", "parameters": "()", "modifiers": "public static", "return": "Charset", "signature": "Charset getCharset()", "full_signature": "public static Charset getCharset()", "class_method_signature": "FileUtil.getCharset()", "testcase": false, "constructor": false}, {"identifier": "copyFile", "parameters": "(Path _source_file, Path _target_dir)", "modifiers": "public static", "return": "Path", "signature": "Path copyFile(Path _source_file, Path _target_dir)", "full_signature": "public static Path copyFile(Path _source_file, Path _target_dir)", "class_method_signature": "FileUtil.copyFile(Path _source_file, Path _target_dir)", "testcase": false, "constructor": false}, {"identifier": "readFile", "parameters": "(String _p)", "modifiers": "public static", "return": "String", "signature": "String readFile(String _p)", "full_signature": "public static String readFile(String _p)", "class_method_signature": "FileUtil.readFile(String _p)", "testcase": false, "constructor": false}, {"identifier": "readFile", "parameters": "(Path _p)", "modifiers": "public static", "return": "String", "signature": "String readFile(Path _p)", "full_signature": "public static String readFile(Path _p)", "class_method_signature": "FileUtil.readFile(Path _p)", "testcase": false, "constructor": false}, {"identifier": "readInputStream", "parameters": "(InputStream _is, Charset _cs)", "modifiers": "public static", "return": "String", "signature": "String readInputStream(InputStream _is, Charset _cs)", "full_signature": "public static String readInputStream(InputStream _is, Charset _cs)", "class_method_signature": "FileUtil.readInputStream(InputStream _is, Charset _cs)", "testcase": false, "constructor": false}, {"identifier": "readInputStream", "parameters": "(InputStream _is)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readInputStream(InputStream _is)", "full_signature": "public static byte[] readInputStream(InputStream _is)", "class_method_signature": "FileUtil.readInputStream(InputStream _is)", "testcase": false, "constructor": false}, {"identifier": "writeToFile", "parameters": "(File _f, String _content)", "modifiers": "public static final", "return": "void", "signature": "void writeToFile(File _f, String _content)", "full_signature": "public static final void writeToFile(File _f, String _content)", "class_method_signature": "FileUtil.writeToFile(File _f, String _content)", "testcase": false, "constructor": false}, {"identifier": "writeToTmpFile", "parameters": "(String _filename, String _suffix, String _content)", "modifiers": "public static final", "return": "Path", "signature": "Path writeToTmpFile(String _filename, String _suffix, String _content)", "full_signature": "public static final Path writeToTmpFile(String _filename, String _suffix, String _content)", "class_method_signature": "FileUtil.writeToTmpFile(String _filename, String _suffix, String _content)", "testcase": false, "constructor": false}, {"identifier": "writeToFile", "parameters": "(File _f, byte[] _content)", "modifiers": "public static final", "return": "void", "signature": "void writeToFile(File _f, byte[] _content)", "full_signature": "public static final void writeToFile(File _f, byte[] _content)", "class_method_signature": "FileUtil.writeToFile(File _f, byte[] _content)", "testcase": false, "constructor": false}, {"identifier": "getPaths", "parameters": "(String[] _paths)", "modifiers": "public static", "return": "Set<Path>", "signature": "Set<Path> getPaths(String[] _paths)", "full_signature": "public static Set<Path> getPaths(String[] _paths)", "class_method_signature": "FileUtil.getPaths(String[] _paths)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "(String _path, boolean _create)", "modifiers": "public static", "return": "Path", "signature": "Path getPath(String _path, boolean _create)", "full_signature": "public static Path getPath(String _path, boolean _create)", "class_method_signature": "FileUtil.getPath(String _path, boolean _create)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "(String _path)", "modifiers": "public static", "return": "Path", "signature": "Path getPath(String _path)", "full_signature": "public static Path getPath(String _path)", "class_method_signature": "FileUtil.getPath(String _path)", "testcase": false, "constructor": false}, {"identifier": "getSHA1", "parameters": "(File _file)", "modifiers": "public static final", "return": "String", "signature": "String getSHA1(File _file)", "full_signature": "public static final String getSHA1(File _file)", "class_method_signature": "FileUtil.getSHA1(File _file)", "testcase": false, "constructor": false}, {"identifier": "getDigest", "parameters": "(File _file, DigestAlgorithm _alg)", "modifiers": "public static final", "return": "String", "signature": "String getDigest(File _file, DigestAlgorithm _alg)", "full_signature": "public static final String getDigest(File _file, DigestAlgorithm _alg)", "class_method_signature": "FileUtil.getDigest(File _file, DigestAlgorithm _alg)", "testcase": false, "constructor": false}, {"identifier": "getJarFilePath", "parameters": "(Class<?> _clazz)", "modifiers": "public static", "return": "String", "signature": "String getJarFilePath(Class<?> _clazz)", "full_signature": "public static String getJarFilePath(Class<?> _clazz)", "class_method_signature": "FileUtil.getJarFilePath(Class<?> _clazz)", "testcase": false, "constructor": false}, {"identifier": "getJarFilePath", "parameters": "(String _url)", "modifiers": "public static", "return": "String", "signature": "String getJarFilePath(String _url)", "full_signature": "public static String getJarFilePath(String _url)", "class_method_signature": "FileUtil.getJarFilePath(String _url)", "testcase": false, "constructor": false}, {"identifier": "getJarFilePathsForResources", "parameters": "(ClassLoader _cl, String[] _resources)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getJarFilePathsForResources(ClassLoader _cl, String[] _resources)", "full_signature": "public static Set<String> getJarFilePathsForResources(ClassLoader _cl, String[] _resources)", "class_method_signature": "FileUtil.getJarFilePathsForResources(ClassLoader _cl, String[] _resources)", "testcase": false, "constructor": false}, {"identifier": "getJarFilePaths", "parameters": "(URLClassLoader _cl)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getJarFilePaths(URLClassLoader _cl)", "full_signature": "public static Set<String> getJarFilePaths(URLClassLoader _cl)", "class_method_signature": "FileUtil.getJarFilePaths(URLClassLoader _cl)", "testcase": false, "constructor": false}, {"identifier": "isZipped", "parameters": "(File _f)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean isZipped(File _f)", "full_signature": "public static Boolean isZipped(File _f)", "class_method_signature": "FileUtil.isZipped(File _f)", "testcase": false, "constructor": false}], "file": "shared/src/main/java/org/eclipse/steady/shared/util/FileUtil.java"}, "focal_method": {"identifier": "getFileName", "parameters": "(String _file_path)", "modifiers": "public static", "return": "String", "body": "public static String getFileName(String _file_path) {\n    return FileUtil.getFileName(_file_path, true);\n  }", "signature": "String getFileName(String _file_path)", "full_signature": "public static String getFileName(String _file_path)", "class_method_signature": "FileUtil.getFileName(String _file_path)", "testcase": false, "constructor": false, "invocations": ["getFileName"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}