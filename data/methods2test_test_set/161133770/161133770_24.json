{"test_class": {"identifier": "RedisKeyPrefixSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RedisKey key =\n      RedisKey.newBuilder()\n          .setFeatureSet(\"project/featureSet\")\n          .addAllEntities(\n              Lists.newArrayList(\n                  FieldProto.Field.newBuilder()\n                      .setName(\"entity1\")\n                      .setValue(ValueProto.Value.newBuilder().setInt64Val(1))\n                      .build()))\n          .build();", "modifier": "private", "type": "RedisKey", "declarator": "key =\n      RedisKey.newBuilder()\n          .setFeatureSet(\"project/featureSet\")\n          .addAllEntities(\n              Lists.newArrayList(\n                  FieldProto.Field.newBuilder()\n                      .setName(\"entity1\")\n                      .setValue(ValueProto.Value.newBuilder().setInt64Val(1))\n                      .build()))\n          .build()", "var_name": "key"}], "file": "storage/connectors/redis/src/test/java/feast/storage/connectors/redis/serializer/RedisKeyPrefixSerializerTest.java"}, "test_case": {"identifier": "shouldNotPrependKeyIfEmptyString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldNotPrependKeyIfEmptyString() {\n    RedisKeyPrefixSerializer serializer = new RedisKeyPrefixSerializer(\"\");\n    assertArrayEquals(key.toByteArray(), serializer.serialize(key));\n  }", "signature": "void shouldNotPrependKeyIfEmptyString()", "full_signature": "@Test public void shouldNotPrependKeyIfEmptyString()", "class_method_signature": "RedisKeyPrefixSerializerTest.shouldNotPrependKeyIfEmptyString()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "toByteArray", "serialize"]}, "focal_class": {"identifier": "RedisKeyPrefixSerializer", "superclass": "", "interfaces": "implements RedisKeySerializer", "fields": [{"original_string": "private final byte[] prefixBytes;", "modifier": "private final", "type": "byte[]", "declarator": "prefixBytes", "var_name": "prefixBytes"}], "methods": [{"identifier": "RedisKeyPrefixSerializer", "parameters": "(String prefix)", "modifiers": "public", "return": "", "signature": " RedisKeyPrefixSerializer(String prefix)", "full_signature": "public  RedisKeyPrefixSerializer(String prefix)", "class_method_signature": "RedisKeyPrefixSerializer.RedisKeyPrefixSerializer(String prefix)", "testcase": false, "constructor": true}, {"identifier": "serialize", "parameters": "(RedisKey redisKey)", "modifiers": "public", "return": "byte[]", "signature": "byte[] serialize(RedisKey redisKey)", "full_signature": "public byte[] serialize(RedisKey redisKey)", "class_method_signature": "RedisKeyPrefixSerializer.serialize(RedisKey redisKey)", "testcase": false, "constructor": false}], "file": "storage/connectors/redis/src/main/java/feast/storage/connectors/redis/serializer/RedisKeyPrefixSerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(RedisKey redisKey)", "modifiers": "public", "return": "byte[]", "body": "public byte[] serialize(RedisKey redisKey) {\n    byte[] key = redisKey.toByteArray();\n\n    if (prefixBytes.length == 0) {\n      return key;\n    }\n\n    byte[] keyWithPrefix = new byte[prefixBytes.length + key.length];\n    System.arraycopy(prefixBytes, 0, keyWithPrefix, 0, prefixBytes.length);\n    System.arraycopy(key, 0, keyWithPrefix, prefixBytes.length, key.length);\n    return keyWithPrefix;\n  }", "signature": "byte[] serialize(RedisKey redisKey)", "full_signature": "public byte[] serialize(RedisKey redisKey)", "class_method_signature": "RedisKeyPrefixSerializer.serialize(RedisKey redisKey)", "testcase": false, "constructor": false, "invocations": ["toByteArray", "arraycopy", "arraycopy"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}