{"test_class": {"identifier": "DataWordTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/vm/DataWordTest.java"}, "test_case": {"identifier": "testDiv", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDiv() {\n        byte[] one = new byte[32];\n        one[30] = 0x01;\n        one[31] = 0x2c; // 0x000000000000000000000000000000000000000000000000000000000000012c\n\n        byte[] two = new byte[32];\n        two[31] = 0x0f; // 0x000000000000000000000000000000000000000000000000000000000000000f\n\n        DataWord x = DataWord.of(one);\n        DataWord y = DataWord.of(two);\n        DataWord actual = x.div(y);\n\n        assertEquals(32, x.getData().length);\n        assertEquals(\"0000000000000000000000000000000000000000000000000000000000000014\", Hex.toHexString(actual.getData()));\n    }", "signature": "void testDiv()", "full_signature": "@Test public void testDiv()", "class_method_signature": "DataWordTest.testDiv()", "testcase": true, "constructor": false, "invocations": ["of", "of", "div", "assertEquals", "getData", "assertEquals", "toHexString", "getData"]}, "focal_class": {"identifier": "DataWord", "superclass": "", "interfaces": "implements Comparable<DataWord>", "fields": [{"original_string": "public static final int MAX_POW = 256;", "modifier": "public static final", "type": "int", "declarator": "MAX_POW = 256", "var_name": "MAX_POW"}, {"original_string": "public static final BigInteger _2_256 = BigInteger.valueOf(2).pow(MAX_POW);", "modifier": "public static final", "type": "BigInteger", "declarator": "_2_256 = BigInteger.valueOf(2).pow(MAX_POW)", "var_name": "_2_256"}, {"original_string": "public static final BigInteger MAX_VALUE = _2_256.subtract(BigInteger.ONE);", "modifier": "public static final", "type": "BigInteger", "declarator": "MAX_VALUE = _2_256.subtract(BigInteger.ONE)", "var_name": "MAX_VALUE"}, {"original_string": "public static final DataWord ZERO = new DataWord(new byte[32]);", "modifier": "public static final", "type": "DataWord", "declarator": "ZERO = new DataWord(new byte[32])", "var_name": "ZERO"}, {"original_string": "public static final DataWord ONE = DataWord.of((byte) 1);", "modifier": "public static final", "type": "DataWord", "declarator": "ONE = DataWord.of((byte) 1)", "var_name": "ONE"}, {"original_string": "public static final long MEM_SIZE = 32 + 16 + 16;", "modifier": "public static final", "type": "long", "declarator": "MEM_SIZE = 32 + 16 + 16", "var_name": "MEM_SIZE"}, {"original_string": "private final byte[] data;", "modifier": "private final", "type": "byte[]", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "DataWord", "parameters": "(byte[] data)", "modifiers": "private", "return": "", "signature": " DataWord(byte[] data)", "full_signature": "private  DataWord(byte[] data)", "class_method_signature": "DataWord.DataWord(byte[] data)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(byte[] data)", "modifiers": "public static", "return": "DataWord", "signature": "DataWord of(byte[] data)", "full_signature": "public static DataWord of(byte[] data)", "class_method_signature": "DataWord.of(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(ByteArrayWrapper wrappedData)", "modifiers": "public static", "return": "DataWord", "signature": "DataWord of(ByteArrayWrapper wrappedData)", "full_signature": "public static DataWord of(ByteArrayWrapper wrappedData)", "class_method_signature": "DataWord.of(ByteArrayWrapper wrappedData)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(String data)", "modifiers": "@JsonCreator public static", "return": "DataWord", "signature": "DataWord of(String data)", "full_signature": "@JsonCreator public static DataWord of(String data)", "class_method_signature": "DataWord.of(String data)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(byte num)", "modifiers": "public static", "return": "DataWord", "signature": "DataWord of(byte num)", "full_signature": "public static DataWord of(byte num)", "class_method_signature": "DataWord.of(byte num)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(int num)", "modifiers": "public static", "return": "DataWord", "signature": "DataWord of(int num)", "full_signature": "public static DataWord of(int num)", "class_method_signature": "DataWord.of(int num)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(long num)", "modifiers": "public static", "return": "DataWord", "signature": "DataWord of(long num)", "full_signature": "public static DataWord of(long num)", "class_method_signature": "DataWord.of(long num)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getData()", "full_signature": "public byte[] getData()", "class_method_signature": "DataWord.getData()", "testcase": false, "constructor": false}, {"identifier": "copyData", "parameters": "()", "modifiers": "private", "return": "byte[]", "signature": "byte[] copyData()", "full_signature": "private byte[] copyData()", "class_method_signature": "DataWord.copyData()", "testcase": false, "constructor": false}, {"identifier": "getNoLeadZeroesData", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getNoLeadZeroesData()", "full_signature": "public byte[] getNoLeadZeroesData()", "class_method_signature": "DataWord.getNoLeadZeroesData()", "testcase": false, "constructor": false}, {"identifier": "getLast20Bytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getLast20Bytes()", "full_signature": "public byte[] getLast20Bytes()", "class_method_signature": "DataWord.getLast20Bytes()", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger value()", "full_signature": "public BigInteger value()", "class_method_signature": "DataWord.value()", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int intValue()", "full_signature": "public int intValue()", "class_method_signature": "DataWord.intValue()", "testcase": false, "constructor": false}, {"identifier": "intValueSafe", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int intValueSafe()", "full_signature": "public int intValueSafe()", "class_method_signature": "DataWord.intValueSafe()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long longValue()", "full_signature": "public long longValue()", "class_method_signature": "DataWord.longValue()", "testcase": false, "constructor": false}, {"identifier": "longValueSafe", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long longValueSafe()", "full_signature": "public long longValueSafe()", "class_method_signature": "DataWord.longValueSafe()", "testcase": false, "constructor": false}, {"identifier": "sValue", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger sValue()", "full_signature": "public BigInteger sValue()", "class_method_signature": "DataWord.sValue()", "testcase": false, "constructor": false}, {"identifier": "bigIntValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String bigIntValue()", "full_signature": "public String bigIntValue()", "class_method_signature": "DataWord.bigIntValue()", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isZero()", "full_signature": "public boolean isZero()", "class_method_signature": "DataWord.isZero()", "testcase": false, "constructor": false}, {"identifier": "isNegative", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNegative()", "full_signature": "public boolean isNegative()", "class_method_signature": "DataWord.isNegative()", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "signature": "DataWord and(DataWord word)", "full_signature": "public DataWord and(DataWord word)", "class_method_signature": "DataWord.and(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "signature": "DataWord or(DataWord word)", "full_signature": "public DataWord or(DataWord word)", "class_method_signature": "DataWord.or(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "signature": "DataWord xor(DataWord word)", "full_signature": "public DataWord xor(DataWord word)", "class_method_signature": "DataWord.xor(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "public", "return": "DataWord", "signature": "DataWord negate()", "full_signature": "public DataWord negate()", "class_method_signature": "DataWord.negate()", "testcase": false, "constructor": false}, {"identifier": "bnot", "parameters": "()", "modifiers": "public", "return": "DataWord", "signature": "DataWord bnot()", "full_signature": "public DataWord bnot()", "class_method_signature": "DataWord.bnot()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "signature": "DataWord add(DataWord word)", "full_signature": "public DataWord add(DataWord word)", "class_method_signature": "DataWord.add(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "add2", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "signature": "DataWord add2(DataWord word)", "full_signature": "public DataWord add2(DataWord word)", "class_method_signature": "DataWord.add2(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "mul", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "signature": "DataWord mul(DataWord word)", "full_signature": "public DataWord mul(DataWord word)", "class_method_signature": "DataWord.mul(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "signature": "DataWord div(DataWord word)", "full_signature": "public DataWord div(DataWord word)", "class_method_signature": "DataWord.div(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "sDiv", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "signature": "DataWord sDiv(DataWord word)", "full_signature": "public DataWord sDiv(DataWord word)", "class_method_signature": "DataWord.sDiv(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "signature": "DataWord sub(DataWord word)", "full_signature": "public DataWord sub(DataWord word)", "class_method_signature": "DataWord.sub(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "exp", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "signature": "DataWord exp(DataWord word)", "full_signature": "public DataWord exp(DataWord word)", "class_method_signature": "DataWord.exp(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "mod", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "signature": "DataWord mod(DataWord word)", "full_signature": "public DataWord mod(DataWord word)", "class_method_signature": "DataWord.mod(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "sMod", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "signature": "DataWord sMod(DataWord word)", "full_signature": "public DataWord sMod(DataWord word)", "class_method_signature": "DataWord.sMod(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "addmod", "parameters": "(DataWord word1, DataWord word2)", "modifiers": "public", "return": "DataWord", "signature": "DataWord addmod(DataWord word1, DataWord word2)", "full_signature": "public DataWord addmod(DataWord word1, DataWord word2)", "class_method_signature": "DataWord.addmod(DataWord word1, DataWord word2)", "testcase": false, "constructor": false}, {"identifier": "mulmod", "parameters": "(DataWord word1, DataWord word2)", "modifiers": "public", "return": "DataWord", "signature": "DataWord mulmod(DataWord word1, DataWord word2)", "full_signature": "public DataWord mulmod(DataWord word1, DataWord word2)", "class_method_signature": "DataWord.mulmod(DataWord word1, DataWord word2)", "testcase": false, "constructor": false}, {"identifier": "shiftLeft", "parameters": "(DataWord arg)", "modifiers": "public", "return": "DataWord", "signature": "DataWord shiftLeft(DataWord arg)", "full_signature": "public DataWord shiftLeft(DataWord arg)", "class_method_signature": "DataWord.shiftLeft(DataWord arg)", "testcase": false, "constructor": false}, {"identifier": "shiftRight", "parameters": "(DataWord arg)", "modifiers": "public", "return": "DataWord", "signature": "DataWord shiftRight(DataWord arg)", "full_signature": "public DataWord shiftRight(DataWord arg)", "class_method_signature": "DataWord.shiftRight(DataWord arg)", "testcase": false, "constructor": false}, {"identifier": "shiftRightSigned", "parameters": "(DataWord arg)", "modifiers": "public", "return": "DataWord", "signature": "DataWord shiftRightSigned(DataWord arg)", "full_signature": "public DataWord shiftRightSigned(DataWord arg)", "class_method_signature": "DataWord.shiftRightSigned(DataWord arg)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@JsonValue @Override public", "return": "String", "signature": "String toString()", "full_signature": "@JsonValue @Override public String toString()", "class_method_signature": "DataWord.toString()", "testcase": false, "constructor": false}, {"identifier": "toPrefixString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toPrefixString()", "full_signature": "public String toPrefixString()", "class_method_signature": "DataWord.toPrefixString()", "testcase": false, "constructor": false}, {"identifier": "shortHex", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String shortHex()", "full_signature": "public String shortHex()", "class_method_signature": "DataWord.shortHex()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "DataWord.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DataWord.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(DataWord o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(DataWord o)", "full_signature": "@Override public int compareTo(DataWord o)", "class_method_signature": "DataWord.compareTo(DataWord o)", "testcase": false, "constructor": false}, {"identifier": "signExtend", "parameters": "(byte k)", "modifiers": "public", "return": "DataWord", "signature": "DataWord signExtend(byte k)", "full_signature": "public DataWord signExtend(byte k)", "class_method_signature": "DataWord.signExtend(byte k)", "testcase": false, "constructor": false}, {"identifier": "bytesOccupied", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int bytesOccupied()", "full_signature": "public int bytesOccupied()", "class_method_signature": "DataWord.bytesOccupied()", "testcase": false, "constructor": false}, {"identifier": "isHex", "parameters": "(String hex)", "modifiers": "public", "return": "boolean", "signature": "boolean isHex(String hex)", "full_signature": "public boolean isHex(String hex)", "class_method_signature": "DataWord.isHex(String hex)", "testcase": false, "constructor": false}, {"identifier": "asString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String asString()", "full_signature": "public String asString()", "class_method_signature": "DataWord.asString()", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/vm/DataWord.java"}, "focal_method": {"identifier": "div", "parameters": "(DataWord word)", "modifiers": "public", "return": "DataWord", "body": "public DataWord div(DataWord word) {\n\n        if (word.isZero()) {\n            return ZERO;\n        }\n\n        BigInteger result = value().divide(word.value());\n        return new DataWord(ByteUtil.copyToArray(result.and(MAX_VALUE)));\n    }", "signature": "DataWord div(DataWord word)", "full_signature": "public DataWord div(DataWord word)", "class_method_signature": "DataWord.div(DataWord word)", "testcase": false, "constructor": false, "invocations": ["isZero", "divide", "value", "value", "copyToArray", "and"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}