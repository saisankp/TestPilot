{"test_class": {"identifier": "IdGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(IdGeneratorTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(IdGeneratorTest.class.getName())", "var_name": "log"}], "file": "idgen/src/test/java/org/cloudname/idgen/IdGeneratorTest.java"}, "test_case": {"identifier": "testCustomWorkerId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testCustomWorkerId() {\n        IdGenerator worker100 = new IdGenerator(100);\n\n        IdGenerator worker200 = new IdGenerator(200);\n\n        assertTrue(\"Different worker id yields different id\",\n                worker100.getNextId() != worker200.getNextId());\n    }", "signature": "void testCustomWorkerId()", "full_signature": "@Test public void testCustomWorkerId()", "class_method_signature": "IdGeneratorTest.testCustomWorkerId()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getNextId", "getNextId"]}, "focal_class": {"identifier": "IdGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(IdGenerator.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(IdGenerator.class.getName())", "var_name": "log"}, {"original_string": "private static final TimeProvider defaultTimeProvider = new TimeProvider() {\n            @Override\n            public long getTimeInMillis() {\n                return System.currentTimeMillis();\n            }\n        };", "modifier": "private static final", "type": "TimeProvider", "declarator": "defaultTimeProvider = new TimeProvider() {\n            @Override\n            public long getTimeInMillis() {\n                return System.currentTimeMillis();\n            }\n        }", "var_name": "defaultTimeProvider"}, {"original_string": "private static final int DEFAULT_NUM_BITS_WORKER_ID = 12;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_NUM_BITS_WORKER_ID = 12", "var_name": "DEFAULT_NUM_BITS_WORKER_ID"}, {"original_string": "private static final int DEFAULT_NUM_BITS_SEQUENCE  = 12;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_NUM_BITS_SEQUENCE  = 12", "var_name": "DEFAULT_NUM_BITS_SEQUENCE"}, {"original_string": "private final long timestampBitMask;", "modifier": "private final", "type": "long", "declarator": "timestampBitMask", "var_name": "timestampBitMask"}, {"original_string": "private final long workerIdBitMask;", "modifier": "private final", "type": "long", "declarator": "workerIdBitMask", "var_name": "workerIdBitMask"}, {"original_string": "private final long sequenceBitMask;", "modifier": "private final", "type": "long", "declarator": "sequenceBitMask", "var_name": "sequenceBitMask"}, {"original_string": "private final int timestampLeftShiftBy;", "modifier": "private final", "type": "int", "declarator": "timestampLeftShiftBy", "var_name": "timestampLeftShiftBy"}, {"original_string": "private final int workerLeftShiftBy;", "modifier": "private final", "type": "int", "declarator": "workerLeftShiftBy", "var_name": "workerLeftShiftBy"}, {"original_string": "private TimeProvider timeProvider;", "modifier": "private", "type": "TimeProvider", "declarator": "timeProvider", "var_name": "timeProvider"}, {"original_string": "private long workerId = 0L;", "modifier": "private", "type": "long", "declarator": "workerId = 0L", "var_name": "workerId"}, {"original_string": "private long prevTimestamp = Long.MIN_VALUE;", "modifier": "private", "type": "long", "declarator": "prevTimestamp = Long.MIN_VALUE", "var_name": "prevTimestamp"}, {"original_string": "private long sequence = 0L;", "modifier": "private", "type": "long", "declarator": "sequence = 0L", "var_name": "sequence"}, {"original_string": "private final Object syncObject = new Object();", "modifier": "private final", "type": "Object", "declarator": "syncObject = new Object()", "var_name": "syncObject"}], "methods": [{"identifier": "IdGenerator", "parameters": "(final long workerId)", "modifiers": "public", "return": "", "signature": " IdGenerator(final long workerId)", "full_signature": "public  IdGenerator(final long workerId)", "class_method_signature": "IdGenerator.IdGenerator(final long workerId)", "testcase": false, "constructor": true}, {"identifier": "IdGenerator", "parameters": "(final long workerId, final TimeProvider timeProvider)", "modifiers": "public", "return": "", "signature": " IdGenerator(final long workerId, final TimeProvider timeProvider)", "full_signature": "public  IdGenerator(final long workerId, final TimeProvider timeProvider)", "class_method_signature": "IdGenerator.IdGenerator(final long workerId, final TimeProvider timeProvider)", "testcase": false, "constructor": true}, {"identifier": "IdGenerator", "parameters": "(final long workerId, final int numBitsWorkerId, final int numBitsSequence)", "modifiers": "public", "return": "", "signature": " IdGenerator(final long workerId, final int numBitsWorkerId, final int numBitsSequence)", "full_signature": "public  IdGenerator(final long workerId, final int numBitsWorkerId, final int numBitsSequence)", "class_method_signature": "IdGenerator.IdGenerator(final long workerId, final int numBitsWorkerId, final int numBitsSequence)", "testcase": false, "constructor": true}, {"identifier": "IdGenerator", "parameters": "(final long workerId, final TimeProvider timeProvider,\n                       final int numBitsWorkerId, final int numBitsSequence)", "modifiers": "public", "return": "", "signature": " IdGenerator(final long workerId, final TimeProvider timeProvider,\n                       final int numBitsWorkerId, final int numBitsSequence)", "full_signature": "public  IdGenerator(final long workerId, final TimeProvider timeProvider,\n                       final int numBitsWorkerId, final int numBitsSequence)", "class_method_signature": "IdGenerator.IdGenerator(final long workerId, final TimeProvider timeProvider,\n                       final int numBitsWorkerId, final int numBitsSequence)", "testcase": false, "constructor": true}, {"identifier": "getNextId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNextId()", "full_signature": "public long getNextId()", "class_method_signature": "IdGenerator.getNextId()", "testcase": false, "constructor": false}, {"identifier": "getNextIdHex", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNextIdHex()", "full_signature": "public String getNextIdHex()", "class_method_signature": "IdGenerator.getNextIdHex()", "testcase": false, "constructor": false}, {"identifier": "buildKey", "parameters": "(final long timestamp, final long workerId, final long sequence)", "modifiers": "private", "return": "long", "signature": "long buildKey(final long timestamp, final long workerId, final long sequence)", "full_signature": "private long buildKey(final long timestamp, final long workerId, final long sequence)", "class_method_signature": "IdGenerator.buildKey(final long timestamp, final long workerId, final long sequence)", "testcase": false, "constructor": false}, {"identifier": "makeLongBitMask", "parameters": "(final int bitsToSet)", "modifiers": "private static", "return": "long", "signature": "long makeLongBitMask(final int bitsToSet)", "full_signature": "private static long makeLongBitMask(final int bitsToSet)", "class_method_signature": "IdGenerator.makeLongBitMask(final int bitsToSet)", "testcase": false, "constructor": false}, {"identifier": "getWorkerId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getWorkerId()", "full_signature": "public long getWorkerId()", "class_method_signature": "IdGenerator.getWorkerId()", "testcase": false, "constructor": false}], "file": "idgen/src/main/java/org/cloudname/idgen/IdGenerator.java"}, "focal_method": {"identifier": "getNextId", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long getNextId() {\n\n        synchronized (syncObject) {\n            long timestamp = timeProvider.getTimeInMillis();\n\n            // Deal with the simple case first.\n            if (prevTimestamp < timestamp) {\n                sequence = 0L;\n                prevTimestamp = timestamp;\n                return buildKey(timestamp, workerId, sequence);\n            }\n\n            // TRICK: If the clock has gone backwards we can still use\n            // the sequence counter to generate unique IDs, so we\n            // reset the timestamp to prevTimestamp and try our luck\n            // with the sequence counter\n            timestamp = prevTimestamp;\n\n            // Invariant: we have handed out an ID for this timestamp\n\n            // Increment and wrap\n            sequence = ((sequence + 1) & sequenceBitMask);\n            if (0L == sequence) {\n                // The sequence has wrapped so we cheat and advance\n                // the timestamp by 1ms\n                timestamp++;\n                log.info(\"Cheating, advancing timestamp by 1ms. workerId = \" + workerId);\n                prevTimestamp = timestamp;\n            }\n\n            return buildKey(timestamp, workerId, sequence);\n        }\n    }", "signature": "long getNextId()", "full_signature": "public long getNextId()", "class_method_signature": "IdGenerator.getNextId()", "testcase": false, "constructor": false, "invocations": ["getTimeInMillis", "buildKey", "info", "buildKey"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}