{"test_class": {"identifier": "IteratorArrayTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/regression/isotonicReg/IteratorArrayTest.java"}, "test_case": {"identifier": "iteratorArrayTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void iteratorArrayTest() {\n        IteratorArray iteratorArray = new IteratorArray(10, 1);\n        Assert.assertEquals(iteratorArray.getPoint(), 1);\n        Assert.assertTrue(iteratorArray.hasPrevious());\n        Assert.assertTrue(iteratorArray.hasNext());\n        iteratorArray.retreat();\n        Assert.assertFalse(iteratorArray.hasPrevious());\n        Assert.assertEquals(iteratorArray.getPoint(), 0);\n        iteratorArray = new IteratorArray(10, 9);\n        Assert.assertFalse(iteratorArray.hasNext());\n    }", "signature": "void iteratorArrayTest()", "full_signature": "@Test public void iteratorArrayTest()", "class_method_signature": "IteratorArrayTest.iteratorArrayTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getPoint", "assertTrue", "hasPrevious", "assertTrue", "hasNext", "retreat", "assertFalse", "hasPrevious", "assertEquals", "getPoint", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "IteratorArray", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int[] prevIndex;", "modifier": "private", "type": "int[]", "declarator": "prevIndex", "var_name": "prevIndex"}, {"original_string": "private int[] nextIndex;", "modifier": "private", "type": "int[]", "declarator": "nextIndex", "var_name": "nextIndex"}, {"original_string": "private int point;", "modifier": "private", "type": "int", "declarator": "point", "var_name": "point"}], "methods": [{"identifier": "IteratorArray", "parameters": "(int length, int point)", "modifiers": "", "return": "", "signature": " IteratorArray(int length, int point)", "full_signature": "  IteratorArray(int length, int point)", "class_method_signature": "IteratorArray.IteratorArray(int length, int point)", "testcase": false, "constructor": true}, {"identifier": "hasPrevious", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean hasPrevious()", "full_signature": " boolean hasPrevious()", "class_method_signature": "IteratorArray.hasPrevious()", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean hasNext()", "full_signature": " boolean hasNext()", "class_method_signature": "IteratorArray.hasNext()", "testcase": false, "constructor": false}, {"identifier": "advance", "parameters": "()", "modifiers": "", "return": "void", "signature": "void advance()", "full_signature": " void advance()", "class_method_signature": "IteratorArray.advance()", "testcase": false, "constructor": false}, {"identifier": "retreat", "parameters": "()", "modifiers": "", "return": "void", "signature": "void retreat()", "full_signature": " void retreat()", "class_method_signature": "IteratorArray.retreat()", "testcase": false, "constructor": false}, {"identifier": "removeCurrentAndRetreat", "parameters": "()", "modifiers": "", "return": "void", "signature": "void removeCurrentAndRetreat()", "full_signature": " void removeCurrentAndRetreat()", "class_method_signature": "IteratorArray.removeCurrentAndRetreat()", "testcase": false, "constructor": false}, {"identifier": "initializePoint", "parameters": "()", "modifiers": "", "return": "void", "signature": "void initializePoint()", "full_signature": " void initializePoint()", "class_method_signature": "IteratorArray.initializePoint()", "testcase": false, "constructor": false}, {"identifier": "getPoint", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getPoint()", "full_signature": " int getPoint()", "class_method_signature": "IteratorArray.getPoint()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/regression/isotonicReg/IteratorArray.java"}, "focal_method": {"identifier": "IteratorArray", "parameters": "(int length, int point)", "modifiers": "", "return": "", "body": "IteratorArray(int length, int point) {\n        Preconditions.checkArgument(length > 0, \"length must be positive!\");\n        Preconditions.checkArgument(point < length && point >= 0, \"point out of range!\");\n        this.prevIndex = new int[length];\n        this.nextIndex = new int[length];\n        for (int i = 0; i < length; i++) {\n            this.prevIndex[i] = i - 1;\n            this.nextIndex[i] = i + 1;\n        }\n        this.nextIndex[length - 1] = -1;\n        this.point = point;\n    }", "signature": " IteratorArray(int length, int point)", "full_signature": "  IteratorArray(int length, int point)", "class_method_signature": "IteratorArray.IteratorArray(int length, int point)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}