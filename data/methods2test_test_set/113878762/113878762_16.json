{"test_class": {"identifier": "QueuesTest", "superclass": "", "interfaces": "", "fields": [], "file": "migration/third-party/org.mapdb/src/test/java/org/mapdb/QueuesTest.java"}, "test_case": {"identifier": "stack_persisted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void stack_persisted(){\n        File f = Utils.tempDbFile();\n        DB db = DBMaker.newFileDB(f).journalDisable().cacheDisable().asyncWriteDisable().make();\n        Queue<Object> stack = db.getStack(\"test\");\n        stack.add(\"1\");\n        stack.add(\"2\");\n        stack.add(\"3\");\n        stack.add(\"4\");\n\n        db.close();\n        db = DBMaker.newFileDB(f).journalDisable().cacheDisable().asyncWriteDisable().deleteFilesAfterClose().make();\n        stack = db.getStack(\"test\");\n\n        assertEquals(\"4\",stack.poll());\n        assertEquals(\"3\",stack.poll());\n        assertEquals(\"2\",stack.poll());\n        assertEquals(\"1\",stack.poll());\n        assertNull(stack.poll());\n        db.close();\n    }", "signature": "void stack_persisted()", "full_signature": "@Test public void stack_persisted()", "class_method_signature": "QueuesTest.stack_persisted()", "testcase": true, "constructor": false, "invocations": ["tempDbFile", "make", "asyncWriteDisable", "cacheDisable", "journalDisable", "newFileDB", "getStack", "add", "add", "add", "add", "close", "make", "deleteFilesAfterClose", "asyncWriteDisable", "cacheDisable", "journalDisable", "newFileDB", "getStack", "assertEquals", "poll", "assertEquals", "poll", "assertEquals", "poll", "assertEquals", "poll", "assertNull", "poll", "close"]}, "focal_class": {"identifier": "Queues", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Queues", "parameters": "()", "modifiers": "private", "return": "", "signature": " Queues()", "full_signature": "private  Queues()", "class_method_signature": "Queues.Queues()", "testcase": false, "constructor": true}, {"identifier": "createStack", "parameters": "(Engine engine, Serializer<Serializer> serializerSerializer, Serializer<E> serializer, boolean useLocks)", "modifiers": "static", "return": "long", "signature": "long createStack(Engine engine, Serializer<Serializer> serializerSerializer, Serializer<E> serializer, boolean useLocks)", "full_signature": "static long createStack(Engine engine, Serializer<Serializer> serializerSerializer, Serializer<E> serializer, boolean useLocks)", "class_method_signature": "Queues.createStack(Engine engine, Serializer<Serializer> serializerSerializer, Serializer<E> serializer, boolean useLocks)", "testcase": false, "constructor": false}, {"identifier": "getStack", "parameters": "(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "modifiers": "static", "return": "Stack<E>", "signature": "Stack<E> getStack(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "full_signature": "static Stack<E> getStack(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "class_method_signature": "Queues.getStack(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "testcase": false, "constructor": false}, {"identifier": "createQueue", "parameters": "(Engine engine, Serializer<Serializer> serializerSerializer, Serializer<E> serializer)", "modifiers": "static", "return": "long", "signature": "long createQueue(Engine engine, Serializer<Serializer> serializerSerializer, Serializer<E> serializer)", "full_signature": "static long createQueue(Engine engine, Serializer<Serializer> serializerSerializer, Serializer<E> serializer)", "class_method_signature": "Queues.createQueue(Engine engine, Serializer<Serializer> serializerSerializer, Serializer<E> serializer)", "testcase": false, "constructor": false}, {"identifier": "getQueue", "parameters": "(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "modifiers": "static", "return": "Queue<E>", "signature": "Queue<E> getQueue(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "full_signature": "static Queue<E> getQueue(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "class_method_signature": "Queues.getQueue(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "testcase": false, "constructor": false}, {"identifier": "createCircularQueue", "parameters": "(Engine engine, Serializer<Serializer> serializerSerializer, Serializer<E> serializer, long size)", "modifiers": "static", "return": "long", "signature": "long createCircularQueue(Engine engine, Serializer<Serializer> serializerSerializer, Serializer<E> serializer, long size)", "full_signature": "static long createCircularQueue(Engine engine, Serializer<Serializer> serializerSerializer, Serializer<E> serializer, long size)", "class_method_signature": "Queues.createCircularQueue(Engine engine, Serializer<Serializer> serializerSerializer, Serializer<E> serializer, long size)", "testcase": false, "constructor": false}, {"identifier": "getCircularQueue", "parameters": "(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "modifiers": "static", "return": "CircularQueue<E>", "signature": "CircularQueue<E> getCircularQueue(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "full_signature": "static CircularQueue<E> getCircularQueue(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "class_method_signature": "Queues.getCircularQueue(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "testcase": false, "constructor": false}], "file": "migration/third-party/org.mapdb/src/main/java/org/mapdb/Queues.java"}, "focal_method": {"identifier": "getStack", "parameters": "(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "modifiers": "static", "return": "Stack<E>", "body": "static <E> Stack<E> getStack(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid){\n        StackRoot root = engine.get(rootRecid, new StackRootSerializer(serializerSerializer));\n        return new Stack<E>(engine, root.serializer, root.headerRecid, root.useLocks);\n    }", "signature": "Stack<E> getStack(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "full_signature": "static Stack<E> getStack(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "class_method_signature": "Queues.getStack(Engine engine, Serializer<Serializer> serializerSerializer, long rootRecid)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 113878762, "url": "https://github.com/crossminer/scava", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 16, "size": 1903904, "license": "licensed"}}