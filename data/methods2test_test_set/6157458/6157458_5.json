{"test_class": {"identifier": "DefaultPluginStatusProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@TempDir\n    Path pluginsPath;", "modifier": "@TempDir", "type": "Path", "declarator": "pluginsPath", "var_name": "pluginsPath"}], "file": "pf4j/src/test/java/org/pf4j/DefaultPluginStatusProviderTest.java"}, "test_case": {"identifier": "testDisablePlugin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDisablePlugin() throws Exception {\n        createEnabledFile();\n        createDisabledFile();\n\n        PluginStatusProvider statusProvider = new DefaultPluginStatusProvider(pluginsPath);\n        statusProvider.disablePlugin(\"plugin-1\");\n\n        assertTrue(statusProvider.isPluginDisabled(\"plugin-1\"));\n        assertTrue(statusProvider.isPluginDisabled(\"plugin-2\"));\n        assertTrue(statusProvider.isPluginDisabled(\"plugin-3\"));\n    }", "signature": "void testDisablePlugin()", "full_signature": "@Test public void testDisablePlugin()", "class_method_signature": "DefaultPluginStatusProviderTest.testDisablePlugin()", "testcase": true, "constructor": false, "invocations": ["createEnabledFile", "createDisabledFile", "disablePlugin", "assertTrue", "isPluginDisabled", "assertTrue", "isPluginDisabled", "assertTrue", "isPluginDisabled"]}, "focal_class": {"identifier": "DefaultPluginStatusProvider", "superclass": "", "interfaces": "implements PluginStatusProvider", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DefaultPluginStatusProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DefaultPluginStatusProvider.class)", "var_name": "log"}, {"original_string": "private final Path pluginsRoot;", "modifier": "private final", "type": "Path", "declarator": "pluginsRoot", "var_name": "pluginsRoot"}, {"original_string": "private List<String> enabledPlugins;", "modifier": "private", "type": "List<String>", "declarator": "enabledPlugins", "var_name": "enabledPlugins"}, {"original_string": "private List<String> disabledPlugins;", "modifier": "private", "type": "List<String>", "declarator": "disabledPlugins", "var_name": "disabledPlugins"}], "methods": [{"identifier": "DefaultPluginStatusProvider", "parameters": "(Path pluginsRoot)", "modifiers": "public", "return": "", "signature": " DefaultPluginStatusProvider(Path pluginsRoot)", "full_signature": "public  DefaultPluginStatusProvider(Path pluginsRoot)", "class_method_signature": "DefaultPluginStatusProvider.DefaultPluginStatusProvider(Path pluginsRoot)", "testcase": false, "constructor": true}, {"identifier": "isPluginDisabled", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPluginDisabled(String pluginId)", "full_signature": "@Override public boolean isPluginDisabled(String pluginId)", "class_method_signature": "DefaultPluginStatusProvider.isPluginDisabled(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "disablePlugin", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "void", "signature": "void disablePlugin(String pluginId)", "full_signature": "@Override public void disablePlugin(String pluginId)", "class_method_signature": "DefaultPluginStatusProvider.disablePlugin(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "enablePlugin", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "void", "signature": "void enablePlugin(String pluginId)", "full_signature": "@Override public void enablePlugin(String pluginId)", "class_method_signature": "DefaultPluginStatusProvider.enablePlugin(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "getEnabledFilePath", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getEnabledFilePath()", "full_signature": "public Path getEnabledFilePath()", "class_method_signature": "DefaultPluginStatusProvider.getEnabledFilePath()", "testcase": false, "constructor": false}, {"identifier": "getDisabledFilePath", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getDisabledFilePath()", "full_signature": "public Path getDisabledFilePath()", "class_method_signature": "DefaultPluginStatusProvider.getDisabledFilePath()", "testcase": false, "constructor": false}, {"identifier": "getEnabledFilePath", "parameters": "(Path pluginsRoot)", "modifiers": "public static", "return": "Path", "signature": "Path getEnabledFilePath(Path pluginsRoot)", "full_signature": "public static Path getEnabledFilePath(Path pluginsRoot)", "class_method_signature": "DefaultPluginStatusProvider.getEnabledFilePath(Path pluginsRoot)", "testcase": false, "constructor": false}, {"identifier": "getDisabledFilePath", "parameters": "(Path pluginsRoot)", "modifiers": "public static", "return": "Path", "signature": "Path getDisabledFilePath(Path pluginsRoot)", "full_signature": "public static Path getDisabledFilePath(Path pluginsRoot)", "class_method_signature": "DefaultPluginStatusProvider.getDisabledFilePath(Path pluginsRoot)", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/DefaultPluginStatusProvider.java"}, "focal_method": {"identifier": "disablePlugin", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void disablePlugin(String pluginId) {\n        if (isPluginDisabled(pluginId)) {\n            // do nothing\n            return;\n        }\n\n        if (Files.exists(getEnabledFilePath())) {\n            enabledPlugins.remove(pluginId);\n\n            try {\n                FileUtils.writeLines(enabledPlugins, getEnabledFilePath());\n            } catch (IOException e) {\n                throw new PluginRuntimeException(e);\n            }\n        } else {\n            disabledPlugins.add(pluginId);\n\n            try {\n                FileUtils.writeLines(disabledPlugins, getDisabledFilePath());\n            } catch (IOException e) {\n                throw new PluginRuntimeException(e);\n            }\n        }\n    }", "signature": "void disablePlugin(String pluginId)", "full_signature": "@Override public void disablePlugin(String pluginId)", "class_method_signature": "DefaultPluginStatusProvider.disablePlugin(String pluginId)", "testcase": false, "constructor": false, "invocations": ["isPluginDisabled", "exists", "getEnabledFilePath", "remove", "writeLines", "getEnabledFilePath", "add", "writeLines", "getDisabledFilePath"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}