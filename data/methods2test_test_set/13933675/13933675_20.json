{"test_class": {"identifier": "LinkUtilitiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "vars-core/src/test/java/vars/LinkUtilitiesTest.java"}, "test_case": {"identifier": "testFindLinkIn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindLinkIn() {\n        \n        LinkComparator comparator = new LinkComparator();\n        \n        ILink link = new LinkBean(\"test\", ILink.VALUE_SELF, ILink.VALUE_NIL);\n        \n        Collection<ILink> links = ImmutableList.of( \n                new LinkBean(\"test\", ILink.VALUE_NIL, ILink.VALUE_NIL),\n                new LinkBean(\"test-02\", ILink.VALUE_SELF, ILink.VALUE_SELF),\n                new LinkBean(\"test-03\", ILink.VALUE_SELF, ILink.VALUE_NIL),\n                new LinkBean(\"test-04\", ILink.VALUE_SELF, ILink.VALUE_NIL),\n                new LinkBean(\"test-05\", ILink.VALUE_SELF, ILink.VALUE_NIL),\n                new LinkBean(\"test\", ILink.VALUE_SELF, ILink.VALUE_NIL),\n                link);\n        \n        Collection<ILink> matchingLinks = LinkUtilities.findMatchingLinksIn(links, link);\n        Assert.assertTrue(\"No match was found\", matchingLinks.size() == 2);\n        \n    }", "signature": "void testFindLinkIn()", "full_signature": "@Test public void testFindLinkIn()", "class_method_signature": "LinkUtilitiesTest.testFindLinkIn()", "testcase": true, "constructor": false, "invocations": ["of", "findMatchingLinksIn", "assertTrue", "size"]}, "focal_class": {"identifier": "LinkUtilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Comparator<ILink> COMPARATOR = new LinkComparator();", "modifier": "private static final", "type": "Comparator<ILink>", "declarator": "COMPARATOR = new LinkComparator()", "var_name": "COMPARATOR"}], "methods": [{"identifier": "formatAsLongString", "parameters": "(ILink link)", "modifiers": "public static", "return": "String", "signature": "String formatAsLongString(ILink link)", "full_signature": "public static String formatAsLongString(ILink link)", "class_method_signature": "LinkUtilities.formatAsLongString(ILink link)", "testcase": false, "constructor": false}, {"identifier": "formatAsString", "parameters": "(ILink link)", "modifiers": "public static", "return": "String", "signature": "String formatAsString(ILink link)", "full_signature": "public static String formatAsString(ILink link)", "class_method_signature": "LinkUtilities.formatAsString(ILink link)", "testcase": false, "constructor": false}, {"identifier": "findMatchingLinksIn", "parameters": "(Collection<ILink> links, final ILink templateLink)", "modifiers": "public static", "return": "Collection<ILink>", "signature": "Collection<ILink> findMatchingLinksIn(Collection<ILink> links, final ILink templateLink)", "full_signature": "public static Collection<ILink> findMatchingLinksIn(Collection<ILink> links, final ILink templateLink)", "class_method_signature": "LinkUtilities.findMatchingLinksIn(Collection<ILink> links, final ILink templateLink)", "testcase": false, "constructor": false}], "file": "vars-core/src/main/java/vars/LinkUtilities.java"}, "focal_method": {"identifier": "findMatchingLinksIn", "parameters": "(Collection<ILink> links, final ILink templateLink)", "modifiers": "public static", "return": "Collection<ILink>", "body": "public static Collection<ILink> findMatchingLinksIn(Collection<ILink> links, final ILink templateLink) {\n        return Collections2.filter(links, new Predicate<ILink>() {\n            public boolean apply(ILink input) {\n                return COMPARATOR.compare(input, templateLink) == 0;\n            }\n        });\n    }", "signature": "Collection<ILink> findMatchingLinksIn(Collection<ILink> links, final ILink templateLink)", "full_signature": "public static Collection<ILink> findMatchingLinksIn(Collection<ILink> links, final ILink templateLink)", "class_method_signature": "LinkUtilities.findMatchingLinksIn(Collection<ILink> links, final ILink templateLink)", "testcase": false, "constructor": false, "invocations": ["filter", "compare"]}, "repository": {"repo_id": 13933675, "url": "https://github.com/hohonuuli/vars", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 18273, "license": "licensed"}}