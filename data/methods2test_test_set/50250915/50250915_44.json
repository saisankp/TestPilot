{"test_class": {"identifier": "GithubScmContentProviderTest", "superclass": "extends GithubMockBase", "interfaces": "", "fields": [], "file": "blueocean-github-pipeline/src/test/java/io/jenkins/blueocean/blueocean_github_pipeline/GithubScmContentProviderTest.java"}, "test_case": {"identifier": "unauthorizedSaveContentToMbpShouldFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void unauthorizedSaveContentToMbpShouldFail() throws UnirestException, IOException {\n        User alice = User.get(\"alice\");\n        alice.setFullName(\"Alice Cooper\");\n        alice.addProperty(new Mailer.UserProperty(\"alice@jenkins-ci.org\"));\n\n        String aliceCredentialId = createGithubCredential(alice);\n\n        StaplerRequest staplerRequest = mockStapler();\n\n        GitContent content = new GitContent.Builder().autoCreateBranch(true).base64Data(\"c2xlZXAgMTUKbm9kZSB7CiAgY2hlY2tvdXQgc2NtCiAgc2ggJ2xzIC1sJwp9\\\\nCnNsZWVwIDE1Cg==\\\\n\")\n                .branch(\"test1\").message(\"another commit\").owner(\"cloudbeers\").path(\"Jankinsfile\").repo(\"PR-demo\").sha(\"e23b8ef5c2c4244889bf94db6c05cc08ea138aef\").build();\n\n        when(staplerRequest.bindJSON(Mockito.eq(GithubScmSaveFileRequest.class), Mockito.any(JSONObject.class))).thenReturn(new GithubScmSaveFileRequest(content));\n\n\n        MultiBranchProject mbp = mockMbp(aliceCredentialId, user, GithubScm.DOMAIN_NAME);\n\n        String request = \"{\\n\" +\n                \"  \\\"content\\\" : {\\n\" +\n                \"    \\\"message\\\" : \\\"first commit\\\",\\n\" +\n                \"    \\\"path\\\" : \\\"Jenkinsfile\\\",\\n\" +\n                \"    \\\"branch\\\" : \\\"test1\\\",\\n\" +\n                \"    \\\"repo\\\" : \\\"PR-demo\\\",\\n\" +\n                \"    \\\"sha\\\" : \\\"e23b8ef5c2c4244889bf94db6c05cc08ea138aef\\\",\\n\" +\n                \"    \\\"base64Data\\\" : \"+\"\\\"c2xlZXAgMTUKbm9kZSB7CiAgY2hlY2tvdXQgc2NtCiAgc2ggJ2xzIC1sJwp9\\\\nCnNsZWVwIDE1Cg==\\\\n\\\"\"+\n                \"  }\\n\" +\n                \"}\";\n\n        when(staplerRequest.getReader()).thenReturn(new BufferedReader(new StringReader(request), request.length()));\n\n        try {\n            //Bob trying to access content but his credential is not setup so should fail\n            new GithubScmContentProvider().saveContent(staplerRequest, mbp);\n        }catch (ServiceException.PreconditionRequired e){\n            assertEquals(\"Can't access content from github: no credential found\", e.getMessage());\n            return;\n        }\n        fail(\"Should have failed with PreConditionException\");\n    }", "signature": "void unauthorizedSaveContentToMbpShouldFail()", "full_signature": "@Test public void unauthorizedSaveContentToMbpShouldFail()", "class_method_signature": "GithubScmContentProviderTest.unauthorizedSaveContentToMbpShouldFail()", "testcase": true, "constructor": false, "invocations": ["get", "setFullName", "addProperty", "createGithubCredential", "mockStapler", "build", "sha", "repo", "path", "owner", "message", "branch", "base64Data", "autoCreateBranch", "thenReturn", "when", "bindJSON", "eq", "any", "mockMbp", "thenReturn", "when", "getReader", "length", "saveContent", "assertEquals", "getMessage", "fail"]}, "focal_class": {"identifier": "GithubScmContentProvider", "superclass": "extends AbstractScmContentProvider", "interfaces": "", "fields": [], "methods": [{"identifier": "getScmId", "parameters": "()", "modifiers": "@Nonnull @Override public", "return": "String", "signature": "String getScmId()", "full_signature": "@Nonnull @Override public String getScmId()", "class_method_signature": "GithubScmContentProvider.getScmId()", "testcase": false, "constructor": false}, {"identifier": "getApiUrl", "parameters": "(@Nonnull Item item)", "modifiers": "@Override public", "return": "String", "signature": "String getApiUrl(@Nonnull Item item)", "full_signature": "@Override public String getApiUrl(@Nonnull Item item)", "class_method_signature": "GithubScmContentProvider.getApiUrl(@Nonnull Item item)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(ScmGetRequest request)", "modifiers": "@Override protected", "return": "Object", "signature": "Object getContent(ScmGetRequest request)", "full_signature": "@Override protected Object getContent(ScmGetRequest request)", "class_method_signature": "GithubScmContentProvider.getContent(ScmGetRequest request)", "testcase": false, "constructor": false}, {"identifier": "getScmParamsFromItem", "parameters": "(Item item)", "modifiers": "@Override protected", "return": "ScmContentProviderParams", "signature": "ScmContentProviderParams getScmParamsFromItem(Item item)", "full_signature": "@Override protected ScmContentProviderParams getScmParamsFromItem(Item item)", "class_method_signature": "GithubScmContentProvider.getScmParamsFromItem(Item item)", "testcase": false, "constructor": false}, {"identifier": "saveContent", "parameters": "(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item)", "modifiers": "@Override public", "return": "Object", "signature": "Object saveContent(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item)", "full_signature": "@Override public Object saveContent(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item)", "class_method_signature": "GithubScmContentProvider.saveContent(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item)", "testcase": false, "constructor": false}, {"identifier": "saveContent", "parameters": "(@Nonnull GithubScmSaveFileRequest githubRequest, @Nonnull Item item)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Object", "signature": "Object saveContent(@Nonnull GithubScmSaveFileRequest githubRequest, @Nonnull Item item)", "full_signature": "@SuppressWarnings(\"unchecked\") private Object saveContent(@Nonnull GithubScmSaveFileRequest githubRequest, @Nonnull Item item)", "class_method_signature": "GithubScmContentProvider.saveContent(@Nonnull GithubScmSaveFileRequest githubRequest, @Nonnull Item item)", "testcase": false, "constructor": false}, {"identifier": "support", "parameters": "(@Nonnull Item item)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "boolean", "signature": "boolean support(@Nonnull Item item)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public boolean support(@Nonnull Item item)", "class_method_signature": "GithubScmContentProvider.support(@Nonnull Item item)", "testcase": false, "constructor": false}, {"identifier": "isItemUsingGithubScm", "parameters": "(@Nonnull Item item)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "boolean", "signature": "boolean isItemUsingGithubScm(@Nonnull Item item)", "full_signature": "@SuppressWarnings(\"unchecked\") protected boolean isItemUsingGithubScm(@Nonnull Item item)", "class_method_signature": "GithubScmContentProvider.isItemUsingGithubScm(@Nonnull Item item)", "testcase": false, "constructor": false}], "file": "blueocean-github-pipeline/src/main/java/io/jenkins/blueocean/blueocean_github_pipeline/GithubScmContentProvider.java"}, "focal_method": {"identifier": "saveContent", "parameters": "(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object saveContent(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item) {\n        JSONObject body;\n        try {\n            body = JSONObject.fromObject(IOUtils.toString(staplerRequest.getReader()));\n        } catch (IOException e) {\n            throw new ServiceException.UnexpectedErrorException(\"Failed to read request body\");\n        }\n        body.put(\"$class\", \"io.jenkins.blueocean.blueocean_github_pipeline.GithubScmSaveFileRequest\");\n\n        GithubScmSaveFileRequest request = staplerRequest.bindJSON(GithubScmSaveFileRequest.class, body);\n        if(request == null){\n            throw new ServiceException.BadRequestException(new ErrorMessage(400, \"Failed to bind request\"));\n        }\n\n        ScmContentProvider scmContentProvider = ScmContentProvider.resolve(item);\n\n        if(scmContentProvider != null){\n            return saveContent(request, item);\n        }\n        throw new ServiceException.BadRequestException(\"No save scm content provider found for pipeline: \" + item.getFullName());\n    }", "signature": "Object saveContent(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item)", "full_signature": "@Override public Object saveContent(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item)", "class_method_signature": "GithubScmContentProvider.saveContent(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item)", "testcase": false, "constructor": false, "invocations": ["fromObject", "toString", "getReader", "put", "bindJSON", "resolve", "saveContent", "getFullName"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}