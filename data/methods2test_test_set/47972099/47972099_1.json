{"test_class": {"identifier": "CoGroupNodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-optimizer/src/test/java/org/apache/flink/optimizer/dag/CoGroupNodeTest.java"}, "test_case": {"identifier": "testGetSemanticProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetSemanticProperties() {\n\n\t\tDualInputSemanticProperties origProps = new DualInputSemanticProperties();\n\t\t// props for first input\n\t\torigProps.addForwardedField(0, 0, 1);\n\t\torigProps.addForwardedField(0, 2, 2);\n\t\torigProps.addForwardedField(0, 3, 4);\n\t\torigProps.addForwardedField(0, 6, 0);\n\t\torigProps.addReadFields(0, new FieldSet(0, 2, 4, 7));\n\t\t// props for second input\n\t\torigProps.addForwardedField(1, 1, 2);\n\t\torigProps.addForwardedField(1, 2, 8);\n\t\torigProps.addForwardedField(1, 3, 7);\n\t\torigProps.addForwardedField(1, 6, 6);\n\t\torigProps.addReadFields(1, new FieldSet(1, 3, 4));\n\n\t\tCoGroupOperatorBase<?,?,?,?> op = mock(CoGroupOperatorBase.class);\n\t\twhen(op.getSemanticProperties()).thenReturn(origProps);\n\t\twhen(op.getKeyColumns(0)).thenReturn(new int[]{3,2});\n\t\twhen(op.getKeyColumns(1)).thenReturn(new int[]{6,3});\n\t\twhen(op.getParameters()).thenReturn(new Configuration());\n\n\t\tCoGroupNode node = new CoGroupNode(op);\n\n\t\tSemanticProperties filteredProps = node.getSemanticPropertiesForLocalPropertyFiltering();\n\n\t\t// check first input props\n\t\tassertTrue(filteredProps.getForwardingTargetFields(0, 0).size() == 0);\n\t\tassertTrue(filteredProps.getForwardingTargetFields(0, 2).size() == 1);\n\t\tassertTrue(filteredProps.getForwardingTargetFields(0, 2).contains(2));\n\t\tassertTrue(filteredProps.getForwardingTargetFields(0, 3).size() == 1);\n\t\tassertTrue(filteredProps.getForwardingTargetFields(0, 3).contains(4));\n\t\tassertTrue(filteredProps.getForwardingTargetFields(0, 6).size() == 0);\n\t\tassertTrue(filteredProps.getForwardingSourceField(0, 1) < 0);\n\t\tassertTrue(filteredProps.getForwardingSourceField(0, 2) == 2);\n\t\tassertTrue(filteredProps.getForwardingSourceField(0, 4) == 3);\n\t\tassertTrue(filteredProps.getForwardingSourceField(0, 0) < 0);\n\t\t// check second input props\n\t\tassertTrue(filteredProps.getReadFields(0).size() == 4);\n\t\tassertTrue(filteredProps.getReadFields(0).contains(0));\n\t\tassertTrue(filteredProps.getReadFields(0).contains(2));\n\t\tassertTrue(filteredProps.getReadFields(0).contains(4));\n\t\tassertTrue(filteredProps.getReadFields(0).contains(7));\n\n\t\tassertTrue(filteredProps.getForwardingTargetFields(1, 1).size() == 0);\n\t\tassertTrue(filteredProps.getForwardingTargetFields(1, 2).size() == 0);\n\t\tassertTrue(filteredProps.getForwardingTargetFields(1, 3).size() == 1);\n\t\tassertTrue(filteredProps.getForwardingTargetFields(1, 3).contains(7));\n\t\tassertTrue(filteredProps.getForwardingTargetFields(1, 6).size() == 1);\n\t\tassertTrue(filteredProps.getForwardingTargetFields(1, 6).contains(6));\n\t\tassertTrue(filteredProps.getForwardingSourceField(1, 2) < 0);\n\t\tassertTrue(filteredProps.getForwardingSourceField(1, 8) < 0);\n\t\tassertTrue(filteredProps.getForwardingSourceField(1, 7) == 3);\n\t\tassertTrue(filteredProps.getForwardingSourceField(1, 6) == 6);\n\n\t\tassertTrue(filteredProps.getReadFields(1).size() == 3);\n\t\tassertTrue(filteredProps.getReadFields(1).contains(1));\n\t\tassertTrue(filteredProps.getReadFields(1).contains(3));\n\t\tassertTrue(filteredProps.getReadFields(1).contains(4));\n\n\t}", "signature": "void testGetSemanticProperties()", "full_signature": "@Test public void testGetSemanticProperties()", "class_method_signature": "CoGroupNodeTest.testGetSemanticProperties()", "testcase": true, "constructor": false, "invocations": ["addForwardedField", "addForwardedField", "addForwardedField", "addForwardedField", "addReadFields", "addForwardedField", "addForwardedField", "addForwardedField", "addForwardedField", "addReadFields", "mock", "thenReturn", "when", "getSemanticProperties", "thenReturn", "when", "getKeyColumns", "thenReturn", "when", "getKeyColumns", "thenReturn", "when", "getParameters", "getSemanticPropertiesForLocalPropertyFiltering", "assertTrue", "size", "getForwardingTargetFields", "assertTrue", "size", "getForwardingTargetFields", "assertTrue", "contains", "getForwardingTargetFields", "assertTrue", "size", "getForwardingTargetFields", "assertTrue", "contains", "getForwardingTargetFields", "assertTrue", "size", "getForwardingTargetFields", "assertTrue", "getForwardingSourceField", "assertTrue", "getForwardingSourceField", "assertTrue", "getForwardingSourceField", "assertTrue", "getForwardingSourceField", "assertTrue", "size", "getReadFields", "assertTrue", "contains", "getReadFields", "assertTrue", "contains", "getReadFields", "assertTrue", "contains", "getReadFields", "assertTrue", "contains", "getReadFields", "assertTrue", "size", "getForwardingTargetFields", "assertTrue", "size", "getForwardingTargetFields", "assertTrue", "size", "getForwardingTargetFields", "assertTrue", "contains", "getForwardingTargetFields", "assertTrue", "size", "getForwardingTargetFields", "assertTrue", "contains", "getForwardingTargetFields", "assertTrue", "getForwardingSourceField", "assertTrue", "getForwardingSourceField", "assertTrue", "getForwardingSourceField", "assertTrue", "getForwardingSourceField", "assertTrue", "size", "getReadFields", "assertTrue", "contains", "getReadFields", "assertTrue", "contains", "getReadFields", "assertTrue", "contains", "getReadFields"]}, "focal_class": {"identifier": "CoGroupNode", "superclass": "extends TwoInputNode", "interfaces": "", "fields": [{"original_string": "private List<OperatorDescriptorDual> dataProperties;", "modifier": "private", "type": "List<OperatorDescriptorDual>", "declarator": "dataProperties", "var_name": "dataProperties"}], "methods": [{"identifier": "CoGroupNode", "parameters": "(CoGroupOperatorBase<?, ?, ?, ?> operator)", "modifiers": "public", "return": "", "signature": " CoGroupNode(CoGroupOperatorBase<?, ?, ?, ?> operator)", "full_signature": "public  CoGroupNode(CoGroupOperatorBase<?, ?, ?, ?> operator)", "class_method_signature": "CoGroupNode.CoGroupNode(CoGroupOperatorBase<?, ?, ?, ?> operator)", "testcase": false, "constructor": true}, {"identifier": "getOperator", "parameters": "()", "modifiers": "@Override public", "return": "CoGroupOperatorBase<?, ?, ?, ?>", "signature": "CoGroupOperatorBase<?, ?, ?, ?> getOperator()", "full_signature": "@Override public CoGroupOperatorBase<?, ?, ?, ?> getOperator()", "class_method_signature": "CoGroupNode.getOperator()", "testcase": false, "constructor": false}, {"identifier": "getOperatorName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getOperatorName()", "full_signature": "@Override public String getOperatorName()", "class_method_signature": "CoGroupNode.getOperatorName()", "testcase": false, "constructor": false}, {"identifier": "getPossibleProperties", "parameters": "()", "modifiers": "@Override protected", "return": "List<OperatorDescriptorDual>", "signature": "List<OperatorDescriptorDual> getPossibleProperties()", "full_signature": "@Override protected List<OperatorDescriptorDual> getPossibleProperties()", "class_method_signature": "CoGroupNode.getPossibleProperties()", "testcase": false, "constructor": false}, {"identifier": "makeCoGroupWithSolutionSet", "parameters": "(int solutionsetInputIndex)", "modifiers": "public", "return": "void", "signature": "void makeCoGroupWithSolutionSet(int solutionsetInputIndex)", "full_signature": "public void makeCoGroupWithSolutionSet(int solutionsetInputIndex)", "class_method_signature": "CoGroupNode.makeCoGroupWithSolutionSet(int solutionsetInputIndex)", "testcase": false, "constructor": false}, {"identifier": "getSemanticPropertiesForLocalPropertyFiltering", "parameters": "()", "modifiers": "@Override protected", "return": "SemanticProperties", "signature": "SemanticProperties getSemanticPropertiesForLocalPropertyFiltering()", "full_signature": "@Override protected SemanticProperties getSemanticPropertiesForLocalPropertyFiltering()", "class_method_signature": "CoGroupNode.getSemanticPropertiesForLocalPropertyFiltering()", "testcase": false, "constructor": false}, {"identifier": "computeOperatorSpecificDefaultEstimates", "parameters": "(DataStatistics statistics)", "modifiers": "@Override protected", "return": "void", "signature": "void computeOperatorSpecificDefaultEstimates(DataStatistics statistics)", "full_signature": "@Override protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics)", "class_method_signature": "CoGroupNode.computeOperatorSpecificDefaultEstimates(DataStatistics statistics)", "testcase": false, "constructor": false}, {"identifier": "initializeDataProperties", "parameters": "(Partitioner<?> customPartitioner)", "modifiers": "private", "return": "List<OperatorDescriptorDual>", "signature": "List<OperatorDescriptorDual> initializeDataProperties(Partitioner<?> customPartitioner)", "full_signature": "private List<OperatorDescriptorDual> initializeDataProperties(Partitioner<?> customPartitioner)", "class_method_signature": "CoGroupNode.initializeDataProperties(Partitioner<?> customPartitioner)", "testcase": false, "constructor": false}], "file": "flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/CoGroupNode.java"}, "focal_method": {"identifier": "getSemanticPropertiesForLocalPropertyFiltering", "parameters": "()", "modifiers": "@Override protected", "return": "SemanticProperties", "body": "@Override\n\tprotected SemanticProperties getSemanticPropertiesForLocalPropertyFiltering() {\n\n\t\t// Local properties for CoGroup may only be preserved on key fields.\n\t\tDualInputSemanticProperties origProps = ((DualInputOperator<?, ?, ?, ?>) getOperator()).getSemanticProperties();\n\n\t\tDualInputSemanticProperties filteredProps = new DualInputSemanticProperties();\n\t\tFieldSet readSet1 = origProps.getReadFields(0);\n\t\tFieldSet readSet2 = origProps.getReadFields(1);\n\t\tif(readSet1 != null) {\n\t\t\tfilteredProps.addReadFields(0, readSet1);\n\t\t}\n\t\tif(readSet2 != null) {\n\t\t\tfilteredProps.addReadFields(1, readSet2);\n\t\t}\n\n\t\t// preserve only key fields (first input)\n\t\tfor(int f : this.keys1) {\n\t\t\tFieldSet targets = origProps.getForwardingTargetFields(0, f);\n\t\t\tfor(int t : targets) {\n\t\t\t\tfilteredProps.addForwardedField(0, f, t);\n\t\t\t}\n\t\t}\n\n\t\t// preserve only key fields (second input)\n\t\tfor(int f : this.keys2) {\n\t\t\tFieldSet targets = origProps.getForwardingTargetFields(1, f);\n\t\t\tfor(int t : targets) {\n\t\t\t\tfilteredProps.addForwardedField(1, f, t);\n\t\t\t}\n\t\t}\n\n\t\treturn filteredProps;\n\t}", "signature": "SemanticProperties getSemanticPropertiesForLocalPropertyFiltering()", "full_signature": "@Override protected SemanticProperties getSemanticPropertiesForLocalPropertyFiltering()", "class_method_signature": "CoGroupNode.getSemanticPropertiesForLocalPropertyFiltering()", "testcase": false, "constructor": false, "invocations": ["getSemanticProperties", "getOperator", "getReadFields", "getReadFields", "addReadFields", "addReadFields", "getForwardingTargetFields", "addForwardedField", "getForwardingTargetFields", "addForwardedField"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}