{"test_class": {"identifier": "CapabilityMatcherServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CapabilityMatcherService service;", "modifier": "private", "type": "CapabilityMatcherService", "declarator": "service", "var_name": "service"}, {"original_string": "private NodeTemplate nodeTemplate;", "modifier": "private", "type": "NodeTemplate", "declarator": "nodeTemplate", "var_name": "nodeTemplate"}, {"original_string": "private Map<String, CapabilityType> capabilityTypeByTypeName;", "modifier": "private", "type": "Map<String, CapabilityType>", "declarator": "capabilityTypeByTypeName", "var_name": "capabilityTypeByTypeName"}, {"original_string": "@Mock\n    private CapabilityMatcherService.IToscaContextFinder toscaContextFinder;", "modifier": "@Mock\n    private", "type": "CapabilityMatcherService.IToscaContextFinder", "declarator": "toscaContextFinder", "var_name": "toscaContextFinder"}], "file": "alien4cloud-tosca/src/test/java/alien4cloud/tosca/parser/postprocess/CapabilityMatcherServiceTest.java"}, "test_case": {"identifier": "should_not_crash_even_if_node_template_capacities_is_incorrect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_not_crash_even_if_node_template_capacities_is_incorrect() throws Exception {\n        nodeTemplate.getCapabilities().clear();\n        Capability unknownCapacity = new Capability();\n        unknownCapacity.setType(\"alien.typo.in.capa\");\n        nodeTemplate.getCapabilities().put(\"incorrect\", unknownCapacity);\n\n        Map<String, Capability> compatibleCapabilities = service.getCompatibleCapabilityByType(nodeTemplate, \"alien.capability.test.Unknown\");\n\n        assertThat(compatibleCapabilities).hasSize(0);\n    }", "signature": "void should_not_crash_even_if_node_template_capacities_is_incorrect()", "full_signature": "@Test public void should_not_crash_even_if_node_template_capacities_is_incorrect()", "class_method_signature": "CapabilityMatcherServiceTest.should_not_crash_even_if_node_template_capacities_is_incorrect()", "testcase": true, "constructor": false, "invocations": ["clear", "getCapabilities", "setType", "put", "getCapabilities", "getCompatibleCapabilityByType", "hasSize", "assertThat"]}, "focal_class": {"identifier": "CapabilityMatcherService", "superclass": "", "interfaces": "implements ICapabilityMatcherService", "fields": [{"original_string": "@Setter\n    private IToscaContextFinder toscaContextFinder;", "modifier": "@Setter\n    private", "type": "IToscaContextFinder", "declarator": "toscaContextFinder", "var_name": "toscaContextFinder"}], "methods": [{"identifier": "CapabilityMatcherService", "parameters": "()", "modifiers": "public", "return": "", "signature": " CapabilityMatcherService()", "full_signature": "public  CapabilityMatcherService()", "class_method_signature": "CapabilityMatcherService.CapabilityMatcherService()", "testcase": false, "constructor": true}, {"identifier": "getCompatibleCapabilityByType", "parameters": "(NodeTemplate nodeTemplate, String type)", "modifiers": "@Override public", "return": "Map<String, Capability>", "signature": "Map<String, Capability> getCompatibleCapabilityByType(NodeTemplate nodeTemplate, String type)", "full_signature": "@Override public Map<String, Capability> getCompatibleCapabilityByType(NodeTemplate nodeTemplate, String type)", "class_method_signature": "CapabilityMatcherService.getCompatibleCapabilityByType(NodeTemplate nodeTemplate, String type)", "testcase": false, "constructor": false}, {"identifier": "getCompatibleCapabilityByType", "parameters": "(NodeType nodeType, String type)", "modifiers": "@Override public", "return": "List<CapabilityDefinition>", "signature": "List<CapabilityDefinition> getCompatibleCapabilityByType(NodeType nodeType, String type)", "full_signature": "@Override public List<CapabilityDefinition> getCompatibleCapabilityByType(NodeType nodeType, String type)", "class_method_signature": "CapabilityMatcherService.getCompatibleCapabilityByType(NodeType nodeType, String type)", "testcase": false, "constructor": false}], "file": "alien4cloud-tosca/src/main/java/alien4cloud/tosca/parser/postprocess/CapabilityMatcherService.java"}, "focal_method": {"identifier": "getCompatibleCapabilityByType", "parameters": "(NodeTemplate nodeTemplate, String type)", "modifiers": "@Override public", "return": "Map<String, Capability>", "body": "@Override\n    public Map<String, Capability> getCompatibleCapabilityByType(NodeTemplate nodeTemplate, String type) {\n        Map<String, Capability> capabilities = nodeTemplate.getCapabilities();\n        if (capabilities == null) {\n            return Collections.emptyMap();\n        }\n\n        Map<String, Capability> targetCapabilitiesMatch = Maps.newHashMap();\n        for (Map.Entry<String, Capability> capabilityEntry : capabilities.entrySet()) {\n            String capabilityTypeName = capabilityEntry.getValue().getType();\n            CapabilityType capabilityType = toscaContextFinder.find(CapabilityType.class, capabilityTypeName);\n\n            if (ToscaTypeUtils.isOfType(capabilityType, type)) {\n                targetCapabilitiesMatch.put(capabilityEntry.getKey(), capabilityEntry.getValue());\n            }\n        }\n        return targetCapabilitiesMatch;\n    }", "signature": "Map<String, Capability> getCompatibleCapabilityByType(NodeTemplate nodeTemplate, String type)", "full_signature": "@Override public Map<String, Capability> getCompatibleCapabilityByType(NodeTemplate nodeTemplate, String type)", "class_method_signature": "CapabilityMatcherService.getCompatibleCapabilityByType(NodeTemplate nodeTemplate, String type)", "testcase": false, "constructor": false, "invocations": ["getCapabilities", "emptyMap", "newHashMap", "entrySet", "getType", "getValue", "find", "isOfType", "put", "getKey", "getValue"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}