{"test_class": {"identifier": "LeastSquaresDivisionTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/maths/polynomials/LeastSquaresDivisionTest.java"}, "test_case": {"identifier": "testDivision", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDivision() {\n        int q=10, d=20;\n        DataBlock Q=new DataBlock(q), D=new DataBlock(d);\n        Q.randomize(0);\n        D.randomize(1);\n        Polynomial pq=Polynomial.copyOf(Q.getData());\n        Polynomial pd=Polynomial.copyOf(D.getData());\n        Polynomial pn=pd.times(pq);\n        LeastSquaresDivision div=new LeastSquaresDivision();\n        div.divide(pn, pd);\n//        if (div.isExact()){\n//             DataBlock Q2=new DataBlock(div.getQuotient());\n//             System.out.println(Q2.distance(Q));\n//        }\n    }", "signature": "void testDivision()", "full_signature": "@Test public void testDivision()", "class_method_signature": "LeastSquaresDivisionTest.testDivision()", "testcase": true, "constructor": false, "invocations": ["randomize", "randomize", "copyOf", "getData", "copyOf", "getData", "times", "divide"]}, "focal_class": {"identifier": "LeastSquaresDivision", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double EPS = 1e-9;", "modifier": "public static final", "type": "double", "declarator": "EPS = 1e-9", "var_name": "EPS"}, {"original_string": "private double err_;", "modifier": "private", "type": "double", "declarator": "err_", "var_name": "err_"}, {"original_string": "private double[] coeff;", "modifier": "private", "type": "double[]", "declarator": "coeff", "var_name": "coeff"}], "methods": [{"identifier": "divide", "parameters": "(Polynomial num, Polynomial denom)", "modifiers": "public", "return": "boolean", "signature": "boolean divide(Polynomial num, Polynomial denom)", "full_signature": "public boolean divide(Polynomial num, Polynomial denom)", "class_method_signature": "LeastSquaresDivision.divide(Polynomial num, Polynomial denom)", "testcase": false, "constructor": false}, {"identifier": "getQuotient", "parameters": "()", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial getQuotient()", "full_signature": "public Polynomial getQuotient()", "class_method_signature": "LeastSquaresDivision.getQuotient()", "testcase": false, "constructor": false}, {"identifier": "getError", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getError()", "full_signature": "public double getError()", "class_method_signature": "LeastSquaresDivision.getError()", "testcase": false, "constructor": false}, {"identifier": "isExact", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExact()", "full_signature": "public boolean isExact()", "class_method_signature": "LeastSquaresDivision.isExact()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/maths/polynomials/LeastSquaresDivision.java"}, "focal_method": {"identifier": "divide", "parameters": "(Polynomial num, Polynomial denom)", "modifiers": "public", "return": "boolean", "body": "public boolean divide(Polynomial num, Polynomial denom) {\n        try {\n            err_ = 0;\n            DataBlock N = new DataBlock(num);\n            DataBlock D = new DataBlock(denom);\n            int n = N.getLength(), d = D.getLength();\n            if (d > n) {\n                return false;\n            }\n            int q = n - d + 1;\n            coeff = new double[q];\n            Matrix m = new Matrix(n, q);\n            DataBlockIterator columns = m.columns();\n            DataBlock column = columns.getData();\n            int c = 0;\n            do {\n                column.range(c, c + d).copy(D);\n                ++c;\n            } while (columns.next());\n            Householder qr = new Householder(false);\n            qr.decompose(m);\n            DataBlock E = new DataBlock(d - 1);\n            qr.leastSquares(N, new DataBlock(coeff), E);\n            this.err_ = E.nrm2() / d;\n            return true;\n        } catch (MatrixException err) {\n            return false;\n        }\n    }", "signature": "boolean divide(Polynomial num, Polynomial denom)", "full_signature": "public boolean divide(Polynomial num, Polynomial denom)", "class_method_signature": "LeastSquaresDivision.divide(Polynomial num, Polynomial denom)", "testcase": false, "constructor": false, "invocations": ["getLength", "getLength", "columns", "getData", "copy", "range", "next", "decompose", "leastSquares", "nrm2"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}