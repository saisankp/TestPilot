{"test_class": {"identifier": "AsyncCaseInstanceAuditEventProducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConnectionFactory connectionFactory;", "modifier": "private", "type": "ConnectionFactory", "declarator": "connectionFactory", "var_name": "connectionFactory"}, {"original_string": "private Queue queue;", "modifier": "private", "type": "Queue", "declarator": "queue", "var_name": "queue"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private MessageProducer producer;", "modifier": "private", "type": "MessageProducer", "declarator": "producer", "var_name": "producer"}, {"original_string": "private TextMessage message;", "modifier": "private", "type": "TextMessage", "declarator": "message", "var_name": "message"}, {"original_string": "private AsyncCaseInstanceAuditEventProducer logProducer;", "modifier": "private", "type": "AsyncCaseInstanceAuditEventProducer", "declarator": "logProducer", "var_name": "logProducer"}], "file": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/test/java/org/jbpm/casemgmt/impl/jms/AsyncCaseInstanceAuditEventProducerTest.java"}, "test_case": {"identifier": "testCaseRoleAssignmentRemoved", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCaseRoleAssignmentRemoved() throws JMSException {\n        OrganizationalEntity entity = mock(OrganizationalEntity.class);\n        when(entity.getId()).thenReturn(\"john\");\n        CaseFileInstanceImpl caseFile = new CaseFileInstanceImpl(\"TEST-01\", \"case\");\n        CaseRoleAssignmentEvent event = new CaseRoleAssignmentEvent(\"user\", \"TEST-01\", caseFile, \"owner\", entity);\n        \n        logProducer.afterCaseRoleAssignmentRemoved(event);\n        \n        verify(message, times(1)).setStringProperty(eq(\"LogType\"), eq(\"Case\"));\n        verify(message, times(1)).setIntProperty(eq(\"EventType\"), eq(AFTER_CASE_ROLE_ASSIGNMENT_REMOVED_EVENT_TYPE));\n        verify(producer, times(1)).setPriority(eq(4));\n        verify(producer, times(1)).send(eq(message));\n    }", "signature": "void testCaseRoleAssignmentRemoved()", "full_signature": "@Test public void testCaseRoleAssignmentRemoved()", "class_method_signature": "AsyncCaseInstanceAuditEventProducerTest.testCaseRoleAssignmentRemoved()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getId", "afterCaseRoleAssignmentRemoved", "setStringProperty", "verify", "times", "eq", "eq", "setIntProperty", "verify", "times", "eq", "eq", "setPriority", "verify", "times", "eq", "send", "verify", "times", "eq"]}, "focal_class": {"identifier": "AsyncCaseInstanceAuditEventProducer", "superclass": "", "interfaces": "implements CaseEventListener, Cacheable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AsyncCaseInstanceAuditEventProducer.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AsyncCaseInstanceAuditEventProducer.class)", "var_name": "logger"}, {"original_string": "private ConnectionFactory connectionFactory;", "modifier": "private", "type": "ConnectionFactory", "declarator": "connectionFactory", "var_name": "connectionFactory"}, {"original_string": "private Queue queue;", "modifier": "private", "type": "Queue", "declarator": "queue", "var_name": "queue"}, {"original_string": "private boolean transacted = true;", "modifier": "private", "type": "boolean", "declarator": "transacted = true", "var_name": "transacted"}, {"original_string": "private XStream xstream;", "modifier": "private", "type": "XStream", "declarator": "xstream", "var_name": "xstream"}, {"original_string": "private CaseIndexerManager indexManager = CaseIndexerManager.get();", "modifier": "private", "type": "CaseIndexerManager", "declarator": "indexManager = CaseIndexerManager.get()", "var_name": "indexManager"}], "methods": [{"identifier": "AsyncCaseInstanceAuditEventProducer", "parameters": "()", "modifiers": "public", "return": "", "signature": " AsyncCaseInstanceAuditEventProducer()", "full_signature": "public  AsyncCaseInstanceAuditEventProducer()", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.AsyncCaseInstanceAuditEventProducer()", "testcase": false, "constructor": true}, {"identifier": "initXStream", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initXStream()", "full_signature": "private void initXStream()", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.initXStream()", "testcase": false, "constructor": false}, {"identifier": "getConnectionFactory", "parameters": "()", "modifiers": "public", "return": "ConnectionFactory", "signature": "ConnectionFactory getConnectionFactory()", "full_signature": "public ConnectionFactory getConnectionFactory()", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.getConnectionFactory()", "testcase": false, "constructor": false}, {"identifier": "setConnectionFactory", "parameters": "(ConnectionFactory connectionFactory)", "modifiers": "public", "return": "void", "signature": "void setConnectionFactory(ConnectionFactory connectionFactory)", "full_signature": "public void setConnectionFactory(ConnectionFactory connectionFactory)", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.setConnectionFactory(ConnectionFactory connectionFactory)", "testcase": false, "constructor": false}, {"identifier": "getQueue", "parameters": "()", "modifiers": "public", "return": "Queue", "signature": "Queue getQueue()", "full_signature": "public Queue getQueue()", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.getQueue()", "testcase": false, "constructor": false}, {"identifier": "setQueue", "parameters": "(Queue queue)", "modifiers": "public", "return": "void", "signature": "void setQueue(Queue queue)", "full_signature": "public void setQueue(Queue queue)", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.setQueue(Queue queue)", "testcase": false, "constructor": false}, {"identifier": "isTransacted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTransacted()", "full_signature": "public boolean isTransacted()", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.isTransacted()", "testcase": false, "constructor": false}, {"identifier": "setTransacted", "parameters": "(boolean transacted)", "modifiers": "public", "return": "void", "signature": "void setTransacted(boolean transacted)", "full_signature": "public void setTransacted(boolean transacted)", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.setTransacted(boolean transacted)", "testcase": false, "constructor": false}, {"identifier": "afterCaseStarted", "parameters": "(CaseStartEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void afterCaseStarted(CaseStartEvent event)", "full_signature": "@Override public void afterCaseStarted(CaseStartEvent event)", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.afterCaseStarted(CaseStartEvent event)", "testcase": false, "constructor": false}, {"identifier": "afterCaseReopen", "parameters": "(CaseReopenEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void afterCaseReopen(CaseReopenEvent event)", "full_signature": "@Override public void afterCaseReopen(CaseReopenEvent event)", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.afterCaseReopen(CaseReopenEvent event)", "testcase": false, "constructor": false}, {"identifier": "afterCaseRoleAssignmentAdded", "parameters": "(CaseRoleAssignmentEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void afterCaseRoleAssignmentAdded(CaseRoleAssignmentEvent event)", "full_signature": "@Override public void afterCaseRoleAssignmentAdded(CaseRoleAssignmentEvent event)", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.afterCaseRoleAssignmentAdded(CaseRoleAssignmentEvent event)", "testcase": false, "constructor": false}, {"identifier": "afterCaseRoleAssignmentRemoved", "parameters": "(CaseRoleAssignmentEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void afterCaseRoleAssignmentRemoved(CaseRoleAssignmentEvent event)", "full_signature": "@Override public void afterCaseRoleAssignmentRemoved(CaseRoleAssignmentEvent event)", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.afterCaseRoleAssignmentRemoved(CaseRoleAssignmentEvent event)", "testcase": false, "constructor": false}, {"identifier": "afterCaseDataAdded", "parameters": "(CaseDataEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void afterCaseDataAdded(CaseDataEvent event)", "full_signature": "@Override public void afterCaseDataAdded(CaseDataEvent event)", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.afterCaseDataAdded(CaseDataEvent event)", "testcase": false, "constructor": false}, {"identifier": "afterCaseDataRemoved", "parameters": "(CaseDataEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void afterCaseDataRemoved(CaseDataEvent event)", "full_signature": "@Override public void afterCaseDataRemoved(CaseDataEvent event)", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.afterCaseDataRemoved(CaseDataEvent event)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.close()", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(Integer eventType, AuditCaseInstanceData eventData, int priority)", "modifiers": "protected", "return": "void", "signature": "void sendMessage(Integer eventType, AuditCaseInstanceData eventData, int priority)", "full_signature": "protected void sendMessage(Integer eventType, AuditCaseInstanceData eventData, int priority)", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.sendMessage(Integer eventType, AuditCaseInstanceData eventData, int priority)", "testcase": false, "constructor": false}, {"identifier": "updateCaseFileItems", "parameters": "(CaseEvent event, Map<String, Object> addedData, String caseId, String caseDefinitionId, String user)", "modifiers": "protected", "return": "List<CaseFileData>", "signature": "List<CaseFileData> updateCaseFileItems(CaseEvent event, Map<String, Object> addedData, String caseId, String caseDefinitionId, String user)", "full_signature": "protected List<CaseFileData> updateCaseFileItems(CaseEvent event, Map<String, Object> addedData, String caseId, String caseDefinitionId, String user)", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.updateCaseFileItems(CaseEvent event, Map<String, Object> addedData, String caseId, String caseDefinitionId, String user)", "testcase": false, "constructor": false}], "file": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/jms/AsyncCaseInstanceAuditEventProducer.java"}, "focal_method": {"identifier": "afterCaseRoleAssignmentRemoved", "parameters": "(CaseRoleAssignmentEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void afterCaseRoleAssignmentRemoved(CaseRoleAssignmentEvent event) {\n        \n        CaseRoleAssignmentLog assignmentLog = new CaseRoleAssignmentLog(-1L, event.getCaseId(), event.getRole(), event.getEntity());\n        \n        sendMessage(AFTER_CASE_ROLE_ASSIGNMENT_REMOVED_EVENT_TYPE, new AuditCaseInstanceData(event.getCaseId(), null, Collections.singletonList(assignmentLog)), 4);\n    }", "signature": "void afterCaseRoleAssignmentRemoved(CaseRoleAssignmentEvent event)", "full_signature": "@Override public void afterCaseRoleAssignmentRemoved(CaseRoleAssignmentEvent event)", "class_method_signature": "AsyncCaseInstanceAuditEventProducer.afterCaseRoleAssignmentRemoved(CaseRoleAssignmentEvent event)", "testcase": false, "constructor": false, "invocations": ["getCaseId", "getRole", "getEntity", "sendMessage", "getCaseId", "singletonList"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}