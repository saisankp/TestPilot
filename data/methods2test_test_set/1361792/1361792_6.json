{"test_class": {"identifier": "PropertiesReplacerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PropertiesReplacer propertiesReplacer;", "modifier": "private", "type": "PropertiesReplacer", "declarator": "propertiesReplacer", "var_name": "propertiesReplacer"}], "file": "maven/src/test/java/pl/project13/maven/git/PropertiesReplacerTest.java"}, "test_case": {"identifier": "testPerformReplacementWithMultiplePropertiesEmptyValue", "parameters": "(boolean regex)", "modifiers": "@Test @Parameters(method = \"useRegexReplacement\") public", "return": "void", "body": "@Test\n  @Parameters(method = \"useRegexReplacement\")\n  public void testPerformReplacementWithMultiplePropertiesEmptyValue(boolean regex) throws IOException {\n    Properties actualProperties = build(\"key1\", \"value1\", \"key2\", \"value2\");\n\n    List<ReplacementProperty> replacementProperties = new ArrayList<>();\n    replacementProperties.add(new ReplacementProperty(null, null, \"value\", null, regex, false, null));\n\n    propertiesReplacer.performReplacement(actualProperties, replacementProperties);\n\n    Properties exptecedProperties = build(\"key1\", \"1\", \"key2\", \"2\");\n    assertEquals(exptecedProperties, actualProperties);\n  }", "signature": "void testPerformReplacementWithMultiplePropertiesEmptyValue(boolean regex)", "full_signature": "@Test @Parameters(method = \"useRegexReplacement\") public void testPerformReplacementWithMultiplePropertiesEmptyValue(boolean regex)", "class_method_signature": "PropertiesReplacerTest.testPerformReplacementWithMultiplePropertiesEmptyValue(boolean regex)", "testcase": true, "constructor": false, "invocations": ["build", "add", "performReplacement", "build", "assertEquals"]}, "focal_class": {"identifier": "PropertiesReplacer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final LoggerBridge log;", "modifier": "private final", "type": "LoggerBridge", "declarator": "log", "var_name": "log"}, {"original_string": "private final PluginParameterExpressionEvaluator expressionEvaluator;", "modifier": "private final", "type": "PluginParameterExpressionEvaluator", "declarator": "expressionEvaluator", "var_name": "expressionEvaluator"}], "methods": [{"identifier": "PropertiesReplacer", "parameters": "(LoggerBridge log, PluginParameterExpressionEvaluator expressionEvaluator)", "modifiers": "public", "return": "", "signature": " PropertiesReplacer(LoggerBridge log, PluginParameterExpressionEvaluator expressionEvaluator)", "full_signature": "public  PropertiesReplacer(LoggerBridge log, PluginParameterExpressionEvaluator expressionEvaluator)", "class_method_signature": "PropertiesReplacer.PropertiesReplacer(LoggerBridge log, PluginParameterExpressionEvaluator expressionEvaluator)", "testcase": false, "constructor": true}, {"identifier": "performReplacement", "parameters": "(Properties properties, List<ReplacementProperty> replacementProperties)", "modifiers": "public", "return": "void", "signature": "void performReplacement(Properties properties, List<ReplacementProperty> replacementProperties)", "full_signature": "public void performReplacement(Properties properties, List<ReplacementProperty> replacementProperties)", "class_method_signature": "PropertiesReplacer.performReplacement(Properties properties, List<ReplacementProperty> replacementProperties)", "testcase": false, "constructor": false}, {"identifier": "performReplacementOnAllGeneratedProperties", "parameters": "(Properties properties, ReplacementProperty replacementProperty)", "modifiers": "private", "return": "void", "signature": "void performReplacementOnAllGeneratedProperties(Properties properties, ReplacementProperty replacementProperty)", "full_signature": "private void performReplacementOnAllGeneratedProperties(Properties properties, ReplacementProperty replacementProperty)", "class_method_signature": "PropertiesReplacer.performReplacementOnAllGeneratedProperties(Properties properties, ReplacementProperty replacementProperty)", "testcase": false, "constructor": false}, {"identifier": "performReplacementOnSingleProperty", "parameters": "(Properties properties, ReplacementProperty replacementProperty, String propertyKey)", "modifiers": "private", "return": "void", "signature": "void performReplacementOnSingleProperty(Properties properties, ReplacementProperty replacementProperty, String propertyKey)", "full_signature": "private void performReplacementOnSingleProperty(Properties properties, ReplacementProperty replacementProperty, String propertyKey)", "class_method_signature": "PropertiesReplacer.performReplacementOnSingleProperty(Properties properties, ReplacementProperty replacementProperty, String propertyKey)", "testcase": false, "constructor": false}, {"identifier": "performReplacement", "parameters": "(ReplacementProperty replacementProperty, String content)", "modifiers": "private", "return": "String", "signature": "String performReplacement(ReplacementProperty replacementProperty, String content)", "full_signature": "private String performReplacement(ReplacementProperty replacementProperty, String content)", "class_method_signature": "PropertiesReplacer.performReplacement(ReplacementProperty replacementProperty, String content)", "testcase": false, "constructor": false}, {"identifier": "performTransformationRules", "parameters": "(ReplacementProperty replacementProperty, String content, TransformationRule.ApplyEnum forRule)", "modifiers": "private", "return": "String", "signature": "String performTransformationRules(ReplacementProperty replacementProperty, String content, TransformationRule.ApplyEnum forRule)", "full_signature": "private String performTransformationRules(ReplacementProperty replacementProperty, String content, TransformationRule.ApplyEnum forRule)", "class_method_signature": "PropertiesReplacer.performTransformationRules(ReplacementProperty replacementProperty, String content, TransformationRule.ApplyEnum forRule)", "testcase": false, "constructor": false}, {"identifier": "replaceRegex", "parameters": "(String content, String token, String value)", "modifiers": "private", "return": "String", "signature": "String replaceRegex(String content, String token, String value)", "full_signature": "private String replaceRegex(String content, String token, String value)", "class_method_signature": "PropertiesReplacer.replaceRegex(String content, String token, String value)", "testcase": false, "constructor": false}, {"identifier": "replaceNonRegex", "parameters": "(String content, String token, String value)", "modifiers": "private", "return": "String", "signature": "String replaceNonRegex(String content, String token, String value)", "full_signature": "private String replaceNonRegex(String content, String token, String value)", "class_method_signature": "PropertiesReplacer.replaceNonRegex(String content, String token, String value)", "testcase": false, "constructor": false}], "file": "maven/src/main/java/pl/project13/maven/git/PropertiesReplacer.java"}, "focal_method": {"identifier": "performReplacement", "parameters": "(Properties properties, List<ReplacementProperty> replacementProperties)", "modifiers": "public", "return": "void", "body": "public void performReplacement(Properties properties, List<ReplacementProperty> replacementProperties) {\n    if ((replacementProperties != null) && (properties != null)) {\n      for (ReplacementProperty replacementProperty: replacementProperties) {\n        String propertyKey = replacementProperty.getProperty();\n        if (propertyKey == null) {\n          performReplacementOnAllGeneratedProperties(properties, replacementProperty);\n        } else {\n          performReplacementOnSingleProperty(properties, replacementProperty, propertyKey);\n        }\n      }\n    }\n  }", "signature": "void performReplacement(Properties properties, List<ReplacementProperty> replacementProperties)", "full_signature": "public void performReplacement(Properties properties, List<ReplacementProperty> replacementProperties)", "class_method_signature": "PropertiesReplacer.performReplacement(Properties properties, List<ReplacementProperty> replacementProperties)", "testcase": false, "constructor": false, "invocations": ["getProperty", "performReplacementOnAllGeneratedProperties", "performReplacementOnSingleProperty"]}, "repository": {"repo_id": 1361792, "url": "https://github.com/git-commit-id/git-commit-id-maven-plugin", "stars": 1017, "created": "2/13/2011 1:55:14 PM +00:00", "updates": "2020-01-26T17:04:13+00:00", "fork": "False", "license": "licensed"}}