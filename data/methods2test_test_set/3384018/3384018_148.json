{"test_class": {"identifier": "TestBasicCredentialsProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static Credentials CREDS1 =\n        new UsernamePasswordCredentials(\"user1\", \"pass1\");", "modifier": "public final static", "type": "Credentials", "declarator": "CREDS1 =\n        new UsernamePasswordCredentials(\"user1\", \"pass1\")", "var_name": "CREDS1"}, {"original_string": "public final static Credentials CREDS2 =\n        new UsernamePasswordCredentials(\"user2\", \"pass2\");", "modifier": "public final static", "type": "Credentials", "declarator": "CREDS2 =\n        new UsernamePasswordCredentials(\"user2\", \"pass2\")", "var_name": "CREDS2"}, {"original_string": "public final static AuthScope SCOPE1 =\n        new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT, \"realm1\");", "modifier": "public final static", "type": "AuthScope", "declarator": "SCOPE1 =\n        new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT, \"realm1\")", "var_name": "SCOPE1"}, {"original_string": "public final static AuthScope SCOPE2 =\n        new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT, \"realm2\");", "modifier": "public final static", "type": "AuthScope", "declarator": "SCOPE2 =\n        new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT, \"realm2\")", "var_name": "SCOPE2"}, {"original_string": "public final static AuthScope BOGUS =\n        new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT, \"bogus\");", "modifier": "public final static", "type": "AuthScope", "declarator": "BOGUS =\n        new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT, \"bogus\")", "var_name": "BOGUS"}, {"original_string": "public final static AuthScope DEFSCOPE =\n        new AuthScope(\"host\", AuthScope.ANY_PORT, \"realm\");", "modifier": "public final static", "type": "AuthScope", "declarator": "DEFSCOPE =\n        new AuthScope(\"host\", AuthScope.ANY_PORT, \"realm\")", "var_name": "DEFSCOPE"}], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/impl/client/TestBasicCredentialsProvider.java"}, "test_case": {"identifier": "testBasicCredentialsProviderNoCredentials", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBasicCredentialsProviderNoCredentials() {\n        BasicCredentialsProvider state = new BasicCredentialsProvider();\n        Assert.assertEquals(null, state.getCredentials(BOGUS));\n    }", "signature": "void testBasicCredentialsProviderNoCredentials()", "full_signature": "@Test public void testBasicCredentialsProviderNoCredentials()", "class_method_signature": "TestBasicCredentialsProvider.testBasicCredentialsProviderNoCredentials()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getCredentials"]}, "focal_class": {"identifier": "BasicCredentialsProvider", "superclass": "", "interfaces": "implements CredentialsProvider", "fields": [{"original_string": "private final ConcurrentHashMap<AuthScope, Credentials> credMap;", "modifier": "private final", "type": "ConcurrentHashMap<AuthScope, Credentials>", "declarator": "credMap", "var_name": "credMap"}], "methods": [{"identifier": "BasicCredentialsProvider", "parameters": "()", "modifiers": "public", "return": "", "signature": " BasicCredentialsProvider()", "full_signature": "public  BasicCredentialsProvider()", "class_method_signature": "BasicCredentialsProvider.BasicCredentialsProvider()", "testcase": false, "constructor": true}, {"identifier": "setCredentials", "parameters": "(\n            final AuthScope authscope,\n            final Credentials credentials)", "modifiers": "public", "return": "void", "signature": "void setCredentials(\n            final AuthScope authscope,\n            final Credentials credentials)", "full_signature": "public void setCredentials(\n            final AuthScope authscope,\n            final Credentials credentials)", "class_method_signature": "BasicCredentialsProvider.setCredentials(\n            final AuthScope authscope,\n            final Credentials credentials)", "testcase": false, "constructor": false}, {"identifier": "matchCredentials", "parameters": "(\n            final Map<AuthScope, Credentials> map,\n            final AuthScope authscope)", "modifiers": "private static", "return": "Credentials", "signature": "Credentials matchCredentials(\n            final Map<AuthScope, Credentials> map,\n            final AuthScope authscope)", "full_signature": "private static Credentials matchCredentials(\n            final Map<AuthScope, Credentials> map,\n            final AuthScope authscope)", "class_method_signature": "BasicCredentialsProvider.matchCredentials(\n            final Map<AuthScope, Credentials> map,\n            final AuthScope authscope)", "testcase": false, "constructor": false}, {"identifier": "getCredentials", "parameters": "(final AuthScope authscope)", "modifiers": "public", "return": "Credentials", "signature": "Credentials getCredentials(final AuthScope authscope)", "full_signature": "public Credentials getCredentials(final AuthScope authscope)", "class_method_signature": "BasicCredentialsProvider.getCredentials(final AuthScope authscope)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "BasicCredentialsProvider.clear()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BasicCredentialsProvider.toString()", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/client/BasicCredentialsProvider.java"}, "focal_method": {"identifier": "getCredentials", "parameters": "(final AuthScope authscope)", "modifiers": "public", "return": "Credentials", "body": "public Credentials getCredentials(final AuthScope authscope) {\n        if (authscope == null) {\n            throw new IllegalArgumentException(\"Authentication scope may not be null\");\n        }\n        return matchCredentials(this.credMap, authscope);\n    }", "signature": "Credentials getCredentials(final AuthScope authscope)", "full_signature": "public Credentials getCredentials(final AuthScope authscope)", "class_method_signature": "BasicCredentialsProvider.getCredentials(final AuthScope authscope)", "testcase": false, "constructor": false, "invocations": ["matchCredentials"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}