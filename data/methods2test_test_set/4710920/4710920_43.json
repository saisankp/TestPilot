{"test_class": {"identifier": "QosProcessHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/QosProcessHandlerTest.java"}, "test_case": {"identifier": "testDecodeHttp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecodeHttp() throws Exception {\n        ByteBuf buf = Unpooled.wrappedBuffer(new byte[] {'G'});\n        ChannelHandlerContext context = Mockito.mock(ChannelHandlerContext.class);\n        ChannelPipeline pipeline = Mockito.mock(ChannelPipeline.class);\n        Mockito.when(context.pipeline()).thenReturn(pipeline);\n        QosProcessHandler handler = new QosProcessHandler(\"welcome\", false);\n        handler.decode(context, buf, Collections.emptyList());\n        verify(pipeline).addLast(any(HttpServerCodec.class));\n        verify(pipeline).addLast(any(HttpObjectAggregator.class));\n        verify(pipeline).addLast(any(HttpProcessHandler.class));\n        verify(pipeline).remove(handler);\n    }", "signature": "void testDecodeHttp()", "full_signature": "@Test public void testDecodeHttp()", "class_method_signature": "QosProcessHandlerTest.testDecodeHttp()", "testcase": true, "constructor": false, "invocations": ["wrappedBuffer", "mock", "mock", "thenReturn", "when", "pipeline", "decode", "emptyList", "addLast", "verify", "any", "addLast", "verify", "any", "addLast", "verify", "any", "remove", "verify"]}, "focal_class": {"identifier": "QosProcessHandler", "superclass": "extends ByteToMessageDecoder", "interfaces": "", "fields": [{"original_string": "private ScheduledFuture<?> welcomeFuture;", "modifier": "private", "type": "ScheduledFuture<?>", "declarator": "welcomeFuture", "var_name": "welcomeFuture"}, {"original_string": "private String welcome;", "modifier": "private", "type": "String", "declarator": "welcome", "var_name": "welcome"}, {"original_string": "private boolean acceptForeignIp;", "modifier": "private", "type": "boolean", "declarator": "acceptForeignIp", "var_name": "acceptForeignIp"}, {"original_string": "public static final String PROMPT = \"dubbo>\";", "modifier": "public static final", "type": "String", "declarator": "PROMPT = \"dubbo>\"", "var_name": "PROMPT"}], "methods": [{"identifier": "QosProcessHandler", "parameters": "(String welcome, boolean acceptForeignIp)", "modifiers": "public", "return": "", "signature": " QosProcessHandler(String welcome, boolean acceptForeignIp)", "full_signature": "public  QosProcessHandler(String welcome, boolean acceptForeignIp)", "class_method_signature": "QosProcessHandler.QosProcessHandler(String welcome, boolean acceptForeignIp)", "testcase": false, "constructor": true}, {"identifier": "channelActive", "parameters": "(final ChannelHandlerContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void channelActive(final ChannelHandlerContext ctx)", "full_signature": "@Override public void channelActive(final ChannelHandlerContext ctx)", "class_method_signature": "QosProcessHandler.channelActive(final ChannelHandlerContext ctx)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "modifiers": "@Override protected", "return": "void", "signature": "void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "full_signature": "@Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "class_method_signature": "QosProcessHandler.decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "testcase": false, "constructor": false}, {"identifier": "userEventTriggered", "parameters": "(ChannelHandlerContext ctx, Object evt)", "modifiers": "@Override public", "return": "void", "signature": "void userEventTriggered(ChannelHandlerContext ctx, Object evt)", "full_signature": "@Override public void userEventTriggered(ChannelHandlerContext ctx, Object evt)", "class_method_signature": "QosProcessHandler.userEventTriggered(ChannelHandlerContext ctx, Object evt)", "testcase": false, "constructor": false}, {"identifier": "isHttp", "parameters": "(int magic)", "modifiers": "private static", "return": "boolean", "signature": "boolean isHttp(int magic)", "full_signature": "private static boolean isHttp(int magic)", "class_method_signature": "QosProcessHandler.isHttp(int magic)", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/QosProcessHandler.java"}, "focal_method": {"identifier": "decode", "parameters": "(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        if (in.readableBytes() < 1) {\n            return;\n        }\n\n        // read one byte to guess protocol\n        final int magic = in.getByte(in.readerIndex());\n\n        ChannelPipeline p = ctx.pipeline();\n        p.addLast(new LocalHostPermitHandler(acceptForeignIp));\n        if (isHttp(magic)) {\n            // no welcome output for http protocol\n            if (welcomeFuture != null && welcomeFuture.isCancellable()) {\n                welcomeFuture.cancel(false);\n            }\n            p.addLast(new HttpServerCodec());\n            p.addLast(new HttpObjectAggregator(1048576));\n            p.addLast(new HttpProcessHandler());\n            p.remove(this);\n        } else {\n            p.addLast(new LineBasedFrameDecoder(2048));\n            p.addLast(new StringDecoder(CharsetUtil.UTF_8));\n            p.addLast(new StringEncoder(CharsetUtil.UTF_8));\n            p.addLast(new IdleStateHandler(0, 0, 5 * 60));\n            p.addLast(new TelnetProcessHandler());\n            p.remove(this);\n        }\n    }", "signature": "void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "full_signature": "@Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "class_method_signature": "QosProcessHandler.decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)", "testcase": false, "constructor": false, "invocations": ["readableBytes", "getByte", "readerIndex", "pipeline", "addLast", "isHttp", "isCancellable", "cancel", "addLast", "addLast", "addLast", "remove", "addLast", "addLast", "addLast", "addLast", "addLast", "remove"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}