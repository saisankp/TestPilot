{"test_class": {"identifier": "DdlChangesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DdlChanges changes;", "modifier": "private", "type": "DdlChanges", "declarator": "changes", "var_name": "changes"}, {"original_string": "private LegacyDdlParser parser;", "modifier": "private", "type": "LegacyDdlParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private Tables tables;", "modifier": "private", "type": "Tables", "declarator": "tables", "var_name": "tables"}], "file": "debezium-core/src/test/java/io/debezium/relational/ddl/DdlChangesTest.java"}, "test_case": {"identifier": "shouldParseMultipleStatementsWithDefaultDatabase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseMultipleStatementsWithDefaultDatabase() {\n        parser.setCurrentSchema(\"mydb\");\n        String ddl = \"CREATE TABLE foo ( \" + System.lineSeparator()\n                + \" c1 INTEGER NOT NULL, \" + System.lineSeparator()\n                + \" c2 VARCHAR(22) \" + System.lineSeparator()\n                + \"); \" + System.lineSeparator()\n                + \"-- This is a comment\" + System.lineSeparator()\n                + \"DROP TABLE foo;\" + System.lineSeparator();\n        parser.parse(ddl, tables);\n        assertThat(tables.size()).isEqualTo(0); // table created and dropped\n\n        changes.groupEventsByDatabase((dbName, list) -> {\n            assertThat(dbName).isEqualTo(\"mydb\");\n            assertThat(list.size()).isEqualTo(2);\n            assertThat(list.get(0).type()).isEqualTo(EventType.CREATE_TABLE);\n            assertThat(list.get(1).type()).isEqualTo(EventType.DROP_TABLE);\n        });\n    }", "signature": "void shouldParseMultipleStatementsWithDefaultDatabase()", "full_signature": "@Test public void shouldParseMultipleStatementsWithDefaultDatabase()", "class_method_signature": "DdlChangesTest.shouldParseMultipleStatementsWithDefaultDatabase()", "testcase": true, "constructor": false, "invocations": ["setCurrentSchema", "lineSeparator", "lineSeparator", "lineSeparator", "lineSeparator", "lineSeparator", "lineSeparator", "parse", "isEqualTo", "assertThat", "size", "groupEventsByDatabase", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "size", "isEqualTo", "assertThat", "type", "get", "isEqualTo", "assertThat", "type", "get"]}, "focal_class": {"identifier": "DdlChanges", "superclass": "", "interfaces": "implements DdlParserListener", "fields": [{"original_string": "private final String terminator;", "modifier": "private final", "type": "String", "declarator": "terminator", "var_name": "terminator"}, {"original_string": "private final List<Event> events = new ArrayList<>();", "modifier": "private final", "type": "List<Event>", "declarator": "events = new ArrayList<>()", "var_name": "events"}, {"original_string": "private final Set<String> databaseNames = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "databaseNames = new HashSet<>()", "var_name": "databaseNames"}], "methods": [{"identifier": "DdlChanges", "parameters": "()", "modifiers": "public", "return": "", "signature": " DdlChanges()", "full_signature": "public  DdlChanges()", "class_method_signature": "DdlChanges.DdlChanges()", "testcase": false, "constructor": true}, {"identifier": "DdlChanges", "parameters": "(String terminator)", "modifiers": "public", "return": "", "signature": " DdlChanges(String terminator)", "full_signature": "public  DdlChanges(String terminator)", "class_method_signature": "DdlChanges.DdlChanges(String terminator)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "DdlChanges", "signature": "DdlChanges reset()", "full_signature": "public DdlChanges reset()", "class_method_signature": "DdlChanges.reset()", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(Event event)", "modifiers": "@Override public", "return": "void", "signature": "void handle(Event event)", "full_signature": "@Override public void handle(Event event)", "class_method_signature": "DdlChanges.handle(Event event)", "testcase": false, "constructor": false}, {"identifier": "groupStatementStringsByDatabase", "parameters": "(DatabaseStatementStringConsumer consumer)", "modifiers": "public", "return": "void", "signature": "void groupStatementStringsByDatabase(DatabaseStatementStringConsumer consumer)", "full_signature": "public void groupStatementStringsByDatabase(DatabaseStatementStringConsumer consumer)", "class_method_signature": "DdlChanges.groupStatementStringsByDatabase(DatabaseStatementStringConsumer consumer)", "testcase": false, "constructor": false}, {"identifier": "addTable", "parameters": "(final Set<TableId> tables, Event event)", "modifiers": "private", "return": "void", "signature": "void addTable(final Set<TableId> tables, Event event)", "full_signature": "private void addTable(final Set<TableId> tables, Event event)", "class_method_signature": "DdlChanges.addTable(final Set<TableId> tables, Event event)", "testcase": false, "constructor": false}, {"identifier": "groupStatementsByDatabase", "parameters": "(DatabaseStatementConsumer consumer)", "modifiers": "public", "return": "void", "signature": "void groupStatementsByDatabase(DatabaseStatementConsumer consumer)", "full_signature": "public void groupStatementsByDatabase(DatabaseStatementConsumer consumer)", "class_method_signature": "DdlChanges.groupStatementsByDatabase(DatabaseStatementConsumer consumer)", "testcase": false, "constructor": false}, {"identifier": "groupEventsByDatabase", "parameters": "(DatabaseEventConsumer consumer)", "modifiers": "public", "return": "void", "signature": "void groupEventsByDatabase(DatabaseEventConsumer consumer)", "full_signature": "public void groupEventsByDatabase(DatabaseEventConsumer consumer)", "class_method_signature": "DdlChanges.groupEventsByDatabase(DatabaseEventConsumer consumer)", "testcase": false, "constructor": false}, {"identifier": "getDatabase", "parameters": "(Event event)", "modifiers": "protected", "return": "String", "signature": "String getDatabase(Event event)", "full_signature": "protected String getDatabase(Event event)", "class_method_signature": "DdlChanges.getDatabase(Event event)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "DdlChanges.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "applyToMoreDatabasesThan", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean applyToMoreDatabasesThan(String name)", "full_signature": "public boolean applyToMoreDatabasesThan(String name)", "class_method_signature": "DdlChanges.applyToMoreDatabasesThan(String name)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DdlChanges.toString()", "testcase": false, "constructor": false}, {"identifier": "anyMatch", "parameters": "(Predicate<String> databaseFilter, Predicate<TableId> tableFilter)", "modifiers": "public", "return": "boolean", "signature": "boolean anyMatch(Predicate<String> databaseFilter, Predicate<TableId> tableFilter)", "full_signature": "public boolean anyMatch(Predicate<String> databaseFilter, Predicate<TableId> tableFilter)", "class_method_signature": "DdlChanges.anyMatch(Predicate<String> databaseFilter, Predicate<TableId> tableFilter)", "testcase": false, "constructor": false}], "file": "debezium-core/src/main/java/io/debezium/relational/ddl/DdlChanges.java"}, "focal_method": {"identifier": "groupEventsByDatabase", "parameters": "(DatabaseEventConsumer consumer)", "modifiers": "public", "return": "void", "body": "public void groupEventsByDatabase(DatabaseEventConsumer consumer) {\n        if (isEmpty()) {\n            return;\n        }\n        if (databaseNames.size() <= 1) {\n            consumer.consume(databaseNames.iterator().next(), events);\n            return;\n        }\n        List<Event> dbEvents = new ArrayList<>();\n        String currentDatabase = null;\n        for (Event event : events) {\n            String dbName = getDatabase(event);\n            if (currentDatabase == null || dbName.equals(currentDatabase)) {\n                currentDatabase = dbName;\n                // Accumulate the statement ...\n                dbEvents.add(event);\n            }\n            else {\n                // Submit the statements ...\n                consumer.consume(currentDatabase, dbEvents);\n            }\n        }\n    }", "signature": "void groupEventsByDatabase(DatabaseEventConsumer consumer)", "full_signature": "public void groupEventsByDatabase(DatabaseEventConsumer consumer)", "class_method_signature": "DdlChanges.groupEventsByDatabase(DatabaseEventConsumer consumer)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "size", "consume", "next", "iterator", "getDatabase", "equals", "add", "consume"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}