{"test_class": {"identifier": "TimeWindowFunctionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TestClock clock = Clocks.testWorldClock(2000, Month.JANUARY, 1);", "modifier": "private final", "type": "TestClock", "declarator": "clock = Clocks.testWorldClock(2000, Month.JANUARY, 1)", "var_name": "clock"}, {"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test(clock);", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test(clock)", "var_name": "titusRuntime"}], "file": "titus-api/src/test/java/com/netflix/titus/api/jobmanager/model/job/disruptionbudget/TimeWindowFunctionsTest.java"}, "test_case": {"identifier": "testEmptyTimeWindowPredicate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyTimeWindowPredicate() {\n        Supplier<Boolean> predicate = TimeWindowFunctions.isInTimeWindowPredicate(titusRuntime, TimeWindow.empty());\n        assertThat(predicate.get()).isTrue();\n    }", "signature": "void testEmptyTimeWindowPredicate()", "full_signature": "@Test public void testEmptyTimeWindowPredicate()", "class_method_signature": "TimeWindowFunctionsTest.testEmptyTimeWindowPredicate()", "testcase": true, "constructor": false, "invocations": ["isInTimeWindowPredicate", "empty", "isTrue", "assertThat", "get"]}, "focal_class": {"identifier": "TimeWindowFunctions", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isEmpty", "parameters": "(TimeWindow timeWindow)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(TimeWindow timeWindow)", "full_signature": "public static boolean isEmpty(TimeWindow timeWindow)", "class_method_signature": "TimeWindowFunctions.isEmpty(TimeWindow timeWindow)", "testcase": false, "constructor": false}, {"identifier": "isInTimeWindowPredicate", "parameters": "(TitusRuntime titusRuntime, TimeWindow timeWindow)", "modifiers": "public static", "return": "Supplier<Boolean>", "signature": "Supplier<Boolean> isInTimeWindowPredicate(TitusRuntime titusRuntime, TimeWindow timeWindow)", "full_signature": "public static Supplier<Boolean> isInTimeWindowPredicate(TitusRuntime titusRuntime, TimeWindow timeWindow)", "class_method_signature": "TimeWindowFunctions.isInTimeWindowPredicate(TitusRuntime titusRuntime, TimeWindow timeWindow)", "testcase": false, "constructor": false}, {"identifier": "isInTimeWindowPredicate", "parameters": "(TitusRuntime titusRuntime, Collection<TimeWindow> timeWindows)", "modifiers": "public static", "return": "Supplier<Boolean>", "signature": "Supplier<Boolean> isInTimeWindowPredicate(TitusRuntime titusRuntime, Collection<TimeWindow> timeWindows)", "full_signature": "public static Supplier<Boolean> isInTimeWindowPredicate(TitusRuntime titusRuntime, Collection<TimeWindow> timeWindows)", "class_method_signature": "TimeWindowFunctions.isInTimeWindowPredicate(TitusRuntime titusRuntime, Collection<TimeWindow> timeWindows)", "testcase": false, "constructor": false}, {"identifier": "oneOf", "parameters": "(List<Function<T, Boolean>> basicPredicates)", "modifiers": "private static", "return": "Function<T, Boolean>", "signature": "Function<T, Boolean> oneOf(List<Function<T, Boolean>> basicPredicates)", "full_signature": "private static Function<T, Boolean> oneOf(List<Function<T, Boolean>> basicPredicates)", "class_method_signature": "TimeWindowFunctions.oneOf(List<Function<T, Boolean>> basicPredicates)", "testcase": false, "constructor": false}, {"identifier": "buildDayPredicate", "parameters": "(Day expectedDay)", "modifiers": "private static", "return": "Function<DayOfWeek, Boolean>", "signature": "Function<DayOfWeek, Boolean> buildDayPredicate(Day expectedDay)", "full_signature": "private static Function<DayOfWeek, Boolean> buildDayPredicate(Day expectedDay)", "class_method_signature": "TimeWindowFunctions.buildDayPredicate(Day expectedDay)", "testcase": false, "constructor": false}, {"identifier": "buildHourlyTimeWindows", "parameters": "(HourlyTimeWindow timeWindow)", "modifiers": "private static", "return": "Function<Integer, Boolean>", "signature": "Function<Integer, Boolean> buildHourlyTimeWindows(HourlyTimeWindow timeWindow)", "full_signature": "private static Function<Integer, Boolean> buildHourlyTimeWindows(HourlyTimeWindow timeWindow)", "class_method_signature": "TimeWindowFunctions.buildHourlyTimeWindows(HourlyTimeWindow timeWindow)", "testcase": false, "constructor": false}], "file": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/disruptionbudget/TimeWindowFunctions.java"}, "focal_method": {"identifier": "isInTimeWindowPredicate", "parameters": "(TitusRuntime titusRuntime, TimeWindow timeWindow)", "modifiers": "public static", "return": "Supplier<Boolean>", "body": "public static Supplier<Boolean> isInTimeWindowPredicate(TitusRuntime titusRuntime, TimeWindow timeWindow) {\n        if (isEmpty(timeWindow)) {\n            return () -> true;\n        }\n\n        List<Function<DayOfWeek, Boolean>> dayPredicates = new ArrayList<>();\n        timeWindow.getDays().forEach(day -> dayPredicates.add(buildDayPredicate(day)));\n\n        List<Function<Integer, Boolean>> hourPredicates = new ArrayList<>();\n        timeWindow.getHourlyTimeWindows().forEach(h -> hourPredicates.add(buildHourlyTimeWindows(h)));\n\n        Function<DayOfWeek, Boolean> combinedDayPredicate = dayPredicates.isEmpty() ? day -> true : oneOf(dayPredicates);\n        Function<Integer, Boolean> combinedHourPredicate = hourPredicates.isEmpty() ? hour -> true : oneOf(hourPredicates);\n\n        ZoneId zoneId;\n        try {\n            zoneId = DateTimeExt.toZoneId(timeWindow.getTimeZone());\n        } catch (Exception e) {\n            titusRuntime.getCodeInvariants().unexpectedError(\"Unrecognized time zone (data not properly validated)\", e);\n            return () -> false;\n        }\n\n        return () -> {\n            ZonedDateTime dateTime = Instant.ofEpochMilli(titusRuntime.getClock().wallTime()).atZone(zoneId);\n            return combinedDayPredicate.apply(dateTime.getDayOfWeek()) && combinedHourPredicate.apply(dateTime.getHour());\n        };\n    }", "signature": "Supplier<Boolean> isInTimeWindowPredicate(TitusRuntime titusRuntime, TimeWindow timeWindow)", "full_signature": "public static Supplier<Boolean> isInTimeWindowPredicate(TitusRuntime titusRuntime, TimeWindow timeWindow)", "class_method_signature": "TimeWindowFunctions.isInTimeWindowPredicate(TitusRuntime titusRuntime, TimeWindow timeWindow)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "forEach", "getDays", "add", "buildDayPredicate", "forEach", "getHourlyTimeWindows", "add", "buildHourlyTimeWindows", "isEmpty", "oneOf", "isEmpty", "oneOf", "toZoneId", "getTimeZone", "unexpectedError", "getCodeInvariants", "atZone", "ofEpochMilli", "wallTime", "getClock", "apply", "getDayOfWeek", "apply", "getHour"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}