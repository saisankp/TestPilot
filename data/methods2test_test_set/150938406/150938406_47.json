{"test_class": {"identifier": "SparseVectorSummarizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/statistics/basicstatistic/SparseVectorSummarizerTest.java"}, "test_case": {"identifier": "testVisit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVisit() {\n        SparseVectorSummarizer summarizer = summarizer();\n\n        Assert.assertEquals(5, summarizer.colNum);\n        Assert.assertEquals(5, summarizer.count);\n        Assert.assertEquals(5, summarizer.cols.size());\n        Assert.assertEquals(10, summarizer.cols.get(0).sum, 10e-6);\n        Assert.assertEquals(5, summarizer.cols.get(0).max, 10e-6);\n        Assert.assertEquals(1, summarizer.cols.get(0).min, 10e-6);\n        Assert.assertEquals(3, summarizer.cols.get(0).numNonZero, 10e-6);\n        Assert.assertEquals(10, summarizer.cols.get(0).normL1, 10e-6);\n        Assert.assertEquals(42, summarizer.cols.get(0).squareSum, 10e-6);\n    }", "signature": "void testVisit()", "full_signature": "@Test public void testVisit()", "class_method_signature": "SparseVectorSummarizerTest.testVisit()", "testcase": true, "constructor": false, "invocations": ["summarizer", "assertEquals", "assertEquals", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "SparseVectorSummarizer", "superclass": "extends BaseVectorSummarizer", "interfaces": "", "fields": [{"original_string": "protected int colNum = -1;", "modifier": "protected", "type": "int", "declarator": "colNum = -1", "var_name": "colNum"}, {"original_string": "public Map<Integer, VectorStatCol> cols = new HashMap<>();", "modifier": "public", "type": "Map<Integer, VectorStatCol>", "declarator": "cols = new HashMap<>()", "var_name": "cols"}], "methods": [{"identifier": "SparseVectorSummarizer", "parameters": "()", "modifiers": "public", "return": "", "signature": " SparseVectorSummarizer()", "full_signature": "public  SparseVectorSummarizer()", "class_method_signature": "SparseVectorSummarizer.SparseVectorSummarizer()", "testcase": false, "constructor": true}, {"identifier": "SparseVectorSummarizer", "parameters": "(boolean calculateOuterProduction)", "modifiers": "public", "return": "", "signature": " SparseVectorSummarizer(boolean calculateOuterProduction)", "full_signature": "public  SparseVectorSummarizer(boolean calculateOuterProduction)", "class_method_signature": "SparseVectorSummarizer.SparseVectorSummarizer(boolean calculateOuterProduction)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "BaseVectorSummarizer", "signature": "BaseVectorSummarizer visit(Vector vec)", "full_signature": "@Override public BaseVectorSummarizer visit(Vector vec)", "class_method_signature": "SparseVectorSummarizer.visit(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SparseVectorSummarizer.toString()", "testcase": false, "constructor": false}, {"identifier": "toSummary", "parameters": "()", "modifiers": "@Override public", "return": "BaseVectorSummary", "signature": "BaseVectorSummary toSummary()", "full_signature": "@Override public BaseVectorSummary toSummary()", "class_method_signature": "SparseVectorSummarizer.toSummary()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "SparseVectorSummarizer", "signature": "SparseVectorSummarizer copy()", "full_signature": "public SparseVectorSummarizer copy()", "class_method_signature": "SparseVectorSummarizer.copy()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/statistics/basicstatistic/SparseVectorSummarizer.java"}, "focal_method": {"identifier": "visit", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "BaseVectorSummarizer", "body": "@Override\n    public BaseVectorSummarizer visit(Vector vec) {\n        SparseVector sv;\n\n        if (vec instanceof DenseVector) {\n            DenseVector dv = (DenseVector) vec;\n            int[] indices = new int[dv.size()];\n            for (int i = 0; i < dv.size(); i++) {\n                indices[i] = i;\n            }\n\n            sv = new SparseVector(dv.size(), indices, dv.getData());\n        } else {\n            sv = (SparseVector) vec;\n        }\n\n        count++;\n\n        this.colNum = Math.max(this.colNum, sv.size());\n\n        if (sv.numberOfValues() != 0) {\n\n            //max index + 1 for size.\n            VectorIterator iter = sv.iterator();\n            while (iter.hasNext()) {\n                int index = iter.getIndex();\n                double value = iter.getValue();\n\n                if (cols.containsKey(index)) {\n                    cols.get(index).visit(value);\n                } else {\n                    VectorStatCol statCol = new VectorStatCol();\n                    statCol.visit(value);\n                    cols.put(index, statCol);\n                }\n                iter.next();\n            }\n\n            if (calculateOuterProduct) {\n                int size = sv.getIndices()[sv.getIndices().length - 1] + 1;\n\n                if (outerProduct == null) {\n                    outerProduct = DenseMatrix.zeros(size, size);\n                } else {\n                    if (size > outerProduct.numRows()) {\n                        DenseMatrix dpNew = DenseMatrix.zeros(size, size);\n                        if (outerProduct != null) {\n                            outerProduct = VectorSummarizerUtil.plusEqual(dpNew, outerProduct);\n                        }\n                    }\n                }\n                for (int i = 0; i < sv.getIndices().length; i++) {\n                    double val = sv.getValues()[i];\n                    int iIdx = sv.getIndices()[i];\n                    for (int j = 0; j < sv.getIndices().length; j++) {\n                        outerProduct.add(iIdx, sv.getIndices()[j], val * sv.getValues()[j]);\n                    }\n                }\n            }\n        }\n        return this;\n    }", "signature": "BaseVectorSummarizer visit(Vector vec)", "full_signature": "@Override public BaseVectorSummarizer visit(Vector vec)", "class_method_signature": "SparseVectorSummarizer.visit(Vector vec)", "testcase": false, "constructor": false, "invocations": ["size", "size", "size", "getData", "max", "size", "numberOfValues", "iterator", "hasNext", "getIndex", "getValue", "containsKey", "visit", "get", "visit", "put", "next", "getIndices", "getIndices", "zeros", "numRows", "zeros", "plusEqual", "getIndices", "getValues", "getIndices", "getIndices", "add", "getIndices", "getValues"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}