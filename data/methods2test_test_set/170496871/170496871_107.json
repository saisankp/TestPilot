{"test_class": {"identifier": "ExponentialBackoffTimeoutStrategyTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [], "file": "modules/core/src/test/java/org/apache/ignite/spi/ExponentialBackoffTimeoutStrategyTest.java"}, "test_case": {"identifier": "totalBackoffTimeout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void totalBackoffTimeout() {\n        assertEquals(8_000, ExponentialBackoffTimeoutStrategy.totalBackoffTimeout(1000, 5000, 3));\n        assertEquals(45_000, ExponentialBackoffTimeoutStrategy.totalBackoffTimeout(5_000, 60_000, 3));\n    }", "signature": "void totalBackoffTimeout()", "full_signature": "@Test public void totalBackoffTimeout()", "class_method_signature": "ExponentialBackoffTimeoutStrategyTest.totalBackoffTimeout()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "totalBackoffTimeout", "assertEquals", "totalBackoffTimeout"]}, "focal_class": {"identifier": "ExponentialBackoffTimeoutStrategy", "superclass": "", "interfaces": "implements TimeoutStrategy", "fields": [{"original_string": "private static final double DLFT_BACKOFF_COEFF = 2.0;", "modifier": "private static final", "type": "double", "declarator": "DLFT_BACKOFF_COEFF = 2.0", "var_name": "DLFT_BACKOFF_COEFF"}, {"original_string": "private final long maxTimeout;", "modifier": "private final", "type": "long", "declarator": "maxTimeout", "var_name": "maxTimeout"}, {"original_string": "private final long totalTimeout;", "modifier": "private final", "type": "long", "declarator": "totalTimeout", "var_name": "totalTimeout"}, {"original_string": "private final long startNanos;", "modifier": "private final", "type": "long", "declarator": "startNanos", "var_name": "startNanos"}, {"original_string": "private long currTimeout;", "modifier": "private", "type": "long", "declarator": "currTimeout", "var_name": "currTimeout"}], "methods": [{"identifier": "totalBackoffTimeout", "parameters": "(\n            long initTimeout,\n            long maxTimeout,\n            long reconCnt\n    )", "modifiers": "public static", "return": "long", "signature": "long totalBackoffTimeout(\n            long initTimeout,\n            long maxTimeout,\n            long reconCnt\n    )", "full_signature": "public static long totalBackoffTimeout(\n            long initTimeout,\n            long maxTimeout,\n            long reconCnt\n    )", "class_method_signature": "ExponentialBackoffTimeoutStrategy.totalBackoffTimeout(\n            long initTimeout,\n            long maxTimeout,\n            long reconCnt\n    )", "testcase": false, "constructor": false}, {"identifier": "backoffTimeout", "parameters": "(long timeout, long maxTimeout)", "modifiers": "public static", "return": "long", "signature": "long backoffTimeout(long timeout, long maxTimeout)", "full_signature": "public static long backoffTimeout(long timeout, long maxTimeout)", "class_method_signature": "ExponentialBackoffTimeoutStrategy.backoffTimeout(long timeout, long maxTimeout)", "testcase": false, "constructor": false}, {"identifier": "ExponentialBackoffTimeoutStrategy", "parameters": "(\n        long totalTimeout,\n        long startTimeout,\n        long maxTimeout\n    )", "modifiers": "public", "return": "", "signature": " ExponentialBackoffTimeoutStrategy(\n        long totalTimeout,\n        long startTimeout,\n        long maxTimeout\n    )", "full_signature": "public  ExponentialBackoffTimeoutStrategy(\n        long totalTimeout,\n        long startTimeout,\n        long maxTimeout\n    )", "class_method_signature": "ExponentialBackoffTimeoutStrategy.ExponentialBackoffTimeoutStrategy(\n        long totalTimeout,\n        long startTimeout,\n        long maxTimeout\n    )", "testcase": false, "constructor": true}, {"identifier": "nextTimeout", "parameters": "(long timeout)", "modifiers": "@Override public", "return": "long", "signature": "long nextTimeout(long timeout)", "full_signature": "@Override public long nextTimeout(long timeout)", "class_method_signature": "ExponentialBackoffTimeoutStrategy.nextTimeout(long timeout)", "testcase": false, "constructor": false}, {"identifier": "remainingTime", "parameters": "(long curNanos)", "modifiers": "private", "return": "long", "signature": "long remainingTime(long curNanos)", "full_signature": "private long remainingTime(long curNanos)", "class_method_signature": "ExponentialBackoffTimeoutStrategy.remainingTime(long curNanos)", "testcase": false, "constructor": false}, {"identifier": "checkTimeout", "parameters": "(long timeInFut)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkTimeout(long timeInFut)", "full_signature": "@Override public boolean checkTimeout(long timeInFut)", "class_method_signature": "ExponentialBackoffTimeoutStrategy.checkTimeout(long timeInFut)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ExponentialBackoffTimeoutStrategy.toString()", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/spi/ExponentialBackoffTimeoutStrategy.java"}, "focal_method": {"identifier": "totalBackoffTimeout", "parameters": "(\n            long initTimeout,\n            long maxTimeout,\n            long reconCnt\n    )", "modifiers": "public static", "return": "long", "body": "public static long totalBackoffTimeout(\n            long initTimeout,\n            long maxTimeout,\n            long reconCnt\n    ) {\n        long totalBackoffTimeout = initTimeout;\n\n        for (int i = 1; i < reconCnt && totalBackoffTimeout < maxTimeout; i++)\n            totalBackoffTimeout += backoffTimeout(totalBackoffTimeout, maxTimeout);\n\n        return totalBackoffTimeout;\n    }", "signature": "long totalBackoffTimeout(\n            long initTimeout,\n            long maxTimeout,\n            long reconCnt\n    )", "full_signature": "public static long totalBackoffTimeout(\n            long initTimeout,\n            long maxTimeout,\n            long reconCnt\n    )", "class_method_signature": "ExponentialBackoffTimeoutStrategy.totalBackoffTimeout(\n            long initTimeout,\n            long maxTimeout,\n            long reconCnt\n    )", "testcase": false, "constructor": false, "invocations": ["backoffTimeout"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}