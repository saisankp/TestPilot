{"test_class": {"identifier": "TestHttpOptions", "superclass": "", "interfaces": "", "fields": [], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/client/methods/TestHttpOptions.java"}, "test_case": {"identifier": "testMultipleAllows", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultipleAllows() {\n        ProtocolVersion proto = new ProtocolVersion(\"HTTP\", 1, 1);\n        BasicStatusLine line = new BasicStatusLine(proto, 200, \"test reason\");\n        BasicHttpResponse resp = new BasicHttpResponse(line);\n        resp.addHeader(\"Allow\", \"POST\");\n        resp.addHeader(\"Allow\", \"GET\");\n\n        HttpOptions opt = new HttpOptions();\n        Set<String> methodsName = opt.getAllowedMethods(resp);\n\n        Assert.assertTrue(methodsName.contains(\"POST\"));\n        Assert.assertTrue(methodsName.contains(\"GET\"));\n    }", "signature": "void testMultipleAllows()", "full_signature": "@Test public void testMultipleAllows()", "class_method_signature": "TestHttpOptions.testMultipleAllows()", "testcase": true, "constructor": false, "invocations": ["addHeader", "addHeader", "getAllowedMethods", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "HttpOptions", "superclass": "extends HttpRequestBase", "interfaces": "", "fields": [{"original_string": "public final static String METHOD_NAME = \"OPTIONS\";", "modifier": "public final static", "type": "String", "declarator": "METHOD_NAME = \"OPTIONS\"", "var_name": "METHOD_NAME"}], "methods": [{"identifier": "HttpOptions", "parameters": "()", "modifiers": "public", "return": "", "signature": " HttpOptions()", "full_signature": "public  HttpOptions()", "class_method_signature": "HttpOptions.HttpOptions()", "testcase": false, "constructor": true}, {"identifier": "HttpOptions", "parameters": "(final URI uri)", "modifiers": "public", "return": "", "signature": " HttpOptions(final URI uri)", "full_signature": "public  HttpOptions(final URI uri)", "class_method_signature": "HttpOptions.HttpOptions(final URI uri)", "testcase": false, "constructor": true}, {"identifier": "HttpOptions", "parameters": "(final String uri)", "modifiers": "public", "return": "", "signature": " HttpOptions(final String uri)", "full_signature": "public  HttpOptions(final String uri)", "class_method_signature": "HttpOptions.HttpOptions(final String uri)", "testcase": false, "constructor": true}, {"identifier": "getMethod", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMethod()", "full_signature": "@Override public String getMethod()", "class_method_signature": "HttpOptions.getMethod()", "testcase": false, "constructor": false}, {"identifier": "getAllowedMethods", "parameters": "(final HttpResponse response)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getAllowedMethods(final HttpResponse response)", "full_signature": "public Set<String> getAllowedMethods(final HttpResponse response)", "class_method_signature": "HttpOptions.getAllowedMethods(final HttpResponse response)", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/methods/HttpOptions.java"}, "focal_method": {"identifier": "getAllowedMethods", "parameters": "(final HttpResponse response)", "modifiers": "public", "return": "Set<String>", "body": "public Set<String> getAllowedMethods(final HttpResponse response) {\n        if (response == null) {\n            throw new IllegalArgumentException(\"HTTP response may not be null\");\n        }\n\n        HeaderIterator it = response.headerIterator(\"Allow\");\n        Set<String> methods = new HashSet<String>();\n        while (it.hasNext()) {\n            Header header = it.nextHeader();\n            HeaderElement[] elements = header.getElements();\n            for (HeaderElement element : elements) {\n                methods.add(element.getName());\n            }\n        }\n        return methods;\n    }", "signature": "Set<String> getAllowedMethods(final HttpResponse response)", "full_signature": "public Set<String> getAllowedMethods(final HttpResponse response)", "class_method_signature": "HttpOptions.getAllowedMethods(final HttpResponse response)", "testcase": false, "constructor": false, "invocations": ["headerIterator", "hasNext", "nextHeader", "getElements", "add", "getName"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}