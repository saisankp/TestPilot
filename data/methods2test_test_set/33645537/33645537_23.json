{"test_class": {"identifier": "SimpleHeapImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<Integer> emptyList = new ArrayList<Integer>();", "modifier": "private final", "type": "List<Integer>", "declarator": "emptyList = new ArrayList<Integer>()", "var_name": "emptyList"}, {"original_string": "private final List<Integer> listWithElements = new ArrayList<Integer>();", "modifier": "private final", "type": "List<Integer>", "declarator": "listWithElements = new ArrayList<Integer>()", "var_name": "listWithElements"}, {"original_string": "private final Comparator<Integer> minHeapComparator = new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer foo, Integer bar) {\n\t\t\treturn bar - foo;\n\t\t}\n\t};", "modifier": "private final", "type": "Comparator<Integer>", "declarator": "minHeapComparator = new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer foo, Integer bar) {\n\t\t\treturn bar - foo;\n\t\t}\n\t}", "var_name": "minHeapComparator"}], "file": "algs/src/test/java/com/github/kowshik/bigo/sorting/SimpleHeapImplTest.java"}, "test_case": {"identifier": "sizeAfterInitialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void sizeAfterInitialization() {\n\t\tassertEquals(0, new SimpleHeapImpl<Integer>(minHeapComparator).size());\n\t\tassertEquals(6, new SimpleHeapImpl<Integer>(listWithElements,\n\t\t\t\tminHeapComparator).size());\n\t}", "signature": "void sizeAfterInitialization()", "full_signature": "@Test public void sizeAfterInitialization()", "class_method_signature": "SimpleHeapImplTest.sizeAfterInitialization()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "assertEquals", "size"]}, "focal_class": {"identifier": "SimpleHeapImpl", "superclass": "", "interfaces": "implements Heap<T>", "fields": [{"original_string": "private final List<T> heap;", "modifier": "private final", "type": "List<T>", "declarator": "heap", "var_name": "heap"}, {"original_string": "private final Comparator<T> comparator;", "modifier": "private final", "type": "Comparator<T>", "declarator": "comparator", "var_name": "comparator"}], "methods": [{"identifier": "SimpleHeapImpl", "parameters": "(Comparator<T> comparator)", "modifiers": "public", "return": "", "signature": " SimpleHeapImpl(Comparator<T> comparator)", "full_signature": "public  SimpleHeapImpl(Comparator<T> comparator)", "class_method_signature": "SimpleHeapImpl.SimpleHeapImpl(Comparator<T> comparator)", "testcase": false, "constructor": true}, {"identifier": "SimpleHeapImpl", "parameters": "(List<T> list, Comparator<T> comparator)", "modifiers": "public", "return": "", "signature": " SimpleHeapImpl(List<T> list, Comparator<T> comparator)", "full_signature": "public  SimpleHeapImpl(List<T> list, Comparator<T> comparator)", "class_method_signature": "SimpleHeapImpl.SimpleHeapImpl(List<T> list, Comparator<T> comparator)", "testcase": false, "constructor": true}, {"identifier": "SimpleHeapImpl", "parameters": "(T[] array, Comparator<T> comparator)", "modifiers": "public", "return": "", "signature": " SimpleHeapImpl(T[] array, Comparator<T> comparator)", "full_signature": "public  SimpleHeapImpl(T[] array, Comparator<T> comparator)", "class_method_signature": "SimpleHeapImpl.SimpleHeapImpl(T[] array, Comparator<T> comparator)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "SimpleHeapImpl.size()", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T peek()", "full_signature": "@Override public T peek()", "class_method_signature": "SimpleHeapImpl.peek()", "testcase": false, "constructor": false}, {"identifier": "pop", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T pop()", "full_signature": "@Override public T pop()", "class_method_signature": "SimpleHeapImpl.pop()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(T element)", "modifiers": "@Override public", "return": "void", "signature": "void add(T element)", "full_signature": "@Override public void add(T element)", "class_method_signature": "SimpleHeapImpl.add(T element)", "testcase": false, "constructor": false}, {"identifier": "heapify", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void heapify()", "full_signature": "private void heapify()", "class_method_signature": "SimpleHeapImpl.heapify()", "testcase": false, "constructor": false}, {"identifier": "heapify", "parameters": "(int rootIndex)", "modifiers": "private", "return": "void", "signature": "void heapify(int rootIndex)", "full_signature": "private void heapify(int rootIndex)", "class_method_signature": "SimpleHeapImpl.heapify(int rootIndex)", "testcase": false, "constructor": false}, {"identifier": "heapify", "parameters": "(int length, int rootIndex)", "modifiers": "private", "return": "void", "signature": "void heapify(int length, int rootIndex)", "full_signature": "private void heapify(int length, int rootIndex)", "class_method_signature": "SimpleHeapImpl.heapify(int length, int rootIndex)", "testcase": false, "constructor": false}, {"identifier": "leftChildIndex", "parameters": "(int index)", "modifiers": "private static", "return": "int", "signature": "int leftChildIndex(int index)", "full_signature": "private static int leftChildIndex(int index)", "class_method_signature": "SimpleHeapImpl.leftChildIndex(int index)", "testcase": false, "constructor": false}, {"identifier": "rightChildIndex", "parameters": "(int index)", "modifiers": "private static", "return": "int", "signature": "int rightChildIndex(int index)", "full_signature": "private static int rightChildIndex(int index)", "class_method_signature": "SimpleHeapImpl.rightChildIndex(int index)", "testcase": false, "constructor": false}, {"identifier": "parentIndex", "parameters": "(int index)", "modifiers": "private static", "return": "int", "signature": "int parentIndex(int index)", "full_signature": "private static int parentIndex(int index)", "class_method_signature": "SimpleHeapImpl.parentIndex(int index)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "SimpleHeapImpl.isEmpty()", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/kowshik/bigo/sorting/SimpleHeapImpl.java"}, "focal_method": {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int size() {\n\t\treturn heap.size();\n\t}", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "SimpleHeapImpl.size()", "testcase": false, "constructor": false, "invocations": ["size"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}