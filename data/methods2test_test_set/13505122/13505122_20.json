{"test_class": {"identifier": "SimpleProcessingItemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Tested private SimpleProcessingItem pi;", "modifier": "@Tested private", "type": "SimpleProcessingItem", "declarator": "pi", "var_name": "pi"}, {"original_string": "@Mocked private Processor processor;", "modifier": "@Mocked private", "type": "Processor", "declarator": "processor", "var_name": "processor"}, {"original_string": "@Mocked private SimpleStream stream;", "modifier": "@Mocked private", "type": "SimpleStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "@Mocked private StreamDestination destination;", "modifier": "@Mocked private", "type": "StreamDestination", "declarator": "destination", "var_name": "destination"}, {"original_string": "@Mocked private ContentEvent event;", "modifier": "@Mocked private", "type": "ContentEvent", "declarator": "event", "var_name": "event"}, {"original_string": "private final int parallelism = 4;", "modifier": "private final", "type": "int", "declarator": "parallelism = 4", "var_name": "parallelism"}, {"original_string": "private final int counter = 2;", "modifier": "private final", "type": "int", "declarator": "counter = 2", "var_name": "counter"}], "file": "samoa-local/src/test/java/com/yahoo/labs/samoa/topology/impl/SimpleProcessingItemTest.java"}, "test_case": {"identifier": "testProcessEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testProcessEvent() {\n\t\tnew Expectations() {\n\t\t\t{\n\t\t\t\tfor (int i=0; i<parallelism; i++) {\n\t\t\t\t\tprocessor.newProcessor(processor);\n\t\t\t\t\tresult=processor;\n\t\t\t\t\n\t\t\t\t\tprocessor.onCreate(anyInt);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tprocessor.process(event);\n\t\t\t}\n\t\t};\n\t\tpi.processEvent(event, counter);\n\t\t\n\t}", "signature": "void testProcessEvent()", "full_signature": "@Test public void testProcessEvent()", "class_method_signature": "SimpleProcessingItemTest.testProcessEvent()", "testcase": true, "constructor": false, "invocations": ["newProcessor", "onCreate", "process", "processEvent"]}, "focal_class": {"identifier": "SimpleProcessingItem", "superclass": "extends AbstractProcessingItem", "interfaces": "", "fields": [{"original_string": "private IProcessingItem[] arrayProcessingItem;", "modifier": "private", "type": "IProcessingItem[]", "declarator": "arrayProcessingItem", "var_name": "arrayProcessingItem"}], "methods": [{"identifier": "SimpleProcessingItem", "parameters": "(Processor processor)", "modifiers": "", "return": "", "signature": " SimpleProcessingItem(Processor processor)", "full_signature": "  SimpleProcessingItem(Processor processor)", "class_method_signature": "SimpleProcessingItem.SimpleProcessingItem(Processor processor)", "testcase": false, "constructor": true}, {"identifier": "SimpleProcessingItem", "parameters": "(Processor processor, int parallelism)", "modifiers": "", "return": "", "signature": " SimpleProcessingItem(Processor processor, int parallelism)", "full_signature": "  SimpleProcessingItem(Processor processor, int parallelism)", "class_method_signature": "SimpleProcessingItem.SimpleProcessingItem(Processor processor, int parallelism)", "testcase": false, "constructor": true}, {"identifier": "getProcessingItem", "parameters": "(int i)", "modifiers": "public", "return": "IProcessingItem", "signature": "IProcessingItem getProcessingItem(int i)", "full_signature": "public IProcessingItem getProcessingItem(int i)", "class_method_signature": "SimpleProcessingItem.getProcessingItem(int i)", "testcase": false, "constructor": false}, {"identifier": "addInputStream", "parameters": "(Stream inputStream, PartitioningScheme scheme)", "modifiers": "@Override protected", "return": "ProcessingItem", "signature": "ProcessingItem addInputStream(Stream inputStream, PartitioningScheme scheme)", "full_signature": "@Override protected ProcessingItem addInputStream(Stream inputStream, PartitioningScheme scheme)", "class_method_signature": "SimpleProcessingItem.addInputStream(Stream inputStream, PartitioningScheme scheme)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "SimpleProcessingItem", "signature": "SimpleProcessingItem copy()", "full_signature": "public SimpleProcessingItem copy()", "class_method_signature": "SimpleProcessingItem.copy()", "testcase": false, "constructor": false}, {"identifier": "processEvent", "parameters": "(ContentEvent event, int counter)", "modifiers": "public", "return": "void", "signature": "void processEvent(ContentEvent event, int counter)", "full_signature": "public void processEvent(ContentEvent event, int counter)", "class_method_signature": "SimpleProcessingItem.processEvent(ContentEvent event, int counter)", "testcase": false, "constructor": false}], "file": "samoa-local/src/main/java/com/yahoo/labs/samoa/topology/impl/SimpleProcessingItem.java"}, "focal_method": {"identifier": "processEvent", "parameters": "(ContentEvent event, int counter)", "modifiers": "public", "return": "void", "body": "public void processEvent(ContentEvent event, int counter) {\n    \t\n        int parallelism = this.getParallelism();\n        //System.out.println(\"Process event \"+event+\" (isLast=\"+event.isLastEvent()+\") with counter=\"+counter+\" while parallelism=\"+parallelism);\n        if (this.arrayProcessingItem == null && parallelism > 0) {\n            //Init processing elements, the first time they are needed\n            this.arrayProcessingItem = new IProcessingItem[parallelism];\n            for (int j = 0; j < parallelism; j++) {\n                arrayProcessingItem[j] = this.copy();\n                arrayProcessingItem[j].getProcessor().onCreate(j);\n            }\n        }\n        if (this.arrayProcessingItem != null) {\n        \tIProcessingItem pi = this.getProcessingItem(counter);\n        \tProcessor p = pi.getProcessor();\n        \t//System.out.println(\"PI=\"+pi+\", p=\"+p);\n            this.getProcessingItem(counter).getProcessor().process(event);\n        }\n    }", "signature": "void processEvent(ContentEvent event, int counter)", "full_signature": "public void processEvent(ContentEvent event, int counter)", "class_method_signature": "SimpleProcessingItem.processEvent(ContentEvent event, int counter)", "testcase": false, "constructor": false, "invocations": ["getParallelism", "copy", "onCreate", "getProcessor", "getProcessingItem", "getProcessor", "process", "getProcessor", "getProcessingItem"]}, "repository": {"repo_id": 13505122, "url": "https://github.com/YahooArchive/samoa", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 424, "size": 6642, "license": "licensed"}}