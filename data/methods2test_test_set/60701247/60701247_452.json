{"test_class": {"identifier": "VariantSelectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AndroidProject myAndroidProject;", "modifier": "private", "type": "AndroidProject", "declarator": "myAndroidProject", "var_name": "myAndroidProject"}, {"original_string": "private VariantSelector myVariantSelector;", "modifier": "private", "type": "VariantSelector", "declarator": "myVariantSelector", "var_name": "myVariantSelector"}], "file": "android/testSrc/com/android/tools/idea/gradle/project/sync/common/VariantSelectorTest.java"}, "test_case": {"identifier": "findVariantToSelectWithoutDebugVariant", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void findVariantToSelectWithoutDebugVariant() {\n    Variant aVariant = mock(Variant.class);\n    Variant bVariant = mock(Variant.class);\n\n    when(myAndroidProject.getVariants()).thenReturn(Lists.newArrayList(bVariant, aVariant));\n    when(aVariant.getName()).thenReturn(\"a\");\n    when(bVariant.getName()).thenReturn(\"b\");\n\n    Variant variant = myVariantSelector.findVariantToSelect(myAndroidProject);\n    assertSame(aVariant, variant);\n  }", "signature": "void findVariantToSelectWithoutDebugVariant()", "full_signature": "@Test public void findVariantToSelectWithoutDebugVariant()", "class_method_signature": "VariantSelectorTest.findVariantToSelectWithoutDebugVariant()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getVariants", "newArrayList", "thenReturn", "when", "getName", "thenReturn", "when", "getName", "findVariantToSelect", "assertSame"]}, "focal_class": {"identifier": "VariantSelector", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findVariantToSelect", "parameters": "(@NotNull AndroidProject androidProject)", "modifiers": "@Nullable public", "return": "Variant", "signature": "Variant findVariantToSelect(@NotNull AndroidProject androidProject)", "full_signature": "@Nullable public Variant findVariantToSelect(@NotNull AndroidProject androidProject)", "class_method_signature": "VariantSelector.findVariantToSelect(@NotNull AndroidProject androidProject)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/gradle/project/sync/common/VariantSelector.java"}, "focal_method": {"identifier": "findVariantToSelect", "parameters": "(@NotNull AndroidProject androidProject)", "modifiers": "@Nullable public", "return": "Variant", "body": "@Nullable\n  public Variant findVariantToSelect(@NotNull AndroidProject androidProject) {\n    Collection<Variant> variants = androidProject.getVariants();\n    if (variants.size() == 1) {\n      Variant variant = getFirstItem(variants);\n      assert variant != null;\n      return variant;\n    }\n    // look for \"debug\" variant. This is just a little convenience for the user that has not created any additional flavors/build types.\n    // trying to match something else may add more complexity for little gain.\n    for (Variant variant : variants) {\n      if (\"debug\".equals(variant.getName())) {\n        return variant;\n      }\n    }\n    List<Variant> sortedVariants = Lists.newArrayList(variants);\n    sortedVariants.sort(Comparator.comparing(Variant::getName));\n    return sortedVariants.isEmpty() ? null : sortedVariants.get(0);\n  }", "signature": "Variant findVariantToSelect(@NotNull AndroidProject androidProject)", "full_signature": "@Nullable public Variant findVariantToSelect(@NotNull AndroidProject androidProject)", "class_method_signature": "VariantSelector.findVariantToSelect(@NotNull AndroidProject androidProject)", "testcase": false, "constructor": false, "invocations": ["getVariants", "size", "getFirstItem", "equals", "getName", "newArrayList", "sort", "comparing", "isEmpty", "get"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}