{"test_class": {"identifier": "DcImporterServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SpyBean\n    private DcImporterService dcImporterService;", "modifier": "@SpyBean\n    private", "type": "DcImporterService", "declarator": "dcImporterService", "var_name": "dcImporterService"}, {"original_string": "@MockBean\n    private ExternalRestService externalRestService;", "modifier": "@MockBean\n    private", "type": "ExternalRestService", "declarator": "externalRestService", "var_name": "externalRestService"}, {"original_string": "@MockBean\n    private LocalAuthorityService localAuthorityService;", "modifier": "@MockBean\n    private", "type": "LocalAuthorityService", "declarator": "localAuthorityService", "var_name": "localAuthorityService"}, {"original_string": "@MockBean\n    private ActeService acteService;", "modifier": "@MockBean\n    private", "type": "ActeService", "declarator": "acteService", "var_name": "acteService"}, {"original_string": "@ClassRule\n    static public WireMockRule wireMockRule = new WireMockRule(8089);", "modifier": "@ClassRule\n    static public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(8089)", "var_name": "wireMockRule"}], "file": "acte-service/src/test/java/fr/sictiam/stela/acteservice/service/DcImporterServiceTest.java"}, "test_case": {"identifier": "getAccessTokenForDataOwner", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAccessTokenForDataOwner() {\n        LocalAuthority localAuthority = new LocalAuthority();\n        ReflectionTestUtils.setField(localAuthority, \"uuid\", \"uuid-local-authority-one-test\");\n\n        given(localAuthorityService.getBySiren(\"123456789\")).willReturn(Optional.of(localAuthority));\n        given(externalRestService.getAccessTokenFromKernel(any())).willReturn(Optional.of(\"access-token\"));\n\n        Optional<String> accessToken = dcImporterService.getAccessTokenForDataOwner();\n\n        Assert.assertTrue(accessToken.isPresent());\n    }", "signature": "void getAccessTokenForDataOwner()", "full_signature": "@Test public void getAccessTokenForDataOwner()", "class_method_signature": "DcImporterServiceTest.getAccessTokenForDataOwner()", "testcase": true, "constructor": false, "invocations": ["setField", "willReturn", "given", "getBySiren", "of", "willReturn", "given", "getAccessTokenFromKernel", "any", "of", "getAccessTokenForDataOwner", "assertTrue", "isPresent"]}, "focal_class": {"identifier": "DcImporterService", "superclass": "", "interfaces": "implements ApplicationListener<ActeHistoryEvent>", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DcImporterService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DcImporterService.class)", "var_name": "LOGGER"}, {"original_string": "private ExternalRestService externalRestService;", "modifier": "private", "type": "ExternalRestService", "declarator": "externalRestService", "var_name": "externalRestService"}, {"original_string": "private LocalAuthorityService localAuthorityService;", "modifier": "private", "type": "LocalAuthorityService", "declarator": "localAuthorityService", "var_name": "localAuthorityService"}, {"original_string": "private RestTemplate restTemplate;", "modifier": "private", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "private ActeService acteService;", "modifier": "private", "type": "ActeService", "declarator": "acteService", "var_name": "acteService"}, {"original_string": "@Value(\"${application.datacore.dataOwnerSiren}\")\n    private String dataOwnerSiren;", "modifier": "@Value(\"${application.datacore.dataOwnerSiren}\")\n    private", "type": "String", "declarator": "dataOwnerSiren", "var_name": "dataOwnerSiren"}, {"original_string": "@Value(\"${application.datacore.dcImporterUrl}\")\n    private String dcImporterUrl;", "modifier": "@Value(\"${application.datacore.dcImporterUrl}\")\n    private", "type": "String", "declarator": "dcImporterUrl", "var_name": "dcImporterUrl"}, {"original_string": "@Value(\"${application.datacore.baseUri}\")\n    private String baseUri;", "modifier": "@Value(\"${application.datacore.baseUri}\")\n    private", "type": "String", "declarator": "baseUri", "var_name": "baseUri"}, {"original_string": "@Value(\"${application.url}\")\n    private String applicationUrl;", "modifier": "@Value(\"${application.url}\")\n    private", "type": "String", "declarator": "applicationUrl", "var_name": "applicationUrl"}], "methods": [{"identifier": "DcImporterService", "parameters": "(ExternalRestService externalRestService, LocalAuthorityService localAuthorityService, RestTemplate restTemplate, ActeService acteService)", "modifiers": "@Autowired public", "return": "", "signature": " DcImporterService(ExternalRestService externalRestService, LocalAuthorityService localAuthorityService, RestTemplate restTemplate, ActeService acteService)", "full_signature": "@Autowired public  DcImporterService(ExternalRestService externalRestService, LocalAuthorityService localAuthorityService, RestTemplate restTemplate, ActeService acteService)", "class_method_signature": "DcImporterService.DcImporterService(ExternalRestService externalRestService, LocalAuthorityService localAuthorityService, RestTemplate restTemplate, ActeService acteService)", "testcase": false, "constructor": true}, {"identifier": "newResource", "parameters": "(String type, String project, Map<String, Object> properties, String accessToken)", "modifiers": "public", "return": "ResponseEntity<?>", "signature": "ResponseEntity<?> newResource(String type, String project, Map<String, Object> properties, String accessToken)", "full_signature": "public ResponseEntity<?> newResource(String type, String project, Map<String, Object> properties, String accessToken)", "class_method_signature": "DcImporterService.newResource(String type, String project, Map<String, Object> properties, String accessToken)", "testcase": false, "constructor": false}, {"identifier": "getAccessTokenForDataOwner", "parameters": "()", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getAccessTokenForDataOwner()", "full_signature": "public Optional<String> getAccessTokenForDataOwner()", "class_method_signature": "DcImporterService.getAccessTokenForDataOwner()", "testcase": false, "constructor": false}, {"identifier": "sendPublicActeToDcImporter", "parameters": "(Acte acte)", "modifiers": "public", "return": "void", "signature": "void sendPublicActeToDcImporter(Acte acte)", "full_signature": "public void sendPublicActeToDcImporter(Acte acte)", "class_method_signature": "DcImporterService.sendPublicActeToDcImporter(Acte acte)", "testcase": false, "constructor": false}, {"identifier": "buildActeDcUri", "parameters": "(String uuid, String siret, String date, String codeMatiere)", "modifiers": "private", "return": "String", "signature": "String buildActeDcUri(String uuid, String siret, String date, String codeMatiere)", "full_signature": "private String buildActeDcUri(String uuid, String siret, String date, String codeMatiere)", "class_method_signature": "DcImporterService.buildActeDcUri(String uuid, String siret, String date, String codeMatiere)", "testcase": false, "constructor": false}, {"identifier": "buildCollectiviteDcUri", "parameters": "(String siret)", "modifiers": "private", "return": "String", "signature": "String buildCollectiviteDcUri(String siret)", "full_signature": "private String buildCollectiviteDcUri(String siret)", "class_method_signature": "DcImporterService.buildCollectiviteDcUri(String siret)", "testcase": false, "constructor": false}, {"identifier": "buildAttachementUrl", "parameters": "(String uuid)", "modifiers": "private", "return": "String", "signature": "String buildAttachementUrl(String uuid)", "full_signature": "private String buildAttachementUrl(String uuid)", "class_method_signature": "DcImporterService.buildAttachementUrl(String uuid)", "testcase": false, "constructor": false}, {"identifier": "deliberationMatiereCodeAdapter", "parameters": "(String acteCode)", "modifiers": "private", "return": "String[]", "signature": "String[] deliberationMatiereCodeAdapter(String acteCode)", "full_signature": "private String[] deliberationMatiereCodeAdapter(String acteCode)", "class_method_signature": "DcImporterService.deliberationMatiereCodeAdapter(String acteCode)", "testcase": false, "constructor": false}, {"identifier": "getLevelTwoOfDeliberationMatiereCode", "parameters": "(String acteCode)", "modifiers": "private", "return": "String", "signature": "String getLevelTwoOfDeliberationMatiereCode(String acteCode)", "full_signature": "private String getLevelTwoOfDeliberationMatiereCode(String acteCode)", "class_method_signature": "DcImporterService.getLevelTwoOfDeliberationMatiereCode(String acteCode)", "testcase": false, "constructor": false}, {"identifier": "getLocalAuthorityDcId", "parameters": "(LocalAuthority localAuthority)", "modifiers": "private", "return": "String", "signature": "String getLocalAuthorityDcId(LocalAuthority localAuthority)", "full_signature": "private String getLocalAuthorityDcId(LocalAuthority localAuthority)", "class_method_signature": "DcImporterService.getLocalAuthorityDcId(LocalAuthority localAuthority)", "testcase": false, "constructor": false}, {"identifier": "onApplicationEvent", "parameters": "(@NotNull ActeHistoryEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onApplicationEvent(@NotNull ActeHistoryEvent event)", "full_signature": "@Override public void onApplicationEvent(@NotNull ActeHistoryEvent event)", "class_method_signature": "DcImporterService.onApplicationEvent(@NotNull ActeHistoryEvent event)", "testcase": false, "constructor": false}], "file": "acte-service/src/main/java/fr/sictiam/stela/acteservice/service/DcImporterService.java"}, "focal_method": {"identifier": "getAccessTokenForDataOwner", "parameters": "()", "modifiers": "public", "return": "Optional<String>", "body": "public Optional<String> getAccessTokenForDataOwner() {\n        Optional<LocalAuthority> localAuthority = localAuthorityService.getBySiren(dataOwnerSiren);\n\n        if(localAuthority.isPresent())\n            return externalRestService.getAccessTokenFromKernel(localAuthority.get());\n        else {\n            LOGGER.warn(\"[getAccessTokenForDataOwner] Not found local authority for configured dataOwnerSiren {}\", dataOwnerSiren);\n            return Optional.empty();\n        }\n    }", "signature": "Optional<String> getAccessTokenForDataOwner()", "full_signature": "public Optional<String> getAccessTokenForDataOwner()", "class_method_signature": "DcImporterService.getAccessTokenForDataOwner()", "testcase": false, "constructor": false, "invocations": ["getBySiren", "isPresent", "getAccessTokenFromKernel", "get", "warn", "empty"]}, "repository": {"repo_id": 180337008, "url": "https://github.com/SICTIAM/stela", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 7714, "license": "licensed"}}