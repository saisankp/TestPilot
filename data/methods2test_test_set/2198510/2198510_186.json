{"test_class": {"identifier": "TestResettableFileInputStream", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final boolean CLEANUP = true;", "modifier": "private static final", "type": "boolean", "declarator": "CLEANUP = true", "var_name": "CLEANUP"}, {"original_string": "private static final File WORK_DIR =\n      new File(\"target/test/work\").getAbsoluteFile();", "modifier": "private static final", "type": "File", "declarator": "WORK_DIR =\n      new File(\"target/test/work\").getAbsoluteFile()", "var_name": "WORK_DIR"}, {"original_string": "private static final Logger logger =\n      LoggerFactory.getLogger(TestResettableFileInputStream.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n      LoggerFactory.getLogger(TestResettableFileInputStream.class)", "var_name": "logger"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private File meta;", "modifier": "private", "type": "File", "declarator": "meta", "var_name": "meta"}], "file": "flume-ng-core/src/test/java/org/apache/flume/serialization/TestResettableFileInputStream.java"}, "test_case": {"identifier": "testLatin1DecodeErrorHandlingReplace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLatin1DecodeErrorHandlingReplace() throws IOException {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    generateLatin1InvalidSequence(out);\n    Files.write(out.toByteArray(), file);\n    ResettableInputStream in = initInputStream(DecodeErrorPolicy.REPLACE);\n\n    int c;\n    StringBuilder sb = new StringBuilder();\n    while ((c = in.readChar()) != -1) {\n      sb.append((char)c);\n    }\n    assertEquals(\"Invalid: (X)\\n\".replaceAll(\"X\", \"\\ufffd\"), sb.toString());\n  }", "signature": "void testLatin1DecodeErrorHandlingReplace()", "full_signature": "@Test public void testLatin1DecodeErrorHandlingReplace()", "class_method_signature": "TestResettableFileInputStream.testLatin1DecodeErrorHandlingReplace()", "testcase": true, "constructor": false, "invocations": ["generateLatin1InvalidSequence", "write", "toByteArray", "initInputStream", "readChar", "append", "assertEquals", "replaceAll", "toString"]}, "focal_class": {"identifier": "ResettableFileInputStream", "superclass": "extends ResettableInputStream", "interfaces": "implements RemoteMarkable, LengthMeasurable", "fields": [{"original_string": "Logger logger = LoggerFactory.getLogger(ResettableFileInputStream.class);", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ResettableFileInputStream.class)", "var_name": "logger"}, {"original_string": "public static final int DEFAULT_BUF_SIZE = 16384;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_BUF_SIZE = 16384", "var_name": "DEFAULT_BUF_SIZE"}, {"original_string": "public static final int MIN_BUF_SIZE = 8;", "modifier": "public static final", "type": "int", "declarator": "MIN_BUF_SIZE = 8", "var_name": "MIN_BUF_SIZE"}, {"original_string": "private final File file;", "modifier": "private final", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private final PositionTracker tracker;", "modifier": "private final", "type": "PositionTracker", "declarator": "tracker", "var_name": "tracker"}, {"original_string": "private final FileInputStream in;", "modifier": "private final", "type": "FileInputStream", "declarator": "in", "var_name": "in"}, {"original_string": "private final FileChannel chan;", "modifier": "private final", "type": "FileChannel", "declarator": "chan", "var_name": "chan"}, {"original_string": "private final ByteBuffer buf;", "modifier": "private final", "type": "ByteBuffer", "declarator": "buf", "var_name": "buf"}, {"original_string": "private final CharBuffer charBuf;", "modifier": "private final", "type": "CharBuffer", "declarator": "charBuf", "var_name": "charBuf"}, {"original_string": "private final byte[] byteBuf;", "modifier": "private final", "type": "byte[]", "declarator": "byteBuf", "var_name": "byteBuf"}, {"original_string": "private final long fileSize;", "modifier": "private final", "type": "long", "declarator": "fileSize", "var_name": "fileSize"}, {"original_string": "private final CharsetDecoder decoder;", "modifier": "private final", "type": "CharsetDecoder", "declarator": "decoder", "var_name": "decoder"}, {"original_string": "private long position;", "modifier": "private", "type": "long", "declarator": "position", "var_name": "position"}, {"original_string": "private long syncPosition;", "modifier": "private", "type": "long", "declarator": "syncPosition", "var_name": "syncPosition"}, {"original_string": "private int maxCharWidth;", "modifier": "private", "type": "int", "declarator": "maxCharWidth", "var_name": "maxCharWidth"}, {"original_string": "private boolean hasLowSurrogate = false;", "modifier": "private", "type": "boolean", "declarator": "hasLowSurrogate = false", "var_name": "hasLowSurrogate"}, {"original_string": "private char lowSurrogate;", "modifier": "private", "type": "char", "declarator": "lowSurrogate", "var_name": "lowSurrogate"}], "methods": [{"identifier": "ResettableFileInputStream", "parameters": "(File file, PositionTracker tracker)", "modifiers": "public", "return": "", "signature": " ResettableFileInputStream(File file, PositionTracker tracker)", "full_signature": "public  ResettableFileInputStream(File file, PositionTracker tracker)", "class_method_signature": "ResettableFileInputStream.ResettableFileInputStream(File file, PositionTracker tracker)", "testcase": false, "constructor": true}, {"identifier": "ResettableFileInputStream", "parameters": "(File file, PositionTracker tracker,\n      int bufSize, Charset charset, DecodeErrorPolicy decodeErrorPolicy)", "modifiers": "public", "return": "", "signature": " ResettableFileInputStream(File file, PositionTracker tracker,\n      int bufSize, Charset charset, DecodeErrorPolicy decodeErrorPolicy)", "full_signature": "public  ResettableFileInputStream(File file, PositionTracker tracker,\n      int bufSize, Charset charset, DecodeErrorPolicy decodeErrorPolicy)", "class_method_signature": "ResettableFileInputStream.ResettableFileInputStream(File file, PositionTracker tracker,\n      int bufSize, Charset charset, DecodeErrorPolicy decodeErrorPolicy)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public synchronized", "return": "int", "signature": "int read()", "full_signature": "@Override public synchronized int read()", "class_method_signature": "ResettableFileInputStream.read()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] b, int off, int len)", "modifiers": "@Override public synchronized", "return": "int", "signature": "int read(byte[] b, int off, int len)", "full_signature": "@Override public synchronized int read(byte[] b, int off, int len)", "class_method_signature": "ResettableFileInputStream.read(byte[] b, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "readChar", "parameters": "()", "modifiers": "@Override public synchronized", "return": "int", "signature": "int readChar()", "full_signature": "@Override public synchronized int readChar()", "class_method_signature": "ResettableFileInputStream.readChar()", "testcase": false, "constructor": false}, {"identifier": "refillBuf", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refillBuf()", "full_signature": "private void refillBuf()", "class_method_signature": "ResettableFileInputStream.refillBuf()", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void mark()", "full_signature": "@Override public void mark()", "class_method_signature": "ResettableFileInputStream.mark()", "testcase": false, "constructor": false}, {"identifier": "markPosition", "parameters": "(long position)", "modifiers": "@Override public", "return": "void", "signature": "void markPosition(long position)", "full_signature": "@Override public void markPosition(long position)", "class_method_signature": "ResettableFileInputStream.markPosition(long position)", "testcase": false, "constructor": false}, {"identifier": "getMarkPosition", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getMarkPosition()", "full_signature": "@Override public long getMarkPosition()", "class_method_signature": "ResettableFileInputStream.getMarkPosition()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "ResettableFileInputStream.reset()", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long length()", "full_signature": "@Override public long length()", "class_method_signature": "ResettableFileInputStream.length()", "testcase": false, "constructor": false}, {"identifier": "tell", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long tell()", "full_signature": "@Override public long tell()", "class_method_signature": "ResettableFileInputStream.tell()", "testcase": false, "constructor": false}, {"identifier": "seek", "parameters": "(long newPos)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void seek(long newPos)", "full_signature": "@Override public synchronized void seek(long newPos)", "class_method_signature": "ResettableFileInputStream.seek(long newPos)", "testcase": false, "constructor": false}, {"identifier": "incrPosition", "parameters": "(int incr, boolean updateSyncPosition)", "modifiers": "private", "return": "void", "signature": "void incrPosition(int incr, boolean updateSyncPosition)", "full_signature": "private void incrPosition(int incr, boolean updateSyncPosition)", "class_method_signature": "ResettableFileInputStream.incrPosition(int incr, boolean updateSyncPosition)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ResettableFileInputStream.close()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/serialization/ResettableFileInputStream.java"}, "focal_method": {"identifier": "readChar", "parameters": "()", "modifiers": "@Override public synchronized", "return": "int", "body": "@Override\n  public synchronized int readChar() throws IOException {\n\n    // Check whether we are in the middle of a surrogate pair,\n    // in which case, return the last (low surrogate) char of the pair.\n    if (hasLowSurrogate) {\n      hasLowSurrogate = false;\n      return lowSurrogate;\n    }\n\n    // The decoder can have issues with multi-byte characters.\n    // This check ensures that there are at least maxCharWidth bytes in the buffer\n    // before reaching EOF.\n    if (buf.remaining() < maxCharWidth) {\n      buf.clear();\n      buf.flip();\n      refillBuf();\n    }\n\n    int start = buf.position();\n    charBuf.clear();\n    charBuf.limit(1);\n\n    boolean isEndOfInput = false;\n    if (position >= fileSize) {\n      isEndOfInput = true;\n    }\n\n    CoderResult res = decoder.decode(buf, charBuf, isEndOfInput);\n    if (res.isMalformed() || res.isUnmappable()) {\n      res.throwException();\n    }\n\n    int delta = buf.position() - start;\n\n    charBuf.flip();\n\n    // Found a single char\n    if (charBuf.hasRemaining()) {\n      char c = charBuf.get();\n      incrPosition(delta, true);\n      return c;\n    }\n\n    // Found nothing, but the byte buffer has not been entirely consumed.\n    // This situation denotes the presence of a surrogate pair\n    // that can only be decoded if we have a 2-char buffer.\n    if (buf.hasRemaining()) {\n      charBuf.clear();\n      // increase the limit to 2\n      charBuf.limit(2);\n      // decode 2 chars in one pass\n      res = decoder.decode(buf, charBuf, isEndOfInput);\n      if (res.isMalformed() || res.isUnmappable()) {\n        res.throwException();\n      }\n      charBuf.flip();\n      // Check if we successfully decoded 2 chars\n      if (charBuf.remaining() == 2) {\n        char highSurrogate = charBuf.get();\n        // save second (low surrogate) char for later consumption\n        lowSurrogate = charBuf.get();\n        // Check if we really have a surrogate pair\n        if (!Character.isHighSurrogate(highSurrogate) || !Character.isLowSurrogate(lowSurrogate)) {\n          // This should only happen in case of bad sequences (dangling surrogate, etc.)\n          logger.warn(\"Decoded a pair of chars, but it does not seem to be a surrogate pair: {} {}\",\n                      (int)highSurrogate, (int)lowSurrogate);\n        }\n        hasLowSurrogate = true;\n        // consider the pair as a single unit and increment position normally\n        delta = buf.position() - start;\n        incrPosition(delta, true);\n        // return the first (high surrogate) char of the pair\n        return highSurrogate;\n      }\n    }\n\n    // end of file\n    incrPosition(delta, false);\n    return -1;\n\n  }", "signature": "int readChar()", "full_signature": "@Override public synchronized int readChar()", "class_method_signature": "ResettableFileInputStream.readChar()", "testcase": false, "constructor": false, "invocations": ["remaining", "clear", "flip", "refillBuf", "position", "clear", "limit", "decode", "isMalformed", "isUnmappable", "throwException", "position", "flip", "hasRemaining", "get", "incrPosition", "hasRemaining", "clear", "limit", "decode", "isMalformed", "isUnmappable", "throwException", "flip", "remaining", "get", "get", "isHighSurrogate", "isLowSurrogate", "warn", "position", "incrPosition", "incrPosition"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}