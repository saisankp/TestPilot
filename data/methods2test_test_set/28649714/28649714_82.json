{"test_class": {"identifier": "RunScoringInteractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RunScoringInteractor interactor;", "modifier": "private", "type": "RunScoringInteractor", "declarator": "interactor", "var_name": "interactor"}, {"original_string": "@Mock\n    RawTimeScoringInteractor rawTimeScoringInteractor;", "modifier": "@Mock", "type": "RawTimeScoringInteractor", "declarator": "rawTimeScoringInteractor", "var_name": "rawTimeScoringInteractor"}, {"original_string": "@Mock\n    HandicapTimeScoringInteractor handicapTimeScoringInteractor;", "modifier": "@Mock", "type": "HandicapTimeScoringInteractor", "declarator": "handicapTimeScoringInteractor", "var_name": "handicapTimeScoringInteractor"}, {"original_string": "@Mock\n    Run run;", "modifier": "@Mock", "type": "Run", "declarator": "run", "var_name": "run"}, {"original_string": "@Mock\n    Event event;", "modifier": "@Mock", "type": "Event", "declarator": "event", "var_name": "event"}], "file": "service/src/test/java/org/coner/core/domain/interactor/RunScoringInteractorTest.java"}, "test_case": {"identifier": "itShouldNotScoreRunWithoutCompetitive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void itShouldNotScoreRunWithoutCompetitive() {\n        when(run.getRawTime()).thenReturn(TestConstants.RUN_RAW_TIME);\n        when(run.getRerun()).thenReturn(false);\n        when(run.getCompetitive()).thenReturn(false);\n\n        ScoredRun actual = interactor.score(run);\n\n        assertThat(actual).isNull();\n        verifyZeroInteractions(rawTimeScoringInteractor, handicapTimeScoringInteractor);\n    }", "signature": "void itShouldNotScoreRunWithoutCompetitive()", "full_signature": "@Test public void itShouldNotScoreRunWithoutCompetitive()", "class_method_signature": "RunScoringInteractorTest.itShouldNotScoreRunWithoutCompetitive()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getRawTime", "thenReturn", "when", "getRerun", "thenReturn", "when", "getCompetitive", "score", "isNull", "assertThat", "verifyZeroInteractions"]}, "focal_class": {"identifier": "RunScoringInteractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RawTimeScoringInteractor rawTimeScoringInteractor;", "modifier": "private final", "type": "RawTimeScoringInteractor", "declarator": "rawTimeScoringInteractor", "var_name": "rawTimeScoringInteractor"}, {"original_string": "private final Map<HandicapTimeScoringMethod, HandicapTimeScoringInteractor> handicapTimeScoringInteractors;", "modifier": "private final", "type": "Map<HandicapTimeScoringMethod, HandicapTimeScoringInteractor>", "declarator": "handicapTimeScoringInteractors", "var_name": "handicapTimeScoringInteractors"}, {"original_string": "public static final BigDecimal TIME_DID_NOT_FINISH = BigDecimal.valueOf(Long.MAX_VALUE, 3);", "modifier": "public static final", "type": "BigDecimal", "declarator": "TIME_DID_NOT_FINISH = BigDecimal.valueOf(Long.MAX_VALUE, 3)", "var_name": "TIME_DID_NOT_FINISH"}], "methods": [{"identifier": "RunScoringInteractor", "parameters": "(\n            RawTimeScoringInteractor rawTimeScoringInteractor,\n            Map<HandicapTimeScoringMethod, HandicapTimeScoringInteractor> handicapTimeScoringInteractors\n    )", "modifiers": "@Inject public", "return": "", "signature": " RunScoringInteractor(\n            RawTimeScoringInteractor rawTimeScoringInteractor,\n            Map<HandicapTimeScoringMethod, HandicapTimeScoringInteractor> handicapTimeScoringInteractors\n    )", "full_signature": "@Inject public  RunScoringInteractor(\n            RawTimeScoringInteractor rawTimeScoringInteractor,\n            Map<HandicapTimeScoringMethod, HandicapTimeScoringInteractor> handicapTimeScoringInteractors\n    )", "class_method_signature": "RunScoringInteractor.RunScoringInteractor(\n            RawTimeScoringInteractor rawTimeScoringInteractor,\n            Map<HandicapTimeScoringMethod, HandicapTimeScoringInteractor> handicapTimeScoringInteractors\n    )", "testcase": false, "constructor": true}, {"identifier": "score", "parameters": "(Run run)", "modifiers": "public", "return": "ScoredRun", "signature": "ScoredRun score(Run run)", "full_signature": "public ScoredRun score(Run run)", "class_method_signature": "RunScoringInteractor.score(Run run)", "testcase": false, "constructor": false}, {"identifier": "shouldScore", "parameters": "(Run run)", "modifiers": "", "return": "boolean", "signature": "boolean shouldScore(Run run)", "full_signature": " boolean shouldScore(Run run)", "class_method_signature": "RunScoringInteractor.shouldScore(Run run)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/domain/interactor/RunScoringInteractor.java"}, "focal_method": {"identifier": "score", "parameters": "(Run run)", "modifiers": "public", "return": "ScoredRun", "body": "public ScoredRun score(Run run) {\n        if (!shouldScore(run)) {\n            return null;\n        }\n        ScoredRun scoredRun = new ScoredRun();\n        scoredRun.setRun(run);\n\n        if (!run.getDidNotFinish()) {\n            rawTimeScoringInteractor.score(scoredRun);\n            HandicapTimeScoringMethod handicapTimeScoringMethod = run.getEvent().getHandicapTimeScoringMethod();\n            if (handicapTimeScoringInteractors.containsKey(handicapTimeScoringMethod)) {\n                handicapTimeScoringInteractors.get(handicapTimeScoringMethod)\n                        .score(scoredRun);\n            } else {\n                throw new UnsupportedOperationException(\n                        \"Unsupported HandicapTimeScoringMethod: \" + handicapTimeScoringMethod\n                );\n            }\n        } else {\n            scoredRun.setRawTimeScored(TIME_DID_NOT_FINISH);\n            scoredRun.setHandicapTimeScored(TIME_DID_NOT_FINISH);\n        }\n\n        return scoredRun;\n    }", "signature": "ScoredRun score(Run run)", "full_signature": "public ScoredRun score(Run run)", "class_method_signature": "RunScoringInteractor.score(Run run)", "testcase": false, "constructor": false, "invocations": ["shouldScore", "setRun", "getDidNotFinish", "score", "getHandicapTimeScoringMethod", "getEvent", "containsKey", "score", "get", "setRawTimeScored", "setHandicapTimeScored"]}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}