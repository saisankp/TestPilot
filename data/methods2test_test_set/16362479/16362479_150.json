{"test_class": {"identifier": "RaftActorContextImplTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "private final TestActorFactory actorFactory = new TestActorFactory(getSystem());", "modifier": "private final", "type": "TestActorFactory", "declarator": "actorFactory = new TestActorFactory(getSystem())", "var_name": "actorFactory"}, {"original_string": "private final TestActorRef<DoNothingActor> actor = actorFactory.createTestActor(\n            Props.create(DoNothingActor.class), actorFactory.generateActorId(\"actor\"));", "modifier": "private final", "type": "TestActorRef<DoNothingActor>", "declarator": "actor = actorFactory.createTestActor(\n            Props.create(DoNothingActor.class), actorFactory.generateActorId(\"actor\"))", "var_name": "actor"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RaftActorContextImplTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RaftActorContextImplTest.class)", "var_name": "LOG"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/RaftActorContextImplTest.java"}, "test_case": {"identifier": "testUpdatePeerIds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdatePeerIds() {\n        RaftActorContextImpl context = new RaftActorContextImpl(actor, actor.underlyingActor().getContext(),\n                \"self\", new ElectionTermImpl(createProvider(), \"test\", LOG), -1, -1,\n                new HashMap<>(ImmutableMap.of(\"peer1\", \"peerAddress1\")),\n                new DefaultConfigParamsImpl(), createProvider(), applyState -> { }, LOG,\n                MoreExecutors.directExecutor());\n\n        context.updatePeerIds(new ServerConfigurationPayload(Arrays.asList(new ServerInfo(\"self\", false),\n                new ServerInfo(\"peer2\", true), new ServerInfo(\"peer3\", false))));\n        verifyPeerInfo(context, \"peer1\", null);\n        verifyPeerInfo(context, \"peer2\", true);\n        verifyPeerInfo(context, \"peer3\", false);\n        assertEquals(\"isVotingMember\", false, context.isVotingMember());\n\n        context.updatePeerIds(new ServerConfigurationPayload(Arrays.asList(new ServerInfo(\"self\", true),\n                new ServerInfo(\"peer2\", true), new ServerInfo(\"peer3\", true))));\n        verifyPeerInfo(context, \"peer2\", true);\n        verifyPeerInfo(context, \"peer3\", true);\n        assertEquals(\"isVotingMember\", true, context.isVotingMember());\n\n        context.updatePeerIds(new ServerConfigurationPayload(Arrays.asList(new ServerInfo(\"peer2\", true),\n                new ServerInfo(\"peer3\", true))));\n        verifyPeerInfo(context, \"peer2\", true);\n        verifyPeerInfo(context, \"peer3\", true);\n        assertEquals(\"isVotingMember\", false, context.isVotingMember());\n    }", "signature": "void testUpdatePeerIds()", "full_signature": "@Test public void testUpdatePeerIds()", "class_method_signature": "RaftActorContextImplTest.testUpdatePeerIds()", "testcase": true, "constructor": false, "invocations": ["getContext", "underlyingActor", "createProvider", "of", "createProvider", "directExecutor", "updatePeerIds", "asList", "verifyPeerInfo", "verifyPeerInfo", "verifyPeerInfo", "assertEquals", "isVotingMember", "updatePeerIds", "asList", "verifyPeerInfo", "verifyPeerInfo", "assertEquals", "isVotingMember", "updatePeerIds", "asList", "verifyPeerInfo", "verifyPeerInfo", "assertEquals", "isVotingMember"]}, "focal_class": {"identifier": "RaftActorContextImpl", "superclass": "", "interfaces": "implements RaftActorContext", "fields": [{"original_string": "private static final LongSupplier JVM_MEMORY_RETRIEVER = () -> Runtime.getRuntime().maxMemory();", "modifier": "private static final", "type": "LongSupplier", "declarator": "JVM_MEMORY_RETRIEVER = () -> Runtime.getRuntime().maxMemory()", "var_name": "JVM_MEMORY_RETRIEVER"}, {"original_string": "private final ActorRef actor;", "modifier": "private final", "type": "ActorRef", "declarator": "actor", "var_name": "actor"}, {"original_string": "private final ActorContext context;", "modifier": "private final", "type": "ActorContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final @NonNull Executor executor;", "modifier": "private final @NonNull", "type": "Executor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final ElectionTerm termInformation;", "modifier": "private final", "type": "ElectionTerm", "declarator": "termInformation", "var_name": "termInformation"}, {"original_string": "private long commitIndex;", "modifier": "private", "type": "long", "declarator": "commitIndex", "var_name": "commitIndex"}, {"original_string": "private long lastApplied;", "modifier": "private", "type": "long", "declarator": "lastApplied", "var_name": "lastApplied"}, {"original_string": "private ReplicatedLog replicatedLog;", "modifier": "private", "type": "ReplicatedLog", "declarator": "replicatedLog", "var_name": "replicatedLog"}, {"original_string": "private final Map<String, PeerInfo> peerInfoMap = new HashMap<>();", "modifier": "private final", "type": "Map<String, PeerInfo>", "declarator": "peerInfoMap = new HashMap<>()", "var_name": "peerInfoMap"}, {"original_string": "private final Logger log;", "modifier": "private final", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "private ConfigParams configParams;", "modifier": "private", "type": "ConfigParams", "declarator": "configParams", "var_name": "configParams"}, {"original_string": "private boolean dynamicServerConfiguration = false;", "modifier": "private", "type": "boolean", "declarator": "dynamicServerConfiguration = false", "var_name": "dynamicServerConfiguration"}, {"original_string": "@VisibleForTesting\n    private LongSupplier totalMemoryRetriever = JVM_MEMORY_RETRIEVER;", "modifier": "@VisibleForTesting\n    private", "type": "LongSupplier", "declarator": "totalMemoryRetriever = JVM_MEMORY_RETRIEVER", "var_name": "totalMemoryRetriever"}, {"original_string": "private SnapshotManager snapshotManager;", "modifier": "private", "type": "SnapshotManager", "declarator": "snapshotManager", "var_name": "snapshotManager"}, {"original_string": "private final DataPersistenceProvider persistenceProvider;", "modifier": "private final", "type": "DataPersistenceProvider", "declarator": "persistenceProvider", "var_name": "persistenceProvider"}, {"original_string": "private short payloadVersion;", "modifier": "private", "type": "short", "declarator": "payloadVersion", "var_name": "payloadVersion"}, {"original_string": "private boolean votingMember = true;", "modifier": "private", "type": "boolean", "declarator": "votingMember = true", "var_name": "votingMember"}, {"original_string": "private RaftActorBehavior currentBehavior;", "modifier": "private", "type": "RaftActorBehavior", "declarator": "currentBehavior", "var_name": "currentBehavior"}, {"original_string": "private int numVotingPeers = -1;", "modifier": "private", "type": "int", "declarator": "numVotingPeers = -1", "var_name": "numVotingPeers"}, {"original_string": "private Optional<Cluster> cluster;", "modifier": "private", "type": "Optional<Cluster>", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "private final Consumer<ApplyState> applyStateConsumer;", "modifier": "private final", "type": "Consumer<ApplyState>", "declarator": "applyStateConsumer", "var_name": "applyStateConsumer"}, {"original_string": "private final FileBackedOutputStreamFactory fileBackedOutputStreamFactory;", "modifier": "private final", "type": "FileBackedOutputStreamFactory", "declarator": "fileBackedOutputStreamFactory", "var_name": "fileBackedOutputStreamFactory"}, {"original_string": "private RaftActorLeadershipTransferCohort leadershipTransferCohort;", "modifier": "private", "type": "RaftActorLeadershipTransferCohort", "declarator": "leadershipTransferCohort", "var_name": "leadershipTransferCohort"}], "methods": [{"identifier": "RaftActorContextImpl", "parameters": "(final ActorRef actor, final ActorContext context, final String id,\n            final @NonNull ElectionTerm termInformation, final long commitIndex, final long lastApplied,\n            final @NonNull Map<String, String> peerAddresses,\n            final @NonNull ConfigParams configParams, final @NonNull DataPersistenceProvider persistenceProvider,\n            final @NonNull Consumer<ApplyState> applyStateConsumer, final @NonNull Logger logger,\n            final @NonNull Executor executor)", "modifiers": "public", "return": "", "signature": " RaftActorContextImpl(final ActorRef actor, final ActorContext context, final String id,\n            final @NonNull ElectionTerm termInformation, final long commitIndex, final long lastApplied,\n            final @NonNull Map<String, String> peerAddresses,\n            final @NonNull ConfigParams configParams, final @NonNull DataPersistenceProvider persistenceProvider,\n            final @NonNull Consumer<ApplyState> applyStateConsumer, final @NonNull Logger logger,\n            final @NonNull Executor executor)", "full_signature": "public  RaftActorContextImpl(final ActorRef actor, final ActorContext context, final String id,\n            final @NonNull ElectionTerm termInformation, final long commitIndex, final long lastApplied,\n            final @NonNull Map<String, String> peerAddresses,\n            final @NonNull ConfigParams configParams, final @NonNull DataPersistenceProvider persistenceProvider,\n            final @NonNull Consumer<ApplyState> applyStateConsumer, final @NonNull Logger logger,\n            final @NonNull Executor executor)", "class_method_signature": "RaftActorContextImpl.RaftActorContextImpl(final ActorRef actor, final ActorContext context, final String id,\n            final @NonNull ElectionTerm termInformation, final long commitIndex, final long lastApplied,\n            final @NonNull Map<String, String> peerAddresses,\n            final @NonNull ConfigParams configParams, final @NonNull DataPersistenceProvider persistenceProvider,\n            final @NonNull Consumer<ApplyState> applyStateConsumer, final @NonNull Logger logger,\n            final @NonNull Executor executor)", "testcase": false, "constructor": true}, {"identifier": "setPayloadVersion", "parameters": "(final short payloadVersion)", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void setPayloadVersion(final short payloadVersion)", "full_signature": "@VisibleForTesting public void setPayloadVersion(final short payloadVersion)", "class_method_signature": "RaftActorContextImpl.setPayloadVersion(final short payloadVersion)", "testcase": false, "constructor": false}, {"identifier": "getPayloadVersion", "parameters": "()", "modifiers": "@Override public", "return": "short", "signature": "short getPayloadVersion()", "full_signature": "@Override public short getPayloadVersion()", "class_method_signature": "RaftActorContextImpl.getPayloadVersion()", "testcase": false, "constructor": false}, {"identifier": "setConfigParams", "parameters": "(final ConfigParams configParams)", "modifiers": "public", "return": "void", "signature": "void setConfigParams(final ConfigParams configParams)", "full_signature": "public void setConfigParams(final ConfigParams configParams)", "class_method_signature": "RaftActorContextImpl.setConfigParams(final ConfigParams configParams)", "testcase": false, "constructor": false}, {"identifier": "actorOf", "parameters": "(final Props props)", "modifiers": "@Override public", "return": "ActorRef", "signature": "ActorRef actorOf(final Props props)", "full_signature": "@Override public ActorRef actorOf(final Props props)", "class_method_signature": "RaftActorContextImpl.actorOf(final Props props)", "testcase": false, "constructor": false}, {"identifier": "actorSelection", "parameters": "(final String path)", "modifiers": "@Override public", "return": "ActorSelection", "signature": "ActorSelection actorSelection(final String path)", "full_signature": "@Override public ActorSelection actorSelection(final String path)", "class_method_signature": "RaftActorContextImpl.actorSelection(final String path)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "RaftActorContextImpl.getId()", "testcase": false, "constructor": false}, {"identifier": "getActor", "parameters": "()", "modifiers": "@Override public", "return": "ActorRef", "signature": "ActorRef getActor()", "full_signature": "@Override public ActorRef getActor()", "class_method_signature": "RaftActorContextImpl.getActor()", "testcase": false, "constructor": false}, {"identifier": "getExecutor", "parameters": "()", "modifiers": "@Override public final", "return": "Executor", "signature": "Executor getExecutor()", "full_signature": "@Override public final Executor getExecutor()", "class_method_signature": "RaftActorContextImpl.getExecutor()", "testcase": false, "constructor": false}, {"identifier": "getCluster", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"checkstyle:IllegalCatch\") public", "return": "Optional<Cluster>", "signature": "Optional<Cluster> getCluster()", "full_signature": "@Override @SuppressWarnings(\"checkstyle:IllegalCatch\") public Optional<Cluster> getCluster()", "class_method_signature": "RaftActorContextImpl.getCluster()", "testcase": false, "constructor": false}, {"identifier": "getTermInformation", "parameters": "()", "modifiers": "@Override public", "return": "ElectionTerm", "signature": "ElectionTerm getTermInformation()", "full_signature": "@Override public ElectionTerm getTermInformation()", "class_method_signature": "RaftActorContextImpl.getTermInformation()", "testcase": false, "constructor": false}, {"identifier": "getCommitIndex", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getCommitIndex()", "full_signature": "@Override public long getCommitIndex()", "class_method_signature": "RaftActorContextImpl.getCommitIndex()", "testcase": false, "constructor": false}, {"identifier": "setCommitIndex", "parameters": "(final long commitIndex)", "modifiers": "@Override public", "return": "void", "signature": "void setCommitIndex(final long commitIndex)", "full_signature": "@Override public void setCommitIndex(final long commitIndex)", "class_method_signature": "RaftActorContextImpl.setCommitIndex(final long commitIndex)", "testcase": false, "constructor": false}, {"identifier": "getLastApplied", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getLastApplied()", "full_signature": "@Override public long getLastApplied()", "class_method_signature": "RaftActorContextImpl.getLastApplied()", "testcase": false, "constructor": false}, {"identifier": "setLastApplied", "parameters": "(final long lastApplied)", "modifiers": "@Override public", "return": "void", "signature": "void setLastApplied(final long lastApplied)", "full_signature": "@Override public void setLastApplied(final long lastApplied)", "class_method_signature": "RaftActorContextImpl.setLastApplied(final long lastApplied)", "testcase": false, "constructor": false}, {"identifier": "setReplicatedLog", "parameters": "(final ReplicatedLog replicatedLog)", "modifiers": "@Override public", "return": "void", "signature": "void setReplicatedLog(final ReplicatedLog replicatedLog)", "full_signature": "@Override public void setReplicatedLog(final ReplicatedLog replicatedLog)", "class_method_signature": "RaftActorContextImpl.setReplicatedLog(final ReplicatedLog replicatedLog)", "testcase": false, "constructor": false}, {"identifier": "getReplicatedLog", "parameters": "()", "modifiers": "@Override public", "return": "ReplicatedLog", "signature": "ReplicatedLog getReplicatedLog()", "full_signature": "@Override public ReplicatedLog getReplicatedLog()", "class_method_signature": "RaftActorContextImpl.getReplicatedLog()", "testcase": false, "constructor": false}, {"identifier": "getActorSystem", "parameters": "()", "modifiers": "@Override public", "return": "ActorSystem", "signature": "ActorSystem getActorSystem()", "full_signature": "@Override public ActorSystem getActorSystem()", "class_method_signature": "RaftActorContextImpl.getActorSystem()", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "@Override public", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "@Override public Logger getLogger()", "class_method_signature": "RaftActorContextImpl.getLogger()", "testcase": false, "constructor": false}, {"identifier": "getPeerIds", "parameters": "()", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getPeerIds()", "full_signature": "@Override public Collection<String> getPeerIds()", "class_method_signature": "RaftActorContextImpl.getPeerIds()", "testcase": false, "constructor": false}, {"identifier": "getPeers", "parameters": "()", "modifiers": "@Override public", "return": "Collection<PeerInfo>", "signature": "Collection<PeerInfo> getPeers()", "full_signature": "@Override public Collection<PeerInfo> getPeers()", "class_method_signature": "RaftActorContextImpl.getPeers()", "testcase": false, "constructor": false}, {"identifier": "getPeerInfo", "parameters": "(final String peerId)", "modifiers": "@Override public", "return": "PeerInfo", "signature": "PeerInfo getPeerInfo(final String peerId)", "full_signature": "@Override public PeerInfo getPeerInfo(final String peerId)", "class_method_signature": "RaftActorContextImpl.getPeerInfo(final String peerId)", "testcase": false, "constructor": false}, {"identifier": "getPeerAddress", "parameters": "(final String peerId)", "modifiers": "@Override public", "return": "String", "signature": "String getPeerAddress(final String peerId)", "full_signature": "@Override public String getPeerAddress(final String peerId)", "class_method_signature": "RaftActorContextImpl.getPeerAddress(final String peerId)", "testcase": false, "constructor": false}, {"identifier": "updatePeerIds", "parameters": "(final ServerConfigurationPayload serverConfig)", "modifiers": "@Override public", "return": "void", "signature": "void updatePeerIds(final ServerConfigurationPayload serverConfig)", "full_signature": "@Override public void updatePeerIds(final ServerConfigurationPayload serverConfig)", "class_method_signature": "RaftActorContextImpl.updatePeerIds(final ServerConfigurationPayload serverConfig)", "testcase": false, "constructor": false}, {"identifier": "getConfigParams", "parameters": "()", "modifiers": "@Override public", "return": "ConfigParams", "signature": "ConfigParams getConfigParams()", "full_signature": "@Override public ConfigParams getConfigParams()", "class_method_signature": "RaftActorContextImpl.getConfigParams()", "testcase": false, "constructor": false}, {"identifier": "addToPeers", "parameters": "(final String peerId, final String address, final VotingState votingState)", "modifiers": "@Override public", "return": "void", "signature": "void addToPeers(final String peerId, final String address, final VotingState votingState)", "full_signature": "@Override public void addToPeers(final String peerId, final String address, final VotingState votingState)", "class_method_signature": "RaftActorContextImpl.addToPeers(final String peerId, final String address, final VotingState votingState)", "testcase": false, "constructor": false}, {"identifier": "removePeer", "parameters": "(final String name)", "modifiers": "@Override public", "return": "void", "signature": "void removePeer(final String name)", "full_signature": "@Override public void removePeer(final String name)", "class_method_signature": "RaftActorContextImpl.removePeer(final String name)", "testcase": false, "constructor": false}, {"identifier": "getPeerActorSelection", "parameters": "(final String peerId)", "modifiers": "@Override public", "return": "ActorSelection", "signature": "ActorSelection getPeerActorSelection(final String peerId)", "full_signature": "@Override public ActorSelection getPeerActorSelection(final String peerId)", "class_method_signature": "RaftActorContextImpl.getPeerActorSelection(final String peerId)", "testcase": false, "constructor": false}, {"identifier": "setPeerAddress", "parameters": "(final String peerId, final String peerAddress)", "modifiers": "@Override public", "return": "void", "signature": "void setPeerAddress(final String peerId, final String peerAddress)", "full_signature": "@Override public void setPeerAddress(final String peerId, final String peerAddress)", "class_method_signature": "RaftActorContextImpl.setPeerAddress(final String peerId, final String peerAddress)", "testcase": false, "constructor": false}, {"identifier": "getSnapshotManager", "parameters": "()", "modifiers": "@Override public", "return": "SnapshotManager", "signature": "SnapshotManager getSnapshotManager()", "full_signature": "@Override public SnapshotManager getSnapshotManager()", "class_method_signature": "RaftActorContextImpl.getSnapshotManager()", "testcase": false, "constructor": false}, {"identifier": "getTotalMemory", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getTotalMemory()", "full_signature": "@Override public long getTotalMemory()", "class_method_signature": "RaftActorContextImpl.getTotalMemory()", "testcase": false, "constructor": false}, {"identifier": "setTotalMemoryRetriever", "parameters": "(final LongSupplier retriever)", "modifiers": "@Override public", "return": "void", "signature": "void setTotalMemoryRetriever(final LongSupplier retriever)", "full_signature": "@Override public void setTotalMemoryRetriever(final LongSupplier retriever)", "class_method_signature": "RaftActorContextImpl.setTotalMemoryRetriever(final LongSupplier retriever)", "testcase": false, "constructor": false}, {"identifier": "hasFollowers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasFollowers()", "full_signature": "@Override public boolean hasFollowers()", "class_method_signature": "RaftActorContextImpl.hasFollowers()", "testcase": false, "constructor": false}, {"identifier": "getPersistenceProvider", "parameters": "()", "modifiers": "@Override public", "return": "DataPersistenceProvider", "signature": "DataPersistenceProvider getPersistenceProvider()", "full_signature": "@Override public DataPersistenceProvider getPersistenceProvider()", "class_method_signature": "RaftActorContextImpl.getPersistenceProvider()", "testcase": false, "constructor": false}, {"identifier": "getRaftPolicy", "parameters": "()", "modifiers": "@Override public", "return": "RaftPolicy", "signature": "RaftPolicy getRaftPolicy()", "full_signature": "@Override public RaftPolicy getRaftPolicy()", "class_method_signature": "RaftActorContextImpl.getRaftPolicy()", "testcase": false, "constructor": false}, {"identifier": "isDynamicServerConfigurationInUse", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDynamicServerConfigurationInUse()", "full_signature": "@Override public boolean isDynamicServerConfigurationInUse()", "class_method_signature": "RaftActorContextImpl.isDynamicServerConfigurationInUse()", "testcase": false, "constructor": false}, {"identifier": "setDynamicServerConfigurationInUse", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void setDynamicServerConfigurationInUse()", "full_signature": "@Override public void setDynamicServerConfigurationInUse()", "class_method_signature": "RaftActorContextImpl.setDynamicServerConfigurationInUse()", "testcase": false, "constructor": false}, {"identifier": "getPeerServerInfo", "parameters": "(final boolean includeSelf)", "modifiers": "@Override public", "return": "ServerConfigurationPayload", "signature": "ServerConfigurationPayload getPeerServerInfo(final boolean includeSelf)", "full_signature": "@Override public ServerConfigurationPayload getPeerServerInfo(final boolean includeSelf)", "class_method_signature": "RaftActorContextImpl.getPeerServerInfo(final boolean includeSelf)", "testcase": false, "constructor": false}, {"identifier": "isVotingMember", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isVotingMember()", "full_signature": "@Override public boolean isVotingMember()", "class_method_signature": "RaftActorContextImpl.isVotingMember()", "testcase": false, "constructor": false}, {"identifier": "anyVotingPeers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean anyVotingPeers()", "full_signature": "@Override public boolean anyVotingPeers()", "class_method_signature": "RaftActorContextImpl.anyVotingPeers()", "testcase": false, "constructor": false}, {"identifier": "getCurrentBehavior", "parameters": "()", "modifiers": "@Override public", "return": "RaftActorBehavior", "signature": "RaftActorBehavior getCurrentBehavior()", "full_signature": "@Override public RaftActorBehavior getCurrentBehavior()", "class_method_signature": "RaftActorContextImpl.getCurrentBehavior()", "testcase": false, "constructor": false}, {"identifier": "setCurrentBehavior", "parameters": "(final RaftActorBehavior behavior)", "modifiers": "", "return": "void", "signature": "void setCurrentBehavior(final RaftActorBehavior behavior)", "full_signature": " void setCurrentBehavior(final RaftActorBehavior behavior)", "class_method_signature": "RaftActorContextImpl.setCurrentBehavior(final RaftActorBehavior behavior)", "testcase": false, "constructor": false}, {"identifier": "getApplyStateConsumer", "parameters": "()", "modifiers": "@Override public", "return": "Consumer<ApplyState>", "signature": "Consumer<ApplyState> getApplyStateConsumer()", "full_signature": "@Override public Consumer<ApplyState> getApplyStateConsumer()", "class_method_signature": "RaftActorContextImpl.getApplyStateConsumer()", "testcase": false, "constructor": false}, {"identifier": "getFileBackedOutputStreamFactory", "parameters": "()", "modifiers": "@Override public", "return": "FileBackedOutputStreamFactory", "signature": "FileBackedOutputStreamFactory getFileBackedOutputStreamFactory()", "full_signature": "@Override public FileBackedOutputStreamFactory getFileBackedOutputStreamFactory()", "class_method_signature": "RaftActorContextImpl.getFileBackedOutputStreamFactory()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\")", "return": "void", "signature": "void close()", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") void close()", "class_method_signature": "RaftActorContextImpl.close()", "testcase": false, "constructor": false}, {"identifier": "getRaftActorLeadershipTransferCohort", "parameters": "()", "modifiers": "@Override public", "return": "RaftActorLeadershipTransferCohort", "signature": "RaftActorLeadershipTransferCohort getRaftActorLeadershipTransferCohort()", "full_signature": "@Override public RaftActorLeadershipTransferCohort getRaftActorLeadershipTransferCohort()", "class_method_signature": "RaftActorContextImpl.getRaftActorLeadershipTransferCohort()", "testcase": false, "constructor": false}, {"identifier": "setRaftActorLeadershipTransferCohort", "parameters": "(final RaftActorLeadershipTransferCohort leadershipTransferCohort)", "modifiers": "@Override @SuppressWarnings(\"checkstyle:hiddenField\") public", "return": "void", "signature": "void setRaftActorLeadershipTransferCohort(final RaftActorLeadershipTransferCohort leadershipTransferCohort)", "full_signature": "@Override @SuppressWarnings(\"checkstyle:hiddenField\") public void setRaftActorLeadershipTransferCohort(final RaftActorLeadershipTransferCohort leadershipTransferCohort)", "class_method_signature": "RaftActorContextImpl.setRaftActorLeadershipTransferCohort(final RaftActorLeadershipTransferCohort leadershipTransferCohort)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/RaftActorContextImpl.java"}, "focal_method": {"identifier": "updatePeerIds", "parameters": "(final ServerConfigurationPayload serverConfig)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void updatePeerIds(final ServerConfigurationPayload serverConfig) {\n        votingMember = true;\n        boolean foundSelf = false;\n        Set<String> currentPeers = new HashSet<>(this.getPeerIds());\n        for (ServerInfo server : serverConfig.getServerConfig()) {\n            if (getId().equals(server.getId())) {\n                foundSelf = true;\n                if (!server.isVoting()) {\n                    votingMember = false;\n                }\n            } else {\n                VotingState votingState = server.isVoting() ? VotingState.VOTING : VotingState.NON_VOTING;\n                if (!currentPeers.contains(server.getId())) {\n                    this.addToPeers(server.getId(), null, votingState);\n                } else {\n                    this.getPeerInfo(server.getId()).setVotingState(votingState);\n                    currentPeers.remove(server.getId());\n                }\n            }\n        }\n\n        for (String peerIdToRemove : currentPeers) {\n            this.removePeer(peerIdToRemove);\n        }\n\n        if (!foundSelf) {\n            votingMember = false;\n        }\n\n        log.debug(\"{}: Updated server config: isVoting: {}, peers: {}\", id, votingMember, peerInfoMap.values());\n\n        setDynamicServerConfigurationInUse();\n    }", "signature": "void updatePeerIds(final ServerConfigurationPayload serverConfig)", "full_signature": "@Override public void updatePeerIds(final ServerConfigurationPayload serverConfig)", "class_method_signature": "RaftActorContextImpl.updatePeerIds(final ServerConfigurationPayload serverConfig)", "testcase": false, "constructor": false, "invocations": ["getPeerIds", "getServerConfig", "equals", "getId", "getId", "isVoting", "isVoting", "contains", "getId", "addToPeers", "getId", "setVotingState", "getPeerInfo", "getId", "remove", "getId", "removePeer", "debug", "values", "setDynamicServerConfigurationInUse"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}