{"test_class": {"identifier": "PercentTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/library/types/PercentTypeTest.java"}, "test_case": {"identifier": "testConversionToOnOffType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConversionToOnOffType() {\n        assertEquals(OnOffType.ON, new PercentType(\"100.0\").as(OnOffType.class));\n        assertEquals(OnOffType.ON, new PercentType(\"1.0\").as(OnOffType.class));\n        assertEquals(OnOffType.OFF, new PercentType(\"0.0\").as(OnOffType.class));\n    }", "signature": "void testConversionToOnOffType()", "full_signature": "@Test public void testConversionToOnOffType()", "class_method_signature": "PercentTypeTest.testConversionToOnOffType()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "as", "assertEquals", "as", "assertEquals", "as"]}, "focal_class": {"identifier": "PercentType", "superclass": "extends DecimalType", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -9066279845951780879L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -9066279845951780879L", "var_name": "serialVersionUID"}, {"original_string": "public static final PercentType ZERO = new PercentType(0);", "modifier": "public static final", "type": "PercentType", "declarator": "ZERO = new PercentType(0)", "var_name": "ZERO"}, {"original_string": "public static final PercentType HUNDRED = new PercentType(100);", "modifier": "public static final", "type": "PercentType", "declarator": "HUNDRED = new PercentType(100)", "var_name": "HUNDRED"}], "methods": [{"identifier": "PercentType", "parameters": "()", "modifiers": "public", "return": "", "signature": " PercentType()", "full_signature": "public  PercentType()", "class_method_signature": "PercentType.PercentType()", "testcase": false, "constructor": true}, {"identifier": "PercentType", "parameters": "(int value)", "modifiers": "public", "return": "", "signature": " PercentType(int value)", "full_signature": "public  PercentType(int value)", "class_method_signature": "PercentType.PercentType(int value)", "testcase": false, "constructor": true}, {"identifier": "PercentType", "parameters": "(String value)", "modifiers": "public", "return": "", "signature": " PercentType(String value)", "full_signature": "public  PercentType(String value)", "class_method_signature": "PercentType.PercentType(String value)", "testcase": false, "constructor": true}, {"identifier": "PercentType", "parameters": "(BigDecimal value)", "modifiers": "public", "return": "", "signature": " PercentType(BigDecimal value)", "full_signature": "public  PercentType(BigDecimal value)", "class_method_signature": "PercentType.PercentType(BigDecimal value)", "testcase": false, "constructor": true}, {"identifier": "validateValue", "parameters": "(BigDecimal value)", "modifiers": "private", "return": "void", "signature": "void validateValue(BigDecimal value)", "full_signature": "private void validateValue(BigDecimal value)", "class_method_signature": "PercentType.validateValue(BigDecimal value)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(String value)", "modifiers": "public static", "return": "PercentType", "signature": "PercentType valueOf(String value)", "full_signature": "public static PercentType valueOf(String value)", "class_method_signature": "PercentType.valueOf(String value)", "testcase": false, "constructor": false}, {"identifier": "as", "parameters": "(@Nullable Class<T> target)", "modifiers": "@Override public", "return": "T", "signature": "T as(@Nullable Class<T> target)", "full_signature": "@Override public T as(@Nullable Class<T> target)", "class_method_signature": "PercentType.as(@Nullable Class<T> target)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/library/types/PercentType.java"}, "focal_method": {"identifier": "as", "parameters": "(@Nullable Class<T> target)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T extends State> @Nullable T as(@Nullable Class<T> target) {\n        if (target == OnOffType.class) {\n            return target.cast(equals(ZERO) ? OnOffType.OFF : OnOffType.ON);\n        } else if (target == DecimalType.class) {\n            return target.cast(new DecimalType(toBigDecimal().divide(BigDecimal.valueOf(100), 8, RoundingMode.UP)));\n        } else if (target == UpDownType.class) {\n            if (equals(ZERO)) {\n                return target.cast(UpDownType.UP);\n            } else if (equals(HUNDRED)) {\n                return target.cast(UpDownType.DOWN);\n            } else {\n                return null;\n            }\n        } else if (target == OpenClosedType.class) {\n            if (equals(ZERO)) {\n                return target.cast(OpenClosedType.CLOSED);\n            } else if (equals(HUNDRED)) {\n                return target.cast(OpenClosedType.OPEN);\n            } else {\n                return null;\n            }\n        } else if (target == HSBType.class) {\n            return target.cast(new HSBType(DecimalType.ZERO, PercentType.ZERO, this));\n        } else if (target == QuantityType.class) {\n            return target.cast(new QuantityType<>(toBigDecimal().doubleValue(), SmartHomeUnits.PERCENT));\n        } else {\n            return defaultConversion(target);\n        }\n    }", "signature": "T as(@Nullable Class<T> target)", "full_signature": "@Override public T as(@Nullable Class<T> target)", "class_method_signature": "PercentType.as(@Nullable Class<T> target)", "testcase": false, "constructor": false, "invocations": ["cast", "equals", "cast", "divide", "toBigDecimal", "valueOf", "equals", "cast", "equals", "cast", "equals", "cast", "equals", "cast", "cast", "cast", "doubleValue", "toBigDecimal", "defaultConversion"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}