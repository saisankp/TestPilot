{"test_class": {"identifier": "GraphiteMetricSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private GraphiteMetricSource graphiteMetricSource;", "modifier": "@InjectMocks\n    private", "type": "GraphiteMetricSource", "declarator": "graphiteMetricSource", "var_name": "graphiteMetricSource"}, {"original_string": "@Mock\n    private BeanUtil beanUtil;", "modifier": "@Mock\n    private", "type": "BeanUtil", "declarator": "beanUtil", "var_name": "beanUtil"}, {"original_string": "@Mock\n    private ApplicationContext ctx;", "modifier": "@Mock\n    private", "type": "ApplicationContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "@Mock\n    private RestTemplate restTemplate;", "modifier": "@Mock\n    private", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "private List<MetricSourceResult> results = new ArrayList<>();", "modifier": "private", "type": "List<MetricSourceResult>", "declarator": "results = new ArrayList<>()", "var_name": "results"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/metricsource/graphite/GraphiteMetricSourceTest.java"}, "test_case": {"identifier": "testGetMetricData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMetricData() {\n        List<MetricSourceResult> metricSourceResults = graphiteMetricSource.getMetricData(\"metricKey\");\n        assertNotNull(metricSourceResults);\n        assertEquals(2, metricSourceResults.size());\n    }", "signature": "void testGetMetricData()", "full_signature": "@Test public void testGetMetricData()", "class_method_signature": "GraphiteMetricSourceTest.testGetMetricData()", "testcase": true, "constructor": false, "invocations": ["getMetricData", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "GraphiteMetricSource", "superclass": "", "interfaces": "implements MetricSource", "fields": [{"original_string": "private RestTemplate restTemplate = new RestTemplate();", "modifier": "private", "type": "RestTemplate", "declarator": "restTemplate = new RestTemplate()", "var_name": "restTemplate"}], "methods": [{"identifier": "getMetricData", "parameters": "(String metricTags)", "modifiers": "@Override public", "return": "List<MetricSourceResult>", "signature": "List<MetricSourceResult> getMetricData(String metricTags)", "full_signature": "@Override public List<MetricSourceResult> getMetricData(String metricTags)", "class_method_signature": "GraphiteMetricSource.getMetricData(String metricTags)", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/metricsource/graphite/GraphiteMetricSource.java"}, "focal_method": {"identifier": "getMetricData", "parameters": "(String metricTags)", "modifiers": "@Override public", "return": "List<MetricSourceResult>", "body": "@Override\n    public List<MetricSourceResult> getMetricData(String metricTags) {\n\n        GraphiteProperties props = BeanUtil.getBean(GraphiteProperties.class);\n        Map<String, Object> params = Collections.singletonMap(\"tags\", metricTags);\n        GraphiteResult[] graphiteResult = restTemplate.getForObject(props.getUrlTemplate(), GraphiteResult[].class, params);\n        List<MetricSourceResult> results = new ArrayList<>();\n        if (graphiteResult.length != 0) {\n            String[][] dataPoints = graphiteResult[0].getDatapoints();\n            for (String[] dataPoint : dataPoints) {\n                double dataPointValue = 0.0;\n                long epochSeconds = Long.parseLong(dataPoint[1]);\n                if (dataPoint[0] != null) {\n                    dataPointValue = Double.parseDouble(dataPoint[0]);\n                }\n                MetricSourceResult result = new MetricSourceResult(dataPointValue, epochSeconds);\n                results.add(result);\n            }\n        }\n        return results;\n    }", "signature": "List<MetricSourceResult> getMetricData(String metricTags)", "full_signature": "@Override public List<MetricSourceResult> getMetricData(String metricTags)", "class_method_signature": "GraphiteMetricSource.getMetricData(String metricTags)", "testcase": false, "constructor": false, "invocations": ["getBean", "singletonMap", "getForObject", "getUrlTemplate", "getDatapoints", "parseLong", "parseDouble", "add"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}