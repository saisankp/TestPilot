{"test_class": {"identifier": "RestProtocolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(\"rest\");", "modifier": "private", "type": "Protocol", "declarator": "protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(\"rest\")", "var_name": "protocol"}, {"original_string": "private ProxyFactory proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();", "modifier": "private", "type": "ProxyFactory", "declarator": "proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension()", "var_name": "proxy"}, {"original_string": "private final int availablePort = NetUtils.getAvailablePort();", "modifier": "private final", "type": "int", "declarator": "availablePort = NetUtils.getAvailablePort()", "var_name": "availablePort"}, {"original_string": "private final URL exportUrl = URL.valueOf(\"rest://127.0.0.1:\" + availablePort + \"/rest?interface=org.apache.dubbo.rpc.protocol.rest.DemoService\");", "modifier": "private final", "type": "URL", "declarator": "exportUrl = URL.valueOf(\"rest://127.0.0.1:\" + availablePort + \"/rest?interface=org.apache.dubbo.rpc.protocol.rest.DemoService\")", "var_name": "exportUrl"}, {"original_string": "private final ServiceRepository repository = ApplicationModel.getServiceRepository();", "modifier": "private final", "type": "ServiceRepository", "declarator": "repository = ApplicationModel.getServiceRepository()", "var_name": "repository"}], "file": "dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RestProtocolTest.java"}, "test_case": {"identifier": "testRestProtocol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRestProtocol() {\n        URL url = URL.valueOf(\"rest://127.0.0.1:\" + NetUtils.getAvailablePort() + \"/rest/say?version=1.0.0&interface=org.apache.dubbo.rpc.protocol.rest.DemoService\");\n        DemoServiceImpl server = new DemoServiceImpl();\n\n        this.registerProvider(url, server, DemoService.class);\n\n        Exporter<DemoService> exporter = protocol.export(proxy.getInvoker(server, DemoService.class, url));\n        Invoker<DemoService> invoker = protocol.refer(DemoService.class, url);\n        Assertions.assertFalse(server.isCalled());\n\n        DemoService client = proxy.getProxy(invoker);\n        String result = client.sayHello(\"haha\");\n        Assertions.assertTrue(server.isCalled());\n        Assertions.assertEquals(\"Hello, haha\", result);\n        invoker.destroy();\n        exporter.unexport();\n    }", "signature": "void testRestProtocol()", "full_signature": "@Test public void testRestProtocol()", "class_method_signature": "RestProtocolTest.testRestProtocol()", "testcase": true, "constructor": false, "invocations": ["valueOf", "getAvailablePort", "registerProvider", "export", "getInvoker", "refer", "assertFalse", "isCalled", "getProxy", "sayHello", "assertTrue", "isCalled", "assertEquals", "destroy", "unexport"]}, "focal_class": {"identifier": "RestProtocol", "superclass": "extends AbstractProxyProtocol", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_PORT = 80;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PORT = 80", "var_name": "DEFAULT_PORT"}, {"original_string": "private static final String DEFAULT_SERVER = \"jetty\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SERVER = \"jetty\"", "var_name": "DEFAULT_SERVER"}, {"original_string": "private static final int HTTPCLIENTCONNECTIONMANAGER_MAXPERROUTE = 20;", "modifier": "private static final", "type": "int", "declarator": "HTTPCLIENTCONNECTIONMANAGER_MAXPERROUTE = 20", "var_name": "HTTPCLIENTCONNECTIONMANAGER_MAXPERROUTE"}, {"original_string": "private static final int HTTPCLIENTCONNECTIONMANAGER_MAXTOTAL = 20;", "modifier": "private static final", "type": "int", "declarator": "HTTPCLIENTCONNECTIONMANAGER_MAXTOTAL = 20", "var_name": "HTTPCLIENTCONNECTIONMANAGER_MAXTOTAL"}, {"original_string": "private static final int HTTPCLIENT_KEEPALIVEDURATION = 30 * 1000;", "modifier": "private static final", "type": "int", "declarator": "HTTPCLIENT_KEEPALIVEDURATION = 30 * 1000", "var_name": "HTTPCLIENT_KEEPALIVEDURATION"}, {"original_string": "private static final int HTTPCLIENTCONNECTIONMANAGER_CLOSEWAITTIME_MS = 1000;", "modifier": "private static final", "type": "int", "declarator": "HTTPCLIENTCONNECTIONMANAGER_CLOSEWAITTIME_MS = 1000", "var_name": "HTTPCLIENTCONNECTIONMANAGER_CLOSEWAITTIME_MS"}, {"original_string": "private static final int HTTPCLIENTCONNECTIONMANAGER_CLOSEIDLETIME_S = 30;", "modifier": "private static final", "type": "int", "declarator": "HTTPCLIENTCONNECTIONMANAGER_CLOSEIDLETIME_S = 30", "var_name": "HTTPCLIENTCONNECTIONMANAGER_CLOSEIDLETIME_S"}, {"original_string": "private final RestServerFactory serverFactory = new RestServerFactory();", "modifier": "private final", "type": "RestServerFactory", "declarator": "serverFactory = new RestServerFactory()", "var_name": "serverFactory"}, {"original_string": "private final List<ResteasyClient> clients = Collections.synchronizedList(new LinkedList<>());", "modifier": "private final", "type": "List<ResteasyClient>", "declarator": "clients = Collections.synchronizedList(new LinkedList<>())", "var_name": "clients"}, {"original_string": "private volatile ConnectionMonitor connectionMonitor;", "modifier": "private volatile", "type": "ConnectionMonitor", "declarator": "connectionMonitor", "var_name": "connectionMonitor"}], "methods": [{"identifier": "RestProtocol", "parameters": "()", "modifiers": "public", "return": "", "signature": " RestProtocol()", "full_signature": "public  RestProtocol()", "class_method_signature": "RestProtocol.RestProtocol()", "testcase": false, "constructor": true}, {"identifier": "setHttpBinder", "parameters": "(HttpBinder httpBinder)", "modifiers": "public", "return": "void", "signature": "void setHttpBinder(HttpBinder httpBinder)", "full_signature": "public void setHttpBinder(HttpBinder httpBinder)", "class_method_signature": "RestProtocol.setHttpBinder(HttpBinder httpBinder)", "testcase": false, "constructor": false}, {"identifier": "getDefaultPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultPort()", "full_signature": "@Override public int getDefaultPort()", "class_method_signature": "RestProtocol.getDefaultPort()", "testcase": false, "constructor": false}, {"identifier": "doExport", "parameters": "(T impl, Class<T> type, URL url)", "modifiers": "@Override protected", "return": "Runnable", "signature": "Runnable doExport(T impl, Class<T> type, URL url)", "full_signature": "@Override protected Runnable doExport(T impl, Class<T> type, URL url)", "class_method_signature": "RestProtocol.doExport(T impl, Class<T> type, URL url)", "testcase": false, "constructor": false}, {"identifier": "doRefer", "parameters": "(Class<T> serviceType, URL url)", "modifiers": "@Override protected", "return": "T", "signature": "T doRefer(Class<T> serviceType, URL url)", "full_signature": "@Override protected T doRefer(Class<T> serviceType, URL url)", "class_method_signature": "RestProtocol.doRefer(Class<T> serviceType, URL url)", "testcase": false, "constructor": false}, {"identifier": "getErrorCode", "parameters": "(Throwable e)", "modifiers": "@Override protected", "return": "int", "signature": "int getErrorCode(Throwable e)", "full_signature": "@Override protected int getErrorCode(Throwable e)", "class_method_signature": "RestProtocol.getErrorCode(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "RestProtocol.destroy()", "testcase": false, "constructor": false}, {"identifier": "getContextPath", "parameters": "(URL url)", "modifiers": "protected", "return": "String", "signature": "String getContextPath(URL url)", "full_signature": "protected String getContextPath(URL url)", "class_method_signature": "RestProtocol.getContextPath(URL url)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RestProtocol.java"}, "focal_method": {"identifier": "RestProtocol", "parameters": "()", "modifiers": "public", "return": "", "body": "public RestProtocol() {\n        super(WebApplicationException.class, ProcessingException.class);\n    }", "signature": " RestProtocol()", "full_signature": "public  RestProtocol()", "class_method_signature": "RestProtocol.RestProtocol()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}