{"test_class": {"identifier": "TestLazyList", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final boolean STRICT = false;", "modifier": "private static final", "type": "boolean", "declarator": "STRICT = false", "var_name": "STRICT"}], "file": "firefly-common/src/test/java/com/fireflysource/common/collection/list/TestLazyList.java"}, "test_case": {"identifier": "testAddArray_NullInput_EmptyArray", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testAddArray_NullInput_EmptyArray() {\n        String[] arr = new String[0];\n        Object list = LazyList.addArray(null, arr);\n        if (STRICT) {\n            assertNotNull(list);\n            assertTrue(list instanceof List);\n        }\n    }", "signature": "void testAddArray_NullInput_EmptyArray()", "full_signature": "@Test void testAddArray_NullInput_EmptyArray()", "class_method_signature": "TestLazyList.testAddArray_NullInput_EmptyArray()", "testcase": true, "constructor": false, "invocations": ["addArray", "assertNotNull", "assertTrue"]}, "focal_class": {"identifier": "LazyList", "superclass": "", "interfaces": "implements Cloneable, Serializable", "fields": [{"original_string": "private static final String[] __EMPTY_STRING_ARRAY = new String[0];", "modifier": "private static final", "type": "String[]", "declarator": "__EMPTY_STRING_ARRAY = new String[0]", "var_name": "__EMPTY_STRING_ARRAY"}], "methods": [{"identifier": "LazyList", "parameters": "()", "modifiers": "private", "return": "", "signature": " LazyList()", "full_signature": "private  LazyList()", "class_method_signature": "LazyList.LazyList()", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Object list, Object item)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Object", "signature": "Object add(Object list, Object item)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Object add(Object list, Object item)", "class_method_signature": "LazyList.add(Object list, Object item)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Object list, int index, Object item)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Object", "signature": "Object add(Object list, int index, Object item)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Object add(Object list, int index, Object item)", "class_method_signature": "LazyList.add(Object list, int index, Object item)", "testcase": false, "constructor": false}, {"identifier": "addCollection", "parameters": "(Object list, Collection<?> collection)", "modifiers": "public static", "return": "Object", "signature": "Object addCollection(Object list, Collection<?> collection)", "full_signature": "public static Object addCollection(Object list, Collection<?> collection)", "class_method_signature": "LazyList.addCollection(Object list, Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "addArray", "parameters": "(Object list, Object[] array)", "modifiers": "public static", "return": "Object", "signature": "Object addArray(Object list, Object[] array)", "full_signature": "public static Object addArray(Object list, Object[] array)", "class_method_signature": "LazyList.addArray(Object list, Object[] array)", "testcase": false, "constructor": false}, {"identifier": "ensureSize", "parameters": "(Object list, int initialSize)", "modifiers": "public static", "return": "Object", "signature": "Object ensureSize(Object list, int initialSize)", "full_signature": "public static Object ensureSize(Object list, int initialSize)", "class_method_signature": "LazyList.ensureSize(Object list, int initialSize)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object list, Object o)", "modifiers": "public static", "return": "Object", "signature": "Object remove(Object list, Object o)", "full_signature": "public static Object remove(Object list, Object o)", "class_method_signature": "LazyList.remove(Object list, Object o)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object list, int i)", "modifiers": "public static", "return": "Object", "signature": "Object remove(Object list, int i)", "full_signature": "public static Object remove(Object list, int i)", "class_method_signature": "LazyList.remove(Object list, int i)", "testcase": false, "constructor": false}, {"identifier": "getList", "parameters": "(Object list)", "modifiers": "public static", "return": "List<E>", "signature": "List<E> getList(Object list)", "full_signature": "public static List<E> getList(Object list)", "class_method_signature": "LazyList.getList(Object list)", "testcase": false, "constructor": false}, {"identifier": "getList", "parameters": "(Object list, boolean nullForEmpty)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "List<E>", "signature": "List<E> getList(Object list, boolean nullForEmpty)", "full_signature": "@SuppressWarnings(\"unchecked\") public static List<E> getList(Object list, boolean nullForEmpty)", "class_method_signature": "LazyList.getList(Object list, boolean nullForEmpty)", "testcase": false, "constructor": false}, {"identifier": "hasEntry", "parameters": "(Object list)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasEntry(Object list)", "full_signature": "public static boolean hasEntry(Object list)", "class_method_signature": "LazyList.hasEntry(Object list)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Object list)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(Object list)", "full_signature": "public static boolean isEmpty(Object list)", "class_method_signature": "LazyList.isEmpty(Object list)", "testcase": false, "constructor": false}, {"identifier": "toStringArray", "parameters": "(Object list)", "modifiers": "public static", "return": "String[]", "signature": "String[] toStringArray(Object list)", "full_signature": "public static String[] toStringArray(Object list)", "class_method_signature": "LazyList.toStringArray(Object list)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(Object list, Class<?> clazz)", "modifiers": "public static", "return": "Object", "signature": "Object toArray(Object list, Class<?> clazz)", "full_signature": "public static Object toArray(Object list, Class<?> clazz)", "class_method_signature": "LazyList.toArray(Object list, Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "(Object list)", "modifiers": "public static", "return": "int", "signature": "int size(Object list)", "full_signature": "public static int size(Object list)", "class_method_signature": "LazyList.size(Object list)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object list, int i)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "E", "signature": "E get(Object list, int i)", "full_signature": "@SuppressWarnings(\"unchecked\") public static E get(Object list, int i)", "class_method_signature": "LazyList.get(Object list, int i)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object list, Object item)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(Object list, Object item)", "full_signature": "public static boolean contains(Object list, Object item)", "class_method_signature": "LazyList.contains(Object list, Object item)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(Object list)", "modifiers": "public static", "return": "Object", "signature": "Object clone(Object list)", "full_signature": "public static Object clone(Object list)", "class_method_signature": "LazyList.clone(Object list)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Object list)", "modifiers": "public static", "return": "String", "signature": "String toString(Object list)", "full_signature": "public static String toString(Object list)", "class_method_signature": "LazyList.toString(Object list)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "(Object list)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Iterator<E>", "signature": "Iterator<E> iterator(Object list)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Iterator<E> iterator(Object list)", "class_method_signature": "LazyList.iterator(Object list)", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "(Object list)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "ListIterator<E>", "signature": "ListIterator<E> listIterator(Object list)", "full_signature": "@SuppressWarnings(\"unchecked\") public static ListIterator<E> listIterator(Object list)", "class_method_signature": "LazyList.listIterator(Object list)", "testcase": false, "constructor": false}], "file": "firefly-common/src/main/java/com/fireflysource/common/collection/list/LazyList.java"}, "focal_method": {"identifier": "addArray", "parameters": "(Object list, Object[] array)", "modifiers": "public static", "return": "Object", "body": "public static Object addArray(Object list, Object[] array) {\n        for (int i = 0; array != null && i < array.length; i++)\n            list = LazyList.add(list, array[i]);\n        return list;\n    }", "signature": "Object addArray(Object list, Object[] array)", "full_signature": "public static Object addArray(Object list, Object[] array)", "class_method_signature": "LazyList.addArray(Object list, Object[] array)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}