{"test_class": {"identifier": "AwsObservableExtTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-ext/aws/src/test/java/com/netflix/titus/ext/aws/AwsObservableExtTest.java"}, "test_case": {"identifier": "asyncActionSingleErrors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void asyncActionSingleErrors() {\n        AmazonWebServiceRequest someRequest = AmazonWebServiceRequest.NOOP;\n        final MockAsyncClient<AmazonWebServiceRequest, String> client = new MockAsyncClient<>(someRequest, \"some response\");\n        RuntimeException exception = new RuntimeException(\"error when initiating an async operation\");\n        final Single<String> completable = AwsObservableExt.asyncActionSingle(supplier -> client.throwException(exception));\n\n        TestScheduler testScheduler = Schedulers.test();\n        final AssertableSubscriber<String> subscriber = completable.subscribeOn(testScheduler).test();\n\n        testScheduler.triggerActions();\n        subscriber.assertError(exception);\n    }", "signature": "void asyncActionSingleErrors()", "full_signature": "@Test public void asyncActionSingleErrors()", "class_method_signature": "AwsObservableExtTest.asyncActionSingleErrors()", "testcase": true, "constructor": false, "invocations": ["asyncActionSingle", "throwException", "test", "test", "subscribeOn", "triggerActions", "assertError"]}, "focal_class": {"identifier": "AwsObservableExt", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "asyncActionCompletable", "parameters": "(Func1<CompletableHandlerSupplier, Future<?>> action)", "modifiers": "public static", "return": "Completable", "signature": "Completable asyncActionCompletable(Func1<CompletableHandlerSupplier, Future<?>> action)", "full_signature": "public static Completable asyncActionCompletable(Func1<CompletableHandlerSupplier, Future<?>> action)", "class_method_signature": "AwsObservableExt.asyncActionCompletable(Func1<CompletableHandlerSupplier, Future<?>> action)", "testcase": false, "constructor": false}, {"identifier": "asyncActionSingle", "parameters": "(Func1<SingleHandlerSupplier<RES>, Future<RES>> action)", "modifiers": "public static", "return": "Single<RES>", "signature": "Single<RES> asyncActionSingle(Func1<SingleHandlerSupplier<RES>, Future<RES>> action)", "full_signature": "public static Single<RES> asyncActionSingle(Func1<SingleHandlerSupplier<RES>, Future<RES>> action)", "class_method_signature": "AwsObservableExt.asyncActionSingle(Func1<SingleHandlerSupplier<RES>, Future<RES>> action)", "testcase": false, "constructor": false}], "file": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AwsObservableExt.java"}, "focal_method": {"identifier": "asyncActionSingle", "parameters": "(Func1<SingleHandlerSupplier<RES>, Future<RES>> action)", "modifiers": "public static", "return": "Single<RES>", "body": "public static <REQ extends AmazonWebServiceRequest, RES> Single<RES> asyncActionSingle(Func1<SingleHandlerSupplier<RES>, Future<RES>> action) {\n        return Single.create(subscriber -> {\n            try {\n                final Future<RES> result = action.call(new SingleHandlerSupplier<>(subscriber));\n                subscriber.add(Subscriptions.create(() -> result.cancel(true)));\n            } catch (Throwable t) {\n                Exceptions.throwIfFatal(t);\n                subscriber.onError(t);\n            }\n        });\n    }", "signature": "Single<RES> asyncActionSingle(Func1<SingleHandlerSupplier<RES>, Future<RES>> action)", "full_signature": "public static Single<RES> asyncActionSingle(Func1<SingleHandlerSupplier<RES>, Future<RES>> action)", "class_method_signature": "AwsObservableExt.asyncActionSingle(Func1<SingleHandlerSupplier<RES>, Future<RES>> action)", "testcase": false, "constructor": false, "invocations": ["create", "call", "add", "create", "cancel", "throwIfFatal", "onError"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}