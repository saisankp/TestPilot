{"test_class": {"identifier": "FindBugsValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "qulice-findbugs/src/test/java/com/qulice/findbugs/FindBugsValidatorTest.java"}, "test_case": {"identifier": "throwsExceptionOnViolation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void throwsExceptionOnViolation() throws Exception {\n        Assertions.assertThrows(\n            ValidationException.class,\n            () -> {\n                final byte[] bytecode = new BytecodeMocker()\n                    .withSource(\n                        \"class Foo { public Foo clone() { return this; } }\"\n                    ).mock();\n                final Environment env = new Environment.Mock()\n                    .withFile(\"target/classes/Foo.class\", bytecode)\n                    .withDefaultClasspath();\n                new FindBugsValidator().validate(env);\n            }\n        );\n    }", "signature": "void throwsExceptionOnViolation()", "full_signature": "@Test public void throwsExceptionOnViolation()", "class_method_signature": "FindBugsValidatorTest.throwsExceptionOnViolation()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "mock", "withSource", "withDefaultClasspath", "withFile", "validate"]}, "focal_class": {"identifier": "FindBugsValidator", "superclass": "", "interfaces": "implements Validator", "fields": [], "methods": [{"identifier": "validate", "parameters": "(final Environment env)", "modifiers": "@Override public", "return": "void", "signature": "void validate(final Environment env)", "full_signature": "@Override public void validate(final Environment env)", "class_method_signature": "FindBugsValidator.validate(final Environment env)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "FindBugsValidator.name()", "testcase": false, "constructor": false}, {"identifier": "findbugs", "parameters": "(final Environment env)", "modifiers": "@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\") private", "return": "String", "signature": "String findbugs(final Environment env)", "full_signature": "@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\") private String findbugs(final Environment env)", "class_method_signature": "FindBugsValidator.findbugs(final Environment env)", "testcase": false, "constructor": false}, {"identifier": "options", "parameters": "()", "modifiers": "@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\") private", "return": "Collection<String>", "signature": "Collection<String> options()", "full_signature": "@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\") private Collection<String> options()", "class_method_signature": "FindBugsValidator.options()", "testcase": false, "constructor": false}, {"identifier": "excludes", "parameters": "(final Environment env,\n        final Iterable<String> excludes)", "modifiers": "private static", "return": "String", "signature": "String excludes(final Environment env,\n        final Iterable<String> excludes)", "full_signature": "private static String excludes(final Environment env,\n        final Iterable<String> excludes)", "class_method_signature": "FindBugsValidator.excludes(final Environment env,\n        final Iterable<String> excludes)", "testcase": false, "constructor": false}, {"identifier": "generateExcludes", "parameters": "(final Iterable<String> excludes)", "modifiers": "@SuppressFBWarnings( value = \"XFB_XML_FACTORY_BYPASS\", justification = \"No other way to create dom4j XMLWriter\" ) private static", "return": "String", "signature": "String generateExcludes(final Iterable<String> excludes)", "full_signature": "@SuppressFBWarnings( value = \"XFB_XML_FACTORY_BYPASS\", justification = \"No other way to create dom4j XMLWriter\" ) private static String generateExcludes(final Iterable<String> excludes)", "class_method_signature": "FindBugsValidator.generateExcludes(final Iterable<String> excludes)", "testcase": false, "constructor": false}, {"identifier": "jar", "parameters": "(final Class<?> resource)", "modifiers": "@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\") private", "return": "File", "signature": "File jar(final Class<?> resource)", "full_signature": "@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\") private File jar(final Class<?> resource)", "class_method_signature": "FindBugsValidator.jar(final Class<?> resource)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(final String report)", "modifiers": "private", "return": "void", "signature": "void check(final String report)", "full_signature": "private void check(final String report)", "class_method_signature": "FindBugsValidator.check(final String report)", "testcase": false, "constructor": false}], "file": "qulice-findbugs/src/main/java/com/qulice/findbugs/FindBugsValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(final Environment env)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(final Environment env) throws ValidationException {\n        if (env.outdir().exists()) {\n            if (!env.exclude(\"findbugs\", \"\")) {\n                this.check(this.findbugs(env));\n            }\n        } else {\n            Logger.info(\n                this,\n                \"No classes at %s, no FindBugs validation\",\n                env.outdir()\n            );\n        }\n    }", "signature": "void validate(final Environment env)", "full_signature": "@Override public void validate(final Environment env)", "class_method_signature": "FindBugsValidator.validate(final Environment env)", "testcase": false, "constructor": false, "invocations": ["exists", "outdir", "exclude", "check", "findbugs", "info", "outdir"]}, "repository": {"repo_id": 9580168, "url": "https://github.com/teamed/qulice", "language": "Java", "is_fork": false, "fork_count": 87, "stargazer_count": 240, "size": 17854, "license": "licensed"}}