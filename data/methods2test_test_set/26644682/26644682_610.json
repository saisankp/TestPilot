{"test_class": {"identifier": "CSVFormatTest", "superclass": "extends BaseFormatTest", "interfaces": "", "fields": [{"original_string": "private CSVFormat format;", "modifier": "private", "type": "CSVFormat", "declarator": "format", "var_name": "format"}, {"original_string": "@Rule\n    public LocalizationRule rule = new LocalizationRule(Locale.US);", "modifier": "@Rule\n    public", "type": "LocalizationRule", "declarator": "rule = new LocalizationRule(Locale.US)", "var_name": "rule"}], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/format/CSVFormatTest.java"}, "test_case": {"identifier": "csv", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void csv() {\n        // when\n        final ExportFormatMessage exportFormatMessage =\n                beanConversionService.convert(format, ExportFormatMessage.class);\n\n        // then\n        assertEquals(\"text/csv\", exportFormatMessage.getMimeType());\n        assertEquals(\"CSV\", exportFormatMessage.getId());\n        assertEquals(\"Local CSV file\", exportFormatMessage.getName());\n        assertEquals(true, exportFormatMessage.isNeedParameters());\n        assertEquals(false, exportFormatMessage.isDefaultExport());\n        assertEquals(true, exportFormatMessage.isEnabled());\n        assertEquals(\"\", exportFormatMessage.getDisableReason());\n        assertEquals(\"Export to CSV\", exportFormatMessage.getTitle());\n        List<Parameter> parameters = exportFormatMessage.getParameters();\n        assertNotNull(parameters);\n        assertEquals(6, parameters.size());\n    }", "signature": "void csv()", "full_signature": "@Test public void csv()", "class_method_signature": "CSVFormatTest.csv()", "testcase": true, "constructor": false, "invocations": ["convert", "assertEquals", "getMimeType", "assertEquals", "getId", "assertEquals", "getName", "assertEquals", "isNeedParameters", "assertEquals", "isDefaultExport", "assertEquals", "isEnabled", "assertEquals", "getDisableReason", "assertEquals", "getTitle", "getParameters", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "CSVFormat", "superclass": "extends ExportFormat", "interfaces": "", "fields": [{"original_string": "public static final String CSV = ParametersCSV.CSV_NAME_FORMAT;", "modifier": "public static final", "type": "String", "declarator": "CSV = ParametersCSV.CSV_NAME_FORMAT", "var_name": "CSV"}, {"original_string": "@Value(\"${default.text.separator:;}\")\n    private String defaultSeparator;", "modifier": "@Value(\"${default.text.separator:;}\")\n    private", "type": "String", "declarator": "defaultSeparator", "var_name": "defaultSeparator"}, {"original_string": "@Value(\"${default.text.enclosure:\\\"}\")\n    private String defaultTextEnclosure;", "modifier": "@Value(\"${default.text.enclosure:\\\"}\")\n    private", "type": "String", "declarator": "defaultTextEnclosure", "var_name": "defaultTextEnclosure"}, {"original_string": "@Value(\"${default.text.escape:\\\"}\")\n    private String defaultEscapeChar;", "modifier": "@Value(\"${default.text.escape:\\\"}\")\n    private", "type": "String", "declarator": "defaultEscapeChar", "var_name": "defaultEscapeChar"}, {"original_string": "@Value(\"${default.text.encoding:UTF-8}\")\n    private String defaultEncoding;", "modifier": "@Value(\"${default.text.encoding:UTF-8}\")\n    private", "type": "String", "declarator": "defaultEncoding", "var_name": "defaultEncoding"}], "methods": [{"identifier": "CSVFormat", "parameters": "()", "modifiers": "public", "return": "", "signature": " CSVFormat()", "full_signature": "public  CSVFormat()", "class_method_signature": "CSVFormat.CSVFormat()", "testcase": false, "constructor": true}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<Parameter>", "signature": "List<Parameter> getParameters()", "full_signature": "@Override public List<Parameter> getParameters()", "class_method_signature": "CSVFormat.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(Locale locale)", "modifiers": "private", "return": "Parameter", "signature": "Parameter getFileName(Locale locale)", "full_signature": "private Parameter getFileName(Locale locale)", "class_method_signature": "CSVFormat.getFileName(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getEnclosureChar", "parameters": "(Locale locale)", "modifiers": "private", "return": "Parameter", "signature": "Parameter getEnclosureChar(Locale locale)", "full_signature": "private Parameter getEnclosureChar(Locale locale)", "class_method_signature": "CSVFormat.getEnclosureChar(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getEscapeChar", "parameters": "(Locale locale)", "modifiers": "private", "return": "Parameter", "signature": "Parameter getEscapeChar(Locale locale)", "full_signature": "private Parameter getEscapeChar(Locale locale)", "class_method_signature": "CSVFormat.getEscapeChar(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getEnclosureOptions", "parameters": "(Locale locale)", "modifiers": "private", "return": "SelectParameter", "signature": "SelectParameter getEnclosureOptions(Locale locale)", "full_signature": "private SelectParameter getEnclosureOptions(Locale locale)", "class_method_signature": "CSVFormat.getEnclosureOptions(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getCsvDelimiters", "parameters": "(Locale locale)", "modifiers": "private", "return": "SelectParameter", "signature": "SelectParameter getCsvDelimiters(Locale locale)", "full_signature": "private SelectParameter getCsvDelimiters(Locale locale)", "class_method_signature": "CSVFormat.getCsvDelimiters(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "buildCharsetParameter", "parameters": "(Locale locale)", "modifiers": "private", "return": "Parameter", "signature": "Parameter buildCharsetParameter(Locale locale)", "full_signature": "private Parameter buildCharsetParameter(Locale locale)", "class_method_signature": "CSVFormat.buildCharsetParameter(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getOrder()", "full_signature": "@Override public int getOrder()", "class_method_signature": "CSVFormat.getOrder()", "testcase": false, "constructor": false}, {"identifier": "isCompatible", "parameters": "(DataSetMetadata metadata)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCompatible(DataSetMetadata metadata)", "full_signature": "@Override public boolean isCompatible(DataSetMetadata metadata)", "class_method_signature": "CSVFormat.isCompatible(DataSetMetadata metadata)", "testcase": false, "constructor": false}, {"identifier": "supportSampling", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportSampling()", "full_signature": "@Override public boolean supportSampling()", "class_method_signature": "CSVFormat.supportSampling()", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/format/CSVFormat.java"}, "focal_method": {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<Parameter>", "body": "@Override\n    public List<Parameter> getParameters() {\n        Locale currentLocale = getLocale();\n        return Arrays.asList(//\n                getFileName(currentLocale), //\n                getCsvDelimiters(currentLocale), //\n                getEnclosureChar(currentLocale), //\n                getEscapeChar(currentLocale), //\n                getEnclosureOptions(currentLocale), //\n                buildCharsetParameter(currentLocale));\n    }", "signature": "List<Parameter> getParameters()", "full_signature": "@Override public List<Parameter> getParameters()", "class_method_signature": "CSVFormat.getParameters()", "testcase": false, "constructor": false, "invocations": ["getLocale", "asList", "getFileName", "getCsvDelimiters", "getEnclosureChar", "getEscapeChar", "getEnclosureOptions", "buildCharsetParameter"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}