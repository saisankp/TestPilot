{"test_class": {"identifier": "ResourcePermissionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ResourcePermissionService service;", "modifier": "private", "type": "ResourcePermissionService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n    private IGenericSearchDAO alienDAO;", "modifier": "@Mock\n    private", "type": "IGenericSearchDAO", "declarator": "alienDAO", "var_name": "alienDAO"}, {"original_string": "@Mock\n    private ResourcePermissionService.IResourceSaver resourceSaver;", "modifier": "@Mock\n    private", "type": "ResourcePermissionService.IResourceSaver", "declarator": "resourceSaver", "var_name": "resourceSaver"}, {"original_string": "@Captor\n    private ArgumentCaptor<ISecurityEnabledResource> resourceSecuredCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<ISecurityEnabledResource>", "declarator": "resourceSecuredCaptor", "var_name": "resourceSecuredCaptor"}, {"original_string": "@Mock\n    private ISecurityEnabledResource resourceSecured;", "modifier": "@Mock\n    private", "type": "ISecurityEnabledResource", "declarator": "resourceSecured", "var_name": "resourceSecured"}, {"original_string": "@Mock\n    private ApplicationEventPublisher publisher;", "modifier": "@Mock\n    private", "type": "ApplicationEventPublisher", "declarator": "publisher", "var_name": "publisher"}, {"original_string": "@Mock\n    private ApplicationEnvironmentService applicationEnvironmentService;", "modifier": "@Mock\n    private", "type": "ApplicationEnvironmentService", "declarator": "applicationEnvironmentService", "var_name": "applicationEnvironmentService"}], "file": "alien4cloud-core/src/test/java/alien4cloud/authorization/ResourcePermissionServiceTest.java"}, "test_case": {"identifier": "when_many_app_env_permission_are_revoked_the_resource_is_saved_only_one_time", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void when_many_app_env_permission_are_revoked_the_resource_is_saved_only_one_time() throws Exception {\n        // Given\n        resourceSecured = new AbstractSecurityEnabledResource() {\n            @Override\n            public String getId() {\n                return \"id\";\n            }\n        };\n\n        HashSet<Permission> permissions = new HashSet<>();\n        permissions.add(Permission.ADMIN);\n        resourceSecured.addPermissions(Subject.APPLICATION, \"subject1\", new HashSet<>(permissions));\n        resourceSecured.addPermissions(Subject.ENVIRONMENT, \"subject1_1\", new HashSet<>(permissions));\n        resourceSecured.addPermissions(Subject.ENVIRONMENT, \"subject1_2\", new HashSet<>(permissions));\n        resourceSecured.addPermissions(Subject.ENVIRONMENT_TYPE, \"subject_env_1_1\", new HashSet<>(permissions));\n\n        ApplicationEnvironment ae1 = new ApplicationEnvironment();\n        ae1.setId(\"subject1_1\");\n\n        ApplicationEnvironment ae2 = new ApplicationEnvironment();\n        ae2.setId(\"subject1_2\");\n\n        Mockito.when(applicationEnvironmentService.getByApplicationId(\"subject1\")).thenReturn(new ApplicationEnvironment[] { ae1, ae2 });\n\n        // When\n        service.revokeAuthorizedEnvironmentsAndEnvironmentTypesPerApplication((AbstractSecurityEnabledResource) resourceSecured, new String[] { \"subject1\" }, new String[] {\n                \"subject1_1\", \"subject1_2\" }, new String[] {\"subject_env_1_1\" });\n\n        // Then\n        verify(alienDAO).save(resourceSecuredCaptor.capture());\n    }", "signature": "void when_many_app_env_permission_are_revoked_the_resource_is_saved_only_one_time()", "full_signature": "@Test public void when_many_app_env_permission_are_revoked_the_resource_is_saved_only_one_time()", "class_method_signature": "ResourcePermissionServiceTest.when_many_app_env_permission_are_revoked_the_resource_is_saved_only_one_time()", "testcase": true, "constructor": false, "invocations": ["add", "addPermissions", "addPermissions", "addPermissions", "addPermissions", "setId", "setId", "thenReturn", "when", "getByApplicationId", "revokeAuthorizedEnvironmentsAndEnvironmentTypesPerApplication", "save", "verify", "capture"]}, "focal_class": {"identifier": "ResourcePermissionService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource(name = \"alien-es-dao\")\n    private IGenericSearchDAO alienDAO;", "modifier": "@Resource(name = \"alien-es-dao\")\n    private", "type": "IGenericSearchDAO", "declarator": "alienDAO", "var_name": "alienDAO"}, {"original_string": "@Inject\n    private IAlienUserDao alienUserDao;", "modifier": "@Inject\n    private", "type": "IAlienUserDao", "declarator": "alienUserDao", "var_name": "alienUserDao"}, {"original_string": "@Inject\n    private IAlienGroupDao alienGroupDao;", "modifier": "@Inject\n    private", "type": "IAlienGroupDao", "declarator": "alienGroupDao", "var_name": "alienGroupDao"}, {"original_string": "@Inject\n    private ApplicationEnvironmentService applicationEnvironmentService;", "modifier": "@Inject\n    private", "type": "ApplicationEnvironmentService", "declarator": "applicationEnvironmentService", "var_name": "applicationEnvironmentService"}, {"original_string": "@Inject\n    private ApplicationEventPublisher publisher;", "modifier": "@Inject\n    private", "type": "ApplicationEventPublisher", "declarator": "publisher", "var_name": "publisher"}], "methods": [{"identifier": "grantPermission", "parameters": "(ISecurityEnabledResource resource, Subject subjectType, String... subjects)", "modifiers": "public", "return": "void", "signature": "void grantPermission(ISecurityEnabledResource resource, Subject subjectType, String... subjects)", "full_signature": "public void grantPermission(ISecurityEnabledResource resource, Subject subjectType, String... subjects)", "class_method_signature": "ResourcePermissionService.grantPermission(ISecurityEnabledResource resource, Subject subjectType, String... subjects)", "testcase": false, "constructor": false}, {"identifier": "grantPermission", "parameters": "(ISecurityEnabledResource resource, IResourceSaver saver, Subject subjectType, String... subjects)", "modifiers": "public", "return": "void", "signature": "void grantPermission(ISecurityEnabledResource resource, IResourceSaver saver, Subject subjectType, String... subjects)", "full_signature": "public void grantPermission(ISecurityEnabledResource resource, IResourceSaver saver, Subject subjectType, String... subjects)", "class_method_signature": "ResourcePermissionService.grantPermission(ISecurityEnabledResource resource, IResourceSaver saver, Subject subjectType, String... subjects)", "testcase": false, "constructor": false}, {"identifier": "revokePermission", "parameters": "(ISecurityEnabledResource resource, Subject subjectType, String... subjects)", "modifiers": "public", "return": "void", "signature": "void revokePermission(ISecurityEnabledResource resource, Subject subjectType, String... subjects)", "full_signature": "public void revokePermission(ISecurityEnabledResource resource, Subject subjectType, String... subjects)", "class_method_signature": "ResourcePermissionService.revokePermission(ISecurityEnabledResource resource, Subject subjectType, String... subjects)", "testcase": false, "constructor": false}, {"identifier": "revokePermission", "parameters": "(ISecurityEnabledResource resource, IResourceSaver saver, Subject subjectType, String... subjects)", "modifiers": "public", "return": "void", "signature": "void revokePermission(ISecurityEnabledResource resource, IResourceSaver saver, Subject subjectType, String... subjects)", "full_signature": "public void revokePermission(ISecurityEnabledResource resource, IResourceSaver saver, Subject subjectType, String... subjects)", "class_method_signature": "ResourcePermissionService.revokePermission(ISecurityEnabledResource resource, IResourceSaver saver, Subject subjectType, String... subjects)", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(ISecurityEnabledResource resource, Subject subjectType, String subject)", "modifiers": "private", "return": "boolean", "signature": "boolean hasPermission(ISecurityEnabledResource resource, Subject subjectType, String subject)", "full_signature": "private boolean hasPermission(ISecurityEnabledResource resource, Subject subjectType, String subject)", "class_method_signature": "ResourcePermissionService.hasPermission(ISecurityEnabledResource resource, Subject subjectType, String subject)", "testcase": false, "constructor": false}, {"identifier": "anyHasPermission", "parameters": "(ISecurityEnabledResource resource, Map<Subject, Set<String>> subjects)", "modifiers": "public", "return": "boolean", "signature": "boolean anyHasPermission(ISecurityEnabledResource resource, Map<Subject, Set<String>> subjects)", "full_signature": "public boolean anyHasPermission(ISecurityEnabledResource resource, Map<Subject, Set<String>> subjects)", "class_method_signature": "ResourcePermissionService.anyHasPermission(ISecurityEnabledResource resource, Map<Subject, Set<String>> subjects)", "testcase": false, "constructor": false}, {"identifier": "allHavePermission", "parameters": "(ISecurityEnabledResource resource, Map<Subject, Set<String>> subjects)", "modifiers": "public", "return": "boolean", "signature": "boolean allHavePermission(ISecurityEnabledResource resource, Map<Subject, Set<String>> subjects)", "full_signature": "public boolean allHavePermission(ISecurityEnabledResource resource, Map<Subject, Set<String>> subjects)", "class_method_signature": "ResourcePermissionService.allHavePermission(ISecurityEnabledResource resource, Map<Subject, Set<String>> subjects)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizedUsers", "parameters": "(AbstractSecurityEnabledResource resource)", "modifiers": "public", "return": "List<User>", "signature": "List<User> getAuthorizedUsers(AbstractSecurityEnabledResource resource)", "full_signature": "public List<User> getAuthorizedUsers(AbstractSecurityEnabledResource resource)", "class_method_signature": "ResourcePermissionService.getAuthorizedUsers(AbstractSecurityEnabledResource resource)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizedGroups", "parameters": "(AbstractSecurityEnabledResource resource)", "modifiers": "public", "return": "List<Group>", "signature": "List<Group> getAuthorizedGroups(AbstractSecurityEnabledResource resource)", "full_signature": "public List<Group> getAuthorizedGroups(AbstractSecurityEnabledResource resource)", "class_method_signature": "ResourcePermissionService.getAuthorizedGroups(AbstractSecurityEnabledResource resource)", "testcase": false, "constructor": false}, {"identifier": "revokeAuthorizedEnvironmentsAndEnvironmentTypesPerApplication", "parameters": "(AbstractSecurityEnabledResource resource, String[] applicationsToDelete,\n                                                                              String[] environmentsToDelete, String[] environmentTypesToDelete)", "modifiers": "public", "return": "void", "signature": "void revokeAuthorizedEnvironmentsAndEnvironmentTypesPerApplication(AbstractSecurityEnabledResource resource, String[] applicationsToDelete,\n                                                                              String[] environmentsToDelete, String[] environmentTypesToDelete)", "full_signature": "public void revokeAuthorizedEnvironmentsAndEnvironmentTypesPerApplication(AbstractSecurityEnabledResource resource, String[] applicationsToDelete,\n                                                                              String[] environmentsToDelete, String[] environmentTypesToDelete)", "class_method_signature": "ResourcePermissionService.revokeAuthorizedEnvironmentsAndEnvironmentTypesPerApplication(AbstractSecurityEnabledResource resource, String[] applicationsToDelete,\n                                                                              String[] environmentsToDelete, String[] environmentTypesToDelete)", "testcase": false, "constructor": false}, {"identifier": "grantAuthorizedEnvironmentsAndEnvTypesPerApplication", "parameters": "(AbstractSecurityEnabledResource resource, String[] applicationsToAdd, String[] environmentsToAdd,\n                                                                     String[] environmentTypesToAdd)", "modifiers": "public", "return": "void", "signature": "void grantAuthorizedEnvironmentsAndEnvTypesPerApplication(AbstractSecurityEnabledResource resource, String[] applicationsToAdd, String[] environmentsToAdd,\n                                                                     String[] environmentTypesToAdd)", "full_signature": "public void grantAuthorizedEnvironmentsAndEnvTypesPerApplication(AbstractSecurityEnabledResource resource, String[] applicationsToAdd, String[] environmentsToAdd,\n                                                                     String[] environmentTypesToAdd)", "class_method_signature": "ResourcePermissionService.grantAuthorizedEnvironmentsAndEnvTypesPerApplication(AbstractSecurityEnabledResource resource, String[] applicationsToAdd, String[] environmentsToAdd,\n                                                                     String[] environmentTypesToAdd)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/alien4cloud/authorization/ResourcePermissionService.java"}, "focal_method": {"identifier": "revokeAuthorizedEnvironmentsAndEnvironmentTypesPerApplication", "parameters": "(AbstractSecurityEnabledResource resource, String[] applicationsToDelete,\n                                                                              String[] environmentsToDelete, String[] environmentTypesToDelete)", "modifiers": "public", "return": "void", "body": "public void revokeAuthorizedEnvironmentsAndEnvironmentTypesPerApplication(AbstractSecurityEnabledResource resource, String[] applicationsToDelete,\n                                                                              String[] environmentsToDelete, String[] environmentTypesToDelete) {\n        IResourceSaver noSave = null;\n\n        if (ArrayUtils.isNotEmpty(applicationsToDelete)) {\n            revokePermission(resource, noSave, Subject.APPLICATION, applicationsToDelete);\n        }\n        if (ArrayUtils.isNotEmpty(environmentsToDelete)) {\n            revokePermission(resource, noSave, Subject.ENVIRONMENT, environmentsToDelete);\n        }\n        if (ArrayUtils.isNotEmpty(environmentTypesToDelete)) {\n            revokePermission(resource, noSave, Subject.ENVIRONMENT_TYPE, environmentTypesToDelete);\n        }\n\n        alienDAO.save(resource);\n    }", "signature": "void revokeAuthorizedEnvironmentsAndEnvironmentTypesPerApplication(AbstractSecurityEnabledResource resource, String[] applicationsToDelete,\n                                                                              String[] environmentsToDelete, String[] environmentTypesToDelete)", "full_signature": "public void revokeAuthorizedEnvironmentsAndEnvironmentTypesPerApplication(AbstractSecurityEnabledResource resource, String[] applicationsToDelete,\n                                                                              String[] environmentsToDelete, String[] environmentTypesToDelete)", "class_method_signature": "ResourcePermissionService.revokeAuthorizedEnvironmentsAndEnvironmentTypesPerApplication(AbstractSecurityEnabledResource resource, String[] applicationsToDelete,\n                                                                              String[] environmentsToDelete, String[] environmentTypesToDelete)", "testcase": false, "constructor": false, "invocations": ["isNotEmpty", "revokePermission", "isNotEmpty", "revokePermission", "isNotEmpty", "revokePermission", "save"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}