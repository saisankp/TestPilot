{"test_class": {"identifier": "ArgumentParserTest", "superclass": "extends AbstractCoreTest", "interfaces": "", "fields": [], "file": "herd-code/herd-core/src/test/java/org/finra/herd/core/ArgumentParserTest.java"}, "test_case": {"identifier": "testGetIntegerValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetIntegerValue() throws ParseException\n    {\n        final Integer testDefaultValue = 500;\n        final Integer testMinValue = 0;\n        final Integer testMaxValue = 1000;\n\n        ArgumentParser argParser = new ArgumentParser(\"\");\n        Option intOpt = argParser.addArgument(\"i\", \"int\", true, \"Some integer parameter\", false);\n        Integer inputValue;\n        Integer resultValue;\n\n        final String shortIntOpt = String.format(\"-%s\", intOpt.getOpt());\n        final String longIntOpt = String.format(\"--%s\", intOpt.getLongOpt());\n\n        argParser.parseArguments(new String[] {});\n        assertNull(argParser.getIntegerValue(intOpt));\n        assertEquals(testDefaultValue, argParser.getIntegerValue(intOpt, testDefaultValue));\n\n        inputValue = 123;\n        argParser.parseArguments(new String[] {shortIntOpt, inputValue.toString()});\n        resultValue = argParser.getIntegerValue(intOpt);\n        assertNotNull(resultValue);\n        assertEquals(inputValue, resultValue);\n\n        inputValue = 456;\n        argParser.parseArguments(new String[] {shortIntOpt, inputValue.toString()});\n        resultValue = argParser.getIntegerValue(intOpt, testDefaultValue);\n        assertNotNull(resultValue);\n        assertEquals(inputValue, resultValue);\n\n        inputValue = 789;\n        argParser.parseArguments(new String[] {longIntOpt, inputValue.toString()});\n        resultValue = argParser.getIntegerValue(intOpt);\n        assertNotNull(resultValue);\n        assertEquals(inputValue, resultValue);\n\n        // The \"happy path\" test case for the minimum and maximum allowed values.\n        inputValue = 234;\n        argParser.parseArguments(new String[] {longIntOpt, inputValue.toString()});\n        resultValue = argParser.getIntegerValue(intOpt, testDefaultValue, testMinValue, testMaxValue);\n        assertNotNull(resultValue);\n        assertEquals(inputValue, resultValue);\n\n        // The default value test case the minimum and maximum allowed values.\n        argParser.parseArguments(new String[] {});\n        resultValue = argParser.getIntegerValue(intOpt, testDefaultValue, testMinValue, testMaxValue);\n        assertNotNull(resultValue);\n        assertEquals(testDefaultValue, resultValue);\n\n        // The edge test case for the minimum allowed value.\n        argParser.parseArguments(new String[] {longIntOpt, testMinValue.toString()});\n        resultValue = argParser.getIntegerValue(intOpt, testDefaultValue, testMinValue, testMaxValue);\n        assertNotNull(resultValue);\n        assertEquals(testMinValue, resultValue);\n\n        // The edge test case for the maximum allowed value.\n        argParser.parseArguments(new String[] {longIntOpt, testMaxValue.toString()});\n        resultValue = argParser.getIntegerValue(intOpt, testDefaultValue, testMinValue, testMaxValue);\n        assertNotNull(resultValue);\n        assertEquals(testMaxValue, resultValue);\n\n        // The edge test case for the minimum and maximum allowed values.\n        argParser.parseArguments(new String[] {longIntOpt, testDefaultValue.toString()});\n        resultValue = argParser.getIntegerValue(intOpt, testDefaultValue, testDefaultValue, testDefaultValue);\n        assertNotNull(resultValue);\n        assertEquals(testDefaultValue, resultValue);\n\n        // Try to get an option value what is less than the minimum allowed value.\n        inputValue = testMinValue - 1;\n        argParser.parseArguments(new String[] {longIntOpt, inputValue.toString()});\n        try\n        {\n            argParser.getIntegerValue(intOpt, testDefaultValue, testMinValue, testMaxValue);\n            fail(\"Suppose to throw an IllegalArgumentException when option value is less than the minimum allowed value.\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            assertEquals(String.format(\"The %s option value %d is less than the minimum allowed value of %d.\", intOpt.getLongOpt(), inputValue, testMinValue),\n                e.getMessage());\n        }\n\n        // Try to get an option value what is greater than the maximum allowed value.\n        inputValue = testMaxValue + 1;\n        argParser.parseArguments(new String[] {longIntOpt, inputValue.toString()});\n        try\n        {\n            argParser.getIntegerValue(intOpt, testDefaultValue, testMinValue, testMaxValue);\n            fail(\"Suppose to throw an IllegalArgumentException when option value is greater than the maximum allowed value.\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            assertEquals(String.format(\"The %s option value %d is bigger than maximum allowed value of %d.\", intOpt.getLongOpt(), inputValue, testMaxValue),\n                e.getMessage());\n        }\n    }", "signature": "void testGetIntegerValue()", "full_signature": "@Test public void testGetIntegerValue()", "class_method_signature": "ArgumentParserTest.testGetIntegerValue()", "testcase": true, "constructor": false, "invocations": ["addArgument", "format", "getOpt", "format", "getLongOpt", "parseArguments", "assertNull", "getIntegerValue", "assertEquals", "getIntegerValue", "parseArguments", "toString", "getIntegerValue", "assertNotNull", "assertEquals", "parseArguments", "toString", "getIntegerValue", "assertNotNull", "assertEquals", "parseArguments", "toString", "getIntegerValue", "assertNotNull", "assertEquals", "parseArguments", "toString", "getIntegerValue", "assertNotNull", "assertEquals", "parseArguments", "getIntegerValue", "assertNotNull", "assertEquals", "parseArguments", "toString", "getIntegerValue", "assertNotNull", "assertEquals", "parseArguments", "toString", "getIntegerValue", "assertNotNull", "assertEquals", "parseArguments", "toString", "getIntegerValue", "assertNotNull", "assertEquals", "parseArguments", "toString", "getIntegerValue", "fail", "assertEquals", "format", "getLongOpt", "getMessage", "parseArguments", "toString", "getIntegerValue", "fail", "assertEquals", "format", "getLongOpt", "getMessage"]}, "focal_class": {"identifier": "ArgumentParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected String applicationName;", "modifier": "protected", "type": "String", "declarator": "applicationName", "var_name": "applicationName"}, {"original_string": "protected Options options;", "modifier": "protected", "type": "Options", "declarator": "options", "var_name": "options"}, {"original_string": "protected Options optionsIgnoreRequired;", "modifier": "protected", "type": "Options", "declarator": "optionsIgnoreRequired", "var_name": "optionsIgnoreRequired"}, {"original_string": "protected CommandLine commandLine;", "modifier": "protected", "type": "CommandLine", "declarator": "commandLine", "var_name": "commandLine"}], "methods": [{"identifier": "ArgumentParser", "parameters": "(String applicationName)", "modifiers": "public", "return": "", "signature": " ArgumentParser(String applicationName)", "full_signature": "public  ArgumentParser(String applicationName)", "class_method_signature": "ArgumentParser.ArgumentParser(String applicationName)", "testcase": false, "constructor": true}, {"identifier": "getApplicationName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getApplicationName()", "full_signature": "public String getApplicationName()", "class_method_signature": "ArgumentParser.getApplicationName()", "testcase": false, "constructor": false}, {"identifier": "addArgument", "parameters": "(Option option, boolean required)", "modifiers": "public", "return": "Option", "signature": "Option addArgument(Option option, boolean required)", "full_signature": "public Option addArgument(Option option, boolean required)", "class_method_signature": "ArgumentParser.addArgument(Option option, boolean required)", "testcase": false, "constructor": false}, {"identifier": "addArgument", "parameters": "(String opt, String longOpt, boolean hasArg, String description, boolean required)", "modifiers": "public", "return": "Option", "signature": "Option addArgument(String opt, String longOpt, boolean hasArg, String description, boolean required)", "full_signature": "public Option addArgument(String opt, String longOpt, boolean hasArg, String description, boolean required)", "class_method_signature": "ArgumentParser.addArgument(String opt, String longOpt, boolean hasArg, String description, boolean required)", "testcase": false, "constructor": false}, {"identifier": "getConfiguredOptions", "parameters": "()", "modifiers": "public", "return": "Collection", "signature": "Collection getConfiguredOptions()", "full_signature": "public Collection getConfiguredOptions()", "class_method_signature": "ArgumentParser.getConfiguredOptions()", "testcase": false, "constructor": false}, {"identifier": "parseArguments", "parameters": "(String[] args, boolean failOnMissingRequiredOptions)", "modifiers": "public", "return": "void", "signature": "void parseArguments(String[] args, boolean failOnMissingRequiredOptions)", "full_signature": "public void parseArguments(String[] args, boolean failOnMissingRequiredOptions)", "class_method_signature": "ArgumentParser.parseArguments(String[] args, boolean failOnMissingRequiredOptions)", "testcase": false, "constructor": false}, {"identifier": "parseArguments", "parameters": "(String[] args)", "modifiers": "public", "return": "void", "signature": "void parseArguments(String[] args)", "full_signature": "public void parseArguments(String[] args)", "class_method_signature": "ArgumentParser.parseArguments(String[] args)", "testcase": false, "constructor": false}, {"identifier": "getUsageInformation", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsageInformation()", "full_signature": "public String getUsageInformation()", "class_method_signature": "ArgumentParser.getUsageInformation()", "testcase": false, "constructor": false}, {"identifier": "getBooleanValue", "parameters": "(Option option)", "modifiers": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public", "return": "Boolean", "signature": "Boolean getBooleanValue(Option option)", "full_signature": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public Boolean getBooleanValue(Option option)", "class_method_signature": "ArgumentParser.getBooleanValue(Option option)", "testcase": false, "constructor": false}, {"identifier": "getStringValueAsBoolean", "parameters": "(Option option, Boolean defaultValue)", "modifiers": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public", "return": "Boolean", "signature": "Boolean getStringValueAsBoolean(Option option, Boolean defaultValue)", "full_signature": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public Boolean getStringValueAsBoolean(Option option, Boolean defaultValue)", "class_method_signature": "ArgumentParser.getStringValueAsBoolean(Option option, Boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(Option option)", "modifiers": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public", "return": "String", "signature": "String getStringValue(Option option)", "full_signature": "@SuppressFBWarnings(value = \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\", justification = \"This is a false positive. A null check is present.\") public String getStringValue(Option option)", "class_method_signature": "ArgumentParser.getStringValue(Option option)", "testcase": false, "constructor": false}, {"identifier": "ensureCommandLineNotNull", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureCommandLineNotNull()", "full_signature": "private void ensureCommandLineNotNull()", "class_method_signature": "ArgumentParser.ensureCommandLineNotNull()", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(Option option, String defaultValue)", "modifiers": "public", "return": "String", "signature": "String getStringValue(Option option, String defaultValue)", "full_signature": "public String getStringValue(Option option, String defaultValue)", "class_method_signature": "ArgumentParser.getStringValue(Option option, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getIntegerValue", "parameters": "(Option option)", "modifiers": "public", "return": "Integer", "signature": "Integer getIntegerValue(Option option)", "full_signature": "public Integer getIntegerValue(Option option)", "class_method_signature": "ArgumentParser.getIntegerValue(Option option)", "testcase": false, "constructor": false}, {"identifier": "getIntegerValue", "parameters": "(Option option, Integer defaultValue)", "modifiers": "public", "return": "Integer", "signature": "Integer getIntegerValue(Option option, Integer defaultValue)", "full_signature": "public Integer getIntegerValue(Option option, Integer defaultValue)", "class_method_signature": "ArgumentParser.getIntegerValue(Option option, Integer defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getIntegerValue", "parameters": "(Option option, Integer defaultValue, Integer minValue, Integer maxValue)", "modifiers": "public", "return": "Integer", "signature": "Integer getIntegerValue(Option option, Integer defaultValue, Integer minValue, Integer maxValue)", "full_signature": "public Integer getIntegerValue(Option option, Integer defaultValue, Integer minValue, Integer maxValue)", "class_method_signature": "ArgumentParser.getIntegerValue(Option option, Integer defaultValue, Integer minValue, Integer maxValue)", "testcase": false, "constructor": false}, {"identifier": "getFileValue", "parameters": "(Option option)", "modifiers": "public", "return": "File", "signature": "File getFileValue(Option option)", "full_signature": "public File getFileValue(Option option)", "class_method_signature": "ArgumentParser.getFileValue(Option option)", "testcase": false, "constructor": false}, {"identifier": "getFileValue", "parameters": "(Option option, File defaultValue)", "modifiers": "public", "return": "File", "signature": "File getFileValue(Option option, File defaultValue)", "full_signature": "public File getFileValue(Option option, File defaultValue)", "class_method_signature": "ArgumentParser.getFileValue(Option option, File defaultValue)", "testcase": false, "constructor": false}], "file": "herd-code/herd-core/src/main/java/org/finra/herd/core/ArgumentParser.java"}, "focal_method": {"identifier": "getIntegerValue", "parameters": "(Option option)", "modifiers": "public", "return": "Integer", "body": "public Integer getIntegerValue(Option option) throws NumberFormatException\n    {\n        String value = getStringValue(option);\n\n        return (value != null) ? Integer.parseInt(value) : null;\n    }", "signature": "Integer getIntegerValue(Option option)", "full_signature": "public Integer getIntegerValue(Option option)", "class_method_signature": "ArgumentParser.getIntegerValue(Option option)", "testcase": false, "constructor": false, "invocations": ["getStringValue", "parseInt"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}