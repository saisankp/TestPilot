{"test_class": {"identifier": "SessionResolverImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MenuTemplate mainTemplate;", "modifier": "", "type": "MenuTemplate", "declarator": "mainTemplate", "var_name": "mainTemplate"}, {"original_string": "Player vasya = mock(Player.class);", "modifier": "", "type": "Player", "declarator": "vasya = mock(Player.class)", "var_name": "vasya"}, {"original_string": "Player petya = mock(Player.class);", "modifier": "", "type": "Player", "declarator": "petya = mock(Player.class)", "var_name": "petya"}, {"original_string": "MenuApiInstance apiInstance = MenuApiUtil.createApiInstance();", "modifier": "", "type": "MenuApiInstance", "declarator": "apiInstance = MenuApiUtil.createApiInstance()", "var_name": "apiInstance"}, {"original_string": "SessionResolverImpl sessionResolver = (SessionResolverImpl) apiInstance.getSessionResolver();", "modifier": "", "type": "SessionResolverImpl", "declarator": "sessionResolver = (SessionResolverImpl) apiInstance.getSessionResolver()", "var_name": "sessionResolver"}, {"original_string": "MenuTemplate randomTemplate = MenuApiUtil.createRandomTemplate(apiInstance);", "modifier": "", "type": "MenuTemplate", "declarator": "randomTemplate = MenuApiUtil.createRandomTemplate(apiInstance)", "var_name": "randomTemplate"}, {"original_string": "MenuTemplate veryRandomTemplate = MenuApiUtil.createRandomTemplate(apiInstance);", "modifier": "", "type": "MenuTemplate", "declarator": "veryRandomTemplate = MenuApiUtil.createRandomTemplate(apiInstance)", "var_name": "veryRandomTemplate"}], "file": "menu-api/src/test/java/ru/hyndo/sightmenu/SessionResolverImplTest.java"}, "test_case": {"identifier": "findAllByTemplate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findAllByTemplate() {\n        MenuSession vasyaSes = apiInstance.getMenuFactory().createSingleSession(vasya, randomTemplate);\n        sessionResolver.addNewSession(vasyaSes);\n        MenuSession petyaSes = apiInstance.getMenuFactory().createSingleSession(petya, randomTemplate);\n        sessionResolver.addNewSession(petyaSes);\n        Collection<MenuSession> allByTemplate = sessionResolver.findAllByTemplate(randomTemplate);\n        assertEquals(allByTemplate.size(), 2);\n        assertTrue(allByTemplate.contains(vasyaSes));\n        assertTrue(allByTemplate.contains(petyaSes));\n    }", "signature": "void findAllByTemplate()", "full_signature": "@Test public void findAllByTemplate()", "class_method_signature": "SessionResolverImplTest.findAllByTemplate()", "testcase": true, "constructor": false, "invocations": ["createSingleSession", "getMenuFactory", "addNewSession", "createSingleSession", "getMenuFactory", "addNewSession", "findAllByTemplate", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "SessionResolverImpl", "superclass": "", "interfaces": "implements SessionResolver", "fields": [{"original_string": "private Multimap<MenuTemplate, MenuSession> activeSessionsByTemplates = HashMultimap.create();", "modifier": "private", "type": "Multimap<MenuTemplate, MenuSession>", "declarator": "activeSessionsByTemplates = HashMultimap.create()", "var_name": "activeSessionsByTemplates"}, {"original_string": "private Map<Player, MenuSession> playerSessions = new WeakHashMap<>();", "modifier": "private", "type": "Map<Player, MenuSession>", "declarator": "playerSessions = new WeakHashMap<>()", "var_name": "playerSessions"}, {"original_string": "private Map<Player, PaginatedMenuSession> paginatedSessions = new WeakHashMap<>();", "modifier": "private", "type": "Map<Player, PaginatedMenuSession>", "declarator": "paginatedSessions = new WeakHashMap<>()", "var_name": "paginatedSessions"}], "methods": [{"identifier": "SessionResolverImpl", "parameters": "()", "modifiers": "", "return": "", "signature": " SessionResolverImpl()", "full_signature": "  SessionResolverImpl()", "class_method_signature": "SessionResolverImpl.SessionResolverImpl()", "testcase": false, "constructor": true}, {"identifier": "findAllByTemplate", "parameters": "(MenuTemplate menuTemplate)", "modifiers": "@Override public", "return": "Collection<MenuSession>", "signature": "Collection<MenuSession> findAllByTemplate(MenuTemplate menuTemplate)", "full_signature": "@Override public Collection<MenuSession> findAllByTemplate(MenuTemplate menuTemplate)", "class_method_signature": "SessionResolverImpl.findAllByTemplate(MenuTemplate menuTemplate)", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "(Player player)", "modifiers": "@Override public", "return": "Optional<MenuSession>", "signature": "Optional<MenuSession> getSession(Player player)", "full_signature": "@Override public Optional<MenuSession> getSession(Player player)", "class_method_signature": "SessionResolverImpl.getSession(Player player)", "testcase": false, "constructor": false}, {"identifier": "getLastPaginatedSession", "parameters": "(Player player)", "modifiers": "@Override public", "return": "Optional<PaginatedMenuSession>", "signature": "Optional<PaginatedMenuSession> getLastPaginatedSession(Player player)", "full_signature": "@Override public Optional<PaginatedMenuSession> getLastPaginatedSession(Player player)", "class_method_signature": "SessionResolverImpl.getLastPaginatedSession(Player player)", "testcase": false, "constructor": false}, {"identifier": "addNewPaginatedSession", "parameters": "(PaginatedMenuSession session)", "modifiers": "", "return": "void", "signature": "void addNewPaginatedSession(PaginatedMenuSession session)", "full_signature": " void addNewPaginatedSession(PaginatedMenuSession session)", "class_method_signature": "SessionResolverImpl.addNewPaginatedSession(PaginatedMenuSession session)", "testcase": false, "constructor": false}, {"identifier": "addNewSession", "parameters": "(MenuSession session)", "modifiers": "", "return": "void", "signature": "void addNewSession(MenuSession session)", "full_signature": " void addNewSession(MenuSession session)", "class_method_signature": "SessionResolverImpl.addNewSession(MenuSession session)", "testcase": false, "constructor": false}, {"identifier": "replaceSessionTemplate", "parameters": "(MenuSession session)", "modifiers": "", "return": "void", "signature": "void replaceSessionTemplate(MenuSession session)", "full_signature": " void replaceSessionTemplate(MenuSession session)", "class_method_signature": "SessionResolverImpl.replaceSessionTemplate(MenuSession session)", "testcase": false, "constructor": false}, {"identifier": "onInactiveSession", "parameters": "(MenuSession session)", "modifiers": "", "return": "void", "signature": "void onInactiveSession(MenuSession session)", "full_signature": " void onInactiveSession(MenuSession session)", "class_method_signature": "SessionResolverImpl.onInactiveSession(MenuSession session)", "testcase": false, "constructor": false}], "file": "menu-api/src/main/java/ru/hyndo/sightmenu/SessionResolverImpl.java"}, "focal_method": {"identifier": "findAllByTemplate", "parameters": "(MenuTemplate menuTemplate)", "modifiers": "@Override public", "return": "Collection<MenuSession>", "body": "@Override\n    public Collection<MenuSession> findAllByTemplate(MenuTemplate menuTemplate) {\n        return ImmutableSet.copyOf(activeSessionsByTemplates.get(menuTemplate));\n    }", "signature": "Collection<MenuSession> findAllByTemplate(MenuTemplate menuTemplate)", "full_signature": "@Override public Collection<MenuSession> findAllByTemplate(MenuTemplate menuTemplate)", "class_method_signature": "SessionResolverImpl.findAllByTemplate(MenuTemplate menuTemplate)", "testcase": false, "constructor": false, "invocations": ["copyOf", "get"]}, "repository": {"repo_id": 128830029, "url": "https://github.com/hyndor/SightMenu", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 130, "license": "licensed"}}