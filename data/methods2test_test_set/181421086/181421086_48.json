{"test_class": {"identifier": "EventTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static Logger log = LoggerFactory.getLogger(EventTest.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(EventTest.class)", "var_name": "log"}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/test/java/net/floodlightcontroller/debugevent/EventTest.java"}, "test_case": {"identifier": "testIncorrectAnnotation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIncorrectAnnotation() {\n        Event e = new Event(1L, 32, \"test\",\n                            new LakeEvent(199), 11L); // dpid cannot be int\n        assertTrue(e.getFormattedEvent(LakeEvent.class, \"test\").getDataFields()\n          .contains(new Metadata(\"Error\",\n                             \"java.lang.Integer cannot be cast to org.projectfloodlight.openflow.types.DatapathId\")));\n\n        Event e2 = new Event(1L, 32, \"test\",\n                            new LakeEvent2(199), 12L); // mac cannot be int\n        assertTrue(e2.getFormattedEvent(LakeEvent2.class, \"test\").getDataFields()\n                   .contains(new Metadata(\"Error\",\n                                      \"java.lang.Integer cannot be cast to java.lang.Long\")));\n    }", "signature": "void testIncorrectAnnotation()", "full_signature": "@Test public void testIncorrectAnnotation()", "class_method_signature": "EventTest.testIncorrectAnnotation()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "contains", "getDataFields", "getFormattedEvent", "assertTrue", "contains", "getDataFields", "getFormattedEvent"]}, "focal_class": {"identifier": "Event", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final long eventInstanceId;", "modifier": "private final", "type": "long", "declarator": "eventInstanceId", "var_name": "eventInstanceId"}, {"original_string": "private volatile boolean acked;", "modifier": "private volatile", "type": "boolean", "declarator": "acked", "var_name": "acked"}, {"original_string": "private final long timeMs;", "modifier": "private final", "type": "long", "declarator": "timeMs", "var_name": "timeMs"}, {"original_string": "private final long threadId;", "modifier": "private final", "type": "long", "declarator": "threadId", "var_name": "threadId"}, {"original_string": "private final String threadName;", "modifier": "private final", "type": "String", "declarator": "threadName", "var_name": "threadName"}, {"original_string": "private final Object eventData;", "modifier": "private final", "type": "Object", "declarator": "eventData", "var_name": "eventData"}], "methods": [{"identifier": "Event", "parameters": "(long timeMs, long threadId, String threadName,\n                 Object eventData, long eventInstanceId)", "modifiers": "public", "return": "", "signature": " Event(long timeMs, long threadId, String threadName,\n                 Object eventData, long eventInstanceId)", "full_signature": "public  Event(long timeMs, long threadId, String threadName,\n                 Object eventData, long eventInstanceId)", "class_method_signature": "Event.Event(long timeMs, long threadId, String threadName,\n                 Object eventData, long eventInstanceId)", "testcase": false, "constructor": true}, {"identifier": "getTimeMs", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimeMs()", "full_signature": "public long getTimeMs()", "class_method_signature": "Event.getTimeMs()", "testcase": false, "constructor": false}, {"identifier": "getThreadId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getThreadId()", "full_signature": "public long getThreadId()", "class_method_signature": "Event.getThreadId()", "testcase": false, "constructor": false}, {"identifier": "getThreadName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getThreadName()", "full_signature": "public String getThreadName()", "class_method_signature": "Event.getThreadName()", "testcase": false, "constructor": false}, {"identifier": "geteventData", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object geteventData()", "full_signature": "public Object geteventData()", "class_method_signature": "Event.geteventData()", "testcase": false, "constructor": false}, {"identifier": "getEventInstanceId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getEventInstanceId()", "full_signature": "public long getEventInstanceId()", "class_method_signature": "Event.getEventInstanceId()", "testcase": false, "constructor": false}, {"identifier": "isAcked", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAcked()", "full_signature": "public boolean isAcked()", "class_method_signature": "Event.isAcked()", "testcase": false, "constructor": false}, {"identifier": "setAcked", "parameters": "(boolean acked)", "modifiers": "public", "return": "void", "signature": "void setAcked(boolean acked)", "full_signature": "public void setAcked(boolean acked)", "class_method_signature": "Event.setAcked(boolean acked)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Event.toString()", "testcase": false, "constructor": false}, {"identifier": "getFormattedEvent", "parameters": "(Class<?> eventClass,\n                                           String moduleEventName)", "modifiers": "public", "return": "EventResource", "signature": "EventResource getFormattedEvent(Class<?> eventClass,\n                                           String moduleEventName)", "full_signature": "public EventResource getFormattedEvent(Class<?> eventClass,\n                                           String moduleEventName)", "class_method_signature": "Event.getFormattedEvent(Class<?> eventClass,\n                                           String moduleEventName)", "testcase": false, "constructor": false}, {"identifier": "customFormat", "parameters": "(Class<?> clazz, Object eventData,\n                              EventResourceBuilder eventDataBuilder)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void customFormat(Class<?> clazz, Object eventData,\n                              EventResourceBuilder eventDataBuilder)", "full_signature": "@SuppressWarnings(\"unchecked\") private void customFormat(Class<?> clazz, Object eventData,\n                              EventResourceBuilder eventDataBuilder)", "class_method_signature": "Event.customFormat(Class<?> clazz, Object eventData,\n                              EventResourceBuilder eventDataBuilder)", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/main/java/net/floodlightcontroller/debugevent/Event.java"}, "focal_method": {"identifier": "getFormattedEvent", "parameters": "(Class<?> eventClass,\n                                           String moduleEventName)", "modifiers": "public", "return": "EventResource", "body": "public EventResource getFormattedEvent(Class<?> eventClass,\n                                           String moduleEventName) {\n        if (eventClass == null || !eventClass.equals(eventData.getClass())) {\n            EventResourceBuilder edb = new EventResourceBuilder();\n            edb.dataFields.add(new Metadata(\"Error\",\n                                            \"null event data or event-class does not match event-data\"));\n            return edb.build();\n        }\n\n        EventResourceBuilder edb = new EventResourceBuilder();\n        edb.setTimeStamp(timeMs);\n        edb.setThreadId(threadId);\n        edb.setThreadName(threadName);\n        edb.setModuleEventName(moduleEventName);\n        edb.setEventInstanceId(eventInstanceId);\n        edb.setAcked(acked);\n        customFormat(eventClass, eventData, edb);\n        return edb.build();\n    }", "signature": "EventResource getFormattedEvent(Class<?> eventClass,\n                                           String moduleEventName)", "full_signature": "public EventResource getFormattedEvent(Class<?> eventClass,\n                                           String moduleEventName)", "class_method_signature": "Event.getFormattedEvent(Class<?> eventClass,\n                                           String moduleEventName)", "testcase": false, "constructor": false, "invocations": ["equals", "getClass", "add", "build", "setTimeStamp", "setThreadId", "setThreadName", "setModuleEventName", "setEventInstanceId", "setAcked", "customFormat", "build"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}