{"test_class": {"identifier": "ProgramStageObjectBundleHookTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProgramStageObjectBundleHook subject;", "modifier": "private", "type": "ProgramStageObjectBundleHook", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Mock\n    private AclService aclService;", "modifier": "@Mock\n    private", "type": "AclService", "declarator": "aclService", "var_name": "aclService"}, {"original_string": "private ProgramStage programStage;", "modifier": "private", "type": "ProgramStage", "declarator": "programStage", "var_name": "programStage"}, {"original_string": "private Program program;", "modifier": "private", "type": "Program", "declarator": "program", "var_name": "program"}, {"original_string": "private DataElement dataElement;", "modifier": "private", "type": "DataElement", "declarator": "dataElement", "var_name": "dataElement"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private Preheat preheat = new Preheat();", "modifier": "private", "type": "Preheat", "declarator": "preheat = new Preheat()", "var_name": "preheat"}, {"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/metadata/objectbundle/hooks/ProgramStageObjectBundleHookTest.java"}, "test_case": {"identifier": "testValidateDataElementAcl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateDataElementAcl()\n    {\n        ObjectBundleParams objectBundleParams = new ObjectBundleParams();\n        objectBundleParams.setPreheatIdentifier( PreheatIdentifier.UID );\n        objectBundleParams.setUser( user );\n        ObjectBundle bundle = new ObjectBundle( objectBundleParams, preheat, Collections\n            .singletonMap( OptionSet.class, Collections.singletonList( programStage ) ) );\n\n\n        List<ErrorReport> errors = subject.validate( programStage, bundle );\n        Assert.assertEquals( 1, errors.size() );\n        Assert.assertEquals( ErrorCode.E3012, errors.get( 0 ).getErrorCode() );\n    }", "signature": "void testValidateDataElementAcl()", "full_signature": "@Test public void testValidateDataElementAcl()", "class_method_signature": "ProgramStageObjectBundleHookTest.testValidateDataElementAcl()", "testcase": true, "constructor": false, "invocations": ["setPreheatIdentifier", "setUser", "singletonMap", "singletonList", "validate", "assertEquals", "size", "assertEquals", "getErrorCode", "get"]}, "focal_class": {"identifier": "ProgramStageObjectBundleHook", "superclass": "extends AbstractObjectBundleHook", "interfaces": "", "fields": [{"original_string": "private final AclService aclService;", "modifier": "private final", "type": "AclService", "declarator": "aclService", "var_name": "aclService"}], "methods": [{"identifier": "ProgramStageObjectBundleHook", "parameters": "( AclService aclService )", "modifiers": "public", "return": "", "signature": " ProgramStageObjectBundleHook( AclService aclService )", "full_signature": "public  ProgramStageObjectBundleHook( AclService aclService )", "class_method_signature": "ProgramStageObjectBundleHook.ProgramStageObjectBundleHook( AclService aclService )", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "( T object, ObjectBundle bundle )", "modifiers": "@Override public", "return": "List<ErrorReport>", "signature": "List<ErrorReport> validate( T object, ObjectBundle bundle )", "full_signature": "@Override public List<ErrorReport> validate( T object, ObjectBundle bundle )", "class_method_signature": "ProgramStageObjectBundleHook.validate( T object, ObjectBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "postCreate", "parameters": "( T object, ObjectBundle bundle )", "modifiers": "@Override public", "return": "void", "signature": "void postCreate( T object, ObjectBundle bundle )", "full_signature": "@Override public void postCreate( T object, ObjectBundle bundle )", "class_method_signature": "ProgramStageObjectBundleHook.postCreate( T object, ObjectBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "updateProgramStageSections", "parameters": "( Session session, ProgramStage programStage )", "modifiers": "private", "return": "void", "signature": "void updateProgramStageSections( Session session, ProgramStage programStage )", "full_signature": "private void updateProgramStageSections( Session session, ProgramStage programStage )", "class_method_signature": "ProgramStageObjectBundleHook.updateProgramStageSections( Session session, ProgramStage programStage )", "testcase": false, "constructor": false}, {"identifier": "validateProgramStageDataElementsAcl", "parameters": "( ProgramStage programStage, ObjectBundle bundle )", "modifiers": "private", "return": "List<ErrorReport>", "signature": "List<ErrorReport> validateProgramStageDataElementsAcl( ProgramStage programStage, ObjectBundle bundle )", "full_signature": "private List<ErrorReport> validateProgramStageDataElementsAcl( ProgramStage programStage, ObjectBundle bundle )", "class_method_signature": "ProgramStageObjectBundleHook.validateProgramStageDataElementsAcl( ProgramStage programStage, ObjectBundle bundle )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/hooks/ProgramStageObjectBundleHook.java"}, "focal_method": {"identifier": "validate", "parameters": "( T object, ObjectBundle bundle )", "modifiers": "@Override public", "return": "List<ErrorReport>", "body": "@Override\n    public <T extends IdentifiableObject> List<ErrorReport> validate( T object, ObjectBundle bundle )\n    {\n        if ( object == null || !object.getClass().isAssignableFrom( ProgramStage.class ) )\n        {\n            return new ArrayList<>();\n        }\n\n        ProgramStage programStage = ( ProgramStage ) object;\n\n        List<ErrorReport> errors = new ArrayList<>();\n\n        if ( programStage.getNextScheduleDate() != null )\n        {\n            DataElement nextScheduleDate = bundle.getPreheat().get( bundle.getPreheatIdentifier(), DataElement.class,\n                programStage.getNextScheduleDate().getUid() );\n\n            if ( !programStage.getDataElements().contains( programStage.getNextScheduleDate() )\n                || nextScheduleDate == null || !nextScheduleDate.getValueType().equals( ValueType.DATE ) )\n            {\n                errors.add( new ErrorReport( ProgramStage.class, ErrorCode.E6001, programStage.getUid(),\n                    programStage.getNextScheduleDate().getUid() ) );\n            }\n        }\n\n        errors.addAll( validateProgramStageDataElementsAcl( programStage, bundle ) );\n\n        return errors;\n    }", "signature": "List<ErrorReport> validate( T object, ObjectBundle bundle )", "full_signature": "@Override public List<ErrorReport> validate( T object, ObjectBundle bundle )", "class_method_signature": "ProgramStageObjectBundleHook.validate( T object, ObjectBundle bundle )", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "getClass", "getNextScheduleDate", "get", "getPreheat", "getPreheatIdentifier", "getUid", "getNextScheduleDate", "contains", "getDataElements", "getNextScheduleDate", "equals", "getValueType", "add", "getUid", "getUid", "getNextScheduleDate", "addAll", "validateProgramStageDataElementsAcl"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}