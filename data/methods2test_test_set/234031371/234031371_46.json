{"test_class": {"identifier": "MessageServiceImplTest", "superclass": "extends RocketMQConsoleTestBase", "interfaces": "", "fields": [{"original_string": "@Resource\n    private MessageService messageService;", "modifier": "@Resource\n    private", "type": "MessageService", "declarator": "messageService", "var_name": "messageService"}, {"original_string": "@Resource\n    private MQAdminExt mqAdminExt;", "modifier": "@Resource\n    private", "type": "MQAdminExt", "declarator": "mqAdminExt", "var_name": "mqAdminExt"}, {"original_string": "private String msgId;", "modifier": "private", "type": "String", "declarator": "msgId", "var_name": "msgId"}], "file": "T4Cloud-Rocketmq-Console/src/test/java/org/apache/rocketmq/console/service/impl/MessageServiceImplTest.java"}, "test_case": {"identifier": "queryMessageByTopic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void queryMessageByTopic() throws Exception {\n        final String messageId = msgId;\n        List<MessageView> messageViewList = null;\n        for (int i = 0; i < 10; i++) {\n            messageViewList = messageService.queryMessageByTopic(TEST_CONSOLE_TOPIC, System.currentTimeMillis() - 100000, System.currentTimeMillis());\n            if (CollectionUtils.isEmpty(messageViewList)) {\n                Thread.sleep(1000);\n                continue;\n            }\n            break;\n        }\n        Assert.assertTrue(CollectionUtils.isNotEmpty(messageViewList));\n        Assert.assertTrue(Lists.transform(messageViewList, new Function<MessageView, String>() {\n            @Override public String apply(MessageView input) {\n                return input.getMsgId();\n            }\n        }).contains(messageId));\n    }", "signature": "void queryMessageByTopic()", "full_signature": "@Test public void queryMessageByTopic()", "class_method_signature": "MessageServiceImplTest.queryMessageByTopic()", "testcase": true, "constructor": false, "invocations": ["queryMessageByTopic", "currentTimeMillis", "currentTimeMillis", "isEmpty", "sleep", "assertTrue", "isNotEmpty", "assertTrue", "contains", "transform", "getMsgId"]}, "focal_class": {"identifier": "MessageServiceImpl", "superclass": "", "interfaces": "implements MessageService", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(MessageServiceImpl.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MessageServiceImpl.class)", "var_name": "logger"}, {"original_string": "private final static int QUERY_MESSAGE_MAX_NUM = 64;", "modifier": "private final static", "type": "int", "declarator": "QUERY_MESSAGE_MAX_NUM = 64", "var_name": "QUERY_MESSAGE_MAX_NUM"}, {"original_string": "@Resource\n    private MQAdminExt mqAdminExt;", "modifier": "@Resource\n    private", "type": "MQAdminExt", "declarator": "mqAdminExt", "var_name": "mqAdminExt"}], "methods": [{"identifier": "viewMessage", "parameters": "(String subject, final String msgId)", "modifiers": "public", "return": "Pair<MessageView, List<MessageTrack>>", "signature": "Pair<MessageView, List<MessageTrack>> viewMessage(String subject, final String msgId)", "full_signature": "public Pair<MessageView, List<MessageTrack>> viewMessage(String subject, final String msgId)", "class_method_signature": "MessageServiceImpl.viewMessage(String subject, final String msgId)", "testcase": false, "constructor": false}, {"identifier": "queryMessageByTopicAndKey", "parameters": "(String topic, String key)", "modifiers": "@Override public", "return": "List<MessageView>", "signature": "List<MessageView> queryMessageByTopicAndKey(String topic, String key)", "full_signature": "@Override public List<MessageView> queryMessageByTopicAndKey(String topic, String key)", "class_method_signature": "MessageServiceImpl.queryMessageByTopicAndKey(String topic, String key)", "testcase": false, "constructor": false}, {"identifier": "queryMessageByTopic", "parameters": "(String topic, final long begin, final long end)", "modifiers": "@Override public", "return": "List<MessageView>", "signature": "List<MessageView> queryMessageByTopic(String topic, final long begin, final long end)", "full_signature": "@Override public List<MessageView> queryMessageByTopic(String topic, final long begin, final long end)", "class_method_signature": "MessageServiceImpl.queryMessageByTopic(String topic, final long begin, final long end)", "testcase": false, "constructor": false}, {"identifier": "messageTrackDetail", "parameters": "(MessageExt msg)", "modifiers": "@Override public", "return": "List<MessageTrack>", "signature": "List<MessageTrack> messageTrackDetail(MessageExt msg)", "full_signature": "@Override public List<MessageTrack> messageTrackDetail(MessageExt msg)", "class_method_signature": "MessageServiceImpl.messageTrackDetail(MessageExt msg)", "testcase": false, "constructor": false}, {"identifier": "consumeMessageDirectly", "parameters": "(String topic, String msgId, String consumerGroup,\n        String clientId)", "modifiers": "@Override public", "return": "ConsumeMessageDirectlyResult", "signature": "ConsumeMessageDirectlyResult consumeMessageDirectly(String topic, String msgId, String consumerGroup,\n        String clientId)", "full_signature": "@Override public ConsumeMessageDirectlyResult consumeMessageDirectly(String topic, String msgId, String consumerGroup,\n        String clientId)", "class_method_signature": "MessageServiceImpl.consumeMessageDirectly(String topic, String msgId, String consumerGroup,\n        String clientId)", "testcase": false, "constructor": false}], "file": "T4Cloud-Rocketmq-Console/src/main/java/org/apache/rocketmq/console/service/impl/MessageServiceImpl.java"}, "focal_method": {"identifier": "queryMessageByTopic", "parameters": "(String topic, final long begin, final long end)", "modifiers": "@Override public", "return": "List<MessageView>", "body": "@Override\n    public List<MessageView> queryMessageByTopic(String topic, final long begin, final long end) {\n        RPCHook rpcHook = null;\n        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer(MixAll.TOOLS_CONSUMER_GROUP, rpcHook);\n        List<MessageView> messageViewList = Lists.newArrayList();\n        try {\n            String subExpression = \"*\";\n            consumer.start();\n            Set<MessageQueue> mqs = consumer.fetchSubscribeMessageQueues(topic);\n            for (MessageQueue mq : mqs) {\n                long minOffset = consumer.searchOffset(mq, begin);\n                long maxOffset = consumer.searchOffset(mq, end);\n                READQ:\n                for (long offset = minOffset; offset <= maxOffset; ) {\n                    try {\n                        if (messageViewList.size() > 2000) {\n                            break;\n                        }\n                        PullResult pullResult = consumer.pull(mq, subExpression, offset, 32);\n                        offset = pullResult.getNextBeginOffset();\n                        switch (pullResult.getPullStatus()) {\n                            case FOUND:\n\n                                List<MessageView> messageViewListByQuery = Lists.transform(pullResult.getMsgFoundList(), new Function<MessageExt, MessageView>() {\n                                    @Override\n                                    public MessageView apply(MessageExt messageExt) {\n                                        messageExt.setBody(null);\n                                        return MessageView.fromMessageExt(messageExt);\n                                    }\n                                });\n                                List<MessageView> filteredList = Lists.newArrayList(Iterables.filter(messageViewListByQuery, new Predicate<MessageView>() {\n                                    @Override\n                                    public boolean apply(MessageView messageView) {\n                                        if (messageView.getStoreTimestamp() < begin || messageView.getStoreTimestamp() > end) {\n                                            logger.info(\"begin={} end={} time not in range {} {}\", begin, end, messageView.getStoreTimestamp(), new Date(messageView.getStoreTimestamp()).toString());\n                                        }\n                                        return messageView.getStoreTimestamp() >= begin && messageView.getStoreTimestamp() <= end;\n                                    }\n                                }));\n                                messageViewList.addAll(filteredList);\n                                break;\n                            case NO_MATCHED_MSG:\n                            case NO_NEW_MSG:\n                            case OFFSET_ILLEGAL:\n                                break READQ;\n                        }\n                    }\n                    catch (Exception e) {\n                        break;\n                    }\n                }\n            }\n            Collections.sort(messageViewList, new Comparator<MessageView>() {\n                @Override\n                public int compare(MessageView o1, MessageView o2) {\n                    if (o1.getStoreTimestamp() - o2.getStoreTimestamp() == 0) {\n                        return 0;\n                    }\n                    return (o1.getStoreTimestamp() > o2.getStoreTimestamp()) ? -1 : 1;\n                }\n            });\n            return messageViewList;\n        }\n        catch (Exception e) {\n            throw Throwables.propagate(e);\n        }\n        finally {\n            consumer.shutdown();\n        }\n    }", "signature": "List<MessageView> queryMessageByTopic(String topic, final long begin, final long end)", "full_signature": "@Override public List<MessageView> queryMessageByTopic(String topic, final long begin, final long end)", "class_method_signature": "MessageServiceImpl.queryMessageByTopic(String topic, final long begin, final long end)", "testcase": false, "constructor": false, "invocations": ["newArrayList", "start", "fetchSubscribeMessageQueues", "searchOffset", "searchOffset", "size", "pull", "getNextBeginOffset", "getPullStatus", "transform", "getMsgFoundList", "setBody", "fromMessageExt", "newArrayList", "filter", "getStoreTimestamp", "getStoreTimestamp", "info", "getStoreTimestamp", "toString", "getStoreTimestamp", "getStoreTimestamp", "getStoreTimestamp", "addAll", "sort", "getStoreTimestamp", "getStoreTimestamp", "getStoreTimestamp", "getStoreTimestamp", "propagate", "shutdown"]}, "repository": {"repo_id": 234031371, "url": "https://github.com/TeaR7/T4CLOUD", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 85544, "license": "licensed"}}