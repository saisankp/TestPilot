{"test_class": {"identifier": "CmdHttpCallerTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "http-client/src/test/java/com/alibaba/csb/sdk/CmdHttpCallerTest.java"}, "test_case": {"identifier": "testCGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCGet() {\n        CmdHttpCaller.main(new String[]{\"-url\", \"http://abc:123?a=b&c=abc\",\n                \"-api\", \"aaa\",\n                \"-version\", \"1.0.0\",\n                \"-method\", \"cget\",\n                \"-ak\", \"ak\",\n                \"-sk\", \"sk\",\n                \"-H\", \"name1:abc1\",\n                \"-D\", \"param1=value1\",\n                \"-sign\", \"com.alibaba.csb.sdk.SampleSignImpl\",\n                \"-verify\", \"com.alibaba.aosp.extension.security.SampleVerifySignImpl\",\n                \"-nonce\"});\n    }", "signature": "void testCGet()", "full_signature": "@Test public void testCGet()", "class_method_signature": "CmdHttpCallerTest.testCGet()", "testcase": true, "constructor": false, "invocations": ["main"]}, "focal_class": {"identifier": "CmdHttpCaller", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SDK_VERSION = \"1.1.5.8\";", "modifier": "private static final", "type": "String", "declarator": "SDK_VERSION = \"1.1.5.8\"", "var_name": "SDK_VERSION"}, {"original_string": "public static Options opt = new Options();", "modifier": "public static", "type": "Options", "declarator": "opt = new Options()", "var_name": "opt"}], "methods": [{"identifier": "isEmpty", "parameters": "(String str)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEmpty(String str)", "full_signature": "private static boolean isEmpty(String str)", "class_method_signature": "CmdHttpCaller.isEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "CmdHttpCaller.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "printKV", "parameters": "(String title, String[] kvs)", "modifiers": "private static", "return": "void", "signature": "void printKV(String title, String[] kvs)", "full_signature": "private static void printKV(String title, String[] kvs)", "class_method_signature": "CmdHttpCaller.printKV(String title, String[] kvs)", "testcase": false, "constructor": false}, {"identifier": "usage", "parameters": "(String message)", "modifiers": "static", "return": "void", "signature": "void usage(String message)", "full_signature": "static void usage(String message)", "class_method_signature": "CmdHttpCaller.usage(String message)", "testcase": false, "constructor": false}], "file": "http-client/src/main/java/com/alibaba/csb/sdk/CmdHttpCaller.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "body": "public static void main(String[] args) {\n        CommandLineParser parser = new DefaultParser();\n\n        Boolean isDebug = false;\n        try {\n            CommandLine commandline = parser.parse(opt, args);\n            if (commandline.getOptions().length == 0 && commandline.getArgs().length > 0) {\n                //use old style cmd line\n                CmdCaller.main(args);\n                return;\n            }\n            if (commandline.hasOption(\"h\")) {\n                usage(null);\n                return;\n            }\n\n            String ak = commandline.getOptionValue(\"ak\");\n            String sk = commandline.getOptionValue(\"sk\");\n            String api = commandline.getOptionValue(\"api\");\n            String version = commandline.getOptionValue(\"version\");\n            Boolean sdkv = commandline.hasOption(\"sdkv\");\n            String method = commandline.getOptionValue(\"method\");\n            String[] headers = commandline.getOptionValues(\"H\");\n            String[] params = commandline.getOptionValues(\"D\");\n            String url = commandline.getOptionValue(\"url\");\n            String proxy = commandline.getOptionValue(\"proxy\");\n            String cbJSON = commandline.getOptionValue(\"cbJSON\");\n            boolean nonce = commandline.hasOption(\"nonce\");\n            String bizIdKey = commandline.getOptionValue(\"bizIdKey\");\n            String bizId = commandline.getOptionValue(\"bizId\");\n            isDebug = commandline.hasOption(\"d\");\n\n            if (sdkv) {\n                Version.version();\n                return;\n            }\n\n            String signImpl = commandline.getOptionValue(\"sign\");\n            String verifySignImpl = commandline.getOptionValue(\"verify\");\n\n            if (isDebug) {\n                System.out.println(\"url=\" + url);\n                System.out.println(\"api=\" + api);\n                System.out.println(\"version=\" + version);\n                System.out.println(\"bizIdKey=\" + bizIdKey);\n                System.out.println(\"bizId=\" + bizId);\n                System.out.println(\"ak=\" + ak);\n                System.out.println(\"sk=\" + sk);\n                System.out.println(\"proxy=\" + proxy);\n                System.out.println(\"nonce=\" + nonce);\n                System.out.println(\"signImpl=\" + signImpl);\n                System.out.println(\"verifySignImpl=\" + verifySignImpl);\n                printKV(\"HTTP Headers\", headers);\n                printKV(\"HTTP Params\", params);\n            }\n\n            if (isEmpty(api)) {\n                usage(MessageHelper.getMessage(\"cli.defparam\", \"-api\"));\n                return;\n            }\n\n            if (isEmpty(version)) {\n                usage(MessageHelper.getMessage(\"cli.defparam\", \"-version\"));\n                return;\n            }\n\n            if (isEmpty(url)) {\n                usage(MessageHelper.getMessage(\"cli.defparam\", \"-url\"));\n                return;\n            }\n\n            if (method == null) {\n                method = \"get\";\n            }\n            HttpParameters.Builder builder = HttpParameters.newBuilder();\n            if (bizIdKey != null && !bizIdKey.trim().equals(\"\")) {\n                HttpCaller.bizIdKey(bizIdKey);\n            }\n            builder.api(api).version(version).method(method).bizId(bizId).requestURL(url).accessKey(ak).secretKey(sk).signImpl(signImpl).verifySignImpl(verifySignImpl);\n\n            if (headers != null) {\n                for (String header : headers) {\n                    String[] kv = header.split(\":\", 2);\n                    if (kv == null || kv.length != 2) {\n                        System.out.println(\"\" + header);\n                        return;\n                    }\n                    builder.putHeaderParamsMap(kv[0], kv[1]);\n                }\n            }\n\n            if (params != null) {\n                for (String param : params) {\n                    String[] kv = param.split(\"=\", 2);\n                    if (kv == null || kv.length != 2) {\n                        System.out.println(MessageHelper.getMessage(\"cli.defh\", param));\n                        return;\n                    }\n                    builder.putParamsMap(kv[0], kv[1]);\n                }\n            }\n\n            if (cbJSON != null) {\n                if (\"cget\".equalsIgnoreCase(method) || \"get\".equalsIgnoreCase(method)) {\n                    System.out.println(MessageHelper.getMessage(\"cli.defpost\"));\n                    return;\n                }\n                if (cbJSON.startsWith(\"'\")) {\n                    System.out.println(MessageHelper.getMessage(\"cli.json.prefix\"));\n                    return;\n                }\n                builder.contentBody(new ContentBody(cbJSON));\n            }\n\n            builder.nonce(nonce);\n\n            if (isDebug) {\n                builder.diagnostic(true); //\u6253\u5370\u8bca\u65ad\u4fe1\u606f\n            }\n\n            boolean curlOnly = false;\n            if (method.toLowerCase().startsWith(\"c\")) {\n                curlOnly = true;\n                HttpCaller.setCurlResponse(true);\n            }\n\n            StringBuffer resHttpHeaders = new StringBuffer();\n            //set http proxy\n            if (proxy != null) {\n                String errMsg = MessageHelper.getMessage(\"cli.errproxy\", proxy);\n                String[] pcs = proxy.split(\":\");\n                if (pcs == null || pcs.length != 2) {\n                    System.out.println(errMsg);\n                    return;\n                }\n                try {\n                    HttpCaller.setProxyHost(pcs[0], Integer.parseInt(pcs[1]), null);\n                } catch (Exception e) {\n                    System.out.println(errMsg);\n                    return;\n                }\n            }\n\n            HttpReturn ret = HttpCaller.invokeReturn(builder.build());\n\n            if (curlOnly) {\n                System.out.println(\"---- curlString = \" + ret.getResponseStr());\n            } else {\n                if (isDebug) {\n                    System.out.println(\"Diagnostic Info:\" + ret.diagnosticInfo);\n                }\n                System.out.println(\"---- response http headers = \" + ret.responseHeaders);\n                System.out.println(\"---- retStr = \" + ret.getResponseStr());\n\n                //call multi-times for stress or flow-ctrl testing\n                int times = Integer.getInteger(\"test.stress.times\", 0);\n                for (int i = 2; i <= times; i++) {\n                    ret = HttpCaller.invokeReturn(builder.build());\n                    System.out.println(\"---- retStr [#\" + i + \"] = \" + ret.getResponseStr());\n                }\n            }\n        } catch (Exception e) {\n            System.out.println(\"-- operation error\uff1a\" + e.getMessage());\n            //if (isDebug)\n            e.printStackTrace(System.out);\n        }\n    }", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "CmdHttpCaller.main(String[] args)", "testcase": false, "constructor": false, "invocations": ["parse", "getOptions", "getArgs", "main", "hasOption", "usage", "getOptionValue", "getOptionValue", "getOptionValue", "getOptionValue", "hasOption", "getOptionValue", "getOptionValues", "getOptionValues", "getOptionValue", "getOptionValue", "getOptionValue", "hasOption", "getOptionValue", "getOptionValue", "hasOption", "version", "getOptionValue", "getOptionValue", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "println", "printKV", "printKV", "isEmpty", "usage", "getMessage", "isEmpty", "usage", "getMessage", "isEmpty", "usage", "getMessage", "newBuilder", "equals", "trim", "bizIdKey", "verifySignImpl", "signImpl", "secretKey", "accessKey", "requestURL", "bizId", "method", "version", "api", "split", "println", "putHeaderParamsMap", "split", "println", "getMessage", "putParamsMap", "equalsIgnoreCase", "equalsIgnoreCase", "println", "getMessage", "startsWith", "println", "getMessage", "contentBody", "nonce", "diagnostic", "startsWith", "toLowerCase", "setCurlResponse", "getMessage", "split", "println", "setProxyHost", "parseInt", "println", "invokeReturn", "build", "println", "getResponseStr", "println", "println", "println", "getResponseStr", "getInteger", "invokeReturn", "build", "println", "getResponseStr", "println", "tMessage()", "printStackTrace"]}, "repository": {"repo_id": 94076429, "url": "https://github.com/aliyun/csb-sdk", "stars": 27, "created": "6/12/2017 9:04:20 AM +00:00", "updates": "2020-01-22T02:25:09+00:00", "fork": "False", "license": "licensed"}}