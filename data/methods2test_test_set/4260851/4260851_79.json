{"test_class": {"identifier": "InsertTest", "superclass": "", "interfaces": "", "fields": [], "file": "DbSetup-core/src/test/java/com/ninja_squad/dbsetup/operation/InsertTest.java"}, "test_case": {"identifier": "valuesFailsWhenMapContainsUnknownColumnName", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void valuesFailsWhenMapContainsUnknownColumnName() {\n        Map<String, Object> map1 = new LinkedHashMap<String, Object>();\n        map1.put(\"c\", \"value of c\");\n        Map<String, Object> map2 = new LinkedHashMap<String, Object>();\n        map2.put(\"b\", \"value of b\");\n        Insert.into(\"A\").values(map1).values(map2);\n    }", "signature": "void valuesFailsWhenMapContainsUnknownColumnName()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void valuesFailsWhenMapContainsUnknownColumnName()", "class_method_signature": "InsertTest.valuesFailsWhenMapContainsUnknownColumnName()", "testcase": true, "constructor": false, "invocations": ["put", "put", "values", "values", "into"]}, "focal_class": {"identifier": "Insert", "superclass": "", "interfaces": "implements Operation", "fields": [{"original_string": "private final String table;", "modifier": "private final", "type": "String", "declarator": "table", "var_name": "table"}, {"original_string": "private final List<String> columnNames;", "modifier": "private final", "type": "List<String>", "declarator": "columnNames", "var_name": "columnNames"}, {"original_string": "private final Map<String, List<Object>> generatedValues;", "modifier": "private final", "type": "Map<String, List<Object>>", "declarator": "generatedValues", "var_name": "generatedValues"}, {"original_string": "private final List<List<?>> rows;", "modifier": "private final", "type": "List<List<?>>", "declarator": "rows", "var_name": "rows"}, {"original_string": "private final boolean metadataUsed;", "modifier": "private final", "type": "boolean", "declarator": "metadataUsed", "var_name": "metadataUsed"}, {"original_string": "private final Map<String, Binder> binders;", "modifier": "private final", "type": "Map<String, Binder>", "declarator": "binders", "var_name": "binders"}], "methods": [{"identifier": "Insert", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " Insert(Builder builder)", "full_signature": "private  Insert(Builder builder)", "class_method_signature": "Insert.Insert(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "generateValues", "parameters": "(Map<String, ValueGenerator<?>> valueGenerators,\n                                                      int count)", "modifiers": "private", "return": "Map<String, List<Object>>", "signature": "Map<String, List<Object>> generateValues(Map<String, ValueGenerator<?>> valueGenerators,\n                                                      int count)", "full_signature": "private Map<String, List<Object>> generateValues(Map<String, ValueGenerator<?>> valueGenerators,\n                                                      int count)", "class_method_signature": "Insert.generateValues(Map<String, ValueGenerator<?>> valueGenerators,\n                                                      int count)", "testcase": false, "constructor": false}, {"identifier": "generateValues", "parameters": "(ValueGenerator<?> valueGenerator, int count)", "modifiers": "private", "return": "List<Object>", "signature": "List<Object> generateValues(ValueGenerator<?> valueGenerator, int count)", "full_signature": "private List<Object> generateValues(ValueGenerator<?> valueGenerator, int count)", "class_method_signature": "Insert.generateValues(ValueGenerator<?> valueGenerator, int count)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Connection connection, BinderConfiguration configuration)", "modifiers": "@edu.umd.cs.findbugs.annotations.SuppressWarnings( value = \"SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING\", justification = \"The point here is precisely to compose a SQL String from column names coming from the user\") @Override public", "return": "void", "signature": "void execute(Connection connection, BinderConfiguration configuration)", "full_signature": "@edu.umd.cs.findbugs.annotations.SuppressWarnings( value = \"SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING\", justification = \"The point here is precisely to compose a SQL String from column names coming from the user\") @Override public void execute(Connection connection, BinderConfiguration configuration)", "class_method_signature": "Insert.execute(Connection connection, BinderConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "getRowCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowCount()", "full_signature": "public int getRowCount()", "class_method_signature": "Insert.getRowCount()", "testcase": false, "constructor": false}, {"identifier": "generateSqlQuery", "parameters": "(List<String> allColumnNames)", "modifiers": "private", "return": "String", "signature": "String generateSqlQuery(List<String> allColumnNames)", "full_signature": "private String generateSqlQuery(List<String> allColumnNames)", "class_method_signature": "Insert.generateSqlQuery(List<String> allColumnNames)", "testcase": false, "constructor": false}, {"identifier": "initializeBinders", "parameters": "(PreparedStatement stmt,\n                                                  List<String> allColumnNames,\n                                                  BinderConfiguration configuration)", "modifiers": "private", "return": "Map<String, Binder>", "signature": "Map<String, Binder> initializeBinders(PreparedStatement stmt,\n                                                  List<String> allColumnNames,\n                                                  BinderConfiguration configuration)", "full_signature": "private Map<String, Binder> initializeBinders(PreparedStatement stmt,\n                                                  List<String> allColumnNames,\n                                                  BinderConfiguration configuration)", "class_method_signature": "Insert.initializeBinders(PreparedStatement stmt,\n                                                  List<String> allColumnNames,\n                                                  BinderConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Insert.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Insert.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Insert.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "into", "parameters": "(@Nonnull String table)", "modifiers": "public static", "return": "Builder", "signature": "Builder into(@Nonnull String table)", "full_signature": "public static Builder into(@Nonnull String table)", "class_method_signature": "Insert.into(@Nonnull String table)", "testcase": false, "constructor": false}], "file": "DbSetup-core/src/main/java/com/ninja_squad/dbsetup/operation/Insert.java"}, "focal_method": {"identifier": "into", "parameters": "(@Nonnull String table)", "modifiers": "public static", "return": "Builder", "body": "public static Builder into(@Nonnull String table) {\n        Preconditions.checkNotNull(table, \"table may not be null\");\n        return new Builder(table);\n    }", "signature": "Builder into(@Nonnull String table)", "full_signature": "public static Builder into(@Nonnull String table)", "class_method_signature": "Insert.into(@Nonnull String table)", "testcase": false, "constructor": false, "invocations": ["checkNotNull"]}, "repository": {"repo_id": 4260851, "url": "https://github.com/Ninja-Squad/DbSetup", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 183, "size": 1379, "license": "licensed"}}