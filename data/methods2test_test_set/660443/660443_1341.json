{"test_class": {"identifier": "GeometricDoubleBondEncoderFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/stereo/GeometricDoubleBondEncoderFactoryTest.java"}, "test_case": {"identifier": "testGeometric_2D", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGeometric_2D() throws Exception {\n        IAtom l = mock(IAtom.class); // 0\n        IAtom r = mock(IAtom.class); // 1\n        IAtom l1 = mock(IAtom.class); // 2\n        IAtom l2 = mock(IAtom.class); // 3\n        IAtom r1 = mock(IAtom.class); // 4\n        IAtom r2 = mock(IAtom.class); // 5\n\n        IAtomContainer m = mock(IAtomContainer.class);\n\n        when(m.getAtom(0)).thenReturn(l);\n        when(m.getAtom(1)).thenReturn(r);\n        when(m.getAtom(2)).thenReturn(l1);\n        when(m.getAtom(3)).thenReturn(l2);\n        when(m.getAtom(4)).thenReturn(r1);\n        when(m.getAtom(5)).thenReturn(r2);\n\n        when(l.getPoint2d()).thenReturn(new Point2d());\n        when(r.getPoint2d()).thenReturn(new Point2d());\n        when(l1.getPoint2d()).thenReturn(new Point2d());\n        when(l2.getPoint2d()).thenReturn(new Point2d());\n        when(r1.getPoint2d()).thenReturn(new Point2d());\n        when(r2.getPoint2d()).thenReturn(new Point2d());\n\n        GeometricParity p = geometric(m, 0, 1, 2, 3, 4, 5);\n        assertTrue(p instanceof DoubleBond2DParity);\n    }", "signature": "void testGeometric_2D()", "full_signature": "@Test public void testGeometric_2D()", "class_method_signature": "GeometricDoubleBondEncoderFactoryTest.testGeometric_2D()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getPoint2d", "thenReturn", "when", "getPoint2d", "thenReturn", "when", "getPoint2d", "thenReturn", "when", "getPoint2d", "thenReturn", "when", "getPoint2d", "thenReturn", "when", "getPoint2d", "geometric", "assertTrue"]}, "focal_class": {"identifier": "GeometricDoubleBondEncoderFactory", "superclass": "", "interfaces": "implements StereoEncoderFactory", "fields": [], "methods": [{"identifier": "create", "parameters": "(IAtomContainer container, int[][] graph)", "modifiers": "@Override public", "return": "StereoEncoder", "signature": "StereoEncoder create(IAtomContainer container, int[][] graph)", "full_signature": "@Override public StereoEncoder create(IAtomContainer container, int[][] graph)", "class_method_signature": "GeometricDoubleBondEncoderFactory.create(IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "newEncoder", "parameters": "(IAtomContainer container, IAtom left, IAtom leftParent, IAtom right,\n            IAtom rightParent, int[][] graph)", "modifiers": "static", "return": "StereoEncoder", "signature": "StereoEncoder newEncoder(IAtomContainer container, IAtom left, IAtom leftParent, IAtom right,\n            IAtom rightParent, int[][] graph)", "full_signature": "static StereoEncoder newEncoder(IAtomContainer container, IAtom left, IAtom leftParent, IAtom right,\n            IAtom rightParent, int[][] graph)", "class_method_signature": "GeometricDoubleBondEncoderFactory.newEncoder(IAtomContainer container, IAtom left, IAtom leftParent, IAtom right,\n            IAtom rightParent, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "geometric", "parameters": "(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "modifiers": "static", "return": "GeometricParity", "signature": "GeometricParity geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "full_signature": "static GeometricParity geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "class_method_signature": "GeometricDoubleBondEncoderFactory.geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "testcase": false, "constructor": false}, {"identifier": "permutation", "parameters": "(int[] neighbors)", "modifiers": "static", "return": "PermutationParity", "signature": "PermutationParity permutation(int[] neighbors)", "full_signature": "static PermutationParity permutation(int[] neighbors)", "class_method_signature": "GeometricDoubleBondEncoderFactory.permutation(int[] neighbors)", "testcase": false, "constructor": false}, {"identifier": "moveToBack", "parameters": "(int[] neighbors, int v)", "modifiers": "static", "return": "int[]", "signature": "int[] moveToBack(int[] neighbors, int v)", "full_signature": "static int[] moveToBack(int[] neighbors, int v)", "class_method_signature": "GeometricDoubleBondEncoderFactory.moveToBack(int[] neighbors, int v)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(IAtom atom, List<IBond> bonds)", "modifiers": "static", "return": "boolean", "signature": "boolean accept(IAtom atom, List<IBond> bonds)", "full_signature": "static boolean accept(IAtom atom, List<IBond> bonds)", "class_method_signature": "GeometricDoubleBondEncoderFactory.accept(IAtom atom, List<IBond> bonds)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/stereo/GeometricDoubleBondEncoderFactory.java"}, "focal_method": {"identifier": "geometric", "parameters": "(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "modifiers": "static", "return": "GeometricParity", "body": "static GeometricParity geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2) {\n\n        // we need all points for 2D as they may be skewed, i.e.\n        //\n        // \\\n        //  C=C\n        //    |\\\n        //    C H\n        Point2d l2d = mol.getAtom(l).getPoint2d();\n        Point2d r2d = mol.getAtom(r).getPoint2d();\n        Point2d l12d = mol.getAtom(l1).getPoint2d();\n        Point2d l22d = mol.getAtom(l2).getPoint2d();\n        Point2d r12d = mol.getAtom(r1).getPoint2d();\n        Point2d r22d = mol.getAtom(r2).getPoint2d();\n\n        if (l2d != null && r2d != null && l12d != null && l22d != null && r12d != null && r22d != null) {\n            return new DoubleBond2DParity(l2d, r2d, l12d, l22d, r12d, r22d);\n        }\n\n        // we only need the first point, we presume the 3D angles are all correct\n        Point3d l3d = mol.getAtom(l).getPoint3d();\n        Point3d r3d = mol.getAtom(r).getPoint3d();\n        Point3d l13d = mol.getAtom(l1).getPoint3d();\n        Point3d r13d = mol.getAtom(r1).getPoint3d();\n        if (l3d != null && r3d != null && l13d != null && r13d != null)\n            return new DoubleBond3DParity(l3d, r3d, l13d, r13d);\n\n        return null;\n\n    }", "signature": "GeometricParity geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "full_signature": "static GeometricParity geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "class_method_signature": "GeometricDoubleBondEncoderFactory.geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "testcase": false, "constructor": false, "invocations": ["getPoint2d", "getAtom", "getPoint2d", "getAtom", "getPoint2d", "getAtom", "getPoint2d", "getAtom", "getPoint2d", "getAtom", "getPoint2d", "getAtom", "getPoint3d", "getAtom", "getPoint3d", "getAtom", "getPoint3d", "getAtom", "getPoint3d", "getAtom"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}