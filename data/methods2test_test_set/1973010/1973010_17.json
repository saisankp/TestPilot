{"test_class": {"identifier": "ClientTest", "superclass": "", "interfaces": "", "fields": [], "file": "culvert-main/src/test/java/com/bah/culvert/ClientTest.java"}, "test_case": {"identifier": "testGetIndexMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetIndexMap() throws Exception {\n    MockIndex ix1 = new MockIndex(\"foo\", 0, true, \"a\".getBytes(),\n        \"b\".getBytes(), \"c\", \"d\");\n    MockIndex ix2 = new MockIndex(\"bar\", 0, true, \"e\".getBytes(),\n        \"f\".getBytes(), \"g\", \"h\");\n    Configuration conf = CConfiguration.getDefault();\n    Client client = new Client(conf);\n    client.addIndex(ix1);\n    client.addIndex(ix2);\n    client.getIndexMap();\n    // Assert.assertNotNull(client.getIndicesForColumn(\"c\", \"a\".getBytes(),\n    // \"b\".getBytes()));\n  }", "signature": "void testGetIndexMap()", "full_signature": "@Test public void testGetIndexMap()", "class_method_signature": "ClientTest.testGetIndexMap()", "testcase": true, "constructor": false, "invocations": ["getBytes", "getBytes", "getBytes", "getBytes", "getDefault", "addIndex", "addIndex", "getIndexMap"]}, "focal_class": {"identifier": "Client", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DATABASE_ADAPTER_CONF_KEY = \"culvert.database.adapter\";", "modifier": "private static final", "type": "String", "declarator": "DATABASE_ADAPTER_CONF_KEY = \"culvert.database.adapter\"", "var_name": "DATABASE_ADAPTER_CONF_KEY"}, {"original_string": "private static final String INDEXES_CONF_KEY = \"culvert.indices.names\";", "modifier": "private static final", "type": "String", "declarator": "INDEXES_CONF_KEY = \"culvert.indices.names\"", "var_name": "INDEXES_CONF_KEY"}, {"original_string": "private static final String DATABASE_ADAPTER_CONF_PREFIX = \"culvert.database.conf\";", "modifier": "private static final", "type": "String", "declarator": "DATABASE_ADAPTER_CONF_PREFIX = \"culvert.database.conf\"", "var_name": "DATABASE_ADAPTER_CONF_PREFIX"}, {"original_string": "private final Configuration configuration;", "modifier": "private final", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}], "methods": [{"identifier": "Client", "parameters": "(Configuration conf)", "modifiers": "public", "return": "", "signature": " Client(Configuration conf)", "full_signature": "public  Client(Configuration conf)", "class_method_signature": "Client.Client(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(String tableName, Put put)", "modifiers": "public", "return": "void", "signature": "void put(String tableName, Put put)", "full_signature": "public void put(String tableName, Put put)", "class_method_signature": "Client.put(String tableName, Put put)", "testcase": false, "constructor": false}, {"identifier": "getIndexMap", "parameters": "()", "modifiers": "public", "return": "HashMap<String, Index>", "signature": "HashMap<String, Index> getIndexMap()", "full_signature": "public HashMap<String, Index> getIndexMap()", "class_method_signature": "Client.getIndexMap()", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(Constraint query)", "modifiers": "public", "return": "Iterator<Result>", "signature": "Iterator<Result> query(Constraint query)", "full_signature": "public Iterator<Result> query(Constraint query)", "class_method_signature": "Client.query(Constraint query)", "testcase": false, "constructor": false}, {"identifier": "indexClassConfKey", "parameters": "(String indexName)", "modifiers": "private static", "return": "String", "signature": "String indexClassConfKey(String indexName)", "full_signature": "private static String indexClassConfKey(String indexName)", "class_method_signature": "Client.indexClassConfKey(String indexName)", "testcase": false, "constructor": false}, {"identifier": "indexConfPrefix", "parameters": "(String indexName)", "modifiers": "private static", "return": "String", "signature": "String indexConfPrefix(String indexName)", "full_signature": "private static String indexConfPrefix(String indexName)", "class_method_signature": "Client.indexConfPrefix(String indexName)", "testcase": false, "constructor": false}, {"identifier": "getIndices", "parameters": "()", "modifiers": "public", "return": "Index[]", "signature": "Index[] getIndices()", "full_signature": "public Index[] getIndices()", "class_method_signature": "Client.getIndices()", "testcase": false, "constructor": false}, {"identifier": "getIndicesForTable", "parameters": "(String tableName)", "modifiers": "public", "return": "Index[]", "signature": "Index[] getIndicesForTable(String tableName)", "full_signature": "public Index[] getIndicesForTable(String tableName)", "class_method_signature": "Client.getIndicesForTable(String tableName)", "testcase": false, "constructor": false}, {"identifier": "getIndexByName", "parameters": "(String string)", "modifiers": "public", "return": "Index", "signature": "Index getIndexByName(String string)", "full_signature": "public Index getIndexByName(String string)", "class_method_signature": "Client.getIndexByName(String string)", "testcase": false, "constructor": false}, {"identifier": "getIndicesForColumn", "parameters": "(String table, byte[] family,\n      byte[] qualifier)", "modifiers": "public", "return": "Index[]", "signature": "Index[] getIndicesForColumn(String table, byte[] family,\n      byte[] qualifier)", "full_signature": "public Index[] getIndicesForColumn(String table, byte[] family,\n      byte[] qualifier)", "class_method_signature": "Client.getIndicesForColumn(String table, byte[] family,\n      byte[] qualifier)", "testcase": false, "constructor": false}, {"identifier": "addIndex", "parameters": "(Index index)", "modifiers": "public", "return": "void", "signature": "void addIndex(Index index)", "full_signature": "public void addIndex(Index index)", "class_method_signature": "Client.addIndex(Index index)", "testcase": false, "constructor": false}, {"identifier": "getConf", "parameters": "()", "modifiers": "public", "return": "Configuration", "signature": "Configuration getConf()", "full_signature": "public Configuration getConf()", "class_method_signature": "Client.getConf()", "testcase": false, "constructor": false}, {"identifier": "setDatabase", "parameters": "(DatabaseAdapter db, Configuration conf)", "modifiers": "public static", "return": "void", "signature": "void setDatabase(DatabaseAdapter db, Configuration conf)", "full_signature": "public static void setDatabase(DatabaseAdapter db, Configuration conf)", "class_method_signature": "Client.setDatabase(DatabaseAdapter db, Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getDatabaseAdapter", "parameters": "()", "modifiers": "private", "return": "DatabaseAdapter", "signature": "DatabaseAdapter getDatabaseAdapter()", "full_signature": "private DatabaseAdapter getDatabaseAdapter()", "class_method_signature": "Client.getDatabaseAdapter()", "testcase": false, "constructor": false}, {"identifier": "setDatabaseAdapter", "parameters": "(Configuration conf,\n      Class<? extends DatabaseAdapter> adapterClass)", "modifiers": "public static", "return": "void", "signature": "void setDatabaseAdapter(Configuration conf,\n      Class<? extends DatabaseAdapter> adapterClass)", "full_signature": "public static void setDatabaseAdapter(Configuration conf,\n      Class<? extends DatabaseAdapter> adapterClass)", "class_method_signature": "Client.setDatabaseAdapter(Configuration conf,\n      Class<? extends DatabaseAdapter> adapterClass)", "testcase": false, "constructor": false}, {"identifier": "tableExists", "parameters": "(String tableName)", "modifiers": "public", "return": "boolean", "signature": "boolean tableExists(String tableName)", "full_signature": "public boolean tableExists(String tableName)", "class_method_signature": "Client.tableExists(String tableName)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean verify()", "full_signature": "public boolean verify()", "class_method_signature": "Client.verify()", "testcase": false, "constructor": false}], "file": "culvert-main/src/main/java/com/bah/culvert/Client.java"}, "focal_method": {"identifier": "getIndexMap", "parameters": "()", "modifiers": "public", "return": "HashMap<String, Index>", "body": "public HashMap<String, Index> getIndexMap() {\n    HashMap<String, Index> indexMap = new HashMap<String, Index>();\n\n    for (Index index : getIndices()) {\n      indexMap.put(index.getName(), index);\n    }\n\n    return indexMap;\n  }", "signature": "HashMap<String, Index> getIndexMap()", "full_signature": "public HashMap<String, Index> getIndexMap()", "class_method_signature": "Client.getIndexMap()", "testcase": false, "constructor": false, "invocations": ["getIndices", "put", "getName"]}, "repository": {"repo_id": 1973010, "url": "https://github.com/booz-allen-hamilton/culvert", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 373, "license": "licensed"}}