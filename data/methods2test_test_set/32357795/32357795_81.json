{"test_class": {"identifier": "DuplicateSuppressionUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected TopicMapIF        topicmap;", "modifier": "protected", "type": "TopicMapIF", "declarator": "topicmap", "var_name": "topicmap"}, {"original_string": "protected TopicMapBuilderIF builder;", "modifier": "protected", "type": "TopicMapBuilderIF", "declarator": "builder", "var_name": "builder"}], "file": "ontopia-engine/src/test/java/net/ontopia/topicmaps/utils/DuplicateSuppressionUtilsTest.java"}, "test_case": {"identifier": "testAssociationRemoval", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAssociationRemoval() {\n    TopicIF type = builder.makeTopic();\n    TopicIF role1 = builder.makeTopic();\n    TopicIF role2 = builder.makeTopic();\n    TopicIF player1 = builder.makeTopic();\n    TopicIF player2 = builder.makeTopic();\n    \n    AssociationIF assoc = builder.makeAssociation(type);\n    AssociationRoleIF role = builder.makeAssociationRole(assoc, role1, player1);\n    role = builder.makeAssociationRole(assoc, role2, player2);\n\n    assoc = builder.makeAssociation(type);\n    role = builder.makeAssociationRole(assoc, role1, player1);\n    role = builder.makeAssociationRole(assoc, role2, player2);\n\n    DuplicateSuppressionUtils.removeDuplicates(topicmap);\n\n    Assert.assertTrue(\"duplicate association was not removed\",\n           topicmap.getAssociations().size() == 1);\n  }", "signature": "void testAssociationRemoval()", "full_signature": "@Test public void testAssociationRemoval()", "class_method_signature": "DuplicateSuppressionUtilsTest.testAssociationRemoval()", "testcase": true, "constructor": false, "invocations": ["makeTopic", "makeTopic", "makeTopic", "makeTopic", "makeTopic", "makeAssociation", "makeAssociationRole", "makeAssociationRole", "makeAssociation", "makeAssociationRole", "makeAssociationRole", "removeDuplicates", "assertTrue", "size", "getAssociations"]}, "focal_class": {"identifier": "DuplicateSuppressionUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "removeDuplicates", "parameters": "(TopicMapIF topicmap)", "modifiers": "public static", "return": "void", "signature": "void removeDuplicates(TopicMapIF topicmap)", "full_signature": "public static void removeDuplicates(TopicMapIF topicmap)", "class_method_signature": "DuplicateSuppressionUtils.removeDuplicates(TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "prefetchTopics", "parameters": "(TopicMapIF topicmap, Collection<TopicIF> batch)", "modifiers": "private static", "return": "void", "signature": "void prefetchTopics(TopicMapIF topicmap, Collection<TopicIF> batch)", "full_signature": "private static void prefetchTopics(TopicMapIF topicmap, Collection<TopicIF> batch)", "class_method_signature": "DuplicateSuppressionUtils.prefetchTopics(TopicMapIF topicmap, Collection<TopicIF> batch)", "testcase": false, "constructor": false}, {"identifier": "prefetchAssociations", "parameters": "(TopicMapIF topicmap, Collection<AssociationIF> batch)", "modifiers": "private static", "return": "void", "signature": "void prefetchAssociations(TopicMapIF topicmap, Collection<AssociationIF> batch)", "full_signature": "private static void prefetchAssociations(TopicMapIF topicmap, Collection<AssociationIF> batch)", "class_method_signature": "DuplicateSuppressionUtils.prefetchAssociations(TopicMapIF topicmap, Collection<AssociationIF> batch)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicates", "parameters": "(TopicIF topic)", "modifiers": "public static", "return": "void", "signature": "void removeDuplicates(TopicIF topic)", "full_signature": "public static void removeDuplicates(TopicIF topic)", "class_method_signature": "DuplicateSuppressionUtils.removeDuplicates(TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicateTopicNames", "parameters": "(Collection<TopicNameIF> basenames)", "modifiers": "public static", "return": "void", "signature": "void removeDuplicateTopicNames(Collection<TopicNameIF> basenames)", "full_signature": "public static void removeDuplicateTopicNames(Collection<TopicNameIF> basenames)", "class_method_signature": "DuplicateSuppressionUtils.removeDuplicateTopicNames(Collection<TopicNameIF> basenames)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicateOccurrences", "parameters": "(Collection<OccurrenceIF> occurs)", "modifiers": "public static", "return": "void", "signature": "void removeDuplicateOccurrences(Collection<OccurrenceIF> occurs)", "full_signature": "public static void removeDuplicateOccurrences(Collection<OccurrenceIF> occurs)", "class_method_signature": "DuplicateSuppressionUtils.removeDuplicateOccurrences(Collection<OccurrenceIF> occurs)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicateAssociations", "parameters": "(Collection<AssociationIF> assocs)", "modifiers": "public static", "return": "void", "signature": "void removeDuplicateAssociations(Collection<AssociationIF> assocs)", "full_signature": "public static void removeDuplicateAssociations(Collection<AssociationIF> assocs)", "class_method_signature": "DuplicateSuppressionUtils.removeDuplicateAssociations(Collection<AssociationIF> assocs)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicates", "parameters": "(TopicNameIF basename)", "modifiers": "public static", "return": "void", "signature": "void removeDuplicates(TopicNameIF basename)", "full_signature": "public static void removeDuplicates(TopicNameIF basename)", "class_method_signature": "DuplicateSuppressionUtils.removeDuplicates(TopicNameIF basename)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicates", "parameters": "(AssociationIF assoc)", "modifiers": "public static", "return": "void", "signature": "void removeDuplicates(AssociationIF assoc)", "full_signature": "public static void removeDuplicates(AssociationIF assoc)", "class_method_signature": "DuplicateSuppressionUtils.removeDuplicates(AssociationIF assoc)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicateAssociations", "parameters": "(TopicIF topic)", "modifiers": "public static", "return": "Map<AssociationIF, Set<AssociationIF>>", "signature": "Map<AssociationIF, Set<AssociationIF>> removeDuplicateAssociations(TopicIF topic)", "full_signature": "public static Map<AssociationIF, Set<AssociationIF>> removeDuplicateAssociations(TopicIF topic)", "class_method_signature": "DuplicateSuppressionUtils.removeDuplicateAssociations(TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "copySourceLocators", "parameters": "(TMObjectIF target, TMObjectIF source)", "modifiers": "private static", "return": "void", "signature": "void copySourceLocators(TMObjectIF target, TMObjectIF source)", "full_signature": "private static void copySourceLocators(TMObjectIF target, TMObjectIF source)", "class_method_signature": "DuplicateSuppressionUtils.copySourceLocators(TMObjectIF target, TMObjectIF source)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/topicmaps/utils/DuplicateSuppressionUtils.java"}, "focal_method": {"identifier": "removeDuplicates", "parameters": "(TopicMapIF topicmap)", "modifiers": "public static", "return": "void", "body": "public static void removeDuplicates(TopicMapIF topicmap) {\n\n    // remove duplicate topic characteristics\n    int batchSize = 50;\n    Iterator<TopicIF> it = topicmap.getTopics().iterator();\n    while (it.hasNext()) {\n      List<TopicIF> batch = CollectionUtils.nextBatch(it, batchSize);\n      prefetchTopics(topicmap, batch);\n      Iterator<TopicIF> iter = batch.iterator();\n      while (iter.hasNext()) {\n        removeDuplicates(iter.next());\n      }\n    }\n    \n    // remove duplicate associations (do one association type at a time)\n    ClassInstanceIndexIF cindex = (ClassInstanceIndexIF)topicmap.getIndex(\"net.ontopia.topicmaps.core.index.ClassInstanceIndexIF\");\n    Collection<AssociationIF> assocs;\n    Iterator<TopicIF> atypes = new ArrayList<TopicIF>(cindex.getAssociationTypes()).iterator();\n    while (atypes.hasNext()) {\n      TopicIF atype = atypes.next();\n      assocs = cindex.getAssociations(atype);\n      if (!assocs.isEmpty())\n        removeDuplicateAssociations(assocs);\n    }\n    // remove duplicate untyped associations\n    assocs = cindex.getAssociations(null);\n    if (!assocs.isEmpty())\n      removeDuplicateAssociations(assocs);\n  }", "signature": "void removeDuplicates(TopicMapIF topicmap)", "full_signature": "public static void removeDuplicates(TopicMapIF topicmap)", "class_method_signature": "DuplicateSuppressionUtils.removeDuplicates(TopicMapIF topicmap)", "testcase": false, "constructor": false, "invocations": ["iterator", "getTopics", "hasNext", "nextBatch", "prefetchTopics", "iterator", "hasNext", "removeDuplicates", "next", "getIndex", "iterator", "getAssociationTypes", "hasNext", "next", "getAssociations", "isEmpty", "removeDuplicateAssociations", "getAssociations", "isEmpty", "removeDuplicateAssociations"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}