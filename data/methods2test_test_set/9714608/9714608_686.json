{"test_class": {"identifier": "EvadingAlgorithmTest", "superclass": "extends AbstractMathTestCase", "interfaces": "", "fields": [{"original_string": "private FleeingAlgorithm flee;", "modifier": "private", "type": "FleeingAlgorithm", "declarator": "flee", "var_name": "flee"}, {"original_string": "private EvadingAlgorithm evade;", "modifier": "private", "type": "EvadingAlgorithm", "declarator": "evade", "var_name": "evade"}], "file": "advanced/agentmotion/src/test/java/org/arakhne/afc/agentmotion/common/EvadingAlgorithmTest.java"}, "test_case": {"identifier": "calculate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void calculate() {\n\t\tassertFpVectorEquals(-2.82843, -2.82843, this.evade.calculate(new Point2d(1, 2),  3, 4, new Point2d(6, 5),\n\t\t\t\tnew Vector2d(7, 8)));\n\t}", "signature": "void calculate()", "full_signature": "@Test public void calculate()", "class_method_signature": "EvadingAlgorithmTest.calculate()", "testcase": true, "constructor": false, "invocations": ["assertFpVectorEquals", "calculate"]}, "focal_class": {"identifier": "EvadingAlgorithm", "superclass": "extends AbstractTargetPositionPredictionAlgorithm", "interfaces": "implements EvadingMotionAlgorithm", "fields": [{"original_string": "private static final long serialVersionUID = -8318025671219960417L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8318025671219960417L", "var_name": "serialVersionUID"}, {"original_string": "protected final FleeingMotionAlgorithm fleeing;", "modifier": "protected final", "type": "FleeingMotionAlgorithm", "declarator": "fleeing", "var_name": "fleeing"}], "methods": [{"identifier": "EvadingAlgorithm", "parameters": "(FleeingMotionAlgorithm fleeing, double predictionDuration)", "modifiers": "public", "return": "", "signature": " EvadingAlgorithm(FleeingMotionAlgorithm fleeing, double predictionDuration)", "full_signature": "public  EvadingAlgorithm(FleeingMotionAlgorithm fleeing, double predictionDuration)", "class_method_signature": "EvadingAlgorithm.EvadingAlgorithm(FleeingMotionAlgorithm fleeing, double predictionDuration)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Pure @Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Pure @Override public boolean equals(Object obj)", "class_method_signature": "EvadingAlgorithm.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Pure @Override public int hashCode()", "class_method_signature": "EvadingAlgorithm.hashCode()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Pure @Override public", "return": "EvadingAlgorithm", "signature": "EvadingAlgorithm clone()", "full_signature": "@Pure @Override public EvadingAlgorithm clone()", "class_method_signature": "EvadingAlgorithm.clone()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> targetPosition, Vector2D<?, ?> targetLinearMotion)", "modifiers": "@Override public", "return": "Vector2D<?, ?>", "signature": "Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> targetPosition, Vector2D<?, ?> targetLinearMotion)", "full_signature": "@Override public Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> targetPosition, Vector2D<?, ?> targetLinearMotion)", "class_method_signature": "EvadingAlgorithm.calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> targetPosition, Vector2D<?, ?> targetLinearMotion)", "testcase": false, "constructor": false}], "file": "advanced/agentmotion/src/main/java/org/arakhne/afc/agentmotion/common/EvadingAlgorithm.java"}, "focal_method": {"identifier": "calculate", "parameters": "(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> targetPosition, Vector2D<?, ?> targetLinearMotion)", "modifiers": "@Override public", "return": "Vector2D<?, ?>", "body": "@Override\n\tpublic Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> targetPosition, Vector2D<?, ?> targetLinearMotion) {\n\t\treturn this.fleeing.calculate(position, linearSpeed, maxLinear,\n\t\t\t\tpredictTargetPosition(targetPosition, targetLinearMotion));\n\t}", "signature": "Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> targetPosition, Vector2D<?, ?> targetLinearMotion)", "full_signature": "@Override public Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> targetPosition, Vector2D<?, ?> targetLinearMotion)", "class_method_signature": "EvadingAlgorithm.calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> targetPosition, Vector2D<?, ?> targetLinearMotion)", "testcase": false, "constructor": false, "invocations": ["calculate", "predictTargetPosition"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}