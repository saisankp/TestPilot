{"test_class": {"identifier": "VenServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Long start = System.currentTimeMillis();", "modifier": "private", "type": "Long", "declarator": "start = System.currentTimeMillis()", "var_name": "start"}, {"original_string": "@Resource\n\tprivate VenService venService;", "modifier": "@Resource\n\tprivate", "type": "VenService", "declarator": "venService", "var_name": "venService"}, {"original_string": "@Resource\n\tprivate VenResourceService venResourceService;", "modifier": "@Resource\n\tprivate", "type": "VenResourceService", "declarator": "venResourceService", "var_name": "venResourceService"}, {"original_string": "@Resource\n\tprivate VenMarketContextService venMarketContextService;", "modifier": "@Resource\n\tprivate", "type": "VenMarketContextService", "declarator": "venMarketContextService", "var_name": "venMarketContextService"}, {"original_string": "@Resource\n\tprivate VenGroupService venGroupService;", "modifier": "@Resource\n\tprivate", "type": "VenGroupService", "declarator": "venGroupService", "var_name": "venGroupService"}, {"original_string": "@Resource\n\tprivate DemandResponseEventService demandResponseEventService;", "modifier": "@Resource\n\tprivate", "type": "DemandResponseEventService", "declarator": "demandResponseEventService", "var_name": "demandResponseEventService"}], "file": "OpenADRServerVTNCommon/src/test/java/com/avob/openadr/server/common/vtn/service/VenServiceTest.java"}, "test_case": {"identifier": "prepareTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void prepareTest() {\n\t\tString username = \"ven1\";\n\t\tVen prepare = venService.prepare(username);\n\t\tassertNotNull(prepare);\n\t\tassertNull(prepare.getId());\n\t\tassertNull(prepare.getBasicPassword());\n\t\tassertNull(prepare.getDigestPassword());\n\t\tassertEquals(username, prepare.getUsername());\n\n\t\tvenService.save(prepare);\n\t\tassertNotNull(prepare);\n\t\tassertNotNull(prepare.getId());\n\t\tassertNull(prepare.getBasicPassword());\n\t\tassertNull(prepare.getDigestPassword());\n\t\tassertEquals(username, prepare.getUsername());\n\n\t\tvenService.delete(prepare);\n\n\t\tprepare = venService.prepare(username, \"ven1\");\n\t\tassertNotNull(prepare);\n\t\tassertNull(prepare.getId());\n\t\tassertNotNull(prepare.getBasicPassword());\n\t\tassertNotNull(prepare.getDigestPassword());\n\t\tassertEquals(username, prepare.getUsername());\n\n\t\tString profil = \"20a\";\n\t\tString transport = \"http\";\n\t\tVenCreateDto dto = new VenCreateDto();\n\t\tdto.setUsername(username);\n\t\tdto.setPassword(\"ven1\");\n\t\tdto.setOadrProfil(profil);\n\t\tdto.setTransport(transport);\n\n\t\tprepare = venService.prepare(dto);\n\t\tassertNotNull(prepare);\n\t\tassertNull(prepare.getId());\n\t\tassertNotNull(prepare.getBasicPassword());\n\t\tassertNotNull(prepare.getDigestPassword());\n\t\tassertEquals(username, prepare.getUsername());\n\t\tassertEquals(profil, prepare.getOadrProfil());\n\t\tassertEquals(transport, prepare.getTransport());\n\n\t}", "signature": "void prepareTest()", "full_signature": "@Test public void prepareTest()", "class_method_signature": "VenServiceTest.prepareTest()", "testcase": true, "constructor": false, "invocations": ["prepare", "assertNotNull", "assertNull", "getId", "assertNull", "getBasicPassword", "assertNull", "getDigestPassword", "assertEquals", "getUsername", "save", "assertNotNull", "assertNotNull", "getId", "assertNull", "getBasicPassword", "assertNull", "getDigestPassword", "assertEquals", "getUsername", "delete", "prepare", "assertNotNull", "assertNull", "getId", "assertNotNull", "getBasicPassword", "assertNotNull", "getDigestPassword", "assertEquals", "getUsername", "setUsername", "setPassword", "setOadrProfil", "setTransport", "prepare", "assertNotNull", "assertNull", "getId", "assertNotNull", "getBasicPassword", "assertNotNull", "getDigestPassword", "assertEquals", "getUsername", "assertEquals", "getOadrProfil", "assertEquals", "getTransport"]}, "focal_class": {"identifier": "VenService", "superclass": "extends AbstractUserService<Ven>", "interfaces": "", "fields": [{"original_string": "private static final Integer DEFAULT_SEARCH_SIZE = 20;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_SEARCH_SIZE = 20", "var_name": "DEFAULT_SEARCH_SIZE"}, {"original_string": "@Resource\n\tprivate VenDao venDao;", "modifier": "@Resource\n\tprivate", "type": "VenDao", "declarator": "venDao", "var_name": "venDao"}, {"original_string": "@Resource\n\tprivate VenResourceDao venResourceDao;", "modifier": "@Resource\n\tprivate", "type": "VenResourceDao", "declarator": "venResourceDao", "var_name": "venResourceDao"}, {"original_string": "@Resource\n\tprivate VenDemandResponseEventDao venDemandResponseEventDao;", "modifier": "@Resource\n\tprivate", "type": "VenDemandResponseEventDao", "declarator": "venDemandResponseEventDao", "var_name": "venDemandResponseEventDao"}, {"original_string": "@Autowired(required = false)\n\tprivate GenerateX509CertificateService generateX509VenService;", "modifier": "@Autowired(required = false)\n\tprivate", "type": "GenerateX509CertificateService", "declarator": "generateX509VenService", "var_name": "generateX509VenService"}, {"original_string": "@Resource\n\tprivate DigestAuthenticationProvider digestAuthenticationProvider;", "modifier": "@Resource\n\tprivate", "type": "DigestAuthenticationProvider", "declarator": "digestAuthenticationProvider", "var_name": "digestAuthenticationProvider"}, {"original_string": "private Mapper mapper = new DozerBeanMapper();", "modifier": "private", "type": "Mapper", "declarator": "mapper = new DozerBeanMapper()", "var_name": "mapper"}], "methods": [{"identifier": "prepare", "parameters": "(String username, String password)", "modifiers": "public", "return": "Ven", "signature": "Ven prepare(String username, String password)", "full_signature": "public Ven prepare(String username, String password)", "class_method_signature": "VenService.prepare(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(String username)", "modifiers": "public", "return": "Ven", "signature": "Ven prepare(String username)", "full_signature": "public Ven prepare(String username)", "class_method_signature": "VenService.prepare(String username)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(VenCreateDto dto)", "modifiers": "public", "return": "Ven", "signature": "Ven prepare(VenCreateDto dto)", "full_signature": "public Ven prepare(VenCreateDto dto)", "class_method_signature": "VenService.prepare(VenCreateDto dto)", "testcase": false, "constructor": false}, {"identifier": "generateCertificateIfRequired", "parameters": "(VenCreateDto dto, Ven ven)", "modifiers": "public", "return": "Optional<File>", "signature": "Optional<File> generateCertificateIfRequired(VenCreateDto dto, Ven ven)", "full_signature": "public Optional<File> generateCertificateIfRequired(VenCreateDto dto, Ven ven)", "class_method_signature": "VenService.generateCertificateIfRequired(VenCreateDto dto, Ven ven)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Ven instance)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void delete(Ven instance)", "full_signature": "@Override @Transactional public void delete(Ven instance)", "class_method_signature": "VenService.delete(Ven instance)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Iterable<Ven> instances)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Iterable<Ven> instances)", "full_signature": "@Override public void delete(Iterable<Ven> instances)", "class_method_signature": "VenService.delete(Iterable<Ven> instances)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Ven instance)", "modifiers": "@Override public", "return": "Ven", "signature": "Ven save(Ven instance)", "full_signature": "@Override public Ven save(Ven instance)", "class_method_signature": "VenService.save(Ven instance)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Iterable<Ven> instances)", "modifiers": "@Override public", "return": "void", "signature": "void save(Iterable<Ven> instances)", "full_signature": "@Override public void save(Iterable<Ven> instances)", "class_method_signature": "VenService.save(Iterable<Ven> instances)", "testcase": false, "constructor": false}, {"identifier": "findOneByUsername", "parameters": "(String username)", "modifiers": "public", "return": "Ven", "signature": "Ven findOneByUsername(String username)", "full_signature": "public Ven findOneByUsername(String username)", "class_method_signature": "VenService.findOneByUsername(String username)", "testcase": false, "constructor": false}, {"identifier": "findOneByRegistrationId", "parameters": "(String registrationId)", "modifiers": "public", "return": "Ven", "signature": "Ven findOneByRegistrationId(String registrationId)", "full_signature": "public Ven findOneByRegistrationId(String registrationId)", "class_method_signature": "VenService.findOneByRegistrationId(String registrationId)", "testcase": false, "constructor": false}, {"identifier": "findByUsernameInAndVenMarketContextsContains", "parameters": "(List<String> username,\n\t\t\tVenMarketContext venMarketContext)", "modifiers": "public", "return": "List<Ven>", "signature": "List<Ven> findByUsernameInAndVenMarketContextsContains(List<String> username,\n\t\t\tVenMarketContext venMarketContext)", "full_signature": "public List<Ven> findByUsernameInAndVenMarketContextsContains(List<String> username,\n\t\t\tVenMarketContext venMarketContext)", "class_method_signature": "VenService.findByUsernameInAndVenMarketContextsContains(List<String> username,\n\t\t\tVenMarketContext venMarketContext)", "testcase": false, "constructor": false}, {"identifier": "findByGroupName", "parameters": "(List<String> groupName)", "modifiers": "public", "return": "List<Ven>", "signature": "List<Ven> findByGroupName(List<String> groupName)", "full_signature": "public List<Ven> findByGroupName(List<String> groupName)", "class_method_signature": "VenService.findByGroupName(List<String> groupName)", "testcase": false, "constructor": false}, {"identifier": "findByMarketContextName", "parameters": "(List<String> groupName)", "modifiers": "public", "return": "List<Ven>", "signature": "List<Ven> findByMarketContextName(List<String> groupName)", "full_signature": "public List<Ven> findByMarketContextName(List<String> groupName)", "class_method_signature": "VenService.findByMarketContextName(List<String> groupName)", "testcase": false, "constructor": false}, {"identifier": "findOne", "parameters": "(Long id)", "modifiers": "public", "return": "Ven", "signature": "Ven findOne(Long id)", "full_signature": "public Ven findOne(Long id)", "class_method_signature": "VenService.findOne(Long id)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "public", "return": "Iterable<Ven>", "signature": "Iterable<Ven> findAll()", "full_signature": "public Iterable<Ven> findAll()", "class_method_signature": "VenService.findAll()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long count()", "full_signature": "public long count()", "class_method_signature": "VenService.count()", "testcase": false, "constructor": false}, {"identifier": "cleanRegistration", "parameters": "(Ven ven)", "modifiers": "public", "return": "void", "signature": "void cleanRegistration(Ven ven)", "full_signature": "public void cleanRegistration(Ven ven)", "class_method_signature": "VenService.cleanRegistration(Ven ven)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(List<VenFilter> filters)", "modifiers": "public", "return": "Page<Ven>", "signature": "Page<Ven> search(List<VenFilter> filters)", "full_signature": "public Page<Ven> search(List<VenFilter> filters)", "class_method_signature": "VenService.search(List<VenFilter> filters)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(List<VenFilter> filters, Integer page, Integer size)", "modifiers": "public", "return": "Page<Ven>", "signature": "Page<Ven> search(List<VenFilter> filters, Integer page, Integer size)", "full_signature": "public Page<Ven> search(List<VenFilter> filters, Integer page, Integer size)", "class_method_signature": "VenService.search(List<VenFilter> filters, Integer page, Integer size)", "testcase": false, "constructor": false}], "file": "OpenADRServerVTNCommon/src/main/java/com/avob/openadr/server/common/vtn/service/VenService.java"}, "focal_method": {"identifier": "prepare", "parameters": "(String username, String password)", "modifiers": "public", "return": "Ven", "body": "public Ven prepare(String username, String password) {\n\t\treturn super.prepare(new Ven(), username, password, digestAuthenticationProvider.getRealm());\n\t}", "signature": "Ven prepare(String username, String password)", "full_signature": "public Ven prepare(String username, String password)", "class_method_signature": "VenService.prepare(String username, String password)", "testcase": false, "constructor": false, "invocations": ["prepare", "getRealm"]}, "repository": {"repo_id": 169761438, "url": "https://github.com/avob/OpenADR", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 55915, "license": "licensed"}}