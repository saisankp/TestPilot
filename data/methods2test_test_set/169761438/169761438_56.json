{"test_class": {"identifier": "VenControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String VEN_URL = \"/Ven/\";", "modifier": "private static final", "type": "String", "declarator": "VEN_URL = \"/Ven/\"", "var_name": "VEN_URL"}, {"original_string": "private static final String GROUP_URL = \"/Group/\";", "modifier": "private static final", "type": "String", "declarator": "GROUP_URL = \"/Group/\"", "var_name": "GROUP_URL"}, {"original_string": "private static final String MARKET_CONTEXT_URL = \"/MarketContext/\";", "modifier": "private static final", "type": "String", "declarator": "MARKET_CONTEXT_URL = \"/MarketContext/\"", "var_name": "MARKET_CONTEXT_URL"}, {"original_string": "@Autowired\n\tprivate WebApplicationContext wac;", "modifier": "@Autowired\n\tprivate", "type": "WebApplicationContext", "declarator": "wac", "var_name": "wac"}, {"original_string": "@Autowired\n\tprivate Filter springSecurityFilterChain;", "modifier": "@Autowired\n\tprivate", "type": "Filter", "declarator": "springSecurityFilterChain", "var_name": "springSecurityFilterChain"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private UserRequestPostProcessor adminSession = SecurityMockMvcRequestPostProcessors.user(\"admin\").roles(\"ADMIN\");", "modifier": "private", "type": "UserRequestPostProcessor", "declarator": "adminSession = SecurityMockMvcRequestPostProcessors.user(\"admin\").roles(\"ADMIN\")", "var_name": "adminSession"}, {"original_string": "private UserRequestPostProcessor venSession = SecurityMockMvcRequestPostProcessors.user(\"ven1\").roles(\"VEN\");", "modifier": "private", "type": "UserRequestPostProcessor", "declarator": "venSession = SecurityMockMvcRequestPostProcessors.user(\"ven1\").roles(\"VEN\")", "var_name": "venSession"}, {"original_string": "private UserRequestPostProcessor userSession = SecurityMockMvcRequestPostProcessors.user(\"ven1\").roles(\"USER\");", "modifier": "private", "type": "UserRequestPostProcessor", "declarator": "userSession = SecurityMockMvcRequestPostProcessors.user(\"ven1\").roles(\"USER\")", "var_name": "userSession"}, {"original_string": "@Resource\n\tprivate VenService venService;", "modifier": "@Resource\n\tprivate", "type": "VenService", "declarator": "venService", "var_name": "venService"}], "file": "OpenADRServerVTNCommon/src/test/java/com/avob/openadr/server/common/vtn/controller/VenControllerTest.java"}, "test_case": {"identifier": "createVenTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void createVenTest() throws Exception {\n\n\t\t// create login auth app no certificate gen\n\t\tVenCreateDto dto = new VenCreateDto();\n\t\tdto.setCommonName(\"myapp\");\n\t\tdto.setUsername(\"myapp\");\n\t\tdto.setAuthenticationType(\"login\");\n\t\tdto.setPassword(\"pass\");\n\t\tbyte[] content = mapper.writeValueAsBytes(dto);\n\t\tMvcResult andReturn = this.mockMvc\n\t\t\t\t.perform(MockMvcRequestBuilders.post(VEN_URL).content(content)\n\t\t\t\t\t\t.header(\"Content-Type\", \"application/json\").with(adminSession))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.CREATED_201)).andReturn();\n\t\tassertEquals(0, andReturn.getResponse().getContentLength());\n\t\t// verify app has been created\n\t\tVen findByUsername = venService.findOneByUsername(\"myapp\");\n\t\tassertNotNull(findByUsername);\n\t\tvenService.delete(findByUsername);\n\n\t\t// create x509 auth app no certificate gen\n\t\tdto = new VenCreateDto();\n\t\tdto.setCommonName(\"myapp\");\n\t\tdto.setUsername(\"myapp\");\n\t\tdto.setAuthenticationType(\"x509\");\n\t\tcontent = mapper.writeValueAsBytes(dto);\n\t\tandReturn = this.mockMvc\n\t\t\t\t.perform(MockMvcRequestBuilders.post(VEN_URL).content(content)\n\t\t\t\t\t\t.header(\"Content-Type\", \"application/json\").with(adminSession))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.CREATED_201)).andReturn();\n\t\tassertEquals(0, andReturn.getResponse().getContentLength());\n\t\t// verify app has been created\n\t\tfindByUsername = venService.findOneByUsername(\"myapp\");\n\t\tassertNotNull(findByUsername);\n\t\tvenService.delete(findByUsername);\n\n\t\t// create x509 app user rsa certificate gen\n\t\tdto = new VenCreateDto();\n\t\tdto.setCommonName(\"myapp\");\n\t\tdto.setAuthenticationType(\"x509\");\n\t\tdto.setNeedCertificateGeneration(\"rsa\");\n\t\tcontent = mapper.writeValueAsBytes(dto);\n\t\tandReturn = this.mockMvc\n\t\t\t\t.perform(MockMvcRequestBuilders.post(VEN_URL).content(content)\n\t\t\t\t\t\t.header(\"Content-Type\", \"application/json\").with(adminSession))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.CREATED_201)).andReturn();\n\t\tassertNotEquals(0, andReturn.getResponse().getContentLength());\n\t\t// verify app has been created\n\t\tassertNotNull(andReturn.getResponse().getHeader(\"x-VenID\"));\n\t\tfindByUsername = venService.findOneByUsername(andReturn.getResponse().getHeader(\"x-VenID\"));\n\t\tassertNotNull(findByUsername);\n\t\tassertFalse(findByUsername.getReportOnly());\n\t\tassertFalse(findByUsername.getXmlSignature());\n\t\tvenService.delete(findByUsername);\n\n\t\t// create x509 auth app ecc certificate gen\n\t\tdto = new VenCreateDto();\n\t\tdto.setCommonName(\"myapp\");\n\t\tdto.setAuthenticationType(\"x509\");\n\t\tdto.setNeedCertificateGeneration(\"ecc\");\n\t\tdto.setReportOnly(true);\n\t\tdto.setXmlSignature(true);\n\t\tcontent = mapper.writeValueAsBytes(dto);\n\t\tandReturn = this.mockMvc\n\t\t\t\t.perform(MockMvcRequestBuilders.post(VEN_URL).content(content)\n\t\t\t\t\t\t.header(\"Content-Type\", \"application/json\").with(adminSession))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.CREATED_201)).andReturn();\n\t\tassertNotEquals(0, andReturn.getResponse().getContentLength());\n\t\t// verify app has been created\n\t\tassertNotNull(andReturn.getResponse().getHeader(\"x-VenID\"));\n\t\tfindByUsername = venService.findOneByUsername(andReturn.getResponse().getHeader(\"x-VenID\"));\n\t\tassertNotNull(findByUsername);\n\t\tassertTrue(findByUsername.getReportOnly());\n\t\tassertTrue(findByUsername.getXmlSignature());\n\t\tvenService.delete(findByUsername);\n\n\t}", "signature": "void createVenTest()", "full_signature": "@Test public void createVenTest()", "class_method_signature": "VenControllerTest.createVenTest()", "testcase": true, "constructor": false, "invocations": ["setCommonName", "setUsername", "setAuthenticationType", "setPassword", "writeValueAsBytes", "andReturn", "andExpect", "perform", "with", "header", "content", "post", "is", "status", "assertEquals", "getContentLength", "getResponse", "findOneByUsername", "assertNotNull", "delete", "setCommonName", "setUsername", "setAuthenticationType", "writeValueAsBytes", "andReturn", "andExpect", "perform", "with", "header", "content", "post", "is", "status", "assertEquals", "getContentLength", "getResponse", "findOneByUsername", "assertNotNull", "delete", "setCommonName", "setAuthenticationType", "setNeedCertificateGeneration", "writeValueAsBytes", "andReturn", "andExpect", "perform", "with", "header", "content", "post", "is", "status", "assertNotEquals", "getContentLength", "getResponse", "assertNotNull", "getHeader", "getResponse", "findOneByUsername", "getHeader", "getResponse", "assertNotNull", "assertFalse", "getReportOnly", "assertFalse", "getXmlSignature", "delete", "setCommonName", "setAuthenticationType", "setNeedCertificateGeneration", "setReportOnly", "setXmlSignature", "writeValueAsBytes", "andReturn", "andExpect", "perform", "with", "header", "content", "post", "is", "status", "assertNotEquals", "getContentLength", "getResponse", "assertNotNull", "getHeader", "getResponse", "findOneByUsername", "getHeader", "getResponse", "assertNotNull", "assertTrue", "getReportOnly", "assertTrue", "getXmlSignature", "delete"]}, "focal_class": {"identifier": "VenController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(VenController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(VenController.class)", "var_name": "LOGGER"}, {"original_string": "@Resource\n\tprivate VenService venService;", "modifier": "@Resource\n\tprivate", "type": "VenService", "declarator": "venService", "var_name": "venService"}, {"original_string": "@Resource\n\tprivate VenResourceService venResourceService;", "modifier": "@Resource\n\tprivate", "type": "VenResourceService", "declarator": "venResourceService", "var_name": "venResourceService"}, {"original_string": "@Resource\n\tprivate VenGroupService venGroupService;", "modifier": "@Resource\n\tprivate", "type": "VenGroupService", "declarator": "venGroupService", "var_name": "venGroupService"}, {"original_string": "@Resource\n\tprivate VenMarketContextService venMarketContextService;", "modifier": "@Resource\n\tprivate", "type": "VenMarketContextService", "declarator": "venMarketContextService", "var_name": "venMarketContextService"}, {"original_string": "@Resource\n\tprivate DtoMapper dtoMapper;", "modifier": "@Resource\n\tprivate", "type": "DtoMapper", "declarator": "dtoMapper", "var_name": "dtoMapper"}], "methods": [{"identifier": "listVen", "parameters": "()", "modifiers": "@RequestMapping(value = \"/\", method = RequestMethod.GET) @ResponseBody public", "return": "List<VenDto>", "signature": "List<VenDto> listVen()", "full_signature": "@RequestMapping(value = \"/\", method = RequestMethod.GET) @ResponseBody public List<VenDto> listVen()", "class_method_signature": "VenController.listVen()", "testcase": false, "constructor": false}, {"identifier": "searchVen", "parameters": "(@RequestBody List<VenFilter> filters, @RequestParam(\"page\") int page,\n\t\t\t@RequestParam(\"size\") int size, HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/search\", method = RequestMethod.POST) @ResponseBody public", "return": "List<VenDto>", "signature": "List<VenDto> searchVen(@RequestBody List<VenFilter> filters, @RequestParam(\"page\") int page,\n\t\t\t@RequestParam(\"size\") int size, HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/search\", method = RequestMethod.POST) @ResponseBody public List<VenDto> searchVen(@RequestBody List<VenFilter> filters, @RequestParam(\"page\") int page,\n\t\t\t@RequestParam(\"size\") int size, HttpServletResponse response)", "class_method_signature": "VenController.searchVen(@RequestBody List<VenFilter> filters, @RequestParam(\"page\") int page,\n\t\t\t@RequestParam(\"size\") int size, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "createVen", "parameters": "(@Valid @RequestBody VenCreateDto dto,\n\t\t\tHttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/\", method = RequestMethod.POST) @ResponseBody public", "return": "ResponseEntity<InputStreamResource>", "signature": "ResponseEntity<InputStreamResource> createVen(@Valid @RequestBody VenCreateDto dto,\n\t\t\tHttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/\", method = RequestMethod.POST) @ResponseBody public ResponseEntity<InputStreamResource> createVen(@Valid @RequestBody VenCreateDto dto,\n\t\t\tHttpServletResponse response)", "class_method_signature": "VenController.createVen(@Valid @RequestBody VenCreateDto dto,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "updateVen", "parameters": "(@PathVariable(\"venID\") String venUsername, @Valid @RequestBody VenUpdateDto dto,\n\t\t\tHttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}\", method = RequestMethod.PUT) @ResponseBody public", "return": "VenCreateDto", "signature": "VenCreateDto updateVen(@PathVariable(\"venID\") String venUsername, @Valid @RequestBody VenUpdateDto dto,\n\t\t\tHttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}\", method = RequestMethod.PUT) @ResponseBody public VenCreateDto updateVen(@PathVariable(\"venID\") String venUsername, @Valid @RequestBody VenUpdateDto dto,\n\t\t\tHttpServletResponse response)", "class_method_signature": "VenController.updateVen(@PathVariable(\"venID\") String venUsername, @Valid @RequestBody VenUpdateDto dto,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "findVenByUsername", "parameters": "(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}\", method = RequestMethod.GET) @ResponseBody public", "return": "VenDto", "signature": "VenDto findVenByUsername(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}\", method = RequestMethod.GET) @ResponseBody public VenDto findVenByUsername(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "class_method_signature": "VenController.findVenByUsername(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "deleteVenByUsername", "parameters": "(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}\", method = RequestMethod.DELETE) @ResponseBody public", "return": "void", "signature": "void deleteVenByUsername(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}\", method = RequestMethod.DELETE) @ResponseBody public void deleteVenByUsername(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "class_method_signature": "VenController.deleteVenByUsername(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "createVenResource", "parameters": "(@PathVariable(\"venID\") String venUsername, @RequestBody VenResourceDto dto,\n\t\t\tHttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}/resource\", method = RequestMethod.POST) @ResponseBody public", "return": "VenResourceDto", "signature": "VenResourceDto createVenResource(@PathVariable(\"venID\") String venUsername, @RequestBody VenResourceDto dto,\n\t\t\tHttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}/resource\", method = RequestMethod.POST) @ResponseBody public VenResourceDto createVenResource(@PathVariable(\"venID\") String venUsername, @RequestBody VenResourceDto dto,\n\t\t\tHttpServletResponse response)", "class_method_signature": "VenController.createVenResource(@PathVariable(\"venID\") String venUsername, @RequestBody VenResourceDto dto,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "listVenResource", "parameters": "(@PathVariable(\"venID\") String venUsername,\n\t\t\tHttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}/resource\", method = RequestMethod.GET) @ResponseBody public", "return": "List<VenResourceDto>", "signature": "List<VenResourceDto> listVenResource(@PathVariable(\"venID\") String venUsername,\n\t\t\tHttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}/resource\", method = RequestMethod.GET) @ResponseBody public List<VenResourceDto> listVenResource(@PathVariable(\"venID\") String venUsername,\n\t\t\tHttpServletResponse response)", "class_method_signature": "VenController.listVenResource(@PathVariable(\"venID\") String venUsername,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "deleteVenResource", "parameters": "(@PathVariable(\"venID\") String venUsername,\n\t\t\t@PathVariable(\"resourceName\") String resourceName, HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}/resource/{resourceName}\", method = RequestMethod.DELETE) @ResponseBody public", "return": "void", "signature": "void deleteVenResource(@PathVariable(\"venID\") String venUsername,\n\t\t\t@PathVariable(\"resourceName\") String resourceName, HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}/resource/{resourceName}\", method = RequestMethod.DELETE) @ResponseBody public void deleteVenResource(@PathVariable(\"venID\") String venUsername,\n\t\t\t@PathVariable(\"resourceName\") String resourceName, HttpServletResponse response)", "class_method_signature": "VenController.deleteVenResource(@PathVariable(\"venID\") String venUsername,\n\t\t\t@PathVariable(\"resourceName\") String resourceName, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "addGroupToVen", "parameters": "(@PathVariable(\"venID\") String venUsername, @RequestParam(\"groupId\") Long groupId,\n\t\t\tHttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}/group\", method = RequestMethod.POST) @ResponseBody public", "return": "VenCreateDto", "signature": "VenCreateDto addGroupToVen(@PathVariable(\"venID\") String venUsername, @RequestParam(\"groupId\") Long groupId,\n\t\t\tHttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}/group\", method = RequestMethod.POST) @ResponseBody public VenCreateDto addGroupToVen(@PathVariable(\"venID\") String venUsername, @RequestParam(\"groupId\") Long groupId,\n\t\t\tHttpServletResponse response)", "class_method_signature": "VenController.addGroupToVen(@PathVariable(\"venID\") String venUsername, @RequestParam(\"groupId\") Long groupId,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "listVenGroup", "parameters": "(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}/group\", method = RequestMethod.GET) @ResponseBody public", "return": "List<VenGroupDto>", "signature": "List<VenGroupDto> listVenGroup(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}/group\", method = RequestMethod.GET) @ResponseBody public List<VenGroupDto> listVenGroup(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "class_method_signature": "VenController.listVenGroup(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "deleteVenGroup", "parameters": "(@PathVariable(\"venID\") String venUsername, @RequestParam(\"groupId\") Long groupId,\n\t\t\tHttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}/group/remove\", method = RequestMethod.POST) @ResponseBody public", "return": "void", "signature": "void deleteVenGroup(@PathVariable(\"venID\") String venUsername, @RequestParam(\"groupId\") Long groupId,\n\t\t\tHttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}/group/remove\", method = RequestMethod.POST) @ResponseBody public void deleteVenGroup(@PathVariable(\"venID\") String venUsername, @RequestParam(\"groupId\") Long groupId,\n\t\t\tHttpServletResponse response)", "class_method_signature": "VenController.deleteVenGroup(@PathVariable(\"venID\") String venUsername, @RequestParam(\"groupId\") Long groupId,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "addMarketContextToVen", "parameters": "(@PathVariable(\"venID\") String venUsername,\n\t\t\t@RequestParam(\"marketContextId\") Long marketContextId, HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}/marketContext\", method = RequestMethod.POST) @ResponseBody public", "return": "VenCreateDto", "signature": "VenCreateDto addMarketContextToVen(@PathVariable(\"venID\") String venUsername,\n\t\t\t@RequestParam(\"marketContextId\") Long marketContextId, HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}/marketContext\", method = RequestMethod.POST) @ResponseBody public VenCreateDto addMarketContextToVen(@PathVariable(\"venID\") String venUsername,\n\t\t\t@RequestParam(\"marketContextId\") Long marketContextId, HttpServletResponse response)", "class_method_signature": "VenController.addMarketContextToVen(@PathVariable(\"venID\") String venUsername,\n\t\t\t@RequestParam(\"marketContextId\") Long marketContextId, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "listVenMarketContext", "parameters": "(@PathVariable(\"venID\") String venUsername,\n\t\t\tHttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}/marketContext\", method = RequestMethod.GET) @ResponseBody public", "return": "List<VenMarketContextDto>", "signature": "List<VenMarketContextDto> listVenMarketContext(@PathVariable(\"venID\") String venUsername,\n\t\t\tHttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}/marketContext\", method = RequestMethod.GET) @ResponseBody public List<VenMarketContextDto> listVenMarketContext(@PathVariable(\"venID\") String venUsername,\n\t\t\tHttpServletResponse response)", "class_method_signature": "VenController.listVenMarketContext(@PathVariable(\"venID\") String venUsername,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "deleteVenMarketContext", "parameters": "(@PathVariable(\"venID\") String venUsername,\n\t\t\t@RequestParam(\"marketContextId\") Long marketContextId, HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}/marketContext/remove\", method = RequestMethod.POST) @ResponseBody public", "return": "void", "signature": "void deleteVenMarketContext(@PathVariable(\"venID\") String venUsername,\n\t\t\t@RequestParam(\"marketContextId\") Long marketContextId, HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}/marketContext/remove\", method = RequestMethod.POST) @ResponseBody public void deleteVenMarketContext(@PathVariable(\"venID\") String venUsername,\n\t\t\t@RequestParam(\"marketContextId\") Long marketContextId, HttpServletResponse response)", "class_method_signature": "VenController.deleteVenMarketContext(@PathVariable(\"venID\") String venUsername,\n\t\t\t@RequestParam(\"marketContextId\") Long marketContextId, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "cleanRegistration", "parameters": "(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{venID}/cleanRegistration\", method = RequestMethod.POST) @ResponseBody public", "return": "void", "signature": "void cleanRegistration(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{venID}/cleanRegistration\", method = RequestMethod.POST) @ResponseBody public void cleanRegistration(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "class_method_signature": "VenController.cleanRegistration(@PathVariable(\"venID\") String venUsername, HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "OpenADRServerVTNCommon/src/main/java/com/avob/openadr/server/common/vtn/controller/VenController.java"}, "focal_method": {"identifier": "createVen", "parameters": "(@Valid @RequestBody VenCreateDto dto,\n\t\t\tHttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/\", method = RequestMethod.POST) @ResponseBody public", "return": "ResponseEntity<InputStreamResource>", "body": "@RequestMapping(value = \"/\", method = RequestMethod.POST)\n\t@ResponseBody\n\tpublic ResponseEntity<InputStreamResource> createVen(@Valid @RequestBody VenCreateDto dto,\n\t\t\tHttpServletResponse response) {\n\n\t\tVen findOneByUsername = venService.findOneByUsername(dto.getUsername());\n\n\t\tif (findOneByUsername != null) {\n\t\t\tLOGGER.warn(\"Ven: \" + dto.getUsername() + \" already exists\");\n\t\t\treturn ResponseEntity.status(HttpStatus.NOT_ACCEPTABLE_406)\n\t\t\t\t\t.contentType(MediaType.parseMediaType(\"application/octet-stream\")).body(null);\n\t\t}\n\t\tVen prepare = venService.prepare(dto);\n\t\tResponseEntity<InputStreamResource> body = null;\n\t\ttry {\n\t\t\tOptional<File> generateCertificateIfRequired = venService.generateCertificateIfRequired(dto, prepare);\n\n\t\t\tif (generateCertificateIfRequired.isPresent()) {\n\t\t\t\tInputStreamResource resource = new InputStreamResource(\n\t\t\t\t\t\tnew FileInputStream(generateCertificateIfRequired.get()));\n\t\t\t\tbody = ResponseEntity.status(HttpStatus.CREATED_201)\n\t\t\t\t\t\t.header(\"Content-Disposition\", \"attachment; filename=\\\"archive.tar\\\"\")\n\t\t\t\t\t\t.header(\"X-VenID\", prepare.getUsername())\n\t\t\t\t\t\t.contentLength(generateCertificateIfRequired.get().length())\n\t\t\t\t\t\t.contentType(MediaType.parseMediaType(\"application/octet-stream\")).body(resource);\n\t\t\t} else {\n\t\t\t\tbody = ResponseEntity.status(HttpStatus.CREATED_201).header(\"x-venID\", prepare.getUsername())\n\t\t\t\t\t\t.body(null);\n\t\t\t}\n\n\t\t} catch (GenerateX509VenException e) {\n\t\t\tLOGGER.error(\"\", e);\n\t\t\tresponse.setStatus(HttpStatus.NOT_ACCEPTABLE_406);\n\t\t} catch (FileNotFoundException e) {\n\t\t\tLOGGER.error(\"\", e);\n\t\t\tresponse.setStatus(HttpStatus.INTERNAL_SERVER_ERROR_500);\n\t\t}\n\n\t\tvenService.save(prepare);\n\t\tLOGGER.info(\"Create Ven: \" + prepare.getUsername());\n\n\t\treturn body;\n\t}", "signature": "ResponseEntity<InputStreamResource> createVen(@Valid @RequestBody VenCreateDto dto,\n\t\t\tHttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/\", method = RequestMethod.POST) @ResponseBody public ResponseEntity<InputStreamResource> createVen(@Valid @RequestBody VenCreateDto dto,\n\t\t\tHttpServletResponse response)", "class_method_signature": "VenController.createVen(@Valid @RequestBody VenCreateDto dto,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["findOneByUsername", "getUsername", "warn", "getUsername", "body", "contentType", "status", "parseMediaType", "prepare", "generateCertificateIfRequired", "isPresent", "get", "body", "contentType", "contentLength", "header", "header", "status", "getUsername", "length", "get", "parseMediaType", "body", "header", "status", "getUsername", "error", "setStatus", "error", "setStatus", "save", "info", "getUsername"]}, "repository": {"repo_id": 169761438, "url": "https://github.com/avob/OpenADR", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 55915, "license": "licensed"}}