{"test_class": {"identifier": "MetricDisplayerTest", "superclass": "extends AbstractDisplayerTest", "interfaces": "", "fields": [{"original_string": "public static final String HTML_TEMPLATE =\n            \"<div id=\\\"${this}\\\" style=\\\"background-color:${bgColor}; width:${width}px; height:${height}px; \" +\n            \"margin-top:${marginTop}px; margin-right:${marginRight}px; margin-bottom:${marginBottom}px; margin-left:${marginLeft}px;\\\">\\n\" +\n            \"  <span>${title}</span>\\n\" +\n            \"  <span>${value}</span>\\n\" +\n            \"</div>\";", "modifier": "public static final", "type": "String", "declarator": "HTML_TEMPLATE =\n            \"<div id=\\\"${this}\\\" style=\\\"background-color:${bgColor}; width:${width}px; height:${height}px; \" +\n            \"margin-top:${marginTop}px; margin-right:${marginRight}px; margin-bottom:${marginBottom}px; margin-left:${marginLeft}px;\\\">\\n\" +\n            \"  <span>${title}</span>\\n\" +\n            \"  <span>${value}</span>\\n\" +\n            \"</div>\"", "var_name": "HTML_TEMPLATE"}, {"original_string": "public static final String JS_TEMPLATE = \"if (${isFilterEnabled}) {  \\n\" +\n            \"  var filterOn = ${isFilterOn};\\n\" +\n            \"  ${this}.style.cursor=\\\"pointer\\\";\\n\" +\n            \"  ${this}.onclick = function() {\\n\" +\n            \"    filterOn = !filterOn;\\n\" +\n            \"    ${this}.style.backgroundColor = filterOn ? \\\"lightblue\\\" : \\\"${bgColor}\\\";\\n\" +\n            \"    ${doFilter};\\n\" +\n            \"  };\\n\" +\n            \"}\";", "modifier": "public static final", "type": "String", "declarator": "JS_TEMPLATE = \"if (${isFilterEnabled}) {  \\n\" +\n            \"  var filterOn = ${isFilterOn};\\n\" +\n            \"  ${this}.style.cursor=\\\"pointer\\\";\\n\" +\n            \"  ${this}.onclick = function() {\\n\" +\n            \"    filterOn = !filterOn;\\n\" +\n            \"    ${this}.style.backgroundColor = filterOn ? \\\"lightblue\\\" : \\\"${bgColor}\\\";\\n\" +\n            \"    ${doFilter};\\n\" +\n            \"  };\\n\" +\n            \"}\"", "var_name": "JS_TEMPLATE"}, {"original_string": "@Mock\n    MetricDisplayer.View view;", "modifier": "@Mock", "type": "MetricDisplayer.View", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock\n    DisplayerListener listener;", "modifier": "@Mock", "type": "DisplayerListener", "declarator": "listener", "var_name": "listener"}], "file": "dashbuilder-client/dashbuilder-renderers/dashbuilder-renderer-default/src/test/java/org/dashbuilder/renderer/client/metric/MetricDisplayerTest.java"}, "test_case": {"identifier": "testNoData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoData() {\n        DisplayerSettings empty = DisplayerSettingsFactory.newMetricSettings()\n                .dataset(EXPENSES)\n                .filter(COLUMN_ID, FilterFactory.isNull())\n                .column(COLUMN_AMOUNT)\n                .title(\"Title\").titleVisible(true)\n                .width(300).height(200)\n                .margins(10, 20, 30, 40)\n                .backgroundColor(\"FDE8D4\")\n                .htmlTemplate(HTML_TEMPLATE)\n                .buildSettings();\n\n        when(view.getNoDataString()).thenReturn(\"0,0\");\n        MetricDisplayer presenter = createMetricDisplayer(empty);\n        MetricDisplayer.View view = presenter.getView();\n        presenter.draw();\n\n        verify(view, atLeastOnce()).getNoDataString();\n        verify(view).setHtml(\"<div id=\\\"test_this\\\" style=\\\"background-color:#FDE8D4; width:300px; height:200px; \" +\n                \"margin-top:10px; margin-right:40px; margin-bottom:20px; margin-left:30px;\\\">\\n\" +\n                \"  <span>Title</span>\\n\" +\n                \"  <span>0,0</span>\\n\" +\n                \"</div>\");\n    }", "signature": "void testNoData()", "full_signature": "@Test public void testNoData()", "class_method_signature": "MetricDisplayerTest.testNoData()", "testcase": true, "constructor": false, "invocations": ["buildSettings", "htmlTemplate", "backgroundColor", "margins", "height", "width", "titleVisible", "title", "column", "filter", "dataset", "newMetricSettings", "isNull", "thenReturn", "when", "getNoDataString", "createMetricDisplayer", "getView", "draw", "getNoDataString", "verify", "atLeastOnce", "setHtml", "verify"]}, "focal_class": {"identifier": "MetricDisplayer", "superclass": "extends AbstractGwtDisplayer<MetricDisplayer.View>", "interfaces": "implements HasHtmlTemplate, HasJsTemplate", "fields": [{"original_string": "public static final List<String> TEMPLATE_KEYS = Arrays.asList(\"value.raw\", \"value\", \"title\",\n            \"width\", \"height\", \"marginTop\", \"marginBottom\", \"marginRight\", \"marginLeft\", \"bgColor\",\n            \"isFilterEnabled\", \"isFilterOn\", \"isEmpty\", \"doFilter\");", "modifier": "public static final", "type": "List<String>", "declarator": "TEMPLATE_KEYS = Arrays.asList(\"value.raw\", \"value\", \"title\",\n            \"width\", \"height\", \"marginTop\", \"marginBottom\", \"marginRight\", \"marginLeft\", \"bgColor\",\n            \"isFilterEnabled\", \"isFilterOn\", \"isEmpty\", \"doFilter\")", "var_name": "TEMPLATE_KEYS"}, {"original_string": "public static final String DEFAULT_HTML_TEMPLATE = \"<div id=\\\"${this}\\\" class=\\\"card-pf card-pf-accented card-pf-aggregate-status\\\" \" +\n            \"style=\\\"background-color:${bgColor}; width:${width}px; height:${height}px; \" +\n            \"margin-top:${marginTop}px; margin-right:${marginRight}px; margin-bottom:${marginBottom}px; margin-left:${marginLeft}px;\\\">\\n\" +\n            \"  <h3>${title}</h3>\\n\" +\n            \"  <h2>${value}</h2>\\n\" +\n            \"</div>\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_HTML_TEMPLATE = \"<div id=\\\"${this}\\\" class=\\\"card-pf card-pf-accented card-pf-aggregate-status\\\" \" +\n            \"style=\\\"background-color:${bgColor}; width:${width}px; height:${height}px; \" +\n            \"margin-top:${marginTop}px; margin-right:${marginRight}px; margin-bottom:${marginBottom}px; margin-left:${marginLeft}px;\\\">\\n\" +\n            \"  <h3>${title}</h3>\\n\" +\n            \"  <h2>${value}</h2>\\n\" +\n            \"</div>\"", "var_name": "DEFAULT_HTML_TEMPLATE"}, {"original_string": "public static final String DEFAULT_JS_TEMPLATE = \"if (${isFilterEnabled}) {  \\n\" +\n            \"  var filterOn = false;\\n\" +\n            \"  ${this}.style.cursor=\\\"pointer\\\";\\n\" +\n            \"\\n\" +\n            \"  ${this}.onmouseover = function() {\\n\" +\n            \"    if (!filterOn) ${this}.style.backgroundColor = \\\"lightblue\\\";\\n\" +\n            \"  };\\n\" +\n            \"  ${this}.onmouseout = function() {\\n\" +\n            \"    if (!filterOn) ${this}.style.backgroundColor = \\\"${bgColor}\\\";\\n\" +\n            \"  };\\n\" +\n            \"  ${this}.onclick = function() {\\n\" +\n            \"    filterOn = !filterOn;\\n\" +\n            \"    ${this}.style.backgroundColor = filterOn ? \\\"lightblue\\\" : \\\"${bgColor}\\\";\\n\" +\n            \"    ${doFilter};\\n\" +\n            \"  };\\n\" +\n            \"}\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_JS_TEMPLATE = \"if (${isFilterEnabled}) {  \\n\" +\n            \"  var filterOn = false;\\n\" +\n            \"  ${this}.style.cursor=\\\"pointer\\\";\\n\" +\n            \"\\n\" +\n            \"  ${this}.onmouseover = function() {\\n\" +\n            \"    if (!filterOn) ${this}.style.backgroundColor = \\\"lightblue\\\";\\n\" +\n            \"  };\\n\" +\n            \"  ${this}.onmouseout = function() {\\n\" +\n            \"    if (!filterOn) ${this}.style.backgroundColor = \\\"${bgColor}\\\";\\n\" +\n            \"  };\\n\" +\n            \"  ${this}.onclick = function() {\\n\" +\n            \"    filterOn = !filterOn;\\n\" +\n            \"    ${this}.style.backgroundColor = filterOn ? \\\"lightblue\\\" : \\\"${bgColor}\\\";\\n\" +\n            \"    ${doFilter};\\n\" +\n            \"  };\\n\" +\n            \"}\"", "var_name": "DEFAULT_JS_TEMPLATE"}, {"original_string": "protected View view;", "modifier": "protected", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "protected boolean filterOn = false;", "modifier": "protected", "type": "boolean", "declarator": "filterOn = false", "var_name": "filterOn"}, {"original_string": "protected StringTemplateBuilder codeBuilder = new StringTemplateBuilder();", "modifier": "protected", "type": "StringTemplateBuilder", "declarator": "codeBuilder = new StringTemplateBuilder()", "var_name": "codeBuilder"}], "methods": [{"identifier": "MetricDisplayer", "parameters": "(View view)", "modifiers": "@Inject public", "return": "", "signature": " MetricDisplayer(View view)", "full_signature": "@Inject public  MetricDisplayer(View view)", "class_method_signature": "MetricDisplayer.MetricDisplayer(View view)", "testcase": false, "constructor": true}, {"identifier": "getView", "parameters": "()", "modifiers": "@Override public", "return": "View", "signature": "View getView()", "full_signature": "@Override public View getView()", "class_method_signature": "MetricDisplayer.getView()", "testcase": false, "constructor": false}, {"identifier": "createDisplayerConstraints", "parameters": "()", "modifiers": "@Override public", "return": "DisplayerConstraints", "signature": "DisplayerConstraints createDisplayerConstraints()", "full_signature": "@Override public DisplayerConstraints createDisplayerConstraints()", "class_method_signature": "MetricDisplayer.createDisplayerConstraints()", "testcase": false, "constructor": false}, {"identifier": "createVisualization", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void createVisualization()", "full_signature": "@Override protected void createVisualization()", "class_method_signature": "MetricDisplayer.createVisualization()", "testcase": false, "constructor": false}, {"identifier": "updateVisualization", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void updateVisualization()", "full_signature": "@Override protected void updateVisualization()", "class_method_signature": "MetricDisplayer.updateVisualization()", "testcase": false, "constructor": false}, {"identifier": "parseHtmlTemplate", "parameters": "(String str)", "modifiers": "public", "return": "String", "signature": "String parseHtmlTemplate(String str)", "full_signature": "public String parseHtmlTemplate(String str)", "class_method_signature": "MetricDisplayer.parseHtmlTemplate(String str)", "testcase": false, "constructor": false}, {"identifier": "parseJsTemplate", "parameters": "(String str)", "modifiers": "public", "return": "String", "signature": "String parseJsTemplate(String str)", "full_signature": "public String parseJsTemplate(String str)", "class_method_signature": "MetricDisplayer.parseJsTemplate(String str)", "testcase": false, "constructor": false}, {"identifier": "parseTemplate", "parameters": "(String template)", "modifiers": "protected", "return": "void", "signature": "void parseTemplate(String template)", "full_signature": "protected void parseTemplate(String template)", "class_method_signature": "MetricDisplayer.parseTemplate(String template)", "testcase": false, "constructor": false}, {"identifier": "getExtraKeyId", "parameters": "(String key)", "modifiers": "public", "return": "String", "signature": "String getExtraKeyId(String key)", "full_signature": "public String getExtraKeyId(String key)", "class_method_signature": "MetricDisplayer.getExtraKeyId(String key)", "testcase": false, "constructor": false}, {"identifier": "isFilterOn", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFilterOn()", "full_signature": "public boolean isFilterOn()", "class_method_signature": "MetricDisplayer.isFilterOn()", "testcase": false, "constructor": false}, {"identifier": "setFilterOn", "parameters": "(boolean on)", "modifiers": "public", "return": "void", "signature": "void setFilterOn(boolean on)", "full_signature": "public void setFilterOn(boolean on)", "class_method_signature": "MetricDisplayer.setFilterOn(boolean on)", "testcase": false, "constructor": false}, {"identifier": "isFilterEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFilterEnabled()", "full_signature": "public boolean isFilterEnabled()", "class_method_signature": "MetricDisplayer.isFilterEnabled()", "testcase": false, "constructor": false}, {"identifier": "updateFilter", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateFilter()", "full_signature": "public void updateFilter()", "class_method_signature": "MetricDisplayer.updateFilter()", "testcase": false, "constructor": false}, {"identifier": "fetchFilter", "parameters": "()", "modifiers": "public", "return": "DataSetFilter", "signature": "DataSetFilter fetchFilter()", "full_signature": "public DataSetFilter fetchFilter()", "class_method_signature": "MetricDisplayer.fetchFilter()", "testcase": false, "constructor": false}, {"identifier": "filterApply", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void filterApply()", "full_signature": "public void filterApply()", "class_method_signature": "MetricDisplayer.filterApply()", "testcase": false, "constructor": false}, {"identifier": "filterReset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void filterReset()", "full_signature": "@Override public void filterReset()", "class_method_signature": "MetricDisplayer.filterReset()", "testcase": false, "constructor": false}, {"identifier": "getHtmlTemplate", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getHtmlTemplate()", "full_signature": "@Override public String getHtmlTemplate()", "class_method_signature": "MetricDisplayer.getHtmlTemplate()", "testcase": false, "constructor": false}, {"identifier": "getHtmlVariableMap", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getHtmlVariableMap()", "full_signature": "@Override public Map<String, String> getHtmlVariableMap()", "class_method_signature": "MetricDisplayer.getHtmlVariableMap()", "testcase": false, "constructor": false}, {"identifier": "getJsTemplate", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getJsTemplate()", "full_signature": "@Override public String getJsTemplate()", "class_method_signature": "MetricDisplayer.getJsTemplate()", "testcase": false, "constructor": false}, {"identifier": "getJsVariableMap", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getJsVariableMap()", "full_signature": "@Override public Map<String, String> getJsVariableMap()", "class_method_signature": "MetricDisplayer.getJsVariableMap()", "testcase": false, "constructor": false}, {"identifier": "getCommonVariableMap", "parameters": "()", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> getCommonVariableMap()", "full_signature": "protected Map<String, String> getCommonVariableMap()", "class_method_signature": "MetricDisplayer.getCommonVariableMap()", "testcase": false, "constructor": false}, {"identifier": "asVar", "parameters": "(String key)", "modifiers": "protected", "return": "String", "signature": "String asVar(String key)", "full_signature": "protected String asVar(String key)", "class_method_signature": "MetricDisplayer.asVar(String key)", "testcase": false, "constructor": false}], "file": "dashbuilder-client/dashbuilder-renderers/dashbuilder-renderer-default/src/main/java/org/dashbuilder/renderer/client/metric/MetricDisplayer.java"}, "focal_method": {"identifier": "getView", "parameters": "()", "modifiers": "@Override public", "return": "View", "body": "@Override\n    public View getView() {\n        return view;\n    }", "signature": "View getView()", "full_signature": "@Override public View getView()", "class_method_signature": "MetricDisplayer.getView()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}