{"test_class": {"identifier": "AbstractRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private URL testUrl;", "modifier": "private", "type": "URL", "declarator": "testUrl", "var_name": "testUrl"}, {"original_string": "private URL mockUrl;", "modifier": "private", "type": "URL", "declarator": "mockUrl", "var_name": "mockUrl"}, {"original_string": "private NotifyListener listener;", "modifier": "private", "type": "NotifyListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "private AbstractRegistry abstractRegistry;", "modifier": "private", "type": "AbstractRegistry", "declarator": "abstractRegistry", "var_name": "abstractRegistry"}, {"original_string": "private boolean notifySuccess;", "modifier": "private", "type": "boolean", "declarator": "notifySuccess", "var_name": "notifySuccess"}, {"original_string": "private Map<String, String> parametersConsumer = new LinkedHashMap<>();", "modifier": "private", "type": "Map<String, String>", "declarator": "parametersConsumer = new LinkedHashMap<>()", "var_name": "parametersConsumer"}], "file": "dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/support/AbstractRegistryTest.java"}, "test_case": {"identifier": "testUnregisterIfUrlNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnregisterIfUrlNull() throws Exception {\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            abstractRegistry.unregister(null);\n            Assertions.fail(\"unregister url == null\");\n        });\n    }", "signature": "void testUnregisterIfUrlNull()", "full_signature": "@Test public void testUnregisterIfUrlNull()", "class_method_signature": "AbstractRegistryTest.testUnregisterIfUrlNull()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "unregister", "fail"]}, "focal_class": {"identifier": "AbstractRegistry", "superclass": "", "interfaces": "implements Registry", "fields": [{"original_string": "private static final char URL_SEPARATOR = ' ';", "modifier": "private static final", "type": "char", "declarator": "URL_SEPARATOR = ' '", "var_name": "URL_SEPARATOR"}, {"original_string": "private static final String URL_SPLIT = \"\\\\s+\";", "modifier": "private static final", "type": "String", "declarator": "URL_SPLIT = \"\\\\s+\"", "var_name": "URL_SPLIT"}, {"original_string": "private static final int MAX_RETRY_TIMES_SAVE_PROPERTIES = 3;", "modifier": "private static final", "type": "int", "declarator": "MAX_RETRY_TIMES_SAVE_PROPERTIES = 3", "var_name": "MAX_RETRY_TIMES_SAVE_PROPERTIES"}, {"original_string": "protected final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final Properties properties = new Properties();", "modifier": "private final", "type": "Properties", "declarator": "properties = new Properties()", "var_name": "properties"}, {"original_string": "private final ExecutorService registryCacheExecutor = Executors.newFixedThreadPool(1, new NamedThreadFactory(\"DubboSaveRegistryCache\", true));", "modifier": "private final", "type": "ExecutorService", "declarator": "registryCacheExecutor = Executors.newFixedThreadPool(1, new NamedThreadFactory(\"DubboSaveRegistryCache\", true))", "var_name": "registryCacheExecutor"}, {"original_string": "private boolean syncSaveFile;", "modifier": "private", "type": "boolean", "declarator": "syncSaveFile", "var_name": "syncSaveFile"}, {"original_string": "private final AtomicLong lastCacheChanged = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "lastCacheChanged = new AtomicLong()", "var_name": "lastCacheChanged"}, {"original_string": "private final AtomicInteger savePropertiesRetryTimes = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "savePropertiesRetryTimes = new AtomicInteger()", "var_name": "savePropertiesRetryTimes"}, {"original_string": "private final Set<URL> registered = new ConcurrentHashSet<>();", "modifier": "private final", "type": "Set<URL>", "declarator": "registered = new ConcurrentHashSet<>()", "var_name": "registered"}, {"original_string": "private final ConcurrentMap<URL, Set<NotifyListener>> subscribed = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<URL, Set<NotifyListener>>", "declarator": "subscribed = new ConcurrentHashMap<>()", "var_name": "subscribed"}, {"original_string": "private final ConcurrentMap<URL, Map<String, List<URL>>> notified = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<URL, Map<String, List<URL>>>", "declarator": "notified = new ConcurrentHashMap<>()", "var_name": "notified"}, {"original_string": "private URL registryUrl;", "modifier": "private", "type": "URL", "declarator": "registryUrl", "var_name": "registryUrl"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}], "methods": [{"identifier": "AbstractRegistry", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " AbstractRegistry(URL url)", "full_signature": "public  AbstractRegistry(URL url)", "class_method_signature": "AbstractRegistry.AbstractRegistry(URL url)", "testcase": false, "constructor": true}, {"identifier": "filterEmpty", "parameters": "(URL url, List<URL> urls)", "modifiers": "protected static", "return": "List<URL>", "signature": "List<URL> filterEmpty(URL url, List<URL> urls)", "full_signature": "protected static List<URL> filterEmpty(URL url, List<URL> urls)", "class_method_signature": "AbstractRegistry.filterEmpty(URL url, List<URL> urls)", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "URL", "signature": "URL getUrl()", "full_signature": "@Override public URL getUrl()", "class_method_signature": "AbstractRegistry.getUrl()", "testcase": false, "constructor": false}, {"identifier": "setUrl", "parameters": "(URL url)", "modifiers": "protected", "return": "void", "signature": "void setUrl(URL url)", "full_signature": "protected void setUrl(URL url)", "class_method_signature": "AbstractRegistry.setUrl(URL url)", "testcase": false, "constructor": false}, {"identifier": "getRegistered", "parameters": "()", "modifiers": "public", "return": "Set<URL>", "signature": "Set<URL> getRegistered()", "full_signature": "public Set<URL> getRegistered()", "class_method_signature": "AbstractRegistry.getRegistered()", "testcase": false, "constructor": false}, {"identifier": "getSubscribed", "parameters": "()", "modifiers": "public", "return": "Map<URL, Set<NotifyListener>>", "signature": "Map<URL, Set<NotifyListener>> getSubscribed()", "full_signature": "public Map<URL, Set<NotifyListener>> getSubscribed()", "class_method_signature": "AbstractRegistry.getSubscribed()", "testcase": false, "constructor": false}, {"identifier": "getNotified", "parameters": "()", "modifiers": "public", "return": "Map<URL, Map<String, List<URL>>>", "signature": "Map<URL, Map<String, List<URL>>> getNotified()", "full_signature": "public Map<URL, Map<String, List<URL>>> getNotified()", "class_method_signature": "AbstractRegistry.getNotified()", "testcase": false, "constructor": false}, {"identifier": "getCacheFile", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getCacheFile()", "full_signature": "public File getCacheFile()", "class_method_signature": "AbstractRegistry.getCacheFile()", "testcase": false, "constructor": false}, {"identifier": "getCacheProperties", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties getCacheProperties()", "full_signature": "public Properties getCacheProperties()", "class_method_signature": "AbstractRegistry.getCacheProperties()", "testcase": false, "constructor": false}, {"identifier": "getLastCacheChanged", "parameters": "()", "modifiers": "public", "return": "AtomicLong", "signature": "AtomicLong getLastCacheChanged()", "full_signature": "public AtomicLong getLastCacheChanged()", "class_method_signature": "AbstractRegistry.getLastCacheChanged()", "testcase": false, "constructor": false}, {"identifier": "doSaveProperties", "parameters": "(long version)", "modifiers": "public", "return": "void", "signature": "void doSaveProperties(long version)", "full_signature": "public void doSaveProperties(long version)", "class_method_signature": "AbstractRegistry.doSaveProperties(long version)", "testcase": false, "constructor": false}, {"identifier": "loadProperties", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadProperties()", "full_signature": "private void loadProperties()", "class_method_signature": "AbstractRegistry.loadProperties()", "testcase": false, "constructor": false}, {"identifier": "getCacheUrls", "parameters": "(URL url)", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> getCacheUrls(URL url)", "full_signature": "public List<URL> getCacheUrls(URL url)", "class_method_signature": "AbstractRegistry.getCacheUrls(URL url)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(URL url)", "modifiers": "@Override public", "return": "List<URL>", "signature": "List<URL> lookup(URL url)", "full_signature": "@Override public List<URL> lookup(URL url)", "class_method_signature": "AbstractRegistry.lookup(URL url)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void register(URL url)", "full_signature": "@Override public void register(URL url)", "class_method_signature": "AbstractRegistry.register(URL url)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void unregister(URL url)", "full_signature": "@Override public void unregister(URL url)", "class_method_signature": "AbstractRegistry.unregister(URL url)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void subscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void subscribe(URL url, NotifyListener listener)", "class_method_signature": "AbstractRegistry.subscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void unsubscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void unsubscribe(URL url, NotifyListener listener)", "class_method_signature": "AbstractRegistry.unsubscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void recover()", "full_signature": "protected void recover()", "class_method_signature": "AbstractRegistry.recover()", "testcase": false, "constructor": false}, {"identifier": "notify", "parameters": "(List<URL> urls)", "modifiers": "protected", "return": "void", "signature": "void notify(List<URL> urls)", "full_signature": "protected void notify(List<URL> urls)", "class_method_signature": "AbstractRegistry.notify(List<URL> urls)", "testcase": false, "constructor": false}, {"identifier": "notify", "parameters": "(URL url, NotifyListener listener, List<URL> urls)", "modifiers": "protected", "return": "void", "signature": "void notify(URL url, NotifyListener listener, List<URL> urls)", "full_signature": "protected void notify(URL url, NotifyListener listener, List<URL> urls)", "class_method_signature": "AbstractRegistry.notify(URL url, NotifyListener listener, List<URL> urls)", "testcase": false, "constructor": false}, {"identifier": "saveProperties", "parameters": "(URL url)", "modifiers": "private", "return": "void", "signature": "void saveProperties(URL url)", "full_signature": "private void saveProperties(URL url)", "class_method_signature": "AbstractRegistry.saveProperties(URL url)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "AbstractRegistry.destroy()", "testcase": false, "constructor": false}, {"identifier": "acceptable", "parameters": "(URL urlToRegistry)", "modifiers": "protected", "return": "boolean", "signature": "boolean acceptable(URL urlToRegistry)", "full_signature": "protected boolean acceptable(URL urlToRegistry)", "class_method_signature": "AbstractRegistry.acceptable(URL urlToRegistry)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractRegistry.toString()", "testcase": false, "constructor": false}], "file": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/AbstractRegistry.java"}, "focal_method": {"identifier": "unregister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void unregister(URL url) {\n        if (url == null) {\n            throw new IllegalArgumentException(\"unregister url == null\");\n        }\n        if (logger.isInfoEnabled()) {\n            logger.info(\"Unregister: \" + url);\n        }\n        registered.remove(url);\n    }", "signature": "void unregister(URL url)", "full_signature": "@Override public void unregister(URL url)", "class_method_signature": "AbstractRegistry.unregister(URL url)", "testcase": false, "constructor": false, "invocations": ["isInfoEnabled", "info", "remove"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}