{"test_class": {"identifier": "ImageDownscaleStageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int SOURCE_WIDTH = 640;", "modifier": "public static final", "type": "int", "declarator": "SOURCE_WIDTH = 640", "var_name": "SOURCE_WIDTH"}, {"original_string": "public static final int SOURCE_ROW_SIZE = SOURCE_WIDTH * 3;", "modifier": "public static final", "type": "int", "declarator": "SOURCE_ROW_SIZE = SOURCE_WIDTH * 3", "var_name": "SOURCE_ROW_SIZE"}, {"original_string": "public static final int SOURCE_HEIGHT = 480;", "modifier": "public static final", "type": "int", "declarator": "SOURCE_HEIGHT = 480", "var_name": "SOURCE_HEIGHT"}, {"original_string": "public static final int[] DOWNSCALE_RESOLUTION_ONE = {320, 240};", "modifier": "public static final", "type": "int[]", "declarator": "DOWNSCALE_RESOLUTION_ONE = {320, 240}", "var_name": "DOWNSCALE_RESOLUTION_ONE"}, {"original_string": "public GraphManager gm;", "modifier": "public", "type": "GraphManager", "declarator": "gm", "var_name": "gm"}, {"original_string": "public Pipe<ImageSchema> imageInputPipe;", "modifier": "public", "type": "Pipe<ImageSchema>", "declarator": "imageInputPipe", "var_name": "imageInputPipe"}, {"original_string": "public Pipe<ImageSchema>[] downsampleOutputPipes = new Pipe[4];", "modifier": "public", "type": "Pipe<ImageSchema>[]", "declarator": "downsampleOutputPipes = new Pipe[4]", "var_name": "downsampleOutputPipes"}, {"original_string": "public DownsamplePipeReaderState[] downsamplePipeReaderStates = new DownsamplePipeReaderState[downsampleOutputPipes.length];", "modifier": "public", "type": "DownsamplePipeReaderState[]", "declarator": "downsamplePipeReaderStates = new DownsamplePipeReaderState[downsampleOutputPipes.length]", "var_name": "downsamplePipeReaderStates"}], "file": "foglight/src/test/java/com/ociweb/pronghorn/image/ImageDownscaleStageTest.java"}, "test_case": {"identifier": "shouldDownscaleImagesTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDownscaleImagesTest() {\n\n    \tint iterations = 5;\n    \tint j = iterations; \n    \twhile (--j>=0) {\n\t    \t\n\t    \tsetup();\n\t        // Create test scheduler.\n\t        NonThreadScheduler scheduler = new NonThreadScheduler(gm);\n\t        scheduler.startup();\n\t\n\t        // Run until all pipes have written a frame.\n\t        boolean allWritten = false;\n\t        while (!allWritten) {\n\t\n\t            // Run scheduler pipe.\n\t            scheduler.run();\n\t\n\t            // Read from pipes.\n\t            allWritten = true;\n\t            for (int i = 0; i < downsampleOutputPipes.length; i++) {\n\t                switch (i) {\n\t                    case ImageDownscaleStage.R_OUTPUT_IDX:\n\t                        readFromDownsamplePipe(downsampleOutputPipes[i], downsamplePipeReaderStates[i], ImageDownscaleStage.R_OUTPUT_ENCODING);\n\t                        break;\n\t                    case ImageDownscaleStage.G_OUTPUT_IDX:\n\t                        readFromDownsamplePipe(downsampleOutputPipes[i], downsamplePipeReaderStates[i], ImageDownscaleStage.G_OUTPUT_ENCODING);\n\t                        break;\n\t                    case ImageDownscaleStage.B_OUTPUT_IDX:\n\t                        readFromDownsamplePipe(downsampleOutputPipes[i], downsamplePipeReaderStates[i], ImageDownscaleStage.B_OUTPUT_ENCODING);\n\t                        break;\n\t                    case ImageDownscaleStage.MONO_OUTPUT_IDX:\n\t                        readFromDownsamplePipe(downsampleOutputPipes[i], downsamplePipeReaderStates[i], ImageDownscaleStage.MONO_OUTPUT_ENCODING);\n\t                        break;\n\t                }\n\t\n\t                allWritten = allWritten && downsamplePipeReaderStates[i].framesProcessed > 0;\n\t            }\n\t        }\n\t\n\t        // Verify each frame is valid.\n\t        for (int i = 0; i < downsampleOutputPipes.length; i++) {\n\t\n\t            // Discover frame file.\n\t            Path filePath = null;\n\t            switch (i) {\n\t                case ImageDownscaleStage.R_OUTPUT_IDX:\n\t                    filePath = Paths.get(\"src\", \"test\", \"images\", \"cat1-320-240.r8\");\n\t                    break;\n\t                case ImageDownscaleStage.G_OUTPUT_IDX:\n\t                    filePath = Paths.get(\"src\", \"test\", \"images\", \"cat1-320-240.g8\");\n\t                    break;\n\t                case ImageDownscaleStage.B_OUTPUT_IDX:\n\t                    filePath = Paths.get(\"src\", \"test\", \"images\", \"cat1-320-240.b8\");\n\t                    break;\n\t                case ImageDownscaleStage.MONO_OUTPUT_IDX:\n\t                    filePath = Paths.get(\"src\", \"test\", \"images\", \"cat1-320-240.mono\");\n\t                    break;\n\t            }\n\t\n\t            // Read and compare.\n\t            try {\n\t                byte[] fileBytes = Files.readAllBytes(filePath);\n\t                Assert.assertTrue(Arrays.equals(fileBytes, downsamplePipeReaderStates[i].currentFrame));\n\t            } catch (IOException e) {\n\t                Assert.fail(e.getMessage());\n\t            }\n\t        }\n    \t}\n    }", "signature": "void shouldDownscaleImagesTest()", "full_signature": "@Test public void shouldDownscaleImagesTest()", "class_method_signature": "ImageDownscaleStageTest.shouldDownscaleImagesTest()", "testcase": true, "constructor": false, "invocations": ["setup", "startup", "run", "readFromDownsamplePipe", "readFromDownsamplePipe", "readFromDownsamplePipe", "readFromDownsamplePipe", "get", "get", "get", "get", "readAllBytes", "assertTrue", "equals", "fail", "getMessage"]}, "focal_class": {"identifier": "ImageDownscaleStage", "superclass": "extends PronghornStage", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ImageDownscaleStage.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ImageDownscaleStage.class)", "var_name": "logger"}, {"original_string": "private final ByteBuffer encodingBytes = ByteBuffer.wrap(new byte[32]);", "modifier": "private final", "type": "ByteBuffer", "declarator": "encodingBytes = ByteBuffer.wrap(new byte[32])", "var_name": "encodingBytes"}, {"original_string": "private final Pipe<ImageSchema> input;", "modifier": "private final", "type": "Pipe<ImageSchema>", "declarator": "input", "var_name": "input"}, {"original_string": "private final Pipe<ImageSchema>[] outputs;", "modifier": "private final", "type": "Pipe<ImageSchema>[]", "declarator": "outputs", "var_name": "outputs"}, {"original_string": "private final int outputHeight;", "modifier": "private final", "type": "int", "declarator": "outputHeight", "var_name": "outputHeight"}, {"original_string": "private final int outputWidth;", "modifier": "private final", "type": "int", "declarator": "outputWidth", "var_name": "outputWidth"}, {"original_string": "private int imageFrameWidth = -1;", "modifier": "private", "type": "int", "declarator": "imageFrameWidth = -1", "var_name": "imageFrameWidth"}, {"original_string": "private int imageFrameHeight = -1;", "modifier": "private", "type": "int", "declarator": "imageFrameHeight = -1", "var_name": "imageFrameHeight"}, {"original_string": "private int inputFrameColumnsPerOutputColumn = -1;", "modifier": "private", "type": "int", "declarator": "inputFrameColumnsPerOutputColumn = -1", "var_name": "inputFrameColumnsPerOutputColumn"}, {"original_string": "private int inputFrameRowsPerOutputFrameRow = -1;", "modifier": "private", "type": "int", "declarator": "inputFrameRowsPerOutputFrameRow = -1", "var_name": "inputFrameRowsPerOutputFrameRow"}, {"original_string": "private int imageFrameRowsReceived = 0;", "modifier": "private", "type": "int", "declarator": "imageFrameRowsReceived = 0", "var_name": "imageFrameRowsReceived"}, {"original_string": "private int[] imageFrameRowBytesDownsampled = null;", "modifier": "private", "type": "int[]", "declarator": "imageFrameRowBytesDownsampled = null", "var_name": "imageFrameRowBytesDownsampled"}, {"original_string": "private final byte[] imageFrameRowBytesR;", "modifier": "private final", "type": "byte[]", "declarator": "imageFrameRowBytesR", "var_name": "imageFrameRowBytesR"}, {"original_string": "private final byte[] imageFrameRowBytesG;", "modifier": "private final", "type": "byte[]", "declarator": "imageFrameRowBytesG", "var_name": "imageFrameRowBytesG"}, {"original_string": "private final byte[] imageFrameRowBytesB;", "modifier": "private final", "type": "byte[]", "declarator": "imageFrameRowBytesB", "var_name": "imageFrameRowBytesB"}, {"original_string": "private final byte[] imageFrameRowBytesMono;", "modifier": "private final", "type": "byte[]", "declarator": "imageFrameRowBytesMono", "var_name": "imageFrameRowBytesMono"}, {"original_string": "private final byte[][] imageFrameRowBytesLookup;", "modifier": "private final", "type": "byte[][]", "declarator": "imageFrameRowBytesLookup", "var_name": "imageFrameRowBytesLookup"}, {"original_string": "public static final int R_OUTPUT_IDX = 0;", "modifier": "public static final", "type": "int", "declarator": "R_OUTPUT_IDX = 0", "var_name": "R_OUTPUT_IDX"}, {"original_string": "public static final int G_OUTPUT_IDX = 1;", "modifier": "public static final", "type": "int", "declarator": "G_OUTPUT_IDX = 1", "var_name": "G_OUTPUT_IDX"}, {"original_string": "public static final int B_OUTPUT_IDX = 2;", "modifier": "public static final", "type": "int", "declarator": "B_OUTPUT_IDX = 2", "var_name": "B_OUTPUT_IDX"}, {"original_string": "public static final int MONO_OUTPUT_IDX = 3;", "modifier": "public static final", "type": "int", "declarator": "MONO_OUTPUT_IDX = 3", "var_name": "MONO_OUTPUT_IDX"}, {"original_string": "public static final byte[] INPUT_ENCODING = \"RGB24\".getBytes(StandardCharsets.US_ASCII);", "modifier": "public static final", "type": "byte[]", "declarator": "INPUT_ENCODING = \"RGB24\".getBytes(StandardCharsets.US_ASCII)", "var_name": "INPUT_ENCODING"}, {"original_string": "public static final byte[] R_OUTPUT_ENCODING = \"R8\".getBytes(StandardCharsets.US_ASCII);", "modifier": "public static final", "type": "byte[]", "declarator": "R_OUTPUT_ENCODING = \"R8\".getBytes(StandardCharsets.US_ASCII)", "var_name": "R_OUTPUT_ENCODING"}, {"original_string": "public static final byte[] G_OUTPUT_ENCODING = \"G8\".getBytes(StandardCharsets.US_ASCII);", "modifier": "public static final", "type": "byte[]", "declarator": "G_OUTPUT_ENCODING = \"G8\".getBytes(StandardCharsets.US_ASCII)", "var_name": "G_OUTPUT_ENCODING"}, {"original_string": "public static final byte[] B_OUTPUT_ENCODING = \"B8\".getBytes(StandardCharsets.US_ASCII);", "modifier": "public static final", "type": "byte[]", "declarator": "B_OUTPUT_ENCODING = \"B8\".getBytes(StandardCharsets.US_ASCII)", "var_name": "B_OUTPUT_ENCODING"}, {"original_string": "public static final byte[] MONO_OUTPUT_ENCODING = \"MONO8\".getBytes(StandardCharsets.US_ASCII);", "modifier": "public static final", "type": "byte[]", "declarator": "MONO_OUTPUT_ENCODING = \"MONO8\".getBytes(StandardCharsets.US_ASCII)", "var_name": "MONO_OUTPUT_ENCODING"}, {"original_string": "int rows = 0;", "modifier": "", "type": "int", "declarator": "rows = 0", "var_name": "rows"}, {"original_string": "public static final byte[][] OUTPUT_ENCODING_LOOKUP = new byte[][]{R_OUTPUT_ENCODING, G_OUTPUT_ENCODING, B_OUTPUT_ENCODING, MONO_OUTPUT_ENCODING};", "modifier": "public static final", "type": "byte[][]", "declarator": "OUTPUT_ENCODING_LOOKUP = new byte[][]{R_OUTPUT_ENCODING, G_OUTPUT_ENCODING, B_OUTPUT_ENCODING, MONO_OUTPUT_ENCODING}", "var_name": "OUTPUT_ENCODING_LOOKUP"}], "methods": [{"identifier": "assertEncoding", "parameters": "()", "modifiers": "private final", "return": "boolean", "signature": "boolean assertEncoding()", "full_signature": "private final boolean assertEncoding()", "class_method_signature": "ImageDownscaleStage.assertEncoding()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(GraphManager graphManager, Pipe<ImageSchema> input, Pipe<ImageSchema>[] outputs, int outputWidth, int outputHeight)", "modifiers": "public static", "return": "ImageDownscaleStage", "signature": "ImageDownscaleStage newInstance(GraphManager graphManager, Pipe<ImageSchema> input, Pipe<ImageSchema>[] outputs, int outputWidth, int outputHeight)", "full_signature": "public static ImageDownscaleStage newInstance(GraphManager graphManager, Pipe<ImageSchema> input, Pipe<ImageSchema>[] outputs, int outputWidth, int outputHeight)", "class_method_signature": "ImageDownscaleStage.newInstance(GraphManager graphManager, Pipe<ImageSchema> input, Pipe<ImageSchema>[] outputs, int outputWidth, int outputHeight)", "testcase": false, "constructor": false}, {"identifier": "ImageDownscaleStage", "parameters": "(GraphManager graphManager, Pipe<ImageSchema> input, Pipe<ImageSchema>[] outputs, int outputWidth, int outputHeight)", "modifiers": "public", "return": "", "signature": " ImageDownscaleStage(GraphManager graphManager, Pipe<ImageSchema> input, Pipe<ImageSchema>[] outputs, int outputWidth, int outputHeight)", "full_signature": "public  ImageDownscaleStage(GraphManager graphManager, Pipe<ImageSchema> input, Pipe<ImageSchema>[] outputs, int outputWidth, int outputHeight)", "class_method_signature": "ImageDownscaleStage.ImageDownscaleStage(GraphManager graphManager, Pipe<ImageSchema> input, Pipe<ImageSchema>[] outputs, int outputWidth, int outputHeight)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ImageDownscaleStage.run()", "testcase": false, "constructor": false}, {"identifier": "processFrameStart", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processFrameStart()", "full_signature": "private void processFrameStart()", "class_method_signature": "ImageDownscaleStage.processFrameStart()", "testcase": false, "constructor": false}, {"identifier": "publishFrameStartToAll", "parameters": "(final long now, final int frameBytes)", "modifiers": "private", "return": "void", "signature": "void publishFrameStartToAll(final long now, final int frameBytes)", "full_signature": "private void publishFrameStartToAll(final long now, final int frameBytes)", "class_method_signature": "ImageDownscaleStage.publishFrameStartToAll(final long now, final int frameBytes)", "testcase": false, "constructor": false}, {"identifier": "processChunk", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processChunk()", "full_signature": "private void processChunk()", "class_method_signature": "ImageDownscaleStage.processChunk()", "testcase": false, "constructor": false}, {"identifier": "accumulateRowData", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void accumulateRowData()", "full_signature": "private void accumulateRowData()", "class_method_signature": "ImageDownscaleStage.accumulateRowData()", "testcase": false, "constructor": false}, {"identifier": "sumRow", "parameters": "(byte[] data, int mask, int pos, int i, int inputColumnsPerOutputColumn, int w)", "modifiers": "private", "return": "int", "signature": "int sumRow(byte[] data, int mask, int pos, int i, int inputColumnsPerOutputColumn, int w)", "full_signature": "private int sumRow(byte[] data, int mask, int pos, int i, int inputColumnsPerOutputColumn, int w)", "class_method_signature": "ImageDownscaleStage.sumRow(byte[] data, int mask, int pos, int i, int inputColumnsPerOutputColumn, int w)", "testcase": false, "constructor": false}, {"identifier": "finishComputeOfRow", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void finishComputeOfRow()", "full_signature": "private void finishComputeOfRow()", "class_method_signature": "ImageDownscaleStage.finishComputeOfRow()", "testcase": false, "constructor": false}, {"identifier": "publishRowToAll", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void publishRowToAll()", "full_signature": "private void publishRowToAll()", "class_method_signature": "ImageDownscaleStage.publishRowToAll()", "testcase": false, "constructor": false}, {"identifier": "outputsHaveRoom", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean outputsHaveRoom()", "full_signature": "private boolean outputsHaveRoom()", "class_method_signature": "ImageDownscaleStage.outputsHaveRoom()", "testcase": false, "constructor": false}], "file": "foglight/src/main/java/com/ociweb/pronghorn/image/ImageDownscaleStage.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n\n        while (outputsHaveRoom() && PipeReader.tryReadFragment(input)) {\n            int msgIdx = PipeReader.getMsgIdx(input);\n            if (msgIdx == ImageSchema.MSG_FRAMECHUNK_2) {\n                processChunk();\n            } else if (msgIdx == ImageSchema.MSG_FRAMESTART_1) {\n                processFrameStart();\n            }\n            PipeReader.releaseReadLock(input);\n        }\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ImageDownscaleStage.run()", "testcase": false, "constructor": false, "invocations": ["outputsHaveRoom", "tryReadFragment", "getMsgIdx", "processChunk", "processFrameStart", "releaseReadLock"]}, "repository": {"repo_id": 44977869, "url": "https://github.com/oci-pronghorn/FogLight", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 124921, "license": "licensed"}}