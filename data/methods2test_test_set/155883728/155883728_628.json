{"test_class": {"identifier": "LockFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/lock/LockFacadeTest.java"}, "test_case": {"identifier": "testIsSessionScoped", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsSessionScoped() {\n        Lock delegate = mock(Lock.class);\n        LockFacade<Session> facade = getFacade(delegate);\n        when(delegate.isSessionScoped()).thenReturn(true);\n        assertTrue(\"is true\", facade.isSessionScoped());\n    }", "signature": "void testIsSessionScoped()", "full_signature": "@Test public void testIsSessionScoped()", "class_method_signature": "LockFacadeTest.testIsSessionScoped()", "testcase": true, "constructor": false, "invocations": ["mock", "getFacade", "thenReturn", "when", "isSessionScoped", "assertTrue", "isSessionScoped"]}, "focal_class": {"identifier": "LockFacade", "superclass": "", "interfaces": "implements Lock", "fields": [{"original_string": "private final @NotNull Lock delegate;", "modifier": "private final @NotNull", "type": "Lock", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final @NotNull SessionFacade<S> session;", "modifier": "private final @NotNull", "type": "SessionFacade<S>", "declarator": "session", "var_name": "session"}], "methods": [{"identifier": "LockFacade", "parameters": "(final @NotNull Lock delegate, final @NotNull SessionFacade<S> session)", "modifiers": "public", "return": "", "signature": " LockFacade(final @NotNull Lock delegate, final @NotNull SessionFacade<S> session)", "full_signature": "public  LockFacade(final @NotNull Lock delegate, final @NotNull SessionFacade<S> session)", "class_method_signature": "LockFacade.LockFacade(final @NotNull Lock delegate, final @NotNull SessionFacade<S> session)", "testcase": false, "constructor": true}, {"identifier": "getLockOwner", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLockOwner()", "full_signature": "@Override public String getLockOwner()", "class_method_signature": "LockFacade.getLockOwner()", "testcase": false, "constructor": false}, {"identifier": "isDeep", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDeep()", "full_signature": "@Override public boolean isDeep()", "class_method_signature": "LockFacade.isDeep()", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "()", "modifiers": "@Override public", "return": "Node", "signature": "Node getNode()", "full_signature": "@Override public Node getNode()", "class_method_signature": "LockFacade.getNode()", "testcase": false, "constructor": false}, {"identifier": "getLockToken", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLockToken()", "full_signature": "@Override public String getLockToken()", "class_method_signature": "LockFacade.getLockToken()", "testcase": false, "constructor": false}, {"identifier": "getSecondsRemaining", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getSecondsRemaining()", "full_signature": "@Override public long getSecondsRemaining()", "class_method_signature": "LockFacade.getSecondsRemaining()", "testcase": false, "constructor": false}, {"identifier": "isLive", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLive()", "full_signature": "@Override public boolean isLive()", "class_method_signature": "LockFacade.isLive()", "testcase": false, "constructor": false}, {"identifier": "isSessionScoped", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSessionScoped()", "full_signature": "@Override public boolean isSessionScoped()", "class_method_signature": "LockFacade.isSessionScoped()", "testcase": false, "constructor": false}, {"identifier": "isLockOwningSession", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLockOwningSession()", "full_signature": "@Override public boolean isLockOwningSession()", "class_method_signature": "LockFacade.isLockOwningSession()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void refresh()", "full_signature": "@Override public void refresh()", "class_method_signature": "LockFacade.refresh()", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/lock/LockFacade.java"}, "focal_method": {"identifier": "isSessionScoped", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isSessionScoped() {\n        return delegate.isSessionScoped();\n    }", "signature": "boolean isSessionScoped()", "full_signature": "@Override public boolean isSessionScoped()", "class_method_signature": "LockFacade.isSessionScoped()", "testcase": false, "constructor": false, "invocations": ["isSessionScoped"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}