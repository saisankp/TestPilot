{"test_class": {"identifier": "NumberUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/util/src/test/java/hera/util/NumberUtilsTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testParse() throws ClassNotFoundException {\n    final Object[][] testParameters = new Object[][] {{\"127\", Byte.class, (byte) 127},\n        {\"128\", Short.class, (short) 128}, {\"255\", Integer.class, 255}, {\"256\", Long.class, 256L},\n        {\"511\", BigInteger.class, BigInteger.valueOf(511)},\n        {\"512\", BigInteger.class, new BigDecimal(\"512\").toBigInteger()},\n        {\"1023\", Float.class, 1023f}, {\"1024\", Double.class, 1024d},\n        {\"2047\", BigDecimal.class, new BigDecimal(\"2047\")}};\n\n    for (final Object[] testParameter : testParameters) {\n      Object expected = Class.forName(testParameter[2].getClass().getName()).cast(testParameter[2]);\n      String text = (String) testParameter[0];\n      Class<?> clazz = (Class<?>) testParameter[1];\n      assertEquals(expected, NumberUtils.parse(text, clazz));\n    }\n  }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "NumberUtilsTest.testParse()", "testcase": true, "constructor": false, "invocations": ["valueOf", "toBigInteger", "cast", "forName", "getName", "getClass", "assertEquals", "parse"]}, "focal_class": {"identifier": "NumberUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(final Number number, final Class<T> targetClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T convert(final Number number, final Class<T> targetClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T convert(final Number number, final Class<T> targetClass)", "class_method_signature": "NumberUtils.convert(final Number number, final Class<T> targetClass)", "testcase": false, "constructor": false}, {"identifier": "throwOverflowException", "parameters": "(final Number number, final Class<?> targetClass)", "modifiers": "private static", "return": "void", "signature": "void throwOverflowException(final Number number, final Class<?> targetClass)", "full_signature": "private static void throwOverflowException(final Number number, final Class<?> targetClass)", "class_method_signature": "NumberUtils.throwOverflowException(final Number number, final Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String text, final Class<?> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T parse(final String text, final Class<?> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T parse(final String text, final Class<?> clazz)", "class_method_signature": "NumberUtils.parse(final String text, final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "modifiers": "public static", "return": "T", "signature": "T parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "full_signature": "public static T parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "class_method_signature": "NumberUtils.parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "testcase": false, "constructor": false}, {"identifier": "decodeBigInteger", "parameters": "(final String value)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger decodeBigInteger(final String value)", "full_signature": "private static BigInteger decodeBigInteger(final String value)", "class_method_signature": "NumberUtils.decodeBigInteger(final String value)", "testcase": false, "constructor": false}, {"identifier": "positiveToByteArray", "parameters": "(final BigInteger positiveNumber)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] positiveToByteArray(final BigInteger positiveNumber)", "full_signature": "public static byte[] positiveToByteArray(final BigInteger positiveNumber)", "class_method_signature": "NumberUtils.positiveToByteArray(final BigInteger positiveNumber)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToPositive", "parameters": "(final byte[] rawBytes)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger byteArrayToPositive(final byte[] rawBytes)", "full_signature": "public static BigInteger byteArrayToPositive(final byte[] rawBytes)", "class_method_signature": "NumberUtils.byteArrayToPositive(final byte[] rawBytes)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/NumberUtils.java"}, "focal_method": {"identifier": "parse", "parameters": "(final String text, final Class<?> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n  public static <T> T parse(final String text, final Class<?> clazz) {\n    assertNotNull(text, \"Text must not be null\");\n    assertNotNull(clazz, \"Target class must not be null\");\n\n    final String trimmed = StringUtils.trim(text);\n\n    if (clazz.equals(Byte.class) || clazz.equals(byte.class)) {\n      return (T) Byte.decode(trimmed);\n    } else if (clazz.equals(Short.class) || clazz.equals(short.class)) {\n      return (T) Short.decode(trimmed);\n    } else if (clazz.equals(Integer.class) || clazz.equals(int.class)) {\n      return (T) Integer.decode(trimmed);\n    } else if (clazz.equals(Long.class) || clazz.equals(long.class)) {\n      return (T) Long.decode(trimmed);\n    } else if (clazz.equals(BigInteger.class)) {\n      return (T) decodeBigInteger(trimmed);\n    } else if (clazz.equals(Float.class) || clazz.equals(float.class)) {\n      return (T) Float.valueOf(trimmed);\n    } else if (clazz.equals(Double.class) || clazz.equals(double.class)) {\n      return (T) Double.valueOf(trimmed);\n    } else if (clazz.equals(BigDecimal.class) || clazz.equals(Number.class)) {\n      return (T) new BigDecimal(trimmed);\n    } else {\n      throw new IllegalArgumentException(\n          \"Cannot convert String [\" + text + \"] to target class [\" + clazz.getName() + \"]\");\n    }\n  }", "signature": "T parse(final String text, final Class<?> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T parse(final String text, final Class<?> clazz)", "class_method_signature": "NumberUtils.parse(final String text, final Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "assertNotNull", "trim", "equals", "equals", "decode", "equals", "equals", "decode", "equals", "equals", "decode", "equals", "equals", "decode", "equals", "decodeBigInteger", "equals", "equals", "valueOf", "equals", "equals", "valueOf", "equals", "equals", "getName"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}