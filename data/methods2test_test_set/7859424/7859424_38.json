{"test_class": {"identifier": "LgrfUpdaterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Player player;", "modifier": "private", "type": "Player", "declarator": "player", "var_name": "player"}, {"original_string": "private CoordinateSystem coords;", "modifier": "private", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}, {"original_string": "private LgrfUpdater updater;", "modifier": "private", "type": "LgrfUpdater", "declarator": "updater", "var_name": "updater"}, {"original_string": "private LgrfTable lgrfTable;", "modifier": "private", "type": "LgrfTable", "declarator": "lgrfTable", "var_name": "lgrfTable"}], "file": "src/edu/lclark/orego/mcts/LgrfUpdaterTest.java"}, "test_case": {"identifier": "testLgrfUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testLgrfUpdate(){\n\t\tMcRunnable runnable = player.getMcRunnable(0);\n\t\trunnable.acceptMove(coords.at(\"a1\"));\n\t\trunnable.acceptMove(coords.at(\"b1\"));\n\t\trunnable.acceptMove(coords.at(\"c1\"));\n\t\tupdater.updateTree(BLACK, runnable);\n\t\tassertEquals(coords.at(\"c1\"), lgrfTable.getFirstLevelReply(BLACK, coords.at(\"b1\")));\n\t\tassertEquals(coords.at(\"a1\"), lgrfTable.getFirstLevelReply(BLACK, NO_POINT));\n\t\tassertEquals(coords.at(\"a1\"), lgrfTable.getSecondLevelReply(BLACK, NO_POINT, NO_POINT));\n\t\tassertEquals(NO_POINT, lgrfTable.getFirstLevelReply(BLACK, coords.at(\"a1\")));\n\t\tassertEquals(coords.at(\"c1\"), lgrfTable.getSecondLevelReply(BLACK, coords.at(\"a1\"), coords.at(\"b1\")));\n\t}", "signature": "void testLgrfUpdate()", "full_signature": "@Test public void testLgrfUpdate()", "class_method_signature": "LgrfUpdaterTest.testLgrfUpdate()", "testcase": true, "constructor": false, "invocations": ["getMcRunnable", "acceptMove", "at", "acceptMove", "at", "acceptMove", "at", "updateTree", "assertEquals", "at", "getFirstLevelReply", "at", "assertEquals", "at", "getFirstLevelReply", "assertEquals", "at", "getSecondLevelReply", "assertEquals", "getFirstLevelReply", "at", "assertEquals", "at", "getSecondLevelReply", "at", "at"]}, "focal_class": {"identifier": "LgrfUpdater", "superclass": "", "interfaces": "implements TreeUpdater", "fields": [{"original_string": "private final LgrfTable table;", "modifier": "private final", "type": "LgrfTable", "declarator": "table", "var_name": "table"}, {"original_string": "private final TreeUpdater updater;", "modifier": "private final", "type": "TreeUpdater", "declarator": "updater", "var_name": "updater"}], "methods": [{"identifier": "LgrfUpdater", "parameters": "(TreeUpdater updater, LgrfTable table)", "modifiers": "public", "return": "", "signature": " LgrfUpdater(TreeUpdater updater, LgrfTable table)", "full_signature": "public  LgrfUpdater(TreeUpdater updater, LgrfTable table)", "class_method_signature": "LgrfUpdater.LgrfUpdater(TreeUpdater updater, LgrfTable table)", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "LgrfUpdater.clear()", "testcase": false, "constructor": false}, {"identifier": "getGestation", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getGestation()", "full_signature": "@Override public int getGestation()", "class_method_signature": "LgrfUpdater.getGestation()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "@Override public", "return": "SearchNode", "signature": "SearchNode getRoot()", "full_signature": "@Override public SearchNode getRoot()", "class_method_signature": "LgrfUpdater.getRoot()", "testcase": false, "constructor": false}, {"identifier": "getTable", "parameters": "()", "modifiers": "", "return": "LgrfTable", "signature": "LgrfTable getTable()", "full_signature": " LgrfTable getTable()", "class_method_signature": "LgrfUpdater.getTable()", "testcase": false, "constructor": false}, {"identifier": "updateForAcceptMove", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void updateForAcceptMove()", "full_signature": "@Override public void updateForAcceptMove()", "class_method_signature": "LgrfUpdater.updateForAcceptMove()", "testcase": false, "constructor": false}, {"identifier": "updateTree", "parameters": "(Color winner, McRunnable runnable)", "modifiers": "@Override public", "return": "void", "signature": "void updateTree(Color winner, McRunnable runnable)", "full_signature": "@Override public void updateTree(Color winner, McRunnable runnable)", "class_method_signature": "LgrfUpdater.updateTree(Color winner, McRunnable runnable)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/mcts/LgrfUpdater.java"}, "focal_method": {"identifier": "updateTree", "parameters": "(Color winner, McRunnable runnable)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void updateTree(Color winner, McRunnable runnable) {\n\t\tupdater.updateTree(winner, runnable);\n\t\tHistoryObserver history = runnable.getHistoryObserver();\n\t\tif (winner != VACANT) {\n\t\t\tBoard playerBoard = runnable.getPlayer().getBoard();\n\t\t\tint turn = runnable.getTurn();\n\t\t\tboolean win = winner == playerBoard.getColorToPlay();\n\t\t\tStoneColor color = playerBoard.getColorToPlay();\n\t\t\tint t = playerBoard.getTurn();\n\t\t\tshort penultimate = history.get(t - 2);\n\t\t\tshort previous = history.get(t - 1);\n\t\t\tfor (; t < turn; t++) {\n\t\t\t\tshort reply = history.get(t);\n\t\t\t\ttable.update(color, win, penultimate, previous, reply);\n\t\t\t\twin = !win;\n\t\t\t\tpenultimate = previous;\n\t\t\t\tprevious = reply;\n\t\t\t\tcolor = color.opposite();\n\t\t\t}\n\t\t}\n\t}", "signature": "void updateTree(Color winner, McRunnable runnable)", "full_signature": "@Override public void updateTree(Color winner, McRunnable runnable)", "class_method_signature": "LgrfUpdater.updateTree(Color winner, McRunnable runnable)", "testcase": false, "constructor": false, "invocations": ["updateTree", "getHistoryObserver", "getBoard", "getPlayer", "getTurn", "getColorToPlay", "getColorToPlay", "getTurn", "get", "get", "get", "update", "opposite"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}