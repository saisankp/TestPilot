{"test_class": {"identifier": "CentralCollectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/core/src/test/java/org/glowroot/agent/central/CentralCollectorTest.java"}, "test_case": {"identifier": "shouldCheckAgentVersionAgainstCentralVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCheckAgentVersionAgainstCentralVersion() {\n        assertThat(CentralCollector.isAgentVersionGreaterThanCentralVersion(\"1.10.2\", \"1.10.1\"))\n                .isTrue();\n        assertThat(CentralCollector.isAgentVersionGreaterThanCentralVersion(\"1.10.2\", \"1.10.2\"))\n                .isFalse();\n        assertThat(CentralCollector.isAgentVersionGreaterThanCentralVersion(\"1.10.2\", \"1.10.3\"))\n                .isFalse();\n\n        assertThat(CentralCollector.isAgentVersionGreaterThanCentralVersion(\"1.10.2\", \"1.9.2\"))\n                .isTrue();\n        assertThat(CentralCollector.isAgentVersionGreaterThanCentralVersion(\"1.10.2\", \"1.10.2\"))\n                .isFalse();\n        assertThat(CentralCollector.isAgentVersionGreaterThanCentralVersion(\"1.10.2\", \"1.11.2\"))\n                .isFalse();\n\n        assertThat(CentralCollector.isAgentVersionGreaterThanCentralVersion(\"1.10.2\", \"0.10.2\"))\n                .isTrue();\n        assertThat(CentralCollector.isAgentVersionGreaterThanCentralVersion(\"1.10.2\", \"1.10.2\"))\n                .isFalse();\n        assertThat(CentralCollector.isAgentVersionGreaterThanCentralVersion(\"1.10.2\", \"2.10.2\"))\n                .isFalse();\n    }", "signature": "void shouldCheckAgentVersionAgainstCentralVersion()", "full_signature": "@Test public void shouldCheckAgentVersionAgainstCentralVersion()", "class_method_signature": "CentralCollectorTest.shouldCheckAgentVersionAgainstCentralVersion()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "isAgentVersionGreaterThanCentralVersion", "isFalse", "assertThat", "isAgentVersionGreaterThanCentralVersion", "isFalse", "assertThat", "isAgentVersionGreaterThanCentralVersion", "isTrue", "assertThat", "isAgentVersionGreaterThanCentralVersion", "isFalse", "assertThat", "isAgentVersionGreaterThanCentralVersion", "isFalse", "assertThat", "isAgentVersionGreaterThanCentralVersion", "isTrue", "assertThat", "isAgentVersionGreaterThanCentralVersion", "isFalse", "assertThat", "isAgentVersionGreaterThanCentralVersion", "isFalse", "assertThat", "isAgentVersionGreaterThanCentralVersion"]}, "focal_class": {"identifier": "CentralCollector", "superclass": "", "interfaces": "implements Collector", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CentralCollector.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CentralCollector.class)", "var_name": "logger"}, {"original_string": "private static final Logger startupLogger = LoggerFactory.getLogger(\"org.glowroot\");", "modifier": "private static final", "type": "Logger", "declarator": "startupLogger = LoggerFactory.getLogger(\"org.glowroot\")", "var_name": "startupLogger"}, {"original_string": "private static final boolean SKIP_DELAY;", "modifier": "private static final", "type": "boolean", "declarator": "SKIP_DELAY", "var_name": "SKIP_DELAY"}, {"original_string": "private final String agentId;", "modifier": "private final", "type": "String", "declarator": "agentId", "var_name": "agentId"}, {"original_string": "private final String collectorAddress;", "modifier": "private final", "type": "String", "declarator": "collectorAddress", "var_name": "collectorAddress"}, {"original_string": "private final ConfigService configService;", "modifier": "private final", "type": "ConfigService", "declarator": "configService", "var_name": "configService"}, {"original_string": "private final boolean configReadOnly;", "modifier": "private final", "type": "boolean", "declarator": "configReadOnly", "var_name": "configReadOnly"}, {"original_string": "private final File configSyncedFile;", "modifier": "private final", "type": "File", "declarator": "configSyncedFile", "var_name": "configSyncedFile"}, {"original_string": "private final CentralConnection centralConnection;", "modifier": "private final", "type": "CentralConnection", "declarator": "centralConnection", "var_name": "centralConnection"}, {"original_string": "private final CollectorServiceStub collectorServiceStub;", "modifier": "private final", "type": "CollectorServiceStub", "declarator": "collectorServiceStub", "var_name": "collectorServiceStub"}, {"original_string": "private final DownstreamServiceObserver downstreamServiceObserver;", "modifier": "private final", "type": "DownstreamServiceObserver", "declarator": "downstreamServiceObserver", "var_name": "downstreamServiceObserver"}, {"original_string": "private final SharedQueryTextLimiter sharedQueryTextLimiter = new SharedQueryTextLimiter();", "modifier": "private final", "type": "SharedQueryTextLimiter", "declarator": "sharedQueryTextLimiter = new SharedQueryTextLimiter()", "var_name": "sharedQueryTextLimiter"}, {"original_string": "private volatile @MonotonicNonNull Environment environment;", "modifier": "private volatile @MonotonicNonNull", "type": "Environment", "declarator": "environment", "var_name": "environment"}, {"original_string": "private volatile int nextAggregateDelayMillis;", "modifier": "private volatile", "type": "int", "declarator": "nextAggregateDelayMillis", "var_name": "nextAggregateDelayMillis"}], "methods": [{"identifier": "CentralCollector", "parameters": "(Map<String, String> properties, String collectorAddress,\n            @Nullable String collectorAuthority, List<File> confDirs, boolean configReadOnly,\n            LiveJvmServiceImpl liveJvmService, LiveWeavingServiceImpl liveWeavingService,\n            LiveTraceRepositoryImpl liveTraceRepository, AgentConfigUpdater agentConfigUpdater,\n            ConfigService configService)", "modifiers": "public", "return": "", "signature": " CentralCollector(Map<String, String> properties, String collectorAddress,\n            @Nullable String collectorAuthority, List<File> confDirs, boolean configReadOnly,\n            LiveJvmServiceImpl liveJvmService, LiveWeavingServiceImpl liveWeavingService,\n            LiveTraceRepositoryImpl liveTraceRepository, AgentConfigUpdater agentConfigUpdater,\n            ConfigService configService)", "full_signature": "public  CentralCollector(Map<String, String> properties, String collectorAddress,\n            @Nullable String collectorAuthority, List<File> confDirs, boolean configReadOnly,\n            LiveJvmServiceImpl liveJvmService, LiveWeavingServiceImpl liveWeavingService,\n            LiveTraceRepositoryImpl liveTraceRepository, AgentConfigUpdater agentConfigUpdater,\n            ConfigService configService)", "class_method_signature": "CentralCollector.CentralCollector(Map<String, String> properties, String collectorAddress,\n            @Nullable String collectorAuthority, List<File> confDirs, boolean configReadOnly,\n            LiveJvmServiceImpl liveJvmService, LiveWeavingServiceImpl liveWeavingService,\n            LiveTraceRepositoryImpl liveTraceRepository, AgentConfigUpdater agentConfigUpdater,\n            ConfigService configService)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(List<File> confDirs, final Environment environment, AgentConfig agentConfig,\n            final AgentConfigUpdater agentConfigUpdater)", "modifiers": "@Override public", "return": "void", "signature": "void init(List<File> confDirs, final Environment environment, AgentConfig agentConfig,\n            final AgentConfigUpdater agentConfigUpdater)", "full_signature": "@Override public void init(List<File> confDirs, final Environment environment, AgentConfig agentConfig,\n            final AgentConfigUpdater agentConfigUpdater)", "class_method_signature": "CentralCollector.init(List<File> confDirs, final Environment environment, AgentConfig agentConfig,\n            final AgentConfigUpdater agentConfigUpdater)", "testcase": false, "constructor": false}, {"identifier": "collectAggregates", "parameters": "(AggregateReader aggregateReader)", "modifiers": "@Override public", "return": "void", "signature": "void collectAggregates(AggregateReader aggregateReader)", "full_signature": "@Override public void collectAggregates(AggregateReader aggregateReader)", "class_method_signature": "CentralCollector.collectAggregates(AggregateReader aggregateReader)", "testcase": false, "constructor": false}, {"identifier": "collectGaugeValues", "parameters": "(List<GaugeValue> gaugeValues)", "modifiers": "@Override public", "return": "void", "signature": "void collectGaugeValues(List<GaugeValue> gaugeValues)", "full_signature": "@Override public void collectGaugeValues(List<GaugeValue> gaugeValues)", "class_method_signature": "CentralCollector.collectGaugeValues(List<GaugeValue> gaugeValues)", "testcase": false, "constructor": false}, {"identifier": "collectTrace", "parameters": "(TraceReader traceReader)", "modifiers": "@Override public", "return": "void", "signature": "void collectTrace(TraceReader traceReader)", "full_signature": "@Override public void collectTrace(TraceReader traceReader)", "class_method_signature": "CentralCollector.collectTrace(TraceReader traceReader)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(LogEvent logEvent)", "modifiers": "@Override public", "return": "void", "signature": "void log(LogEvent logEvent)", "full_signature": "@Override public void log(LogEvent logEvent)", "class_method_signature": "CentralCollector.log(LogEvent logEvent)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@OnlyUsedByTests public", "return": "void", "signature": "void close()", "full_signature": "@OnlyUsedByTests public void close()", "class_method_signature": "CentralCollector.close()", "testcase": false, "constructor": false}, {"identifier": "awaitClose", "parameters": "()", "modifiers": "@OnlyUsedByTests public", "return": "void", "signature": "void awaitClose()", "full_signature": "@OnlyUsedByTests public void awaitClose()", "class_method_signature": "CentralCollector.awaitClose()", "testcase": false, "constructor": false}, {"identifier": "escapeHostname", "parameters": "(String hostname)", "modifiers": "@VisibleForTesting static", "return": "String", "signature": "String escapeHostname(String hostname)", "full_signature": "@VisibleForTesting static String escapeHostname(String hostname)", "class_method_signature": "CentralCollector.escapeHostname(String hostname)", "testcase": false, "constructor": false}, {"identifier": "convertFromV09AgentRollupId", "parameters": "(String agentRollupId)", "modifiers": "private static", "return": "String", "signature": "String convertFromV09AgentRollupId(String agentRollupId)", "full_signature": "private static String convertFromV09AgentRollupId(String agentRollupId)", "class_method_signature": "CentralCollector.convertFromV09AgentRollupId(String agentRollupId)", "testcase": false, "constructor": false}, {"identifier": "isAgentVersionGreaterThanCentralVersion", "parameters": "(String agentVersion,\n            String centralVersion)", "modifiers": "@VisibleForTesting static", "return": "boolean", "signature": "boolean isAgentVersionGreaterThanCentralVersion(String agentVersion,\n            String centralVersion)", "full_signature": "@VisibleForTesting static boolean isAgentVersionGreaterThanCentralVersion(String agentVersion,\n            String centralVersion)", "class_method_signature": "CentralCollector.isAgentVersionGreaterThanCentralVersion(String agentVersion,\n            String centralVersion)", "testcase": false, "constructor": false}, {"identifier": "readConfigSyncedAgentId", "parameters": "(File file)", "modifiers": "private static", "return": "String", "signature": "String readConfigSyncedAgentId(File file)", "full_signature": "private static String readConfigSyncedAgentId(File file)", "class_method_signature": "CentralCollector.readConfigSyncedAgentId(File file)", "testcase": false, "constructor": false}, {"identifier": "writeConfigSyncedFile", "parameters": "(File file, String agentId)", "modifiers": "private static", "return": "void", "signature": "void writeConfigSyncedFile(File file, String agentId)", "full_signature": "private static void writeConfigSyncedFile(File file, String agentId)", "class_method_signature": "CentralCollector.writeConfigSyncedFile(File file, String agentId)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/glowroot/agent/central/CentralCollector.java"}, "focal_method": {"identifier": "isAgentVersionGreaterThanCentralVersion", "parameters": "(String agentVersion,\n            String centralVersion)", "modifiers": "@VisibleForTesting static", "return": "boolean", "body": "@VisibleForTesting\n    static boolean isAgentVersionGreaterThanCentralVersion(String agentVersion,\n            String centralVersion) {\n        Pattern pattern = Pattern.compile(\"(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\\\\b.*\");\n        Matcher matcher = pattern.matcher(agentVersion);\n        if (!matcher.matches()) {\n            if (!agentVersion.equals(Version.UNKNOWN_VERSION)) {\n                // conditional is to suppress warning when running tests\n                startupLogger.warn(\"could not parse agent version: {}\", agentVersion);\n            }\n            return false;\n        }\n        int agentMajor = Integer.parseInt(checkNotNull(matcher.group(1)));\n        int agentMinor = Integer.parseInt(checkNotNull(matcher.group(2)));\n        int agentPatch = Integer.parseInt(checkNotNull(matcher.group(3)));\n\n        matcher = pattern.matcher(centralVersion);\n        if (!matcher.matches()) {\n            if (!centralVersion.equals(\"\")) {\n                // conditional is to suppress warning when running tests\n                startupLogger.warn(\"could not parse central version: {}\", centralVersion);\n            }\n            return false;\n        }\n        int centralMajor = Integer.parseInt(checkNotNull(matcher.group(1)));\n        int centralMinor = Integer.parseInt(checkNotNull(matcher.group(2)));\n        int centralPatch = Integer.parseInt(checkNotNull(matcher.group(3)));\n\n        if (agentMajor > centralMajor) {\n            return true;\n        }\n        if (agentMajor < centralMajor) {\n            return false;\n        }\n        if (agentMinor > centralMinor) {\n            return true;\n        }\n        if (agentMinor < centralMinor) {\n            return false;\n        }\n        return agentPatch > centralPatch;\n    }", "signature": "boolean isAgentVersionGreaterThanCentralVersion(String agentVersion,\n            String centralVersion)", "full_signature": "@VisibleForTesting static boolean isAgentVersionGreaterThanCentralVersion(String agentVersion,\n            String centralVersion)", "class_method_signature": "CentralCollector.isAgentVersionGreaterThanCentralVersion(String agentVersion,\n            String centralVersion)", "testcase": false, "constructor": false, "invocations": ["compile", "matcher", "matches", "equals", "warn", "parseInt", "checkNotNull", "group", "parseInt", "checkNotNull", "group", "parseInt", "checkNotNull", "group", "matcher", "matches", "equals", "warn", "parseInt", "checkNotNull", "group", "parseInt", "checkNotNull", "group", "parseInt", "checkNotNull", "group"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}