{"test_class": {"identifier": "IfTokenResolverTest", "superclass": "extends AbstractTokenResolverTest", "interfaces": "", "fields": [], "file": "dal-jdbc/src/test/java/org/unidal/dal/jdbc/query/token/resolver/IfTokenResolverTest.java"}, "test_case": {"identifier": "testNotNullTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testNotNullTrue() throws Exception {\n      QueryDef query = new QueryDef(\"test\", UserEntity.class, QueryType.SELECT,\n            \"<IF type='NOT_NULL' field='key-user-id'>...</IF>\");\n      User user = new User();\n      QueryContext ctx = getSelectContext(query, user, null);\n\n      user.setKeyUserId(1234);\n      Assert.assertEquals(false, ctx.isWithinIfToken());\n      m_queryResolver.resolve(ctx);\n      Assert.assertEquals(\"...\", ctx.getSqlStatement());\n      Assert.assertEquals(false, ctx.isWithinIfToken());\n   }", "signature": "void testNotNullTrue()", "full_signature": "@Test public void testNotNullTrue()", "class_method_signature": "IfTokenResolverTest.testNotNullTrue()", "testcase": true, "constructor": false, "invocations": ["getSelectContext", "setKeyUserId", "assertEquals", "isWithinIfToken", "resolve", "assertEquals", "getSqlStatement", "assertEquals", "isWithinIfToken"]}, "focal_class": {"identifier": "IfTokenResolver", "superclass": "", "interfaces": "implements TokenResolver, Initializable", "fields": [{"original_string": "@Inject\n   private DataObjectAccessor m_accessor;", "modifier": "@Inject\n   private", "type": "DataObjectAccessor", "declarator": "m_accessor", "var_name": "m_accessor"}, {"original_string": "private Map<String, Expression> m_expressions = new HashMap<String, Expression>();", "modifier": "private", "type": "Map<String, Expression>", "declarator": "m_expressions = new HashMap<String, Expression>()", "var_name": "m_expressions"}], "methods": [{"identifier": "evaluate", "parameters": "(StartTagToken token, QueryContext ctx)", "modifiers": "private", "return": "boolean", "signature": "boolean evaluate(StartTagToken token, QueryContext ctx)", "full_signature": "private boolean evaluate(StartTagToken token, QueryContext ctx)", "class_method_signature": "IfTokenResolver.evaluate(StartTagToken token, QueryContext ctx)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "IfTokenResolver.initialize()", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "IfTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false}], "file": "dal-jdbc/src/main/java/org/unidal/dal/jdbc/query/token/resolver/IfTokenResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "body": "public String resolve(Token token, QueryContext ctx) {\n      if (token.getType() != TokenType.IF) {\n         throw new DalRuntimeException(\"Internal error: only IF token is supported by \" + getClass());\n      }\n\n      if (token instanceof StartTagToken) {\n         if (ctx.isWithinIfToken()) {\n            throw new DalRuntimeException(\"IF token can't be nested\");\n         }\n\n         ctx.setWithinIfToken(true);\n         ctx.setSqlResolveDisabled(!evaluate((StartTagToken) token, ctx));\n         return \"\";\n      } else if (token instanceof EndTagToken) {\n         ctx.setWithinIfToken(false);\n         ctx.setSqlResolveDisabled(false);\n         return \"\";\n      } else {\n         throw new DalRuntimeException(\"Internal error: IF token can only be used as <IF ...> or </IF>\");\n      }\n   }", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "IfTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false, "invocations": ["getType", "getClass", "isWithinIfToken", "setWithinIfToken", "setSqlResolveDisabled", "evaluate", "setWithinIfToken", "setSqlResolveDisabled"]}, "repository": {"repo_id": 6627230, "url": "https://github.com/unidal/frameworks", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 100, "size": 3009, "license": "licensed"}}