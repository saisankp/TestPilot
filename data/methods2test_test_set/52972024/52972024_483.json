{"test_class": {"identifier": "ScopeProviderContainerTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/Scope/ScopeProviderContainer/src/test/java/info/smart_tools/smartactors/scope/scope_provider_container/ScopeProviderContainerTest.java"}, "test_case": {"identifier": "checkScopeProviderExceptionByAdd", "parameters": "()", "modifiers": "@Test (expected = ScopeProviderException.class) public", "return": "void", "body": "@Test (expected = ScopeProviderException.class)\n    public void checkScopeProviderExceptionByAdd()\n            throws Exception {\n        IScope scope = mock(IScope.class);\n        IScopeFactory factory = mock(IScopeFactory.class);\n        IScopeProviderContainer scopeProviderContainer = new ScopeProviderContainer(factory);\n        scopeProviderContainer.addScope(null, scope);\n        fail();\n    }", "signature": "void checkScopeProviderExceptionByAdd()", "full_signature": "@Test (expected = ScopeProviderException.class) public void checkScopeProviderExceptionByAdd()", "class_method_signature": "ScopeProviderContainerTest.checkScopeProviderExceptionByAdd()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "addScope", "fail"]}, "focal_class": {"identifier": "ScopeProviderContainer", "superclass": "", "interfaces": "implements IScopeProviderContainer", "fields": [{"original_string": "private Map<Object, IScope> scopeStorage = new ConcurrentHashMap<Object, IScope>();", "modifier": "private", "type": "Map<Object, IScope>", "declarator": "scopeStorage = new ConcurrentHashMap<Object, IScope>()", "var_name": "scopeStorage"}, {"original_string": "private ThreadLocal<IScope> currentScope = new ThreadLocal<IScope>();", "modifier": "private", "type": "ThreadLocal<IScope>", "declarator": "currentScope = new ThreadLocal<IScope>()", "var_name": "currentScope"}, {"original_string": "private IScopeFactory factory;", "modifier": "private", "type": "IScopeFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private List<IAction<IScope>> handlerStorage = new ArrayList<>();", "modifier": "private", "type": "List<IAction<IScope>>", "declarator": "handlerStorage = new ArrayList<>()", "var_name": "handlerStorage"}], "methods": [{"identifier": "ScopeProviderContainer", "parameters": "(final IScopeFactory factory)", "modifiers": "public", "return": "", "signature": " ScopeProviderContainer(final IScopeFactory factory)", "full_signature": "public  ScopeProviderContainer(final IScopeFactory factory)", "class_method_signature": "ScopeProviderContainer.ScopeProviderContainer(final IScopeFactory factory)", "testcase": false, "constructor": true}, {"identifier": "getScope", "parameters": "(final Object key)", "modifiers": "public", "return": "IScope", "signature": "IScope getScope(final Object key)", "full_signature": "public IScope getScope(final Object key)", "class_method_signature": "ScopeProviderContainer.getScope(final Object key)", "testcase": false, "constructor": false}, {"identifier": "getCurrentScope", "parameters": "()", "modifiers": "public", "return": "IScope", "signature": "IScope getCurrentScope()", "full_signature": "public IScope getCurrentScope()", "class_method_signature": "ScopeProviderContainer.getCurrentScope()", "testcase": false, "constructor": false}, {"identifier": "addScope", "parameters": "(final Object key, final IScope scope)", "modifiers": "public", "return": "void", "signature": "void addScope(final Object key, final IScope scope)", "full_signature": "public void addScope(final Object key, final IScope scope)", "class_method_signature": "ScopeProviderContainer.addScope(final Object key, final IScope scope)", "testcase": false, "constructor": false}, {"identifier": "setCurrentScope", "parameters": "(final IScope scope)", "modifiers": "public", "return": "void", "signature": "void setCurrentScope(final IScope scope)", "full_signature": "public void setCurrentScope(final IScope scope)", "class_method_signature": "ScopeProviderContainer.setCurrentScope(final IScope scope)", "testcase": false, "constructor": false}, {"identifier": "deleteScope", "parameters": "(final Object key)", "modifiers": "public", "return": "void", "signature": "void deleteScope(final Object key)", "full_signature": "public void deleteScope(final Object key)", "class_method_signature": "ScopeProviderContainer.deleteScope(final Object key)", "testcase": false, "constructor": false}, {"identifier": "createScope", "parameters": "(final Object params)", "modifiers": "public", "return": "Object", "signature": "Object createScope(final Object params)", "full_signature": "public Object createScope(final Object params)", "class_method_signature": "ScopeProviderContainer.createScope(final Object params)", "testcase": false, "constructor": false}, {"identifier": "subscribeOnCreationNewScope", "parameters": "(final IAction<IScope> handler)", "modifiers": "@Override public", "return": "void", "signature": "void subscribeOnCreationNewScope(final IAction<IScope> handler)", "full_signature": "@Override public void subscribeOnCreationNewScope(final IAction<IScope> handler)", "class_method_signature": "ScopeProviderContainer.subscribeOnCreationNewScope(final IAction<IScope> handler)", "testcase": false, "constructor": false}, {"identifier": "clearListOfSubscribers", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearListOfSubscribers()", "full_signature": "@Override public void clearListOfSubscribers()", "class_method_signature": "ScopeProviderContainer.clearListOfSubscribers()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Scope/ScopeProviderContainer/src/main/java/info/smart_tools/smartactors/scope/scope_provider_container/ScopeProviderContainer.java"}, "focal_method": {"identifier": "addScope", "parameters": "(final Object key, final IScope scope)", "modifiers": "public", "return": "void", "body": "public void addScope(final Object key, final IScope scope)\n            throws ScopeProviderException {\n        try {\n            scopeStorage.put(key, scope);\n        } catch (Exception e) {\n            throw new ScopeProviderException(\"Error was occurred\", e);\n        }\n    }", "signature": "void addScope(final Object key, final IScope scope)", "full_signature": "public void addScope(final Object key, final IScope scope)", "class_method_signature": "ScopeProviderContainer.addScope(final Object key, final IScope scope)", "testcase": false, "constructor": false, "invocations": ["put"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}