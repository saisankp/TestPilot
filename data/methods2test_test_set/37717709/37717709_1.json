{"test_class": {"identifier": "TestJsapi20RecognitionResult", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml.implementation.jsapi20/src/test/java/org/jvoicexml/implementation/jsapi20/TestJsapi20RecognitionResult.java"}, "test_case": {"identifier": "testGetSemanticInterpretation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSemanticInterpretation() throws Exception, SemanticError {\n        EngineManager.registerEngineListFactory(SphinxEngineListFactory.class\n                .getName());\n        Recognizer recognizer = (Recognizer) EngineManager\n                .createEngine(new RecognizerMode(SpeechLocale.ENGLISH));\n        recognizer.allocate();\n        final GrammarManager manager = recognizer.getGrammarManager();\n        final RuleGrammar grammar = manager.createRuleGrammar(\"grammar:test\",\n                \"test\");\n        final RuleComponent[] components = new RuleComponent[] {\n                new RuleToken(\"test\"), new RuleTag(\"T\") };\n        final RuleSequence sequence = new RuleSequence(components);\n        final Rule root = new Rule(\"test\", sequence, Rule.PUBLIC);\n        grammar.addRule(root);\n        recognizer.processGrammars();\n        final BaseResult result = new BaseResult(grammar, \"test\");\n        final Jsapi20RecognitionResult res = new Jsapi20RecognitionResult(\n                result);\n        final DataModel model = Mockito.mock(DataModel.class);\n        Assert.assertEquals(\"T\", res.getSemanticInterpretation(model));\n    }", "signature": "void testGetSemanticInterpretation()", "full_signature": "@Test public void testGetSemanticInterpretation()", "class_method_signature": "TestJsapi20RecognitionResult.testGetSemanticInterpretation()", "testcase": true, "constructor": false, "invocations": ["registerEngineListFactory", "getName", "createEngine", "allocate", "getGrammarManager", "createRuleGrammar", "addRule", "processGrammars", "mock", "assertEquals", "getSemanticInterpretation"]}, "focal_class": {"identifier": "Jsapi20RecognitionResult", "superclass": "", "interfaces": "implements RecognitionResult", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(Jsapi20RecognitionResult.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(Jsapi20RecognitionResult.class)", "var_name": "LOGGER"}, {"original_string": "private Object interpretation;", "modifier": "private", "type": "Object", "declarator": "interpretation", "var_name": "interpretation"}, {"original_string": "private final Result result;", "modifier": "private final", "type": "Result", "declarator": "result", "var_name": "result"}, {"original_string": "private String markname;", "modifier": "private", "type": "String", "declarator": "markname", "var_name": "markname"}], "methods": [{"identifier": "Jsapi20RecognitionResult", "parameters": "(final Result res)", "modifiers": "public", "return": "", "signature": " Jsapi20RecognitionResult(final Result res)", "full_signature": "public  Jsapi20RecognitionResult(final Result res)", "class_method_signature": "Jsapi20RecognitionResult.Jsapi20RecognitionResult(final Result res)", "testcase": false, "constructor": true}, {"identifier": "getUtterance", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getUtterance()", "full_signature": "@Override public String getUtterance()", "class_method_signature": "Jsapi20RecognitionResult.getUtterance()", "testcase": false, "constructor": false}, {"identifier": "isAccepted", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAccepted()", "full_signature": "@Override public boolean isAccepted()", "class_method_signature": "Jsapi20RecognitionResult.isAccepted()", "testcase": false, "constructor": false}, {"identifier": "setMark", "parameters": "(final String mark)", "modifiers": "@Override public", "return": "void", "signature": "void setMark(final String mark)", "full_signature": "@Override public void setMark(final String mark)", "class_method_signature": "Jsapi20RecognitionResult.setMark(final String mark)", "testcase": false, "constructor": false}, {"identifier": "getMark", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMark()", "full_signature": "@Override public String getMark()", "class_method_signature": "Jsapi20RecognitionResult.getMark()", "testcase": false, "constructor": false}, {"identifier": "getConfidence", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getConfidence()", "full_signature": "@Override public float getConfidence()", "class_method_signature": "Jsapi20RecognitionResult.getConfidence()", "testcase": false, "constructor": false}, {"identifier": "getWordsConfidence", "parameters": "()", "modifiers": "@Override public", "return": "float[]", "signature": "float[] getWordsConfidence()", "full_signature": "@Override public float[] getWordsConfidence()", "class_method_signature": "Jsapi20RecognitionResult.getWordsConfidence()", "testcase": false, "constructor": false}, {"identifier": "getWords", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getWords()", "full_signature": "@Override public String[] getWords()", "class_method_signature": "Jsapi20RecognitionResult.getWords()", "testcase": false, "constructor": false}, {"identifier": "getMode", "parameters": "()", "modifiers": "@Override public", "return": "ModeType", "signature": "ModeType getMode()", "full_signature": "@Override public ModeType getMode()", "class_method_signature": "Jsapi20RecognitionResult.getMode()", "testcase": false, "constructor": false}, {"identifier": "getSemanticInterpretation", "parameters": "(final DataModel model)", "modifiers": "@Override public", "return": "Object", "signature": "Object getSemanticInterpretation(final DataModel model)", "full_signature": "@Override public Object getSemanticInterpretation(final DataModel model)", "class_method_signature": "Jsapi20RecognitionResult.getSemanticInterpretation(final DataModel model)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final Object[] objecttags)", "modifiers": "private", "return": "String[]", "signature": "String[] toString(final Object[] objecttags)", "full_signature": "private String[] toString(final Object[] objecttags)", "class_method_signature": "Jsapi20RecognitionResult.toString(final Object[] objecttags)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Jsapi20RecognitionResult.toString()", "testcase": false, "constructor": false}], "file": "org.jvoicexml.implementation.jsapi20/src/main/java/org/jvoicexml/implementation/jsapi20/Jsapi20RecognitionResult.java"}, "focal_method": {"identifier": "getSemanticInterpretation", "parameters": "(final DataModel model)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object getSemanticInterpretation(final DataModel model)\n            throws SemanticError {\n        if (interpretation == null) {\n            final FinalResult finalResult = (FinalResult) result;\n            final Object[] objecttags = finalResult.getTags(0);\n            if ((objecttags == null) || (objecttags.length == 0)) {\n                return null;\n            }\n            final String[] tags = toString(objecttags);\n            model.createVariable(\"out\");\n            for (String tag : tags) {\n                if (tag.trim().endsWith(\";\")) {\n                    model.evaluateExpression(tag, Object.class);\n                } else {\n                    model.updateVariable(\"out\", tag);\n                }\n            }\n            interpretation = model.readVariable(\"out\", Object.class);\n            final String log = model.toString(interpretation);\n            LOGGER.info(\"created semantic interpretation '\" + log + \"'\");\n        }\n        return interpretation;\n    }", "signature": "Object getSemanticInterpretation(final DataModel model)", "full_signature": "@Override public Object getSemanticInterpretation(final DataModel model)", "class_method_signature": "Jsapi20RecognitionResult.getSemanticInterpretation(final DataModel model)", "testcase": false, "constructor": false, "invocations": ["getTags", "toString", "createVariable", "endsWith", "trim", "evaluateExpression", "updateVariable", "readVariable", "toString", "info"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}