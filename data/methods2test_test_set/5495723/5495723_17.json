{"test_class": {"identifier": "ProBInstanceProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "de.prob2.kernel/src/test/java/de/prob/cli/ProBInstanceProviderTest.java"}, "test_case": {"identifier": "testExtractCliInformation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExtractCliInformation() {\n\t\tProBInstanceProvider factory = Main.getInjector().getInstance(\n\t\t\t\tProBInstanceProvider.class);\n\n\t\tString text = \"No file to process\\nStarting Socket Server\\n\"\n\t\t\t\t+ \"Application Path: /Users/bendisposto/.prob\\nPort: 61013\\n\"\n\t\t\t\t+ \"probcli revision: $Rev$\\nuser interrupt reference id: 57124\\n\"\n\t\t\t\t+ \"-- starting command loop --\";\n\n\t\tBufferedReader reader = new BufferedReader(new StringReader(text));\n\n\t\tMap<Class<? extends AbstractCliPattern<?>>, AbstractCliPattern<?>> info = factory\n\t\t\t\t.extractCliInformation(reader);\n\n\t\tassertNotNull(info.get(InterruptRefPattern.class));\n\n\t\tassertNotNull(info.get(PortPattern.class));\n\n\t}", "signature": "void testExtractCliInformation()", "full_signature": "@Test public void testExtractCliInformation()", "class_method_signature": "ProBInstanceProviderTest.testExtractCliInformation()", "testcase": true, "constructor": false, "invocations": ["getInstance", "getInjector", "extractCliInformation", "assertNotNull", "get", "assertNotNull", "get"]}, "focal_class": {"identifier": "ProBInstanceProvider", "superclass": "", "interfaces": "implements Provider<ProBInstance>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ProBInstanceProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ProBInstanceProvider.class)", "var_name": "logger"}, {"original_string": "private final PrologProcessProvider processProvider;", "modifier": "private final", "type": "PrologProcessProvider", "declarator": "processProvider", "var_name": "processProvider"}, {"original_string": "private final String home;", "modifier": "private final", "type": "String", "declarator": "home", "var_name": "home"}, {"original_string": "private final OsSpecificInfo osInfo;", "modifier": "private final", "type": "OsSpecificInfo", "declarator": "osInfo", "var_name": "osInfo"}, {"original_string": "private final AtomicInteger processCounter;", "modifier": "private final", "type": "AtomicInteger", "declarator": "processCounter", "var_name": "processCounter"}, {"original_string": "private final Set<WeakReference<ProBInstance>> processes = new HashSet<>();", "modifier": "private final", "type": "Set<WeakReference<ProBInstance>>", "declarator": "processes = new HashSet<>()", "var_name": "processes"}], "methods": [{"identifier": "ProBInstanceProvider", "parameters": "(final PrologProcessProvider processProvider,\n\t\t\t@Home final String home, final OsSpecificInfo osInfo, final Installer installer)", "modifiers": "@Inject public", "return": "", "signature": " ProBInstanceProvider(final PrologProcessProvider processProvider,\n\t\t\t@Home final String home, final OsSpecificInfo osInfo, final Installer installer)", "full_signature": "@Inject public  ProBInstanceProvider(final PrologProcessProvider processProvider,\n\t\t\t@Home final String home, final OsSpecificInfo osInfo, final Installer installer)", "class_method_signature": "ProBInstanceProvider.ProBInstanceProvider(final PrologProcessProvider processProvider,\n\t\t\t@Home final String home, final OsSpecificInfo osInfo, final Installer installer)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "ProBInstance", "signature": "ProBInstance get()", "full_signature": "@Override public ProBInstance get()", "class_method_signature": "ProBInstanceProvider.get()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "()", "modifiers": "public", "return": "ProBInstance", "signature": "ProBInstance create()", "full_signature": "public ProBInstance create()", "class_method_signature": "ProBInstanceProvider.create()", "testcase": false, "constructor": false}, {"identifier": "numberOfCLIs", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int numberOfCLIs()", "full_signature": "public int numberOfCLIs()", "class_method_signature": "ProBInstanceProvider.numberOfCLIs()", "testcase": false, "constructor": false}, {"identifier": "shutdownAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdownAll()", "full_signature": "public void shutdownAll()", "class_method_signature": "ProBInstanceProvider.shutdownAll()", "testcase": false, "constructor": false}, {"identifier": "getOptionalProcessExitCode", "parameters": "(final Process process)", "modifiers": "private static", "return": "Integer", "signature": "Integer getOptionalProcessExitCode(final Process process)", "full_signature": "private static Integer getOptionalProcessExitCode(final Process process)", "class_method_signature": "ProBInstanceProvider.getOptionalProcessExitCode(final Process process)", "testcase": false, "constructor": false}, {"identifier": "startProlog", "parameters": "()", "modifiers": "private", "return": "ProBInstance", "signature": "ProBInstance startProlog()", "full_signature": "private ProBInstance startProlog()", "class_method_signature": "ProBInstanceProvider.startProlog()", "testcase": false, "constructor": false}, {"identifier": "extractCliInformation", "parameters": "(\n\t\t\tfinal BufferedReader input)", "modifiers": "", "return": "Map<Class<? extends AbstractCliPattern<?>>, AbstractCliPattern<?>>", "signature": "Map<Class<? extends AbstractCliPattern<?>>, AbstractCliPattern<?>> extractCliInformation(\n\t\t\tfinal BufferedReader input)", "full_signature": " Map<Class<? extends AbstractCliPattern<?>>, AbstractCliPattern<?>> extractCliInformation(\n\t\t\tfinal BufferedReader input)", "class_method_signature": "ProBInstanceProvider.extractCliInformation(\n\t\t\tfinal BufferedReader input)", "testcase": false, "constructor": false}, {"identifier": "analyseStdout", "parameters": "(final BufferedReader input, final Collection<? extends AbstractCliPattern<?>> patterns)", "modifiers": "private static", "return": "void", "signature": "void analyseStdout(final BufferedReader input, final Collection<? extends AbstractCliPattern<?>> patterns)", "full_signature": "private static void analyseStdout(final BufferedReader input, final Collection<? extends AbstractCliPattern<?>> patterns)", "class_method_signature": "ProBInstanceProvider.analyseStdout(final BufferedReader input, final Collection<? extends AbstractCliPattern<?>> patterns)", "testcase": false, "constructor": false}, {"identifier": "applyPatterns", "parameters": "(final Collection<? extends AbstractCliPattern<?>> patterns, final String line)", "modifiers": "private static", "return": "void", "signature": "void applyPatterns(final Collection<? extends AbstractCliPattern<?>> patterns, final String line)", "full_signature": "private static void applyPatterns(final Collection<? extends AbstractCliPattern<?>> patterns, final String line)", "class_method_signature": "ProBInstanceProvider.applyPatterns(final Collection<? extends AbstractCliPattern<?>> patterns, final String line)", "testcase": false, "constructor": false}], "file": "de.prob2.kernel/src/main/java/de/prob/cli/ProBInstanceProvider.java"}, "focal_method": {"identifier": "extractCliInformation", "parameters": "(\n\t\t\tfinal BufferedReader input)", "modifiers": "", "return": "Map<Class<? extends AbstractCliPattern<?>>, AbstractCliPattern<?>>", "body": "Map<Class<? extends AbstractCliPattern<?>>, AbstractCliPattern<?>> extractCliInformation(\n\t\t\tfinal BufferedReader input) {\n\t\tfinal PortPattern portPattern = new PortPattern();\n\t\tfinal InterruptRefPattern intPattern = new InterruptRefPattern();\n\n\t\tMap<Class<? extends AbstractCliPattern<?>>, AbstractCliPattern<?>> pattern = new HashMap<>();\n\t\tpattern.put(PortPattern.class, portPattern);\n\t\tpattern.put(InterruptRefPattern.class, intPattern);\n\t\tanalyseStdout(input, pattern.values());\n\t\treturn pattern;\n\t}", "signature": "Map<Class<? extends AbstractCliPattern<?>>, AbstractCliPattern<?>> extractCliInformation(\n\t\t\tfinal BufferedReader input)", "full_signature": " Map<Class<? extends AbstractCliPattern<?>>, AbstractCliPattern<?>> extractCliInformation(\n\t\t\tfinal BufferedReader input)", "class_method_signature": "ProBInstanceProvider.extractCliInformation(\n\t\t\tfinal BufferedReader input)", "testcase": false, "constructor": false, "invocations": ["put", "put", "analyseStdout", "values"]}, "repository": {"repo_id": 5495723, "url": "https://github.com/bendisposto/prob2", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 11, "size": 32880, "license": "licensed"}}