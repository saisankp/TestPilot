{"test_class": {"identifier": "TypeUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "py4j-java/src/test/java/py4j/reflection/TypeUtilTest.java"}, "test_case": {"identifier": "testIsInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIsInstance() {\n\t\tObject object = new ZTest();\n\t\tassertTrue(TypeUtil.isInstanceOf(I0Test.class, object));\n\t\tassertTrue(TypeUtil.isInstanceOf(\"py4j.reflection.I0Test\", object));\n\t\tobject = new ATest();\n\t\tassertFalse(TypeUtil.isInstanceOf(I0Test.class, object));\n\t\tassertFalse(TypeUtil.isInstanceOf(\"py4j.reflection.I0Test\", object));\n\t}", "signature": "void testIsInstance()", "full_signature": "@Test public void testIsInstance()", "class_method_signature": "TypeUtilTest.testIsInstance()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isInstanceOf", "assertTrue", "isInstanceOf", "assertFalse", "isInstanceOf", "assertFalse", "isInstanceOf"]}, "focal_class": {"identifier": "TypeUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Set<String> primitiveTypes;", "modifier": "private static", "type": "Set<String>", "declarator": "primitiveTypes", "var_name": "primitiveTypes"}, {"original_string": "private static Map<String, Class<?>> primitiveClasses;", "modifier": "private static", "type": "Map<String, Class<?>>", "declarator": "primitiveClasses", "var_name": "primitiveClasses"}, {"original_string": "public final static int DISTANCE_FACTOR = 100;", "modifier": "public final static", "type": "int", "declarator": "DISTANCE_FACTOR = 100", "var_name": "DISTANCE_FACTOR"}], "methods": [{"identifier": "computeCharacterConversion", "parameters": "(Class<?> parent, Class<?> child, List<TypeConverter> converters)", "modifiers": "public static", "return": "int", "signature": "int computeCharacterConversion(Class<?> parent, Class<?> child, List<TypeConverter> converters)", "full_signature": "public static int computeCharacterConversion(Class<?> parent, Class<?> child, List<TypeConverter> converters)", "class_method_signature": "TypeUtil.computeCharacterConversion(Class<?> parent, Class<?> child, List<TypeConverter> converters)", "testcase": false, "constructor": false}, {"identifier": "computeDistance", "parameters": "(Class<?> parent, Class<?> child)", "modifiers": "public static", "return": "int", "signature": "int computeDistance(Class<?> parent, Class<?> child)", "full_signature": "public static int computeDistance(Class<?> parent, Class<?> child)", "class_method_signature": "TypeUtil.computeDistance(Class<?> parent, Class<?> child)", "testcase": false, "constructor": false}, {"identifier": "computeInterfaceDistance", "parameters": "(Class<?> parent, Class<?> child, Set<String> visitedInterfaces,\n\t\t\tList<? extends Class<?>> interfacesToVisit)", "modifiers": "private static", "return": "int", "signature": "int computeInterfaceDistance(Class<?> parent, Class<?> child, Set<String> visitedInterfaces,\n\t\t\tList<? extends Class<?>> interfacesToVisit)", "full_signature": "private static int computeInterfaceDistance(Class<?> parent, Class<?> child, Set<String> visitedInterfaces,\n\t\t\tList<? extends Class<?>> interfacesToVisit)", "class_method_signature": "TypeUtil.computeInterfaceDistance(Class<?> parent, Class<?> child, Set<String> visitedInterfaces,\n\t\t\tList<? extends Class<?>> interfacesToVisit)", "testcase": false, "constructor": false}, {"identifier": "computeNumericConversion", "parameters": "(Class<?> parent, Class<?> child, List<TypeConverter> converters)", "modifiers": "public static", "return": "int", "signature": "int computeNumericConversion(Class<?> parent, Class<?> child, List<TypeConverter> converters)", "full_signature": "public static int computeNumericConversion(Class<?> parent, Class<?> child, List<TypeConverter> converters)", "class_method_signature": "TypeUtil.computeNumericConversion(Class<?> parent, Class<?> child, List<TypeConverter> converters)", "testcase": false, "constructor": false}, {"identifier": "computeSuperDistance", "parameters": "(Class<?> parent, Class<?> child)", "modifiers": "private static", "return": "int", "signature": "int computeSuperDistance(Class<?> parent, Class<?> child)", "full_signature": "private static int computeSuperDistance(Class<?> parent, Class<?> child)", "class_method_signature": "TypeUtil.computeSuperDistance(Class<?> parent, Class<?> child)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String fqn)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forName(String fqn)", "full_signature": "public static Class<?> forName(String fqn)", "class_method_signature": "TypeUtil.forName(String fqn)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String fqn, JVMView view)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forName(String fqn, JVMView view)", "full_signature": "public static Class<?> forName(String fqn, JVMView view)", "class_method_signature": "TypeUtil.forName(String fqn, JVMView view)", "testcase": false, "constructor": false}, {"identifier": "getClass", "parameters": "(String simpleName, JVMView view)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getClass(String simpleName, JVMView view)", "full_signature": "public static Class<?> getClass(String simpleName, JVMView view)", "class_method_signature": "TypeUtil.getClass(String simpleName, JVMView view)", "testcase": false, "constructor": false}, {"identifier": "getCost", "parameters": "(Class<?> parent, Class<?> child)", "modifiers": "public static", "return": "int", "signature": "int getCost(Class<?> parent, Class<?> child)", "full_signature": "public static int getCost(Class<?> parent, Class<?> child)", "class_method_signature": "TypeUtil.getCost(Class<?> parent, Class<?> child)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(String name, boolean shortName)", "modifiers": "public static", "return": "String", "signature": "String getName(String name, boolean shortName)", "full_signature": "public static String getName(String name, boolean shortName)", "class_method_signature": "TypeUtil.getName(String name, boolean shortName)", "testcase": false, "constructor": false}, {"identifier": "getNames", "parameters": "(Class<?>[] classes)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getNames(Class<?>[] classes)", "full_signature": "public static List<String> getNames(Class<?>[] classes)", "class_method_signature": "TypeUtil.getNames(Class<?>[] classes)", "testcase": false, "constructor": false}, {"identifier": "getNextInterfaces", "parameters": "(Class<?> clazz, List<Class<?>> nextInterfaces,\n\t\t\tSet<String> visitedInterfaces)", "modifiers": "private static", "return": "void", "signature": "void getNextInterfaces(Class<?> clazz, List<Class<?>> nextInterfaces,\n\t\t\tSet<String> visitedInterfaces)", "full_signature": "private static void getNextInterfaces(Class<?> clazz, List<Class<?>> nextInterfaces,\n\t\t\tSet<String> visitedInterfaces)", "class_method_signature": "TypeUtil.getNextInterfaces(Class<?> clazz, List<Class<?>> nextInterfaces,\n\t\t\tSet<String> visitedInterfaces)", "testcase": false, "constructor": false}, {"identifier": "getPackage", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String getPackage(String name)", "full_signature": "public static String getPackage(String name)", "class_method_signature": "TypeUtil.getPackage(String name)", "testcase": false, "constructor": false}, {"identifier": "getPoint", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "int", "signature": "int getPoint(Class<?> clazz)", "full_signature": "public static int getPoint(Class<?> clazz)", "class_method_signature": "TypeUtil.getPoint(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isBoolean", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBoolean(Class<?> clazz)", "full_signature": "public static boolean isBoolean(Class<?> clazz)", "class_method_signature": "TypeUtil.isBoolean(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isByte", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isByte(Class<?> clazz)", "full_signature": "public static boolean isByte(Class<?> clazz)", "class_method_signature": "TypeUtil.isByte(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isCharacter", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCharacter(Class<?> clazz)", "full_signature": "public static boolean isCharacter(Class<?> clazz)", "class_method_signature": "TypeUtil.isCharacter(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isDouble", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDouble(Class<?> clazz)", "full_signature": "public static boolean isDouble(Class<?> clazz)", "class_method_signature": "TypeUtil.isDouble(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isFloat", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFloat(Class<?> clazz)", "full_signature": "public static boolean isFloat(Class<?> clazz)", "class_method_signature": "TypeUtil.isFloat(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isInteger", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInteger(Class<?> clazz)", "full_signature": "public static boolean isInteger(Class<?> clazz)", "class_method_signature": "TypeUtil.isInteger(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isLong", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLong(Class<?> clazz)", "full_signature": "public static boolean isLong(Class<?> clazz)", "class_method_signature": "TypeUtil.isLong(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumeric(Class<?> clazz)", "full_signature": "public static boolean isNumeric(Class<?> clazz)", "class_method_signature": "TypeUtil.isNumeric(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isShort", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isShort(Class<?> clazz)", "full_signature": "public static boolean isShort(Class<?> clazz)", "class_method_signature": "TypeUtil.isShort(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isInstanceOf", "parameters": "(Class<?> clazz, Object object)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInstanceOf(Class<?> clazz, Object object)", "full_signature": "public static boolean isInstanceOf(Class<?> clazz, Object object)", "class_method_signature": "TypeUtil.isInstanceOf(Class<?> clazz, Object object)", "testcase": false, "constructor": false}, {"identifier": "isInstanceOf", "parameters": "(String classFQN, Object object)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInstanceOf(String classFQN, Object object)", "full_signature": "public static boolean isInstanceOf(String classFQN, Object object)", "class_method_signature": "TypeUtil.isInstanceOf(String classFQN, Object object)", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/reflection/TypeUtil.java"}, "focal_method": {"identifier": "isInstanceOf", "parameters": "(Class<?> clazz, Object object)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isInstanceOf(Class<?> clazz, Object object) {\n\t\treturn clazz.isInstance(object);\n\t}", "signature": "boolean isInstanceOf(Class<?> clazz, Object object)", "full_signature": "public static boolean isInstanceOf(Class<?> clazz, Object object)", "class_method_signature": "TypeUtil.isInstanceOf(Class<?> clazz, Object object)", "testcase": false, "constructor": false, "invocations": ["isInstance"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}