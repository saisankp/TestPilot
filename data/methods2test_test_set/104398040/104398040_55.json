{"test_class": {"identifier": "MavenGoalTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private InvocationRequest request = new DefaultInvocationRequest();", "modifier": "@Mock\n    private", "type": "InvocationRequest", "declarator": "request = new DefaultInvocationRequest()", "var_name": "request"}, {"original_string": "@Mock\n    private Invoker invoker = new DefaultInvoker();", "modifier": "@Mock\n    private", "type": "Invoker", "declarator": "invoker = new DefaultInvoker()", "var_name": "invoker"}, {"original_string": "@Mock\n    private MultipleOutputHandler multipleOutputHandler = new MultipleOutputHandler();", "modifier": "@Mock\n    private", "type": "MultipleOutputHandler", "declarator": "multipleOutputHandler = new MultipleOutputHandler()", "var_name": "multipleOutputHandler"}, {"original_string": "@Mock\n    private File absoluteFile = new File(\"absolute_path\");", "modifier": "@Mock\n    private", "type": "File", "declarator": "absoluteFile = new File(\"absolute_path\")", "var_name": "absoluteFile"}, {"original_string": "@InjectMocks\n    private MavenGoal mavenGoal = new MavenGoal();", "modifier": "@InjectMocks\n    private", "type": "MavenGoal", "declarator": "mavenGoal = new MavenGoal()", "var_name": "mavenGoal"}], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/maven/MavenGoalTest.java"}, "test_case": {"identifier": "isInvokerExceptionWithResultDataIfNonZeroExitCodeAndHandlerGetResultIsValid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isInvokerExceptionWithResultDataIfNonZeroExitCodeAndHandlerGetResultIsValid() throws MavenInvocationException {\n        InvocationResult r = Mockito.mock(InvocationResult.class);\n        Map<Class<? extends MavenInvocationOutputHandler>, Object> value = new HashMap<Class<? extends MavenInvocationOutputHandler>, Object>();\n        value.put(new GenericErrorsOutputHandler().getClass(), \"Hello!\");\n        CommandLineException invokerException = new CommandLineException(\"test error\");\n        Mockito.when(multipleOutputHandler.getResult()).thenReturn(value);\n        Mockito.when(r.getExitCode()).thenReturn(1);\n        Mockito.when(r.getExecutionException()).thenReturn(invokerException);\n        Mockito.when(invoker.execute(request)).thenReturn(r);\n        TUExecutionResult result = mavenGoal.execution(new File(\"/blah/pom.xml\"), null);\n        assertEquals(result.getException(), invokerException);\n        assertEquals(result.getValue(), value);\n    }", "signature": "void isInvokerExceptionWithResultDataIfNonZeroExitCodeAndHandlerGetResultIsValid()", "full_signature": "@Test public void isInvokerExceptionWithResultDataIfNonZeroExitCodeAndHandlerGetResultIsValid()", "class_method_signature": "MavenGoalTest.isInvokerExceptionWithResultDataIfNonZeroExitCodeAndHandlerGetResultIsValid()", "testcase": true, "constructor": false, "invocations": ["mock", "put", "getClass", "thenReturn", "when", "getResult", "thenReturn", "when", "getExitCode", "thenReturn", "when", "getExecutionException", "thenReturn", "when", "execute", "execution", "assertEquals", "getException", "assertEquals", "getValue"]}, "focal_class": {"identifier": "MavenGoal", "superclass": "extends TransformationUtility<MavenGoal>", "interfaces": "", "fields": [{"original_string": "private static final String DESCRIPTION = \"Execute Maven goal \";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Execute Maven goal \"", "var_name": "DESCRIPTION"}, {"original_string": "private String[] goals = {};", "modifier": "private", "type": "String[]", "declarator": "goals = {}", "var_name": "goals"}, {"original_string": "private Properties properties = null;", "modifier": "private", "type": "Properties", "declarator": "properties = null", "var_name": "properties"}, {"original_string": "private MavenInvocationOutputHandler[] outputHandlers = {};", "modifier": "private", "type": "MavenInvocationOutputHandler[]", "declarator": "outputHandlers = {}", "var_name": "outputHandlers"}, {"original_string": "private MultipleOutputHandler multipleOutputHandler = new MultipleOutputHandler();", "modifier": "private", "type": "MultipleOutputHandler", "declarator": "multipleOutputHandler = new MultipleOutputHandler()", "var_name": "multipleOutputHandler"}, {"original_string": "private InvocationRequest request = new DefaultInvocationRequest();", "modifier": "private", "type": "InvocationRequest", "declarator": "request = new DefaultInvocationRequest()", "var_name": "request"}, {"original_string": "private Invoker invoker = new DefaultInvoker();", "modifier": "private", "type": "Invoker", "declarator": "invoker = new DefaultInvoker()", "var_name": "invoker"}, {"original_string": "private boolean warnOnError = false;", "modifier": "private", "type": "boolean", "declarator": "warnOnError = false", "var_name": "warnOnError"}], "methods": [{"identifier": "MavenGoal", "parameters": "()", "modifiers": "public", "return": "", "signature": " MavenGoal()", "full_signature": "public  MavenGoal()", "class_method_signature": "MavenGoal.MavenGoal()", "testcase": false, "constructor": true}, {"identifier": "MavenGoal", "parameters": "(String... goals)", "modifiers": "public", "return": "", "signature": " MavenGoal(String... goals)", "full_signature": "public  MavenGoal(String... goals)", "class_method_signature": "MavenGoal.MavenGoal(String... goals)", "testcase": false, "constructor": true}, {"identifier": "MavenGoal", "parameters": "(String[] goals, MavenInvocationOutputHandler[] outputHandlers)", "modifiers": "public", "return": "", "signature": " MavenGoal(String[] goals, MavenInvocationOutputHandler[] outputHandlers)", "full_signature": "public  MavenGoal(String[] goals, MavenInvocationOutputHandler[] outputHandlers)", "class_method_signature": "MavenGoal.MavenGoal(String[] goals, MavenInvocationOutputHandler[] outputHandlers)", "testcase": false, "constructor": true}, {"identifier": "setGoals", "parameters": "(String... goals)", "modifiers": "public", "return": "MavenGoal", "signature": "MavenGoal setGoals(String... goals)", "full_signature": "public MavenGoal setGoals(String... goals)", "class_method_signature": "MavenGoal.setGoals(String... goals)", "testcase": false, "constructor": false}, {"identifier": "setOutputHandlers", "parameters": "(MavenInvocationOutputHandler... outputHandlers)", "modifiers": "public", "return": "MavenGoal", "signature": "MavenGoal setOutputHandlers(MavenInvocationOutputHandler... outputHandlers)", "full_signature": "public MavenGoal setOutputHandlers(MavenInvocationOutputHandler... outputHandlers)", "class_method_signature": "MavenGoal.setOutputHandlers(MavenInvocationOutputHandler... outputHandlers)", "testcase": false, "constructor": false}, {"identifier": "setProperties", "parameters": "(Properties properties)", "modifiers": "public", "return": "MavenGoal", "signature": "MavenGoal setProperties(Properties properties)", "full_signature": "public MavenGoal setProperties(Properties properties)", "class_method_signature": "MavenGoal.setProperties(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "setWarnOnError", "parameters": "(boolean warnOnError)", "modifiers": "public", "return": "MavenGoal", "signature": "MavenGoal setWarnOnError(boolean warnOnError)", "full_signature": "public MavenGoal setWarnOnError(boolean warnOnError)", "class_method_signature": "MavenGoal.setWarnOnError(boolean warnOnError)", "testcase": false, "constructor": false}, {"identifier": "getGoals", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getGoals()", "full_signature": "public String[] getGoals()", "class_method_signature": "MavenGoal.getGoals()", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties getProperties()", "full_signature": "public Properties getProperties()", "class_method_signature": "MavenGoal.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getOutputHandlers", "parameters": "()", "modifiers": "public", "return": "MavenInvocationOutputHandler[]", "signature": "MavenInvocationOutputHandler[] getOutputHandlers()", "full_signature": "public MavenInvocationOutputHandler[] getOutputHandlers()", "class_method_signature": "MavenGoal.getOutputHandlers()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "MavenGoal.getDescription()", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TUExecutionResult", "signature": "TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "MavenGoal.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "MavenGoal", "signature": "MavenGoal clone()", "full_signature": "@Override public MavenGoal clone()", "class_method_signature": "MavenGoal.clone()", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/maven/MavenGoal.java"}, "focal_method": {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TUExecutionResult", "body": "@Override\n    protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext) {\n\n        // This can be a pom.xml file or a the \"base directory\", the folder where Maven is supposed to run\n        File file = getAbsoluteFile(transformedAppFolder, transformationContext);\n\n        TUExecutionResult result = null;\n        InvocationResult invocationResult = null;\n\n        try {\n            for (MavenInvocationOutputHandler outputHandler : outputHandlers) {\n                multipleOutputHandler.register(outputHandler);\n            }\n\n            if (file.exists() && file.isFile() && file.getName().equals(\"pom.xml\")) {\n                request.setPomFile(file);\n            } else {\n                request.setBaseDirectory(file);\n            }\n\n            request.setGoals(Arrays.asList(goals));\n            request.setOutputHandler(multipleOutputHandler);\n            request.setBatchMode(true);\n\n            if (properties != null && !properties.isEmpty()) {\n                request.setProperties(properties);\n            }\n\n            invocationResult = invoker.execute(request);\n\n            int exitCode = invocationResult.getExitCode();\n            Map<Class<? extends MavenInvocationOutputHandler>, Object> outputHandlersResult = multipleOutputHandler.getResult();\n\n            if (exitCode == 0) {\n                result = TUExecutionResult.value(this, outputHandlersResult);\n            } else {\n                Exception e = invocationResult.getExecutionException();\n                if (e == null) {\n                    e = new TransformationUtilityException(String.format(\"Maven goals %s execution failed with exit code %d\", Arrays.toString(goals), exitCode));\n                }\n                if (warnOnError) {\n                    result = TUExecutionResult.warning(this, e, outputHandlersResult);\n                } else {\n                    result = TUExecutionResult.error(this, e, outputHandlersResult);\n                }\n            }\n        } catch (Exception e) {\n            if (invocationResult != null) {\n                Exception invocationException = invocationResult.getExecutionException();\n                if (invocationException != null) {\n                    result = TUExecutionResult.error(this, invocationException);\n                }\n            }\n\n            if (result == null) {\n                result = TUExecutionResult.error(this, e);\n            }\n        }\n\n        return result;\n    }", "signature": "TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "MavenGoal.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false, "invocations": ["getAbsoluteFile", "register", "exists", "isFile", "equals", "getName", "setPomFile", "setBaseDirectory", "setGoals", "asList", "setOutputHandler", "setBatchMode", "isEmpty", "setProperties", "execute", "getExitCode", "getResult", "value", "getExecutionException", "format", "toString", "warning", "error", "getExecutionException", "error", "error"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}