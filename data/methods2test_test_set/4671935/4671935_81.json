{"test_class": {"identifier": "GeoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final LatLng seattle = new LatLng(47.60, -122.33);", "modifier": "private final", "type": "LatLng", "declarator": "seattle = new LatLng(47.60, -122.33)", "var_name": "seattle"}, {"original_string": "private final LatLng la = new LatLng(34.0, -118.2);", "modifier": "private final", "type": "LatLng", "declarator": "la = new LatLng(34.0, -118.2)", "var_name": "la"}, {"original_string": "private final double bearing = 165.66;", "modifier": "private final", "type": "double", "declarator": "bearing = 165.66", "var_name": "bearing"}, {"original_string": "private final double distance = 1551093.52;", "modifier": "private final", "type": "double", "declarator": "distance = 1551093.52", "var_name": "distance"}], "file": "common/src/test/java/com/platypii/baseline/location/GeoTest.java"}, "test_case": {"identifier": "fastDistance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fastDistance() {\n        // Allow 0.1% error\n        assertEquals(distance, Geo.fastDistance(seattle.latitude, seattle.longitude, la.latitude, la.longitude), 0.001 * distance);\n    }", "signature": "void fastDistance()", "full_signature": "@Test public void fastDistance()", "class_method_signature": "GeoTest.fastDistance()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "fastDistance"]}, "focal_class": {"identifier": "Geo", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double R = 6371000;", "modifier": "private static final", "type": "double", "declarator": "R = 6371000", "var_name": "R"}], "methods": [{"identifier": "distance", "parameters": "(double lat1, double lon1, double lat2, double lon2)", "modifiers": "public static", "return": "double", "signature": "double distance(double lat1, double lon1, double lat2, double lon2)", "full_signature": "public static double distance(double lat1, double lon1, double lat2, double lon2)", "class_method_signature": "Geo.distance(double lat1, double lon1, double lat2, double lon2)", "testcase": false, "constructor": false}, {"identifier": "fastDistance", "parameters": "(double lat1, double lon1, double lat2, double lon2)", "modifiers": "public static", "return": "double", "signature": "double fastDistance(double lat1, double lon1, double lat2, double lon2)", "full_signature": "public static double fastDistance(double lat1, double lon1, double lat2, double lon2)", "class_method_signature": "Geo.fastDistance(double lat1, double lon1, double lat2, double lon2)", "testcase": false, "constructor": false}, {"identifier": "bearing", "parameters": "(double lat1, double lon1, double lat2, double lon2)", "modifiers": "public static", "return": "double", "signature": "double bearing(double lat1, double lon1, double lat2, double lon2)", "full_signature": "public static double bearing(double lat1, double lon1, double lat2, double lon2)", "class_method_signature": "Geo.bearing(double lat1, double lon1, double lat2, double lon2)", "testcase": false, "constructor": false}, {"identifier": "moveDirection", "parameters": "(double latitude, double longitude, double bearing, double distance)", "modifiers": "@NonNull public static", "return": "LatLng", "signature": "LatLng moveDirection(double latitude, double longitude, double bearing, double distance)", "full_signature": "@NonNull public static LatLng moveDirection(double latitude, double longitude, double bearing, double distance)", "class_method_signature": "Geo.moveDirection(double latitude, double longitude, double bearing, double distance)", "testcase": false, "constructor": false}, {"identifier": "mod360", "parameters": "(double degrees)", "modifiers": "private static", "return": "double", "signature": "double mod360(double degrees)", "full_signature": "private static double mod360(double degrees)", "class_method_signature": "Geo.mod360(double degrees)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/location/Geo.java"}, "focal_method": {"identifier": "fastDistance", "parameters": "(double lat1, double lon1, double lat2, double lon2)", "modifiers": "public static", "return": "double", "body": "public static double fastDistance(double lat1, double lon1, double lat2, double lon2) {\n        final double lat1r = Math.toRadians(lat1);\n        final double lat2r = Math.toRadians(lat2);\n        final double delta_lon = Math.toRadians(lon2 - lon1);\n\n        final double x = delta_lon * Math.cos((lat1r + lat2r) / 2);\n        final double y = lat2r - lat1r;\n\n        return R * Math.sqrt(x * x + y * y);\n    }", "signature": "double fastDistance(double lat1, double lon1, double lat2, double lon2)", "full_signature": "public static double fastDistance(double lat1, double lon1, double lat2, double lon2)", "class_method_signature": "Geo.fastDistance(double lat1, double lon1, double lat2, double lon2)", "testcase": false, "constructor": false, "invocations": ["toRadians", "toRadians", "toRadians", "cos", "sqrt"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}