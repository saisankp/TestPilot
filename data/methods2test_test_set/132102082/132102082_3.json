{"test_class": {"identifier": "TextUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "smali/util/src/test/java/org/jf/util/TextUtilsTest.java"}, "test_case": {"identifier": "testNormalizeWhitespace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNormalizeWhitespace() {\n        Assert.assertEquals(\"\", TextUtils.normalizeWhitespace(\" \"));\n        Assert.assertEquals(\"hello\", TextUtils.normalizeWhitespace(\"hello \"));\n        Assert.assertEquals(\"hello\", TextUtils.normalizeWhitespace(\" hello\"));\n        Assert.assertEquals(\"hello\", TextUtils.normalizeWhitespace(\" hello \"));\n        Assert.assertEquals(\"hello\\nworld\", TextUtils.normalizeWhitespace(\"hello \\n \\n world\"));\n    }", "signature": "void testNormalizeWhitespace()", "full_signature": "@Test public void testNormalizeWhitespace()", "class_method_signature": "TextUtilsTest.testNormalizeWhitespace()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "normalizeWhitespace", "assertEquals", "normalizeWhitespace", "assertEquals", "normalizeWhitespace", "assertEquals", "normalizeWhitespace", "assertEquals", "normalizeWhitespace"]}, "focal_class": {"identifier": "TextUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String newline = System.getProperty(\"line.separator\");", "modifier": "private static", "type": "String", "declarator": "newline = System.getProperty(\"line.separator\")", "var_name": "newline"}], "methods": [{"identifier": "normalizeNewlines", "parameters": "(@Nonnull String source)", "modifiers": "@Nonnull public static", "return": "String", "signature": "String normalizeNewlines(@Nonnull String source)", "full_signature": "@Nonnull public static String normalizeNewlines(@Nonnull String source)", "class_method_signature": "TextUtils.normalizeNewlines(@Nonnull String source)", "testcase": false, "constructor": false}, {"identifier": "normalizeNewlines", "parameters": "(@Nonnull String source, String newlineValue)", "modifiers": "@Nonnull public static", "return": "String", "signature": "String normalizeNewlines(@Nonnull String source, String newlineValue)", "full_signature": "@Nonnull public static String normalizeNewlines(@Nonnull String source, String newlineValue)", "class_method_signature": "TextUtils.normalizeNewlines(@Nonnull String source, String newlineValue)", "testcase": false, "constructor": false}, {"identifier": "normalizeWhitespace", "parameters": "(@Nonnull String source)", "modifiers": "@Nonnull public static", "return": "String", "signature": "String normalizeWhitespace(@Nonnull String source)", "full_signature": "@Nonnull public static String normalizeWhitespace(@Nonnull String source)", "class_method_signature": "TextUtils.normalizeWhitespace(@Nonnull String source)", "testcase": false, "constructor": false}, {"identifier": "stripComments", "parameters": "(@Nonnull String source)", "modifiers": "@Nonnull public static", "return": "String", "signature": "String stripComments(@Nonnull String source)", "full_signature": "@Nonnull public static String stripComments(@Nonnull String source)", "class_method_signature": "TextUtils.stripComments(@Nonnull String source)", "testcase": false, "constructor": false}], "file": "smali/util/src/main/java/org/jf/util/TextUtils.java"}, "focal_method": {"identifier": "normalizeWhitespace", "parameters": "(@Nonnull String source)", "modifiers": "@Nonnull public static", "return": "String", "body": "@Nonnull\n    public static String normalizeWhitespace(@Nonnull String source) {\n        // Go to native system new lines so that ^/$ work correctly\n        source = normalizeNewlines(source);\n\n        // Remove all suffix/prefix whitespace\n        Pattern pattern = Pattern.compile(\"((^[ \\t]+)|([ \\t]+$))\", Pattern.MULTILINE);\n        Matcher matcher = pattern.matcher(source);\n        source = matcher.replaceAll(\"\");\n\n        // Remove all empty lines\n        Pattern pattern2 = Pattern.compile(\"^\\r?\\n?\", Pattern.MULTILINE);\n        Matcher matcher2 = pattern2.matcher(source);\n        source = matcher2.replaceAll(\"\");\n\n        // Remove a trailing new line, if present\n        Pattern pattern3 = Pattern.compile(\"\\r?\\n?$\");\n        Matcher matcher3 = pattern3.matcher(source);\n        source = matcher3.replaceAll(\"\");\n\n        // Go back to unix-style \\n newlines\n        source = normalizeNewlines(source, \"\\n\");\n        return source;\n    }", "signature": "String normalizeWhitespace(@Nonnull String source)", "full_signature": "@Nonnull public static String normalizeWhitespace(@Nonnull String source)", "class_method_signature": "TextUtils.normalizeWhitespace(@Nonnull String source)", "testcase": false, "constructor": false, "invocations": ["normalizeNewlines", "compile", "matcher", "replaceAll", "compile", "matcher", "replaceAll", "compile", "matcher", "replaceAll", "normalizeNewlines"]}, "repository": {"repo_id": 132102082, "url": "https://github.com/marshalyauly/vmp", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 12726, "license": "licensed"}}