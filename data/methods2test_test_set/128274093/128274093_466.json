{"test_class": {"identifier": "FlowableReplayTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/flowable/FlowableReplayTest.java"}, "test_case": {"identifier": "testNoMissingBackpressureException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoMissingBackpressureException() {\n        final int m = 4 * 1000 * 1000;\n        Flowable<Integer> firehose = Flowable.unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> t) {\n                t.onSubscribe(new BooleanSubscription());\n                for (int i = 0; i < m; i++) {\n                    t.onNext(i);\n                }\n                t.onComplete();\n            }\n        });\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        firehose.replay().autoConnect().observeOn(Schedulers.computation()).takeLast(100).subscribe(ts);\n\n        ts.awaitTerminalEvent(3, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        ts.assertTerminated();\n\n        assertEquals(100, ts.values().size());\n    }", "signature": "void testNoMissingBackpressureException()", "full_signature": "@Test public void testNoMissingBackpressureException()", "class_method_signature": "FlowableReplayTest.testNoMissingBackpressureException()", "testcase": true, "constructor": false, "invocations": ["unsafeCreate", "onSubscribe", "onNext", "onComplete", "subscribe", "takeLast", "observeOn", "autoConnect", "replay", "computation", "awaitTerminalEvent", "assertNoErrors", "assertTerminated", "assertEquals", "size", "values"]}, "focal_class": {"identifier": "FlowableReplay", "superclass": "extends ConnectableFlowable<T>", "interfaces": "implements HasUpstreamPublisher<T>, Disposable", "fields": [{"original_string": "final Flowable<T> source;", "modifier": "final", "type": "Flowable<T>", "declarator": "source", "var_name": "source"}, {"original_string": "final AtomicReference<ReplaySubscriber<T>> current;", "modifier": "final", "type": "AtomicReference<ReplaySubscriber<T>>", "declarator": "current", "var_name": "current"}, {"original_string": "final Callable<? extends ReplayBuffer<T>> bufferFactory;", "modifier": "final", "type": "Callable<? extends ReplayBuffer<T>>", "declarator": "bufferFactory", "var_name": "bufferFactory"}, {"original_string": "final Publisher<T> onSubscribe;", "modifier": "final", "type": "Publisher<T>", "declarator": "onSubscribe", "var_name": "onSubscribe"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final Callable DEFAULT_UNBOUNDED_FACTORY = new DefaultUnboundedFactory();", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "Callable", "declarator": "DEFAULT_UNBOUNDED_FACTORY = new DefaultUnboundedFactory()", "var_name": "DEFAULT_UNBOUNDED_FACTORY"}], "methods": [{"identifier": "multicastSelector", "parameters": "(\n            final Callable<? extends ConnectableFlowable<U>> connectableFactory,\n            final Function<? super Flowable<U>, ? extends Publisher<R>> selector)", "modifiers": "public static", "return": "Flowable<R>", "signature": "Flowable<R> multicastSelector(\n            final Callable<? extends ConnectableFlowable<U>> connectableFactory,\n            final Function<? super Flowable<U>, ? extends Publisher<R>> selector)", "full_signature": "public static Flowable<R> multicastSelector(\n            final Callable<? extends ConnectableFlowable<U>> connectableFactory,\n            final Function<? super Flowable<U>, ? extends Publisher<R>> selector)", "class_method_signature": "FlowableReplay.multicastSelector(\n            final Callable<? extends ConnectableFlowable<U>> connectableFactory,\n            final Function<? super Flowable<U>, ? extends Publisher<R>> selector)", "testcase": false, "constructor": false}, {"identifier": "observeOn", "parameters": "(final ConnectableFlowable<T> cf, final Scheduler scheduler)", "modifiers": "public static", "return": "ConnectableFlowable<T>", "signature": "ConnectableFlowable<T> observeOn(final ConnectableFlowable<T> cf, final Scheduler scheduler)", "full_signature": "public static ConnectableFlowable<T> observeOn(final ConnectableFlowable<T> cf, final Scheduler scheduler)", "class_method_signature": "FlowableReplay.observeOn(final ConnectableFlowable<T> cf, final Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "createFrom", "parameters": "(Flowable<? extends T> source)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "ConnectableFlowable<T>", "signature": "ConnectableFlowable<T> createFrom(Flowable<? extends T> source)", "full_signature": "@SuppressWarnings(\"unchecked\") public static ConnectableFlowable<T> createFrom(Flowable<? extends T> source)", "class_method_signature": "FlowableReplay.createFrom(Flowable<? extends T> source)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Flowable<T> source,\n            final int bufferSize)", "modifiers": "public static", "return": "ConnectableFlowable<T>", "signature": "ConnectableFlowable<T> create(Flowable<T> source,\n            final int bufferSize)", "full_signature": "public static ConnectableFlowable<T> create(Flowable<T> source,\n            final int bufferSize)", "class_method_signature": "FlowableReplay.create(Flowable<T> source,\n            final int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Flowable<T> source,\n            long maxAge, TimeUnit unit, Scheduler scheduler)", "modifiers": "public static", "return": "ConnectableFlowable<T>", "signature": "ConnectableFlowable<T> create(Flowable<T> source,\n            long maxAge, TimeUnit unit, Scheduler scheduler)", "full_signature": "public static ConnectableFlowable<T> create(Flowable<T> source,\n            long maxAge, TimeUnit unit, Scheduler scheduler)", "class_method_signature": "FlowableReplay.create(Flowable<T> source,\n            long maxAge, TimeUnit unit, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Flowable<T> source,\n            final long maxAge, final TimeUnit unit, final Scheduler scheduler, final int bufferSize)", "modifiers": "public static", "return": "ConnectableFlowable<T>", "signature": "ConnectableFlowable<T> create(Flowable<T> source,\n            final long maxAge, final TimeUnit unit, final Scheduler scheduler, final int bufferSize)", "full_signature": "public static ConnectableFlowable<T> create(Flowable<T> source,\n            final long maxAge, final TimeUnit unit, final Scheduler scheduler, final int bufferSize)", "class_method_signature": "FlowableReplay.create(Flowable<T> source,\n            final long maxAge, final TimeUnit unit, final Scheduler scheduler, final int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Flowable<T> source,\n            final Callable<? extends ReplayBuffer<T>> bufferFactory)", "modifiers": "static", "return": "ConnectableFlowable<T>", "signature": "ConnectableFlowable<T> create(Flowable<T> source,\n            final Callable<? extends ReplayBuffer<T>> bufferFactory)", "full_signature": "static ConnectableFlowable<T> create(Flowable<T> source,\n            final Callable<? extends ReplayBuffer<T>> bufferFactory)", "class_method_signature": "FlowableReplay.create(Flowable<T> source,\n            final Callable<? extends ReplayBuffer<T>> bufferFactory)", "testcase": false, "constructor": false}, {"identifier": "FlowableReplay", "parameters": "(Publisher<T> onSubscribe, Flowable<T> source,\n            final AtomicReference<ReplaySubscriber<T>> current,\n            final Callable<? extends ReplayBuffer<T>> bufferFactory)", "modifiers": "private", "return": "", "signature": " FlowableReplay(Publisher<T> onSubscribe, Flowable<T> source,\n            final AtomicReference<ReplaySubscriber<T>> current,\n            final Callable<? extends ReplayBuffer<T>> bufferFactory)", "full_signature": "private  FlowableReplay(Publisher<T> onSubscribe, Flowable<T> source,\n            final AtomicReference<ReplaySubscriber<T>> current,\n            final Callable<? extends ReplayBuffer<T>> bufferFactory)", "class_method_signature": "FlowableReplay.FlowableReplay(Publisher<T> onSubscribe, Flowable<T> source,\n            final AtomicReference<ReplaySubscriber<T>> current,\n            final Callable<? extends ReplayBuffer<T>> bufferFactory)", "testcase": false, "constructor": true}, {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "Publisher<T>", "signature": "Publisher<T> source()", "full_signature": "@Override public Publisher<T> source()", "class_method_signature": "FlowableReplay.source()", "testcase": false, "constructor": false}, {"identifier": "subscribeActual", "parameters": "(Subscriber<? super T> s)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Subscriber<? super T> s)", "full_signature": "@Override protected void subscribeActual(Subscriber<? super T> s)", "class_method_signature": "FlowableReplay.subscribeActual(Subscriber<? super T> s)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "FlowableReplay.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "FlowableReplay.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(Consumer<? super Disposable> connection)", "modifiers": "@Override public", "return": "void", "signature": "void connect(Consumer<? super Disposable> connection)", "full_signature": "@Override public void connect(Consumer<? super Disposable> connection)", "class_method_signature": "FlowableReplay.connect(Consumer<? super Disposable> connection)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java"}, "focal_method": {"identifier": "observeOn", "parameters": "(final ConnectableFlowable<T> cf, final Scheduler scheduler)", "modifiers": "public static", "return": "ConnectableFlowable<T>", "body": "public static <T> ConnectableFlowable<T> observeOn(final ConnectableFlowable<T> cf, final Scheduler scheduler) {\n        final Flowable<T> observable = cf.observeOn(scheduler);\n        return RxJavaPlugins.onAssembly(new ConnectableFlowableReplay<T>(cf, observable));\n    }", "signature": "ConnectableFlowable<T> observeOn(final ConnectableFlowable<T> cf, final Scheduler scheduler)", "full_signature": "public static ConnectableFlowable<T> observeOn(final ConnectableFlowable<T> cf, final Scheduler scheduler)", "class_method_signature": "FlowableReplay.observeOn(final ConnectableFlowable<T> cf, final Scheduler scheduler)", "testcase": false, "constructor": false, "invocations": ["observeOn", "onAssembly"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}