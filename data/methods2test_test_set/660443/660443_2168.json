{"test_class": {"identifier": "MDLV2000WriterTest", "superclass": "extends ChemObjectIOTest", "interfaces": "", "fields": [{"original_string": "private static IChemObjectBuilder builder;", "modifier": "private static", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}], "file": "storage/ctab/src/test/java/org/openscience/cdk/io/MDLV2000WriterTest.java"}, "test_case": {"identifier": "dataSgroupRoundTrip", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dataSgroupRoundTrip() {\n      String path = \"/data/mdl/hbr_acoh_mix.mol\";\n      try (InputStream in = getClass().getResourceAsStream(path)) {\n        MDLV2000Reader     mdlr    = new MDLV2000Reader(in);\n        IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();\n        IAtomContainer     mol     = mdlr.read(builder.newAtomContainer());\n        try (StringWriter sw = new StringWriter();\n             MDLV2000Writer writer = new MDLV2000Writer(sw)) {\n          writer.write(mol);\n          String output = sw.toString();\n          assertThat(output,\n                     CoreMatchers.containsString(\"M  SDT   3 WEIGHT_PERCENT                N %\"));\n          assertThat(output,\n                     CoreMatchers.containsString(\"M  SED   3 33%\"));\n        }\n      } catch (IOException | CDKException e) {\n        Assert.fail(e.getMessage());\n      }\n    }", "signature": "void dataSgroupRoundTrip()", "full_signature": "@Test public void dataSgroupRoundTrip()", "class_method_signature": "MDLV2000WriterTest.dataSgroupRoundTrip()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "getInstance", "read", "newAtomContainer", "write", "toString", "assertThat", "containsString", "assertThat", "containsString", "fail", "getMessage"]}, "focal_class": {"identifier": "MDLV2000Writer", "superclass": "extends DefaultChemObjectWriter", "interfaces": "", "fields": [{"original_string": "public static final String OptForceWriteAs2DCoordinates = \"ForceWriteAs2DCoordinates\";", "modifier": "public static final", "type": "String", "declarator": "OptForceWriteAs2DCoordinates = \"ForceWriteAs2DCoordinates\"", "var_name": "OptForceWriteAs2DCoordinates"}, {"original_string": "public static final String OptWriteMajorIsotopes        = \"WriteMajorIsotopes\";", "modifier": "public static final", "type": "String", "declarator": "OptWriteMajorIsotopes        = \"WriteMajorIsotopes\"", "var_name": "OptWriteMajorIsotopes"}, {"original_string": "public static final String OptWriteAromaticBondTypes    = \"WriteAromaticBondTypes\";", "modifier": "public static final", "type": "String", "declarator": "OptWriteAromaticBondTypes    = \"WriteAromaticBondTypes\"", "var_name": "OptWriteAromaticBondTypes"}, {"original_string": "public static final String OptWriteQueryFormatValencies = \"WriteQueryFormatValencies\";", "modifier": "public static final", "type": "String", "declarator": "OptWriteQueryFormatValencies = \"WriteQueryFormatValencies\"", "var_name": "OptWriteQueryFormatValencies"}, {"original_string": "public static final String OptWriteDefaultProperties    = \"WriteDefaultProperties\";", "modifier": "public static final", "type": "String", "declarator": "OptWriteDefaultProperties    = \"WriteDefaultProperties\"", "var_name": "OptWriteDefaultProperties"}, {"original_string": "public static final String OptProgramName               = \"ProgramName\";", "modifier": "public static final", "type": "String", "declarator": "OptProgramName               = \"ProgramName\"", "var_name": "OptProgramName"}, {"original_string": "private final static ILoggingTool logger = LoggingToolFactory.createLoggingTool(MDLV2000Writer.class);", "modifier": "private final static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MDLV2000Writer.class)", "var_name": "logger"}, {"original_string": "private Pattern NUMERED_R_GROUP = Pattern.compile(\"R(\\\\d+)\");", "modifier": "private", "type": "Pattern", "declarator": "NUMERED_R_GROUP = Pattern.compile(\"R(\\\\d+)\")", "var_name": "NUMERED_R_GROUP"}, {"original_string": "private static final int NN8   = 8;", "modifier": "private static final", "type": "int", "declarator": "NN8   = 8", "var_name": "NN8"}, {"original_string": "private static final int WIDTH = 3;", "modifier": "private static final", "type": "int", "declarator": "WIDTH = 3", "var_name": "WIDTH"}, {"original_string": "private BooleanIOSetting forceWriteAs2DCoords;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "forceWriteAs2DCoords", "var_name": "forceWriteAs2DCoords"}, {"original_string": "private BooleanIOSetting writeMajorIsotopes;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "writeMajorIsotopes", "var_name": "writeMajorIsotopes"}, {"original_string": "private BooleanIOSetting writeAromaticBondTypes;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "writeAromaticBondTypes", "var_name": "writeAromaticBondTypes"}, {"original_string": "@Deprecated\n    private BooleanIOSetting writeQueryFormatValencies;", "modifier": "@Deprecated\n    private", "type": "BooleanIOSetting", "declarator": "writeQueryFormatValencies", "var_name": "writeQueryFormatValencies"}, {"original_string": "private BooleanIOSetting writeDefaultProps;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "writeDefaultProps", "var_name": "writeDefaultProps"}, {"original_string": "private StringIOSetting programNameOpt;", "modifier": "private", "type": "StringIOSetting", "declarator": "programNameOpt", "var_name": "programNameOpt"}, {"original_string": "private BufferedWriter writer;", "modifier": "private", "type": "BufferedWriter", "declarator": "writer", "var_name": "writer"}], "methods": [{"identifier": "MDLV2000Writer", "parameters": "(Writer out)", "modifiers": "public", "return": "", "signature": " MDLV2000Writer(Writer out)", "full_signature": "public  MDLV2000Writer(Writer out)", "class_method_signature": "MDLV2000Writer.MDLV2000Writer(Writer out)", "testcase": false, "constructor": true}, {"identifier": "MDLV2000Writer", "parameters": "(OutputStream output)", "modifiers": "public", "return": "", "signature": " MDLV2000Writer(OutputStream output)", "full_signature": "public  MDLV2000Writer(OutputStream output)", "class_method_signature": "MDLV2000Writer.MDLV2000Writer(OutputStream output)", "testcase": false, "constructor": true}, {"identifier": "MDLV2000Writer", "parameters": "()", "modifiers": "public", "return": "", "signature": " MDLV2000Writer()", "full_signature": "public  MDLV2000Writer()", "class_method_signature": "MDLV2000Writer.MDLV2000Writer()", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "MDLV2000Writer.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setWriter", "parameters": "(Writer out)", "modifiers": "@Override public", "return": "void", "signature": "void setWriter(Writer out)", "full_signature": "@Override public void setWriter(Writer out)", "class_method_signature": "MDLV2000Writer.setWriter(Writer out)", "testcase": false, "constructor": false}, {"identifier": "setWriter", "parameters": "(OutputStream output)", "modifiers": "@Override public", "return": "void", "signature": "void setWriter(OutputStream output)", "full_signature": "@Override public void setWriter(OutputStream output)", "class_method_signature": "MDLV2000Writer.setWriter(OutputStream output)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MDLV2000Writer.close()", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "MDLV2000Writer.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(IChemObject object)", "modifiers": "@Override public", "return": "void", "signature": "void write(IChemObject object)", "full_signature": "@Override public void write(IChemObject object)", "class_method_signature": "MDLV2000Writer.write(IChemObject object)", "testcase": false, "constructor": false}, {"identifier": "writeChemFile", "parameters": "(IChemFile file)", "modifiers": "private", "return": "void", "signature": "void writeChemFile(IChemFile file)", "full_signature": "private void writeChemFile(IChemFile file)", "class_method_signature": "MDLV2000Writer.writeChemFile(IChemFile file)", "testcase": false, "constructor": false}, {"identifier": "getProgName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getProgName()", "full_signature": "private String getProgName()", "class_method_signature": "MDLV2000Writer.getProgName()", "testcase": false, "constructor": false}, {"identifier": "writeMolecule", "parameters": "(IAtomContainer container)", "modifiers": "public", "return": "void", "signature": "void writeMolecule(IAtomContainer container)", "full_signature": "public void writeMolecule(IAtomContainer container)", "class_method_signature": "MDLV2000Writer.writeMolecule(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "writeAtomLists", "parameters": "(Map<Integer, IAtom> atomLists, BufferedWriter writer)", "modifiers": "private static", "return": "void", "signature": "void writeAtomLists(Map<Integer, IAtom> atomLists, BufferedWriter writer)", "full_signature": "private static void writeAtomLists(Map<Integer, IAtom> atomLists, BufferedWriter writer)", "class_method_signature": "MDLV2000Writer.writeAtomLists(Map<Integer, IAtom> atomLists, BufferedWriter writer)", "testcase": false, "constructor": false}, {"identifier": "isValidAtomListExpression", "parameters": "(Expr exp)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidAtomListExpression(Expr exp)", "full_signature": "private static boolean isValidAtomListExpression(Expr exp)", "class_method_signature": "MDLV2000Writer.isValidAtomListExpression(Expr exp)", "testcase": false, "constructor": false}, {"identifier": "allOrsOfAllowedTypes", "parameters": "(Expr expr, Set<Expr.Type> allowedTypes)", "modifiers": "private static", "return": "boolean", "signature": "boolean allOrsOfAllowedTypes(Expr expr, Set<Expr.Type> allowedTypes)", "full_signature": "private static boolean allOrsOfAllowedTypes(Expr expr, Set<Expr.Type> allowedTypes)", "class_method_signature": "MDLV2000Writer.allOrsOfAllowedTypes(Expr expr, Set<Expr.Type> allowedTypes)", "testcase": false, "constructor": false}, {"identifier": "getAtomList", "parameters": "(Expr exp)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> getAtomList(Expr exp)", "full_signature": "private static List<String> getAtomList(Expr exp)", "class_method_signature": "MDLV2000Writer.getAtomList(Expr exp)", "testcase": false, "constructor": false}, {"identifier": "getAtomListNumbers", "parameters": "(Expr exp)", "modifiers": "private static", "return": "List<Integer>", "signature": "List<Integer> getAtomListNumbers(Expr exp)", "full_signature": "private static List<Integer> getAtomListNumbers(Expr exp)", "class_method_signature": "MDLV2000Writer.getAtomListNumbers(Expr exp)", "testcase": false, "constructor": false}, {"identifier": "getLeafNodes", "parameters": "(Expr exr, List<Expr> elist)", "modifiers": "private static", "return": "void", "signature": "void getLeafNodes(Expr exr, List<Expr> elist)", "full_signature": "private static void getLeafNodes(Expr exr, List<Expr> elist)", "class_method_signature": "MDLV2000Writer.getLeafNodes(Expr exr, List<Expr> elist)", "testcase": false, "constructor": false}, {"identifier": "determineCharge", "parameters": "(IAtomContainer mol, IAtom atom)", "modifiers": "private", "return": "int", "signature": "int determineCharge(IAtomContainer mol, IAtom atom)", "full_signature": "private int determineCharge(IAtomContainer mol, IAtom atom)", "class_method_signature": "MDLV2000Writer.determineCharge(IAtomContainer mol, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "determineIsotope", "parameters": "(IAtom atom)", "modifiers": "private", "return": "int", "signature": "int determineIsotope(IAtom atom)", "full_signature": "private int determineIsotope(IAtom atom)", "class_method_signature": "MDLV2000Writer.determineIsotope(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "determineAtomMap", "parameters": "(IAtom atom)", "modifiers": "private", "return": "int", "signature": "int determineAtomMap(IAtom atom)", "full_signature": "private int determineAtomMap(IAtom atom)", "class_method_signature": "MDLV2000Writer.determineAtomMap(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "determineValence", "parameters": "(IAtomContainer container, IAtom atom)", "modifiers": "private", "return": "int", "signature": "int determineValence(IAtomContainer container, IAtom atom)", "full_signature": "private int determineValence(IAtomContainer container, IAtom atom)", "class_method_signature": "MDLV2000Writer.determineValence(IAtomContainer container, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "determineStereoParity", "parameters": "(IAtomContainer container,\n                                      Map<IAtom, ITetrahedralChirality> atomstereo,\n                                      Map<IAtom, Integer> atomindex, IAtom atom)", "modifiers": "private", "return": "int", "signature": "int determineStereoParity(IAtomContainer container,\n                                      Map<IAtom, ITetrahedralChirality> atomstereo,\n                                      Map<IAtom, Integer> atomindex, IAtom atom)", "full_signature": "private int determineStereoParity(IAtomContainer container,\n                                      Map<IAtom, ITetrahedralChirality> atomstereo,\n                                      Map<IAtom, Integer> atomindex, IAtom atom)", "class_method_signature": "MDLV2000Writer.determineStereoParity(IAtomContainer container,\n                                      Map<IAtom, ITetrahedralChirality> atomstereo,\n                                      Map<IAtom, Integer> atomindex, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "isMajorIsotope", "parameters": "(IAtom atom)", "modifiers": "private", "return": "boolean", "signature": "boolean isMajorIsotope(IAtom atom)", "full_signature": "private boolean isMajorIsotope(IAtom atom)", "class_method_signature": "MDLV2000Writer.isMajorIsotope(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "writeSgroups", "parameters": "(IAtomContainer container, BufferedWriter writer, Map<IAtom,Integer> atomidxs)", "modifiers": "private", "return": "void", "signature": "void writeSgroups(IAtomContainer container, BufferedWriter writer, Map<IAtom,Integer> atomidxs)", "full_signature": "private void writeSgroups(IAtomContainer container, BufferedWriter writer, Map<IAtom,Integer> atomidxs)", "class_method_signature": "MDLV2000Writer.writeSgroups(IAtomContainer container, BufferedWriter writer, Map<IAtom,Integer> atomidxs)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(Collection<T> set, int lim)", "modifiers": "private", "return": "List<List<T>>", "signature": "List<List<T>> wrap(Collection<T> set, int lim)", "full_signature": "private List<List<T>> wrap(Collection<T> set, int lim)", "class_method_signature": "MDLV2000Writer.wrap(Collection<T> set, int lim)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfDimensions", "parameters": "(IAtomContainer mol)", "modifiers": "private", "return": "int", "signature": "int getNumberOfDimensions(IAtomContainer mol)", "full_signature": "private int getNumberOfDimensions(IAtomContainer mol)", "class_method_signature": "MDLV2000Writer.getNumberOfDimensions(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "writeRadicalPattern", "parameters": "(Iterator<Map.Entry<Integer, SPIN_MULTIPLICITY>> iterator, int i)", "modifiers": "private", "return": "void", "signature": "void writeRadicalPattern(Iterator<Map.Entry<Integer, SPIN_MULTIPLICITY>> iterator, int i)", "full_signature": "private void writeRadicalPattern(Iterator<Map.Entry<Integer, SPIN_MULTIPLICITY>> iterator, int i)", "class_method_signature": "MDLV2000Writer.writeRadicalPattern(Iterator<Map.Entry<Integer, SPIN_MULTIPLICITY>> iterator, int i)", "testcase": false, "constructor": false}, {"identifier": "formatMDLInt", "parameters": "(int x, int n)", "modifiers": "protected static", "return": "String", "signature": "String formatMDLInt(int x, int n)", "full_signature": "protected static String formatMDLInt(int x, int n)", "class_method_signature": "MDLV2000Writer.formatMDLInt(int x, int n)", "testcase": false, "constructor": false}, {"identifier": "formatMDLFloat", "parameters": "(float fl)", "modifiers": "protected static", "return": "String", "signature": "String formatMDLFloat(float fl)", "full_signature": "protected static String formatMDLFloat(float fl)", "class_method_signature": "MDLV2000Writer.formatMDLFloat(float fl)", "testcase": false, "constructor": false}, {"identifier": "formatMDLString", "parameters": "(String s, int le)", "modifiers": "protected static", "return": "String", "signature": "String formatMDLString(String s, int le)", "full_signature": "protected static String formatMDLString(String s, int le)", "class_method_signature": "MDLV2000Writer.formatMDLString(String s, int le)", "testcase": false, "constructor": false}, {"identifier": "initIOSettings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initIOSettings()", "full_signature": "private void initIOSettings()", "class_method_signature": "MDLV2000Writer.initIOSettings()", "testcase": false, "constructor": false}, {"identifier": "setWriteAromaticBondTypes", "parameters": "(boolean val)", "modifiers": "public", "return": "void", "signature": "void setWriteAromaticBondTypes(boolean val)", "full_signature": "public void setWriteAromaticBondTypes(boolean val)", "class_method_signature": "MDLV2000Writer.setWriteAromaticBondTypes(boolean val)", "testcase": false, "constructor": false}, {"identifier": "customizeJob", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void customizeJob()", "full_signature": "public void customizeJob()", "class_method_signature": "MDLV2000Writer.customizeJob()", "testcase": false, "constructor": false}], "file": "storage/ctab/src/main/java/org/openscience/cdk/io/MDLV2000Writer.java"}, "focal_method": {"identifier": "write", "parameters": "(IChemObject object)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void write(IChemObject object) throws CDKException {\n        customizeJob();\n        try {\n            if (object instanceof IChemFile) {\n                writeChemFile((IChemFile) object);\n                return;\n            } else if (object instanceof IChemModel) {\n                IChemFile file = object.getBuilder().newInstance(IChemFile.class);\n                IChemSequence sequence = object.getBuilder().newInstance(IChemSequence.class);\n                sequence.addChemModel((IChemModel) object);\n                file.addChemSequence(sequence);\n                writeChemFile((IChemFile) file);\n                return;\n            } else if (object instanceof IAtomContainer) {\n                writeMolecule((IAtomContainer) object);\n                return;\n            }\n        } catch (Exception ex) {\n            logger.error(ex.getMessage());\n            logger.debug(ex);\n            throw new CDKException(\"Exception while writing MDL file: \" + ex.getMessage(), ex);\n        }\n        throw new CDKException(\"Only supported is writing of IChemFile, \" + \"IChemModel, and IAtomContainer objects.\");\n    }", "signature": "void write(IChemObject object)", "full_signature": "@Override public void write(IChemObject object)", "class_method_signature": "MDLV2000Writer.write(IChemObject object)", "testcase": false, "constructor": false, "invocations": ["customizeJob", "writeChemFile", "newInstance", "getBuilder", "newInstance", "getBuilder", "addChemModel", "addChemSequence", "writeChemFile", "writeMolecule", "error", "getMessage", "debug", "getMessage"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}