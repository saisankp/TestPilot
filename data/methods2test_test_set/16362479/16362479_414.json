{"test_class": {"identifier": "ClientBackedReadTransactionTest", "superclass": "extends ClientBackedTransactionTest<ClientBackedReadTransaction>", "interfaces": "", "fields": [{"original_string": "private ClientBackedReadTransaction object;", "modifier": "private", "type": "ClientBackedReadTransaction", "declarator": "object", "var_name": "object"}, {"original_string": "@Mock\n    private NormalizedNode<?, ?> data;", "modifier": "@Mock\n    private", "type": "NormalizedNode<?, ?>", "declarator": "data", "var_name": "data"}, {"original_string": "@Mock\n    private ClientActorContext clientContext;", "modifier": "@Mock\n    private", "type": "ClientActorContext", "declarator": "clientContext", "var_name": "clientContext"}, {"original_string": "@Mock\n    private ClientSnapshot delegate;", "modifier": "@Mock\n    private", "type": "ClientSnapshot", "declarator": "delegate", "var_name": "delegate"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/ClientBackedReadTransactionTest.java"}, "test_case": {"identifier": "testExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExists() throws Exception {\n        final ListenableFuture<Boolean> result = object().exists(YangInstanceIdentifier.empty());\n        assertEquals(Boolean.TRUE, result.get());\n    }", "signature": "void testExists()", "full_signature": "@Test public void testExists()", "class_method_signature": "ClientBackedReadTransactionTest.testExists()", "testcase": true, "constructor": false, "invocations": ["exists", "object", "empty", "assertEquals", "get"]}, "focal_class": {"identifier": "ClientBackedReadTransaction", "superclass": "extends ClientBackedTransaction<ClientSnapshot>", "interfaces": "implements DOMStoreReadTransaction", "fields": [{"original_string": "private static final AtomicReferenceFieldUpdater<ClientBackedReadTransaction, ClientBackedTransactionChain>\n        PARENT_UPDATER = AtomicReferenceFieldUpdater.newUpdater(ClientBackedReadTransaction.class,\n            ClientBackedTransactionChain.class, \"parent\");", "modifier": "private static final", "type": "AtomicReferenceFieldUpdater<ClientBackedReadTransaction, ClientBackedTransactionChain>", "declarator": "PARENT_UPDATER = AtomicReferenceFieldUpdater.newUpdater(ClientBackedReadTransaction.class,\n            ClientBackedTransactionChain.class, \"parent\")", "var_name": "PARENT_UPDATER"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private volatile ClientBackedTransactionChain parent;", "modifier": "@SuppressWarnings(\"unused\")\n    private volatile", "type": "ClientBackedTransactionChain", "declarator": "parent", "var_name": "parent"}], "methods": [{"identifier": "ClientBackedReadTransaction", "parameters": "(final ClientSnapshot delegate, final @Nullable ClientBackedTransactionChain parent,\n            final @Nullable Throwable allocationContext)", "modifiers": "", "return": "", "signature": " ClientBackedReadTransaction(final ClientSnapshot delegate, final @Nullable ClientBackedTransactionChain parent,\n            final @Nullable Throwable allocationContext)", "full_signature": "  ClientBackedReadTransaction(final ClientSnapshot delegate, final @Nullable ClientBackedTransactionChain parent,\n            final @Nullable Throwable allocationContext)", "class_method_signature": "ClientBackedReadTransaction.ClientBackedReadTransaction(final ClientSnapshot delegate, final @Nullable ClientBackedTransactionChain parent,\n            final @Nullable Throwable allocationContext)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "FluentFuture<Optional<NormalizedNode<?, ?>>>", "signature": "FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "full_signature": "@Override public FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "class_method_signature": "ClientBackedReadTransaction.read(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "FluentFuture<Boolean>", "signature": "FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "full_signature": "@Override public FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "class_method_signature": "ClientBackedReadTransaction.exists(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ClientBackedReadTransaction.close()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/ClientBackedReadTransaction.java"}, "focal_method": {"identifier": "exists", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override public", "return": "FluentFuture<Boolean>", "body": "@Override\n    public FluentFuture<Boolean> exists(final YangInstanceIdentifier path) {\n        return delegate().exists(path);\n    }", "signature": "FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "full_signature": "@Override public FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "class_method_signature": "ClientBackedReadTransaction.exists(final YangInstanceIdentifier path)", "testcase": false, "constructor": false, "invocations": ["exists", "delegate"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}